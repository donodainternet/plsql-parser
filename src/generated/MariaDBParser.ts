// Generated from ./grammar/mariadb/MariaDBParser.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException";
import { NotNull } from "antlr4ts/Decorators";
import { NoViableAltException } from "antlr4ts/NoViableAltException";
import { Override } from "antlr4ts/Decorators";
import { Parser } from "antlr4ts/Parser";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { ParserATNSimulator } from "antlr4ts/atn/ParserATNSimulator";
import { ParseTreeListener } from "antlr4ts/tree/ParseTreeListener";
import { ParseTreeVisitor } from "antlr4ts/tree/ParseTreeVisitor";
import { RecognitionException } from "antlr4ts/RecognitionException";
import { RuleContext } from "antlr4ts/RuleContext";
//import { RuleVersion } from "antlr4ts/RuleVersion";
import { TerminalNode } from "antlr4ts/tree/TerminalNode";
import { Token } from "antlr4ts/Token";
import { TokenStream } from "antlr4ts/TokenStream";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";

import { MariaDBParserListener } from "./MariaDBParserListener";

export class MariaDBParser extends Parser {
	public static readonly SPACE = 1;
	public static readonly SPEC_MYSQL_COMMENT = 2;
	public static readonly COMMENT_INPUT = 3;
	public static readonly LINE_COMMENT = 4;
	public static readonly ADD = 5;
	public static readonly ALL = 6;
	public static readonly ALTER = 7;
	public static readonly ALWAYS = 8;
	public static readonly ANALYZE = 9;
	public static readonly AND = 10;
	public static readonly ARRAY = 11;
	public static readonly AS = 12;
	public static readonly ASC = 13;
	public static readonly ATTRIBUTE = 14;
	public static readonly BEFORE = 15;
	public static readonly BETWEEN = 16;
	public static readonly BODY = 17;
	public static readonly BOTH = 18;
	public static readonly BUCKETS = 19;
	public static readonly BY = 20;
	public static readonly CALL = 21;
	public static readonly CASCADE = 22;
	public static readonly CASE = 23;
	public static readonly CAST = 24;
	public static readonly CHANGE = 25;
	public static readonly CHARACTER = 26;
	public static readonly CHECK = 27;
	public static readonly COLLATE = 28;
	public static readonly COLUMN = 29;
	public static readonly CONDITION = 30;
	public static readonly CONSTRAINT = 31;
	public static readonly CONTINUE = 32;
	public static readonly CONVERT = 33;
	public static readonly CREATE = 34;
	public static readonly CROSS = 35;
	public static readonly CURRENT = 36;
	public static readonly CURRENT_ROLE = 37;
	public static readonly CURRENT_USER = 38;
	public static readonly CURSOR = 39;
	public static readonly DATABASE = 40;
	public static readonly DATABASES = 41;
	public static readonly DECLARE = 42;
	public static readonly DEFAULT = 43;
	public static readonly DELAYED = 44;
	public static readonly DELETE = 45;
	public static readonly DESC = 46;
	public static readonly DESCRIBE = 47;
	public static readonly DETERMINISTIC = 48;
	public static readonly DIAGNOSTICS = 49;
	public static readonly DISTINCT = 50;
	public static readonly DISTINCTROW = 51;
	public static readonly DROP = 52;
	public static readonly EACH = 53;
	public static readonly ELSE = 54;
	public static readonly ELSEIF = 55;
	public static readonly EMPTY = 56;
	public static readonly ENCLOSED = 57;
	public static readonly ESCAPED = 58;
	public static readonly EXCEPT = 59;
	public static readonly EXISTS = 60;
	public static readonly EXIT = 61;
	public static readonly EXPLAIN = 62;
	public static readonly FALSE = 63;
	public static readonly FETCH = 64;
	public static readonly FOR = 65;
	public static readonly FORCE = 66;
	public static readonly FOREIGN = 67;
	public static readonly FROM = 68;
	public static readonly FULLTEXT = 69;
	public static readonly GENERATED = 70;
	public static readonly GET = 71;
	public static readonly GRANT = 72;
	public static readonly GROUP = 73;
	public static readonly HAVING = 74;
	public static readonly HIGH_PRIORITY = 75;
	public static readonly HISTOGRAM = 76;
	public static readonly IF = 77;
	public static readonly IGNORE = 78;
	public static readonly IGNORED = 79;
	public static readonly IN = 80;
	public static readonly INDEX = 81;
	public static readonly INFILE = 82;
	public static readonly INNER = 83;
	public static readonly INOUT = 84;
	public static readonly INSERT = 85;
	public static readonly INTERVAL = 86;
	public static readonly INTO = 87;
	public static readonly IS = 88;
	public static readonly ITERATE = 89;
	public static readonly JOIN = 90;
	public static readonly KEY = 91;
	public static readonly KEYS = 92;
	public static readonly KILL = 93;
	public static readonly LATERAL = 94;
	public static readonly LEADING = 95;
	public static readonly LEAVE = 96;
	public static readonly LEFT = 97;
	public static readonly LIKE = 98;
	public static readonly LIMIT = 99;
	public static readonly LINEAR = 100;
	public static readonly LINES = 101;
	public static readonly LOAD = 102;
	public static readonly LOCK = 103;
	public static readonly LOCKED = 104;
	public static readonly LOOP = 105;
	public static readonly LOW_PRIORITY = 106;
	public static readonly MASTER_BIND = 107;
	public static readonly MASTER_SSL_VERIFY_SERVER_CERT = 108;
	public static readonly MATCH = 109;
	public static readonly MAXVALUE = 110;
	public static readonly MINVALUE = 111;
	public static readonly MODIFIES = 112;
	public static readonly NATURAL = 113;
	public static readonly NOT = 114;
	public static readonly NO_WRITE_TO_BINLOG = 115;
	public static readonly NULL_LITERAL = 116;
	public static readonly NUMBER = 117;
	public static readonly ON = 118;
	public static readonly OPTIMIZE = 119;
	public static readonly OPTION = 120;
	public static readonly OPTIONAL = 121;
	public static readonly OPTIONALLY = 122;
	public static readonly OR = 123;
	public static readonly ORDER = 124;
	public static readonly OUT = 125;
	public static readonly OUTER = 126;
	public static readonly OUTFILE = 127;
	public static readonly OVER = 128;
	public static readonly PARTITION = 129;
	public static readonly PRIMARY = 130;
	public static readonly PACKAGE = 131;
	public static readonly PROCEDURE = 132;
	public static readonly PURGE = 133;
	public static readonly RANGE = 134;
	public static readonly READ = 135;
	public static readonly READS = 136;
	public static readonly REFERENCES = 137;
	public static readonly REGEXP = 138;
	public static readonly RELEASE = 139;
	public static readonly RENAME = 140;
	public static readonly REPEAT = 141;
	public static readonly REPLACE = 142;
	public static readonly REQUIRE = 143;
	public static readonly RESIGNAL = 144;
	public static readonly RESTRICT = 145;
	public static readonly RETAIN = 146;
	public static readonly RETURN = 147;
	public static readonly REVOKE = 148;
	public static readonly RIGHT = 149;
	public static readonly RLIKE = 150;
	public static readonly SCHEMA = 151;
	public static readonly SCHEMAS = 152;
	public static readonly SELECT = 153;
	public static readonly SET = 154;
	public static readonly SEPARATOR = 155;
	public static readonly SHOW = 156;
	public static readonly SIGNAL = 157;
	public static readonly SKIP_ = 158;
	public static readonly SPATIAL = 159;
	public static readonly SQL = 160;
	public static readonly SQLEXCEPTION = 161;
	public static readonly SQLSTATE = 162;
	public static readonly SQLWARNING = 163;
	public static readonly SQL_BIG_RESULT = 164;
	public static readonly SQL_CALC_FOUND_ROWS = 165;
	public static readonly SQL_SMALL_RESULT = 166;
	public static readonly SSL = 167;
	public static readonly STACKED = 168;
	public static readonly STARTING = 169;
	public static readonly STATEMENT = 170;
	public static readonly STRAIGHT_JOIN = 171;
	public static readonly TABLE = 172;
	public static readonly TERMINATED = 173;
	public static readonly THEN = 174;
	public static readonly TO = 175;
	public static readonly TRAILING = 176;
	public static readonly TRIGGER = 177;
	public static readonly TRUE = 178;
	public static readonly UNDO = 179;
	public static readonly UNION = 180;
	public static readonly UNIQUE = 181;
	public static readonly UNLOCK = 182;
	public static readonly UNSIGNED = 183;
	public static readonly UPDATE = 184;
	public static readonly USAGE = 185;
	public static readonly USE = 186;
	public static readonly USING = 187;
	public static readonly VALUES = 188;
	public static readonly WHEN = 189;
	public static readonly WHERE = 190;
	public static readonly WHILE = 191;
	public static readonly WITH = 192;
	public static readonly WRITE = 193;
	public static readonly XOR = 194;
	public static readonly ZEROFILL = 195;
	public static readonly TINYINT = 196;
	public static readonly SMALLINT = 197;
	public static readonly MEDIUMINT = 198;
	public static readonly MIDDLEINT = 199;
	public static readonly INT = 200;
	public static readonly INT1 = 201;
	public static readonly INT2 = 202;
	public static readonly INT3 = 203;
	public static readonly INT4 = 204;
	public static readonly INT8 = 205;
	public static readonly INTEGER = 206;
	public static readonly BIGINT = 207;
	public static readonly REAL = 208;
	public static readonly DOUBLE = 209;
	public static readonly PRECISION = 210;
	public static readonly FLOAT = 211;
	public static readonly FLOAT4 = 212;
	public static readonly FLOAT8 = 213;
	public static readonly DECIMAL = 214;
	public static readonly DEC = 215;
	public static readonly NUMERIC = 216;
	public static readonly DATE = 217;
	public static readonly TIME = 218;
	public static readonly TIMESTAMP = 219;
	public static readonly DATETIME = 220;
	public static readonly YEAR = 221;
	public static readonly CHAR = 222;
	public static readonly VARCHAR = 223;
	public static readonly NVARCHAR = 224;
	public static readonly NATIONAL = 225;
	public static readonly BINARY = 226;
	public static readonly VARBINARY = 227;
	public static readonly TINYBLOB = 228;
	public static readonly BLOB = 229;
	public static readonly MEDIUMBLOB = 230;
	public static readonly LONG = 231;
	public static readonly LONGBLOB = 232;
	public static readonly TINYTEXT = 233;
	public static readonly TEXT = 234;
	public static readonly MEDIUMTEXT = 235;
	public static readonly LONGTEXT = 236;
	public static readonly ENUM = 237;
	public static readonly VARYING = 238;
	public static readonly SERIAL = 239;
	public static readonly YEAR_MONTH = 240;
	public static readonly DAY_HOUR = 241;
	public static readonly DAY_MINUTE = 242;
	public static readonly DAY_SECOND = 243;
	public static readonly HOUR_MINUTE = 244;
	public static readonly HOUR_SECOND = 245;
	public static readonly MINUTE_SECOND = 246;
	public static readonly SECOND_MICROSECOND = 247;
	public static readonly MINUTE_MICROSECOND = 248;
	public static readonly HOUR_MICROSECOND = 249;
	public static readonly DAY_MICROSECOND = 250;
	public static readonly JSON_ARRAY = 251;
	public static readonly JSON_ARRAYAGG = 252;
	public static readonly JSON_ARRAY_APPEND = 253;
	public static readonly JSON_ARRAY_INSERT = 254;
	public static readonly JSON_CONTAINS = 255;
	public static readonly JSON_CONTAINS_PATH = 256;
	public static readonly JSON_DEPTH = 257;
	public static readonly JSON_EXTRACT = 258;
	public static readonly JSON_INSERT = 259;
	public static readonly JSON_KEYS = 260;
	public static readonly JSON_LENGTH = 261;
	public static readonly JSON_MERGE = 262;
	public static readonly JSON_MERGE_PATCH = 263;
	public static readonly JSON_MERGE_PRESERVE = 264;
	public static readonly JSON_OBJECT = 265;
	public static readonly JSON_OBJECTAGG = 266;
	public static readonly JSON_OVERLAPS = 267;
	public static readonly JSON_PRETTY = 268;
	public static readonly JSON_QUOTE = 269;
	public static readonly JSON_REMOVE = 270;
	public static readonly JSON_REPLACE = 271;
	public static readonly JSON_SCHEMA_VALID = 272;
	public static readonly JSON_SCHEMA_VALIDATION_REPORT = 273;
	public static readonly JSON_SEARCH = 274;
	public static readonly JSON_SET = 275;
	public static readonly JSON_STORAGE_FREE = 276;
	public static readonly JSON_STORAGE_SIZE = 277;
	public static readonly JSON_TABLE = 278;
	public static readonly JSON_TYPE = 279;
	public static readonly JSON_UNQUOTE = 280;
	public static readonly JSON_VALID = 281;
	public static readonly JSON_VALUE = 282;
	public static readonly NESTED = 283;
	public static readonly ORDINALITY = 284;
	public static readonly PATH = 285;
	public static readonly AVG = 286;
	public static readonly BIT_AND = 287;
	public static readonly BIT_OR = 288;
	public static readonly BIT_XOR = 289;
	public static readonly COUNT = 290;
	public static readonly CUME_DIST = 291;
	public static readonly DENSE_RANK = 292;
	public static readonly FIRST_VALUE = 293;
	public static readonly GROUP_CONCAT = 294;
	public static readonly LAG = 295;
	public static readonly LAST_VALUE = 296;
	public static readonly LEAD = 297;
	public static readonly MAX = 298;
	public static readonly MIN = 299;
	public static readonly NTILE = 300;
	public static readonly NTH_VALUE = 301;
	public static readonly PERCENT_RANK = 302;
	public static readonly RANK = 303;
	public static readonly ROW_NUMBER = 304;
	public static readonly STD = 305;
	public static readonly STDDEV = 306;
	public static readonly STDDEV_POP = 307;
	public static readonly STDDEV_SAMP = 308;
	public static readonly SUM = 309;
	public static readonly VAR_POP = 310;
	public static readonly VAR_SAMP = 311;
	public static readonly VARIANCE = 312;
	public static readonly CURRENT_DATE = 313;
	public static readonly CURRENT_TIME = 314;
	public static readonly CURRENT_TIMESTAMP = 315;
	public static readonly LOCALTIME = 316;
	public static readonly CURDATE = 317;
	public static readonly CURTIME = 318;
	public static readonly DATE_ADD = 319;
	public static readonly DATE_SUB = 320;
	public static readonly EXTRACT = 321;
	public static readonly LOCALTIMESTAMP = 322;
	public static readonly NOW = 323;
	public static readonly POSITION = 324;
	public static readonly SUBSTR = 325;
	public static readonly SUBSTRING = 326;
	public static readonly SYSDATE = 327;
	public static readonly TRIM = 328;
	public static readonly UTC_DATE = 329;
	public static readonly UTC_TIME = 330;
	public static readonly UTC_TIMESTAMP = 331;
	public static readonly ACCOUNT = 332;
	public static readonly ACTION = 333;
	public static readonly AFTER = 334;
	public static readonly AGGREGATE = 335;
	public static readonly ALGORITHM = 336;
	public static readonly ANY = 337;
	public static readonly AT = 338;
	public static readonly AUTHORS = 339;
	public static readonly AUTOCOMMIT = 340;
	public static readonly AUTOEXTEND_SIZE = 341;
	public static readonly AUTO_INCREMENT = 342;
	public static readonly AVG_ROW_LENGTH = 343;
	public static readonly BEGIN = 344;
	public static readonly BINLOG = 345;
	public static readonly BIT = 346;
	public static readonly BLOCK = 347;
	public static readonly BOOL = 348;
	public static readonly BOOLEAN = 349;
	public static readonly BTREE = 350;
	public static readonly CACHE = 351;
	public static readonly CASCADED = 352;
	public static readonly CHAIN = 353;
	public static readonly CHANGED = 354;
	public static readonly CHANNEL = 355;
	public static readonly CHECKSUM = 356;
	public static readonly PAGE_CHECKSUM = 357;
	public static readonly CIPHER = 358;
	public static readonly CLASS_ORIGIN = 359;
	public static readonly CLIENT = 360;
	public static readonly CLOSE = 361;
	public static readonly CLUSTERING = 362;
	public static readonly COALESCE = 363;
	public static readonly CODE = 364;
	public static readonly COLUMNS = 365;
	public static readonly COLUMN_FORMAT = 366;
	public static readonly COLUMN_NAME = 367;
	public static readonly COMMENT = 368;
	public static readonly COMMIT = 369;
	public static readonly COMPACT = 370;
	public static readonly COMPLETION = 371;
	public static readonly COMPRESSED = 372;
	public static readonly COMPRESSION = 373;
	public static readonly CONCURRENT = 374;
	public static readonly CONNECT = 375;
	public static readonly CONNECTION = 376;
	public static readonly CONSISTENT = 377;
	public static readonly CONSTRAINT_CATALOG = 378;
	public static readonly CONSTRAINT_SCHEMA = 379;
	public static readonly CONSTRAINT_NAME = 380;
	public static readonly CONTAINS = 381;
	public static readonly CONTEXT = 382;
	public static readonly CONTRIBUTORS = 383;
	public static readonly COPY = 384;
	public static readonly CPU = 385;
	public static readonly CYCLE = 386;
	public static readonly CURSOR_NAME = 387;
	public static readonly DATA = 388;
	public static readonly DATAFILE = 389;
	public static readonly DEALLOCATE = 390;
	public static readonly DEFAULT_AUTH = 391;
	public static readonly DEFINER = 392;
	public static readonly DELAY_KEY_WRITE = 393;
	public static readonly DES_KEY_FILE = 394;
	public static readonly DIRECTORY = 395;
	public static readonly DISABLE = 396;
	public static readonly DISCARD = 397;
	public static readonly DISK = 398;
	public static readonly DO = 399;
	public static readonly DUMPFILE = 400;
	public static readonly DUPLICATE = 401;
	public static readonly DYNAMIC = 402;
	public static readonly ENABLE = 403;
	public static readonly ENCRYPTED = 404;
	public static readonly ENCRYPTION = 405;
	public static readonly ENCRYPTION_KEY_ID = 406;
	public static readonly END = 407;
	public static readonly ENDS = 408;
	public static readonly ENGINE = 409;
	public static readonly ENGINES = 410;
	public static readonly ERROR = 411;
	public static readonly ERRORS = 412;
	public static readonly ESCAPE = 413;
	public static readonly EVEN = 414;
	public static readonly EVENT = 415;
	public static readonly EVENTS = 416;
	public static readonly EVERY = 417;
	public static readonly EXCHANGE = 418;
	public static readonly EXCLUSIVE = 419;
	public static readonly EXPIRE = 420;
	public static readonly EXPORT = 421;
	public static readonly EXTENDED = 422;
	public static readonly EXTENT_SIZE = 423;
	public static readonly FAILED_LOGIN_ATTEMPTS = 424;
	public static readonly FAST = 425;
	public static readonly FAULTS = 426;
	public static readonly FIELDS = 427;
	public static readonly FILE_BLOCK_SIZE = 428;
	public static readonly FILTER = 429;
	public static readonly FIRST = 430;
	public static readonly FIXED = 431;
	public static readonly FLUSH = 432;
	public static readonly FOLLOWING = 433;
	public static readonly FOLLOWS = 434;
	public static readonly FOUND = 435;
	public static readonly FULL = 436;
	public static readonly FUNCTION = 437;
	public static readonly GENERAL = 438;
	public static readonly GLOBAL = 439;
	public static readonly GRANTS = 440;
	public static readonly GROUP_REPLICATION = 441;
	public static readonly HANDLER = 442;
	public static readonly HASH = 443;
	public static readonly HELP = 444;
	public static readonly HISTORY = 445;
	public static readonly HOST = 446;
	public static readonly HOSTS = 447;
	public static readonly IDENTIFIED = 448;
	public static readonly IGNORE_SERVER_IDS = 449;
	public static readonly IMPORT = 450;
	public static readonly INCREMENT = 451;
	public static readonly INDEXES = 452;
	public static readonly INITIAL_SIZE = 453;
	public static readonly INPLACE = 454;
	public static readonly INSERT_METHOD = 455;
	public static readonly INSTALL = 456;
	public static readonly INSTANCE = 457;
	public static readonly INSTANT = 458;
	public static readonly INVISIBLE = 459;
	public static readonly INVOKER = 460;
	public static readonly IO = 461;
	public static readonly IO_THREAD = 462;
	public static readonly IPC = 463;
	public static readonly ISOLATION = 464;
	public static readonly ISSUER = 465;
	public static readonly JSON = 466;
	public static readonly KEY_BLOCK_SIZE = 467;
	public static readonly LANGUAGE = 468;
	public static readonly LAST = 469;
	public static readonly LEAVES = 470;
	public static readonly LESS = 471;
	public static readonly LEVEL = 472;
	public static readonly LIST = 473;
	public static readonly LOCAL = 474;
	public static readonly LOCALES = 475;
	public static readonly LOGFILE = 476;
	public static readonly LOGS = 477;
	public static readonly MASTER = 478;
	public static readonly MASTER_AUTO_POSITION = 479;
	public static readonly MASTER_CONNECT_RETRY = 480;
	public static readonly MASTER_DELAY = 481;
	public static readonly MASTER_HEARTBEAT_PERIOD = 482;
	public static readonly MASTER_HOST = 483;
	public static readonly MASTER_LOG_FILE = 484;
	public static readonly MASTER_LOG_POS = 485;
	public static readonly MASTER_PASSWORD = 486;
	public static readonly MASTER_PORT = 487;
	public static readonly MASTER_RETRY_COUNT = 488;
	public static readonly MASTER_SSL = 489;
	public static readonly MASTER_SSL_CA = 490;
	public static readonly MASTER_SSL_CAPATH = 491;
	public static readonly MASTER_SSL_CERT = 492;
	public static readonly MASTER_SSL_CIPHER = 493;
	public static readonly MASTER_SSL_CRL = 494;
	public static readonly MASTER_SSL_CRLPATH = 495;
	public static readonly MASTER_SSL_KEY = 496;
	public static readonly MASTER_TLS_VERSION = 497;
	public static readonly MASTER_USER = 498;
	public static readonly MAX_CONNECTIONS_PER_HOUR = 499;
	public static readonly MAX_QUERIES_PER_HOUR = 500;
	public static readonly MAX_ROWS = 501;
	public static readonly MAX_SIZE = 502;
	public static readonly MAX_UPDATES_PER_HOUR = 503;
	public static readonly MAX_USER_CONNECTIONS = 504;
	public static readonly MEDIUM = 505;
	public static readonly MEMBER = 506;
	public static readonly MERGE = 507;
	public static readonly MESSAGE_TEXT = 508;
	public static readonly MID = 509;
	public static readonly MIGRATE = 510;
	public static readonly MIN_ROWS = 511;
	public static readonly MODE = 512;
	public static readonly MODIFY = 513;
	public static readonly MUTEX = 514;
	public static readonly MYSQL = 515;
	public static readonly MYSQL_ERRNO = 516;
	public static readonly NAME = 517;
	public static readonly NAMES = 518;
	public static readonly NCHAR = 519;
	public static readonly NEVER = 520;
	public static readonly NEXT = 521;
	public static readonly NO = 522;
	public static readonly NOCACHE = 523;
	public static readonly NOCOPY = 524;
	public static readonly NOCYCLE = 525;
	public static readonly NOMAXVALUE = 526;
	public static readonly NOMINVALUE = 527;
	public static readonly NOWAIT = 528;
	public static readonly NODEGROUP = 529;
	public static readonly NONE = 530;
	public static readonly ODBC = 531;
	public static readonly OFFLINE = 532;
	public static readonly OFFSET = 533;
	public static readonly OF = 534;
	public static readonly OJ = 535;
	public static readonly OLD_PASSWORD = 536;
	public static readonly ONE = 537;
	public static readonly ONLINE = 538;
	public static readonly ONLY = 539;
	public static readonly OPEN = 540;
	public static readonly OPTIMIZER_COSTS = 541;
	public static readonly OPTIONS = 542;
	public static readonly OWNER = 543;
	public static readonly PACK_KEYS = 544;
	public static readonly PAGE = 545;
	public static readonly PAGE_COMPRESSED = 546;
	public static readonly PAGE_COMPRESSION_LEVEL = 547;
	public static readonly PARSER = 548;
	public static readonly PARTIAL = 549;
	public static readonly PARTITIONING = 550;
	public static readonly PARTITIONS = 551;
	public static readonly PASSWORD = 552;
	public static readonly PASSWORD_LOCK_TIME = 553;
	public static readonly PHASE = 554;
	public static readonly PLUGIN = 555;
	public static readonly PLUGIN_DIR = 556;
	public static readonly PLUGINS = 557;
	public static readonly PORT = 558;
	public static readonly PRECEDES = 559;
	public static readonly PRECEDING = 560;
	public static readonly PREPARE = 561;
	public static readonly PRESERVE = 562;
	public static readonly PREV = 563;
	public static readonly PROCESSLIST = 564;
	public static readonly PROFILE = 565;
	public static readonly PROFILES = 566;
	public static readonly PROXY = 567;
	public static readonly QUERY = 568;
	public static readonly QUERY_RESPONSE_TIME = 569;
	public static readonly QUICK = 570;
	public static readonly REBUILD = 571;
	public static readonly RECOVER = 572;
	public static readonly RECURSIVE = 573;
	public static readonly REDO_BUFFER_SIZE = 574;
	public static readonly REDUNDANT = 575;
	public static readonly RELAY = 576;
	public static readonly RELAY_LOG_FILE = 577;
	public static readonly RELAY_LOG_POS = 578;
	public static readonly RELAYLOG = 579;
	public static readonly REMOVE = 580;
	public static readonly REORGANIZE = 581;
	public static readonly REPAIR = 582;
	public static readonly REPLICATE_DO_DB = 583;
	public static readonly REPLICATE_DO_TABLE = 584;
	public static readonly REPLICATE_IGNORE_DB = 585;
	public static readonly REPLICATE_IGNORE_TABLE = 586;
	public static readonly REPLICATE_REWRITE_DB = 587;
	public static readonly REPLICATE_WILD_DO_TABLE = 588;
	public static readonly REPLICATE_WILD_IGNORE_TABLE = 589;
	public static readonly REPLICATION = 590;
	public static readonly RESET = 591;
	public static readonly RESTART = 592;
	public static readonly RESUME = 593;
	public static readonly RETURNED_SQLSTATE = 594;
	public static readonly RETURNING = 595;
	public static readonly RETURNS = 596;
	public static readonly REUSE = 597;
	public static readonly ROLE = 598;
	public static readonly ROLLBACK = 599;
	public static readonly ROLLUP = 600;
	public static readonly ROTATE = 601;
	public static readonly ROW = 602;
	public static readonly ROWS = 603;
	public static readonly ROW_FORMAT = 604;
	public static readonly RTREE = 605;
	public static readonly SAVEPOINT = 606;
	public static readonly SCHEDULE = 607;
	public static readonly SECURITY = 608;
	public static readonly SEQUENCE = 609;
	public static readonly SERVER = 610;
	public static readonly SESSION = 611;
	public static readonly SHARE = 612;
	public static readonly SHARED = 613;
	public static readonly SIGNED = 614;
	public static readonly SIMPLE = 615;
	public static readonly SLAVE = 616;
	public static readonly SLAVES = 617;
	public static readonly SLOW = 618;
	public static readonly SNAPSHOT = 619;
	public static readonly SOCKET = 620;
	public static readonly SOME = 621;
	public static readonly SONAME = 622;
	public static readonly SOUNDS = 623;
	public static readonly SOURCE = 624;
	public static readonly SQL_AFTER_GTIDS = 625;
	public static readonly SQL_AFTER_MTS_GAPS = 626;
	public static readonly SQL_BEFORE_GTIDS = 627;
	public static readonly SQL_BUFFER_RESULT = 628;
	public static readonly SQL_CACHE = 629;
	public static readonly SQL_NO_CACHE = 630;
	public static readonly SQL_THREAD = 631;
	public static readonly START = 632;
	public static readonly STARTS = 633;
	public static readonly STATS_AUTO_RECALC = 634;
	public static readonly STATS_PERSISTENT = 635;
	public static readonly STATS_SAMPLE_PAGES = 636;
	public static readonly STATUS = 637;
	public static readonly STOP = 638;
	public static readonly STORAGE = 639;
	public static readonly STORED = 640;
	public static readonly STRING = 641;
	public static readonly SUBCLASS_ORIGIN = 642;
	public static readonly SUBJECT = 643;
	public static readonly SUBPARTITION = 644;
	public static readonly SUBPARTITIONS = 645;
	public static readonly SUSPEND = 646;
	public static readonly SWAPS = 647;
	public static readonly SWITCHES = 648;
	public static readonly TABLE_NAME = 649;
	public static readonly TABLESPACE = 650;
	public static readonly TABLE_TYPE = 651;
	public static readonly TEMPORARY = 652;
	public static readonly TEMPTABLE = 653;
	public static readonly THAN = 654;
	public static readonly TRADITIONAL = 655;
	public static readonly TRANSACTION = 656;
	public static readonly TRANSACTIONAL = 657;
	public static readonly TRIGGERS = 658;
	public static readonly TRUNCATE = 659;
	public static readonly TYPES = 660;
	public static readonly UNBOUNDED = 661;
	public static readonly UNDEFINED = 662;
	public static readonly UNDOFILE = 663;
	public static readonly UNDO_BUFFER_SIZE = 664;
	public static readonly UNINSTALL = 665;
	public static readonly UNKNOWN = 666;
	public static readonly UNTIL = 667;
	public static readonly UPGRADE = 668;
	public static readonly USER = 669;
	public static readonly USE_FRM = 670;
	public static readonly USER_RESOURCES = 671;
	public static readonly VALIDATION = 672;
	public static readonly VALUE = 673;
	public static readonly VARIABLES = 674;
	public static readonly VIEW = 675;
	public static readonly VIRTUAL = 676;
	public static readonly VISIBLE = 677;
	public static readonly WAIT = 678;
	public static readonly WARNINGS = 679;
	public static readonly WINDOW = 680;
	public static readonly WITHOUT = 681;
	public static readonly WORK = 682;
	public static readonly WRAPPER = 683;
	public static readonly WSREP_MEMBERSHIP = 684;
	public static readonly WSREP_STATUS = 685;
	public static readonly X509 = 686;
	public static readonly XA = 687;
	public static readonly XML = 688;
	public static readonly YES = 689;
	public static readonly EUR = 690;
	public static readonly USA = 691;
	public static readonly JIS = 692;
	public static readonly ISO = 693;
	public static readonly INTERNAL = 694;
	public static readonly QUARTER = 695;
	public static readonly MONTH = 696;
	public static readonly DAY = 697;
	public static readonly HOUR = 698;
	public static readonly MINUTE = 699;
	public static readonly WEEK = 700;
	public static readonly SECOND = 701;
	public static readonly MICROSECOND = 702;
	public static readonly USER_STATISTICS = 703;
	public static readonly CLIENT_STATISTICS = 704;
	public static readonly INDEX_STATISTICS = 705;
	public static readonly TABLE_STATISTICS = 706;
	public static readonly ADMIN = 707;
	public static readonly APPLICATION_PASSWORD_ADMIN = 708;
	public static readonly AUDIT_ADMIN = 709;
	public static readonly BACKUP_ADMIN = 710;
	public static readonly BINLOG_ADMIN = 711;
	public static readonly BINLOG_ENCRYPTION_ADMIN = 712;
	public static readonly CLONE_ADMIN = 713;
	public static readonly CONNECTION_ADMIN = 714;
	public static readonly ENCRYPTION_KEY_ADMIN = 715;
	public static readonly EXECUTE = 716;
	public static readonly FILE = 717;
	public static readonly FIREWALL_ADMIN = 718;
	public static readonly FIREWALL_USER = 719;
	public static readonly FLUSH_OPTIMIZER_COSTS = 720;
	public static readonly FLUSH_STATUS = 721;
	public static readonly FLUSH_TABLES = 722;
	public static readonly FLUSH_USER_RESOURCES = 723;
	public static readonly GROUP_REPLICATION_ADMIN = 724;
	public static readonly INNODB_REDO_LOG_ARCHIVE = 725;
	public static readonly INNODB_REDO_LOG_ENABLE = 726;
	public static readonly INVOKE = 727;
	public static readonly LAMBDA = 728;
	public static readonly NDB_STORED_USER = 729;
	public static readonly PASSWORDLESS_USER_ADMIN = 730;
	public static readonly PERSIST_RO_VARIABLES_ADMIN = 731;
	public static readonly PRIVILEGES = 732;
	public static readonly PROCESS = 733;
	public static readonly RELOAD = 734;
	public static readonly REPLICATION_APPLIER = 735;
	public static readonly REPLICATION_SLAVE_ADMIN = 736;
	public static readonly RESOURCE_GROUP_ADMIN = 737;
	public static readonly RESOURCE_GROUP_USER = 738;
	public static readonly ROLE_ADMIN = 739;
	public static readonly ROUTINE = 740;
	public static readonly S3 = 741;
	public static readonly SERVICE_CONNECTION_ADMIN = 742;
	public static readonly SESSION_VARIABLES_ADMIN = 743;
	public static readonly SET_USER_ID = 744;
	public static readonly SHOW_ROUTINE = 745;
	public static readonly SHUTDOWN = 746;
	public static readonly SUPER = 747;
	public static readonly SYSTEM_VARIABLES_ADMIN = 748;
	public static readonly TABLES = 749;
	public static readonly TABLE_ENCRYPTION_ADMIN = 750;
	public static readonly VERSION_TOKEN_ADMIN = 751;
	public static readonly XA_RECOVER_ADMIN = 752;
	public static readonly ARMSCII8 = 753;
	public static readonly ASCII = 754;
	public static readonly BIG5 = 755;
	public static readonly CP1250 = 756;
	public static readonly CP1251 = 757;
	public static readonly CP1256 = 758;
	public static readonly CP1257 = 759;
	public static readonly CP850 = 760;
	public static readonly CP852 = 761;
	public static readonly CP866 = 762;
	public static readonly CP932 = 763;
	public static readonly DEC8 = 764;
	public static readonly EUCJPMS = 765;
	public static readonly EUCKR = 766;
	public static readonly GB18030 = 767;
	public static readonly GB2312 = 768;
	public static readonly GBK = 769;
	public static readonly GEOSTD8 = 770;
	public static readonly GREEK = 771;
	public static readonly HEBREW = 772;
	public static readonly HP8 = 773;
	public static readonly KEYBCS2 = 774;
	public static readonly KOI8R = 775;
	public static readonly KOI8U = 776;
	public static readonly LATIN1 = 777;
	public static readonly LATIN2 = 778;
	public static readonly LATIN5 = 779;
	public static readonly LATIN7 = 780;
	public static readonly MACCE = 781;
	public static readonly MACROMAN = 782;
	public static readonly SJIS = 783;
	public static readonly SWE7 = 784;
	public static readonly TIS620 = 785;
	public static readonly UCS2 = 786;
	public static readonly UJIS = 787;
	public static readonly UTF16 = 788;
	public static readonly UTF16LE = 789;
	public static readonly UTF32 = 790;
	public static readonly UTF8 = 791;
	public static readonly UTF8MB3 = 792;
	public static readonly UTF8MB4 = 793;
	public static readonly ARCHIVE = 794;
	public static readonly BLACKHOLE = 795;
	public static readonly CSV = 796;
	public static readonly FEDERATED = 797;
	public static readonly INNODB = 798;
	public static readonly MEMORY = 799;
	public static readonly MRG_MYISAM = 800;
	public static readonly MYISAM = 801;
	public static readonly NDB = 802;
	public static readonly NDBCLUSTER = 803;
	public static readonly PERFORMANCE_SCHEMA = 804;
	public static readonly TOKUDB = 805;
	public static readonly REPEATABLE = 806;
	public static readonly COMMITTED = 807;
	public static readonly UNCOMMITTED = 808;
	public static readonly SERIALIZABLE = 809;
	public static readonly GEOMETRYCOLLECTION = 810;
	public static readonly GEOMCOLLECTION = 811;
	public static readonly GEOMETRY = 812;
	public static readonly LINESTRING = 813;
	public static readonly MULTILINESTRING = 814;
	public static readonly MULTIPOINT = 815;
	public static readonly MULTIPOLYGON = 816;
	public static readonly POINT = 817;
	public static readonly POLYGON = 818;
	public static readonly ABS = 819;
	public static readonly ACOS = 820;
	public static readonly ADDDATE = 821;
	public static readonly ADDTIME = 822;
	public static readonly AES_DECRYPT = 823;
	public static readonly AES_ENCRYPT = 824;
	public static readonly AREA = 825;
	public static readonly ASBINARY = 826;
	public static readonly ASIN = 827;
	public static readonly ASTEXT = 828;
	public static readonly ASWKB = 829;
	public static readonly ASWKT = 830;
	public static readonly ASYMMETRIC_DECRYPT = 831;
	public static readonly ASYMMETRIC_DERIVE = 832;
	public static readonly ASYMMETRIC_ENCRYPT = 833;
	public static readonly ASYMMETRIC_SIGN = 834;
	public static readonly ASYMMETRIC_VERIFY = 835;
	public static readonly ATAN = 836;
	public static readonly ATAN2 = 837;
	public static readonly BENCHMARK = 838;
	public static readonly BIN = 839;
	public static readonly BIT_COUNT = 840;
	public static readonly BIT_LENGTH = 841;
	public static readonly BUFFER = 842;
	public static readonly CATALOG_NAME = 843;
	public static readonly CEIL = 844;
	public static readonly CEILING = 845;
	public static readonly CENTROID = 846;
	public static readonly CHARACTER_LENGTH = 847;
	public static readonly CHARSET = 848;
	public static readonly CHAR_LENGTH = 849;
	public static readonly COERCIBILITY = 850;
	public static readonly COLLATION = 851;
	public static readonly COMPRESS = 852;
	public static readonly CONCAT = 853;
	public static readonly CONCAT_WS = 854;
	public static readonly CONNECTION_ID = 855;
	public static readonly CONV = 856;
	public static readonly CONVERT_TZ = 857;
	public static readonly COS = 858;
	public static readonly COT = 859;
	public static readonly CRC32 = 860;
	public static readonly CREATE_ASYMMETRIC_PRIV_KEY = 861;
	public static readonly CREATE_ASYMMETRIC_PUB_KEY = 862;
	public static readonly CREATE_DH_PARAMETERS = 863;
	public static readonly CREATE_DIGEST = 864;
	public static readonly CROSSES = 865;
	public static readonly DATEDIFF = 866;
	public static readonly DATE_FORMAT = 867;
	public static readonly DAYNAME = 868;
	public static readonly DAYOFMONTH = 869;
	public static readonly DAYOFWEEK = 870;
	public static readonly DAYOFYEAR = 871;
	public static readonly DECODE = 872;
	public static readonly DEGREES = 873;
	public static readonly DES_DECRYPT = 874;
	public static readonly DES_ENCRYPT = 875;
	public static readonly DIMENSION = 876;
	public static readonly DISJOINT = 877;
	public static readonly ELT = 878;
	public static readonly ENCODE = 879;
	public static readonly ENCRYPT = 880;
	public static readonly ENDPOINT = 881;
	public static readonly ENGINE_ATTRIBUTE = 882;
	public static readonly ENVELOPE = 883;
	public static readonly EQUALS = 884;
	public static readonly EXP = 885;
	public static readonly EXPORT_SET = 886;
	public static readonly EXTERIORRING = 887;
	public static readonly EXTRACTVALUE = 888;
	public static readonly FIELD = 889;
	public static readonly FIND_IN_SET = 890;
	public static readonly FLOOR = 891;
	public static readonly FORMAT = 892;
	public static readonly FOUND_ROWS = 893;
	public static readonly FROM_BASE64 = 894;
	public static readonly FROM_DAYS = 895;
	public static readonly FROM_UNIXTIME = 896;
	public static readonly GEOMCOLLFROMTEXT = 897;
	public static readonly GEOMCOLLFROMWKB = 898;
	public static readonly GEOMETRYCOLLECTIONFROMTEXT = 899;
	public static readonly GEOMETRYCOLLECTIONFROMWKB = 900;
	public static readonly GEOMETRYFROMTEXT = 901;
	public static readonly GEOMETRYFROMWKB = 902;
	public static readonly GEOMETRYN = 903;
	public static readonly GEOMETRYTYPE = 904;
	public static readonly GEOMFROMTEXT = 905;
	public static readonly GEOMFROMWKB = 906;
	public static readonly GET_FORMAT = 907;
	public static readonly GET_LOCK = 908;
	public static readonly GLENGTH = 909;
	public static readonly GREATEST = 910;
	public static readonly GTID_SUBSET = 911;
	public static readonly GTID_SUBTRACT = 912;
	public static readonly HEX = 913;
	public static readonly IFNULL = 914;
	public static readonly INET6_ATON = 915;
	public static readonly INET6_NTOA = 916;
	public static readonly INET_ATON = 917;
	public static readonly INET_NTOA = 918;
	public static readonly INSTR = 919;
	public static readonly INTERIORRINGN = 920;
	public static readonly INTERSECTS = 921;
	public static readonly ISCLOSED = 922;
	public static readonly ISEMPTY = 923;
	public static readonly ISNULL = 924;
	public static readonly ISSIMPLE = 925;
	public static readonly IS_FREE_LOCK = 926;
	public static readonly IS_IPV4 = 927;
	public static readonly IS_IPV4_COMPAT = 928;
	public static readonly IS_IPV4_MAPPED = 929;
	public static readonly IS_IPV6 = 930;
	public static readonly IS_USED_LOCK = 931;
	public static readonly LAST_INSERT_ID = 932;
	public static readonly LCASE = 933;
	public static readonly LEAST = 934;
	public static readonly LENGTH = 935;
	public static readonly LINEFROMTEXT = 936;
	public static readonly LINEFROMWKB = 937;
	public static readonly LINESTRINGFROMTEXT = 938;
	public static readonly LINESTRINGFROMWKB = 939;
	public static readonly LN = 940;
	public static readonly LOAD_FILE = 941;
	public static readonly LOCATE = 942;
	public static readonly LOG = 943;
	public static readonly LOG10 = 944;
	public static readonly LOG2 = 945;
	public static readonly LOWER = 946;
	public static readonly LPAD = 947;
	public static readonly LTRIM = 948;
	public static readonly MAKEDATE = 949;
	public static readonly MAKETIME = 950;
	public static readonly MAKE_SET = 951;
	public static readonly MASTER_POS_WAIT = 952;
	public static readonly MBRCONTAINS = 953;
	public static readonly MBRDISJOINT = 954;
	public static readonly MBREQUAL = 955;
	public static readonly MBRINTERSECTS = 956;
	public static readonly MBROVERLAPS = 957;
	public static readonly MBRTOUCHES = 958;
	public static readonly MBRWITHIN = 959;
	public static readonly MD5 = 960;
	public static readonly MLINEFROMTEXT = 961;
	public static readonly MLINEFROMWKB = 962;
	public static readonly MONTHNAME = 963;
	public static readonly MPOINTFROMTEXT = 964;
	public static readonly MPOINTFROMWKB = 965;
	public static readonly MPOLYFROMTEXT = 966;
	public static readonly MPOLYFROMWKB = 967;
	public static readonly MULTILINESTRINGFROMTEXT = 968;
	public static readonly MULTILINESTRINGFROMWKB = 969;
	public static readonly MULTIPOINTFROMTEXT = 970;
	public static readonly MULTIPOINTFROMWKB = 971;
	public static readonly MULTIPOLYGONFROMTEXT = 972;
	public static readonly MULTIPOLYGONFROMWKB = 973;
	public static readonly NAME_CONST = 974;
	public static readonly NULLIF = 975;
	public static readonly NUMGEOMETRIES = 976;
	public static readonly NUMINTERIORRINGS = 977;
	public static readonly NUMPOINTS = 978;
	public static readonly OCT = 979;
	public static readonly OCTET_LENGTH = 980;
	public static readonly ORD = 981;
	public static readonly OVERLAPS = 982;
	public static readonly PERIOD_ADD = 983;
	public static readonly PERIOD_DIFF = 984;
	public static readonly PI = 985;
	public static readonly POINTFROMTEXT = 986;
	public static readonly POINTFROMWKB = 987;
	public static readonly POINTN = 988;
	public static readonly POLYFROMTEXT = 989;
	public static readonly POLYFROMWKB = 990;
	public static readonly POLYGONFROMTEXT = 991;
	public static readonly POLYGONFROMWKB = 992;
	public static readonly POW = 993;
	public static readonly POWER = 994;
	public static readonly QUOTE = 995;
	public static readonly RADIANS = 996;
	public static readonly RAND = 997;
	public static readonly RANDOM_BYTES = 998;
	public static readonly RELEASE_LOCK = 999;
	public static readonly REVERSE = 1000;
	public static readonly ROUND = 1001;
	public static readonly ROW_COUNT = 1002;
	public static readonly RPAD = 1003;
	public static readonly RTRIM = 1004;
	public static readonly SEC_TO_TIME = 1005;
	public static readonly SECONDARY_ENGINE_ATTRIBUTE = 1006;
	public static readonly SESSION_USER = 1007;
	public static readonly SHA = 1008;
	public static readonly SHA1 = 1009;
	public static readonly SHA2 = 1010;
	public static readonly SCHEMA_NAME = 1011;
	public static readonly SIGN = 1012;
	public static readonly SIN = 1013;
	public static readonly SLEEP = 1014;
	public static readonly SOUNDEX = 1015;
	public static readonly SQL_THREAD_WAIT_AFTER_GTIDS = 1016;
	public static readonly SQRT = 1017;
	public static readonly SRID = 1018;
	public static readonly STARTPOINT = 1019;
	public static readonly STRCMP = 1020;
	public static readonly STR_TO_DATE = 1021;
	public static readonly ST_AREA = 1022;
	public static readonly ST_ASBINARY = 1023;
	public static readonly ST_ASTEXT = 1024;
	public static readonly ST_ASWKB = 1025;
	public static readonly ST_ASWKT = 1026;
	public static readonly ST_BUFFER = 1027;
	public static readonly ST_CENTROID = 1028;
	public static readonly ST_CONTAINS = 1029;
	public static readonly ST_CROSSES = 1030;
	public static readonly ST_DIFFERENCE = 1031;
	public static readonly ST_DIMENSION = 1032;
	public static readonly ST_DISJOINT = 1033;
	public static readonly ST_DISTANCE = 1034;
	public static readonly ST_ENDPOINT = 1035;
	public static readonly ST_ENVELOPE = 1036;
	public static readonly ST_EQUALS = 1037;
	public static readonly ST_EXTERIORRING = 1038;
	public static readonly ST_GEOMCOLLFROMTEXT = 1039;
	public static readonly ST_GEOMCOLLFROMTXT = 1040;
	public static readonly ST_GEOMCOLLFROMWKB = 1041;
	public static readonly ST_GEOMETRYCOLLECTIONFROMTEXT = 1042;
	public static readonly ST_GEOMETRYCOLLECTIONFROMWKB = 1043;
	public static readonly ST_GEOMETRYFROMTEXT = 1044;
	public static readonly ST_GEOMETRYFROMWKB = 1045;
	public static readonly ST_GEOMETRYN = 1046;
	public static readonly ST_GEOMETRYTYPE = 1047;
	public static readonly ST_GEOMFROMTEXT = 1048;
	public static readonly ST_GEOMFROMWKB = 1049;
	public static readonly ST_INTERIORRINGN = 1050;
	public static readonly ST_INTERSECTION = 1051;
	public static readonly ST_INTERSECTS = 1052;
	public static readonly ST_ISCLOSED = 1053;
	public static readonly ST_ISEMPTY = 1054;
	public static readonly ST_ISSIMPLE = 1055;
	public static readonly ST_LINEFROMTEXT = 1056;
	public static readonly ST_LINEFROMWKB = 1057;
	public static readonly ST_LINESTRINGFROMTEXT = 1058;
	public static readonly ST_LINESTRINGFROMWKB = 1059;
	public static readonly ST_NUMGEOMETRIES = 1060;
	public static readonly ST_NUMINTERIORRING = 1061;
	public static readonly ST_NUMINTERIORRINGS = 1062;
	public static readonly ST_NUMPOINTS = 1063;
	public static readonly ST_OVERLAPS = 1064;
	public static readonly ST_POINTFROMTEXT = 1065;
	public static readonly ST_POINTFROMWKB = 1066;
	public static readonly ST_POINTN = 1067;
	public static readonly ST_POLYFROMTEXT = 1068;
	public static readonly ST_POLYFROMWKB = 1069;
	public static readonly ST_POLYGONFROMTEXT = 1070;
	public static readonly ST_POLYGONFROMWKB = 1071;
	public static readonly ST_SRID = 1072;
	public static readonly ST_STARTPOINT = 1073;
	public static readonly ST_SYMDIFFERENCE = 1074;
	public static readonly ST_TOUCHES = 1075;
	public static readonly ST_UNION = 1076;
	public static readonly ST_WITHIN = 1077;
	public static readonly ST_X = 1078;
	public static readonly ST_Y = 1079;
	public static readonly SUBDATE = 1080;
	public static readonly SUBSTRING_INDEX = 1081;
	public static readonly SUBTIME = 1082;
	public static readonly SYSTEM_USER = 1083;
	public static readonly TAN = 1084;
	public static readonly TIMEDIFF = 1085;
	public static readonly TIMESTAMPADD = 1086;
	public static readonly TIMESTAMPDIFF = 1087;
	public static readonly TIME_FORMAT = 1088;
	public static readonly TIME_TO_SEC = 1089;
	public static readonly TOUCHES = 1090;
	public static readonly TO_BASE64 = 1091;
	public static readonly TO_DAYS = 1092;
	public static readonly TO_SECONDS = 1093;
	public static readonly UCASE = 1094;
	public static readonly UNCOMPRESS = 1095;
	public static readonly UNCOMPRESSED_LENGTH = 1096;
	public static readonly UNHEX = 1097;
	public static readonly UNIX_TIMESTAMP = 1098;
	public static readonly UPDATEXML = 1099;
	public static readonly UPPER = 1100;
	public static readonly UUID = 1101;
	public static readonly UUID_SHORT = 1102;
	public static readonly VALIDATE_PASSWORD_STRENGTH = 1103;
	public static readonly VERSION = 1104;
	public static readonly WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS = 1105;
	public static readonly WEEKDAY = 1106;
	public static readonly WEEKOFYEAR = 1107;
	public static readonly WEIGHT_STRING = 1108;
	public static readonly WITHIN = 1109;
	public static readonly YEARWEEK = 1110;
	public static readonly Y_FUNCTION = 1111;
	public static readonly X_FUNCTION = 1112;
	public static readonly VIA = 1113;
	public static readonly LASTVAL = 1114;
	public static readonly NEXTVAL = 1115;
	public static readonly SETVAL = 1116;
	public static readonly PREVIOUS = 1117;
	public static readonly PERSISTENT = 1118;
	public static readonly BINLOG_MONITOR = 1119;
	public static readonly BINLOG_REPLAY = 1120;
	public static readonly FEDERATED_ADMIN = 1121;
	public static readonly READ_ONLY_ADMIN = 1122;
	public static readonly REPLICA = 1123;
	public static readonly REPLICAS = 1124;
	public static readonly REPLICATION_MASTER_ADMIN = 1125;
	public static readonly MONITOR = 1126;
	public static readonly READ_ONLY = 1127;
	public static readonly REPLAY = 1128;
	public static readonly VAR_ASSIGN = 1129;
	public static readonly PLUS_ASSIGN = 1130;
	public static readonly MINUS_ASSIGN = 1131;
	public static readonly MULT_ASSIGN = 1132;
	public static readonly DIV_ASSIGN = 1133;
	public static readonly MOD_ASSIGN = 1134;
	public static readonly AND_ASSIGN = 1135;
	public static readonly XOR_ASSIGN = 1136;
	public static readonly OR_ASSIGN = 1137;
	public static readonly STAR = 1138;
	public static readonly DIVIDE = 1139;
	public static readonly MODULE = 1140;
	public static readonly PLUS = 1141;
	public static readonly MINUS = 1142;
	public static readonly DIV = 1143;
	public static readonly MOD = 1144;
	public static readonly EQUAL_SYMBOL = 1145;
	public static readonly GREATER_SYMBOL = 1146;
	public static readonly LESS_SYMBOL = 1147;
	public static readonly EXCLAMATION_SYMBOL = 1148;
	public static readonly BIT_NOT_OP = 1149;
	public static readonly BIT_OR_OP = 1150;
	public static readonly BIT_AND_OP = 1151;
	public static readonly BIT_XOR_OP = 1152;
	public static readonly DOT = 1153;
	public static readonly LR_BRACKET = 1154;
	public static readonly RR_BRACKET = 1155;
	public static readonly COMMA = 1156;
	public static readonly SEMI = 1157;
	public static readonly AT_SIGN = 1158;
	public static readonly ZERO_DECIMAL = 1159;
	public static readonly ONE_DECIMAL = 1160;
	public static readonly TWO_DECIMAL = 1161;
	public static readonly SINGLE_QUOTE_SYMB = 1162;
	public static readonly DOUBLE_QUOTE_SYMB = 1163;
	public static readonly REVERSE_QUOTE_SYMB = 1164;
	public static readonly COLON_SYMB = 1165;
	public static readonly CHARSET_REVERSE_QOUTE_STRING = 1166;
	public static readonly FILESIZE_LITERAL = 1167;
	public static readonly START_NATIONAL_STRING_LITERAL = 1168;
	public static readonly STRING_LITERAL = 1169;
	public static readonly DECIMAL_LITERAL = 1170;
	public static readonly HEXADECIMAL_LITERAL = 1171;
	public static readonly REAL_LITERAL = 1172;
	public static readonly NULL_SPEC_LITERAL = 1173;
	public static readonly BIT_STRING = 1174;
	public static readonly STRING_CHARSET_NAME = 1175;
	public static readonly DOT_ID = 1176;
	public static readonly ID = 1177;
	public static readonly REVERSE_QUOTE_ID = 1178;
	public static readonly STRING_USER_NAME = 1179;
	public static readonly IP_ADDRESS = 1180;
	public static readonly STRING_USER_NAME_MARIADB = 1181;
	public static readonly LOCAL_ID = 1182;
	public static readonly GLOBAL_ID = 1183;
	public static readonly ERROR_RECONGNIGION = 1184;
	public static readonly LR_BRACKETRR_BRACKET = 1185;
	public static readonly RULE_root = 0;
	public static readonly RULE_sqlStatements = 1;
	public static readonly RULE_sqlStatement = 2;
	public static readonly RULE_setStatementFor = 3;
	public static readonly RULE_emptyStatement_ = 4;
	public static readonly RULE_ddlStatement = 5;
	public static readonly RULE_dmlStatement = 6;
	public static readonly RULE_transactionStatement = 7;
	public static readonly RULE_replicationStatement = 8;
	public static readonly RULE_preparedStatement = 9;
	public static readonly RULE_compoundStatement = 10;
	public static readonly RULE_administrationStatement = 11;
	public static readonly RULE_utilityStatement = 12;
	public static readonly RULE_createDatabase = 13;
	public static readonly RULE_createEvent = 14;
	public static readonly RULE_createIndex = 15;
	public static readonly RULE_createLogfileGroup = 16;
	public static readonly RULE_createProcedure = 17;
	public static readonly RULE_createFunction = 18;
	public static readonly RULE_createRole = 19;
	public static readonly RULE_createServer = 20;
	public static readonly RULE_createTable = 21;
	public static readonly RULE_createTablespaceInnodb = 22;
	public static readonly RULE_createTablespaceNdb = 23;
	public static readonly RULE_createTrigger = 24;
	public static readonly RULE_withClause = 25;
	public static readonly RULE_commonTableExpressions = 26;
	public static readonly RULE_cteName = 27;
	public static readonly RULE_cteColumnName = 28;
	public static readonly RULE_createView = 29;
	public static readonly RULE_createSequence = 30;
	public static readonly RULE_sequenceSpec = 31;
	public static readonly RULE_createDatabaseOption = 32;
	public static readonly RULE_charSet = 33;
	public static readonly RULE_currentUserExpression = 34;
	public static readonly RULE_ownerStatement = 35;
	public static readonly RULE_scheduleExpression = 36;
	public static readonly RULE_timestampValue = 37;
	public static readonly RULE_intervalExpr = 38;
	public static readonly RULE_intervalType = 39;
	public static readonly RULE_enableType = 40;
	public static readonly RULE_indexType = 41;
	public static readonly RULE_indexOption = 42;
	public static readonly RULE_procedureParameter = 43;
	public static readonly RULE_functionParameter = 44;
	public static readonly RULE_routineOption = 45;
	public static readonly RULE_serverOption = 46;
	public static readonly RULE_createDefinitions = 47;
	public static readonly RULE_createDefinition = 48;
	public static readonly RULE_columnDefinition = 49;
	public static readonly RULE_columnConstraint = 50;
	public static readonly RULE_tableConstraint = 51;
	public static readonly RULE_referenceDefinition = 52;
	public static readonly RULE_referenceAction = 53;
	public static readonly RULE_referenceControlType = 54;
	public static readonly RULE_indexColumnDefinition = 55;
	public static readonly RULE_tableOption = 56;
	public static readonly RULE_tableType = 57;
	public static readonly RULE_tablespaceStorage = 58;
	public static readonly RULE_partitionDefinitions = 59;
	public static readonly RULE_partitionFunctionDefinition = 60;
	public static readonly RULE_subpartitionFunctionDefinition = 61;
	public static readonly RULE_partitionDefinition = 62;
	public static readonly RULE_partitionDefinerAtom = 63;
	public static readonly RULE_partitionDefinerVector = 64;
	public static readonly RULE_subpartitionDefinition = 65;
	public static readonly RULE_partitionOption = 66;
	public static readonly RULE_alterDatabase = 67;
	public static readonly RULE_alterEvent = 68;
	public static readonly RULE_alterFunction = 69;
	public static readonly RULE_alterInstance = 70;
	public static readonly RULE_alterLogfileGroup = 71;
	public static readonly RULE_alterProcedure = 72;
	public static readonly RULE_alterServer = 73;
	public static readonly RULE_alterTable = 74;
	public static readonly RULE_alterTablespace = 75;
	public static readonly RULE_alterView = 76;
	public static readonly RULE_alterSequence = 77;
	public static readonly RULE_alterSpecification = 78;
	public static readonly RULE_alterPartitionSpecification = 79;
	public static readonly RULE_dropDatabase = 80;
	public static readonly RULE_dropEvent = 81;
	public static readonly RULE_dropIndex = 82;
	public static readonly RULE_dropLogfileGroup = 83;
	public static readonly RULE_dropProcedure = 84;
	public static readonly RULE_dropFunction = 85;
	public static readonly RULE_dropServer = 86;
	public static readonly RULE_dropTable = 87;
	public static readonly RULE_dropTablespace = 88;
	public static readonly RULE_dropTrigger = 89;
	public static readonly RULE_dropView = 90;
	public static readonly RULE_dropRole = 91;
	public static readonly RULE_setRole = 92;
	public static readonly RULE_dropSequence = 93;
	public static readonly RULE_renameTable = 94;
	public static readonly RULE_renameTableClause = 95;
	public static readonly RULE_truncateTable = 96;
	public static readonly RULE_callStatement = 97;
	public static readonly RULE_deleteStatement = 98;
	public static readonly RULE_doStatement = 99;
	public static readonly RULE_handlerStatement = 100;
	public static readonly RULE_insertStatement = 101;
	public static readonly RULE_loadDataStatement = 102;
	public static readonly RULE_loadXmlStatement = 103;
	public static readonly RULE_replaceStatement = 104;
	public static readonly RULE_selectStatement = 105;
	public static readonly RULE_updateStatement = 106;
	public static readonly RULE_valuesStatement = 107;
	public static readonly RULE_insertStatementValue = 108;
	public static readonly RULE_updatedElement = 109;
	public static readonly RULE_assignmentField = 110;
	public static readonly RULE_lockClause = 111;
	public static readonly RULE_singleDeleteStatement = 112;
	public static readonly RULE_multipleDeleteStatement = 113;
	public static readonly RULE_handlerOpenStatement = 114;
	public static readonly RULE_handlerReadIndexStatement = 115;
	public static readonly RULE_handlerReadStatement = 116;
	public static readonly RULE_handlerCloseStatement = 117;
	public static readonly RULE_singleUpdateStatement = 118;
	public static readonly RULE_multipleUpdateStatement = 119;
	public static readonly RULE_orderByClause = 120;
	public static readonly RULE_orderByExpression = 121;
	public static readonly RULE_tableSources = 122;
	public static readonly RULE_tableSource = 123;
	public static readonly RULE_tableSourceItem = 124;
	public static readonly RULE_indexHint = 125;
	public static readonly RULE_indexHintType = 126;
	public static readonly RULE_joinPart = 127;
	public static readonly RULE_queryExpression = 128;
	public static readonly RULE_queryExpressionNointo = 129;
	public static readonly RULE_querySpecification = 130;
	public static readonly RULE_querySpecificationNointo = 131;
	public static readonly RULE_unionParenthesis = 132;
	public static readonly RULE_unionStatement = 133;
	public static readonly RULE_lateralStatement = 134;
	public static readonly RULE_jsonTable = 135;
	public static readonly RULE_jsonColumnList = 136;
	public static readonly RULE_jsonColumn = 137;
	public static readonly RULE_jsonOnEmpty = 138;
	public static readonly RULE_jsonOnError = 139;
	public static readonly RULE_selectSpec = 140;
	public static readonly RULE_selectElements = 141;
	public static readonly RULE_selectElement = 142;
	public static readonly RULE_selectIntoExpression = 143;
	public static readonly RULE_selectFieldsInto = 144;
	public static readonly RULE_selectLinesInto = 145;
	public static readonly RULE_fromClause = 146;
	public static readonly RULE_groupByClause = 147;
	public static readonly RULE_havingClause = 148;
	public static readonly RULE_windowClause = 149;
	public static readonly RULE_groupByItem = 150;
	public static readonly RULE_limitClause = 151;
	public static readonly RULE_limitClauseAtom = 152;
	public static readonly RULE_startTransaction = 153;
	public static readonly RULE_beginWork = 154;
	public static readonly RULE_commitWork = 155;
	public static readonly RULE_rollbackWork = 156;
	public static readonly RULE_savepointStatement = 157;
	public static readonly RULE_rollbackStatement = 158;
	public static readonly RULE_releaseStatement = 159;
	public static readonly RULE_lockTables = 160;
	public static readonly RULE_unlockTables = 161;
	public static readonly RULE_setAutocommitStatement = 162;
	public static readonly RULE_setTransactionStatement = 163;
	public static readonly RULE_transactionMode = 164;
	public static readonly RULE_lockTableElement = 165;
	public static readonly RULE_lockAction = 166;
	public static readonly RULE_transactionOption = 167;
	public static readonly RULE_transactionLevel = 168;
	public static readonly RULE_changeMaster = 169;
	public static readonly RULE_changeReplicationFilter = 170;
	public static readonly RULE_purgeBinaryLogs = 171;
	public static readonly RULE_resetMaster = 172;
	public static readonly RULE_resetSlave = 173;
	public static readonly RULE_startSlave = 174;
	public static readonly RULE_stopSlave = 175;
	public static readonly RULE_startGroupReplication = 176;
	public static readonly RULE_stopGroupReplication = 177;
	public static readonly RULE_masterOption = 178;
	public static readonly RULE_stringMasterOption = 179;
	public static readonly RULE_decimalMasterOption = 180;
	public static readonly RULE_boolMasterOption = 181;
	public static readonly RULE_channelOption = 182;
	public static readonly RULE_replicationFilter = 183;
	public static readonly RULE_tablePair = 184;
	public static readonly RULE_threadType = 185;
	public static readonly RULE_untilOption = 186;
	public static readonly RULE_connectionOption = 187;
	public static readonly RULE_gtuidSet = 188;
	public static readonly RULE_xaStartTransaction = 189;
	public static readonly RULE_xaEndTransaction = 190;
	public static readonly RULE_xaPrepareStatement = 191;
	public static readonly RULE_xaCommitWork = 192;
	public static readonly RULE_xaRollbackWork = 193;
	public static readonly RULE_xaRecoverWork = 194;
	public static readonly RULE_prepareStatement = 195;
	public static readonly RULE_executeStatement = 196;
	public static readonly RULE_deallocatePrepare = 197;
	public static readonly RULE_routineBody = 198;
	public static readonly RULE_blockStatement = 199;
	public static readonly RULE_caseStatement = 200;
	public static readonly RULE_ifStatement = 201;
	public static readonly RULE_iterateStatement = 202;
	public static readonly RULE_leaveStatement = 203;
	public static readonly RULE_loopStatement = 204;
	public static readonly RULE_repeatStatement = 205;
	public static readonly RULE_returnStatement = 206;
	public static readonly RULE_whileStatement = 207;
	public static readonly RULE_cursorStatement = 208;
	public static readonly RULE_declareVariable = 209;
	public static readonly RULE_declareCondition = 210;
	public static readonly RULE_declareCursor = 211;
	public static readonly RULE_declareHandler = 212;
	public static readonly RULE_handlerConditionValue = 213;
	public static readonly RULE_procedureSqlStatement = 214;
	public static readonly RULE_caseAlternative = 215;
	public static readonly RULE_elifAlternative = 216;
	public static readonly RULE_alterUser = 217;
	public static readonly RULE_createUser = 218;
	public static readonly RULE_dropUser = 219;
	public static readonly RULE_grantStatement = 220;
	public static readonly RULE_roleOption = 221;
	public static readonly RULE_grantProxy = 222;
	public static readonly RULE_renameUser = 223;
	public static readonly RULE_revokeStatement = 224;
	public static readonly RULE_revokeProxy = 225;
	public static readonly RULE_setPasswordStatement = 226;
	public static readonly RULE_userSpecification = 227;
	public static readonly RULE_userAuthOption = 228;
	public static readonly RULE_authenticationRule = 229;
	public static readonly RULE_tlsOption = 230;
	public static readonly RULE_userResourceOption = 231;
	public static readonly RULE_userPasswordOption = 232;
	public static readonly RULE_userLockOption = 233;
	public static readonly RULE_privelegeClause = 234;
	public static readonly RULE_privilege = 235;
	public static readonly RULE_privilegeLevel = 236;
	public static readonly RULE_renameUserClause = 237;
	public static readonly RULE_analyzeTable = 238;
	public static readonly RULE_checkTable = 239;
	public static readonly RULE_checksumTable = 240;
	public static readonly RULE_optimizeTable = 241;
	public static readonly RULE_repairTable = 242;
	public static readonly RULE_checkTableOption = 243;
	public static readonly RULE_createUdfunction = 244;
	public static readonly RULE_installPlugin = 245;
	public static readonly RULE_uninstallPlugin = 246;
	public static readonly RULE_setStatement = 247;
	public static readonly RULE_showStatement = 248;
	public static readonly RULE_explainStatement = 249;
	public static readonly RULE_variableClause = 250;
	public static readonly RULE_showCommonEntity = 251;
	public static readonly RULE_showFilter = 252;
	public static readonly RULE_showGlobalInfoClause = 253;
	public static readonly RULE_showSchemaEntity = 254;
	public static readonly RULE_showProfileType = 255;
	public static readonly RULE_binlogStatement = 256;
	public static readonly RULE_cacheIndexStatement = 257;
	public static readonly RULE_flushStatement = 258;
	public static readonly RULE_killStatement = 259;
	public static readonly RULE_loadIndexIntoCache = 260;
	public static readonly RULE_resetStatement = 261;
	public static readonly RULE_shutdownStatement = 262;
	public static readonly RULE_tableIndexes = 263;
	public static readonly RULE_flushOption = 264;
	public static readonly RULE_flushTableOption = 265;
	public static readonly RULE_loadedTableIndexes = 266;
	public static readonly RULE_simpleDescribeStatement = 267;
	public static readonly RULE_fullDescribeStatement = 268;
	public static readonly RULE_formatJsonStatement = 269;
	public static readonly RULE_helpStatement = 270;
	public static readonly RULE_useStatement = 271;
	public static readonly RULE_signalStatement = 272;
	public static readonly RULE_resignalStatement = 273;
	public static readonly RULE_signalConditionInformation = 274;
	public static readonly RULE_diagnosticsStatement = 275;
	public static readonly RULE_diagnosticsConditionInformationName = 276;
	public static readonly RULE_describeObjectClause = 277;
	public static readonly RULE_fullId = 278;
	public static readonly RULE_tableName = 279;
	public static readonly RULE_roleName = 280;
	public static readonly RULE_fullColumnName = 281;
	public static readonly RULE_indexColumnName = 282;
	public static readonly RULE_userName = 283;
	public static readonly RULE_mysqlVariable = 284;
	public static readonly RULE_charsetName = 285;
	public static readonly RULE_collationName = 286;
	public static readonly RULE_engineName = 287;
	public static readonly RULE_engineNameBase = 288;
	public static readonly RULE_encryptedLiteral = 289;
	public static readonly RULE_uuidSet = 290;
	public static readonly RULE_xid = 291;
	public static readonly RULE_xuidStringId = 292;
	public static readonly RULE_authPlugin = 293;
	public static readonly RULE_uid = 294;
	public static readonly RULE_simpleId = 295;
	public static readonly RULE_dottedId = 296;
	public static readonly RULE_decimalLiteral = 297;
	public static readonly RULE_fileSizeLiteral = 298;
	public static readonly RULE_stringLiteral = 299;
	public static readonly RULE_booleanLiteral = 300;
	public static readonly RULE_hexadecimalLiteral = 301;
	public static readonly RULE_nullNotnull = 302;
	public static readonly RULE_constant = 303;
	public static readonly RULE_dataType = 304;
	public static readonly RULE_collectionOptions = 305;
	public static readonly RULE_convertedDataType = 306;
	public static readonly RULE_lengthOneDimension = 307;
	public static readonly RULE_lengthTwoDimension = 308;
	public static readonly RULE_lengthTwoOptionalDimension = 309;
	public static readonly RULE_uidList = 310;
	public static readonly RULE_tables = 311;
	public static readonly RULE_indexColumnNames = 312;
	public static readonly RULE_expressions = 313;
	public static readonly RULE_expressionsWithDefaults = 314;
	public static readonly RULE_constants = 315;
	public static readonly RULE_simpleStrings = 316;
	public static readonly RULE_userVariables = 317;
	public static readonly RULE_defaultValue = 318;
	public static readonly RULE_currentTimestamp = 319;
	public static readonly RULE_expressionOrDefault = 320;
	public static readonly RULE_ifExists = 321;
	public static readonly RULE_ifNotExists = 322;
	public static readonly RULE_orReplace = 323;
	public static readonly RULE_waitNowaitClause = 324;
	public static readonly RULE_lockOption = 325;
	public static readonly RULE_functionCall = 326;
	public static readonly RULE_specificFunction = 327;
	public static readonly RULE_caseFuncAlternative = 328;
	public static readonly RULE_levelsInWeightString = 329;
	public static readonly RULE_levelInWeightListElement = 330;
	public static readonly RULE_aggregateWindowedFunction = 331;
	public static readonly RULE_nonAggregateWindowedFunction = 332;
	public static readonly RULE_overClause = 333;
	public static readonly RULE_windowSpec = 334;
	public static readonly RULE_windowName = 335;
	public static readonly RULE_frameClause = 336;
	public static readonly RULE_frameUnits = 337;
	public static readonly RULE_frameExtent = 338;
	public static readonly RULE_frameBetween = 339;
	public static readonly RULE_frameRange = 340;
	public static readonly RULE_partitionClause = 341;
	public static readonly RULE_scalarFunctionName = 342;
	public static readonly RULE_passwordFunctionClause = 343;
	public static readonly RULE_functionArgs = 344;
	public static readonly RULE_functionArg = 345;
	public static readonly RULE_expression = 346;
	public static readonly RULE_predicate = 347;
	public static readonly RULE_expressionAtom = 348;
	public static readonly RULE_unaryOperator = 349;
	public static readonly RULE_comparisonOperator = 350;
	public static readonly RULE_logicalOperator = 351;
	public static readonly RULE_bitOperator = 352;
	public static readonly RULE_mathOperator = 353;
	public static readonly RULE_jsonOperator = 354;
	public static readonly RULE_charsetNameBase = 355;
	public static readonly RULE_transactionLevelBase = 356;
	public static readonly RULE_privilegesBase = 357;
	public static readonly RULE_intervalTypeBase = 358;
	public static readonly RULE_dataTypeBase = 359;
	public static readonly RULE_keywordsCanBeId = 360;
	public static readonly RULE_functionNameBase = 361;
	// tslint:disable:no-trailing-whitespace
	public static readonly ruleNames: string[] = [
		"root", "sqlStatements", "sqlStatement", "setStatementFor", "emptyStatement_", 
		"ddlStatement", "dmlStatement", "transactionStatement", "replicationStatement", 
		"preparedStatement", "compoundStatement", "administrationStatement", "utilityStatement", 
		"createDatabase", "createEvent", "createIndex", "createLogfileGroup", 
		"createProcedure", "createFunction", "createRole", "createServer", "createTable", 
		"createTablespaceInnodb", "createTablespaceNdb", "createTrigger", "withClause", 
		"commonTableExpressions", "cteName", "cteColumnName", "createView", "createSequence", 
		"sequenceSpec", "createDatabaseOption", "charSet", "currentUserExpression", 
		"ownerStatement", "scheduleExpression", "timestampValue", "intervalExpr", 
		"intervalType", "enableType", "indexType", "indexOption", "procedureParameter", 
		"functionParameter", "routineOption", "serverOption", "createDefinitions", 
		"createDefinition", "columnDefinition", "columnConstraint", "tableConstraint", 
		"referenceDefinition", "referenceAction", "referenceControlType", "indexColumnDefinition", 
		"tableOption", "tableType", "tablespaceStorage", "partitionDefinitions", 
		"partitionFunctionDefinition", "subpartitionFunctionDefinition", "partitionDefinition", 
		"partitionDefinerAtom", "partitionDefinerVector", "subpartitionDefinition", 
		"partitionOption", "alterDatabase", "alterEvent", "alterFunction", "alterInstance", 
		"alterLogfileGroup", "alterProcedure", "alterServer", "alterTable", "alterTablespace", 
		"alterView", "alterSequence", "alterSpecification", "alterPartitionSpecification", 
		"dropDatabase", "dropEvent", "dropIndex", "dropLogfileGroup", "dropProcedure", 
		"dropFunction", "dropServer", "dropTable", "dropTablespace", "dropTrigger", 
		"dropView", "dropRole", "setRole", "dropSequence", "renameTable", "renameTableClause", 
		"truncateTable", "callStatement", "deleteStatement", "doStatement", "handlerStatement", 
		"insertStatement", "loadDataStatement", "loadXmlStatement", "replaceStatement", 
		"selectStatement", "updateStatement", "valuesStatement", "insertStatementValue", 
		"updatedElement", "assignmentField", "lockClause", "singleDeleteStatement", 
		"multipleDeleteStatement", "handlerOpenStatement", "handlerReadIndexStatement", 
		"handlerReadStatement", "handlerCloseStatement", "singleUpdateStatement", 
		"multipleUpdateStatement", "orderByClause", "orderByExpression", "tableSources", 
		"tableSource", "tableSourceItem", "indexHint", "indexHintType", "joinPart", 
		"queryExpression", "queryExpressionNointo", "querySpecification", "querySpecificationNointo", 
		"unionParenthesis", "unionStatement", "lateralStatement", "jsonTable", 
		"jsonColumnList", "jsonColumn", "jsonOnEmpty", "jsonOnError", "selectSpec", 
		"selectElements", "selectElement", "selectIntoExpression", "selectFieldsInto", 
		"selectLinesInto", "fromClause", "groupByClause", "havingClause", "windowClause", 
		"groupByItem", "limitClause", "limitClauseAtom", "startTransaction", "beginWork", 
		"commitWork", "rollbackWork", "savepointStatement", "rollbackStatement", 
		"releaseStatement", "lockTables", "unlockTables", "setAutocommitStatement", 
		"setTransactionStatement", "transactionMode", "lockTableElement", "lockAction", 
		"transactionOption", "transactionLevel", "changeMaster", "changeReplicationFilter", 
		"purgeBinaryLogs", "resetMaster", "resetSlave", "startSlave", "stopSlave", 
		"startGroupReplication", "stopGroupReplication", "masterOption", "stringMasterOption", 
		"decimalMasterOption", "boolMasterOption", "channelOption", "replicationFilter", 
		"tablePair", "threadType", "untilOption", "connectionOption", "gtuidSet", 
		"xaStartTransaction", "xaEndTransaction", "xaPrepareStatement", "xaCommitWork", 
		"xaRollbackWork", "xaRecoverWork", "prepareStatement", "executeStatement", 
		"deallocatePrepare", "routineBody", "blockStatement", "caseStatement", 
		"ifStatement", "iterateStatement", "leaveStatement", "loopStatement", 
		"repeatStatement", "returnStatement", "whileStatement", "cursorStatement", 
		"declareVariable", "declareCondition", "declareCursor", "declareHandler", 
		"handlerConditionValue", "procedureSqlStatement", "caseAlternative", "elifAlternative", 
		"alterUser", "createUser", "dropUser", "grantStatement", "roleOption", 
		"grantProxy", "renameUser", "revokeStatement", "revokeProxy", "setPasswordStatement", 
		"userSpecification", "userAuthOption", "authenticationRule", "tlsOption", 
		"userResourceOption", "userPasswordOption", "userLockOption", "privelegeClause", 
		"privilege", "privilegeLevel", "renameUserClause", "analyzeTable", "checkTable", 
		"checksumTable", "optimizeTable", "repairTable", "checkTableOption", "createUdfunction", 
		"installPlugin", "uninstallPlugin", "setStatement", "showStatement", "explainStatement", 
		"variableClause", "showCommonEntity", "showFilter", "showGlobalInfoClause", 
		"showSchemaEntity", "showProfileType", "binlogStatement", "cacheIndexStatement", 
		"flushStatement", "killStatement", "loadIndexIntoCache", "resetStatement", 
		"shutdownStatement", "tableIndexes", "flushOption", "flushTableOption", 
		"loadedTableIndexes", "simpleDescribeStatement", "fullDescribeStatement", 
		"formatJsonStatement", "helpStatement", "useStatement", "signalStatement", 
		"resignalStatement", "signalConditionInformation", "diagnosticsStatement", 
		"diagnosticsConditionInformationName", "describeObjectClause", "fullId", 
		"tableName", "roleName", "fullColumnName", "indexColumnName", "userName", 
		"mysqlVariable", "charsetName", "collationName", "engineName", "engineNameBase", 
		"encryptedLiteral", "uuidSet", "xid", "xuidStringId", "authPlugin", "uid", 
		"simpleId", "dottedId", "decimalLiteral", "fileSizeLiteral", "stringLiteral", 
		"booleanLiteral", "hexadecimalLiteral", "nullNotnull", "constant", "dataType", 
		"collectionOptions", "convertedDataType", "lengthOneDimension", "lengthTwoDimension", 
		"lengthTwoOptionalDimension", "uidList", "tables", "indexColumnNames", 
		"expressions", "expressionsWithDefaults", "constants", "simpleStrings", 
		"userVariables", "defaultValue", "currentTimestamp", "expressionOrDefault", 
		"ifExists", "ifNotExists", "orReplace", "waitNowaitClause", "lockOption", 
		"functionCall", "specificFunction", "caseFuncAlternative", "levelsInWeightString", 
		"levelInWeightListElement", "aggregateWindowedFunction", "nonAggregateWindowedFunction", 
		"overClause", "windowSpec", "windowName", "frameClause", "frameUnits", 
		"frameExtent", "frameBetween", "frameRange", "partitionClause", "scalarFunctionName", 
		"passwordFunctionClause", "functionArgs", "functionArg", "expression", 
		"predicate", "expressionAtom", "unaryOperator", "comparisonOperator", 
		"logicalOperator", "bitOperator", "mathOperator", "jsonOperator", "charsetNameBase", 
		"transactionLevelBase", "privilegesBase", "intervalTypeBase", "dataTypeBase", 
		"keywordsCanBeId", "functionNameBase",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, "'ADD'", "'ALL'", 
		"'ALTER'", "'ALWAYS'", "'ANALYZE'", "'AND'", "'ARRAY'", "'AS'", "'ASC'", 
		"'ATTRIBUTE'", "'BEFORE'", "'BETWEEN'", "'BODY'", "'BOTH'", "'BUCKETS'", 
		"'BY'", "'CALL'", "'CASCADE'", "'CASE'", "'CAST'", "'CHANGE'", "'CHARACTER'", 
		"'CHECK'", "'COLLATE'", "'COLUMN'", "'CONDITION'", "'CONSTRAINT'", "'CONTINUE'", 
		"'CONVERT'", "'CREATE'", "'CROSS'", "'CURRENT'", "'CURRENT_ROLE'", "'CURRENT_USER'", 
		"'CURSOR'", "'DATABASE'", "'DATABASES'", "'DECLARE'", "'DEFAULT'", "'DELAYED'", 
		"'DELETE'", "'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", "'DIAGNOSTICS'", 
		"'DISTINCT'", "'DISTINCTROW'", "'DROP'", "'EACH'", "'ELSE'", "'ELSEIF'", 
		"'EMPTY'", "'ENCLOSED'", "'ESCAPED'", "'EXCEPT'", "'EXISTS'", "'EXIT'", 
		"'EXPLAIN'", "'FALSE'", "'FETCH'", "'FOR'", "'FORCE'", "'FOREIGN'", "'FROM'", 
		"'FULLTEXT'", "'GENERATED'", "'GET'", "'GRANT'", "'GROUP'", "'HAVING'", 
		"'HIGH_PRIORITY'", "'HISTOGRAM'", "'IF'", "'IGNORE'", "'IGNORED'", "'IN'", 
		"'INDEX'", "'INFILE'", "'INNER'", "'INOUT'", "'INSERT'", "'INTERVAL'", 
		"'INTO'", "'IS'", "'ITERATE'", "'JOIN'", "'KEY'", "'KEYS'", "'KILL'", 
		"'LATERAL'", "'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", "'LINEAR'", 
		"'LINES'", "'LOAD'", "'LOCK'", "'LOCKED'", "'LOOP'", "'LOW_PRIORITY'", 
		"'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'", "'MATCH'", "'MAXVALUE'", 
		"'MINVALUE'", "'MODIFIES'", "'NATURAL'", "'NOT'", "'NO_WRITE_TO_BINLOG'", 
		"'NULL'", "'NUMBER'", "'ON'", "'OPTIMIZE'", "'OPTION'", "'OPTIONAL'", 
		"'OPTIONALLY'", "'OR'", "'ORDER'", "'OUT'", "'OUTER'", "'OUTFILE'", "'OVER'", 
		"'PARTITION'", "'PRIMARY'", "'PACKAGE'", "'PROCEDURE'", "'PURGE'", "'RANGE'", 
		"'READ'", "'READS'", "'REFERENCES'", "'REGEXP'", "'RELEASE'", "'RENAME'", 
		"'REPEAT'", "'REPLACE'", "'REQUIRE'", "'RESIGNAL'", "'RESTRICT'", "'RETAIN'", 
		"'RETURN'", "'REVOKE'", "'RIGHT'", "'RLIKE'", "'SCHEMA'", "'SCHEMAS'", 
		"'SELECT'", "'SET'", "'SEPARATOR'", "'SHOW'", "'SIGNAL'", "'SKIP'", "'SPATIAL'", 
		"'SQL'", "'SQLEXCEPTION'", "'SQLSTATE'", "'SQLWARNING'", "'SQL_BIG_RESULT'", 
		"'SQL_CALC_FOUND_ROWS'", "'SQL_SMALL_RESULT'", "'SSL'", "'STACKED'", "'STARTING'", 
		"'STATEMENT'", "'STRAIGHT_JOIN'", "'TABLE'", "'TERMINATED'", "'THEN'", 
		"'TO'", "'TRAILING'", "'TRIGGER'", "'TRUE'", "'UNDO'", "'UNION'", "'UNIQUE'", 
		"'UNLOCK'", "'UNSIGNED'", "'UPDATE'", "'USAGE'", "'USE'", "'USING'", "'VALUES'", 
		"'WHEN'", "'WHERE'", "'WHILE'", "'WITH'", "'WRITE'", "'XOR'", "'ZEROFILL'", 
		"'TINYINT'", "'SMALLINT'", "'MEDIUMINT'", "'MIDDLEINT'", "'INT'", "'INT1'", 
		"'INT2'", "'INT3'", "'INT4'", "'INT8'", "'INTEGER'", "'BIGINT'", "'REAL'", 
		"'DOUBLE'", "'PRECISION'", "'FLOAT'", "'FLOAT4'", "'FLOAT8'", "'DECIMAL'", 
		"'DEC'", "'NUMERIC'", "'DATE'", "'TIME'", "'TIMESTAMP'", "'DATETIME'", 
		"'YEAR'", "'CHAR'", "'VARCHAR'", "'NVARCHAR'", "'NATIONAL'", "'BINARY'", 
		"'VARBINARY'", "'TINYBLOB'", "'BLOB'", "'MEDIUMBLOB'", "'LONG'", "'LONGBLOB'", 
		"'TINYTEXT'", "'TEXT'", "'MEDIUMTEXT'", "'LONGTEXT'", "'ENUM'", "'VARYING'", 
		"'SERIAL'", "'YEAR_MONTH'", "'DAY_HOUR'", "'DAY_MINUTE'", "'DAY_SECOND'", 
		"'HOUR_MINUTE'", "'HOUR_SECOND'", "'MINUTE_SECOND'", "'SECOND_MICROSECOND'", 
		"'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", "'DAY_MICROSECOND'", "'JSON_ARRAY'", 
		"'JSON_ARRAYAGG'", "'JSON_ARRAY_APPEND'", "'JSON_ARRAY_INSERT'", "'JSON_CONTAINS'", 
		"'JSON_CONTAINS_PATH'", "'JSON_DEPTH'", "'JSON_EXTRACT'", "'JSON_INSERT'", 
		"'JSON_KEYS'", "'JSON_LENGTH'", "'JSON_MERGE'", "'JSON_MERGE_PATCH'", 
		"'JSON_MERGE_PRESERVE'", "'JSON_OBJECT'", "'JSON_OBJECTAGG'", "'JSON_OVERLAPS'", 
		"'JSON_PRETTY'", "'JSON_QUOTE'", "'JSON_REMOVE'", "'JSON_REPLACE'", "'JSON_SCHEMA_VALID'", 
		"'JSON_SCHEMA_VALIDATION_REPORT'", "'JSON_SEARCH'", "'JSON_SET'", "'JSON_STORAGE_FREE'", 
		"'JSON_STORAGE_SIZE'", "'JSON_TABLE'", "'JSON_TYPE'", "'JSON_UNQUOTE'", 
		"'JSON_VALID'", "'JSON_VALUE'", "'NESTED'", "'ORDINALITY'", "'PATH'", 
		"'AVG'", "'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'", "'CUME_DIST'", 
		"'DENSE_RANK'", "'FIRST_VALUE'", "'GROUP_CONCAT'", "'LAG'", "'LAST_VALUE'", 
		"'LEAD'", "'MAX'", "'MIN'", "'NTILE'", "'NTH_VALUE'", "'PERCENT_RANK'", 
		"'RANK'", "'ROW_NUMBER'", "'STD'", "'STDDEV'", "'STDDEV_POP'", "'STDDEV_SAMP'", 
		"'SUM'", "'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'", "'CURRENT_DATE'", "'CURRENT_TIME'", 
		"'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'CURDATE'", "'CURTIME'", "'DATE_ADD'", 
		"'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", "'NOW'", "'POSITION'", 
		"'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", "'TRIM'", "'UTC_DATE'", "'UTC_TIME'", 
		"'UTC_TIMESTAMP'", "'ACCOUNT'", "'ACTION'", "'AFTER'", "'AGGREGATE'", 
		"'ALGORITHM'", "'ANY'", "'AT'", "'AUTHORS'", "'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", 
		"'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", "'BEGIN'", "'BINLOG'", "'BIT'", 
		"'BLOCK'", "'BOOL'", "'BOOLEAN'", "'BTREE'", "'CACHE'", "'CASCADED'", 
		"'CHAIN'", "'CHANGED'", "'CHANNEL'", "'CHECKSUM'", "'PAGE_CHECKSUM'", 
		"'CIPHER'", "'CLASS_ORIGIN'", "'CLIENT'", "'CLOSE'", "'CLUSTERING'", "'COALESCE'", 
		"'CODE'", "'COLUMNS'", "'COLUMN_FORMAT'", "'COLUMN_NAME'", "'COMMENT'", 
		"'COMMIT'", "'COMPACT'", "'COMPLETION'", "'COMPRESSED'", undefined, "'CONCURRENT'", 
		"'CONNECT'", "'CONNECTION'", "'CONSISTENT'", "'CONSTRAINT_CATALOG'", "'CONSTRAINT_SCHEMA'", 
		"'CONSTRAINT_NAME'", "'CONTAINS'", "'CONTEXT'", "'CONTRIBUTORS'", "'COPY'", 
		"'CPU'", "'CYCLE'", "'CURSOR_NAME'", "'DATA'", "'DATAFILE'", "'DEALLOCATE'", 
		"'DEFAULT_AUTH'", "'DEFINER'", "'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", 
		"'DIRECTORY'", "'DISABLE'", "'DISCARD'", "'DISK'", "'DO'", "'DUMPFILE'", 
		"'DUPLICATE'", "'DYNAMIC'", "'ENABLE'", "'ENCRYPTED'", "'ENCRYPTION'", 
		"'ENCRYPTION_KEY_ID'", "'END'", "'ENDS'", "'ENGINE'", "'ENGINES'", "'ERROR'", 
		"'ERRORS'", "'ESCAPE'", "'EVEN'", "'EVENT'", "'EVENTS'", "'EVERY'", "'EXCHANGE'", 
		"'EXCLUSIVE'", "'EXPIRE'", "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", 
		"'FAILED_LOGIN_ATTEMPTS'", "'FAST'", "'FAULTS'", "'FIELDS'", "'FILE_BLOCK_SIZE'", 
		"'FILTER'", "'FIRST'", "'FIXED'", "'FLUSH'", "'FOLLOWING'", "'FOLLOWS'", 
		"'FOUND'", "'FULL'", "'FUNCTION'", "'GENERAL'", "'GLOBAL'", "'GRANTS'", 
		"'GROUP_REPLICATION'", "'HANDLER'", "'HASH'", "'HELP'", "'HISTORY'", "'HOST'", 
		"'HOSTS'", "'IDENTIFIED'", "'IGNORE_SERVER_IDS'", "'IMPORT'", "'INCREMENT'", 
		"'INDEXES'", "'INITIAL_SIZE'", "'INPLACE'", "'INSERT_METHOD'", "'INSTALL'", 
		"'INSTANCE'", "'INSTANT'", "'INVISIBLE'", "'INVOKER'", "'IO'", "'IO_THREAD'", 
		"'IPC'", "'ISOLATION'", "'ISSUER'", "'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'", 
		"'LAST'", "'LEAVES'", "'LESS'", "'LEVEL'", "'LIST'", "'LOCAL'", "'LOCALES'", 
		"'LOGFILE'", "'LOGS'", "'MASTER'", "'MASTER_AUTO_POSITION'", "'MASTER_CONNECT_RETRY'", 
		"'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", "'MASTER_HOST'", "'MASTER_LOG_FILE'", 
		"'MASTER_LOG_POS'", "'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'", 
		"'MASTER_SSL'", "'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", 
		"'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", "'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", 
		"'MASTER_TLS_VERSION'", "'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'", 
		"'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", 
		"'MAX_USER_CONNECTIONS'", "'MEDIUM'", "'MEMBER'", "'MERGE'", "'MESSAGE_TEXT'", 
		"'MID'", "'MIGRATE'", "'MIN_ROWS'", "'MODE'", "'MODIFY'", "'MUTEX'", "'MYSQL'", 
		"'MYSQL_ERRNO'", "'NAME'", "'NAMES'", "'NCHAR'", "'NEVER'", "'NEXT'", 
		"'NO'", "'NOCACHE'", "'NOCOPY'", "'NOCYCLE'", "'NOMAXVALUE'", "'NOMINVALUE'", 
		"'NOWAIT'", "'NODEGROUP'", "'NONE'", "'ODBC'", "'OFFLINE'", "'OFFSET'", 
		"'OF'", "'OJ'", "'OLD_PASSWORD'", "'ONE'", "'ONLINE'", "'ONLY'", "'OPEN'", 
		"'OPTIMIZER_COSTS'", "'OPTIONS'", "'OWNER'", "'PACK_KEYS'", "'PAGE'", 
		"'PAGE_COMPRESSED'", "'PAGE_COMPRESSION_LEVEL'", "'PARSER'", "'PARTIAL'", 
		"'PARTITIONING'", "'PARTITIONS'", "'PASSWORD'", "'PASSWORD_LOCK_TIME'", 
		"'PHASE'", "'PLUGIN'", "'PLUGIN_DIR'", "'PLUGINS'", "'PORT'", "'PRECEDES'", 
		"'PRECEDING'", "'PREPARE'", "'PRESERVE'", "'PREV'", "'PROCESSLIST'", "'PROFILE'", 
		"'PROFILES'", "'PROXY'", "'QUERY'", "'QUERY_RESPONSE_TIME'", "'QUICK'", 
		"'REBUILD'", "'RECOVER'", "'RECURSIVE'", "'REDO_BUFFER_SIZE'", "'REDUNDANT'", 
		"'RELAY'", "'RELAY_LOG_FILE'", "'RELAY_LOG_POS'", "'RELAYLOG'", "'REMOVE'", 
		"'REORGANIZE'", "'REPAIR'", "'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", 
		"'REPLICATE_IGNORE_DB'", "'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'", 
		"'REPLICATE_WILD_DO_TABLE'", "'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", 
		"'RESET'", "'RESTART'", "'RESUME'", "'RETURNED_SQLSTATE'", "'RETURNING'", 
		"'RETURNS'", "'REUSE'", "'ROLE'", "'ROLLBACK'", "'ROLLUP'", "'ROTATE'", 
		"'ROW'", "'ROWS'", "'ROW_FORMAT'", "'RTREE'", "'SAVEPOINT'", "'SCHEDULE'", 
		"'SECURITY'", "'SEQUENCE'", "'SERVER'", "'SESSION'", "'SHARE'", "'SHARED'", 
		"'SIGNED'", "'SIMPLE'", "'SLAVE'", "'SLAVES'", "'SLOW'", "'SNAPSHOT'", 
		"'SOCKET'", "'SOME'", "'SONAME'", "'SOUNDS'", "'SOURCE'", "'SQL_AFTER_GTIDS'", 
		"'SQL_AFTER_MTS_GAPS'", "'SQL_BEFORE_GTIDS'", "'SQL_BUFFER_RESULT'", "'SQL_CACHE'", 
		"'SQL_NO_CACHE'", "'SQL_THREAD'", "'START'", "'STARTS'", "'STATS_AUTO_RECALC'", 
		"'STATS_PERSISTENT'", "'STATS_SAMPLE_PAGES'", "'STATUS'", "'STOP'", "'STORAGE'", 
		"'STORED'", "'STRING'", "'SUBCLASS_ORIGIN'", "'SUBJECT'", "'SUBPARTITION'", 
		"'SUBPARTITIONS'", "'SUSPEND'", "'SWAPS'", "'SWITCHES'", "'TABLE_NAME'", 
		"'TABLESPACE'", "'TABLE_TYPE'", "'TEMPORARY'", "'TEMPTABLE'", "'THAN'", 
		"'TRADITIONAL'", "'TRANSACTION'", "'TRANSACTIONAL'", "'TRIGGERS'", "'TRUNCATE'", 
		"'TYPES'", "'UNBOUNDED'", "'UNDEFINED'", "'UNDOFILE'", "'UNDO_BUFFER_SIZE'", 
		"'UNINSTALL'", "'UNKNOWN'", "'UNTIL'", "'UPGRADE'", "'USER'", "'USE_FRM'", 
		"'USER_RESOURCES'", "'VALIDATION'", "'VALUE'", "'VARIABLES'", "'VIEW'", 
		"'VIRTUAL'", "'VISIBLE'", "'WAIT'", "'WARNINGS'", "'WINDOW'", "'WITHOUT'", 
		"'WORK'", "'WRAPPER'", "'WSREP_MEMBERSHIP'", "'WSREP_STATUS'", "'X509'", 
		"'XA'", "'XML'", "'YES'", "'EUR'", "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", 
		"'QUARTER'", "'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", "'WEEK'", "'SECOND'", 
		"'MICROSECOND'", "'USER_STATISTICS'", "'CLIENT_STATISTICS'", "'INDEX_STATISTICS'", 
		"'TABLE_STATISTICS'", "'ADMIN'", "'APPLICATION_PASSWORD_ADMIN'", "'AUDIT_ADMIN'", 
		"'BACKUP_ADMIN'", "'BINLOG_ADMIN'", "'BINLOG_ENCRYPTION_ADMIN'", "'CLONE_ADMIN'", 
		"'CONNECTION_ADMIN'", "'ENCRYPTION_KEY_ADMIN'", "'EXECUTE'", "'FILE'", 
		"'FIREWALL_ADMIN'", "'FIREWALL_USER'", "'FLUSH_OPTIMIZER_COSTS'", "'FLUSH_STATUS'", 
		"'FLUSH_TABLES'", "'FLUSH_USER_RESOURCES'", "'GROUP_REPLICATION_ADMIN'", 
		"'INNODB_REDO_LOG_ARCHIVE'", "'INNODB_REDO_LOG_ENABLE'", "'INVOKE'", "'LAMBDA'", 
		"'NDB_STORED_USER'", "'PASSWORDLESS_USER_ADMIN'", "'PERSIST_RO_VARIABLES_ADMIN'", 
		"'PRIVILEGES'", "'PROCESS'", "'RELOAD'", "'REPLICATION_APPLIER'", "'REPLICATION_SLAVE_ADMIN'", 
		"'RESOURCE_GROUP_ADMIN'", "'RESOURCE_GROUP_USER'", "'ROLE_ADMIN'", "'ROUTINE'", 
		"'S3'", "'SERVICE_CONNECTION_ADMIN'", undefined, "'SET_USER_ID'", "'SHOW_ROUTINE'", 
		"'SHUTDOWN'", "'SUPER'", "'SYSTEM_VARIABLES_ADMIN'", "'TABLES'", "'TABLE_ENCRYPTION_ADMIN'", 
		"'VERSION_TOKEN_ADMIN'", "'XA_RECOVER_ADMIN'", "'ARMSCII8'", "'ASCII'", 
		"'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'", "'CP1257'", "'CP850'", "'CP852'", 
		"'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", "'EUCKR'", "'GB18030'", "'GB2312'", 
		"'GBK'", "'GEOSTD8'", "'GREEK'", "'HEBREW'", "'HP8'", "'KEYBCS2'", "'KOI8R'", 
		"'KOI8U'", "'LATIN1'", "'LATIN2'", "'LATIN5'", "'LATIN7'", "'MACCE'", 
		"'MACROMAN'", "'SJIS'", "'SWE7'", "'TIS620'", "'UCS2'", "'UJIS'", "'UTF16'", 
		"'UTF16LE'", "'UTF32'", "'UTF8'", "'UTF8MB3'", "'UTF8MB4'", "'ARCHIVE'", 
		"'BLACKHOLE'", "'CSV'", "'FEDERATED'", "'INNODB'", "'MEMORY'", "'MRG_MYISAM'", 
		"'MYISAM'", "'NDB'", "'NDBCLUSTER'", "'PERFORMANCE_SCHEMA'", "'TOKUDB'", 
		"'REPEATABLE'", "'COMMITTED'", "'UNCOMMITTED'", "'SERIALIZABLE'", "'GEOMETRYCOLLECTION'", 
		"'GEOMCOLLECTION'", "'GEOMETRY'", "'LINESTRING'", "'MULTILINESTRING'", 
		"'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", "'POLYGON'", "'ABS'", "'ACOS'", 
		"'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'", "'AES_ENCRYPT'", "'AREA'", 
		"'ASBINARY'", "'ASIN'", "'ASTEXT'", "'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", 
		"'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", 
		"'ATAN'", "'ATAN2'", "'BENCHMARK'", "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", 
		"'BUFFER'", "'CATALOG_NAME'", "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", 
		"'CHARSET'", "'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", 
		"'CONCAT'", "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", 
		"'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'", 
		"'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", 
		"'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
		"'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", 
		"'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENGINE_ATTRIBUTE'", 
		"'ENVELOPE'", "'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", "'EXTRACTVALUE'", 
		"'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", "'FOUND_ROWS'", "'FROM_BASE64'", 
		"'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", "'GEOMCOLLFROMWKB'", 
		"'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", "'GEOMETRYFROMTEXT'", 
		"'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", "'GEOMFROMTEXT'", 
		"'GEOMFROMWKB'", "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", "'GREATEST'", 
		"'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", "'INET6_ATON'", 
		"'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", "'INTERIORRINGN'", 
		"'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", "'ISSIMPLE'", "'IS_FREE_LOCK'", 
		"'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", "'IS_IPV6'", "'IS_USED_LOCK'", 
		"'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", "'LENGTH'", "'LINEFROMTEXT'", 
		"'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", "'LINESTRINGFROMWKB'", "'LN'", 
		"'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", "'LOG2'", "'LOWER'", "'LPAD'", 
		"'LTRIM'", "'MAKEDATE'", "'MAKETIME'", "'MAKE_SET'", "'MASTER_POS_WAIT'", 
		"'MBRCONTAINS'", "'MBRDISJOINT'", "'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", 
		"'MBRTOUCHES'", "'MBRWITHIN'", "'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", 
		"'MONTHNAME'", "'MPOINTFROMTEXT'", "'MPOINTFROMWKB'", "'MPOLYFROMTEXT'", 
		"'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", "'MULTILINESTRINGFROMWKB'", 
		"'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", "'MULTIPOLYGONFROMTEXT'", 
		"'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", "'NUMGEOMETRIES'", 
		"'NUMINTERIORRINGS'", "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", "'ORD'", 
		"'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", 
		"'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'", 
		"'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", 
		"'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'", 
		"'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SECONDARY_ENGINE_ATTRIBUTE'", 
		"'SESSION_USER'", "'SHA'", "'SHA1'", "'SHA2'", "'SCHEMA_NAME'", "'SIGN'", 
		"'SIN'", "'SLEEP'", "'SOUNDEX'", "'SQL_THREAD_WAIT_AFTER_GTIDS'", "'SQRT'", 
		"'SRID'", "'STARTPOINT'", "'STRCMP'", "'STR_TO_DATE'", "'ST_AREA'", "'ST_ASBINARY'", 
		"'ST_ASTEXT'", "'ST_ASWKB'", "'ST_ASWKT'", "'ST_BUFFER'", "'ST_CENTROID'", 
		"'ST_CONTAINS'", "'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'", 
		"'ST_DISJOINT'", "'ST_DISTANCE'", "'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'", 
		"'ST_EXTERIORRING'", "'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", 
		"'ST_GEOMCOLLFROMWKB'", "'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", 
		"'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", 
		"'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", 
		"'ST_INTERSECTS'", "'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", "'ST_LINEFROMTEXT'", 
		"'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
		"'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", 
		"'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'", 
		"'ST_POINTN'", "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", 
		"'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", 
		"'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'", 
		"'SUBSTRING_INDEX'", "'SUBTIME'", "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", 
		"'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", 
		"'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", "'UCASE'", "'UNCOMPRESS'", 
		"'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", 
		"'UPPER'", "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", "'VERSION'", 
		"'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", "'WEEKDAY'", "'WEEKOFYEAR'", "'WEIGHT_STRING'", 
		"'WITHIN'", "'YEARWEEK'", "'Y'", "'X'", "'VIA'", "'LASTVAL'", "'NEXTVAL'", 
		"'SETVAL'", "'PREVIOUS'", "'PERSISTENT'", "'BINLOG_MONITOR'", "'BINLOG_REPLAY'", 
		"'FEDERATED_ADMIN'", "'READ_ONLY_ADMIN'", "'REPLICA'", "'REPLICAS'", "'REPLICATION_MASTER_ADMIN'", 
		"'MONITOR'", "'READ_ONLY'", "'REPLAY'", "':='", "'+='", "'-='", "'*='", 
		"'/='", "'%='", "'&='", "'^='", "'|='", "'*'", "'/'", "'%'", "'+'", "'-'", 
		"'DIV'", "'MOD'", "'='", "'>'", "'<'", "'!'", "'~'", "'|'", "'&'", "'^'", 
		"'.'", "'('", "')'", "','", "';'", "'@'", "'0'", "'1'", "'2'", "'''", 
		"'\"'", "'`'", "':'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", 
		"ADD", "ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", "ARRAY", "AS", "ASC", 
		"ATTRIBUTE", "BEFORE", "BETWEEN", "BODY", "BOTH", "BUCKETS", "BY", "CALL", 
		"CASCADE", "CASE", "CAST", "CHANGE", "CHARACTER", "CHECK", "COLLATE", 
		"COLUMN", "CONDITION", "CONSTRAINT", "CONTINUE", "CONVERT", "CREATE", 
		"CROSS", "CURRENT", "CURRENT_ROLE", "CURRENT_USER", "CURSOR", "DATABASE", 
		"DATABASES", "DECLARE", "DEFAULT", "DELAYED", "DELETE", "DESC", "DESCRIBE", 
		"DETERMINISTIC", "DIAGNOSTICS", "DISTINCT", "DISTINCTROW", "DROP", "EACH", 
		"ELSE", "ELSEIF", "EMPTY", "ENCLOSED", "ESCAPED", "EXCEPT", "EXISTS", 
		"EXIT", "EXPLAIN", "FALSE", "FETCH", "FOR", "FORCE", "FOREIGN", "FROM", 
		"FULLTEXT", "GENERATED", "GET", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", 
		"HISTOGRAM", "IF", "IGNORE", "IGNORED", "IN", "INDEX", "INFILE", "INNER", 
		"INOUT", "INSERT", "INTERVAL", "INTO", "IS", "ITERATE", "JOIN", "KEY", 
		"KEYS", "KILL", "LATERAL", "LEADING", "LEAVE", "LEFT", "LIKE", "LIMIT", 
		"LINEAR", "LINES", "LOAD", "LOCK", "LOCKED", "LOOP", "LOW_PRIORITY", "MASTER_BIND", 
		"MASTER_SSL_VERIFY_SERVER_CERT", "MATCH", "MAXVALUE", "MINVALUE", "MODIFIES", 
		"NATURAL", "NOT", "NO_WRITE_TO_BINLOG", "NULL_LITERAL", "NUMBER", "ON", 
		"OPTIMIZE", "OPTION", "OPTIONAL", "OPTIONALLY", "OR", "ORDER", "OUT", 
		"OUTER", "OUTFILE", "OVER", "PARTITION", "PRIMARY", "PACKAGE", "PROCEDURE", 
		"PURGE", "RANGE", "READ", "READS", "REFERENCES", "REGEXP", "RELEASE", 
		"RENAME", "REPEAT", "REPLACE", "REQUIRE", "RESIGNAL", "RESTRICT", "RETAIN", 
		"RETURN", "REVOKE", "RIGHT", "RLIKE", "SCHEMA", "SCHEMAS", "SELECT", "SET", 
		"SEPARATOR", "SHOW", "SIGNAL", "SKIP_", "SPATIAL", "SQL", "SQLEXCEPTION", 
		"SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", 
		"SSL", "STACKED", "STARTING", "STATEMENT", "STRAIGHT_JOIN", "TABLE", "TERMINATED", 
		"THEN", "TO", "TRAILING", "TRIGGER", "TRUE", "UNDO", "UNION", "UNIQUE", 
		"UNLOCK", "UNSIGNED", "UPDATE", "USAGE", "USE", "USING", "VALUES", "WHEN", 
		"WHERE", "WHILE", "WITH", "WRITE", "XOR", "ZEROFILL", "TINYINT", "SMALLINT", 
		"MEDIUMINT", "MIDDLEINT", "INT", "INT1", "INT2", "INT3", "INT4", "INT8", 
		"INTEGER", "BIGINT", "REAL", "DOUBLE", "PRECISION", "FLOAT", "FLOAT4", 
		"FLOAT8", "DECIMAL", "DEC", "NUMERIC", "DATE", "TIME", "TIMESTAMP", "DATETIME", 
		"YEAR", "CHAR", "VARCHAR", "NVARCHAR", "NATIONAL", "BINARY", "VARBINARY", 
		"TINYBLOB", "BLOB", "MEDIUMBLOB", "LONG", "LONGBLOB", "TINYTEXT", "TEXT", 
		"MEDIUMTEXT", "LONGTEXT", "ENUM", "VARYING", "SERIAL", "YEAR_MONTH", "DAY_HOUR", 
		"DAY_MINUTE", "DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND", "MINUTE_SECOND", 
		"SECOND_MICROSECOND", "MINUTE_MICROSECOND", "HOUR_MICROSECOND", "DAY_MICROSECOND", 
		"JSON_ARRAY", "JSON_ARRAYAGG", "JSON_ARRAY_APPEND", "JSON_ARRAY_INSERT", 
		"JSON_CONTAINS", "JSON_CONTAINS_PATH", "JSON_DEPTH", "JSON_EXTRACT", "JSON_INSERT", 
		"JSON_KEYS", "JSON_LENGTH", "JSON_MERGE", "JSON_MERGE_PATCH", "JSON_MERGE_PRESERVE", 
		"JSON_OBJECT", "JSON_OBJECTAGG", "JSON_OVERLAPS", "JSON_PRETTY", "JSON_QUOTE", 
		"JSON_REMOVE", "JSON_REPLACE", "JSON_SCHEMA_VALID", "JSON_SCHEMA_VALIDATION_REPORT", 
		"JSON_SEARCH", "JSON_SET", "JSON_STORAGE_FREE", "JSON_STORAGE_SIZE", "JSON_TABLE", 
		"JSON_TYPE", "JSON_UNQUOTE", "JSON_VALID", "JSON_VALUE", "NESTED", "ORDINALITY", 
		"PATH", "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", "COUNT", "CUME_DIST", "DENSE_RANK", 
		"FIRST_VALUE", "GROUP_CONCAT", "LAG", "LAST_VALUE", "LEAD", "MAX", "MIN", 
		"NTILE", "NTH_VALUE", "PERCENT_RANK", "RANK", "ROW_NUMBER", "STD", "STDDEV", 
		"STDDEV_POP", "STDDEV_SAMP", "SUM", "VAR_POP", "VAR_SAMP", "VARIANCE", 
		"CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "LOCALTIME", "CURDATE", 
		"CURTIME", "DATE_ADD", "DATE_SUB", "EXTRACT", "LOCALTIMESTAMP", "NOW", 
		"POSITION", "SUBSTR", "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", "UTC_TIME", 
		"UTC_TIMESTAMP", "ACCOUNT", "ACTION", "AFTER", "AGGREGATE", "ALGORITHM", 
		"ANY", "AT", "AUTHORS", "AUTOCOMMIT", "AUTOEXTEND_SIZE", "AUTO_INCREMENT", 
		"AVG_ROW_LENGTH", "BEGIN", "BINLOG", "BIT", "BLOCK", "BOOL", "BOOLEAN", 
		"BTREE", "CACHE", "CASCADED", "CHAIN", "CHANGED", "CHANNEL", "CHECKSUM", 
		"PAGE_CHECKSUM", "CIPHER", "CLASS_ORIGIN", "CLIENT", "CLOSE", "CLUSTERING", 
		"COALESCE", "CODE", "COLUMNS", "COLUMN_FORMAT", "COLUMN_NAME", "COMMENT", 
		"COMMIT", "COMPACT", "COMPLETION", "COMPRESSED", "COMPRESSION", "CONCURRENT", 
		"CONNECT", "CONNECTION", "CONSISTENT", "CONSTRAINT_CATALOG", "CONSTRAINT_SCHEMA", 
		"CONSTRAINT_NAME", "CONTAINS", "CONTEXT", "CONTRIBUTORS", "COPY", "CPU", 
		"CYCLE", "CURSOR_NAME", "DATA", "DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", 
		"DEFINER", "DELAY_KEY_WRITE", "DES_KEY_FILE", "DIRECTORY", "DISABLE", 
		"DISCARD", "DISK", "DO", "DUMPFILE", "DUPLICATE", "DYNAMIC", "ENABLE", 
		"ENCRYPTED", "ENCRYPTION", "ENCRYPTION_KEY_ID", "END", "ENDS", "ENGINE", 
		"ENGINES", "ERROR", "ERRORS", "ESCAPE", "EVEN", "EVENT", "EVENTS", "EVERY", 
		"EXCHANGE", "EXCLUSIVE", "EXPIRE", "EXPORT", "EXTENDED", "EXTENT_SIZE", 
		"FAILED_LOGIN_ATTEMPTS", "FAST", "FAULTS", "FIELDS", "FILE_BLOCK_SIZE", 
		"FILTER", "FIRST", "FIXED", "FLUSH", "FOLLOWING", "FOLLOWS", "FOUND", 
		"FULL", "FUNCTION", "GENERAL", "GLOBAL", "GRANTS", "GROUP_REPLICATION", 
		"HANDLER", "HASH", "HELP", "HISTORY", "HOST", "HOSTS", "IDENTIFIED", "IGNORE_SERVER_IDS", 
		"IMPORT", "INCREMENT", "INDEXES", "INITIAL_SIZE", "INPLACE", "INSERT_METHOD", 
		"INSTALL", "INSTANCE", "INSTANT", "INVISIBLE", "INVOKER", "IO", "IO_THREAD", 
		"IPC", "ISOLATION", "ISSUER", "JSON", "KEY_BLOCK_SIZE", "LANGUAGE", "LAST", 
		"LEAVES", "LESS", "LEVEL", "LIST", "LOCAL", "LOCALES", "LOGFILE", "LOGS", 
		"MASTER", "MASTER_AUTO_POSITION", "MASTER_CONNECT_RETRY", "MASTER_DELAY", 
		"MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", "MASTER_LOG_FILE", "MASTER_LOG_POS", 
		"MASTER_PASSWORD", "MASTER_PORT", "MASTER_RETRY_COUNT", "MASTER_SSL", 
		"MASTER_SSL_CA", "MASTER_SSL_CAPATH", "MASTER_SSL_CERT", "MASTER_SSL_CIPHER", 
		"MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", "MASTER_SSL_KEY", "MASTER_TLS_VERSION", 
		"MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS", 
		"MAX_SIZE", "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS", "MEDIUM", 
		"MEMBER", "MERGE", "MESSAGE_TEXT", "MID", "MIGRATE", "MIN_ROWS", "MODE", 
		"MODIFY", "MUTEX", "MYSQL", "MYSQL_ERRNO", "NAME", "NAMES", "NCHAR", "NEVER", 
		"NEXT", "NO", "NOCACHE", "NOCOPY", "NOCYCLE", "NOMAXVALUE", "NOMINVALUE", 
		"NOWAIT", "NODEGROUP", "NONE", "ODBC", "OFFLINE", "OFFSET", "OF", "OJ", 
		"OLD_PASSWORD", "ONE", "ONLINE", "ONLY", "OPEN", "OPTIMIZER_COSTS", "OPTIONS", 
		"OWNER", "PACK_KEYS", "PAGE", "PAGE_COMPRESSED", "PAGE_COMPRESSION_LEVEL", 
		"PARSER", "PARTIAL", "PARTITIONING", "PARTITIONS", "PASSWORD", "PASSWORD_LOCK_TIME", 
		"PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", "PORT", "PRECEDES", "PRECEDING", 
		"PREPARE", "PRESERVE", "PREV", "PROCESSLIST", "PROFILE", "PROFILES", "PROXY", 
		"QUERY", "QUERY_RESPONSE_TIME", "QUICK", "REBUILD", "RECOVER", "RECURSIVE", 
		"REDO_BUFFER_SIZE", "REDUNDANT", "RELAY", "RELAY_LOG_FILE", "RELAY_LOG_POS", 
		"RELAYLOG", "REMOVE", "REORGANIZE", "REPAIR", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", 
		"REPLICATE_IGNORE_DB", "REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", 
		"REPLICATE_WILD_DO_TABLE", "REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", 
		"RESET", "RESTART", "RESUME", "RETURNED_SQLSTATE", "RETURNING", "RETURNS", 
		"REUSE", "ROLE", "ROLLBACK", "ROLLUP", "ROTATE", "ROW", "ROWS", "ROW_FORMAT", 
		"RTREE", "SAVEPOINT", "SCHEDULE", "SECURITY", "SEQUENCE", "SERVER", "SESSION", 
		"SHARE", "SHARED", "SIGNED", "SIMPLE", "SLAVE", "SLAVES", "SLOW", "SNAPSHOT", 
		"SOCKET", "SOME", "SONAME", "SOUNDS", "SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", 
		"SQL_BEFORE_GTIDS", "SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", 
		"SQL_THREAD", "START", "STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", 
		"STATS_SAMPLE_PAGES", "STATUS", "STOP", "STORAGE", "STORED", "STRING", 
		"SUBCLASS_ORIGIN", "SUBJECT", "SUBPARTITION", "SUBPARTITIONS", "SUSPEND", 
		"SWAPS", "SWITCHES", "TABLE_NAME", "TABLESPACE", "TABLE_TYPE", "TEMPORARY", 
		"TEMPTABLE", "THAN", "TRADITIONAL", "TRANSACTION", "TRANSACTIONAL", "TRIGGERS", 
		"TRUNCATE", "TYPES", "UNBOUNDED", "UNDEFINED", "UNDOFILE", "UNDO_BUFFER_SIZE", 
		"UNINSTALL", "UNKNOWN", "UNTIL", "UPGRADE", "USER", "USE_FRM", "USER_RESOURCES", 
		"VALIDATION", "VALUE", "VARIABLES", "VIEW", "VIRTUAL", "VISIBLE", "WAIT", 
		"WARNINGS", "WINDOW", "WITHOUT", "WORK", "WRAPPER", "WSREP_MEMBERSHIP", 
		"WSREP_STATUS", "X509", "XA", "XML", "YES", "EUR", "USA", "JIS", "ISO", 
		"INTERNAL", "QUARTER", "MONTH", "DAY", "HOUR", "MINUTE", "WEEK", "SECOND", 
		"MICROSECOND", "USER_STATISTICS", "CLIENT_STATISTICS", "INDEX_STATISTICS", 
		"TABLE_STATISTICS", "ADMIN", "APPLICATION_PASSWORD_ADMIN", "AUDIT_ADMIN", 
		"BACKUP_ADMIN", "BINLOG_ADMIN", "BINLOG_ENCRYPTION_ADMIN", "CLONE_ADMIN", 
		"CONNECTION_ADMIN", "ENCRYPTION_KEY_ADMIN", "EXECUTE", "FILE", "FIREWALL_ADMIN", 
		"FIREWALL_USER", "FLUSH_OPTIMIZER_COSTS", "FLUSH_STATUS", "FLUSH_TABLES", 
		"FLUSH_USER_RESOURCES", "GROUP_REPLICATION_ADMIN", "INNODB_REDO_LOG_ARCHIVE", 
		"INNODB_REDO_LOG_ENABLE", "INVOKE", "LAMBDA", "NDB_STORED_USER", "PASSWORDLESS_USER_ADMIN", 
		"PERSIST_RO_VARIABLES_ADMIN", "PRIVILEGES", "PROCESS", "RELOAD", "REPLICATION_APPLIER", 
		"REPLICATION_SLAVE_ADMIN", "RESOURCE_GROUP_ADMIN", "RESOURCE_GROUP_USER", 
		"ROLE_ADMIN", "ROUTINE", "S3", "SERVICE_CONNECTION_ADMIN", "SESSION_VARIABLES_ADMIN", 
		"SET_USER_ID", "SHOW_ROUTINE", "SHUTDOWN", "SUPER", "SYSTEM_VARIABLES_ADMIN", 
		"TABLES", "TABLE_ENCRYPTION_ADMIN", "VERSION_TOKEN_ADMIN", "XA_RECOVER_ADMIN", 
		"ARMSCII8", "ASCII", "BIG5", "CP1250", "CP1251", "CP1256", "CP1257", "CP850", 
		"CP852", "CP866", "CP932", "DEC8", "EUCJPMS", "EUCKR", "GB18030", "GB2312", 
		"GBK", "GEOSTD8", "GREEK", "HEBREW", "HP8", "KEYBCS2", "KOI8R", "KOI8U", 
		"LATIN1", "LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN", "SJIS", "SWE7", 
		"TIS620", "UCS2", "UJIS", "UTF16", "UTF16LE", "UTF32", "UTF8", "UTF8MB3", 
		"UTF8MB4", "ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED", "INNODB", "MEMORY", 
		"MRG_MYISAM", "MYISAM", "NDB", "NDBCLUSTER", "PERFORMANCE_SCHEMA", "TOKUDB", 
		"REPEATABLE", "COMMITTED", "UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", 
		"GEOMCOLLECTION", "GEOMETRY", "LINESTRING", "MULTILINESTRING", "MULTIPOINT", 
		"MULTIPOLYGON", "POINT", "POLYGON", "ABS", "ACOS", "ADDDATE", "ADDTIME", 
		"AES_DECRYPT", "AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", "ASWKB", 
		"ASWKT", "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", 
		"ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", "ATAN", "ATAN2", "BENCHMARK", 
		"BIN", "BIT_COUNT", "BIT_LENGTH", "BUFFER", "CATALOG_NAME", "CEIL", "CEILING", 
		"CENTROID", "CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", "COERCIBILITY", 
		"COLLATION", "COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", "CONV", 
		"CONVERT_TZ", "COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY", 
		"CREATE_DH_PARAMETERS", "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
		"DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES", 
		"DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", "DISJOINT", "ELT", "ENCODE", 
		"ENCRYPT", "ENDPOINT", "ENGINE_ATTRIBUTE", "ENVELOPE", "EQUALS", "EXP", 
		"EXPORT_SET", "EXTERIORRING", "EXTRACTVALUE", "FIELD", "FIND_IN_SET", 
		"FLOOR", "FORMAT", "FOUND_ROWS", "FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", 
		"GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", "GEOMETRYCOLLECTIONFROMTEXT", "GEOMETRYCOLLECTIONFROMWKB", 
		"GEOMETRYFROMTEXT", "GEOMETRYFROMWKB", "GEOMETRYN", "GEOMETRYTYPE", "GEOMFROMTEXT", 
		"GEOMFROMWKB", "GET_FORMAT", "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", 
		"GTID_SUBTRACT", "HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", "INET_ATON", 
		"INET_NTOA", "INSTR", "INTERIORRINGN", "INTERSECTS", "ISCLOSED", "ISEMPTY", 
		"ISNULL", "ISSIMPLE", "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", 
		"IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", 
		"LINEFROMTEXT", "LINEFROMWKB", "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", 
		"LN", "LOAD_FILE", "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", 
		"LTRIM", "MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", 
		"MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", 
		"MBRWITHIN", "MD5", "MLINEFROMTEXT", "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", 
		"MPOINTFROMWKB", "MPOLYFROMTEXT", "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", 
		"MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", "MULTIPOLYGONFROMTEXT", 
		"MULTIPOLYGONFROMWKB", "NAME_CONST", "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS", 
		"NUMPOINTS", "OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF", 
		"PI", "POINTFROMTEXT", "POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB", 
		"POLYGONFROMTEXT", "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", 
		"RAND", "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT", 
		"RPAD", "RTRIM", "SEC_TO_TIME", "SECONDARY_ENGINE_ATTRIBUTE", "SESSION_USER", 
		"SHA", "SHA1", "SHA2", "SCHEMA_NAME", "SIGN", "SIN", "SLEEP", "SOUNDEX", 
		"SQL_THREAD_WAIT_AFTER_GTIDS", "SQRT", "SRID", "STARTPOINT", "STRCMP", 
		"STR_TO_DATE", "ST_AREA", "ST_ASBINARY", "ST_ASTEXT", "ST_ASWKB", "ST_ASWKT", 
		"ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", "ST_CROSSES", "ST_DIFFERENCE", 
		"ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", "ST_ENDPOINT", "ST_ENVELOPE", 
		"ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", "ST_GEOMCOLLFROMTXT", 
		"ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", "ST_GEOMETRYCOLLECTIONFROMWKB", 
		"ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", "ST_GEOMETRYN", "ST_GEOMETRYTYPE", 
		"ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", "ST_INTERIORRINGN", "ST_INTERSECTION", 
		"ST_INTERSECTS", "ST_ISCLOSED", "ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", 
		"ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", "ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", 
		"ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", "ST_NUMPOINTS", "ST_OVERLAPS", 
		"ST_POINTFROMTEXT", "ST_POINTFROMWKB", "ST_POINTN", "ST_POLYFROMTEXT", 
		"ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", "ST_POLYGONFROMWKB", "ST_SRID", 
		"ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", "ST_UNION", "ST_WITHIN", 
		"ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", "SUBTIME", "SYSTEM_USER", 
		"TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", "TIME_FORMAT", "TIME_TO_SEC", 
		"TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", "UCASE", "UNCOMPRESS", 
		"UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", "UPDATEXML", "UPPER", 
		"UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", "VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", 
		"WEEKDAY", "WEEKOFYEAR", "WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", 
		"X_FUNCTION", "VIA", "LASTVAL", "NEXTVAL", "SETVAL", "PREVIOUS", "PERSISTENT", 
		"BINLOG_MONITOR", "BINLOG_REPLAY", "FEDERATED_ADMIN", "READ_ONLY_ADMIN", 
		"REPLICA", "REPLICAS", "REPLICATION_MASTER_ADMIN", "MONITOR", "READ_ONLY", 
		"REPLAY", "VAR_ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", 
		"DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "STAR", 
		"DIVIDE", "MODULE", "PLUS", "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", "GREATER_SYMBOL", 
		"LESS_SYMBOL", "EXCLAMATION_SYMBOL", "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", 
		"BIT_XOR_OP", "DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "AT_SIGN", 
		"ZERO_DECIMAL", "ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", 
		"REVERSE_QUOTE_SYMB", "COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", 
		"START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", "DECIMAL_LITERAL", 
		"HEXADECIMAL_LITERAL", "REAL_LITERAL", "NULL_SPEC_LITERAL", "BIT_STRING", 
		"STRING_CHARSET_NAME", "DOT_ID", "ID", "REVERSE_QUOTE_ID", "STRING_USER_NAME", 
		"IP_ADDRESS", "STRING_USER_NAME_MARIADB", "LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION", 
		"LR_BRACKETRR_BRACKET",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(MariaDBParser._LITERAL_NAMES, MariaDBParser._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return MariaDBParser.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace

	// @Override
	public get grammarFileName(): string { return "MariaDBParser.g4"; }

	// @Override
	public get ruleNames(): string[] { return MariaDBParser.ruleNames; }

	// @Override
	public get serializedATN(): string { return MariaDBParser._serializedATN; }

	protected createFailedPredicateException(predicate?: string, message?: string): FailedPredicateException {
		return new FailedPredicateException(this, predicate, message);
	}

	constructor(input: TokenStream) {
		super(input);
		this._interp = new ParserATNSimulator(MariaDBParser._ATN, this);
	}
	// @RuleVersion(0)
	public root(): RootContext {
		let _localctx: RootContext = new RootContext(this._ctx, this.state);
		this.enterRule(_localctx, 0, MariaDBParser.RULE_root);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 725;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MariaDBParser.ALTER) | (1 << MariaDBParser.ANALYZE) | (1 << MariaDBParser.CALL) | (1 << MariaDBParser.CHANGE) | (1 << MariaDBParser.CHECK))) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & ((1 << (MariaDBParser.CREATE - 34)) | (1 << (MariaDBParser.DELETE - 34)) | (1 << (MariaDBParser.DESC - 34)) | (1 << (MariaDBParser.DESCRIBE - 34)) | (1 << (MariaDBParser.DROP - 34)) | (1 << (MariaDBParser.EXPLAIN - 34)))) !== 0) || ((((_la - 71)) & ~0x1F) === 0 && ((1 << (_la - 71)) & ((1 << (MariaDBParser.GET - 71)) | (1 << (MariaDBParser.GRANT - 71)) | (1 << (MariaDBParser.INSERT - 71)) | (1 << (MariaDBParser.KILL - 71)) | (1 << (MariaDBParser.LOAD - 71)))) !== 0) || ((((_la - 103)) & ~0x1F) === 0 && ((1 << (_la - 103)) & ((1 << (MariaDBParser.LOCK - 103)) | (1 << (MariaDBParser.OPTIMIZE - 103)) | (1 << (MariaDBParser.PURGE - 103)))) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & ((1 << (MariaDBParser.RELEASE - 139)) | (1 << (MariaDBParser.RENAME - 139)) | (1 << (MariaDBParser.REPLACE - 139)) | (1 << (MariaDBParser.RESIGNAL - 139)) | (1 << (MariaDBParser.REVOKE - 139)) | (1 << (MariaDBParser.SELECT - 139)) | (1 << (MariaDBParser.SET - 139)) | (1 << (MariaDBParser.SHOW - 139)) | (1 << (MariaDBParser.SIGNAL - 139)))) !== 0) || ((((_la - 182)) & ~0x1F) === 0 && ((1 << (_la - 182)) & ((1 << (MariaDBParser.UNLOCK - 182)) | (1 << (MariaDBParser.UPDATE - 182)) | (1 << (MariaDBParser.USE - 182)) | (1 << (MariaDBParser.VALUES - 182)))) !== 0) || ((((_la - 344)) & ~0x1F) === 0 && ((1 << (_la - 344)) & ((1 << (MariaDBParser.BEGIN - 344)) | (1 << (MariaDBParser.BINLOG - 344)) | (1 << (MariaDBParser.CACHE - 344)) | (1 << (MariaDBParser.CHECKSUM - 344)) | (1 << (MariaDBParser.COMMIT - 344)))) !== 0) || _la === MariaDBParser.DEALLOCATE || _la === MariaDBParser.DO || ((((_la - 432)) & ~0x1F) === 0 && ((1 << (_la - 432)) & ((1 << (MariaDBParser.FLUSH - 432)) | (1 << (MariaDBParser.HANDLER - 432)) | (1 << (MariaDBParser.HELP - 432)) | (1 << (MariaDBParser.INSTALL - 432)))) !== 0) || ((((_la - 561)) & ~0x1F) === 0 && ((1 << (_la - 561)) & ((1 << (MariaDBParser.PREPARE - 561)) | (1 << (MariaDBParser.REPAIR - 561)) | (1 << (MariaDBParser.RESET - 561)))) !== 0) || _la === MariaDBParser.ROLLBACK || _la === MariaDBParser.SAVEPOINT || ((((_la - 632)) & ~0x1F) === 0 && ((1 << (_la - 632)) & ((1 << (MariaDBParser.START - 632)) | (1 << (MariaDBParser.STOP - 632)) | (1 << (MariaDBParser.TRUNCATE - 632)))) !== 0) || _la === MariaDBParser.UNINSTALL || _la === MariaDBParser.XA || _la === MariaDBParser.EXECUTE || _la === MariaDBParser.SHUTDOWN || _la === MariaDBParser.LR_BRACKET || _la === MariaDBParser.SEMI) {
				{
				this.state = 724;
				this.sqlStatements();
				}
			}

			this.state = 729;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.MINUS) {
				{
				this.state = 727;
				this.match(MariaDBParser.MINUS);
				this.state = 728;
				this.match(MariaDBParser.MINUS);
				}
			}

			this.state = 731;
			this.match(MariaDBParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sqlStatements(): SqlStatementsContext {
		let _localctx: SqlStatementsContext = new SqlStatementsContext(this._ctx, this.state);
		this.enterRule(_localctx, 2, MariaDBParser.RULE_sqlStatements);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 744;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 5, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					this.state = 742;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case MariaDBParser.ALTER:
					case MariaDBParser.ANALYZE:
					case MariaDBParser.CALL:
					case MariaDBParser.CHANGE:
					case MariaDBParser.CHECK:
					case MariaDBParser.CREATE:
					case MariaDBParser.DELETE:
					case MariaDBParser.DESC:
					case MariaDBParser.DESCRIBE:
					case MariaDBParser.DROP:
					case MariaDBParser.EXPLAIN:
					case MariaDBParser.GET:
					case MariaDBParser.GRANT:
					case MariaDBParser.INSERT:
					case MariaDBParser.KILL:
					case MariaDBParser.LOAD:
					case MariaDBParser.LOCK:
					case MariaDBParser.OPTIMIZE:
					case MariaDBParser.PURGE:
					case MariaDBParser.RELEASE:
					case MariaDBParser.RENAME:
					case MariaDBParser.REPLACE:
					case MariaDBParser.RESIGNAL:
					case MariaDBParser.REVOKE:
					case MariaDBParser.SELECT:
					case MariaDBParser.SET:
					case MariaDBParser.SHOW:
					case MariaDBParser.SIGNAL:
					case MariaDBParser.UNLOCK:
					case MariaDBParser.UPDATE:
					case MariaDBParser.USE:
					case MariaDBParser.VALUES:
					case MariaDBParser.BEGIN:
					case MariaDBParser.BINLOG:
					case MariaDBParser.CACHE:
					case MariaDBParser.CHECKSUM:
					case MariaDBParser.COMMIT:
					case MariaDBParser.DEALLOCATE:
					case MariaDBParser.DO:
					case MariaDBParser.FLUSH:
					case MariaDBParser.HANDLER:
					case MariaDBParser.HELP:
					case MariaDBParser.INSTALL:
					case MariaDBParser.PREPARE:
					case MariaDBParser.REPAIR:
					case MariaDBParser.RESET:
					case MariaDBParser.ROLLBACK:
					case MariaDBParser.SAVEPOINT:
					case MariaDBParser.START:
					case MariaDBParser.STOP:
					case MariaDBParser.TRUNCATE:
					case MariaDBParser.UNINSTALL:
					case MariaDBParser.XA:
					case MariaDBParser.EXECUTE:
					case MariaDBParser.SHUTDOWN:
					case MariaDBParser.LR_BRACKET:
						{
						this.state = 733;
						this.sqlStatement();
						this.state = 736;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === MariaDBParser.MINUS) {
							{
							this.state = 734;
							this.match(MariaDBParser.MINUS);
							this.state = 735;
							this.match(MariaDBParser.MINUS);
							}
						}

						this.state = 739;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 3, this._ctx) ) {
						case 1:
							{
							this.state = 738;
							this.match(MariaDBParser.SEMI);
							}
							break;
						}
						}
						break;
					case MariaDBParser.SEMI:
						{
						this.state = 741;
						this.emptyStatement_();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}
				this.state = 746;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 5, this._ctx);
			}
			this.state = 756;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.ALTER:
			case MariaDBParser.ANALYZE:
			case MariaDBParser.CALL:
			case MariaDBParser.CHANGE:
			case MariaDBParser.CHECK:
			case MariaDBParser.CREATE:
			case MariaDBParser.DELETE:
			case MariaDBParser.DESC:
			case MariaDBParser.DESCRIBE:
			case MariaDBParser.DROP:
			case MariaDBParser.EXPLAIN:
			case MariaDBParser.GET:
			case MariaDBParser.GRANT:
			case MariaDBParser.INSERT:
			case MariaDBParser.KILL:
			case MariaDBParser.LOAD:
			case MariaDBParser.LOCK:
			case MariaDBParser.OPTIMIZE:
			case MariaDBParser.PURGE:
			case MariaDBParser.RELEASE:
			case MariaDBParser.RENAME:
			case MariaDBParser.REPLACE:
			case MariaDBParser.RESIGNAL:
			case MariaDBParser.REVOKE:
			case MariaDBParser.SELECT:
			case MariaDBParser.SET:
			case MariaDBParser.SHOW:
			case MariaDBParser.SIGNAL:
			case MariaDBParser.UNLOCK:
			case MariaDBParser.UPDATE:
			case MariaDBParser.USE:
			case MariaDBParser.VALUES:
			case MariaDBParser.BEGIN:
			case MariaDBParser.BINLOG:
			case MariaDBParser.CACHE:
			case MariaDBParser.CHECKSUM:
			case MariaDBParser.COMMIT:
			case MariaDBParser.DEALLOCATE:
			case MariaDBParser.DO:
			case MariaDBParser.FLUSH:
			case MariaDBParser.HANDLER:
			case MariaDBParser.HELP:
			case MariaDBParser.INSTALL:
			case MariaDBParser.PREPARE:
			case MariaDBParser.REPAIR:
			case MariaDBParser.RESET:
			case MariaDBParser.ROLLBACK:
			case MariaDBParser.SAVEPOINT:
			case MariaDBParser.START:
			case MariaDBParser.STOP:
			case MariaDBParser.TRUNCATE:
			case MariaDBParser.UNINSTALL:
			case MariaDBParser.XA:
			case MariaDBParser.EXECUTE:
			case MariaDBParser.SHUTDOWN:
			case MariaDBParser.LR_BRACKET:
				{
				this.state = 747;
				this.sqlStatement();
				this.state = 753;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 7, this._ctx) ) {
				case 1:
					{
					this.state = 750;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MariaDBParser.MINUS) {
						{
						this.state = 748;
						this.match(MariaDBParser.MINUS);
						this.state = 749;
						this.match(MariaDBParser.MINUS);
						}
					}

					this.state = 752;
					this.match(MariaDBParser.SEMI);
					}
					break;
				}
				}
				break;
			case MariaDBParser.SEMI:
				{
				this.state = 755;
				this.emptyStatement_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sqlStatement(): SqlStatementContext {
		let _localctx: SqlStatementContext = new SqlStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 4, MariaDBParser.RULE_sqlStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 759;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 9, this._ctx) ) {
			case 1:
				{
				this.state = 758;
				this.setStatementFor();
				}
				break;
			}
			this.state = 768;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 10, this._ctx) ) {
			case 1:
				{
				this.state = 761;
				this.ddlStatement();
				}
				break;

			case 2:
				{
				this.state = 762;
				this.dmlStatement();
				}
				break;

			case 3:
				{
				this.state = 763;
				this.transactionStatement();
				}
				break;

			case 4:
				{
				this.state = 764;
				this.replicationStatement();
				}
				break;

			case 5:
				{
				this.state = 765;
				this.preparedStatement();
				}
				break;

			case 6:
				{
				this.state = 766;
				this.administrationStatement();
				}
				break;

			case 7:
				{
				this.state = 767;
				this.utilityStatement();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setStatementFor(): SetStatementForContext {
		let _localctx: SetStatementForContext = new SetStatementForContext(this._ctx, this.state);
		this.enterRule(_localctx, 6, MariaDBParser.RULE_setStatementFor);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 770;
			this.match(MariaDBParser.SET);
			this.state = 771;
			this.match(MariaDBParser.STATEMENT);
			this.state = 772;
			this.match(MariaDBParser.ID);
			this.state = 773;
			this.match(MariaDBParser.EQUAL_SYMBOL);
			this.state = 774;
			this.constant();
			this.state = 781;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.COMMA) {
				{
				{
				this.state = 775;
				this.match(MariaDBParser.COMMA);
				this.state = 776;
				this.match(MariaDBParser.ID);
				this.state = 777;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				this.state = 778;
				this.constant();
				}
				}
				this.state = 783;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 784;
			this.match(MariaDBParser.FOR);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public emptyStatement_(): EmptyStatement_Context {
		let _localctx: EmptyStatement_Context = new EmptyStatement_Context(this._ctx, this.state);
		this.enterRule(_localctx, 8, MariaDBParser.RULE_emptyStatement_);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 786;
			this.match(MariaDBParser.SEMI);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ddlStatement(): DdlStatementContext {
		let _localctx: DdlStatementContext = new DdlStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 10, MariaDBParser.RULE_ddlStatement);
		try {
			this.state = 829;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 12, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 788;
				this.createDatabase();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 789;
				this.createEvent();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 790;
				this.createIndex();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 791;
				this.createLogfileGroup();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 792;
				this.createProcedure();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 793;
				this.createFunction();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 794;
				this.createServer();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 795;
				this.createTable();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 796;
				this.createTablespaceInnodb();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 797;
				this.createTablespaceNdb();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 798;
				this.createTrigger();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 799;
				this.createView();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 800;
				this.createRole();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 801;
				this.createSequence();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 802;
				this.alterDatabase();
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 803;
				this.alterEvent();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 804;
				this.alterFunction();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 805;
				this.alterInstance();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 806;
				this.alterLogfileGroup();
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 807;
				this.alterProcedure();
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 808;
				this.alterServer();
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 809;
				this.alterTable();
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 810;
				this.alterTablespace();
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 811;
				this.alterView();
				}
				break;

			case 25:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 812;
				this.alterSequence();
				}
				break;

			case 26:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 813;
				this.dropDatabase();
				}
				break;

			case 27:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 814;
				this.dropEvent();
				}
				break;

			case 28:
				this.enterOuterAlt(_localctx, 28);
				{
				this.state = 815;
				this.dropIndex();
				}
				break;

			case 29:
				this.enterOuterAlt(_localctx, 29);
				{
				this.state = 816;
				this.dropLogfileGroup();
				}
				break;

			case 30:
				this.enterOuterAlt(_localctx, 30);
				{
				this.state = 817;
				this.dropProcedure();
				}
				break;

			case 31:
				this.enterOuterAlt(_localctx, 31);
				{
				this.state = 818;
				this.dropFunction();
				}
				break;

			case 32:
				this.enterOuterAlt(_localctx, 32);
				{
				this.state = 819;
				this.dropServer();
				}
				break;

			case 33:
				this.enterOuterAlt(_localctx, 33);
				{
				this.state = 820;
				this.dropTable();
				}
				break;

			case 34:
				this.enterOuterAlt(_localctx, 34);
				{
				this.state = 821;
				this.dropTablespace();
				}
				break;

			case 35:
				this.enterOuterAlt(_localctx, 35);
				{
				this.state = 822;
				this.dropTrigger();
				}
				break;

			case 36:
				this.enterOuterAlt(_localctx, 36);
				{
				this.state = 823;
				this.dropView();
				}
				break;

			case 37:
				this.enterOuterAlt(_localctx, 37);
				{
				this.state = 824;
				this.dropRole();
				}
				break;

			case 38:
				this.enterOuterAlt(_localctx, 38);
				{
				this.state = 825;
				this.dropSequence();
				}
				break;

			case 39:
				this.enterOuterAlt(_localctx, 39);
				{
				this.state = 826;
				this.setRole();
				}
				break;

			case 40:
				this.enterOuterAlt(_localctx, 40);
				{
				this.state = 827;
				this.renameTable();
				}
				break;

			case 41:
				this.enterOuterAlt(_localctx, 41);
				{
				this.state = 828;
				this.truncateTable();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dmlStatement(): DmlStatementContext {
		let _localctx: DmlStatementContext = new DmlStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 12, MariaDBParser.RULE_dmlStatement);
		try {
			this.state = 842;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 13, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 831;
				this.selectStatement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 832;
				this.insertStatement();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 833;
				this.updateStatement();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 834;
				this.deleteStatement();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 835;
				this.replaceStatement();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 836;
				this.callStatement();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 837;
				this.loadDataStatement();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 838;
				this.loadXmlStatement();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 839;
				this.doStatement();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 840;
				this.handlerStatement();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 841;
				this.valuesStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transactionStatement(): TransactionStatementContext {
		let _localctx: TransactionStatementContext = new TransactionStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 14, MariaDBParser.RULE_transactionStatement);
		try {
			this.state = 853;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 14, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 844;
				this.startTransaction();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 845;
				this.beginWork();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 846;
				this.commitWork();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 847;
				this.rollbackWork();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 848;
				this.savepointStatement();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 849;
				this.rollbackStatement();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 850;
				this.releaseStatement();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 851;
				this.lockTables();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 852;
				this.unlockTables();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public replicationStatement(): ReplicationStatementContext {
		let _localctx: ReplicationStatementContext = new ReplicationStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 16, MariaDBParser.RULE_replicationStatement);
		try {
			this.state = 870;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 15, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 855;
				this.changeMaster();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 856;
				this.changeReplicationFilter();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 857;
				this.purgeBinaryLogs();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 858;
				this.resetMaster();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 859;
				this.resetSlave();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 860;
				this.startSlave();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 861;
				this.stopSlave();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 862;
				this.startGroupReplication();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 863;
				this.stopGroupReplication();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 864;
				this.xaStartTransaction();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 865;
				this.xaEndTransaction();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 866;
				this.xaPrepareStatement();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 867;
				this.xaCommitWork();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 868;
				this.xaRollbackWork();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 869;
				this.xaRecoverWork();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public preparedStatement(): PreparedStatementContext {
		let _localctx: PreparedStatementContext = new PreparedStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 18, MariaDBParser.RULE_preparedStatement);
		try {
			this.state = 875;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.PREPARE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 872;
				this.prepareStatement();
				}
				break;
			case MariaDBParser.EXECUTE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 873;
				this.executeStatement();
				}
				break;
			case MariaDBParser.DROP:
			case MariaDBParser.DEALLOCATE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 874;
				this.deallocatePrepare();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public compoundStatement(): CompoundStatementContext {
		let _localctx: CompoundStatementContext = new CompoundStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 20, MariaDBParser.RULE_compoundStatement);
		try {
			this.state = 887;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 17, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 877;
				this.blockStatement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 878;
				this.caseStatement();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 879;
				this.ifStatement();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 880;
				this.leaveStatement();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 881;
				this.loopStatement();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 882;
				this.repeatStatement();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 883;
				this.whileStatement();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 884;
				this.iterateStatement();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 885;
				this.returnStatement();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 886;
				this.cursorStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public administrationStatement(): AdministrationStatementContext {
		let _localctx: AdministrationStatementContext = new AdministrationStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 22, MariaDBParser.RULE_administrationStatement);
		try {
			this.state = 915;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 18, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 889;
				this.alterUser();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 890;
				this.createUser();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 891;
				this.dropUser();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 892;
				this.grantStatement();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 893;
				this.grantProxy();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 894;
				this.renameUser();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 895;
				this.revokeStatement();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 896;
				this.revokeProxy();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 897;
				this.analyzeTable();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 898;
				this.checkTable();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 899;
				this.checksumTable();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 900;
				this.optimizeTable();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 901;
				this.repairTable();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 902;
				this.createUdfunction();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 903;
				this.installPlugin();
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 904;
				this.uninstallPlugin();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 905;
				this.setStatement();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 906;
				this.showStatement();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 907;
				this.binlogStatement();
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 908;
				this.cacheIndexStatement();
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 909;
				this.flushStatement();
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 910;
				this.killStatement();
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 911;
				this.loadIndexIntoCache();
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 912;
				this.resetStatement();
				}
				break;

			case 25:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 913;
				this.shutdownStatement();
				}
				break;

			case 26:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 914;
				this.explainStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public utilityStatement(): UtilityStatementContext {
		let _localctx: UtilityStatementContext = new UtilityStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 24, MariaDBParser.RULE_utilityStatement);
		try {
			this.state = 924;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 19, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 917;
				this.simpleDescribeStatement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 918;
				this.fullDescribeStatement();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 919;
				this.helpStatement();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 920;
				this.useStatement();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 921;
				this.signalStatement();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 922;
				this.resignalStatement();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 923;
				this.diagnosticsStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createDatabase(): CreateDatabaseContext {
		let _localctx: CreateDatabaseContext = new CreateDatabaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 26, MariaDBParser.RULE_createDatabase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 926;
			this.match(MariaDBParser.CREATE);
			this.state = 927;
			_localctx._dbFormat = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MariaDBParser.DATABASE || _la === MariaDBParser.SCHEMA)) {
				_localctx._dbFormat = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 929;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 20, this._ctx) ) {
			case 1:
				{
				this.state = 928;
				this.ifNotExists();
				}
				break;
			}
			this.state = 931;
			this.uid();
			this.state = 935;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 26)) & ~0x1F) === 0 && ((1 << (_la - 26)) & ((1 << (MariaDBParser.CHARACTER - 26)) | (1 << (MariaDBParser.COLLATE - 26)) | (1 << (MariaDBParser.DEFAULT - 26)))) !== 0) || _la === MariaDBParser.READ || _la === MariaDBParser.CHAR || _la === MariaDBParser.ENCRYPTION || _la === MariaDBParser.CHARSET) {
				{
				{
				this.state = 932;
				this.createDatabaseOption();
				}
				}
				this.state = 937;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createEvent(): CreateEventContext {
		let _localctx: CreateEventContext = new CreateEventContext(this._ctx, this.state);
		this.enterRule(_localctx, 28, MariaDBParser.RULE_createEvent);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 938;
			this.match(MariaDBParser.CREATE);
			this.state = 940;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.DEFINER) {
				{
				this.state = 939;
				this.ownerStatement();
				}
			}

			this.state = 942;
			this.match(MariaDBParser.EVENT);
			this.state = 944;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 23, this._ctx) ) {
			case 1:
				{
				this.state = 943;
				this.ifNotExists();
				}
				break;
			}
			this.state = 946;
			this.fullId();
			this.state = 947;
			this.match(MariaDBParser.ON);
			this.state = 948;
			this.match(MariaDBParser.SCHEDULE);
			this.state = 949;
			this.scheduleExpression();
			this.state = 956;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.ON) {
				{
				this.state = 950;
				this.match(MariaDBParser.ON);
				this.state = 951;
				this.match(MariaDBParser.COMPLETION);
				this.state = 953;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.NOT) {
					{
					this.state = 952;
					this.match(MariaDBParser.NOT);
					}
				}

				this.state = 955;
				this.match(MariaDBParser.PRESERVE);
				}
			}

			this.state = 959;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.DISABLE || _la === MariaDBParser.ENABLE) {
				{
				this.state = 958;
				this.enableType();
				}
			}

			this.state = 963;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.COMMENT) {
				{
				this.state = 961;
				this.match(MariaDBParser.COMMENT);
				this.state = 962;
				this.match(MariaDBParser.STRING_LITERAL);
				}
			}

			this.state = 965;
			this.match(MariaDBParser.DO);
			this.state = 966;
			this.routineBody();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createIndex(): CreateIndexContext {
		let _localctx: CreateIndexContext = new CreateIndexContext(this._ctx, this.state);
		this.enterRule(_localctx, 30, MariaDBParser.RULE_createIndex);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 968;
			this.match(MariaDBParser.CREATE);
			this.state = 970;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.OR) {
				{
				this.state = 969;
				this.orReplace();
				}
			}

			this.state = 973;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.OFFLINE || _la === MariaDBParser.ONLINE) {
				{
				this.state = 972;
				_localctx._intimeAction = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.OFFLINE || _la === MariaDBParser.ONLINE)) {
					_localctx._intimeAction = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 976;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.FULLTEXT || _la === MariaDBParser.SPATIAL || _la === MariaDBParser.UNIQUE) {
				{
				this.state = 975;
				_localctx._indexCategory = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.FULLTEXT || _la === MariaDBParser.SPATIAL || _la === MariaDBParser.UNIQUE)) {
					_localctx._indexCategory = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 978;
			this.match(MariaDBParser.INDEX);
			this.state = 980;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 31, this._ctx) ) {
			case 1:
				{
				this.state = 979;
				this.ifNotExists();
				}
				break;
			}
			this.state = 982;
			this.uid();
			this.state = 984;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.USING) {
				{
				this.state = 983;
				this.indexType();
				}
			}

			this.state = 986;
			this.match(MariaDBParser.ON);
			this.state = 987;
			this.tableName();
			this.state = 988;
			this.indexColumnNames();
			this.state = 990;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.NOWAIT || _la === MariaDBParser.WAIT) {
				{
				this.state = 989;
				this.waitNowaitClause();
				}
			}

			this.state = 995;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.IGNORED || _la === MariaDBParser.NOT || _la === MariaDBParser.USING || _la === MariaDBParser.WITH || _la === MariaDBParser.CLUSTERING || _la === MariaDBParser.COMMENT || _la === MariaDBParser.INVISIBLE || _la === MariaDBParser.KEY_BLOCK_SIZE || _la === MariaDBParser.VISIBLE || _la === MariaDBParser.ENGINE_ATTRIBUTE || _la === MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE) {
				{
				{
				this.state = 992;
				this.indexOption();
				}
				}
				this.state = 997;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1010;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 38, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					this.state = 1008;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case MariaDBParser.ALGORITHM:
						{
						this.state = 998;
						this.match(MariaDBParser.ALGORITHM);
						this.state = 1000;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === MariaDBParser.EQUAL_SYMBOL) {
							{
							this.state = 999;
							this.match(MariaDBParser.EQUAL_SYMBOL);
							}
						}

						this.state = 1002;
						_localctx._algType = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === MariaDBParser.DEFAULT || _la === MariaDBParser.COPY || _la === MariaDBParser.INPLACE || _la === MariaDBParser.INSTANT || _la === MariaDBParser.NOCOPY)) {
							_localctx._algType = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;
					case MariaDBParser.LOCK:
						{
						this.state = 1003;
						this.match(MariaDBParser.LOCK);
						this.state = 1005;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === MariaDBParser.EQUAL_SYMBOL) {
							{
							this.state = 1004;
							this.match(MariaDBParser.EQUAL_SYMBOL);
							}
						}

						this.state = 1007;
						_localctx._lockType = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === MariaDBParser.DEFAULT || _la === MariaDBParser.EXCLUSIVE || _la === MariaDBParser.NONE || _la === MariaDBParser.SHARED)) {
							_localctx._lockType = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}
				this.state = 1012;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 38, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createLogfileGroup(): CreateLogfileGroupContext {
		let _localctx: CreateLogfileGroupContext = new CreateLogfileGroupContext(this._ctx, this.state);
		this.enterRule(_localctx, 32, MariaDBParser.RULE_createLogfileGroup);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1013;
			this.match(MariaDBParser.CREATE);
			this.state = 1014;
			this.match(MariaDBParser.LOGFILE);
			this.state = 1015;
			this.match(MariaDBParser.GROUP);
			this.state = 1016;
			this.uid();
			this.state = 1017;
			this.match(MariaDBParser.ADD);
			this.state = 1018;
			this.match(MariaDBParser.UNDOFILE);
			this.state = 1019;
			_localctx._undoFile = this.match(MariaDBParser.STRING_LITERAL);
			this.state = 1025;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.INITIAL_SIZE) {
				{
				this.state = 1020;
				this.match(MariaDBParser.INITIAL_SIZE);
				this.state = 1022;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1021;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1024;
				_localctx._initSize = this.fileSizeLiteral();
				}
			}

			this.state = 1032;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.UNDO_BUFFER_SIZE) {
				{
				this.state = 1027;
				this.match(MariaDBParser.UNDO_BUFFER_SIZE);
				this.state = 1029;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1028;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1031;
				_localctx._undoSize = this.fileSizeLiteral();
				}
			}

			this.state = 1039;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.REDO_BUFFER_SIZE) {
				{
				this.state = 1034;
				this.match(MariaDBParser.REDO_BUFFER_SIZE);
				this.state = 1036;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1035;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1038;
				_localctx._redoSize = this.fileSizeLiteral();
				}
			}

			this.state = 1046;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.NODEGROUP) {
				{
				this.state = 1041;
				this.match(MariaDBParser.NODEGROUP);
				this.state = 1043;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1042;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1045;
				this.uid();
				}
			}

			this.state = 1049;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.WAIT) {
				{
				this.state = 1048;
				this.match(MariaDBParser.WAIT);
				}
			}

			this.state = 1056;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.COMMENT) {
				{
				this.state = 1051;
				this.match(MariaDBParser.COMMENT);
				this.state = 1053;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1052;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1055;
				_localctx._comment = this.match(MariaDBParser.STRING_LITERAL);
				}
			}

			this.state = 1058;
			this.match(MariaDBParser.ENGINE);
			this.state = 1060;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.EQUAL_SYMBOL) {
				{
				this.state = 1059;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				}
			}

			this.state = 1062;
			this.engineName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createProcedure(): CreateProcedureContext {
		let _localctx: CreateProcedureContext = new CreateProcedureContext(this._ctx, this.state);
		this.enterRule(_localctx, 34, MariaDBParser.RULE_createProcedure);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1064;
			this.match(MariaDBParser.CREATE);
			this.state = 1066;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.OR) {
				{
				this.state = 1065;
				this.orReplace();
				}
			}

			this.state = 1069;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.DEFINER) {
				{
				this.state = 1068;
				this.ownerStatement();
				}
			}

			this.state = 1071;
			this.match(MariaDBParser.PROCEDURE);
			this.state = 1072;
			this.fullId();
			this.state = 1073;
			this.match(MariaDBParser.LR_BRACKET);
			this.state = 1075;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MariaDBParser.ATTRIBUTE) | (1 << MariaDBParser.BODY) | (1 << MariaDBParser.BUCKETS) | (1 << MariaDBParser.CONDITION))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (MariaDBParser.CURRENT - 36)) | (1 << (MariaDBParser.CURRENT_ROLE - 36)) | (1 << (MariaDBParser.CURRENT_USER - 36)) | (1 << (MariaDBParser.DATABASE - 36)) | (1 << (MariaDBParser.DEFAULT - 36)) | (1 << (MariaDBParser.DIAGNOSTICS - 36)) | (1 << (MariaDBParser.EMPTY - 36)) | (1 << (MariaDBParser.EXCEPT - 36)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (MariaDBParser.GROUP - 73)) | (1 << (MariaDBParser.IF - 73)) | (1 << (MariaDBParser.IGNORED - 73)) | (1 << (MariaDBParser.IN - 73)) | (1 << (MariaDBParser.INOUT - 73)) | (1 << (MariaDBParser.INSERT - 73)) | (1 << (MariaDBParser.LATERAL - 73)) | (1 << (MariaDBParser.LEFT - 73)) | (1 << (MariaDBParser.LOCKED - 73)))) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & ((1 << (MariaDBParser.MAXVALUE - 110)) | (1 << (MariaDBParser.MINVALUE - 110)) | (1 << (MariaDBParser.NUMBER - 110)) | (1 << (MariaDBParser.OPTIONAL - 110)) | (1 << (MariaDBParser.ORDER - 110)) | (1 << (MariaDBParser.OUT - 110)) | (1 << (MariaDBParser.PRIMARY - 110)) | (1 << (MariaDBParser.PACKAGE - 110)))) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (MariaDBParser.REPLACE - 142)) | (1 << (MariaDBParser.RIGHT - 142)) | (1 << (MariaDBParser.SCHEMA - 142)) | (1 << (MariaDBParser.SKIP_ - 142)) | (1 << (MariaDBParser.STACKED - 142)) | (1 << (MariaDBParser.STATEMENT - 142)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MariaDBParser.DATE - 217)) | (1 << (MariaDBParser.TIME - 217)) | (1 << (MariaDBParser.TIMESTAMP - 217)) | (1 << (MariaDBParser.DATETIME - 217)) | (1 << (MariaDBParser.YEAR - 217)) | (1 << (MariaDBParser.BINARY - 217)) | (1 << (MariaDBParser.TEXT - 217)) | (1 << (MariaDBParser.ENUM - 217)) | (1 << (MariaDBParser.SERIAL - 217)))) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & ((1 << (MariaDBParser.JSON_ARRAY - 251)) | (1 << (MariaDBParser.JSON_ARRAYAGG - 251)) | (1 << (MariaDBParser.JSON_ARRAY_APPEND - 251)) | (1 << (MariaDBParser.JSON_ARRAY_INSERT - 251)) | (1 << (MariaDBParser.JSON_CONTAINS - 251)) | (1 << (MariaDBParser.JSON_CONTAINS_PATH - 251)) | (1 << (MariaDBParser.JSON_DEPTH - 251)) | (1 << (MariaDBParser.JSON_EXTRACT - 251)) | (1 << (MariaDBParser.JSON_INSERT - 251)) | (1 << (MariaDBParser.JSON_KEYS - 251)) | (1 << (MariaDBParser.JSON_LENGTH - 251)) | (1 << (MariaDBParser.JSON_MERGE - 251)) | (1 << (MariaDBParser.JSON_MERGE_PATCH - 251)) | (1 << (MariaDBParser.JSON_MERGE_PRESERVE - 251)) | (1 << (MariaDBParser.JSON_OBJECT - 251)) | (1 << (MariaDBParser.JSON_OBJECTAGG - 251)) | (1 << (MariaDBParser.JSON_OVERLAPS - 251)) | (1 << (MariaDBParser.JSON_PRETTY - 251)) | (1 << (MariaDBParser.JSON_QUOTE - 251)) | (1 << (MariaDBParser.JSON_REMOVE - 251)) | (1 << (MariaDBParser.JSON_REPLACE - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALID - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT - 251)) | (1 << (MariaDBParser.JSON_SEARCH - 251)) | (1 << (MariaDBParser.JSON_SET - 251)) | (1 << (MariaDBParser.JSON_STORAGE_FREE - 251)) | (1 << (MariaDBParser.JSON_STORAGE_SIZE - 251)) | (1 << (MariaDBParser.JSON_TABLE - 251)) | (1 << (MariaDBParser.JSON_TYPE - 251)) | (1 << (MariaDBParser.JSON_UNQUOTE - 251)) | (1 << (MariaDBParser.JSON_VALID - 251)) | (1 << (MariaDBParser.JSON_VALUE - 251)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (MariaDBParser.NESTED - 283)) | (1 << (MariaDBParser.ORDINALITY - 283)) | (1 << (MariaDBParser.PATH - 283)) | (1 << (MariaDBParser.AVG - 283)) | (1 << (MariaDBParser.BIT_AND - 283)) | (1 << (MariaDBParser.BIT_OR - 283)) | (1 << (MariaDBParser.BIT_XOR - 283)) | (1 << (MariaDBParser.COUNT - 283)) | (1 << (MariaDBParser.CUME_DIST - 283)) | (1 << (MariaDBParser.DENSE_RANK - 283)) | (1 << (MariaDBParser.FIRST_VALUE - 283)) | (1 << (MariaDBParser.GROUP_CONCAT - 283)) | (1 << (MariaDBParser.LAG - 283)) | (1 << (MariaDBParser.LAST_VALUE - 283)) | (1 << (MariaDBParser.LEAD - 283)) | (1 << (MariaDBParser.MAX - 283)) | (1 << (MariaDBParser.MIN - 283)) | (1 << (MariaDBParser.NTILE - 283)) | (1 << (MariaDBParser.NTH_VALUE - 283)) | (1 << (MariaDBParser.PERCENT_RANK - 283)) | (1 << (MariaDBParser.RANK - 283)) | (1 << (MariaDBParser.ROW_NUMBER - 283)) | (1 << (MariaDBParser.STD - 283)) | (1 << (MariaDBParser.STDDEV - 283)) | (1 << (MariaDBParser.STDDEV_POP - 283)) | (1 << (MariaDBParser.STDDEV_SAMP - 283)) | (1 << (MariaDBParser.SUM - 283)) | (1 << (MariaDBParser.VAR_POP - 283)) | (1 << (MariaDBParser.VAR_SAMP - 283)) | (1 << (MariaDBParser.VARIANCE - 283)) | (1 << (MariaDBParser.CURRENT_DATE - 283)) | (1 << (MariaDBParser.CURRENT_TIME - 283)))) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & ((1 << (MariaDBParser.CURRENT_TIMESTAMP - 315)) | (1 << (MariaDBParser.LOCALTIME - 315)) | (1 << (MariaDBParser.CURDATE - 315)) | (1 << (MariaDBParser.CURTIME - 315)) | (1 << (MariaDBParser.DATE_ADD - 315)) | (1 << (MariaDBParser.DATE_SUB - 315)) | (1 << (MariaDBParser.LOCALTIMESTAMP - 315)) | (1 << (MariaDBParser.NOW - 315)) | (1 << (MariaDBParser.POSITION - 315)) | (1 << (MariaDBParser.SUBSTR - 315)) | (1 << (MariaDBParser.SUBSTRING - 315)) | (1 << (MariaDBParser.SYSDATE - 315)) | (1 << (MariaDBParser.TRIM - 315)) | (1 << (MariaDBParser.UTC_DATE - 315)) | (1 << (MariaDBParser.UTC_TIME - 315)) | (1 << (MariaDBParser.UTC_TIMESTAMP - 315)) | (1 << (MariaDBParser.ACCOUNT - 315)) | (1 << (MariaDBParser.ACTION - 315)) | (1 << (MariaDBParser.AFTER - 315)) | (1 << (MariaDBParser.AGGREGATE - 315)) | (1 << (MariaDBParser.ALGORITHM - 315)) | (1 << (MariaDBParser.ANY - 315)) | (1 << (MariaDBParser.AT - 315)) | (1 << (MariaDBParser.AUTHORS - 315)) | (1 << (MariaDBParser.AUTOCOMMIT - 315)) | (1 << (MariaDBParser.AUTOEXTEND_SIZE - 315)) | (1 << (MariaDBParser.AUTO_INCREMENT - 315)) | (1 << (MariaDBParser.AVG_ROW_LENGTH - 315)) | (1 << (MariaDBParser.BEGIN - 315)) | (1 << (MariaDBParser.BINLOG - 315)) | (1 << (MariaDBParser.BIT - 315)))) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & ((1 << (MariaDBParser.BLOCK - 347)) | (1 << (MariaDBParser.BOOL - 347)) | (1 << (MariaDBParser.BOOLEAN - 347)) | (1 << (MariaDBParser.BTREE - 347)) | (1 << (MariaDBParser.CACHE - 347)) | (1 << (MariaDBParser.CASCADED - 347)) | (1 << (MariaDBParser.CHAIN - 347)) | (1 << (MariaDBParser.CHANGED - 347)) | (1 << (MariaDBParser.CHANNEL - 347)) | (1 << (MariaDBParser.CHECKSUM - 347)) | (1 << (MariaDBParser.PAGE_CHECKSUM - 347)) | (1 << (MariaDBParser.CIPHER - 347)) | (1 << (MariaDBParser.CLASS_ORIGIN - 347)) | (1 << (MariaDBParser.CLIENT - 347)) | (1 << (MariaDBParser.CLOSE - 347)) | (1 << (MariaDBParser.CLUSTERING - 347)) | (1 << (MariaDBParser.COALESCE - 347)) | (1 << (MariaDBParser.CODE - 347)) | (1 << (MariaDBParser.COLUMNS - 347)) | (1 << (MariaDBParser.COLUMN_FORMAT - 347)) | (1 << (MariaDBParser.COLUMN_NAME - 347)) | (1 << (MariaDBParser.COMMENT - 347)) | (1 << (MariaDBParser.COMMIT - 347)) | (1 << (MariaDBParser.COMPACT - 347)) | (1 << (MariaDBParser.COMPLETION - 347)) | (1 << (MariaDBParser.COMPRESSED - 347)) | (1 << (MariaDBParser.COMPRESSION - 347)) | (1 << (MariaDBParser.CONCURRENT - 347)) | (1 << (MariaDBParser.CONNECT - 347)) | (1 << (MariaDBParser.CONNECTION - 347)) | (1 << (MariaDBParser.CONSISTENT - 347)) | (1 << (MariaDBParser.CONSTRAINT_CATALOG - 347)))) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & ((1 << (MariaDBParser.CONSTRAINT_SCHEMA - 379)) | (1 << (MariaDBParser.CONSTRAINT_NAME - 379)) | (1 << (MariaDBParser.CONTAINS - 379)) | (1 << (MariaDBParser.CONTEXT - 379)) | (1 << (MariaDBParser.CONTRIBUTORS - 379)) | (1 << (MariaDBParser.COPY - 379)) | (1 << (MariaDBParser.CPU - 379)) | (1 << (MariaDBParser.CYCLE - 379)) | (1 << (MariaDBParser.CURSOR_NAME - 379)) | (1 << (MariaDBParser.DATA - 379)) | (1 << (MariaDBParser.DATAFILE - 379)) | (1 << (MariaDBParser.DEALLOCATE - 379)) | (1 << (MariaDBParser.DEFAULT_AUTH - 379)) | (1 << (MariaDBParser.DEFINER - 379)) | (1 << (MariaDBParser.DELAY_KEY_WRITE - 379)) | (1 << (MariaDBParser.DES_KEY_FILE - 379)) | (1 << (MariaDBParser.DIRECTORY - 379)) | (1 << (MariaDBParser.DISABLE - 379)) | (1 << (MariaDBParser.DISCARD - 379)) | (1 << (MariaDBParser.DISK - 379)) | (1 << (MariaDBParser.DO - 379)) | (1 << (MariaDBParser.DUMPFILE - 379)) | (1 << (MariaDBParser.DUPLICATE - 379)) | (1 << (MariaDBParser.DYNAMIC - 379)) | (1 << (MariaDBParser.ENABLE - 379)) | (1 << (MariaDBParser.ENCRYPTED - 379)) | (1 << (MariaDBParser.ENCRYPTION - 379)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ID - 379)) | (1 << (MariaDBParser.END - 379)) | (1 << (MariaDBParser.ENDS - 379)) | (1 << (MariaDBParser.ENGINE - 379)) | (1 << (MariaDBParser.ENGINES - 379)))) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & ((1 << (MariaDBParser.ERROR - 411)) | (1 << (MariaDBParser.ERRORS - 411)) | (1 << (MariaDBParser.ESCAPE - 411)) | (1 << (MariaDBParser.EVEN - 411)) | (1 << (MariaDBParser.EVENT - 411)) | (1 << (MariaDBParser.EVENTS - 411)) | (1 << (MariaDBParser.EVERY - 411)) | (1 << (MariaDBParser.EXCHANGE - 411)) | (1 << (MariaDBParser.EXCLUSIVE - 411)) | (1 << (MariaDBParser.EXPIRE - 411)) | (1 << (MariaDBParser.EXPORT - 411)) | (1 << (MariaDBParser.EXTENDED - 411)) | (1 << (MariaDBParser.EXTENT_SIZE - 411)) | (1 << (MariaDBParser.FAILED_LOGIN_ATTEMPTS - 411)) | (1 << (MariaDBParser.FAST - 411)) | (1 << (MariaDBParser.FAULTS - 411)) | (1 << (MariaDBParser.FIELDS - 411)) | (1 << (MariaDBParser.FILE_BLOCK_SIZE - 411)) | (1 << (MariaDBParser.FILTER - 411)) | (1 << (MariaDBParser.FIRST - 411)) | (1 << (MariaDBParser.FIXED - 411)) | (1 << (MariaDBParser.FLUSH - 411)) | (1 << (MariaDBParser.FOLLOWS - 411)) | (1 << (MariaDBParser.FOUND - 411)) | (1 << (MariaDBParser.FULL - 411)) | (1 << (MariaDBParser.FUNCTION - 411)) | (1 << (MariaDBParser.GENERAL - 411)) | (1 << (MariaDBParser.GLOBAL - 411)) | (1 << (MariaDBParser.GRANTS - 411)) | (1 << (MariaDBParser.GROUP_REPLICATION - 411)) | (1 << (MariaDBParser.HANDLER - 411)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (MariaDBParser.HASH - 443)) | (1 << (MariaDBParser.HELP - 443)) | (1 << (MariaDBParser.HISTORY - 443)) | (1 << (MariaDBParser.HOST - 443)) | (1 << (MariaDBParser.HOSTS - 443)) | (1 << (MariaDBParser.IDENTIFIED - 443)) | (1 << (MariaDBParser.IGNORE_SERVER_IDS - 443)) | (1 << (MariaDBParser.IMPORT - 443)) | (1 << (MariaDBParser.INCREMENT - 443)) | (1 << (MariaDBParser.INDEXES - 443)) | (1 << (MariaDBParser.INITIAL_SIZE - 443)) | (1 << (MariaDBParser.INPLACE - 443)) | (1 << (MariaDBParser.INSERT_METHOD - 443)) | (1 << (MariaDBParser.INSTALL - 443)) | (1 << (MariaDBParser.INSTANCE - 443)) | (1 << (MariaDBParser.INSTANT - 443)) | (1 << (MariaDBParser.INVISIBLE - 443)) | (1 << (MariaDBParser.INVOKER - 443)) | (1 << (MariaDBParser.IO - 443)) | (1 << (MariaDBParser.IO_THREAD - 443)) | (1 << (MariaDBParser.IPC - 443)) | (1 << (MariaDBParser.ISOLATION - 443)) | (1 << (MariaDBParser.ISSUER - 443)) | (1 << (MariaDBParser.JSON - 443)) | (1 << (MariaDBParser.KEY_BLOCK_SIZE - 443)) | (1 << (MariaDBParser.LANGUAGE - 443)) | (1 << (MariaDBParser.LAST - 443)) | (1 << (MariaDBParser.LEAVES - 443)) | (1 << (MariaDBParser.LESS - 443)) | (1 << (MariaDBParser.LEVEL - 443)) | (1 << (MariaDBParser.LIST - 443)) | (1 << (MariaDBParser.LOCAL - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (MariaDBParser.LOCALES - 475)) | (1 << (MariaDBParser.LOGFILE - 475)) | (1 << (MariaDBParser.LOGS - 475)) | (1 << (MariaDBParser.MASTER - 475)) | (1 << (MariaDBParser.MASTER_AUTO_POSITION - 475)) | (1 << (MariaDBParser.MASTER_CONNECT_RETRY - 475)) | (1 << (MariaDBParser.MASTER_DELAY - 475)) | (1 << (MariaDBParser.MASTER_HEARTBEAT_PERIOD - 475)) | (1 << (MariaDBParser.MASTER_HOST - 475)) | (1 << (MariaDBParser.MASTER_LOG_FILE - 475)) | (1 << (MariaDBParser.MASTER_LOG_POS - 475)) | (1 << (MariaDBParser.MASTER_PASSWORD - 475)) | (1 << (MariaDBParser.MASTER_PORT - 475)) | (1 << (MariaDBParser.MASTER_RETRY_COUNT - 475)) | (1 << (MariaDBParser.MASTER_SSL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CA - 475)) | (1 << (MariaDBParser.MASTER_SSL_CAPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_CERT - 475)) | (1 << (MariaDBParser.MASTER_SSL_CIPHER - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRLPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_KEY - 475)) | (1 << (MariaDBParser.MASTER_TLS_VERSION - 475)) | (1 << (MariaDBParser.MASTER_USER - 475)) | (1 << (MariaDBParser.MAX_CONNECTIONS_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_QUERIES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_ROWS - 475)) | (1 << (MariaDBParser.MAX_SIZE - 475)) | (1 << (MariaDBParser.MAX_UPDATES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_USER_CONNECTIONS - 475)) | (1 << (MariaDBParser.MEDIUM - 475)) | (1 << (MariaDBParser.MEMBER - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (MariaDBParser.MERGE - 507)) | (1 << (MariaDBParser.MESSAGE_TEXT - 507)) | (1 << (MariaDBParser.MID - 507)) | (1 << (MariaDBParser.MIGRATE - 507)) | (1 << (MariaDBParser.MIN_ROWS - 507)) | (1 << (MariaDBParser.MODE - 507)) | (1 << (MariaDBParser.MODIFY - 507)) | (1 << (MariaDBParser.MUTEX - 507)) | (1 << (MariaDBParser.MYSQL - 507)) | (1 << (MariaDBParser.MYSQL_ERRNO - 507)) | (1 << (MariaDBParser.NAME - 507)) | (1 << (MariaDBParser.NAMES - 507)) | (1 << (MariaDBParser.NCHAR - 507)) | (1 << (MariaDBParser.NEVER - 507)) | (1 << (MariaDBParser.NEXT - 507)) | (1 << (MariaDBParser.NO - 507)) | (1 << (MariaDBParser.NOCACHE - 507)) | (1 << (MariaDBParser.NOCOPY - 507)) | (1 << (MariaDBParser.NOCYCLE - 507)) | (1 << (MariaDBParser.NOMAXVALUE - 507)) | (1 << (MariaDBParser.NOMINVALUE - 507)) | (1 << (MariaDBParser.NOWAIT - 507)) | (1 << (MariaDBParser.NODEGROUP - 507)) | (1 << (MariaDBParser.NONE - 507)) | (1 << (MariaDBParser.ODBC - 507)) | (1 << (MariaDBParser.OFFLINE - 507)) | (1 << (MariaDBParser.OFFSET - 507)) | (1 << (MariaDBParser.OF - 507)) | (1 << (MariaDBParser.OJ - 507)) | (1 << (MariaDBParser.OLD_PASSWORD - 507)) | (1 << (MariaDBParser.ONE - 507)) | (1 << (MariaDBParser.ONLINE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (MariaDBParser.ONLY - 539)) | (1 << (MariaDBParser.OPEN - 539)) | (1 << (MariaDBParser.OPTIMIZER_COSTS - 539)) | (1 << (MariaDBParser.OPTIONS - 539)) | (1 << (MariaDBParser.OWNER - 539)) | (1 << (MariaDBParser.PACK_KEYS - 539)) | (1 << (MariaDBParser.PAGE - 539)) | (1 << (MariaDBParser.PARSER - 539)) | (1 << (MariaDBParser.PARTIAL - 539)) | (1 << (MariaDBParser.PARTITIONING - 539)) | (1 << (MariaDBParser.PARTITIONS - 539)) | (1 << (MariaDBParser.PASSWORD - 539)) | (1 << (MariaDBParser.PASSWORD_LOCK_TIME - 539)) | (1 << (MariaDBParser.PHASE - 539)) | (1 << (MariaDBParser.PLUGIN - 539)) | (1 << (MariaDBParser.PLUGIN_DIR - 539)) | (1 << (MariaDBParser.PLUGINS - 539)) | (1 << (MariaDBParser.PORT - 539)) | (1 << (MariaDBParser.PRECEDES - 539)) | (1 << (MariaDBParser.PREPARE - 539)) | (1 << (MariaDBParser.PRESERVE - 539)) | (1 << (MariaDBParser.PREV - 539)) | (1 << (MariaDBParser.PROCESSLIST - 539)) | (1 << (MariaDBParser.PROFILE - 539)) | (1 << (MariaDBParser.PROFILES - 539)) | (1 << (MariaDBParser.PROXY - 539)) | (1 << (MariaDBParser.QUERY - 539)) | (1 << (MariaDBParser.QUERY_RESPONSE_TIME - 539)) | (1 << (MariaDBParser.QUICK - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (MariaDBParser.REBUILD - 571)) | (1 << (MariaDBParser.RECOVER - 571)) | (1 << (MariaDBParser.RECURSIVE - 571)) | (1 << (MariaDBParser.REDO_BUFFER_SIZE - 571)) | (1 << (MariaDBParser.REDUNDANT - 571)) | (1 << (MariaDBParser.RELAY - 571)) | (1 << (MariaDBParser.RELAY_LOG_FILE - 571)) | (1 << (MariaDBParser.RELAY_LOG_POS - 571)) | (1 << (MariaDBParser.RELAYLOG - 571)) | (1 << (MariaDBParser.REMOVE - 571)) | (1 << (MariaDBParser.REORGANIZE - 571)) | (1 << (MariaDBParser.REPAIR - 571)) | (1 << (MariaDBParser.REPLICATE_DO_DB - 571)) | (1 << (MariaDBParser.REPLICATE_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_REWRITE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATION - 571)) | (1 << (MariaDBParser.RESET - 571)) | (1 << (MariaDBParser.RESTART - 571)) | (1 << (MariaDBParser.RESUME - 571)) | (1 << (MariaDBParser.RETURNED_SQLSTATE - 571)) | (1 << (MariaDBParser.RETURNS - 571)) | (1 << (MariaDBParser.REUSE - 571)) | (1 << (MariaDBParser.ROLE - 571)) | (1 << (MariaDBParser.ROLLBACK - 571)) | (1 << (MariaDBParser.ROLLUP - 571)) | (1 << (MariaDBParser.ROTATE - 571)) | (1 << (MariaDBParser.ROW - 571)))) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & ((1 << (MariaDBParser.ROWS - 603)) | (1 << (MariaDBParser.ROW_FORMAT - 603)) | (1 << (MariaDBParser.RTREE - 603)) | (1 << (MariaDBParser.SAVEPOINT - 603)) | (1 << (MariaDBParser.SCHEDULE - 603)) | (1 << (MariaDBParser.SECURITY - 603)) | (1 << (MariaDBParser.SEQUENCE - 603)) | (1 << (MariaDBParser.SERVER - 603)) | (1 << (MariaDBParser.SESSION - 603)) | (1 << (MariaDBParser.SHARE - 603)) | (1 << (MariaDBParser.SHARED - 603)) | (1 << (MariaDBParser.SIGNED - 603)) | (1 << (MariaDBParser.SIMPLE - 603)) | (1 << (MariaDBParser.SLAVE - 603)) | (1 << (MariaDBParser.SLAVES - 603)) | (1 << (MariaDBParser.SLOW - 603)) | (1 << (MariaDBParser.SNAPSHOT - 603)) | (1 << (MariaDBParser.SOCKET - 603)) | (1 << (MariaDBParser.SOME - 603)) | (1 << (MariaDBParser.SONAME - 603)) | (1 << (MariaDBParser.SOUNDS - 603)) | (1 << (MariaDBParser.SOURCE - 603)) | (1 << (MariaDBParser.SQL_AFTER_GTIDS - 603)) | (1 << (MariaDBParser.SQL_AFTER_MTS_GAPS - 603)) | (1 << (MariaDBParser.SQL_BEFORE_GTIDS - 603)) | (1 << (MariaDBParser.SQL_BUFFER_RESULT - 603)) | (1 << (MariaDBParser.SQL_CACHE - 603)) | (1 << (MariaDBParser.SQL_NO_CACHE - 603)) | (1 << (MariaDBParser.SQL_THREAD - 603)) | (1 << (MariaDBParser.START - 603)) | (1 << (MariaDBParser.STARTS - 603)) | (1 << (MariaDBParser.STATS_AUTO_RECALC - 603)))) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & ((1 << (MariaDBParser.STATS_PERSISTENT - 635)) | (1 << (MariaDBParser.STATS_SAMPLE_PAGES - 635)) | (1 << (MariaDBParser.STATUS - 635)) | (1 << (MariaDBParser.STOP - 635)) | (1 << (MariaDBParser.STORAGE - 635)) | (1 << (MariaDBParser.STRING - 635)) | (1 << (MariaDBParser.SUBCLASS_ORIGIN - 635)) | (1 << (MariaDBParser.SUBJECT - 635)) | (1 << (MariaDBParser.SUBPARTITION - 635)) | (1 << (MariaDBParser.SUBPARTITIONS - 635)) | (1 << (MariaDBParser.SUSPEND - 635)) | (1 << (MariaDBParser.SWAPS - 635)) | (1 << (MariaDBParser.SWITCHES - 635)) | (1 << (MariaDBParser.TABLE_NAME - 635)) | (1 << (MariaDBParser.TABLESPACE - 635)) | (1 << (MariaDBParser.TABLE_TYPE - 635)) | (1 << (MariaDBParser.TEMPORARY - 635)) | (1 << (MariaDBParser.TEMPTABLE - 635)) | (1 << (MariaDBParser.THAN - 635)) | (1 << (MariaDBParser.TRADITIONAL - 635)) | (1 << (MariaDBParser.TRANSACTION - 635)) | (1 << (MariaDBParser.TRANSACTIONAL - 635)) | (1 << (MariaDBParser.TRIGGERS - 635)) | (1 << (MariaDBParser.TRUNCATE - 635)) | (1 << (MariaDBParser.TYPES - 635)) | (1 << (MariaDBParser.UNBOUNDED - 635)) | (1 << (MariaDBParser.UNDEFINED - 635)) | (1 << (MariaDBParser.UNDOFILE - 635)) | (1 << (MariaDBParser.UNDO_BUFFER_SIZE - 635)) | (1 << (MariaDBParser.UNINSTALL - 635)) | (1 << (MariaDBParser.UNKNOWN - 635)))) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & ((1 << (MariaDBParser.UNTIL - 667)) | (1 << (MariaDBParser.UPGRADE - 667)) | (1 << (MariaDBParser.USER - 667)) | (1 << (MariaDBParser.USE_FRM - 667)) | (1 << (MariaDBParser.USER_RESOURCES - 667)) | (1 << (MariaDBParser.VALIDATION - 667)) | (1 << (MariaDBParser.VALUE - 667)) | (1 << (MariaDBParser.VARIABLES - 667)) | (1 << (MariaDBParser.VIEW - 667)) | (1 << (MariaDBParser.VIRTUAL - 667)) | (1 << (MariaDBParser.VISIBLE - 667)) | (1 << (MariaDBParser.WAIT - 667)) | (1 << (MariaDBParser.WARNINGS - 667)) | (1 << (MariaDBParser.WITHOUT - 667)) | (1 << (MariaDBParser.WORK - 667)) | (1 << (MariaDBParser.WRAPPER - 667)) | (1 << (MariaDBParser.WSREP_MEMBERSHIP - 667)) | (1 << (MariaDBParser.WSREP_STATUS - 667)) | (1 << (MariaDBParser.X509 - 667)) | (1 << (MariaDBParser.XA - 667)) | (1 << (MariaDBParser.XML - 667)) | (1 << (MariaDBParser.EUR - 667)) | (1 << (MariaDBParser.USA - 667)) | (1 << (MariaDBParser.JIS - 667)) | (1 << (MariaDBParser.ISO - 667)) | (1 << (MariaDBParser.INTERNAL - 667)) | (1 << (MariaDBParser.QUARTER - 667)) | (1 << (MariaDBParser.MONTH - 667)) | (1 << (MariaDBParser.DAY - 667)) | (1 << (MariaDBParser.HOUR - 667)))) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & ((1 << (MariaDBParser.MINUTE - 699)) | (1 << (MariaDBParser.WEEK - 699)) | (1 << (MariaDBParser.SECOND - 699)) | (1 << (MariaDBParser.MICROSECOND - 699)) | (1 << (MariaDBParser.USER_STATISTICS - 699)) | (1 << (MariaDBParser.CLIENT_STATISTICS - 699)) | (1 << (MariaDBParser.INDEX_STATISTICS - 699)) | (1 << (MariaDBParser.TABLE_STATISTICS - 699)) | (1 << (MariaDBParser.ADMIN - 699)) | (1 << (MariaDBParser.AUDIT_ADMIN - 699)) | (1 << (MariaDBParser.BACKUP_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ENCRYPTION_ADMIN - 699)) | (1 << (MariaDBParser.CLONE_ADMIN - 699)) | (1 << (MariaDBParser.CONNECTION_ADMIN - 699)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ADMIN - 699)) | (1 << (MariaDBParser.EXECUTE - 699)) | (1 << (MariaDBParser.FILE - 699)) | (1 << (MariaDBParser.FIREWALL_ADMIN - 699)) | (1 << (MariaDBParser.FIREWALL_USER - 699)) | (1 << (MariaDBParser.GROUP_REPLICATION_ADMIN - 699)) | (1 << (MariaDBParser.INNODB_REDO_LOG_ARCHIVE - 699)) | (1 << (MariaDBParser.INVOKE - 699)) | (1 << (MariaDBParser.LAMBDA - 699)) | (1 << (MariaDBParser.NDB_STORED_USER - 699)) | (1 << (MariaDBParser.PASSWORDLESS_USER_ADMIN - 699)))) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & ((1 << (MariaDBParser.PERSIST_RO_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.PRIVILEGES - 731)) | (1 << (MariaDBParser.PROCESS - 731)) | (1 << (MariaDBParser.RELOAD - 731)) | (1 << (MariaDBParser.REPLICATION_APPLIER - 731)) | (1 << (MariaDBParser.REPLICATION_SLAVE_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_USER - 731)) | (1 << (MariaDBParser.ROLE_ADMIN - 731)) | (1 << (MariaDBParser.ROUTINE - 731)) | (1 << (MariaDBParser.S3 - 731)) | (1 << (MariaDBParser.SESSION_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.SET_USER_ID - 731)) | (1 << (MariaDBParser.SHOW_ROUTINE - 731)) | (1 << (MariaDBParser.SHUTDOWN - 731)) | (1 << (MariaDBParser.SUPER - 731)) | (1 << (MariaDBParser.SYSTEM_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.TABLES - 731)) | (1 << (MariaDBParser.TABLE_ENCRYPTION_ADMIN - 731)) | (1 << (MariaDBParser.VERSION_TOKEN_ADMIN - 731)) | (1 << (MariaDBParser.XA_RECOVER_ADMIN - 731)) | (1 << (MariaDBParser.ARMSCII8 - 731)) | (1 << (MariaDBParser.ASCII - 731)) | (1 << (MariaDBParser.BIG5 - 731)) | (1 << (MariaDBParser.CP1250 - 731)) | (1 << (MariaDBParser.CP1251 - 731)) | (1 << (MariaDBParser.CP1256 - 731)) | (1 << (MariaDBParser.CP1257 - 731)) | (1 << (MariaDBParser.CP850 - 731)) | (1 << (MariaDBParser.CP852 - 731)) | (1 << (MariaDBParser.CP866 - 731)))) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & ((1 << (MariaDBParser.CP932 - 763)) | (1 << (MariaDBParser.DEC8 - 763)) | (1 << (MariaDBParser.EUCJPMS - 763)) | (1 << (MariaDBParser.EUCKR - 763)) | (1 << (MariaDBParser.GB18030 - 763)) | (1 << (MariaDBParser.GB2312 - 763)) | (1 << (MariaDBParser.GBK - 763)) | (1 << (MariaDBParser.GEOSTD8 - 763)) | (1 << (MariaDBParser.GREEK - 763)) | (1 << (MariaDBParser.HEBREW - 763)) | (1 << (MariaDBParser.HP8 - 763)) | (1 << (MariaDBParser.KEYBCS2 - 763)) | (1 << (MariaDBParser.KOI8R - 763)) | (1 << (MariaDBParser.KOI8U - 763)) | (1 << (MariaDBParser.LATIN1 - 763)) | (1 << (MariaDBParser.LATIN2 - 763)) | (1 << (MariaDBParser.LATIN5 - 763)) | (1 << (MariaDBParser.LATIN7 - 763)) | (1 << (MariaDBParser.MACCE - 763)) | (1 << (MariaDBParser.MACROMAN - 763)) | (1 << (MariaDBParser.SJIS - 763)) | (1 << (MariaDBParser.SWE7 - 763)) | (1 << (MariaDBParser.TIS620 - 763)) | (1 << (MariaDBParser.UCS2 - 763)) | (1 << (MariaDBParser.UJIS - 763)) | (1 << (MariaDBParser.UTF16 - 763)) | (1 << (MariaDBParser.UTF16LE - 763)) | (1 << (MariaDBParser.UTF32 - 763)) | (1 << (MariaDBParser.UTF8 - 763)) | (1 << (MariaDBParser.UTF8MB3 - 763)) | (1 << (MariaDBParser.UTF8MB4 - 763)) | (1 << (MariaDBParser.ARCHIVE - 763)))) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & ((1 << (MariaDBParser.BLACKHOLE - 795)) | (1 << (MariaDBParser.CSV - 795)) | (1 << (MariaDBParser.FEDERATED - 795)) | (1 << (MariaDBParser.INNODB - 795)) | (1 << (MariaDBParser.MEMORY - 795)) | (1 << (MariaDBParser.MRG_MYISAM - 795)) | (1 << (MariaDBParser.MYISAM - 795)) | (1 << (MariaDBParser.NDB - 795)) | (1 << (MariaDBParser.NDBCLUSTER - 795)) | (1 << (MariaDBParser.PERFORMANCE_SCHEMA - 795)) | (1 << (MariaDBParser.TOKUDB - 795)) | (1 << (MariaDBParser.REPEATABLE - 795)) | (1 << (MariaDBParser.COMMITTED - 795)) | (1 << (MariaDBParser.UNCOMMITTED - 795)) | (1 << (MariaDBParser.SERIALIZABLE - 795)) | (1 << (MariaDBParser.GEOMETRYCOLLECTION - 795)) | (1 << (MariaDBParser.LINESTRING - 795)) | (1 << (MariaDBParser.MULTILINESTRING - 795)) | (1 << (MariaDBParser.MULTIPOINT - 795)) | (1 << (MariaDBParser.MULTIPOLYGON - 795)) | (1 << (MariaDBParser.POINT - 795)) | (1 << (MariaDBParser.POLYGON - 795)) | (1 << (MariaDBParser.ABS - 795)) | (1 << (MariaDBParser.ACOS - 795)) | (1 << (MariaDBParser.ADDDATE - 795)) | (1 << (MariaDBParser.ADDTIME - 795)) | (1 << (MariaDBParser.AES_DECRYPT - 795)) | (1 << (MariaDBParser.AES_ENCRYPT - 795)) | (1 << (MariaDBParser.AREA - 795)) | (1 << (MariaDBParser.ASBINARY - 795)))) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & ((1 << (MariaDBParser.ASIN - 827)) | (1 << (MariaDBParser.ASTEXT - 827)) | (1 << (MariaDBParser.ASWKB - 827)) | (1 << (MariaDBParser.ASWKT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DECRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DERIVE - 827)) | (1 << (MariaDBParser.ASYMMETRIC_ENCRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_SIGN - 827)) | (1 << (MariaDBParser.ASYMMETRIC_VERIFY - 827)) | (1 << (MariaDBParser.ATAN - 827)) | (1 << (MariaDBParser.ATAN2 - 827)) | (1 << (MariaDBParser.BENCHMARK - 827)) | (1 << (MariaDBParser.BIN - 827)) | (1 << (MariaDBParser.BIT_COUNT - 827)) | (1 << (MariaDBParser.BIT_LENGTH - 827)) | (1 << (MariaDBParser.BUFFER - 827)) | (1 << (MariaDBParser.CATALOG_NAME - 827)) | (1 << (MariaDBParser.CEIL - 827)) | (1 << (MariaDBParser.CEILING - 827)) | (1 << (MariaDBParser.CENTROID - 827)) | (1 << (MariaDBParser.CHARACTER_LENGTH - 827)) | (1 << (MariaDBParser.CHARSET - 827)) | (1 << (MariaDBParser.CHAR_LENGTH - 827)) | (1 << (MariaDBParser.COERCIBILITY - 827)) | (1 << (MariaDBParser.COLLATION - 827)) | (1 << (MariaDBParser.COMPRESS - 827)) | (1 << (MariaDBParser.CONCAT - 827)) | (1 << (MariaDBParser.CONCAT_WS - 827)) | (1 << (MariaDBParser.CONNECTION_ID - 827)) | (1 << (MariaDBParser.CONV - 827)) | (1 << (MariaDBParser.CONVERT_TZ - 827)) | (1 << (MariaDBParser.COS - 827)))) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & ((1 << (MariaDBParser.COT - 859)) | (1 << (MariaDBParser.CRC32 - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY - 859)) | (1 << (MariaDBParser.CREATE_DH_PARAMETERS - 859)) | (1 << (MariaDBParser.CREATE_DIGEST - 859)) | (1 << (MariaDBParser.CROSSES - 859)) | (1 << (MariaDBParser.DATEDIFF - 859)) | (1 << (MariaDBParser.DATE_FORMAT - 859)) | (1 << (MariaDBParser.DAYNAME - 859)) | (1 << (MariaDBParser.DAYOFMONTH - 859)) | (1 << (MariaDBParser.DAYOFWEEK - 859)) | (1 << (MariaDBParser.DAYOFYEAR - 859)) | (1 << (MariaDBParser.DECODE - 859)) | (1 << (MariaDBParser.DEGREES - 859)) | (1 << (MariaDBParser.DES_DECRYPT - 859)) | (1 << (MariaDBParser.DES_ENCRYPT - 859)) | (1 << (MariaDBParser.DIMENSION - 859)) | (1 << (MariaDBParser.DISJOINT - 859)) | (1 << (MariaDBParser.ELT - 859)) | (1 << (MariaDBParser.ENCODE - 859)) | (1 << (MariaDBParser.ENCRYPT - 859)) | (1 << (MariaDBParser.ENDPOINT - 859)) | (1 << (MariaDBParser.ENGINE_ATTRIBUTE - 859)) | (1 << (MariaDBParser.ENVELOPE - 859)) | (1 << (MariaDBParser.EQUALS - 859)) | (1 << (MariaDBParser.EXP - 859)) | (1 << (MariaDBParser.EXPORT_SET - 859)) | (1 << (MariaDBParser.EXTERIORRING - 859)) | (1 << (MariaDBParser.EXTRACTVALUE - 859)) | (1 << (MariaDBParser.FIELD - 859)) | (1 << (MariaDBParser.FIND_IN_SET - 859)))) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & ((1 << (MariaDBParser.FLOOR - 891)) | (1 << (MariaDBParser.FORMAT - 891)) | (1 << (MariaDBParser.FOUND_ROWS - 891)) | (1 << (MariaDBParser.FROM_BASE64 - 891)) | (1 << (MariaDBParser.FROM_DAYS - 891)) | (1 << (MariaDBParser.FROM_UNIXTIME - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYN - 891)) | (1 << (MariaDBParser.GEOMETRYTYPE - 891)) | (1 << (MariaDBParser.GEOMFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMFROMWKB - 891)) | (1 << (MariaDBParser.GET_FORMAT - 891)) | (1 << (MariaDBParser.GET_LOCK - 891)) | (1 << (MariaDBParser.GLENGTH - 891)) | (1 << (MariaDBParser.GREATEST - 891)) | (1 << (MariaDBParser.GTID_SUBSET - 891)) | (1 << (MariaDBParser.GTID_SUBTRACT - 891)) | (1 << (MariaDBParser.HEX - 891)) | (1 << (MariaDBParser.IFNULL - 891)) | (1 << (MariaDBParser.INET6_ATON - 891)) | (1 << (MariaDBParser.INET6_NTOA - 891)) | (1 << (MariaDBParser.INET_ATON - 891)) | (1 << (MariaDBParser.INET_NTOA - 891)) | (1 << (MariaDBParser.INSTR - 891)) | (1 << (MariaDBParser.INTERIORRINGN - 891)) | (1 << (MariaDBParser.INTERSECTS - 891)) | (1 << (MariaDBParser.ISCLOSED - 891)))) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & ((1 << (MariaDBParser.ISEMPTY - 923)) | (1 << (MariaDBParser.ISNULL - 923)) | (1 << (MariaDBParser.ISSIMPLE - 923)) | (1 << (MariaDBParser.IS_FREE_LOCK - 923)) | (1 << (MariaDBParser.IS_IPV4 - 923)) | (1 << (MariaDBParser.IS_IPV4_COMPAT - 923)) | (1 << (MariaDBParser.IS_IPV4_MAPPED - 923)) | (1 << (MariaDBParser.IS_IPV6 - 923)) | (1 << (MariaDBParser.IS_USED_LOCK - 923)) | (1 << (MariaDBParser.LAST_INSERT_ID - 923)) | (1 << (MariaDBParser.LCASE - 923)) | (1 << (MariaDBParser.LEAST - 923)) | (1 << (MariaDBParser.LENGTH - 923)) | (1 << (MariaDBParser.LINEFROMTEXT - 923)) | (1 << (MariaDBParser.LINEFROMWKB - 923)) | (1 << (MariaDBParser.LINESTRINGFROMTEXT - 923)) | (1 << (MariaDBParser.LINESTRINGFROMWKB - 923)) | (1 << (MariaDBParser.LN - 923)) | (1 << (MariaDBParser.LOAD_FILE - 923)) | (1 << (MariaDBParser.LOCATE - 923)) | (1 << (MariaDBParser.LOG - 923)) | (1 << (MariaDBParser.LOG10 - 923)) | (1 << (MariaDBParser.LOG2 - 923)) | (1 << (MariaDBParser.LOWER - 923)) | (1 << (MariaDBParser.LPAD - 923)) | (1 << (MariaDBParser.LTRIM - 923)) | (1 << (MariaDBParser.MAKEDATE - 923)) | (1 << (MariaDBParser.MAKETIME - 923)) | (1 << (MariaDBParser.MAKE_SET - 923)) | (1 << (MariaDBParser.MASTER_POS_WAIT - 923)) | (1 << (MariaDBParser.MBRCONTAINS - 923)) | (1 << (MariaDBParser.MBRDISJOINT - 923)))) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & ((1 << (MariaDBParser.MBREQUAL - 955)) | (1 << (MariaDBParser.MBRINTERSECTS - 955)) | (1 << (MariaDBParser.MBROVERLAPS - 955)) | (1 << (MariaDBParser.MBRTOUCHES - 955)) | (1 << (MariaDBParser.MBRWITHIN - 955)) | (1 << (MariaDBParser.MD5 - 955)) | (1 << (MariaDBParser.MLINEFROMTEXT - 955)) | (1 << (MariaDBParser.MLINEFROMWKB - 955)) | (1 << (MariaDBParser.MONTHNAME - 955)) | (1 << (MariaDBParser.MPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MPOLYFROMTEXT - 955)) | (1 << (MariaDBParser.MPOLYFROMWKB - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMTEXT - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMWKB - 955)) | (1 << (MariaDBParser.NAME_CONST - 955)) | (1 << (MariaDBParser.NULLIF - 955)) | (1 << (MariaDBParser.NUMGEOMETRIES - 955)) | (1 << (MariaDBParser.NUMINTERIORRINGS - 955)) | (1 << (MariaDBParser.NUMPOINTS - 955)) | (1 << (MariaDBParser.OCT - 955)) | (1 << (MariaDBParser.OCTET_LENGTH - 955)) | (1 << (MariaDBParser.ORD - 955)) | (1 << (MariaDBParser.OVERLAPS - 955)) | (1 << (MariaDBParser.PERIOD_ADD - 955)) | (1 << (MariaDBParser.PERIOD_DIFF - 955)) | (1 << (MariaDBParser.PI - 955)) | (1 << (MariaDBParser.POINTFROMTEXT - 955)))) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & ((1 << (MariaDBParser.POINTFROMWKB - 987)) | (1 << (MariaDBParser.POINTN - 987)) | (1 << (MariaDBParser.POLYFROMTEXT - 987)) | (1 << (MariaDBParser.POLYFROMWKB - 987)) | (1 << (MariaDBParser.POLYGONFROMTEXT - 987)) | (1 << (MariaDBParser.POLYGONFROMWKB - 987)) | (1 << (MariaDBParser.POW - 987)) | (1 << (MariaDBParser.POWER - 987)) | (1 << (MariaDBParser.QUOTE - 987)) | (1 << (MariaDBParser.RADIANS - 987)) | (1 << (MariaDBParser.RAND - 987)) | (1 << (MariaDBParser.RANDOM_BYTES - 987)) | (1 << (MariaDBParser.RELEASE_LOCK - 987)) | (1 << (MariaDBParser.REVERSE - 987)) | (1 << (MariaDBParser.ROUND - 987)) | (1 << (MariaDBParser.ROW_COUNT - 987)) | (1 << (MariaDBParser.RPAD - 987)) | (1 << (MariaDBParser.RTRIM - 987)) | (1 << (MariaDBParser.SEC_TO_TIME - 987)) | (1 << (MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE - 987)) | (1 << (MariaDBParser.SESSION_USER - 987)) | (1 << (MariaDBParser.SHA - 987)) | (1 << (MariaDBParser.SHA1 - 987)) | (1 << (MariaDBParser.SHA2 - 987)) | (1 << (MariaDBParser.SCHEMA_NAME - 987)) | (1 << (MariaDBParser.SIGN - 987)) | (1 << (MariaDBParser.SIN - 987)) | (1 << (MariaDBParser.SLEEP - 987)) | (1 << (MariaDBParser.SOUNDEX - 987)) | (1 << (MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS - 987)) | (1 << (MariaDBParser.SQRT - 987)) | (1 << (MariaDBParser.SRID - 987)))) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & ((1 << (MariaDBParser.STARTPOINT - 1019)) | (1 << (MariaDBParser.STRCMP - 1019)) | (1 << (MariaDBParser.STR_TO_DATE - 1019)) | (1 << (MariaDBParser.ST_AREA - 1019)) | (1 << (MariaDBParser.ST_ASBINARY - 1019)) | (1 << (MariaDBParser.ST_ASTEXT - 1019)) | (1 << (MariaDBParser.ST_ASWKB - 1019)) | (1 << (MariaDBParser.ST_ASWKT - 1019)) | (1 << (MariaDBParser.ST_BUFFER - 1019)) | (1 << (MariaDBParser.ST_CENTROID - 1019)) | (1 << (MariaDBParser.ST_CONTAINS - 1019)) | (1 << (MariaDBParser.ST_CROSSES - 1019)) | (1 << (MariaDBParser.ST_DIFFERENCE - 1019)) | (1 << (MariaDBParser.ST_DIMENSION - 1019)) | (1 << (MariaDBParser.ST_DISJOINT - 1019)) | (1 << (MariaDBParser.ST_DISTANCE - 1019)) | (1 << (MariaDBParser.ST_ENDPOINT - 1019)) | (1 << (MariaDBParser.ST_ENVELOPE - 1019)) | (1 << (MariaDBParser.ST_EQUALS - 1019)) | (1 << (MariaDBParser.ST_EXTERIORRING - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYN - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYTYPE - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMWKB - 1019)) | (1 << (MariaDBParser.ST_INTERIORRINGN - 1019)))) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & ((1 << (MariaDBParser.ST_INTERSECTION - 1051)) | (1 << (MariaDBParser.ST_INTERSECTS - 1051)) | (1 << (MariaDBParser.ST_ISCLOSED - 1051)) | (1 << (MariaDBParser.ST_ISEMPTY - 1051)) | (1 << (MariaDBParser.ST_ISSIMPLE - 1051)) | (1 << (MariaDBParser.ST_LINEFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINEFROMWKB - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMWKB - 1051)) | (1 << (MariaDBParser.ST_NUMGEOMETRIES - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRING - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRINGS - 1051)) | (1 << (MariaDBParser.ST_NUMPOINTS - 1051)) | (1 << (MariaDBParser.ST_OVERLAPS - 1051)) | (1 << (MariaDBParser.ST_POINTFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POINTFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POINTN - 1051)) | (1 << (MariaDBParser.ST_POLYFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMWKB - 1051)) | (1 << (MariaDBParser.ST_SRID - 1051)) | (1 << (MariaDBParser.ST_STARTPOINT - 1051)) | (1 << (MariaDBParser.ST_SYMDIFFERENCE - 1051)) | (1 << (MariaDBParser.ST_TOUCHES - 1051)) | (1 << (MariaDBParser.ST_UNION - 1051)) | (1 << (MariaDBParser.ST_WITHIN - 1051)) | (1 << (MariaDBParser.ST_X - 1051)) | (1 << (MariaDBParser.ST_Y - 1051)) | (1 << (MariaDBParser.SUBDATE - 1051)) | (1 << (MariaDBParser.SUBSTRING_INDEX - 1051)) | (1 << (MariaDBParser.SUBTIME - 1051)))) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & ((1 << (MariaDBParser.SYSTEM_USER - 1083)) | (1 << (MariaDBParser.TAN - 1083)) | (1 << (MariaDBParser.TIMEDIFF - 1083)) | (1 << (MariaDBParser.TIMESTAMPADD - 1083)) | (1 << (MariaDBParser.TIMESTAMPDIFF - 1083)) | (1 << (MariaDBParser.TIME_FORMAT - 1083)) | (1 << (MariaDBParser.TIME_TO_SEC - 1083)) | (1 << (MariaDBParser.TOUCHES - 1083)) | (1 << (MariaDBParser.TO_BASE64 - 1083)) | (1 << (MariaDBParser.TO_DAYS - 1083)) | (1 << (MariaDBParser.TO_SECONDS - 1083)) | (1 << (MariaDBParser.UCASE - 1083)) | (1 << (MariaDBParser.UNCOMPRESS - 1083)) | (1 << (MariaDBParser.UNCOMPRESSED_LENGTH - 1083)) | (1 << (MariaDBParser.UNHEX - 1083)) | (1 << (MariaDBParser.UNIX_TIMESTAMP - 1083)) | (1 << (MariaDBParser.UPDATEXML - 1083)) | (1 << (MariaDBParser.UPPER - 1083)) | (1 << (MariaDBParser.UUID - 1083)) | (1 << (MariaDBParser.UUID_SHORT - 1083)) | (1 << (MariaDBParser.VALIDATE_PASSWORD_STRENGTH - 1083)) | (1 << (MariaDBParser.VERSION - 1083)) | (1 << (MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1083)) | (1 << (MariaDBParser.WEEKDAY - 1083)) | (1 << (MariaDBParser.WEEKOFYEAR - 1083)) | (1 << (MariaDBParser.WEIGHT_STRING - 1083)) | (1 << (MariaDBParser.WITHIN - 1083)) | (1 << (MariaDBParser.YEARWEEK - 1083)) | (1 << (MariaDBParser.Y_FUNCTION - 1083)) | (1 << (MariaDBParser.X_FUNCTION - 1083)) | (1 << (MariaDBParser.VIA - 1083)) | (1 << (MariaDBParser.LASTVAL - 1083)))) !== 0) || ((((_la - 1115)) & ~0x1F) === 0 && ((1 << (_la - 1115)) & ((1 << (MariaDBParser.NEXTVAL - 1115)) | (1 << (MariaDBParser.SETVAL - 1115)) | (1 << (MariaDBParser.PREVIOUS - 1115)) | (1 << (MariaDBParser.PERSISTENT - 1115)) | (1 << (MariaDBParser.BINLOG_MONITOR - 1115)) | (1 << (MariaDBParser.BINLOG_REPLAY - 1115)) | (1 << (MariaDBParser.FEDERATED_ADMIN - 1115)) | (1 << (MariaDBParser.READ_ONLY_ADMIN - 1115)) | (1 << (MariaDBParser.REPLICA - 1115)) | (1 << (MariaDBParser.REPLICAS - 1115)) | (1 << (MariaDBParser.REPLICATION_MASTER_ADMIN - 1115)) | (1 << (MariaDBParser.MONITOR - 1115)) | (1 << (MariaDBParser.READ_ONLY - 1115)) | (1 << (MariaDBParser.REPLAY - 1115)) | (1 << (MariaDBParser.MOD - 1115)))) !== 0) || ((((_la - 1166)) & ~0x1F) === 0 && ((1 << (_la - 1166)) & ((1 << (MariaDBParser.CHARSET_REVERSE_QOUTE_STRING - 1166)) | (1 << (MariaDBParser.STRING_LITERAL - 1166)) | (1 << (MariaDBParser.ID - 1166)))) !== 0)) {
				{
				this.state = 1074;
				this.procedureParameter();
				}
			}

			this.state = 1081;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.COMMA) {
				{
				{
				this.state = 1077;
				this.match(MariaDBParser.COMMA);
				this.state = 1078;
				this.procedureParameter();
				}
				}
				this.state = 1083;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1084;
			this.match(MariaDBParser.RR_BRACKET);
			this.state = 1088;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 55, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1085;
					this.routineOption();
					}
					}
				}
				this.state = 1090;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 55, this._ctx);
			}
			this.state = 1091;
			this.routineBody();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createFunction(): CreateFunctionContext {
		let _localctx: CreateFunctionContext = new CreateFunctionContext(this._ctx, this.state);
		this.enterRule(_localctx, 36, MariaDBParser.RULE_createFunction);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1093;
			this.match(MariaDBParser.CREATE);
			this.state = 1095;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.OR) {
				{
				this.state = 1094;
				this.orReplace();
				}
			}

			this.state = 1098;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.DEFINER) {
				{
				this.state = 1097;
				this.ownerStatement();
				}
			}

			this.state = 1101;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.AGGREGATE) {
				{
				this.state = 1100;
				this.match(MariaDBParser.AGGREGATE);
				}
			}

			this.state = 1103;
			this.match(MariaDBParser.FUNCTION);
			this.state = 1105;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 59, this._ctx) ) {
			case 1:
				{
				this.state = 1104;
				this.ifNotExists();
				}
				break;
			}
			this.state = 1107;
			this.fullId();
			this.state = 1108;
			this.match(MariaDBParser.LR_BRACKET);
			this.state = 1110;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MariaDBParser.ATTRIBUTE) | (1 << MariaDBParser.BODY) | (1 << MariaDBParser.BUCKETS) | (1 << MariaDBParser.CONDITION))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (MariaDBParser.CURRENT - 36)) | (1 << (MariaDBParser.CURRENT_ROLE - 36)) | (1 << (MariaDBParser.CURRENT_USER - 36)) | (1 << (MariaDBParser.DATABASE - 36)) | (1 << (MariaDBParser.DEFAULT - 36)) | (1 << (MariaDBParser.DIAGNOSTICS - 36)) | (1 << (MariaDBParser.EMPTY - 36)) | (1 << (MariaDBParser.EXCEPT - 36)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (MariaDBParser.GROUP - 73)) | (1 << (MariaDBParser.IF - 73)) | (1 << (MariaDBParser.IGNORED - 73)) | (1 << (MariaDBParser.INSERT - 73)) | (1 << (MariaDBParser.LATERAL - 73)) | (1 << (MariaDBParser.LEFT - 73)) | (1 << (MariaDBParser.LOCKED - 73)))) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & ((1 << (MariaDBParser.MAXVALUE - 110)) | (1 << (MariaDBParser.MINVALUE - 110)) | (1 << (MariaDBParser.NUMBER - 110)) | (1 << (MariaDBParser.OPTIONAL - 110)) | (1 << (MariaDBParser.ORDER - 110)) | (1 << (MariaDBParser.PRIMARY - 110)) | (1 << (MariaDBParser.PACKAGE - 110)))) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (MariaDBParser.REPLACE - 142)) | (1 << (MariaDBParser.RIGHT - 142)) | (1 << (MariaDBParser.SCHEMA - 142)) | (1 << (MariaDBParser.SKIP_ - 142)) | (1 << (MariaDBParser.STACKED - 142)) | (1 << (MariaDBParser.STATEMENT - 142)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MariaDBParser.DATE - 217)) | (1 << (MariaDBParser.TIME - 217)) | (1 << (MariaDBParser.TIMESTAMP - 217)) | (1 << (MariaDBParser.DATETIME - 217)) | (1 << (MariaDBParser.YEAR - 217)) | (1 << (MariaDBParser.BINARY - 217)) | (1 << (MariaDBParser.TEXT - 217)) | (1 << (MariaDBParser.ENUM - 217)) | (1 << (MariaDBParser.SERIAL - 217)))) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & ((1 << (MariaDBParser.JSON_ARRAY - 251)) | (1 << (MariaDBParser.JSON_ARRAYAGG - 251)) | (1 << (MariaDBParser.JSON_ARRAY_APPEND - 251)) | (1 << (MariaDBParser.JSON_ARRAY_INSERT - 251)) | (1 << (MariaDBParser.JSON_CONTAINS - 251)) | (1 << (MariaDBParser.JSON_CONTAINS_PATH - 251)) | (1 << (MariaDBParser.JSON_DEPTH - 251)) | (1 << (MariaDBParser.JSON_EXTRACT - 251)) | (1 << (MariaDBParser.JSON_INSERT - 251)) | (1 << (MariaDBParser.JSON_KEYS - 251)) | (1 << (MariaDBParser.JSON_LENGTH - 251)) | (1 << (MariaDBParser.JSON_MERGE - 251)) | (1 << (MariaDBParser.JSON_MERGE_PATCH - 251)) | (1 << (MariaDBParser.JSON_MERGE_PRESERVE - 251)) | (1 << (MariaDBParser.JSON_OBJECT - 251)) | (1 << (MariaDBParser.JSON_OBJECTAGG - 251)) | (1 << (MariaDBParser.JSON_OVERLAPS - 251)) | (1 << (MariaDBParser.JSON_PRETTY - 251)) | (1 << (MariaDBParser.JSON_QUOTE - 251)) | (1 << (MariaDBParser.JSON_REMOVE - 251)) | (1 << (MariaDBParser.JSON_REPLACE - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALID - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT - 251)) | (1 << (MariaDBParser.JSON_SEARCH - 251)) | (1 << (MariaDBParser.JSON_SET - 251)) | (1 << (MariaDBParser.JSON_STORAGE_FREE - 251)) | (1 << (MariaDBParser.JSON_STORAGE_SIZE - 251)) | (1 << (MariaDBParser.JSON_TABLE - 251)) | (1 << (MariaDBParser.JSON_TYPE - 251)) | (1 << (MariaDBParser.JSON_UNQUOTE - 251)) | (1 << (MariaDBParser.JSON_VALID - 251)) | (1 << (MariaDBParser.JSON_VALUE - 251)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (MariaDBParser.NESTED - 283)) | (1 << (MariaDBParser.ORDINALITY - 283)) | (1 << (MariaDBParser.PATH - 283)) | (1 << (MariaDBParser.AVG - 283)) | (1 << (MariaDBParser.BIT_AND - 283)) | (1 << (MariaDBParser.BIT_OR - 283)) | (1 << (MariaDBParser.BIT_XOR - 283)) | (1 << (MariaDBParser.COUNT - 283)) | (1 << (MariaDBParser.CUME_DIST - 283)) | (1 << (MariaDBParser.DENSE_RANK - 283)) | (1 << (MariaDBParser.FIRST_VALUE - 283)) | (1 << (MariaDBParser.GROUP_CONCAT - 283)) | (1 << (MariaDBParser.LAG - 283)) | (1 << (MariaDBParser.LAST_VALUE - 283)) | (1 << (MariaDBParser.LEAD - 283)) | (1 << (MariaDBParser.MAX - 283)) | (1 << (MariaDBParser.MIN - 283)) | (1 << (MariaDBParser.NTILE - 283)) | (1 << (MariaDBParser.NTH_VALUE - 283)) | (1 << (MariaDBParser.PERCENT_RANK - 283)) | (1 << (MariaDBParser.RANK - 283)) | (1 << (MariaDBParser.ROW_NUMBER - 283)) | (1 << (MariaDBParser.STD - 283)) | (1 << (MariaDBParser.STDDEV - 283)) | (1 << (MariaDBParser.STDDEV_POP - 283)) | (1 << (MariaDBParser.STDDEV_SAMP - 283)) | (1 << (MariaDBParser.SUM - 283)) | (1 << (MariaDBParser.VAR_POP - 283)) | (1 << (MariaDBParser.VAR_SAMP - 283)) | (1 << (MariaDBParser.VARIANCE - 283)) | (1 << (MariaDBParser.CURRENT_DATE - 283)) | (1 << (MariaDBParser.CURRENT_TIME - 283)))) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & ((1 << (MariaDBParser.CURRENT_TIMESTAMP - 315)) | (1 << (MariaDBParser.LOCALTIME - 315)) | (1 << (MariaDBParser.CURDATE - 315)) | (1 << (MariaDBParser.CURTIME - 315)) | (1 << (MariaDBParser.DATE_ADD - 315)) | (1 << (MariaDBParser.DATE_SUB - 315)) | (1 << (MariaDBParser.LOCALTIMESTAMP - 315)) | (1 << (MariaDBParser.NOW - 315)) | (1 << (MariaDBParser.POSITION - 315)) | (1 << (MariaDBParser.SUBSTR - 315)) | (1 << (MariaDBParser.SUBSTRING - 315)) | (1 << (MariaDBParser.SYSDATE - 315)) | (1 << (MariaDBParser.TRIM - 315)) | (1 << (MariaDBParser.UTC_DATE - 315)) | (1 << (MariaDBParser.UTC_TIME - 315)) | (1 << (MariaDBParser.UTC_TIMESTAMP - 315)) | (1 << (MariaDBParser.ACCOUNT - 315)) | (1 << (MariaDBParser.ACTION - 315)) | (1 << (MariaDBParser.AFTER - 315)) | (1 << (MariaDBParser.AGGREGATE - 315)) | (1 << (MariaDBParser.ALGORITHM - 315)) | (1 << (MariaDBParser.ANY - 315)) | (1 << (MariaDBParser.AT - 315)) | (1 << (MariaDBParser.AUTHORS - 315)) | (1 << (MariaDBParser.AUTOCOMMIT - 315)) | (1 << (MariaDBParser.AUTOEXTEND_SIZE - 315)) | (1 << (MariaDBParser.AUTO_INCREMENT - 315)) | (1 << (MariaDBParser.AVG_ROW_LENGTH - 315)) | (1 << (MariaDBParser.BEGIN - 315)) | (1 << (MariaDBParser.BINLOG - 315)) | (1 << (MariaDBParser.BIT - 315)))) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & ((1 << (MariaDBParser.BLOCK - 347)) | (1 << (MariaDBParser.BOOL - 347)) | (1 << (MariaDBParser.BOOLEAN - 347)) | (1 << (MariaDBParser.BTREE - 347)) | (1 << (MariaDBParser.CACHE - 347)) | (1 << (MariaDBParser.CASCADED - 347)) | (1 << (MariaDBParser.CHAIN - 347)) | (1 << (MariaDBParser.CHANGED - 347)) | (1 << (MariaDBParser.CHANNEL - 347)) | (1 << (MariaDBParser.CHECKSUM - 347)) | (1 << (MariaDBParser.PAGE_CHECKSUM - 347)) | (1 << (MariaDBParser.CIPHER - 347)) | (1 << (MariaDBParser.CLASS_ORIGIN - 347)) | (1 << (MariaDBParser.CLIENT - 347)) | (1 << (MariaDBParser.CLOSE - 347)) | (1 << (MariaDBParser.CLUSTERING - 347)) | (1 << (MariaDBParser.COALESCE - 347)) | (1 << (MariaDBParser.CODE - 347)) | (1 << (MariaDBParser.COLUMNS - 347)) | (1 << (MariaDBParser.COLUMN_FORMAT - 347)) | (1 << (MariaDBParser.COLUMN_NAME - 347)) | (1 << (MariaDBParser.COMMENT - 347)) | (1 << (MariaDBParser.COMMIT - 347)) | (1 << (MariaDBParser.COMPACT - 347)) | (1 << (MariaDBParser.COMPLETION - 347)) | (1 << (MariaDBParser.COMPRESSED - 347)) | (1 << (MariaDBParser.COMPRESSION - 347)) | (1 << (MariaDBParser.CONCURRENT - 347)) | (1 << (MariaDBParser.CONNECT - 347)) | (1 << (MariaDBParser.CONNECTION - 347)) | (1 << (MariaDBParser.CONSISTENT - 347)) | (1 << (MariaDBParser.CONSTRAINT_CATALOG - 347)))) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & ((1 << (MariaDBParser.CONSTRAINT_SCHEMA - 379)) | (1 << (MariaDBParser.CONSTRAINT_NAME - 379)) | (1 << (MariaDBParser.CONTAINS - 379)) | (1 << (MariaDBParser.CONTEXT - 379)) | (1 << (MariaDBParser.CONTRIBUTORS - 379)) | (1 << (MariaDBParser.COPY - 379)) | (1 << (MariaDBParser.CPU - 379)) | (1 << (MariaDBParser.CYCLE - 379)) | (1 << (MariaDBParser.CURSOR_NAME - 379)) | (1 << (MariaDBParser.DATA - 379)) | (1 << (MariaDBParser.DATAFILE - 379)) | (1 << (MariaDBParser.DEALLOCATE - 379)) | (1 << (MariaDBParser.DEFAULT_AUTH - 379)) | (1 << (MariaDBParser.DEFINER - 379)) | (1 << (MariaDBParser.DELAY_KEY_WRITE - 379)) | (1 << (MariaDBParser.DES_KEY_FILE - 379)) | (1 << (MariaDBParser.DIRECTORY - 379)) | (1 << (MariaDBParser.DISABLE - 379)) | (1 << (MariaDBParser.DISCARD - 379)) | (1 << (MariaDBParser.DISK - 379)) | (1 << (MariaDBParser.DO - 379)) | (1 << (MariaDBParser.DUMPFILE - 379)) | (1 << (MariaDBParser.DUPLICATE - 379)) | (1 << (MariaDBParser.DYNAMIC - 379)) | (1 << (MariaDBParser.ENABLE - 379)) | (1 << (MariaDBParser.ENCRYPTED - 379)) | (1 << (MariaDBParser.ENCRYPTION - 379)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ID - 379)) | (1 << (MariaDBParser.END - 379)) | (1 << (MariaDBParser.ENDS - 379)) | (1 << (MariaDBParser.ENGINE - 379)) | (1 << (MariaDBParser.ENGINES - 379)))) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & ((1 << (MariaDBParser.ERROR - 411)) | (1 << (MariaDBParser.ERRORS - 411)) | (1 << (MariaDBParser.ESCAPE - 411)) | (1 << (MariaDBParser.EVEN - 411)) | (1 << (MariaDBParser.EVENT - 411)) | (1 << (MariaDBParser.EVENTS - 411)) | (1 << (MariaDBParser.EVERY - 411)) | (1 << (MariaDBParser.EXCHANGE - 411)) | (1 << (MariaDBParser.EXCLUSIVE - 411)) | (1 << (MariaDBParser.EXPIRE - 411)) | (1 << (MariaDBParser.EXPORT - 411)) | (1 << (MariaDBParser.EXTENDED - 411)) | (1 << (MariaDBParser.EXTENT_SIZE - 411)) | (1 << (MariaDBParser.FAILED_LOGIN_ATTEMPTS - 411)) | (1 << (MariaDBParser.FAST - 411)) | (1 << (MariaDBParser.FAULTS - 411)) | (1 << (MariaDBParser.FIELDS - 411)) | (1 << (MariaDBParser.FILE_BLOCK_SIZE - 411)) | (1 << (MariaDBParser.FILTER - 411)) | (1 << (MariaDBParser.FIRST - 411)) | (1 << (MariaDBParser.FIXED - 411)) | (1 << (MariaDBParser.FLUSH - 411)) | (1 << (MariaDBParser.FOLLOWS - 411)) | (1 << (MariaDBParser.FOUND - 411)) | (1 << (MariaDBParser.FULL - 411)) | (1 << (MariaDBParser.FUNCTION - 411)) | (1 << (MariaDBParser.GENERAL - 411)) | (1 << (MariaDBParser.GLOBAL - 411)) | (1 << (MariaDBParser.GRANTS - 411)) | (1 << (MariaDBParser.GROUP_REPLICATION - 411)) | (1 << (MariaDBParser.HANDLER - 411)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (MariaDBParser.HASH - 443)) | (1 << (MariaDBParser.HELP - 443)) | (1 << (MariaDBParser.HISTORY - 443)) | (1 << (MariaDBParser.HOST - 443)) | (1 << (MariaDBParser.HOSTS - 443)) | (1 << (MariaDBParser.IDENTIFIED - 443)) | (1 << (MariaDBParser.IGNORE_SERVER_IDS - 443)) | (1 << (MariaDBParser.IMPORT - 443)) | (1 << (MariaDBParser.INCREMENT - 443)) | (1 << (MariaDBParser.INDEXES - 443)) | (1 << (MariaDBParser.INITIAL_SIZE - 443)) | (1 << (MariaDBParser.INPLACE - 443)) | (1 << (MariaDBParser.INSERT_METHOD - 443)) | (1 << (MariaDBParser.INSTALL - 443)) | (1 << (MariaDBParser.INSTANCE - 443)) | (1 << (MariaDBParser.INSTANT - 443)) | (1 << (MariaDBParser.INVISIBLE - 443)) | (1 << (MariaDBParser.INVOKER - 443)) | (1 << (MariaDBParser.IO - 443)) | (1 << (MariaDBParser.IO_THREAD - 443)) | (1 << (MariaDBParser.IPC - 443)) | (1 << (MariaDBParser.ISOLATION - 443)) | (1 << (MariaDBParser.ISSUER - 443)) | (1 << (MariaDBParser.JSON - 443)) | (1 << (MariaDBParser.KEY_BLOCK_SIZE - 443)) | (1 << (MariaDBParser.LANGUAGE - 443)) | (1 << (MariaDBParser.LAST - 443)) | (1 << (MariaDBParser.LEAVES - 443)) | (1 << (MariaDBParser.LESS - 443)) | (1 << (MariaDBParser.LEVEL - 443)) | (1 << (MariaDBParser.LIST - 443)) | (1 << (MariaDBParser.LOCAL - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (MariaDBParser.LOCALES - 475)) | (1 << (MariaDBParser.LOGFILE - 475)) | (1 << (MariaDBParser.LOGS - 475)) | (1 << (MariaDBParser.MASTER - 475)) | (1 << (MariaDBParser.MASTER_AUTO_POSITION - 475)) | (1 << (MariaDBParser.MASTER_CONNECT_RETRY - 475)) | (1 << (MariaDBParser.MASTER_DELAY - 475)) | (1 << (MariaDBParser.MASTER_HEARTBEAT_PERIOD - 475)) | (1 << (MariaDBParser.MASTER_HOST - 475)) | (1 << (MariaDBParser.MASTER_LOG_FILE - 475)) | (1 << (MariaDBParser.MASTER_LOG_POS - 475)) | (1 << (MariaDBParser.MASTER_PASSWORD - 475)) | (1 << (MariaDBParser.MASTER_PORT - 475)) | (1 << (MariaDBParser.MASTER_RETRY_COUNT - 475)) | (1 << (MariaDBParser.MASTER_SSL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CA - 475)) | (1 << (MariaDBParser.MASTER_SSL_CAPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_CERT - 475)) | (1 << (MariaDBParser.MASTER_SSL_CIPHER - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRLPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_KEY - 475)) | (1 << (MariaDBParser.MASTER_TLS_VERSION - 475)) | (1 << (MariaDBParser.MASTER_USER - 475)) | (1 << (MariaDBParser.MAX_CONNECTIONS_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_QUERIES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_ROWS - 475)) | (1 << (MariaDBParser.MAX_SIZE - 475)) | (1 << (MariaDBParser.MAX_UPDATES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_USER_CONNECTIONS - 475)) | (1 << (MariaDBParser.MEDIUM - 475)) | (1 << (MariaDBParser.MEMBER - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (MariaDBParser.MERGE - 507)) | (1 << (MariaDBParser.MESSAGE_TEXT - 507)) | (1 << (MariaDBParser.MID - 507)) | (1 << (MariaDBParser.MIGRATE - 507)) | (1 << (MariaDBParser.MIN_ROWS - 507)) | (1 << (MariaDBParser.MODE - 507)) | (1 << (MariaDBParser.MODIFY - 507)) | (1 << (MariaDBParser.MUTEX - 507)) | (1 << (MariaDBParser.MYSQL - 507)) | (1 << (MariaDBParser.MYSQL_ERRNO - 507)) | (1 << (MariaDBParser.NAME - 507)) | (1 << (MariaDBParser.NAMES - 507)) | (1 << (MariaDBParser.NCHAR - 507)) | (1 << (MariaDBParser.NEVER - 507)) | (1 << (MariaDBParser.NEXT - 507)) | (1 << (MariaDBParser.NO - 507)) | (1 << (MariaDBParser.NOCACHE - 507)) | (1 << (MariaDBParser.NOCOPY - 507)) | (1 << (MariaDBParser.NOCYCLE - 507)) | (1 << (MariaDBParser.NOMAXVALUE - 507)) | (1 << (MariaDBParser.NOMINVALUE - 507)) | (1 << (MariaDBParser.NOWAIT - 507)) | (1 << (MariaDBParser.NODEGROUP - 507)) | (1 << (MariaDBParser.NONE - 507)) | (1 << (MariaDBParser.ODBC - 507)) | (1 << (MariaDBParser.OFFLINE - 507)) | (1 << (MariaDBParser.OFFSET - 507)) | (1 << (MariaDBParser.OF - 507)) | (1 << (MariaDBParser.OJ - 507)) | (1 << (MariaDBParser.OLD_PASSWORD - 507)) | (1 << (MariaDBParser.ONE - 507)) | (1 << (MariaDBParser.ONLINE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (MariaDBParser.ONLY - 539)) | (1 << (MariaDBParser.OPEN - 539)) | (1 << (MariaDBParser.OPTIMIZER_COSTS - 539)) | (1 << (MariaDBParser.OPTIONS - 539)) | (1 << (MariaDBParser.OWNER - 539)) | (1 << (MariaDBParser.PACK_KEYS - 539)) | (1 << (MariaDBParser.PAGE - 539)) | (1 << (MariaDBParser.PARSER - 539)) | (1 << (MariaDBParser.PARTIAL - 539)) | (1 << (MariaDBParser.PARTITIONING - 539)) | (1 << (MariaDBParser.PARTITIONS - 539)) | (1 << (MariaDBParser.PASSWORD - 539)) | (1 << (MariaDBParser.PASSWORD_LOCK_TIME - 539)) | (1 << (MariaDBParser.PHASE - 539)) | (1 << (MariaDBParser.PLUGIN - 539)) | (1 << (MariaDBParser.PLUGIN_DIR - 539)) | (1 << (MariaDBParser.PLUGINS - 539)) | (1 << (MariaDBParser.PORT - 539)) | (1 << (MariaDBParser.PRECEDES - 539)) | (1 << (MariaDBParser.PREPARE - 539)) | (1 << (MariaDBParser.PRESERVE - 539)) | (1 << (MariaDBParser.PREV - 539)) | (1 << (MariaDBParser.PROCESSLIST - 539)) | (1 << (MariaDBParser.PROFILE - 539)) | (1 << (MariaDBParser.PROFILES - 539)) | (1 << (MariaDBParser.PROXY - 539)) | (1 << (MariaDBParser.QUERY - 539)) | (1 << (MariaDBParser.QUERY_RESPONSE_TIME - 539)) | (1 << (MariaDBParser.QUICK - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (MariaDBParser.REBUILD - 571)) | (1 << (MariaDBParser.RECOVER - 571)) | (1 << (MariaDBParser.RECURSIVE - 571)) | (1 << (MariaDBParser.REDO_BUFFER_SIZE - 571)) | (1 << (MariaDBParser.REDUNDANT - 571)) | (1 << (MariaDBParser.RELAY - 571)) | (1 << (MariaDBParser.RELAY_LOG_FILE - 571)) | (1 << (MariaDBParser.RELAY_LOG_POS - 571)) | (1 << (MariaDBParser.RELAYLOG - 571)) | (1 << (MariaDBParser.REMOVE - 571)) | (1 << (MariaDBParser.REORGANIZE - 571)) | (1 << (MariaDBParser.REPAIR - 571)) | (1 << (MariaDBParser.REPLICATE_DO_DB - 571)) | (1 << (MariaDBParser.REPLICATE_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_REWRITE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATION - 571)) | (1 << (MariaDBParser.RESET - 571)) | (1 << (MariaDBParser.RESTART - 571)) | (1 << (MariaDBParser.RESUME - 571)) | (1 << (MariaDBParser.RETURNED_SQLSTATE - 571)) | (1 << (MariaDBParser.RETURNS - 571)) | (1 << (MariaDBParser.REUSE - 571)) | (1 << (MariaDBParser.ROLE - 571)) | (1 << (MariaDBParser.ROLLBACK - 571)) | (1 << (MariaDBParser.ROLLUP - 571)) | (1 << (MariaDBParser.ROTATE - 571)) | (1 << (MariaDBParser.ROW - 571)))) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & ((1 << (MariaDBParser.ROWS - 603)) | (1 << (MariaDBParser.ROW_FORMAT - 603)) | (1 << (MariaDBParser.RTREE - 603)) | (1 << (MariaDBParser.SAVEPOINT - 603)) | (1 << (MariaDBParser.SCHEDULE - 603)) | (1 << (MariaDBParser.SECURITY - 603)) | (1 << (MariaDBParser.SEQUENCE - 603)) | (1 << (MariaDBParser.SERVER - 603)) | (1 << (MariaDBParser.SESSION - 603)) | (1 << (MariaDBParser.SHARE - 603)) | (1 << (MariaDBParser.SHARED - 603)) | (1 << (MariaDBParser.SIGNED - 603)) | (1 << (MariaDBParser.SIMPLE - 603)) | (1 << (MariaDBParser.SLAVE - 603)) | (1 << (MariaDBParser.SLAVES - 603)) | (1 << (MariaDBParser.SLOW - 603)) | (1 << (MariaDBParser.SNAPSHOT - 603)) | (1 << (MariaDBParser.SOCKET - 603)) | (1 << (MariaDBParser.SOME - 603)) | (1 << (MariaDBParser.SONAME - 603)) | (1 << (MariaDBParser.SOUNDS - 603)) | (1 << (MariaDBParser.SOURCE - 603)) | (1 << (MariaDBParser.SQL_AFTER_GTIDS - 603)) | (1 << (MariaDBParser.SQL_AFTER_MTS_GAPS - 603)) | (1 << (MariaDBParser.SQL_BEFORE_GTIDS - 603)) | (1 << (MariaDBParser.SQL_BUFFER_RESULT - 603)) | (1 << (MariaDBParser.SQL_CACHE - 603)) | (1 << (MariaDBParser.SQL_NO_CACHE - 603)) | (1 << (MariaDBParser.SQL_THREAD - 603)) | (1 << (MariaDBParser.START - 603)) | (1 << (MariaDBParser.STARTS - 603)) | (1 << (MariaDBParser.STATS_AUTO_RECALC - 603)))) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & ((1 << (MariaDBParser.STATS_PERSISTENT - 635)) | (1 << (MariaDBParser.STATS_SAMPLE_PAGES - 635)) | (1 << (MariaDBParser.STATUS - 635)) | (1 << (MariaDBParser.STOP - 635)) | (1 << (MariaDBParser.STORAGE - 635)) | (1 << (MariaDBParser.STRING - 635)) | (1 << (MariaDBParser.SUBCLASS_ORIGIN - 635)) | (1 << (MariaDBParser.SUBJECT - 635)) | (1 << (MariaDBParser.SUBPARTITION - 635)) | (1 << (MariaDBParser.SUBPARTITIONS - 635)) | (1 << (MariaDBParser.SUSPEND - 635)) | (1 << (MariaDBParser.SWAPS - 635)) | (1 << (MariaDBParser.SWITCHES - 635)) | (1 << (MariaDBParser.TABLE_NAME - 635)) | (1 << (MariaDBParser.TABLESPACE - 635)) | (1 << (MariaDBParser.TABLE_TYPE - 635)) | (1 << (MariaDBParser.TEMPORARY - 635)) | (1 << (MariaDBParser.TEMPTABLE - 635)) | (1 << (MariaDBParser.THAN - 635)) | (1 << (MariaDBParser.TRADITIONAL - 635)) | (1 << (MariaDBParser.TRANSACTION - 635)) | (1 << (MariaDBParser.TRANSACTIONAL - 635)) | (1 << (MariaDBParser.TRIGGERS - 635)) | (1 << (MariaDBParser.TRUNCATE - 635)) | (1 << (MariaDBParser.TYPES - 635)) | (1 << (MariaDBParser.UNBOUNDED - 635)) | (1 << (MariaDBParser.UNDEFINED - 635)) | (1 << (MariaDBParser.UNDOFILE - 635)) | (1 << (MariaDBParser.UNDO_BUFFER_SIZE - 635)) | (1 << (MariaDBParser.UNINSTALL - 635)) | (1 << (MariaDBParser.UNKNOWN - 635)))) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & ((1 << (MariaDBParser.UNTIL - 667)) | (1 << (MariaDBParser.UPGRADE - 667)) | (1 << (MariaDBParser.USER - 667)) | (1 << (MariaDBParser.USE_FRM - 667)) | (1 << (MariaDBParser.USER_RESOURCES - 667)) | (1 << (MariaDBParser.VALIDATION - 667)) | (1 << (MariaDBParser.VALUE - 667)) | (1 << (MariaDBParser.VARIABLES - 667)) | (1 << (MariaDBParser.VIEW - 667)) | (1 << (MariaDBParser.VIRTUAL - 667)) | (1 << (MariaDBParser.VISIBLE - 667)) | (1 << (MariaDBParser.WAIT - 667)) | (1 << (MariaDBParser.WARNINGS - 667)) | (1 << (MariaDBParser.WITHOUT - 667)) | (1 << (MariaDBParser.WORK - 667)) | (1 << (MariaDBParser.WRAPPER - 667)) | (1 << (MariaDBParser.WSREP_MEMBERSHIP - 667)) | (1 << (MariaDBParser.WSREP_STATUS - 667)) | (1 << (MariaDBParser.X509 - 667)) | (1 << (MariaDBParser.XA - 667)) | (1 << (MariaDBParser.XML - 667)) | (1 << (MariaDBParser.EUR - 667)) | (1 << (MariaDBParser.USA - 667)) | (1 << (MariaDBParser.JIS - 667)) | (1 << (MariaDBParser.ISO - 667)) | (1 << (MariaDBParser.INTERNAL - 667)) | (1 << (MariaDBParser.QUARTER - 667)) | (1 << (MariaDBParser.MONTH - 667)) | (1 << (MariaDBParser.DAY - 667)) | (1 << (MariaDBParser.HOUR - 667)))) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & ((1 << (MariaDBParser.MINUTE - 699)) | (1 << (MariaDBParser.WEEK - 699)) | (1 << (MariaDBParser.SECOND - 699)) | (1 << (MariaDBParser.MICROSECOND - 699)) | (1 << (MariaDBParser.USER_STATISTICS - 699)) | (1 << (MariaDBParser.CLIENT_STATISTICS - 699)) | (1 << (MariaDBParser.INDEX_STATISTICS - 699)) | (1 << (MariaDBParser.TABLE_STATISTICS - 699)) | (1 << (MariaDBParser.ADMIN - 699)) | (1 << (MariaDBParser.AUDIT_ADMIN - 699)) | (1 << (MariaDBParser.BACKUP_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ENCRYPTION_ADMIN - 699)) | (1 << (MariaDBParser.CLONE_ADMIN - 699)) | (1 << (MariaDBParser.CONNECTION_ADMIN - 699)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ADMIN - 699)) | (1 << (MariaDBParser.EXECUTE - 699)) | (1 << (MariaDBParser.FILE - 699)) | (1 << (MariaDBParser.FIREWALL_ADMIN - 699)) | (1 << (MariaDBParser.FIREWALL_USER - 699)) | (1 << (MariaDBParser.GROUP_REPLICATION_ADMIN - 699)) | (1 << (MariaDBParser.INNODB_REDO_LOG_ARCHIVE - 699)) | (1 << (MariaDBParser.INVOKE - 699)) | (1 << (MariaDBParser.LAMBDA - 699)) | (1 << (MariaDBParser.NDB_STORED_USER - 699)) | (1 << (MariaDBParser.PASSWORDLESS_USER_ADMIN - 699)))) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & ((1 << (MariaDBParser.PERSIST_RO_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.PRIVILEGES - 731)) | (1 << (MariaDBParser.PROCESS - 731)) | (1 << (MariaDBParser.RELOAD - 731)) | (1 << (MariaDBParser.REPLICATION_APPLIER - 731)) | (1 << (MariaDBParser.REPLICATION_SLAVE_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_USER - 731)) | (1 << (MariaDBParser.ROLE_ADMIN - 731)) | (1 << (MariaDBParser.ROUTINE - 731)) | (1 << (MariaDBParser.S3 - 731)) | (1 << (MariaDBParser.SESSION_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.SET_USER_ID - 731)) | (1 << (MariaDBParser.SHOW_ROUTINE - 731)) | (1 << (MariaDBParser.SHUTDOWN - 731)) | (1 << (MariaDBParser.SUPER - 731)) | (1 << (MariaDBParser.SYSTEM_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.TABLES - 731)) | (1 << (MariaDBParser.TABLE_ENCRYPTION_ADMIN - 731)) | (1 << (MariaDBParser.VERSION_TOKEN_ADMIN - 731)) | (1 << (MariaDBParser.XA_RECOVER_ADMIN - 731)) | (1 << (MariaDBParser.ARMSCII8 - 731)) | (1 << (MariaDBParser.ASCII - 731)) | (1 << (MariaDBParser.BIG5 - 731)) | (1 << (MariaDBParser.CP1250 - 731)) | (1 << (MariaDBParser.CP1251 - 731)) | (1 << (MariaDBParser.CP1256 - 731)) | (1 << (MariaDBParser.CP1257 - 731)) | (1 << (MariaDBParser.CP850 - 731)) | (1 << (MariaDBParser.CP852 - 731)) | (1 << (MariaDBParser.CP866 - 731)))) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & ((1 << (MariaDBParser.CP932 - 763)) | (1 << (MariaDBParser.DEC8 - 763)) | (1 << (MariaDBParser.EUCJPMS - 763)) | (1 << (MariaDBParser.EUCKR - 763)) | (1 << (MariaDBParser.GB18030 - 763)) | (1 << (MariaDBParser.GB2312 - 763)) | (1 << (MariaDBParser.GBK - 763)) | (1 << (MariaDBParser.GEOSTD8 - 763)) | (1 << (MariaDBParser.GREEK - 763)) | (1 << (MariaDBParser.HEBREW - 763)) | (1 << (MariaDBParser.HP8 - 763)) | (1 << (MariaDBParser.KEYBCS2 - 763)) | (1 << (MariaDBParser.KOI8R - 763)) | (1 << (MariaDBParser.KOI8U - 763)) | (1 << (MariaDBParser.LATIN1 - 763)) | (1 << (MariaDBParser.LATIN2 - 763)) | (1 << (MariaDBParser.LATIN5 - 763)) | (1 << (MariaDBParser.LATIN7 - 763)) | (1 << (MariaDBParser.MACCE - 763)) | (1 << (MariaDBParser.MACROMAN - 763)) | (1 << (MariaDBParser.SJIS - 763)) | (1 << (MariaDBParser.SWE7 - 763)) | (1 << (MariaDBParser.TIS620 - 763)) | (1 << (MariaDBParser.UCS2 - 763)) | (1 << (MariaDBParser.UJIS - 763)) | (1 << (MariaDBParser.UTF16 - 763)) | (1 << (MariaDBParser.UTF16LE - 763)) | (1 << (MariaDBParser.UTF32 - 763)) | (1 << (MariaDBParser.UTF8 - 763)) | (1 << (MariaDBParser.UTF8MB3 - 763)) | (1 << (MariaDBParser.UTF8MB4 - 763)) | (1 << (MariaDBParser.ARCHIVE - 763)))) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & ((1 << (MariaDBParser.BLACKHOLE - 795)) | (1 << (MariaDBParser.CSV - 795)) | (1 << (MariaDBParser.FEDERATED - 795)) | (1 << (MariaDBParser.INNODB - 795)) | (1 << (MariaDBParser.MEMORY - 795)) | (1 << (MariaDBParser.MRG_MYISAM - 795)) | (1 << (MariaDBParser.MYISAM - 795)) | (1 << (MariaDBParser.NDB - 795)) | (1 << (MariaDBParser.NDBCLUSTER - 795)) | (1 << (MariaDBParser.PERFORMANCE_SCHEMA - 795)) | (1 << (MariaDBParser.TOKUDB - 795)) | (1 << (MariaDBParser.REPEATABLE - 795)) | (1 << (MariaDBParser.COMMITTED - 795)) | (1 << (MariaDBParser.UNCOMMITTED - 795)) | (1 << (MariaDBParser.SERIALIZABLE - 795)) | (1 << (MariaDBParser.GEOMETRYCOLLECTION - 795)) | (1 << (MariaDBParser.LINESTRING - 795)) | (1 << (MariaDBParser.MULTILINESTRING - 795)) | (1 << (MariaDBParser.MULTIPOINT - 795)) | (1 << (MariaDBParser.MULTIPOLYGON - 795)) | (1 << (MariaDBParser.POINT - 795)) | (1 << (MariaDBParser.POLYGON - 795)) | (1 << (MariaDBParser.ABS - 795)) | (1 << (MariaDBParser.ACOS - 795)) | (1 << (MariaDBParser.ADDDATE - 795)) | (1 << (MariaDBParser.ADDTIME - 795)) | (1 << (MariaDBParser.AES_DECRYPT - 795)) | (1 << (MariaDBParser.AES_ENCRYPT - 795)) | (1 << (MariaDBParser.AREA - 795)) | (1 << (MariaDBParser.ASBINARY - 795)))) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & ((1 << (MariaDBParser.ASIN - 827)) | (1 << (MariaDBParser.ASTEXT - 827)) | (1 << (MariaDBParser.ASWKB - 827)) | (1 << (MariaDBParser.ASWKT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DECRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DERIVE - 827)) | (1 << (MariaDBParser.ASYMMETRIC_ENCRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_SIGN - 827)) | (1 << (MariaDBParser.ASYMMETRIC_VERIFY - 827)) | (1 << (MariaDBParser.ATAN - 827)) | (1 << (MariaDBParser.ATAN2 - 827)) | (1 << (MariaDBParser.BENCHMARK - 827)) | (1 << (MariaDBParser.BIN - 827)) | (1 << (MariaDBParser.BIT_COUNT - 827)) | (1 << (MariaDBParser.BIT_LENGTH - 827)) | (1 << (MariaDBParser.BUFFER - 827)) | (1 << (MariaDBParser.CATALOG_NAME - 827)) | (1 << (MariaDBParser.CEIL - 827)) | (1 << (MariaDBParser.CEILING - 827)) | (1 << (MariaDBParser.CENTROID - 827)) | (1 << (MariaDBParser.CHARACTER_LENGTH - 827)) | (1 << (MariaDBParser.CHARSET - 827)) | (1 << (MariaDBParser.CHAR_LENGTH - 827)) | (1 << (MariaDBParser.COERCIBILITY - 827)) | (1 << (MariaDBParser.COLLATION - 827)) | (1 << (MariaDBParser.COMPRESS - 827)) | (1 << (MariaDBParser.CONCAT - 827)) | (1 << (MariaDBParser.CONCAT_WS - 827)) | (1 << (MariaDBParser.CONNECTION_ID - 827)) | (1 << (MariaDBParser.CONV - 827)) | (1 << (MariaDBParser.CONVERT_TZ - 827)) | (1 << (MariaDBParser.COS - 827)))) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & ((1 << (MariaDBParser.COT - 859)) | (1 << (MariaDBParser.CRC32 - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY - 859)) | (1 << (MariaDBParser.CREATE_DH_PARAMETERS - 859)) | (1 << (MariaDBParser.CREATE_DIGEST - 859)) | (1 << (MariaDBParser.CROSSES - 859)) | (1 << (MariaDBParser.DATEDIFF - 859)) | (1 << (MariaDBParser.DATE_FORMAT - 859)) | (1 << (MariaDBParser.DAYNAME - 859)) | (1 << (MariaDBParser.DAYOFMONTH - 859)) | (1 << (MariaDBParser.DAYOFWEEK - 859)) | (1 << (MariaDBParser.DAYOFYEAR - 859)) | (1 << (MariaDBParser.DECODE - 859)) | (1 << (MariaDBParser.DEGREES - 859)) | (1 << (MariaDBParser.DES_DECRYPT - 859)) | (1 << (MariaDBParser.DES_ENCRYPT - 859)) | (1 << (MariaDBParser.DIMENSION - 859)) | (1 << (MariaDBParser.DISJOINT - 859)) | (1 << (MariaDBParser.ELT - 859)) | (1 << (MariaDBParser.ENCODE - 859)) | (1 << (MariaDBParser.ENCRYPT - 859)) | (1 << (MariaDBParser.ENDPOINT - 859)) | (1 << (MariaDBParser.ENGINE_ATTRIBUTE - 859)) | (1 << (MariaDBParser.ENVELOPE - 859)) | (1 << (MariaDBParser.EQUALS - 859)) | (1 << (MariaDBParser.EXP - 859)) | (1 << (MariaDBParser.EXPORT_SET - 859)) | (1 << (MariaDBParser.EXTERIORRING - 859)) | (1 << (MariaDBParser.EXTRACTVALUE - 859)) | (1 << (MariaDBParser.FIELD - 859)) | (1 << (MariaDBParser.FIND_IN_SET - 859)))) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & ((1 << (MariaDBParser.FLOOR - 891)) | (1 << (MariaDBParser.FORMAT - 891)) | (1 << (MariaDBParser.FOUND_ROWS - 891)) | (1 << (MariaDBParser.FROM_BASE64 - 891)) | (1 << (MariaDBParser.FROM_DAYS - 891)) | (1 << (MariaDBParser.FROM_UNIXTIME - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYN - 891)) | (1 << (MariaDBParser.GEOMETRYTYPE - 891)) | (1 << (MariaDBParser.GEOMFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMFROMWKB - 891)) | (1 << (MariaDBParser.GET_FORMAT - 891)) | (1 << (MariaDBParser.GET_LOCK - 891)) | (1 << (MariaDBParser.GLENGTH - 891)) | (1 << (MariaDBParser.GREATEST - 891)) | (1 << (MariaDBParser.GTID_SUBSET - 891)) | (1 << (MariaDBParser.GTID_SUBTRACT - 891)) | (1 << (MariaDBParser.HEX - 891)) | (1 << (MariaDBParser.IFNULL - 891)) | (1 << (MariaDBParser.INET6_ATON - 891)) | (1 << (MariaDBParser.INET6_NTOA - 891)) | (1 << (MariaDBParser.INET_ATON - 891)) | (1 << (MariaDBParser.INET_NTOA - 891)) | (1 << (MariaDBParser.INSTR - 891)) | (1 << (MariaDBParser.INTERIORRINGN - 891)) | (1 << (MariaDBParser.INTERSECTS - 891)) | (1 << (MariaDBParser.ISCLOSED - 891)))) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & ((1 << (MariaDBParser.ISEMPTY - 923)) | (1 << (MariaDBParser.ISNULL - 923)) | (1 << (MariaDBParser.ISSIMPLE - 923)) | (1 << (MariaDBParser.IS_FREE_LOCK - 923)) | (1 << (MariaDBParser.IS_IPV4 - 923)) | (1 << (MariaDBParser.IS_IPV4_COMPAT - 923)) | (1 << (MariaDBParser.IS_IPV4_MAPPED - 923)) | (1 << (MariaDBParser.IS_IPV6 - 923)) | (1 << (MariaDBParser.IS_USED_LOCK - 923)) | (1 << (MariaDBParser.LAST_INSERT_ID - 923)) | (1 << (MariaDBParser.LCASE - 923)) | (1 << (MariaDBParser.LEAST - 923)) | (1 << (MariaDBParser.LENGTH - 923)) | (1 << (MariaDBParser.LINEFROMTEXT - 923)) | (1 << (MariaDBParser.LINEFROMWKB - 923)) | (1 << (MariaDBParser.LINESTRINGFROMTEXT - 923)) | (1 << (MariaDBParser.LINESTRINGFROMWKB - 923)) | (1 << (MariaDBParser.LN - 923)) | (1 << (MariaDBParser.LOAD_FILE - 923)) | (1 << (MariaDBParser.LOCATE - 923)) | (1 << (MariaDBParser.LOG - 923)) | (1 << (MariaDBParser.LOG10 - 923)) | (1 << (MariaDBParser.LOG2 - 923)) | (1 << (MariaDBParser.LOWER - 923)) | (1 << (MariaDBParser.LPAD - 923)) | (1 << (MariaDBParser.LTRIM - 923)) | (1 << (MariaDBParser.MAKEDATE - 923)) | (1 << (MariaDBParser.MAKETIME - 923)) | (1 << (MariaDBParser.MAKE_SET - 923)) | (1 << (MariaDBParser.MASTER_POS_WAIT - 923)) | (1 << (MariaDBParser.MBRCONTAINS - 923)) | (1 << (MariaDBParser.MBRDISJOINT - 923)))) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & ((1 << (MariaDBParser.MBREQUAL - 955)) | (1 << (MariaDBParser.MBRINTERSECTS - 955)) | (1 << (MariaDBParser.MBROVERLAPS - 955)) | (1 << (MariaDBParser.MBRTOUCHES - 955)) | (1 << (MariaDBParser.MBRWITHIN - 955)) | (1 << (MariaDBParser.MD5 - 955)) | (1 << (MariaDBParser.MLINEFROMTEXT - 955)) | (1 << (MariaDBParser.MLINEFROMWKB - 955)) | (1 << (MariaDBParser.MONTHNAME - 955)) | (1 << (MariaDBParser.MPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MPOLYFROMTEXT - 955)) | (1 << (MariaDBParser.MPOLYFROMWKB - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMTEXT - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMWKB - 955)) | (1 << (MariaDBParser.NAME_CONST - 955)) | (1 << (MariaDBParser.NULLIF - 955)) | (1 << (MariaDBParser.NUMGEOMETRIES - 955)) | (1 << (MariaDBParser.NUMINTERIORRINGS - 955)) | (1 << (MariaDBParser.NUMPOINTS - 955)) | (1 << (MariaDBParser.OCT - 955)) | (1 << (MariaDBParser.OCTET_LENGTH - 955)) | (1 << (MariaDBParser.ORD - 955)) | (1 << (MariaDBParser.OVERLAPS - 955)) | (1 << (MariaDBParser.PERIOD_ADD - 955)) | (1 << (MariaDBParser.PERIOD_DIFF - 955)) | (1 << (MariaDBParser.PI - 955)) | (1 << (MariaDBParser.POINTFROMTEXT - 955)))) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & ((1 << (MariaDBParser.POINTFROMWKB - 987)) | (1 << (MariaDBParser.POINTN - 987)) | (1 << (MariaDBParser.POLYFROMTEXT - 987)) | (1 << (MariaDBParser.POLYFROMWKB - 987)) | (1 << (MariaDBParser.POLYGONFROMTEXT - 987)) | (1 << (MariaDBParser.POLYGONFROMWKB - 987)) | (1 << (MariaDBParser.POW - 987)) | (1 << (MariaDBParser.POWER - 987)) | (1 << (MariaDBParser.QUOTE - 987)) | (1 << (MariaDBParser.RADIANS - 987)) | (1 << (MariaDBParser.RAND - 987)) | (1 << (MariaDBParser.RANDOM_BYTES - 987)) | (1 << (MariaDBParser.RELEASE_LOCK - 987)) | (1 << (MariaDBParser.REVERSE - 987)) | (1 << (MariaDBParser.ROUND - 987)) | (1 << (MariaDBParser.ROW_COUNT - 987)) | (1 << (MariaDBParser.RPAD - 987)) | (1 << (MariaDBParser.RTRIM - 987)) | (1 << (MariaDBParser.SEC_TO_TIME - 987)) | (1 << (MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE - 987)) | (1 << (MariaDBParser.SESSION_USER - 987)) | (1 << (MariaDBParser.SHA - 987)) | (1 << (MariaDBParser.SHA1 - 987)) | (1 << (MariaDBParser.SHA2 - 987)) | (1 << (MariaDBParser.SCHEMA_NAME - 987)) | (1 << (MariaDBParser.SIGN - 987)) | (1 << (MariaDBParser.SIN - 987)) | (1 << (MariaDBParser.SLEEP - 987)) | (1 << (MariaDBParser.SOUNDEX - 987)) | (1 << (MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS - 987)) | (1 << (MariaDBParser.SQRT - 987)) | (1 << (MariaDBParser.SRID - 987)))) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & ((1 << (MariaDBParser.STARTPOINT - 1019)) | (1 << (MariaDBParser.STRCMP - 1019)) | (1 << (MariaDBParser.STR_TO_DATE - 1019)) | (1 << (MariaDBParser.ST_AREA - 1019)) | (1 << (MariaDBParser.ST_ASBINARY - 1019)) | (1 << (MariaDBParser.ST_ASTEXT - 1019)) | (1 << (MariaDBParser.ST_ASWKB - 1019)) | (1 << (MariaDBParser.ST_ASWKT - 1019)) | (1 << (MariaDBParser.ST_BUFFER - 1019)) | (1 << (MariaDBParser.ST_CENTROID - 1019)) | (1 << (MariaDBParser.ST_CONTAINS - 1019)) | (1 << (MariaDBParser.ST_CROSSES - 1019)) | (1 << (MariaDBParser.ST_DIFFERENCE - 1019)) | (1 << (MariaDBParser.ST_DIMENSION - 1019)) | (1 << (MariaDBParser.ST_DISJOINT - 1019)) | (1 << (MariaDBParser.ST_DISTANCE - 1019)) | (1 << (MariaDBParser.ST_ENDPOINT - 1019)) | (1 << (MariaDBParser.ST_ENVELOPE - 1019)) | (1 << (MariaDBParser.ST_EQUALS - 1019)) | (1 << (MariaDBParser.ST_EXTERIORRING - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYN - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYTYPE - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMWKB - 1019)) | (1 << (MariaDBParser.ST_INTERIORRINGN - 1019)))) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & ((1 << (MariaDBParser.ST_INTERSECTION - 1051)) | (1 << (MariaDBParser.ST_INTERSECTS - 1051)) | (1 << (MariaDBParser.ST_ISCLOSED - 1051)) | (1 << (MariaDBParser.ST_ISEMPTY - 1051)) | (1 << (MariaDBParser.ST_ISSIMPLE - 1051)) | (1 << (MariaDBParser.ST_LINEFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINEFROMWKB - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMWKB - 1051)) | (1 << (MariaDBParser.ST_NUMGEOMETRIES - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRING - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRINGS - 1051)) | (1 << (MariaDBParser.ST_NUMPOINTS - 1051)) | (1 << (MariaDBParser.ST_OVERLAPS - 1051)) | (1 << (MariaDBParser.ST_POINTFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POINTFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POINTN - 1051)) | (1 << (MariaDBParser.ST_POLYFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMWKB - 1051)) | (1 << (MariaDBParser.ST_SRID - 1051)) | (1 << (MariaDBParser.ST_STARTPOINT - 1051)) | (1 << (MariaDBParser.ST_SYMDIFFERENCE - 1051)) | (1 << (MariaDBParser.ST_TOUCHES - 1051)) | (1 << (MariaDBParser.ST_UNION - 1051)) | (1 << (MariaDBParser.ST_WITHIN - 1051)) | (1 << (MariaDBParser.ST_X - 1051)) | (1 << (MariaDBParser.ST_Y - 1051)) | (1 << (MariaDBParser.SUBDATE - 1051)) | (1 << (MariaDBParser.SUBSTRING_INDEX - 1051)) | (1 << (MariaDBParser.SUBTIME - 1051)))) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & ((1 << (MariaDBParser.SYSTEM_USER - 1083)) | (1 << (MariaDBParser.TAN - 1083)) | (1 << (MariaDBParser.TIMEDIFF - 1083)) | (1 << (MariaDBParser.TIMESTAMPADD - 1083)) | (1 << (MariaDBParser.TIMESTAMPDIFF - 1083)) | (1 << (MariaDBParser.TIME_FORMAT - 1083)) | (1 << (MariaDBParser.TIME_TO_SEC - 1083)) | (1 << (MariaDBParser.TOUCHES - 1083)) | (1 << (MariaDBParser.TO_BASE64 - 1083)) | (1 << (MariaDBParser.TO_DAYS - 1083)) | (1 << (MariaDBParser.TO_SECONDS - 1083)) | (1 << (MariaDBParser.UCASE - 1083)) | (1 << (MariaDBParser.UNCOMPRESS - 1083)) | (1 << (MariaDBParser.UNCOMPRESSED_LENGTH - 1083)) | (1 << (MariaDBParser.UNHEX - 1083)) | (1 << (MariaDBParser.UNIX_TIMESTAMP - 1083)) | (1 << (MariaDBParser.UPDATEXML - 1083)) | (1 << (MariaDBParser.UPPER - 1083)) | (1 << (MariaDBParser.UUID - 1083)) | (1 << (MariaDBParser.UUID_SHORT - 1083)) | (1 << (MariaDBParser.VALIDATE_PASSWORD_STRENGTH - 1083)) | (1 << (MariaDBParser.VERSION - 1083)) | (1 << (MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1083)) | (1 << (MariaDBParser.WEEKDAY - 1083)) | (1 << (MariaDBParser.WEEKOFYEAR - 1083)) | (1 << (MariaDBParser.WEIGHT_STRING - 1083)) | (1 << (MariaDBParser.WITHIN - 1083)) | (1 << (MariaDBParser.YEARWEEK - 1083)) | (1 << (MariaDBParser.Y_FUNCTION - 1083)) | (1 << (MariaDBParser.X_FUNCTION - 1083)) | (1 << (MariaDBParser.VIA - 1083)) | (1 << (MariaDBParser.LASTVAL - 1083)))) !== 0) || ((((_la - 1115)) & ~0x1F) === 0 && ((1 << (_la - 1115)) & ((1 << (MariaDBParser.NEXTVAL - 1115)) | (1 << (MariaDBParser.SETVAL - 1115)) | (1 << (MariaDBParser.PREVIOUS - 1115)) | (1 << (MariaDBParser.PERSISTENT - 1115)) | (1 << (MariaDBParser.BINLOG_MONITOR - 1115)) | (1 << (MariaDBParser.BINLOG_REPLAY - 1115)) | (1 << (MariaDBParser.FEDERATED_ADMIN - 1115)) | (1 << (MariaDBParser.READ_ONLY_ADMIN - 1115)) | (1 << (MariaDBParser.REPLICA - 1115)) | (1 << (MariaDBParser.REPLICAS - 1115)) | (1 << (MariaDBParser.REPLICATION_MASTER_ADMIN - 1115)) | (1 << (MariaDBParser.MONITOR - 1115)) | (1 << (MariaDBParser.READ_ONLY - 1115)) | (1 << (MariaDBParser.REPLAY - 1115)) | (1 << (MariaDBParser.MOD - 1115)))) !== 0) || ((((_la - 1166)) & ~0x1F) === 0 && ((1 << (_la - 1166)) & ((1 << (MariaDBParser.CHARSET_REVERSE_QOUTE_STRING - 1166)) | (1 << (MariaDBParser.STRING_LITERAL - 1166)) | (1 << (MariaDBParser.ID - 1166)))) !== 0)) {
				{
				this.state = 1109;
				this.functionParameter();
				}
			}

			this.state = 1116;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.COMMA) {
				{
				{
				this.state = 1112;
				this.match(MariaDBParser.COMMA);
				this.state = 1113;
				this.functionParameter();
				}
				}
				this.state = 1118;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1119;
			this.match(MariaDBParser.RR_BRACKET);
			this.state = 1120;
			this.match(MariaDBParser.RETURNS);
			this.state = 1121;
			this.dataType();
			this.state = 1125;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 62, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1122;
					this.routineOption();
					}
					}
				}
				this.state = 1127;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 62, this._ctx);
			}
			this.state = 1130;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.ALTER:
			case MariaDBParser.ANALYZE:
			case MariaDBParser.ATTRIBUTE:
			case MariaDBParser.BODY:
			case MariaDBParser.BUCKETS:
			case MariaDBParser.CALL:
			case MariaDBParser.CHANGE:
			case MariaDBParser.CHECK:
			case MariaDBParser.CONDITION:
			case MariaDBParser.CREATE:
			case MariaDBParser.CURRENT:
			case MariaDBParser.CURRENT_ROLE:
			case MariaDBParser.CURRENT_USER:
			case MariaDBParser.DATABASE:
			case MariaDBParser.DEFAULT:
			case MariaDBParser.DELETE:
			case MariaDBParser.DESC:
			case MariaDBParser.DESCRIBE:
			case MariaDBParser.DIAGNOSTICS:
			case MariaDBParser.DROP:
			case MariaDBParser.EMPTY:
			case MariaDBParser.EXCEPT:
			case MariaDBParser.EXPLAIN:
			case MariaDBParser.GET:
			case MariaDBParser.GRANT:
			case MariaDBParser.GROUP:
			case MariaDBParser.IF:
			case MariaDBParser.IGNORED:
			case MariaDBParser.INSERT:
			case MariaDBParser.KILL:
			case MariaDBParser.LATERAL:
			case MariaDBParser.LEFT:
			case MariaDBParser.LOAD:
			case MariaDBParser.LOCK:
			case MariaDBParser.LOCKED:
			case MariaDBParser.MAXVALUE:
			case MariaDBParser.MINVALUE:
			case MariaDBParser.NUMBER:
			case MariaDBParser.OPTIMIZE:
			case MariaDBParser.OPTIONAL:
			case MariaDBParser.ORDER:
			case MariaDBParser.PRIMARY:
			case MariaDBParser.PACKAGE:
			case MariaDBParser.PURGE:
			case MariaDBParser.RELEASE:
			case MariaDBParser.RENAME:
			case MariaDBParser.REPLACE:
			case MariaDBParser.RESIGNAL:
			case MariaDBParser.REVOKE:
			case MariaDBParser.RIGHT:
			case MariaDBParser.SCHEMA:
			case MariaDBParser.SELECT:
			case MariaDBParser.SET:
			case MariaDBParser.SHOW:
			case MariaDBParser.SIGNAL:
			case MariaDBParser.SKIP_:
			case MariaDBParser.STACKED:
			case MariaDBParser.STATEMENT:
			case MariaDBParser.UNLOCK:
			case MariaDBParser.UPDATE:
			case MariaDBParser.USE:
			case MariaDBParser.VALUES:
			case MariaDBParser.DATE:
			case MariaDBParser.TIME:
			case MariaDBParser.TIMESTAMP:
			case MariaDBParser.DATETIME:
			case MariaDBParser.YEAR:
			case MariaDBParser.BINARY:
			case MariaDBParser.TEXT:
			case MariaDBParser.ENUM:
			case MariaDBParser.SERIAL:
			case MariaDBParser.JSON_ARRAY:
			case MariaDBParser.JSON_ARRAYAGG:
			case MariaDBParser.JSON_ARRAY_APPEND:
			case MariaDBParser.JSON_ARRAY_INSERT:
			case MariaDBParser.JSON_CONTAINS:
			case MariaDBParser.JSON_CONTAINS_PATH:
			case MariaDBParser.JSON_DEPTH:
			case MariaDBParser.JSON_EXTRACT:
			case MariaDBParser.JSON_INSERT:
			case MariaDBParser.JSON_KEYS:
			case MariaDBParser.JSON_LENGTH:
			case MariaDBParser.JSON_MERGE:
			case MariaDBParser.JSON_MERGE_PATCH:
			case MariaDBParser.JSON_MERGE_PRESERVE:
			case MariaDBParser.JSON_OBJECT:
			case MariaDBParser.JSON_OBJECTAGG:
			case MariaDBParser.JSON_OVERLAPS:
			case MariaDBParser.JSON_PRETTY:
			case MariaDBParser.JSON_QUOTE:
			case MariaDBParser.JSON_REMOVE:
			case MariaDBParser.JSON_REPLACE:
			case MariaDBParser.JSON_SCHEMA_VALID:
			case MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT:
			case MariaDBParser.JSON_SEARCH:
			case MariaDBParser.JSON_SET:
			case MariaDBParser.JSON_STORAGE_FREE:
			case MariaDBParser.JSON_STORAGE_SIZE:
			case MariaDBParser.JSON_TABLE:
			case MariaDBParser.JSON_TYPE:
			case MariaDBParser.JSON_UNQUOTE:
			case MariaDBParser.JSON_VALID:
			case MariaDBParser.JSON_VALUE:
			case MariaDBParser.NESTED:
			case MariaDBParser.ORDINALITY:
			case MariaDBParser.PATH:
			case MariaDBParser.AVG:
			case MariaDBParser.BIT_AND:
			case MariaDBParser.BIT_OR:
			case MariaDBParser.BIT_XOR:
			case MariaDBParser.COUNT:
			case MariaDBParser.CUME_DIST:
			case MariaDBParser.DENSE_RANK:
			case MariaDBParser.FIRST_VALUE:
			case MariaDBParser.GROUP_CONCAT:
			case MariaDBParser.LAG:
			case MariaDBParser.LAST_VALUE:
			case MariaDBParser.LEAD:
			case MariaDBParser.MAX:
			case MariaDBParser.MIN:
			case MariaDBParser.NTILE:
			case MariaDBParser.NTH_VALUE:
			case MariaDBParser.PERCENT_RANK:
			case MariaDBParser.RANK:
			case MariaDBParser.ROW_NUMBER:
			case MariaDBParser.STD:
			case MariaDBParser.STDDEV:
			case MariaDBParser.STDDEV_POP:
			case MariaDBParser.STDDEV_SAMP:
			case MariaDBParser.SUM:
			case MariaDBParser.VAR_POP:
			case MariaDBParser.VAR_SAMP:
			case MariaDBParser.VARIANCE:
			case MariaDBParser.CURRENT_DATE:
			case MariaDBParser.CURRENT_TIME:
			case MariaDBParser.CURRENT_TIMESTAMP:
			case MariaDBParser.LOCALTIME:
			case MariaDBParser.CURDATE:
			case MariaDBParser.CURTIME:
			case MariaDBParser.DATE_ADD:
			case MariaDBParser.DATE_SUB:
			case MariaDBParser.LOCALTIMESTAMP:
			case MariaDBParser.NOW:
			case MariaDBParser.POSITION:
			case MariaDBParser.SUBSTR:
			case MariaDBParser.SUBSTRING:
			case MariaDBParser.SYSDATE:
			case MariaDBParser.TRIM:
			case MariaDBParser.UTC_DATE:
			case MariaDBParser.UTC_TIME:
			case MariaDBParser.UTC_TIMESTAMP:
			case MariaDBParser.ACCOUNT:
			case MariaDBParser.ACTION:
			case MariaDBParser.AFTER:
			case MariaDBParser.AGGREGATE:
			case MariaDBParser.ALGORITHM:
			case MariaDBParser.ANY:
			case MariaDBParser.AT:
			case MariaDBParser.AUTHORS:
			case MariaDBParser.AUTOCOMMIT:
			case MariaDBParser.AUTOEXTEND_SIZE:
			case MariaDBParser.AUTO_INCREMENT:
			case MariaDBParser.AVG_ROW_LENGTH:
			case MariaDBParser.BEGIN:
			case MariaDBParser.BINLOG:
			case MariaDBParser.BIT:
			case MariaDBParser.BLOCK:
			case MariaDBParser.BOOL:
			case MariaDBParser.BOOLEAN:
			case MariaDBParser.BTREE:
			case MariaDBParser.CACHE:
			case MariaDBParser.CASCADED:
			case MariaDBParser.CHAIN:
			case MariaDBParser.CHANGED:
			case MariaDBParser.CHANNEL:
			case MariaDBParser.CHECKSUM:
			case MariaDBParser.PAGE_CHECKSUM:
			case MariaDBParser.CIPHER:
			case MariaDBParser.CLASS_ORIGIN:
			case MariaDBParser.CLIENT:
			case MariaDBParser.CLOSE:
			case MariaDBParser.CLUSTERING:
			case MariaDBParser.COALESCE:
			case MariaDBParser.CODE:
			case MariaDBParser.COLUMNS:
			case MariaDBParser.COLUMN_FORMAT:
			case MariaDBParser.COLUMN_NAME:
			case MariaDBParser.COMMENT:
			case MariaDBParser.COMMIT:
			case MariaDBParser.COMPACT:
			case MariaDBParser.COMPLETION:
			case MariaDBParser.COMPRESSED:
			case MariaDBParser.COMPRESSION:
			case MariaDBParser.CONCURRENT:
			case MariaDBParser.CONNECT:
			case MariaDBParser.CONNECTION:
			case MariaDBParser.CONSISTENT:
			case MariaDBParser.CONSTRAINT_CATALOG:
			case MariaDBParser.CONSTRAINT_SCHEMA:
			case MariaDBParser.CONSTRAINT_NAME:
			case MariaDBParser.CONTAINS:
			case MariaDBParser.CONTEXT:
			case MariaDBParser.CONTRIBUTORS:
			case MariaDBParser.COPY:
			case MariaDBParser.CPU:
			case MariaDBParser.CYCLE:
			case MariaDBParser.CURSOR_NAME:
			case MariaDBParser.DATA:
			case MariaDBParser.DATAFILE:
			case MariaDBParser.DEALLOCATE:
			case MariaDBParser.DEFAULT_AUTH:
			case MariaDBParser.DEFINER:
			case MariaDBParser.DELAY_KEY_WRITE:
			case MariaDBParser.DES_KEY_FILE:
			case MariaDBParser.DIRECTORY:
			case MariaDBParser.DISABLE:
			case MariaDBParser.DISCARD:
			case MariaDBParser.DISK:
			case MariaDBParser.DO:
			case MariaDBParser.DUMPFILE:
			case MariaDBParser.DUPLICATE:
			case MariaDBParser.DYNAMIC:
			case MariaDBParser.ENABLE:
			case MariaDBParser.ENCRYPTED:
			case MariaDBParser.ENCRYPTION:
			case MariaDBParser.ENCRYPTION_KEY_ID:
			case MariaDBParser.END:
			case MariaDBParser.ENDS:
			case MariaDBParser.ENGINE:
			case MariaDBParser.ENGINES:
			case MariaDBParser.ERROR:
			case MariaDBParser.ERRORS:
			case MariaDBParser.ESCAPE:
			case MariaDBParser.EVEN:
			case MariaDBParser.EVENT:
			case MariaDBParser.EVENTS:
			case MariaDBParser.EVERY:
			case MariaDBParser.EXCHANGE:
			case MariaDBParser.EXCLUSIVE:
			case MariaDBParser.EXPIRE:
			case MariaDBParser.EXPORT:
			case MariaDBParser.EXTENDED:
			case MariaDBParser.EXTENT_SIZE:
			case MariaDBParser.FAILED_LOGIN_ATTEMPTS:
			case MariaDBParser.FAST:
			case MariaDBParser.FAULTS:
			case MariaDBParser.FIELDS:
			case MariaDBParser.FILE_BLOCK_SIZE:
			case MariaDBParser.FILTER:
			case MariaDBParser.FIRST:
			case MariaDBParser.FIXED:
			case MariaDBParser.FLUSH:
			case MariaDBParser.FOLLOWS:
			case MariaDBParser.FOUND:
			case MariaDBParser.FULL:
			case MariaDBParser.FUNCTION:
			case MariaDBParser.GENERAL:
			case MariaDBParser.GLOBAL:
			case MariaDBParser.GRANTS:
			case MariaDBParser.GROUP_REPLICATION:
			case MariaDBParser.HANDLER:
			case MariaDBParser.HASH:
			case MariaDBParser.HELP:
			case MariaDBParser.HISTORY:
			case MariaDBParser.HOST:
			case MariaDBParser.HOSTS:
			case MariaDBParser.IDENTIFIED:
			case MariaDBParser.IGNORE_SERVER_IDS:
			case MariaDBParser.IMPORT:
			case MariaDBParser.INCREMENT:
			case MariaDBParser.INDEXES:
			case MariaDBParser.INITIAL_SIZE:
			case MariaDBParser.INPLACE:
			case MariaDBParser.INSERT_METHOD:
			case MariaDBParser.INSTALL:
			case MariaDBParser.INSTANCE:
			case MariaDBParser.INSTANT:
			case MariaDBParser.INVISIBLE:
			case MariaDBParser.INVOKER:
			case MariaDBParser.IO:
			case MariaDBParser.IO_THREAD:
			case MariaDBParser.IPC:
			case MariaDBParser.ISOLATION:
			case MariaDBParser.ISSUER:
			case MariaDBParser.JSON:
			case MariaDBParser.KEY_BLOCK_SIZE:
			case MariaDBParser.LANGUAGE:
			case MariaDBParser.LAST:
			case MariaDBParser.LEAVES:
			case MariaDBParser.LESS:
			case MariaDBParser.LEVEL:
			case MariaDBParser.LIST:
			case MariaDBParser.LOCAL:
			case MariaDBParser.LOCALES:
			case MariaDBParser.LOGFILE:
			case MariaDBParser.LOGS:
			case MariaDBParser.MASTER:
			case MariaDBParser.MASTER_AUTO_POSITION:
			case MariaDBParser.MASTER_CONNECT_RETRY:
			case MariaDBParser.MASTER_DELAY:
			case MariaDBParser.MASTER_HEARTBEAT_PERIOD:
			case MariaDBParser.MASTER_HOST:
			case MariaDBParser.MASTER_LOG_FILE:
			case MariaDBParser.MASTER_LOG_POS:
			case MariaDBParser.MASTER_PASSWORD:
			case MariaDBParser.MASTER_PORT:
			case MariaDBParser.MASTER_RETRY_COUNT:
			case MariaDBParser.MASTER_SSL:
			case MariaDBParser.MASTER_SSL_CA:
			case MariaDBParser.MASTER_SSL_CAPATH:
			case MariaDBParser.MASTER_SSL_CERT:
			case MariaDBParser.MASTER_SSL_CIPHER:
			case MariaDBParser.MASTER_SSL_CRL:
			case MariaDBParser.MASTER_SSL_CRLPATH:
			case MariaDBParser.MASTER_SSL_KEY:
			case MariaDBParser.MASTER_TLS_VERSION:
			case MariaDBParser.MASTER_USER:
			case MariaDBParser.MAX_CONNECTIONS_PER_HOUR:
			case MariaDBParser.MAX_QUERIES_PER_HOUR:
			case MariaDBParser.MAX_ROWS:
			case MariaDBParser.MAX_SIZE:
			case MariaDBParser.MAX_UPDATES_PER_HOUR:
			case MariaDBParser.MAX_USER_CONNECTIONS:
			case MariaDBParser.MEDIUM:
			case MariaDBParser.MEMBER:
			case MariaDBParser.MERGE:
			case MariaDBParser.MESSAGE_TEXT:
			case MariaDBParser.MID:
			case MariaDBParser.MIGRATE:
			case MariaDBParser.MIN_ROWS:
			case MariaDBParser.MODE:
			case MariaDBParser.MODIFY:
			case MariaDBParser.MUTEX:
			case MariaDBParser.MYSQL:
			case MariaDBParser.MYSQL_ERRNO:
			case MariaDBParser.NAME:
			case MariaDBParser.NAMES:
			case MariaDBParser.NCHAR:
			case MariaDBParser.NEVER:
			case MariaDBParser.NEXT:
			case MariaDBParser.NO:
			case MariaDBParser.NOCACHE:
			case MariaDBParser.NOCOPY:
			case MariaDBParser.NOCYCLE:
			case MariaDBParser.NOMAXVALUE:
			case MariaDBParser.NOMINVALUE:
			case MariaDBParser.NOWAIT:
			case MariaDBParser.NODEGROUP:
			case MariaDBParser.NONE:
			case MariaDBParser.ODBC:
			case MariaDBParser.OFFLINE:
			case MariaDBParser.OFFSET:
			case MariaDBParser.OF:
			case MariaDBParser.OJ:
			case MariaDBParser.OLD_PASSWORD:
			case MariaDBParser.ONE:
			case MariaDBParser.ONLINE:
			case MariaDBParser.ONLY:
			case MariaDBParser.OPEN:
			case MariaDBParser.OPTIMIZER_COSTS:
			case MariaDBParser.OPTIONS:
			case MariaDBParser.OWNER:
			case MariaDBParser.PACK_KEYS:
			case MariaDBParser.PAGE:
			case MariaDBParser.PARSER:
			case MariaDBParser.PARTIAL:
			case MariaDBParser.PARTITIONING:
			case MariaDBParser.PARTITIONS:
			case MariaDBParser.PASSWORD:
			case MariaDBParser.PASSWORD_LOCK_TIME:
			case MariaDBParser.PHASE:
			case MariaDBParser.PLUGIN:
			case MariaDBParser.PLUGIN_DIR:
			case MariaDBParser.PLUGINS:
			case MariaDBParser.PORT:
			case MariaDBParser.PRECEDES:
			case MariaDBParser.PREPARE:
			case MariaDBParser.PRESERVE:
			case MariaDBParser.PREV:
			case MariaDBParser.PROCESSLIST:
			case MariaDBParser.PROFILE:
			case MariaDBParser.PROFILES:
			case MariaDBParser.PROXY:
			case MariaDBParser.QUERY:
			case MariaDBParser.QUERY_RESPONSE_TIME:
			case MariaDBParser.QUICK:
			case MariaDBParser.REBUILD:
			case MariaDBParser.RECOVER:
			case MariaDBParser.RECURSIVE:
			case MariaDBParser.REDO_BUFFER_SIZE:
			case MariaDBParser.REDUNDANT:
			case MariaDBParser.RELAY:
			case MariaDBParser.RELAY_LOG_FILE:
			case MariaDBParser.RELAY_LOG_POS:
			case MariaDBParser.RELAYLOG:
			case MariaDBParser.REMOVE:
			case MariaDBParser.REORGANIZE:
			case MariaDBParser.REPAIR:
			case MariaDBParser.REPLICATE_DO_DB:
			case MariaDBParser.REPLICATE_DO_TABLE:
			case MariaDBParser.REPLICATE_IGNORE_DB:
			case MariaDBParser.REPLICATE_IGNORE_TABLE:
			case MariaDBParser.REPLICATE_REWRITE_DB:
			case MariaDBParser.REPLICATE_WILD_DO_TABLE:
			case MariaDBParser.REPLICATE_WILD_IGNORE_TABLE:
			case MariaDBParser.REPLICATION:
			case MariaDBParser.RESET:
			case MariaDBParser.RESTART:
			case MariaDBParser.RESUME:
			case MariaDBParser.RETURNED_SQLSTATE:
			case MariaDBParser.RETURNS:
			case MariaDBParser.REUSE:
			case MariaDBParser.ROLE:
			case MariaDBParser.ROLLBACK:
			case MariaDBParser.ROLLUP:
			case MariaDBParser.ROTATE:
			case MariaDBParser.ROW:
			case MariaDBParser.ROWS:
			case MariaDBParser.ROW_FORMAT:
			case MariaDBParser.RTREE:
			case MariaDBParser.SAVEPOINT:
			case MariaDBParser.SCHEDULE:
			case MariaDBParser.SECURITY:
			case MariaDBParser.SEQUENCE:
			case MariaDBParser.SERVER:
			case MariaDBParser.SESSION:
			case MariaDBParser.SHARE:
			case MariaDBParser.SHARED:
			case MariaDBParser.SIGNED:
			case MariaDBParser.SIMPLE:
			case MariaDBParser.SLAVE:
			case MariaDBParser.SLAVES:
			case MariaDBParser.SLOW:
			case MariaDBParser.SNAPSHOT:
			case MariaDBParser.SOCKET:
			case MariaDBParser.SOME:
			case MariaDBParser.SONAME:
			case MariaDBParser.SOUNDS:
			case MariaDBParser.SOURCE:
			case MariaDBParser.SQL_AFTER_GTIDS:
			case MariaDBParser.SQL_AFTER_MTS_GAPS:
			case MariaDBParser.SQL_BEFORE_GTIDS:
			case MariaDBParser.SQL_BUFFER_RESULT:
			case MariaDBParser.SQL_CACHE:
			case MariaDBParser.SQL_NO_CACHE:
			case MariaDBParser.SQL_THREAD:
			case MariaDBParser.START:
			case MariaDBParser.STARTS:
			case MariaDBParser.STATS_AUTO_RECALC:
			case MariaDBParser.STATS_PERSISTENT:
			case MariaDBParser.STATS_SAMPLE_PAGES:
			case MariaDBParser.STATUS:
			case MariaDBParser.STOP:
			case MariaDBParser.STORAGE:
			case MariaDBParser.STRING:
			case MariaDBParser.SUBCLASS_ORIGIN:
			case MariaDBParser.SUBJECT:
			case MariaDBParser.SUBPARTITION:
			case MariaDBParser.SUBPARTITIONS:
			case MariaDBParser.SUSPEND:
			case MariaDBParser.SWAPS:
			case MariaDBParser.SWITCHES:
			case MariaDBParser.TABLE_NAME:
			case MariaDBParser.TABLESPACE:
			case MariaDBParser.TABLE_TYPE:
			case MariaDBParser.TEMPORARY:
			case MariaDBParser.TEMPTABLE:
			case MariaDBParser.THAN:
			case MariaDBParser.TRADITIONAL:
			case MariaDBParser.TRANSACTION:
			case MariaDBParser.TRANSACTIONAL:
			case MariaDBParser.TRIGGERS:
			case MariaDBParser.TRUNCATE:
			case MariaDBParser.TYPES:
			case MariaDBParser.UNBOUNDED:
			case MariaDBParser.UNDEFINED:
			case MariaDBParser.UNDOFILE:
			case MariaDBParser.UNDO_BUFFER_SIZE:
			case MariaDBParser.UNINSTALL:
			case MariaDBParser.UNKNOWN:
			case MariaDBParser.UNTIL:
			case MariaDBParser.UPGRADE:
			case MariaDBParser.USER:
			case MariaDBParser.USE_FRM:
			case MariaDBParser.USER_RESOURCES:
			case MariaDBParser.VALIDATION:
			case MariaDBParser.VALUE:
			case MariaDBParser.VARIABLES:
			case MariaDBParser.VIEW:
			case MariaDBParser.VIRTUAL:
			case MariaDBParser.VISIBLE:
			case MariaDBParser.WAIT:
			case MariaDBParser.WARNINGS:
			case MariaDBParser.WITHOUT:
			case MariaDBParser.WORK:
			case MariaDBParser.WRAPPER:
			case MariaDBParser.WSREP_MEMBERSHIP:
			case MariaDBParser.WSREP_STATUS:
			case MariaDBParser.X509:
			case MariaDBParser.XA:
			case MariaDBParser.XML:
			case MariaDBParser.EUR:
			case MariaDBParser.USA:
			case MariaDBParser.JIS:
			case MariaDBParser.ISO:
			case MariaDBParser.INTERNAL:
			case MariaDBParser.QUARTER:
			case MariaDBParser.MONTH:
			case MariaDBParser.DAY:
			case MariaDBParser.HOUR:
			case MariaDBParser.MINUTE:
			case MariaDBParser.WEEK:
			case MariaDBParser.SECOND:
			case MariaDBParser.MICROSECOND:
			case MariaDBParser.USER_STATISTICS:
			case MariaDBParser.CLIENT_STATISTICS:
			case MariaDBParser.INDEX_STATISTICS:
			case MariaDBParser.TABLE_STATISTICS:
			case MariaDBParser.ADMIN:
			case MariaDBParser.AUDIT_ADMIN:
			case MariaDBParser.BACKUP_ADMIN:
			case MariaDBParser.BINLOG_ADMIN:
			case MariaDBParser.BINLOG_ENCRYPTION_ADMIN:
			case MariaDBParser.CLONE_ADMIN:
			case MariaDBParser.CONNECTION_ADMIN:
			case MariaDBParser.ENCRYPTION_KEY_ADMIN:
			case MariaDBParser.EXECUTE:
			case MariaDBParser.FILE:
			case MariaDBParser.FIREWALL_ADMIN:
			case MariaDBParser.FIREWALL_USER:
			case MariaDBParser.GROUP_REPLICATION_ADMIN:
			case MariaDBParser.INNODB_REDO_LOG_ARCHIVE:
			case MariaDBParser.INVOKE:
			case MariaDBParser.LAMBDA:
			case MariaDBParser.NDB_STORED_USER:
			case MariaDBParser.PASSWORDLESS_USER_ADMIN:
			case MariaDBParser.PERSIST_RO_VARIABLES_ADMIN:
			case MariaDBParser.PRIVILEGES:
			case MariaDBParser.PROCESS:
			case MariaDBParser.RELOAD:
			case MariaDBParser.REPLICATION_APPLIER:
			case MariaDBParser.REPLICATION_SLAVE_ADMIN:
			case MariaDBParser.RESOURCE_GROUP_ADMIN:
			case MariaDBParser.RESOURCE_GROUP_USER:
			case MariaDBParser.ROLE_ADMIN:
			case MariaDBParser.ROUTINE:
			case MariaDBParser.S3:
			case MariaDBParser.SESSION_VARIABLES_ADMIN:
			case MariaDBParser.SET_USER_ID:
			case MariaDBParser.SHOW_ROUTINE:
			case MariaDBParser.SHUTDOWN:
			case MariaDBParser.SUPER:
			case MariaDBParser.SYSTEM_VARIABLES_ADMIN:
			case MariaDBParser.TABLES:
			case MariaDBParser.TABLE_ENCRYPTION_ADMIN:
			case MariaDBParser.VERSION_TOKEN_ADMIN:
			case MariaDBParser.XA_RECOVER_ADMIN:
			case MariaDBParser.ARMSCII8:
			case MariaDBParser.ASCII:
			case MariaDBParser.BIG5:
			case MariaDBParser.CP1250:
			case MariaDBParser.CP1251:
			case MariaDBParser.CP1256:
			case MariaDBParser.CP1257:
			case MariaDBParser.CP850:
			case MariaDBParser.CP852:
			case MariaDBParser.CP866:
			case MariaDBParser.CP932:
			case MariaDBParser.DEC8:
			case MariaDBParser.EUCJPMS:
			case MariaDBParser.EUCKR:
			case MariaDBParser.GB18030:
			case MariaDBParser.GB2312:
			case MariaDBParser.GBK:
			case MariaDBParser.GEOSTD8:
			case MariaDBParser.GREEK:
			case MariaDBParser.HEBREW:
			case MariaDBParser.HP8:
			case MariaDBParser.KEYBCS2:
			case MariaDBParser.KOI8R:
			case MariaDBParser.KOI8U:
			case MariaDBParser.LATIN1:
			case MariaDBParser.LATIN2:
			case MariaDBParser.LATIN5:
			case MariaDBParser.LATIN7:
			case MariaDBParser.MACCE:
			case MariaDBParser.MACROMAN:
			case MariaDBParser.SJIS:
			case MariaDBParser.SWE7:
			case MariaDBParser.TIS620:
			case MariaDBParser.UCS2:
			case MariaDBParser.UJIS:
			case MariaDBParser.UTF16:
			case MariaDBParser.UTF16LE:
			case MariaDBParser.UTF32:
			case MariaDBParser.UTF8:
			case MariaDBParser.UTF8MB3:
			case MariaDBParser.UTF8MB4:
			case MariaDBParser.ARCHIVE:
			case MariaDBParser.BLACKHOLE:
			case MariaDBParser.CSV:
			case MariaDBParser.FEDERATED:
			case MariaDBParser.INNODB:
			case MariaDBParser.MEMORY:
			case MariaDBParser.MRG_MYISAM:
			case MariaDBParser.MYISAM:
			case MariaDBParser.NDB:
			case MariaDBParser.NDBCLUSTER:
			case MariaDBParser.PERFORMANCE_SCHEMA:
			case MariaDBParser.TOKUDB:
			case MariaDBParser.REPEATABLE:
			case MariaDBParser.COMMITTED:
			case MariaDBParser.UNCOMMITTED:
			case MariaDBParser.SERIALIZABLE:
			case MariaDBParser.GEOMETRYCOLLECTION:
			case MariaDBParser.LINESTRING:
			case MariaDBParser.MULTILINESTRING:
			case MariaDBParser.MULTIPOINT:
			case MariaDBParser.MULTIPOLYGON:
			case MariaDBParser.POINT:
			case MariaDBParser.POLYGON:
			case MariaDBParser.ABS:
			case MariaDBParser.ACOS:
			case MariaDBParser.ADDDATE:
			case MariaDBParser.ADDTIME:
			case MariaDBParser.AES_DECRYPT:
			case MariaDBParser.AES_ENCRYPT:
			case MariaDBParser.AREA:
			case MariaDBParser.ASBINARY:
			case MariaDBParser.ASIN:
			case MariaDBParser.ASTEXT:
			case MariaDBParser.ASWKB:
			case MariaDBParser.ASWKT:
			case MariaDBParser.ASYMMETRIC_DECRYPT:
			case MariaDBParser.ASYMMETRIC_DERIVE:
			case MariaDBParser.ASYMMETRIC_ENCRYPT:
			case MariaDBParser.ASYMMETRIC_SIGN:
			case MariaDBParser.ASYMMETRIC_VERIFY:
			case MariaDBParser.ATAN:
			case MariaDBParser.ATAN2:
			case MariaDBParser.BENCHMARK:
			case MariaDBParser.BIN:
			case MariaDBParser.BIT_COUNT:
			case MariaDBParser.BIT_LENGTH:
			case MariaDBParser.BUFFER:
			case MariaDBParser.CATALOG_NAME:
			case MariaDBParser.CEIL:
			case MariaDBParser.CEILING:
			case MariaDBParser.CENTROID:
			case MariaDBParser.CHARACTER_LENGTH:
			case MariaDBParser.CHARSET:
			case MariaDBParser.CHAR_LENGTH:
			case MariaDBParser.COERCIBILITY:
			case MariaDBParser.COLLATION:
			case MariaDBParser.COMPRESS:
			case MariaDBParser.CONCAT:
			case MariaDBParser.CONCAT_WS:
			case MariaDBParser.CONNECTION_ID:
			case MariaDBParser.CONV:
			case MariaDBParser.CONVERT_TZ:
			case MariaDBParser.COS:
			case MariaDBParser.COT:
			case MariaDBParser.CRC32:
			case MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY:
			case MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY:
			case MariaDBParser.CREATE_DH_PARAMETERS:
			case MariaDBParser.CREATE_DIGEST:
			case MariaDBParser.CROSSES:
			case MariaDBParser.DATEDIFF:
			case MariaDBParser.DATE_FORMAT:
			case MariaDBParser.DAYNAME:
			case MariaDBParser.DAYOFMONTH:
			case MariaDBParser.DAYOFWEEK:
			case MariaDBParser.DAYOFYEAR:
			case MariaDBParser.DECODE:
			case MariaDBParser.DEGREES:
			case MariaDBParser.DES_DECRYPT:
			case MariaDBParser.DES_ENCRYPT:
			case MariaDBParser.DIMENSION:
			case MariaDBParser.DISJOINT:
			case MariaDBParser.ELT:
			case MariaDBParser.ENCODE:
			case MariaDBParser.ENCRYPT:
			case MariaDBParser.ENDPOINT:
			case MariaDBParser.ENGINE_ATTRIBUTE:
			case MariaDBParser.ENVELOPE:
			case MariaDBParser.EQUALS:
			case MariaDBParser.EXP:
			case MariaDBParser.EXPORT_SET:
			case MariaDBParser.EXTERIORRING:
			case MariaDBParser.EXTRACTVALUE:
			case MariaDBParser.FIELD:
			case MariaDBParser.FIND_IN_SET:
			case MariaDBParser.FLOOR:
			case MariaDBParser.FORMAT:
			case MariaDBParser.FOUND_ROWS:
			case MariaDBParser.FROM_BASE64:
			case MariaDBParser.FROM_DAYS:
			case MariaDBParser.FROM_UNIXTIME:
			case MariaDBParser.GEOMCOLLFROMTEXT:
			case MariaDBParser.GEOMCOLLFROMWKB:
			case MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT:
			case MariaDBParser.GEOMETRYCOLLECTIONFROMWKB:
			case MariaDBParser.GEOMETRYFROMTEXT:
			case MariaDBParser.GEOMETRYFROMWKB:
			case MariaDBParser.GEOMETRYN:
			case MariaDBParser.GEOMETRYTYPE:
			case MariaDBParser.GEOMFROMTEXT:
			case MariaDBParser.GEOMFROMWKB:
			case MariaDBParser.GET_FORMAT:
			case MariaDBParser.GET_LOCK:
			case MariaDBParser.GLENGTH:
			case MariaDBParser.GREATEST:
			case MariaDBParser.GTID_SUBSET:
			case MariaDBParser.GTID_SUBTRACT:
			case MariaDBParser.HEX:
			case MariaDBParser.IFNULL:
			case MariaDBParser.INET6_ATON:
			case MariaDBParser.INET6_NTOA:
			case MariaDBParser.INET_ATON:
			case MariaDBParser.INET_NTOA:
			case MariaDBParser.INSTR:
			case MariaDBParser.INTERIORRINGN:
			case MariaDBParser.INTERSECTS:
			case MariaDBParser.ISCLOSED:
			case MariaDBParser.ISEMPTY:
			case MariaDBParser.ISNULL:
			case MariaDBParser.ISSIMPLE:
			case MariaDBParser.IS_FREE_LOCK:
			case MariaDBParser.IS_IPV4:
			case MariaDBParser.IS_IPV4_COMPAT:
			case MariaDBParser.IS_IPV4_MAPPED:
			case MariaDBParser.IS_IPV6:
			case MariaDBParser.IS_USED_LOCK:
			case MariaDBParser.LAST_INSERT_ID:
			case MariaDBParser.LCASE:
			case MariaDBParser.LEAST:
			case MariaDBParser.LENGTH:
			case MariaDBParser.LINEFROMTEXT:
			case MariaDBParser.LINEFROMWKB:
			case MariaDBParser.LINESTRINGFROMTEXT:
			case MariaDBParser.LINESTRINGFROMWKB:
			case MariaDBParser.LN:
			case MariaDBParser.LOAD_FILE:
			case MariaDBParser.LOCATE:
			case MariaDBParser.LOG:
			case MariaDBParser.LOG10:
			case MariaDBParser.LOG2:
			case MariaDBParser.LOWER:
			case MariaDBParser.LPAD:
			case MariaDBParser.LTRIM:
			case MariaDBParser.MAKEDATE:
			case MariaDBParser.MAKETIME:
			case MariaDBParser.MAKE_SET:
			case MariaDBParser.MASTER_POS_WAIT:
			case MariaDBParser.MBRCONTAINS:
			case MariaDBParser.MBRDISJOINT:
			case MariaDBParser.MBREQUAL:
			case MariaDBParser.MBRINTERSECTS:
			case MariaDBParser.MBROVERLAPS:
			case MariaDBParser.MBRTOUCHES:
			case MariaDBParser.MBRWITHIN:
			case MariaDBParser.MD5:
			case MariaDBParser.MLINEFROMTEXT:
			case MariaDBParser.MLINEFROMWKB:
			case MariaDBParser.MONTHNAME:
			case MariaDBParser.MPOINTFROMTEXT:
			case MariaDBParser.MPOINTFROMWKB:
			case MariaDBParser.MPOLYFROMTEXT:
			case MariaDBParser.MPOLYFROMWKB:
			case MariaDBParser.MULTILINESTRINGFROMTEXT:
			case MariaDBParser.MULTILINESTRINGFROMWKB:
			case MariaDBParser.MULTIPOINTFROMTEXT:
			case MariaDBParser.MULTIPOINTFROMWKB:
			case MariaDBParser.MULTIPOLYGONFROMTEXT:
			case MariaDBParser.MULTIPOLYGONFROMWKB:
			case MariaDBParser.NAME_CONST:
			case MariaDBParser.NULLIF:
			case MariaDBParser.NUMGEOMETRIES:
			case MariaDBParser.NUMINTERIORRINGS:
			case MariaDBParser.NUMPOINTS:
			case MariaDBParser.OCT:
			case MariaDBParser.OCTET_LENGTH:
			case MariaDBParser.ORD:
			case MariaDBParser.OVERLAPS:
			case MariaDBParser.PERIOD_ADD:
			case MariaDBParser.PERIOD_DIFF:
			case MariaDBParser.PI:
			case MariaDBParser.POINTFROMTEXT:
			case MariaDBParser.POINTFROMWKB:
			case MariaDBParser.POINTN:
			case MariaDBParser.POLYFROMTEXT:
			case MariaDBParser.POLYFROMWKB:
			case MariaDBParser.POLYGONFROMTEXT:
			case MariaDBParser.POLYGONFROMWKB:
			case MariaDBParser.POW:
			case MariaDBParser.POWER:
			case MariaDBParser.QUOTE:
			case MariaDBParser.RADIANS:
			case MariaDBParser.RAND:
			case MariaDBParser.RANDOM_BYTES:
			case MariaDBParser.RELEASE_LOCK:
			case MariaDBParser.REVERSE:
			case MariaDBParser.ROUND:
			case MariaDBParser.ROW_COUNT:
			case MariaDBParser.RPAD:
			case MariaDBParser.RTRIM:
			case MariaDBParser.SEC_TO_TIME:
			case MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE:
			case MariaDBParser.SESSION_USER:
			case MariaDBParser.SHA:
			case MariaDBParser.SHA1:
			case MariaDBParser.SHA2:
			case MariaDBParser.SCHEMA_NAME:
			case MariaDBParser.SIGN:
			case MariaDBParser.SIN:
			case MariaDBParser.SLEEP:
			case MariaDBParser.SOUNDEX:
			case MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS:
			case MariaDBParser.SQRT:
			case MariaDBParser.SRID:
			case MariaDBParser.STARTPOINT:
			case MariaDBParser.STRCMP:
			case MariaDBParser.STR_TO_DATE:
			case MariaDBParser.ST_AREA:
			case MariaDBParser.ST_ASBINARY:
			case MariaDBParser.ST_ASTEXT:
			case MariaDBParser.ST_ASWKB:
			case MariaDBParser.ST_ASWKT:
			case MariaDBParser.ST_BUFFER:
			case MariaDBParser.ST_CENTROID:
			case MariaDBParser.ST_CONTAINS:
			case MariaDBParser.ST_CROSSES:
			case MariaDBParser.ST_DIFFERENCE:
			case MariaDBParser.ST_DIMENSION:
			case MariaDBParser.ST_DISJOINT:
			case MariaDBParser.ST_DISTANCE:
			case MariaDBParser.ST_ENDPOINT:
			case MariaDBParser.ST_ENVELOPE:
			case MariaDBParser.ST_EQUALS:
			case MariaDBParser.ST_EXTERIORRING:
			case MariaDBParser.ST_GEOMCOLLFROMTEXT:
			case MariaDBParser.ST_GEOMCOLLFROMTXT:
			case MariaDBParser.ST_GEOMCOLLFROMWKB:
			case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
			case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB:
			case MariaDBParser.ST_GEOMETRYFROMTEXT:
			case MariaDBParser.ST_GEOMETRYFROMWKB:
			case MariaDBParser.ST_GEOMETRYN:
			case MariaDBParser.ST_GEOMETRYTYPE:
			case MariaDBParser.ST_GEOMFROMTEXT:
			case MariaDBParser.ST_GEOMFROMWKB:
			case MariaDBParser.ST_INTERIORRINGN:
			case MariaDBParser.ST_INTERSECTION:
			case MariaDBParser.ST_INTERSECTS:
			case MariaDBParser.ST_ISCLOSED:
			case MariaDBParser.ST_ISEMPTY:
			case MariaDBParser.ST_ISSIMPLE:
			case MariaDBParser.ST_LINEFROMTEXT:
			case MariaDBParser.ST_LINEFROMWKB:
			case MariaDBParser.ST_LINESTRINGFROMTEXT:
			case MariaDBParser.ST_LINESTRINGFROMWKB:
			case MariaDBParser.ST_NUMGEOMETRIES:
			case MariaDBParser.ST_NUMINTERIORRING:
			case MariaDBParser.ST_NUMINTERIORRINGS:
			case MariaDBParser.ST_NUMPOINTS:
			case MariaDBParser.ST_OVERLAPS:
			case MariaDBParser.ST_POINTFROMTEXT:
			case MariaDBParser.ST_POINTFROMWKB:
			case MariaDBParser.ST_POINTN:
			case MariaDBParser.ST_POLYFROMTEXT:
			case MariaDBParser.ST_POLYFROMWKB:
			case MariaDBParser.ST_POLYGONFROMTEXT:
			case MariaDBParser.ST_POLYGONFROMWKB:
			case MariaDBParser.ST_SRID:
			case MariaDBParser.ST_STARTPOINT:
			case MariaDBParser.ST_SYMDIFFERENCE:
			case MariaDBParser.ST_TOUCHES:
			case MariaDBParser.ST_UNION:
			case MariaDBParser.ST_WITHIN:
			case MariaDBParser.ST_X:
			case MariaDBParser.ST_Y:
			case MariaDBParser.SUBDATE:
			case MariaDBParser.SUBSTRING_INDEX:
			case MariaDBParser.SUBTIME:
			case MariaDBParser.SYSTEM_USER:
			case MariaDBParser.TAN:
			case MariaDBParser.TIMEDIFF:
			case MariaDBParser.TIMESTAMPADD:
			case MariaDBParser.TIMESTAMPDIFF:
			case MariaDBParser.TIME_FORMAT:
			case MariaDBParser.TIME_TO_SEC:
			case MariaDBParser.TOUCHES:
			case MariaDBParser.TO_BASE64:
			case MariaDBParser.TO_DAYS:
			case MariaDBParser.TO_SECONDS:
			case MariaDBParser.UCASE:
			case MariaDBParser.UNCOMPRESS:
			case MariaDBParser.UNCOMPRESSED_LENGTH:
			case MariaDBParser.UNHEX:
			case MariaDBParser.UNIX_TIMESTAMP:
			case MariaDBParser.UPDATEXML:
			case MariaDBParser.UPPER:
			case MariaDBParser.UUID:
			case MariaDBParser.UUID_SHORT:
			case MariaDBParser.VALIDATE_PASSWORD_STRENGTH:
			case MariaDBParser.VERSION:
			case MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case MariaDBParser.WEEKDAY:
			case MariaDBParser.WEEKOFYEAR:
			case MariaDBParser.WEIGHT_STRING:
			case MariaDBParser.WITHIN:
			case MariaDBParser.YEARWEEK:
			case MariaDBParser.Y_FUNCTION:
			case MariaDBParser.X_FUNCTION:
			case MariaDBParser.VIA:
			case MariaDBParser.LASTVAL:
			case MariaDBParser.NEXTVAL:
			case MariaDBParser.SETVAL:
			case MariaDBParser.PREVIOUS:
			case MariaDBParser.PERSISTENT:
			case MariaDBParser.BINLOG_MONITOR:
			case MariaDBParser.BINLOG_REPLAY:
			case MariaDBParser.FEDERATED_ADMIN:
			case MariaDBParser.READ_ONLY_ADMIN:
			case MariaDBParser.REPLICA:
			case MariaDBParser.REPLICAS:
			case MariaDBParser.REPLICATION_MASTER_ADMIN:
			case MariaDBParser.MONITOR:
			case MariaDBParser.READ_ONLY:
			case MariaDBParser.REPLAY:
			case MariaDBParser.MOD:
			case MariaDBParser.LR_BRACKET:
			case MariaDBParser.CHARSET_REVERSE_QOUTE_STRING:
			case MariaDBParser.STRING_LITERAL:
			case MariaDBParser.ID:
				{
				this.state = 1128;
				this.routineBody();
				}
				break;
			case MariaDBParser.RETURN:
				{
				this.state = 1129;
				this.returnStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createRole(): CreateRoleContext {
		let _localctx: CreateRoleContext = new CreateRoleContext(this._ctx, this.state);
		this.enterRule(_localctx, 38, MariaDBParser.RULE_createRole);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1132;
			this.match(MariaDBParser.CREATE);
			this.state = 1133;
			this.match(MariaDBParser.ROLE);
			this.state = 1135;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 64, this._ctx) ) {
			case 1:
				{
				this.state = 1134;
				this.ifNotExists();
				}
				break;
			}
			this.state = 1137;
			this.roleName();
			this.state = 1142;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.COMMA) {
				{
				{
				this.state = 1138;
				this.match(MariaDBParser.COMMA);
				this.state = 1139;
				this.roleName();
				}
				}
				this.state = 1144;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createServer(): CreateServerContext {
		let _localctx: CreateServerContext = new CreateServerContext(this._ctx, this.state);
		this.enterRule(_localctx, 40, MariaDBParser.RULE_createServer);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1145;
			this.match(MariaDBParser.CREATE);
			this.state = 1146;
			this.match(MariaDBParser.SERVER);
			this.state = 1147;
			this.uid();
			this.state = 1148;
			this.match(MariaDBParser.FOREIGN);
			this.state = 1149;
			this.match(MariaDBParser.DATA);
			this.state = 1150;
			this.match(MariaDBParser.WRAPPER);
			this.state = 1151;
			_localctx._wrapperName = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MariaDBParser.MYSQL || _la === MariaDBParser.STRING_LITERAL)) {
				_localctx._wrapperName = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1152;
			this.match(MariaDBParser.OPTIONS);
			this.state = 1153;
			this.match(MariaDBParser.LR_BRACKET);
			this.state = 1154;
			this.serverOption();
			this.state = 1159;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.COMMA) {
				{
				{
				this.state = 1155;
				this.match(MariaDBParser.COMMA);
				this.state = 1156;
				this.serverOption();
				}
				}
				this.state = 1161;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1162;
			this.match(MariaDBParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createTable(): CreateTableContext {
		let _localctx: CreateTableContext = new CreateTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 42, MariaDBParser.RULE_createTable);
		let _la: number;
		try {
			let _alt: number;
			this.state = 1251;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 88, this._ctx) ) {
			case 1:
				_localctx = new CopyCreateTableContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1164;
				this.match(MariaDBParser.CREATE);
				this.state = 1166;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.OR) {
					{
					this.state = 1165;
					this.orReplace();
					}
				}

				this.state = 1169;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.TEMPORARY) {
					{
					this.state = 1168;
					this.match(MariaDBParser.TEMPORARY);
					}
				}

				this.state = 1171;
				this.match(MariaDBParser.TABLE);
				this.state = 1173;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 69, this._ctx) ) {
				case 1:
					{
					this.state = 1172;
					this.ifNotExists();
					}
					break;
				}
				this.state = 1175;
				this.tableName();
				this.state = 1183;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.LIKE:
					{
					this.state = 1176;
					this.match(MariaDBParser.LIKE);
					this.state = 1177;
					this.tableName();
					}
					break;
				case MariaDBParser.LR_BRACKET:
					{
					this.state = 1178;
					this.match(MariaDBParser.LR_BRACKET);
					this.state = 1179;
					this.match(MariaDBParser.LIKE);
					this.state = 1180;
					(_localctx as CopyCreateTableContext)._parenthesisTable = this.tableName();
					this.state = 1181;
					this.match(MariaDBParser.RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				_localctx = new QueryCreateTableContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1185;
				this.match(MariaDBParser.CREATE);
				this.state = 1187;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.OR) {
					{
					this.state = 1186;
					this.orReplace();
					}
				}

				this.state = 1190;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.TEMPORARY) {
					{
					this.state = 1189;
					this.match(MariaDBParser.TEMPORARY);
					}
				}

				this.state = 1192;
				this.match(MariaDBParser.TABLE);
				this.state = 1194;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 73, this._ctx) ) {
				case 1:
					{
					this.state = 1193;
					this.ifNotExists();
					}
					break;
				}
				this.state = 1196;
				this.tableName();
				this.state = 1198;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 74, this._ctx) ) {
				case 1:
					{
					this.state = 1197;
					this.createDefinitions();
					}
					break;
				}
				this.state = 1210;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 26)) & ~0x1F) === 0 && ((1 << (_la - 26)) & ((1 << (MariaDBParser.CHARACTER - 26)) | (1 << (MariaDBParser.COLLATE - 26)) | (1 << (MariaDBParser.DEFAULT - 26)))) !== 0) || _la === MariaDBParser.INDEX || _la === MariaDBParser.UNION || _la === MariaDBParser.CHAR || ((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (MariaDBParser.AUTOEXTEND_SIZE - 341)) | (1 << (MariaDBParser.AUTO_INCREMENT - 341)) | (1 << (MariaDBParser.AVG_ROW_LENGTH - 341)) | (1 << (MariaDBParser.CHECKSUM - 341)) | (1 << (MariaDBParser.PAGE_CHECKSUM - 341)) | (1 << (MariaDBParser.COMMENT - 341)))) !== 0) || ((((_la - 373)) & ~0x1F) === 0 && ((1 << (_la - 373)) & ((1 << (MariaDBParser.COMPRESSION - 373)) | (1 << (MariaDBParser.CONNECTION - 373)) | (1 << (MariaDBParser.DATA - 373)) | (1 << (MariaDBParser.DELAY_KEY_WRITE - 373)) | (1 << (MariaDBParser.ENCRYPTED - 373)))) !== 0) || ((((_la - 405)) & ~0x1F) === 0 && ((1 << (_la - 405)) & ((1 << (MariaDBParser.ENCRYPTION - 405)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ID - 405)) | (1 << (MariaDBParser.ENGINE - 405)))) !== 0) || _la === MariaDBParser.INSERT_METHOD || _la === MariaDBParser.KEY_BLOCK_SIZE || _la === MariaDBParser.MAX_ROWS || _la === MariaDBParser.MIN_ROWS || ((((_la - 544)) & ~0x1F) === 0 && ((1 << (_la - 544)) & ((1 << (MariaDBParser.PACK_KEYS - 544)) | (1 << (MariaDBParser.PAGE_COMPRESSED - 544)) | (1 << (MariaDBParser.PAGE_COMPRESSION_LEVEL - 544)) | (1 << (MariaDBParser.PASSWORD - 544)))) !== 0) || ((((_la - 604)) & ~0x1F) === 0 && ((1 << (_la - 604)) & ((1 << (MariaDBParser.ROW_FORMAT - 604)) | (1 << (MariaDBParser.START - 604)) | (1 << (MariaDBParser.STATS_AUTO_RECALC - 604)) | (1 << (MariaDBParser.STATS_PERSISTENT - 604)))) !== 0) || ((((_la - 636)) & ~0x1F) === 0 && ((1 << (_la - 636)) & ((1 << (MariaDBParser.STATS_SAMPLE_PAGES - 636)) | (1 << (MariaDBParser.STORAGE - 636)) | (1 << (MariaDBParser.TABLESPACE - 636)) | (1 << (MariaDBParser.TABLE_TYPE - 636)) | (1 << (MariaDBParser.TRANSACTIONAL - 636)))) !== 0) || _la === MariaDBParser.CHARSET || _la === MariaDBParser.ENGINE_ATTRIBUTE || _la === MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE || _la === MariaDBParser.STRING_LITERAL) {
					{
					this.state = 1200;
					this.tableOption();
					this.state = 1207;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 26)) & ~0x1F) === 0 && ((1 << (_la - 26)) & ((1 << (MariaDBParser.CHARACTER - 26)) | (1 << (MariaDBParser.COLLATE - 26)) | (1 << (MariaDBParser.DEFAULT - 26)))) !== 0) || _la === MariaDBParser.INDEX || _la === MariaDBParser.UNION || _la === MariaDBParser.CHAR || ((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & ((1 << (MariaDBParser.AUTOEXTEND_SIZE - 341)) | (1 << (MariaDBParser.AUTO_INCREMENT - 341)) | (1 << (MariaDBParser.AVG_ROW_LENGTH - 341)) | (1 << (MariaDBParser.CHECKSUM - 341)) | (1 << (MariaDBParser.PAGE_CHECKSUM - 341)) | (1 << (MariaDBParser.COMMENT - 341)))) !== 0) || ((((_la - 373)) & ~0x1F) === 0 && ((1 << (_la - 373)) & ((1 << (MariaDBParser.COMPRESSION - 373)) | (1 << (MariaDBParser.CONNECTION - 373)) | (1 << (MariaDBParser.DATA - 373)) | (1 << (MariaDBParser.DELAY_KEY_WRITE - 373)) | (1 << (MariaDBParser.ENCRYPTED - 373)))) !== 0) || ((((_la - 405)) & ~0x1F) === 0 && ((1 << (_la - 405)) & ((1 << (MariaDBParser.ENCRYPTION - 405)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ID - 405)) | (1 << (MariaDBParser.ENGINE - 405)))) !== 0) || _la === MariaDBParser.INSERT_METHOD || _la === MariaDBParser.KEY_BLOCK_SIZE || _la === MariaDBParser.MAX_ROWS || _la === MariaDBParser.MIN_ROWS || ((((_la - 544)) & ~0x1F) === 0 && ((1 << (_la - 544)) & ((1 << (MariaDBParser.PACK_KEYS - 544)) | (1 << (MariaDBParser.PAGE_COMPRESSED - 544)) | (1 << (MariaDBParser.PAGE_COMPRESSION_LEVEL - 544)) | (1 << (MariaDBParser.PASSWORD - 544)))) !== 0) || ((((_la - 604)) & ~0x1F) === 0 && ((1 << (_la - 604)) & ((1 << (MariaDBParser.ROW_FORMAT - 604)) | (1 << (MariaDBParser.START - 604)) | (1 << (MariaDBParser.STATS_AUTO_RECALC - 604)) | (1 << (MariaDBParser.STATS_PERSISTENT - 604)))) !== 0) || ((((_la - 636)) & ~0x1F) === 0 && ((1 << (_la - 636)) & ((1 << (MariaDBParser.STATS_SAMPLE_PAGES - 636)) | (1 << (MariaDBParser.STORAGE - 636)) | (1 << (MariaDBParser.TABLESPACE - 636)) | (1 << (MariaDBParser.TABLE_TYPE - 636)) | (1 << (MariaDBParser.TRANSACTIONAL - 636)))) !== 0) || _la === MariaDBParser.CHARSET || _la === MariaDBParser.ENGINE_ATTRIBUTE || _la === MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE || _la === MariaDBParser.COMMA || _la === MariaDBParser.STRING_LITERAL) {
						{
						{
						this.state = 1202;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === MariaDBParser.COMMA) {
							{
							this.state = 1201;
							this.match(MariaDBParser.COMMA);
							}
						}

						this.state = 1204;
						this.tableOption();
						}
						}
						this.state = 1209;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 1213;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.PARTITION) {
					{
					this.state = 1212;
					this.partitionDefinitions();
					}
				}

				this.state = 1216;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.IGNORE || _la === MariaDBParser.REPLACE) {
					{
					this.state = 1215;
					(_localctx as QueryCreateTableContext)._keyViolate = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MariaDBParser.IGNORE || _la === MariaDBParser.REPLACE)) {
						(_localctx as QueryCreateTableContext)._keyViolate = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 1219;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.AS) {
					{
					this.state = 1218;
					this.match(MariaDBParser.AS);
					}
				}

				this.state = 1221;
				this.selectStatement();
				}
				break;

			case 3:
				_localctx = new ColumnCreateTableContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1223;
				this.match(MariaDBParser.CREATE);
				this.state = 1225;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.OR) {
					{
					this.state = 1224;
					this.orReplace();
					}
				}

				this.state = 1228;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.TEMPORARY) {
					{
					this.state = 1227;
					this.match(MariaDBParser.TEMPORARY);
					}
				}

				this.state = 1230;
				this.match(MariaDBParser.TABLE);
				this.state = 1232;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 83, this._ctx) ) {
				case 1:
					{
					this.state = 1231;
					this.ifNotExists();
					}
					break;
				}
				this.state = 1234;
				this.tableName();
				this.state = 1235;
				this.createDefinitions();
				this.state = 1246;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 86, this._ctx) ) {
				case 1:
					{
					this.state = 1236;
					this.tableOption();
					this.state = 1243;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 85, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1238;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === MariaDBParser.COMMA) {
								{
								this.state = 1237;
								this.match(MariaDBParser.COMMA);
								}
							}

							this.state = 1240;
							this.tableOption();
							}
							}
						}
						this.state = 1245;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 85, this._ctx);
					}
					}
					break;
				}
				this.state = 1249;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.PARTITION) {
					{
					this.state = 1248;
					this.partitionDefinitions();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createTablespaceInnodb(): CreateTablespaceInnodbContext {
		let _localctx: CreateTablespaceInnodbContext = new CreateTablespaceInnodbContext(this._ctx, this.state);
		this.enterRule(_localctx, 44, MariaDBParser.RULE_createTablespaceInnodb);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1253;
			this.match(MariaDBParser.CREATE);
			this.state = 1254;
			this.match(MariaDBParser.TABLESPACE);
			this.state = 1255;
			this.uid();
			this.state = 1256;
			this.match(MariaDBParser.ADD);
			this.state = 1257;
			this.match(MariaDBParser.DATAFILE);
			this.state = 1258;
			_localctx._datafile = this.match(MariaDBParser.STRING_LITERAL);
			this.state = 1262;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.FILE_BLOCK_SIZE) {
				{
				this.state = 1259;
				this.match(MariaDBParser.FILE_BLOCK_SIZE);
				this.state = 1260;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				this.state = 1261;
				_localctx._fileBlockSize = this.fileSizeLiteral();
				}
			}

			this.state = 1269;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.ENGINE) {
				{
				this.state = 1264;
				this.match(MariaDBParser.ENGINE);
				this.state = 1266;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1265;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1268;
				this.engineName();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createTablespaceNdb(): CreateTablespaceNdbContext {
		let _localctx: CreateTablespaceNdbContext = new CreateTablespaceNdbContext(this._ctx, this.state);
		this.enterRule(_localctx, 46, MariaDBParser.RULE_createTablespaceNdb);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1271;
			this.match(MariaDBParser.CREATE);
			this.state = 1272;
			this.match(MariaDBParser.TABLESPACE);
			this.state = 1273;
			this.uid();
			this.state = 1274;
			this.match(MariaDBParser.ADD);
			this.state = 1275;
			this.match(MariaDBParser.DATAFILE);
			this.state = 1276;
			_localctx._datafile = this.match(MariaDBParser.STRING_LITERAL);
			this.state = 1277;
			this.match(MariaDBParser.USE);
			this.state = 1278;
			this.match(MariaDBParser.LOGFILE);
			this.state = 1279;
			this.match(MariaDBParser.GROUP);
			this.state = 1280;
			this.uid();
			this.state = 1286;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.EXTENT_SIZE) {
				{
				this.state = 1281;
				this.match(MariaDBParser.EXTENT_SIZE);
				this.state = 1283;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1282;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1285;
				_localctx._extentSize = this.fileSizeLiteral();
				}
			}

			this.state = 1293;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.INITIAL_SIZE) {
				{
				this.state = 1288;
				this.match(MariaDBParser.INITIAL_SIZE);
				this.state = 1290;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1289;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1292;
				_localctx._initialSize = this.fileSizeLiteral();
				}
			}

			this.state = 1300;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.AUTOEXTEND_SIZE) {
				{
				this.state = 1295;
				this.match(MariaDBParser.AUTOEXTEND_SIZE);
				this.state = 1297;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1296;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1299;
				_localctx._autoextendSize = this.fileSizeLiteral();
				}
			}

			this.state = 1307;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.MAX_SIZE) {
				{
				this.state = 1302;
				this.match(MariaDBParser.MAX_SIZE);
				this.state = 1304;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1303;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1306;
				_localctx._maxSize = this.fileSizeLiteral();
				}
			}

			this.state = 1314;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.NODEGROUP) {
				{
				this.state = 1309;
				this.match(MariaDBParser.NODEGROUP);
				this.state = 1311;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1310;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1313;
				this.uid();
				}
			}

			this.state = 1317;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.WAIT) {
				{
				this.state = 1316;
				this.match(MariaDBParser.WAIT);
				}
			}

			this.state = 1324;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.COMMENT) {
				{
				this.state = 1319;
				this.match(MariaDBParser.COMMENT);
				this.state = 1321;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1320;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1323;
				_localctx._comment = this.match(MariaDBParser.STRING_LITERAL);
				}
			}

			this.state = 1326;
			this.match(MariaDBParser.ENGINE);
			this.state = 1328;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.EQUAL_SYMBOL) {
				{
				this.state = 1327;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				}
			}

			this.state = 1330;
			this.engineName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createTrigger(): CreateTriggerContext {
		let _localctx: CreateTriggerContext = new CreateTriggerContext(this._ctx, this.state);
		this.enterRule(_localctx, 48, MariaDBParser.RULE_createTrigger);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1332;
			this.match(MariaDBParser.CREATE);
			this.state = 1334;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.OR) {
				{
				this.state = 1333;
				this.orReplace();
				}
			}

			this.state = 1337;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.DEFINER) {
				{
				this.state = 1336;
				this.ownerStatement();
				}
			}

			this.state = 1339;
			this.match(MariaDBParser.TRIGGER);
			this.state = 1340;
			_localctx._thisTrigger = this.fullId();
			this.state = 1341;
			_localctx._triggerTime = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MariaDBParser.BEFORE || _la === MariaDBParser.AFTER)) {
				_localctx._triggerTime = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1342;
			_localctx._triggerEvent = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MariaDBParser.DELETE || _la === MariaDBParser.INSERT || _la === MariaDBParser.UPDATE)) {
				_localctx._triggerEvent = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1343;
			this.match(MariaDBParser.ON);
			this.state = 1344;
			this.tableName();
			this.state = 1345;
			this.match(MariaDBParser.FOR);
			this.state = 1346;
			this.match(MariaDBParser.EACH);
			this.state = 1347;
			this.match(MariaDBParser.ROW);
			this.state = 1350;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 108, this._ctx) ) {
			case 1:
				{
				this.state = 1348;
				_localctx._triggerPlace = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.FOLLOWS || _la === MariaDBParser.PRECEDES)) {
					_localctx._triggerPlace = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1349;
				_localctx._otherTrigger = this.fullId();
				}
				break;
			}
			this.state = 1352;
			this.routineBody();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public withClause(): WithClauseContext {
		let _localctx: WithClauseContext = new WithClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 50, MariaDBParser.RULE_withClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1354;
			this.match(MariaDBParser.WITH);
			this.state = 1356;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 109, this._ctx) ) {
			case 1:
				{
				this.state = 1355;
				this.match(MariaDBParser.RECURSIVE);
				}
				break;
			}
			this.state = 1358;
			this.commonTableExpressions();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public commonTableExpressions(): CommonTableExpressionsContext {
		let _localctx: CommonTableExpressionsContext = new CommonTableExpressionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 52, MariaDBParser.RULE_commonTableExpressions);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1360;
			this.cteName();
			this.state = 1372;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.LR_BRACKET) {
				{
				this.state = 1361;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 1362;
				this.cteColumnName();
				this.state = 1367;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 1363;
					this.match(MariaDBParser.COMMA);
					this.state = 1364;
					this.cteColumnName();
					}
					}
					this.state = 1369;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1370;
				this.match(MariaDBParser.RR_BRACKET);
				}
			}

			this.state = 1374;
			this.match(MariaDBParser.AS);
			this.state = 1375;
			this.match(MariaDBParser.LR_BRACKET);
			this.state = 1376;
			this.dmlStatement();
			this.state = 1377;
			this.match(MariaDBParser.RR_BRACKET);
			this.state = 1380;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.COMMA) {
				{
				this.state = 1378;
				this.match(MariaDBParser.COMMA);
				this.state = 1379;
				this.commonTableExpressions();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cteName(): CteNameContext {
		let _localctx: CteNameContext = new CteNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 54, MariaDBParser.RULE_cteName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1382;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cteColumnName(): CteColumnNameContext {
		let _localctx: CteColumnNameContext = new CteColumnNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 56, MariaDBParser.RULE_cteColumnName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1384;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createView(): CreateViewContext {
		let _localctx: CreateViewContext = new CreateViewContext(this._ctx, this.state);
		this.enterRule(_localctx, 58, MariaDBParser.RULE_createView);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1386;
			this.match(MariaDBParser.CREATE);
			this.state = 1388;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.OR) {
				{
				this.state = 1387;
				this.orReplace();
				}
			}

			this.state = 1393;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.ALGORITHM) {
				{
				this.state = 1390;
				this.match(MariaDBParser.ALGORITHM);
				this.state = 1391;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				this.state = 1392;
				_localctx._algType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.MERGE || _la === MariaDBParser.TEMPTABLE || _la === MariaDBParser.UNDEFINED)) {
					_localctx._algType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 1396;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.DEFINER) {
				{
				this.state = 1395;
				this.ownerStatement();
				}
			}

			this.state = 1401;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.SQL) {
				{
				this.state = 1398;
				this.match(MariaDBParser.SQL);
				this.state = 1399;
				this.match(MariaDBParser.SECURITY);
				this.state = 1400;
				_localctx._secContext = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.DEFINER || _la === MariaDBParser.INVOKER)) {
					_localctx._secContext = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 1403;
			this.match(MariaDBParser.VIEW);
			this.state = 1404;
			this.fullId();
			this.state = 1409;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.LR_BRACKET) {
				{
				this.state = 1405;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 1406;
				this.uidList();
				this.state = 1407;
				this.match(MariaDBParser.RR_BRACKET);
				}
			}

			this.state = 1411;
			this.match(MariaDBParser.AS);
			this.state = 1431;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 122, this._ctx) ) {
			case 1:
				{
				this.state = 1412;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 1414;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.WITH) {
					{
					this.state = 1413;
					this.withClause();
					}
				}

				this.state = 1416;
				this.selectStatement();
				this.state = 1417;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;

			case 2:
				{
				this.state = 1420;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.WITH) {
					{
					this.state = 1419;
					this.withClause();
					}
				}

				this.state = 1422;
				this.selectStatement();
				this.state = 1429;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.WITH) {
					{
					this.state = 1423;
					this.match(MariaDBParser.WITH);
					this.state = 1425;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MariaDBParser.CASCADED || _la === MariaDBParser.LOCAL) {
						{
						this.state = 1424;
						_localctx._checkOption = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === MariaDBParser.CASCADED || _la === MariaDBParser.LOCAL)) {
							_localctx._checkOption = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
					}

					this.state = 1427;
					this.match(MariaDBParser.CHECK);
					this.state = 1428;
					this.match(MariaDBParser.OPTION);
					}
				}

				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createSequence(): CreateSequenceContext {
		let _localctx: CreateSequenceContext = new CreateSequenceContext(this._ctx, this.state);
		this.enterRule(_localctx, 60, MariaDBParser.RULE_createSequence);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1433;
			this.match(MariaDBParser.CREATE);
			this.state = 1435;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.OR) {
				{
				this.state = 1434;
				this.orReplace();
				}
			}

			this.state = 1438;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.TEMPORARY) {
				{
				this.state = 1437;
				this.match(MariaDBParser.TEMPORARY);
				}
			}

			this.state = 1440;
			this.match(MariaDBParser.SEQUENCE);
			this.state = 1442;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 125, this._ctx) ) {
			case 1:
				{
				this.state = 1441;
				this.ifNotExists();
				}
				break;
			}
			this.state = 1444;
			this.fullId();
			this.state = 1449;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 127, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					this.state = 1447;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 126, this._ctx) ) {
					case 1:
						{
						this.state = 1445;
						this.sequenceSpec();
						}
						break;

					case 2:
						{
						this.state = 1446;
						this.tableOption();
						}
						break;
					}
					}
				}
				this.state = 1451;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 127, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sequenceSpec(): SequenceSpecContext {
		let _localctx: SequenceSpecContext = new SequenceSpecContext(this._ctx, this.state);
		this.enterRule(_localctx, 62, MariaDBParser.RULE_sequenceSpec);
		let _la: number;
		try {
			this.state = 1491;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 134, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1452;
				this.match(MariaDBParser.INCREMENT);
				this.state = 1454;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.BY || _la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1453;
					_la = this._input.LA(1);
					if (!(_la === MariaDBParser.BY || _la === MariaDBParser.EQUAL_SYMBOL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 1456;
				this.decimalLiteral();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1457;
				this.match(MariaDBParser.MINVALUE);
				this.state = 1459;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1458;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1461;
				this.decimalLiteral();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1462;
				this.match(MariaDBParser.NO);
				this.state = 1463;
				this.match(MariaDBParser.MINVALUE);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1464;
				this.match(MariaDBParser.NOMINVALUE);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1465;
				this.match(MariaDBParser.MAXVALUE);
				this.state = 1467;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1466;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1469;
				this.decimalLiteral();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1470;
				this.match(MariaDBParser.NO);
				this.state = 1471;
				this.match(MariaDBParser.MAXVALUE);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1472;
				this.match(MariaDBParser.NOMAXVALUE);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1473;
				this.match(MariaDBParser.START);
				this.state = 1475;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.WITH || _la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1474;
					_la = this._input.LA(1);
					if (!(_la === MariaDBParser.WITH || _la === MariaDBParser.EQUAL_SYMBOL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 1477;
				this.decimalLiteral();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1478;
				this.match(MariaDBParser.CACHE);
				this.state = 1480;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1479;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1482;
				this.decimalLiteral();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1483;
				this.match(MariaDBParser.NOCACHE);
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1484;
				this.match(MariaDBParser.CYCLE);
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1485;
				this.match(MariaDBParser.NOCYCLE);
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1486;
				this.match(MariaDBParser.RESTART);
				this.state = 1488;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.WITH || _la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1487;
					_la = this._input.LA(1);
					if (!(_la === MariaDBParser.WITH || _la === MariaDBParser.EQUAL_SYMBOL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 1490;
				this.decimalLiteral();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createDatabaseOption(): CreateDatabaseOptionContext {
		let _localctx: CreateDatabaseOptionContext = new CreateDatabaseOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 64, MariaDBParser.RULE_createDatabaseOption);
		let _la: number;
		try {
			this.state = 1526;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 143, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1494;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.DEFAULT) {
					{
					this.state = 1493;
					this.match(MariaDBParser.DEFAULT);
					}
				}

				this.state = 1496;
				this.charSet();
				this.state = 1498;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1497;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1502;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.BINARY:
				case MariaDBParser.ARMSCII8:
				case MariaDBParser.ASCII:
				case MariaDBParser.BIG5:
				case MariaDBParser.CP1250:
				case MariaDBParser.CP1251:
				case MariaDBParser.CP1256:
				case MariaDBParser.CP1257:
				case MariaDBParser.CP850:
				case MariaDBParser.CP852:
				case MariaDBParser.CP866:
				case MariaDBParser.CP932:
				case MariaDBParser.DEC8:
				case MariaDBParser.EUCJPMS:
				case MariaDBParser.EUCKR:
				case MariaDBParser.GB18030:
				case MariaDBParser.GB2312:
				case MariaDBParser.GBK:
				case MariaDBParser.GEOSTD8:
				case MariaDBParser.GREEK:
				case MariaDBParser.HEBREW:
				case MariaDBParser.HP8:
				case MariaDBParser.KEYBCS2:
				case MariaDBParser.KOI8R:
				case MariaDBParser.KOI8U:
				case MariaDBParser.LATIN1:
				case MariaDBParser.LATIN2:
				case MariaDBParser.LATIN5:
				case MariaDBParser.LATIN7:
				case MariaDBParser.MACCE:
				case MariaDBParser.MACROMAN:
				case MariaDBParser.SJIS:
				case MariaDBParser.SWE7:
				case MariaDBParser.TIS620:
				case MariaDBParser.UCS2:
				case MariaDBParser.UJIS:
				case MariaDBParser.UTF16:
				case MariaDBParser.UTF16LE:
				case MariaDBParser.UTF32:
				case MariaDBParser.UTF8:
				case MariaDBParser.UTF8MB3:
				case MariaDBParser.UTF8MB4:
				case MariaDBParser.CHARSET_REVERSE_QOUTE_STRING:
				case MariaDBParser.STRING_LITERAL:
					{
					this.state = 1500;
					this.charsetName();
					}
					break;
				case MariaDBParser.DEFAULT:
					{
					this.state = 1501;
					this.match(MariaDBParser.DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1505;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.DEFAULT) {
					{
					this.state = 1504;
					this.match(MariaDBParser.DEFAULT);
					}
				}

				this.state = 1507;
				this.match(MariaDBParser.COLLATE);
				this.state = 1509;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1508;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1511;
				this.collationName();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1513;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.DEFAULT) {
					{
					this.state = 1512;
					this.match(MariaDBParser.DEFAULT);
					}
				}

				this.state = 1515;
				this.match(MariaDBParser.ENCRYPTION);
				this.state = 1517;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1516;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1519;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1520;
				this.match(MariaDBParser.READ);
				this.state = 1521;
				this.match(MariaDBParser.ONLY);
				this.state = 1523;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1522;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1525;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.DEFAULT || _la === MariaDBParser.ZERO_DECIMAL || _la === MariaDBParser.ONE_DECIMAL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public charSet(): CharSetContext {
		let _localctx: CharSetContext = new CharSetContext(this._ctx, this.state);
		this.enterRule(_localctx, 66, MariaDBParser.RULE_charSet);
		try {
			this.state = 1533;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.CHARACTER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1528;
				this.match(MariaDBParser.CHARACTER);
				this.state = 1529;
				this.match(MariaDBParser.SET);
				}
				break;
			case MariaDBParser.CHARSET:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1530;
				this.match(MariaDBParser.CHARSET);
				}
				break;
			case MariaDBParser.CHAR:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1531;
				this.match(MariaDBParser.CHAR);
				this.state = 1532;
				this.match(MariaDBParser.SET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public currentUserExpression(): CurrentUserExpressionContext {
		let _localctx: CurrentUserExpressionContext = new CurrentUserExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 68, MariaDBParser.RULE_currentUserExpression);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1535;
			this.match(MariaDBParser.CURRENT_USER);
			this.state = 1538;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 145, this._ctx) ) {
			case 1:
				{
				this.state = 1536;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 1537;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ownerStatement(): OwnerStatementContext {
		let _localctx: OwnerStatementContext = new OwnerStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 70, MariaDBParser.RULE_ownerStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1540;
			this.match(MariaDBParser.DEFINER);
			this.state = 1541;
			this.match(MariaDBParser.EQUAL_SYMBOL);
			this.state = 1545;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 146, this._ctx) ) {
			case 1:
				{
				this.state = 1542;
				this.userName();
				}
				break;

			case 2:
				{
				this.state = 1543;
				this.currentUserExpression();
				}
				break;

			case 3:
				{
				this.state = 1544;
				this.match(MariaDBParser.CURRENT_ROLE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public scheduleExpression(): ScheduleExpressionContext {
		let _localctx: ScheduleExpressionContext = new ScheduleExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 72, MariaDBParser.RULE_scheduleExpression);
		let _la: number;
		try {
			this.state = 1581;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.AT:
				_localctx = new PreciseScheduleContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1547;
				this.match(MariaDBParser.AT);
				this.state = 1548;
				this.timestampValue();
				this.state = 1552;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.PLUS) {
					{
					{
					this.state = 1549;
					this.intervalExpr();
					}
					}
					this.state = 1554;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case MariaDBParser.EVERY:
				_localctx = new IntervalScheduleContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1555;
				this.match(MariaDBParser.EVERY);
				this.state = 1558;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 148, this._ctx) ) {
				case 1:
					{
					this.state = 1556;
					this.decimalLiteral();
					}
					break;

				case 2:
					{
					this.state = 1557;
					this.expression(0);
					}
					break;
				}
				this.state = 1560;
				this.intervalType();
				this.state = 1569;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.STARTS) {
					{
					this.state = 1561;
					this.match(MariaDBParser.STARTS);
					this.state = 1562;
					(_localctx as IntervalScheduleContext)._startTimestamp = this.timestampValue();
					this.state = 1566;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === MariaDBParser.PLUS) {
						{
						{
						this.state = 1563;
						(_localctx as IntervalScheduleContext)._intervalExpr = this.intervalExpr();
						(_localctx as IntervalScheduleContext)._startIntervals.push((_localctx as IntervalScheduleContext)._intervalExpr);
						}
						}
						this.state = 1568;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 1579;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.ENDS) {
					{
					this.state = 1571;
					this.match(MariaDBParser.ENDS);
					this.state = 1572;
					(_localctx as IntervalScheduleContext)._endTimestamp = this.timestampValue();
					this.state = 1576;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === MariaDBParser.PLUS) {
						{
						{
						this.state = 1573;
						(_localctx as IntervalScheduleContext)._intervalExpr = this.intervalExpr();
						(_localctx as IntervalScheduleContext)._endIntervals.push((_localctx as IntervalScheduleContext)._intervalExpr);
						}
						}
						this.state = 1578;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public timestampValue(): TimestampValueContext {
		let _localctx: TimestampValueContext = new TimestampValueContext(this._ctx, this.state);
		this.enterRule(_localctx, 74, MariaDBParser.RULE_timestampValue);
		try {
			this.state = 1587;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 154, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1583;
				this.match(MariaDBParser.CURRENT_TIMESTAMP);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1584;
				this.stringLiteral();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1585;
				this.decimalLiteral();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1586;
				this.expression(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public intervalExpr(): IntervalExprContext {
		let _localctx: IntervalExprContext = new IntervalExprContext(this._ctx, this.state);
		this.enterRule(_localctx, 76, MariaDBParser.RULE_intervalExpr);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1589;
			this.match(MariaDBParser.PLUS);
			this.state = 1590;
			this.match(MariaDBParser.INTERVAL);
			this.state = 1593;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 155, this._ctx) ) {
			case 1:
				{
				this.state = 1591;
				this.decimalLiteral();
				}
				break;

			case 2:
				{
				this.state = 1592;
				this.expression(0);
				}
				break;
			}
			this.state = 1595;
			this.intervalType();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public intervalType(): IntervalTypeContext {
		let _localctx: IntervalTypeContext = new IntervalTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 78, MariaDBParser.RULE_intervalType);
		try {
			this.state = 1610;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.QUARTER:
			case MariaDBParser.MONTH:
			case MariaDBParser.DAY:
			case MariaDBParser.HOUR:
			case MariaDBParser.MINUTE:
			case MariaDBParser.WEEK:
			case MariaDBParser.SECOND:
			case MariaDBParser.MICROSECOND:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1597;
				this.intervalTypeBase();
				}
				break;
			case MariaDBParser.YEAR:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1598;
				this.match(MariaDBParser.YEAR);
				}
				break;
			case MariaDBParser.YEAR_MONTH:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1599;
				this.match(MariaDBParser.YEAR_MONTH);
				}
				break;
			case MariaDBParser.DAY_HOUR:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1600;
				this.match(MariaDBParser.DAY_HOUR);
				}
				break;
			case MariaDBParser.DAY_MINUTE:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1601;
				this.match(MariaDBParser.DAY_MINUTE);
				}
				break;
			case MariaDBParser.DAY_SECOND:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1602;
				this.match(MariaDBParser.DAY_SECOND);
				}
				break;
			case MariaDBParser.HOUR_MINUTE:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1603;
				this.match(MariaDBParser.HOUR_MINUTE);
				}
				break;
			case MariaDBParser.HOUR_SECOND:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1604;
				this.match(MariaDBParser.HOUR_SECOND);
				}
				break;
			case MariaDBParser.MINUTE_SECOND:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1605;
				this.match(MariaDBParser.MINUTE_SECOND);
				}
				break;
			case MariaDBParser.SECOND_MICROSECOND:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1606;
				this.match(MariaDBParser.SECOND_MICROSECOND);
				}
				break;
			case MariaDBParser.MINUTE_MICROSECOND:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1607;
				this.match(MariaDBParser.MINUTE_MICROSECOND);
				}
				break;
			case MariaDBParser.HOUR_MICROSECOND:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1608;
				this.match(MariaDBParser.HOUR_MICROSECOND);
				}
				break;
			case MariaDBParser.DAY_MICROSECOND:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1609;
				this.match(MariaDBParser.DAY_MICROSECOND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public enableType(): EnableTypeContext {
		let _localctx: EnableTypeContext = new EnableTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 80, MariaDBParser.RULE_enableType);
		try {
			this.state = 1617;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 157, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1612;
				this.match(MariaDBParser.ENABLE);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1613;
				this.match(MariaDBParser.DISABLE);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1614;
				this.match(MariaDBParser.DISABLE);
				this.state = 1615;
				this.match(MariaDBParser.ON);
				this.state = 1616;
				this.match(MariaDBParser.SLAVE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexType(): IndexTypeContext {
		let _localctx: IndexTypeContext = new IndexTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 82, MariaDBParser.RULE_indexType);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1619;
			this.match(MariaDBParser.USING);
			this.state = 1620;
			_la = this._input.LA(1);
			if (!(_la === MariaDBParser.BTREE || _la === MariaDBParser.HASH || _la === MariaDBParser.RTREE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexOption(): IndexOptionContext {
		let _localctx: IndexOptionContext = new IndexOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 84, MariaDBParser.RULE_indexOption);
		let _la: number;
		try {
			this.state = 1652;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.KEY_BLOCK_SIZE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1622;
				this.match(MariaDBParser.KEY_BLOCK_SIZE);
				this.state = 1624;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1623;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1626;
				this.fileSizeLiteral();
				}
				break;
			case MariaDBParser.USING:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1627;
				this.indexType();
				}
				break;
			case MariaDBParser.WITH:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1628;
				this.match(MariaDBParser.WITH);
				this.state = 1629;
				this.match(MariaDBParser.PARSER);
				this.state = 1630;
				this.uid();
				}
				break;
			case MariaDBParser.COMMENT:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1631;
				this.match(MariaDBParser.COMMENT);
				this.state = 1632;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			case MariaDBParser.INVISIBLE:
			case MariaDBParser.VISIBLE:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1633;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.INVISIBLE || _la === MariaDBParser.VISIBLE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case MariaDBParser.ENGINE_ATTRIBUTE:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1634;
				this.match(MariaDBParser.ENGINE_ATTRIBUTE);
				this.state = 1636;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1635;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1638;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			case MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1639;
				this.match(MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE);
				this.state = 1641;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1640;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1643;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			case MariaDBParser.CLUSTERING:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1644;
				this.match(MariaDBParser.CLUSTERING);
				this.state = 1645;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				this.state = 1646;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.NO || _la === MariaDBParser.YES)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case MariaDBParser.IGNORED:
			case MariaDBParser.NOT:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1650;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.IGNORED:
					{
					this.state = 1647;
					this.match(MariaDBParser.IGNORED);
					}
					break;
				case MariaDBParser.NOT:
					{
					this.state = 1648;
					this.match(MariaDBParser.NOT);
					this.state = 1649;
					this.match(MariaDBParser.IGNORED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedureParameter(): ProcedureParameterContext {
		let _localctx: ProcedureParameterContext = new ProcedureParameterContext(this._ctx, this.state);
		this.enterRule(_localctx, 86, MariaDBParser.RULE_procedureParameter);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1655;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.IN || _la === MariaDBParser.INOUT || _la === MariaDBParser.OUT) {
				{
				this.state = 1654;
				_localctx._direction = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.IN || _la === MariaDBParser.INOUT || _la === MariaDBParser.OUT)) {
					_localctx._direction = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 1657;
			this.uid();
			this.state = 1658;
			this.dataType();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public functionParameter(): FunctionParameterContext {
		let _localctx: FunctionParameterContext = new FunctionParameterContext(this._ctx, this.state);
		this.enterRule(_localctx, 88, MariaDBParser.RULE_functionParameter);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1660;
			this.uid();
			this.state = 1661;
			this.dataType();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public routineOption(): RoutineOptionContext {
		let _localctx: RoutineOptionContext = new RoutineOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 90, MariaDBParser.RULE_routineOption);
		let _la: number;
		try {
			this.state = 1686;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.COMMENT:
				_localctx = new RoutineCommentContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1663;
				this.match(MariaDBParser.COMMENT);
				this.state = 1664;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			case MariaDBParser.LANGUAGE:
				_localctx = new RoutineLanguageContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1665;
				this.match(MariaDBParser.LANGUAGE);
				this.state = 1666;
				this.match(MariaDBParser.SQL);
				}
				break;
			case MariaDBParser.DETERMINISTIC:
			case MariaDBParser.NOT:
				_localctx = new RoutineBehaviorContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1668;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.NOT) {
					{
					this.state = 1667;
					this.match(MariaDBParser.NOT);
					}
				}

				this.state = 1670;
				this.match(MariaDBParser.DETERMINISTIC);
				}
				break;
			case MariaDBParser.MODIFIES:
			case MariaDBParser.READS:
			case MariaDBParser.CONTAINS:
			case MariaDBParser.NO:
				_localctx = new RoutineDataContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1681;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.CONTAINS:
					{
					this.state = 1671;
					this.match(MariaDBParser.CONTAINS);
					this.state = 1672;
					this.match(MariaDBParser.SQL);
					}
					break;
				case MariaDBParser.NO:
					{
					this.state = 1673;
					this.match(MariaDBParser.NO);
					this.state = 1674;
					this.match(MariaDBParser.SQL);
					}
					break;
				case MariaDBParser.READS:
					{
					this.state = 1675;
					this.match(MariaDBParser.READS);
					this.state = 1676;
					this.match(MariaDBParser.SQL);
					this.state = 1677;
					this.match(MariaDBParser.DATA);
					}
					break;
				case MariaDBParser.MODIFIES:
					{
					this.state = 1678;
					this.match(MariaDBParser.MODIFIES);
					this.state = 1679;
					this.match(MariaDBParser.SQL);
					this.state = 1680;
					this.match(MariaDBParser.DATA);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case MariaDBParser.SQL:
				_localctx = new RoutineSecurityContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1683;
				this.match(MariaDBParser.SQL);
				this.state = 1684;
				this.match(MariaDBParser.SECURITY);
				this.state = 1685;
				(_localctx as RoutineSecurityContext)._context = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.DEFINER || _la === MariaDBParser.INVOKER)) {
					(_localctx as RoutineSecurityContext)._context = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public serverOption(): ServerOptionContext {
		let _localctx: ServerOptionContext = new ServerOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 92, MariaDBParser.RULE_serverOption);
		try {
			this.state = 1702;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.HOST:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1688;
				this.match(MariaDBParser.HOST);
				this.state = 1689;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			case MariaDBParser.DATABASE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1690;
				this.match(MariaDBParser.DATABASE);
				this.state = 1691;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			case MariaDBParser.USER:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1692;
				this.match(MariaDBParser.USER);
				this.state = 1693;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			case MariaDBParser.PASSWORD:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1694;
				this.match(MariaDBParser.PASSWORD);
				this.state = 1695;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			case MariaDBParser.SOCKET:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1696;
				this.match(MariaDBParser.SOCKET);
				this.state = 1697;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			case MariaDBParser.OWNER:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1698;
				this.match(MariaDBParser.OWNER);
				this.state = 1699;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			case MariaDBParser.PORT:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1700;
				this.match(MariaDBParser.PORT);
				this.state = 1701;
				this.decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createDefinitions(): CreateDefinitionsContext {
		let _localctx: CreateDefinitionsContext = new CreateDefinitionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 94, MariaDBParser.RULE_createDefinitions);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1704;
			this.match(MariaDBParser.LR_BRACKET);
			this.state = 1705;
			this.createDefinition();
			this.state = 1710;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.COMMA) {
				{
				{
				this.state = 1706;
				this.match(MariaDBParser.COMMA);
				this.state = 1707;
				this.createDefinition();
				}
				}
				this.state = 1712;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1713;
			this.match(MariaDBParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createDefinition(): CreateDefinitionContext {
		let _localctx: CreateDefinitionContext = new CreateDefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 96, MariaDBParser.RULE_createDefinition);
		try {
			this.state = 1720;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 169, this._ctx) ) {
			case 1:
				_localctx = new ColumnDeclarationContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1715;
				this.uid();
				this.state = 1716;
				this.columnDefinition();
				}
				break;

			case 2:
				_localctx = new ConstraintDeclarationContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1718;
				this.tableConstraint();
				}
				break;

			case 3:
				_localctx = new IndexDeclarationContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1719;
				this.indexColumnDefinition();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnDefinition(): ColumnDefinitionContext {
		let _localctx: ColumnDefinitionContext = new ColumnDefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 98, MariaDBParser.RULE_columnDefinition);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1722;
			this.dataType();
			this.state = 1726;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 170, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1723;
					this.columnConstraint();
					}
					}
				}
				this.state = 1728;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 170, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnConstraint(): ColumnConstraintContext {
		let _localctx: ColumnConstraintContext = new ColumnConstraintContext(this._ctx, this.state);
		this.enterRule(_localctx, 100, MariaDBParser.RULE_columnConstraint);
		let _la: number;
		try {
			this.state = 1782;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.NOT:
			case MariaDBParser.NULL_LITERAL:
			case MariaDBParser.NULL_SPEC_LITERAL:
				_localctx = new NullColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1729;
				this.nullNotnull();
				}
				break;
			case MariaDBParser.DEFAULT:
				_localctx = new DefaultColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1730;
				this.match(MariaDBParser.DEFAULT);
				this.state = 1731;
				this.defaultValue();
				}
				break;
			case MariaDBParser.VISIBLE:
				_localctx = new VisibilityColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1732;
				this.match(MariaDBParser.VISIBLE);
				}
				break;
			case MariaDBParser.INVISIBLE:
				_localctx = new InvisibilityColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1733;
				this.match(MariaDBParser.INVISIBLE);
				}
				break;
			case MariaDBParser.ON:
			case MariaDBParser.AUTO_INCREMENT:
				_localctx = new AutoIncrementColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1738;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.AUTO_INCREMENT:
					{
					this.state = 1734;
					this.match(MariaDBParser.AUTO_INCREMENT);
					}
					break;
				case MariaDBParser.ON:
					{
					this.state = 1735;
					this.match(MariaDBParser.ON);
					this.state = 1736;
					this.match(MariaDBParser.UPDATE);
					this.state = 1737;
					this.currentTimestamp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case MariaDBParser.KEY:
			case MariaDBParser.PRIMARY:
				_localctx = new PrimaryKeyColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1741;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.PRIMARY) {
					{
					this.state = 1740;
					this.match(MariaDBParser.PRIMARY);
					}
				}

				this.state = 1743;
				this.match(MariaDBParser.KEY);
				}
				break;
			case MariaDBParser.UNIQUE:
				_localctx = new UniqueKeyColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1744;
				this.match(MariaDBParser.UNIQUE);
				this.state = 1746;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 173, this._ctx) ) {
				case 1:
					{
					this.state = 1745;
					this.match(MariaDBParser.KEY);
					}
					break;
				}
				}
				break;
			case MariaDBParser.COMMENT:
				_localctx = new CommentColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1748;
				this.match(MariaDBParser.COMMENT);
				this.state = 1749;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			case MariaDBParser.COLUMN_FORMAT:
				_localctx = new FormatColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1750;
				this.match(MariaDBParser.COLUMN_FORMAT);
				this.state = 1751;
				(_localctx as FormatColumnConstraintContext)._colformat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.DEFAULT || _la === MariaDBParser.DYNAMIC || _la === MariaDBParser.FIXED)) {
					(_localctx as FormatColumnConstraintContext)._colformat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case MariaDBParser.STORAGE:
				_localctx = new StorageColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1752;
				this.match(MariaDBParser.STORAGE);
				this.state = 1753;
				(_localctx as StorageColumnConstraintContext)._storageval = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.DEFAULT || _la === MariaDBParser.DISK || _la === MariaDBParser.MEMORY)) {
					(_localctx as StorageColumnConstraintContext)._storageval = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case MariaDBParser.REFERENCES:
				_localctx = new ReferenceColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1754;
				this.referenceDefinition();
				}
				break;
			case MariaDBParser.COLLATE:
				_localctx = new CollateColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1755;
				this.match(MariaDBParser.COLLATE);
				this.state = 1756;
				this.collationName();
				}
				break;
			case MariaDBParser.AS:
			case MariaDBParser.GENERATED:
				_localctx = new GeneratedColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1759;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.GENERATED) {
					{
					this.state = 1757;
					this.match(MariaDBParser.GENERATED);
					this.state = 1758;
					this.match(MariaDBParser.ALWAYS);
					}
				}

				this.state = 1761;
				this.match(MariaDBParser.AS);
				this.state = 1762;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 1763;
				this.expression(0);
				this.state = 1764;
				this.match(MariaDBParser.RR_BRACKET);
				this.state = 1766;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.STORED || _la === MariaDBParser.VIRTUAL || _la === MariaDBParser.PERSISTENT) {
					{
					this.state = 1765;
					_la = this._input.LA(1);
					if (!(_la === MariaDBParser.STORED || _la === MariaDBParser.VIRTUAL || _la === MariaDBParser.PERSISTENT)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				}
				break;
			case MariaDBParser.SERIAL:
				_localctx = new SerialDefaultColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 1768;
				this.match(MariaDBParser.SERIAL);
				this.state = 1769;
				this.match(MariaDBParser.DEFAULT);
				this.state = 1770;
				this.match(MariaDBParser.VALUE);
				}
				break;
			case MariaDBParser.CHECK:
			case MariaDBParser.CONSTRAINT:
				_localctx = new CheckColumnConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 1775;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.CONSTRAINT) {
					{
					this.state = 1771;
					this.match(MariaDBParser.CONSTRAINT);
					this.state = 1773;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MariaDBParser.ATTRIBUTE) | (1 << MariaDBParser.BODY) | (1 << MariaDBParser.BUCKETS) | (1 << MariaDBParser.CONDITION))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (MariaDBParser.CURRENT - 36)) | (1 << (MariaDBParser.CURRENT_ROLE - 36)) | (1 << (MariaDBParser.CURRENT_USER - 36)) | (1 << (MariaDBParser.DATABASE - 36)) | (1 << (MariaDBParser.DEFAULT - 36)) | (1 << (MariaDBParser.DIAGNOSTICS - 36)) | (1 << (MariaDBParser.EMPTY - 36)) | (1 << (MariaDBParser.EXCEPT - 36)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (MariaDBParser.GROUP - 73)) | (1 << (MariaDBParser.IF - 73)) | (1 << (MariaDBParser.IGNORED - 73)) | (1 << (MariaDBParser.INSERT - 73)) | (1 << (MariaDBParser.LATERAL - 73)) | (1 << (MariaDBParser.LEFT - 73)) | (1 << (MariaDBParser.LOCKED - 73)))) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & ((1 << (MariaDBParser.MAXVALUE - 110)) | (1 << (MariaDBParser.MINVALUE - 110)) | (1 << (MariaDBParser.NUMBER - 110)) | (1 << (MariaDBParser.OPTIONAL - 110)) | (1 << (MariaDBParser.ORDER - 110)) | (1 << (MariaDBParser.PRIMARY - 110)) | (1 << (MariaDBParser.PACKAGE - 110)))) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (MariaDBParser.REPLACE - 142)) | (1 << (MariaDBParser.RIGHT - 142)) | (1 << (MariaDBParser.SCHEMA - 142)) | (1 << (MariaDBParser.SKIP_ - 142)) | (1 << (MariaDBParser.STACKED - 142)) | (1 << (MariaDBParser.STATEMENT - 142)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MariaDBParser.DATE - 217)) | (1 << (MariaDBParser.TIME - 217)) | (1 << (MariaDBParser.TIMESTAMP - 217)) | (1 << (MariaDBParser.DATETIME - 217)) | (1 << (MariaDBParser.YEAR - 217)) | (1 << (MariaDBParser.BINARY - 217)) | (1 << (MariaDBParser.TEXT - 217)) | (1 << (MariaDBParser.ENUM - 217)) | (1 << (MariaDBParser.SERIAL - 217)))) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & ((1 << (MariaDBParser.JSON_ARRAY - 251)) | (1 << (MariaDBParser.JSON_ARRAYAGG - 251)) | (1 << (MariaDBParser.JSON_ARRAY_APPEND - 251)) | (1 << (MariaDBParser.JSON_ARRAY_INSERT - 251)) | (1 << (MariaDBParser.JSON_CONTAINS - 251)) | (1 << (MariaDBParser.JSON_CONTAINS_PATH - 251)) | (1 << (MariaDBParser.JSON_DEPTH - 251)) | (1 << (MariaDBParser.JSON_EXTRACT - 251)) | (1 << (MariaDBParser.JSON_INSERT - 251)) | (1 << (MariaDBParser.JSON_KEYS - 251)) | (1 << (MariaDBParser.JSON_LENGTH - 251)) | (1 << (MariaDBParser.JSON_MERGE - 251)) | (1 << (MariaDBParser.JSON_MERGE_PATCH - 251)) | (1 << (MariaDBParser.JSON_MERGE_PRESERVE - 251)) | (1 << (MariaDBParser.JSON_OBJECT - 251)) | (1 << (MariaDBParser.JSON_OBJECTAGG - 251)) | (1 << (MariaDBParser.JSON_OVERLAPS - 251)) | (1 << (MariaDBParser.JSON_PRETTY - 251)) | (1 << (MariaDBParser.JSON_QUOTE - 251)) | (1 << (MariaDBParser.JSON_REMOVE - 251)) | (1 << (MariaDBParser.JSON_REPLACE - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALID - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT - 251)) | (1 << (MariaDBParser.JSON_SEARCH - 251)) | (1 << (MariaDBParser.JSON_SET - 251)) | (1 << (MariaDBParser.JSON_STORAGE_FREE - 251)) | (1 << (MariaDBParser.JSON_STORAGE_SIZE - 251)) | (1 << (MariaDBParser.JSON_TABLE - 251)) | (1 << (MariaDBParser.JSON_TYPE - 251)) | (1 << (MariaDBParser.JSON_UNQUOTE - 251)) | (1 << (MariaDBParser.JSON_VALID - 251)) | (1 << (MariaDBParser.JSON_VALUE - 251)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (MariaDBParser.NESTED - 283)) | (1 << (MariaDBParser.ORDINALITY - 283)) | (1 << (MariaDBParser.PATH - 283)) | (1 << (MariaDBParser.AVG - 283)) | (1 << (MariaDBParser.BIT_AND - 283)) | (1 << (MariaDBParser.BIT_OR - 283)) | (1 << (MariaDBParser.BIT_XOR - 283)) | (1 << (MariaDBParser.COUNT - 283)) | (1 << (MariaDBParser.CUME_DIST - 283)) | (1 << (MariaDBParser.DENSE_RANK - 283)) | (1 << (MariaDBParser.FIRST_VALUE - 283)) | (1 << (MariaDBParser.GROUP_CONCAT - 283)) | (1 << (MariaDBParser.LAG - 283)) | (1 << (MariaDBParser.LAST_VALUE - 283)) | (1 << (MariaDBParser.LEAD - 283)) | (1 << (MariaDBParser.MAX - 283)) | (1 << (MariaDBParser.MIN - 283)) | (1 << (MariaDBParser.NTILE - 283)) | (1 << (MariaDBParser.NTH_VALUE - 283)) | (1 << (MariaDBParser.PERCENT_RANK - 283)) | (1 << (MariaDBParser.RANK - 283)) | (1 << (MariaDBParser.ROW_NUMBER - 283)) | (1 << (MariaDBParser.STD - 283)) | (1 << (MariaDBParser.STDDEV - 283)) | (1 << (MariaDBParser.STDDEV_POP - 283)) | (1 << (MariaDBParser.STDDEV_SAMP - 283)) | (1 << (MariaDBParser.SUM - 283)) | (1 << (MariaDBParser.VAR_POP - 283)) | (1 << (MariaDBParser.VAR_SAMP - 283)) | (1 << (MariaDBParser.VARIANCE - 283)) | (1 << (MariaDBParser.CURRENT_DATE - 283)) | (1 << (MariaDBParser.CURRENT_TIME - 283)))) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & ((1 << (MariaDBParser.CURRENT_TIMESTAMP - 315)) | (1 << (MariaDBParser.LOCALTIME - 315)) | (1 << (MariaDBParser.CURDATE - 315)) | (1 << (MariaDBParser.CURTIME - 315)) | (1 << (MariaDBParser.DATE_ADD - 315)) | (1 << (MariaDBParser.DATE_SUB - 315)) | (1 << (MariaDBParser.LOCALTIMESTAMP - 315)) | (1 << (MariaDBParser.NOW - 315)) | (1 << (MariaDBParser.POSITION - 315)) | (1 << (MariaDBParser.SUBSTR - 315)) | (1 << (MariaDBParser.SUBSTRING - 315)) | (1 << (MariaDBParser.SYSDATE - 315)) | (1 << (MariaDBParser.TRIM - 315)) | (1 << (MariaDBParser.UTC_DATE - 315)) | (1 << (MariaDBParser.UTC_TIME - 315)) | (1 << (MariaDBParser.UTC_TIMESTAMP - 315)) | (1 << (MariaDBParser.ACCOUNT - 315)) | (1 << (MariaDBParser.ACTION - 315)) | (1 << (MariaDBParser.AFTER - 315)) | (1 << (MariaDBParser.AGGREGATE - 315)) | (1 << (MariaDBParser.ALGORITHM - 315)) | (1 << (MariaDBParser.ANY - 315)) | (1 << (MariaDBParser.AT - 315)) | (1 << (MariaDBParser.AUTHORS - 315)) | (1 << (MariaDBParser.AUTOCOMMIT - 315)) | (1 << (MariaDBParser.AUTOEXTEND_SIZE - 315)) | (1 << (MariaDBParser.AUTO_INCREMENT - 315)) | (1 << (MariaDBParser.AVG_ROW_LENGTH - 315)) | (1 << (MariaDBParser.BEGIN - 315)) | (1 << (MariaDBParser.BINLOG - 315)) | (1 << (MariaDBParser.BIT - 315)))) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & ((1 << (MariaDBParser.BLOCK - 347)) | (1 << (MariaDBParser.BOOL - 347)) | (1 << (MariaDBParser.BOOLEAN - 347)) | (1 << (MariaDBParser.BTREE - 347)) | (1 << (MariaDBParser.CACHE - 347)) | (1 << (MariaDBParser.CASCADED - 347)) | (1 << (MariaDBParser.CHAIN - 347)) | (1 << (MariaDBParser.CHANGED - 347)) | (1 << (MariaDBParser.CHANNEL - 347)) | (1 << (MariaDBParser.CHECKSUM - 347)) | (1 << (MariaDBParser.PAGE_CHECKSUM - 347)) | (1 << (MariaDBParser.CIPHER - 347)) | (1 << (MariaDBParser.CLASS_ORIGIN - 347)) | (1 << (MariaDBParser.CLIENT - 347)) | (1 << (MariaDBParser.CLOSE - 347)) | (1 << (MariaDBParser.CLUSTERING - 347)) | (1 << (MariaDBParser.COALESCE - 347)) | (1 << (MariaDBParser.CODE - 347)) | (1 << (MariaDBParser.COLUMNS - 347)) | (1 << (MariaDBParser.COLUMN_FORMAT - 347)) | (1 << (MariaDBParser.COLUMN_NAME - 347)) | (1 << (MariaDBParser.COMMENT - 347)) | (1 << (MariaDBParser.COMMIT - 347)) | (1 << (MariaDBParser.COMPACT - 347)) | (1 << (MariaDBParser.COMPLETION - 347)) | (1 << (MariaDBParser.COMPRESSED - 347)) | (1 << (MariaDBParser.COMPRESSION - 347)) | (1 << (MariaDBParser.CONCURRENT - 347)) | (1 << (MariaDBParser.CONNECT - 347)) | (1 << (MariaDBParser.CONNECTION - 347)) | (1 << (MariaDBParser.CONSISTENT - 347)) | (1 << (MariaDBParser.CONSTRAINT_CATALOG - 347)))) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & ((1 << (MariaDBParser.CONSTRAINT_SCHEMA - 379)) | (1 << (MariaDBParser.CONSTRAINT_NAME - 379)) | (1 << (MariaDBParser.CONTAINS - 379)) | (1 << (MariaDBParser.CONTEXT - 379)) | (1 << (MariaDBParser.CONTRIBUTORS - 379)) | (1 << (MariaDBParser.COPY - 379)) | (1 << (MariaDBParser.CPU - 379)) | (1 << (MariaDBParser.CYCLE - 379)) | (1 << (MariaDBParser.CURSOR_NAME - 379)) | (1 << (MariaDBParser.DATA - 379)) | (1 << (MariaDBParser.DATAFILE - 379)) | (1 << (MariaDBParser.DEALLOCATE - 379)) | (1 << (MariaDBParser.DEFAULT_AUTH - 379)) | (1 << (MariaDBParser.DEFINER - 379)) | (1 << (MariaDBParser.DELAY_KEY_WRITE - 379)) | (1 << (MariaDBParser.DES_KEY_FILE - 379)) | (1 << (MariaDBParser.DIRECTORY - 379)) | (1 << (MariaDBParser.DISABLE - 379)) | (1 << (MariaDBParser.DISCARD - 379)) | (1 << (MariaDBParser.DISK - 379)) | (1 << (MariaDBParser.DO - 379)) | (1 << (MariaDBParser.DUMPFILE - 379)) | (1 << (MariaDBParser.DUPLICATE - 379)) | (1 << (MariaDBParser.DYNAMIC - 379)) | (1 << (MariaDBParser.ENABLE - 379)) | (1 << (MariaDBParser.ENCRYPTED - 379)) | (1 << (MariaDBParser.ENCRYPTION - 379)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ID - 379)) | (1 << (MariaDBParser.END - 379)) | (1 << (MariaDBParser.ENDS - 379)) | (1 << (MariaDBParser.ENGINE - 379)) | (1 << (MariaDBParser.ENGINES - 379)))) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & ((1 << (MariaDBParser.ERROR - 411)) | (1 << (MariaDBParser.ERRORS - 411)) | (1 << (MariaDBParser.ESCAPE - 411)) | (1 << (MariaDBParser.EVEN - 411)) | (1 << (MariaDBParser.EVENT - 411)) | (1 << (MariaDBParser.EVENTS - 411)) | (1 << (MariaDBParser.EVERY - 411)) | (1 << (MariaDBParser.EXCHANGE - 411)) | (1 << (MariaDBParser.EXCLUSIVE - 411)) | (1 << (MariaDBParser.EXPIRE - 411)) | (1 << (MariaDBParser.EXPORT - 411)) | (1 << (MariaDBParser.EXTENDED - 411)) | (1 << (MariaDBParser.EXTENT_SIZE - 411)) | (1 << (MariaDBParser.FAILED_LOGIN_ATTEMPTS - 411)) | (1 << (MariaDBParser.FAST - 411)) | (1 << (MariaDBParser.FAULTS - 411)) | (1 << (MariaDBParser.FIELDS - 411)) | (1 << (MariaDBParser.FILE_BLOCK_SIZE - 411)) | (1 << (MariaDBParser.FILTER - 411)) | (1 << (MariaDBParser.FIRST - 411)) | (1 << (MariaDBParser.FIXED - 411)) | (1 << (MariaDBParser.FLUSH - 411)) | (1 << (MariaDBParser.FOLLOWS - 411)) | (1 << (MariaDBParser.FOUND - 411)) | (1 << (MariaDBParser.FULL - 411)) | (1 << (MariaDBParser.FUNCTION - 411)) | (1 << (MariaDBParser.GENERAL - 411)) | (1 << (MariaDBParser.GLOBAL - 411)) | (1 << (MariaDBParser.GRANTS - 411)) | (1 << (MariaDBParser.GROUP_REPLICATION - 411)) | (1 << (MariaDBParser.HANDLER - 411)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (MariaDBParser.HASH - 443)) | (1 << (MariaDBParser.HELP - 443)) | (1 << (MariaDBParser.HISTORY - 443)) | (1 << (MariaDBParser.HOST - 443)) | (1 << (MariaDBParser.HOSTS - 443)) | (1 << (MariaDBParser.IDENTIFIED - 443)) | (1 << (MariaDBParser.IGNORE_SERVER_IDS - 443)) | (1 << (MariaDBParser.IMPORT - 443)) | (1 << (MariaDBParser.INCREMENT - 443)) | (1 << (MariaDBParser.INDEXES - 443)) | (1 << (MariaDBParser.INITIAL_SIZE - 443)) | (1 << (MariaDBParser.INPLACE - 443)) | (1 << (MariaDBParser.INSERT_METHOD - 443)) | (1 << (MariaDBParser.INSTALL - 443)) | (1 << (MariaDBParser.INSTANCE - 443)) | (1 << (MariaDBParser.INSTANT - 443)) | (1 << (MariaDBParser.INVISIBLE - 443)) | (1 << (MariaDBParser.INVOKER - 443)) | (1 << (MariaDBParser.IO - 443)) | (1 << (MariaDBParser.IO_THREAD - 443)) | (1 << (MariaDBParser.IPC - 443)) | (1 << (MariaDBParser.ISOLATION - 443)) | (1 << (MariaDBParser.ISSUER - 443)) | (1 << (MariaDBParser.JSON - 443)) | (1 << (MariaDBParser.KEY_BLOCK_SIZE - 443)) | (1 << (MariaDBParser.LANGUAGE - 443)) | (1 << (MariaDBParser.LAST - 443)) | (1 << (MariaDBParser.LEAVES - 443)) | (1 << (MariaDBParser.LESS - 443)) | (1 << (MariaDBParser.LEVEL - 443)) | (1 << (MariaDBParser.LIST - 443)) | (1 << (MariaDBParser.LOCAL - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (MariaDBParser.LOCALES - 475)) | (1 << (MariaDBParser.LOGFILE - 475)) | (1 << (MariaDBParser.LOGS - 475)) | (1 << (MariaDBParser.MASTER - 475)) | (1 << (MariaDBParser.MASTER_AUTO_POSITION - 475)) | (1 << (MariaDBParser.MASTER_CONNECT_RETRY - 475)) | (1 << (MariaDBParser.MASTER_DELAY - 475)) | (1 << (MariaDBParser.MASTER_HEARTBEAT_PERIOD - 475)) | (1 << (MariaDBParser.MASTER_HOST - 475)) | (1 << (MariaDBParser.MASTER_LOG_FILE - 475)) | (1 << (MariaDBParser.MASTER_LOG_POS - 475)) | (1 << (MariaDBParser.MASTER_PASSWORD - 475)) | (1 << (MariaDBParser.MASTER_PORT - 475)) | (1 << (MariaDBParser.MASTER_RETRY_COUNT - 475)) | (1 << (MariaDBParser.MASTER_SSL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CA - 475)) | (1 << (MariaDBParser.MASTER_SSL_CAPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_CERT - 475)) | (1 << (MariaDBParser.MASTER_SSL_CIPHER - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRLPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_KEY - 475)) | (1 << (MariaDBParser.MASTER_TLS_VERSION - 475)) | (1 << (MariaDBParser.MASTER_USER - 475)) | (1 << (MariaDBParser.MAX_CONNECTIONS_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_QUERIES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_ROWS - 475)) | (1 << (MariaDBParser.MAX_SIZE - 475)) | (1 << (MariaDBParser.MAX_UPDATES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_USER_CONNECTIONS - 475)) | (1 << (MariaDBParser.MEDIUM - 475)) | (1 << (MariaDBParser.MEMBER - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (MariaDBParser.MERGE - 507)) | (1 << (MariaDBParser.MESSAGE_TEXT - 507)) | (1 << (MariaDBParser.MID - 507)) | (1 << (MariaDBParser.MIGRATE - 507)) | (1 << (MariaDBParser.MIN_ROWS - 507)) | (1 << (MariaDBParser.MODE - 507)) | (1 << (MariaDBParser.MODIFY - 507)) | (1 << (MariaDBParser.MUTEX - 507)) | (1 << (MariaDBParser.MYSQL - 507)) | (1 << (MariaDBParser.MYSQL_ERRNO - 507)) | (1 << (MariaDBParser.NAME - 507)) | (1 << (MariaDBParser.NAMES - 507)) | (1 << (MariaDBParser.NCHAR - 507)) | (1 << (MariaDBParser.NEVER - 507)) | (1 << (MariaDBParser.NEXT - 507)) | (1 << (MariaDBParser.NO - 507)) | (1 << (MariaDBParser.NOCACHE - 507)) | (1 << (MariaDBParser.NOCOPY - 507)) | (1 << (MariaDBParser.NOCYCLE - 507)) | (1 << (MariaDBParser.NOMAXVALUE - 507)) | (1 << (MariaDBParser.NOMINVALUE - 507)) | (1 << (MariaDBParser.NOWAIT - 507)) | (1 << (MariaDBParser.NODEGROUP - 507)) | (1 << (MariaDBParser.NONE - 507)) | (1 << (MariaDBParser.ODBC - 507)) | (1 << (MariaDBParser.OFFLINE - 507)) | (1 << (MariaDBParser.OFFSET - 507)) | (1 << (MariaDBParser.OF - 507)) | (1 << (MariaDBParser.OJ - 507)) | (1 << (MariaDBParser.OLD_PASSWORD - 507)) | (1 << (MariaDBParser.ONE - 507)) | (1 << (MariaDBParser.ONLINE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (MariaDBParser.ONLY - 539)) | (1 << (MariaDBParser.OPEN - 539)) | (1 << (MariaDBParser.OPTIMIZER_COSTS - 539)) | (1 << (MariaDBParser.OPTIONS - 539)) | (1 << (MariaDBParser.OWNER - 539)) | (1 << (MariaDBParser.PACK_KEYS - 539)) | (1 << (MariaDBParser.PAGE - 539)) | (1 << (MariaDBParser.PARSER - 539)) | (1 << (MariaDBParser.PARTIAL - 539)) | (1 << (MariaDBParser.PARTITIONING - 539)) | (1 << (MariaDBParser.PARTITIONS - 539)) | (1 << (MariaDBParser.PASSWORD - 539)) | (1 << (MariaDBParser.PASSWORD_LOCK_TIME - 539)) | (1 << (MariaDBParser.PHASE - 539)) | (1 << (MariaDBParser.PLUGIN - 539)) | (1 << (MariaDBParser.PLUGIN_DIR - 539)) | (1 << (MariaDBParser.PLUGINS - 539)) | (1 << (MariaDBParser.PORT - 539)) | (1 << (MariaDBParser.PRECEDES - 539)) | (1 << (MariaDBParser.PREPARE - 539)) | (1 << (MariaDBParser.PRESERVE - 539)) | (1 << (MariaDBParser.PREV - 539)) | (1 << (MariaDBParser.PROCESSLIST - 539)) | (1 << (MariaDBParser.PROFILE - 539)) | (1 << (MariaDBParser.PROFILES - 539)) | (1 << (MariaDBParser.PROXY - 539)) | (1 << (MariaDBParser.QUERY - 539)) | (1 << (MariaDBParser.QUERY_RESPONSE_TIME - 539)) | (1 << (MariaDBParser.QUICK - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (MariaDBParser.REBUILD - 571)) | (1 << (MariaDBParser.RECOVER - 571)) | (1 << (MariaDBParser.RECURSIVE - 571)) | (1 << (MariaDBParser.REDO_BUFFER_SIZE - 571)) | (1 << (MariaDBParser.REDUNDANT - 571)) | (1 << (MariaDBParser.RELAY - 571)) | (1 << (MariaDBParser.RELAY_LOG_FILE - 571)) | (1 << (MariaDBParser.RELAY_LOG_POS - 571)) | (1 << (MariaDBParser.RELAYLOG - 571)) | (1 << (MariaDBParser.REMOVE - 571)) | (1 << (MariaDBParser.REORGANIZE - 571)) | (1 << (MariaDBParser.REPAIR - 571)) | (1 << (MariaDBParser.REPLICATE_DO_DB - 571)) | (1 << (MariaDBParser.REPLICATE_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_REWRITE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATION - 571)) | (1 << (MariaDBParser.RESET - 571)) | (1 << (MariaDBParser.RESTART - 571)) | (1 << (MariaDBParser.RESUME - 571)) | (1 << (MariaDBParser.RETURNED_SQLSTATE - 571)) | (1 << (MariaDBParser.RETURNS - 571)) | (1 << (MariaDBParser.REUSE - 571)) | (1 << (MariaDBParser.ROLE - 571)) | (1 << (MariaDBParser.ROLLBACK - 571)) | (1 << (MariaDBParser.ROLLUP - 571)) | (1 << (MariaDBParser.ROTATE - 571)) | (1 << (MariaDBParser.ROW - 571)))) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & ((1 << (MariaDBParser.ROWS - 603)) | (1 << (MariaDBParser.ROW_FORMAT - 603)) | (1 << (MariaDBParser.RTREE - 603)) | (1 << (MariaDBParser.SAVEPOINT - 603)) | (1 << (MariaDBParser.SCHEDULE - 603)) | (1 << (MariaDBParser.SECURITY - 603)) | (1 << (MariaDBParser.SEQUENCE - 603)) | (1 << (MariaDBParser.SERVER - 603)) | (1 << (MariaDBParser.SESSION - 603)) | (1 << (MariaDBParser.SHARE - 603)) | (1 << (MariaDBParser.SHARED - 603)) | (1 << (MariaDBParser.SIGNED - 603)) | (1 << (MariaDBParser.SIMPLE - 603)) | (1 << (MariaDBParser.SLAVE - 603)) | (1 << (MariaDBParser.SLAVES - 603)) | (1 << (MariaDBParser.SLOW - 603)) | (1 << (MariaDBParser.SNAPSHOT - 603)) | (1 << (MariaDBParser.SOCKET - 603)) | (1 << (MariaDBParser.SOME - 603)) | (1 << (MariaDBParser.SONAME - 603)) | (1 << (MariaDBParser.SOUNDS - 603)) | (1 << (MariaDBParser.SOURCE - 603)) | (1 << (MariaDBParser.SQL_AFTER_GTIDS - 603)) | (1 << (MariaDBParser.SQL_AFTER_MTS_GAPS - 603)) | (1 << (MariaDBParser.SQL_BEFORE_GTIDS - 603)) | (1 << (MariaDBParser.SQL_BUFFER_RESULT - 603)) | (1 << (MariaDBParser.SQL_CACHE - 603)) | (1 << (MariaDBParser.SQL_NO_CACHE - 603)) | (1 << (MariaDBParser.SQL_THREAD - 603)) | (1 << (MariaDBParser.START - 603)) | (1 << (MariaDBParser.STARTS - 603)) | (1 << (MariaDBParser.STATS_AUTO_RECALC - 603)))) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & ((1 << (MariaDBParser.STATS_PERSISTENT - 635)) | (1 << (MariaDBParser.STATS_SAMPLE_PAGES - 635)) | (1 << (MariaDBParser.STATUS - 635)) | (1 << (MariaDBParser.STOP - 635)) | (1 << (MariaDBParser.STORAGE - 635)) | (1 << (MariaDBParser.STRING - 635)) | (1 << (MariaDBParser.SUBCLASS_ORIGIN - 635)) | (1 << (MariaDBParser.SUBJECT - 635)) | (1 << (MariaDBParser.SUBPARTITION - 635)) | (1 << (MariaDBParser.SUBPARTITIONS - 635)) | (1 << (MariaDBParser.SUSPEND - 635)) | (1 << (MariaDBParser.SWAPS - 635)) | (1 << (MariaDBParser.SWITCHES - 635)) | (1 << (MariaDBParser.TABLE_NAME - 635)) | (1 << (MariaDBParser.TABLESPACE - 635)) | (1 << (MariaDBParser.TABLE_TYPE - 635)) | (1 << (MariaDBParser.TEMPORARY - 635)) | (1 << (MariaDBParser.TEMPTABLE - 635)) | (1 << (MariaDBParser.THAN - 635)) | (1 << (MariaDBParser.TRADITIONAL - 635)) | (1 << (MariaDBParser.TRANSACTION - 635)) | (1 << (MariaDBParser.TRANSACTIONAL - 635)) | (1 << (MariaDBParser.TRIGGERS - 635)) | (1 << (MariaDBParser.TRUNCATE - 635)) | (1 << (MariaDBParser.TYPES - 635)) | (1 << (MariaDBParser.UNBOUNDED - 635)) | (1 << (MariaDBParser.UNDEFINED - 635)) | (1 << (MariaDBParser.UNDOFILE - 635)) | (1 << (MariaDBParser.UNDO_BUFFER_SIZE - 635)) | (1 << (MariaDBParser.UNINSTALL - 635)) | (1 << (MariaDBParser.UNKNOWN - 635)))) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & ((1 << (MariaDBParser.UNTIL - 667)) | (1 << (MariaDBParser.UPGRADE - 667)) | (1 << (MariaDBParser.USER - 667)) | (1 << (MariaDBParser.USE_FRM - 667)) | (1 << (MariaDBParser.USER_RESOURCES - 667)) | (1 << (MariaDBParser.VALIDATION - 667)) | (1 << (MariaDBParser.VALUE - 667)) | (1 << (MariaDBParser.VARIABLES - 667)) | (1 << (MariaDBParser.VIEW - 667)) | (1 << (MariaDBParser.VIRTUAL - 667)) | (1 << (MariaDBParser.VISIBLE - 667)) | (1 << (MariaDBParser.WAIT - 667)) | (1 << (MariaDBParser.WARNINGS - 667)) | (1 << (MariaDBParser.WITHOUT - 667)) | (1 << (MariaDBParser.WORK - 667)) | (1 << (MariaDBParser.WRAPPER - 667)) | (1 << (MariaDBParser.WSREP_MEMBERSHIP - 667)) | (1 << (MariaDBParser.WSREP_STATUS - 667)) | (1 << (MariaDBParser.X509 - 667)) | (1 << (MariaDBParser.XA - 667)) | (1 << (MariaDBParser.XML - 667)) | (1 << (MariaDBParser.EUR - 667)) | (1 << (MariaDBParser.USA - 667)) | (1 << (MariaDBParser.JIS - 667)) | (1 << (MariaDBParser.ISO - 667)) | (1 << (MariaDBParser.INTERNAL - 667)) | (1 << (MariaDBParser.QUARTER - 667)) | (1 << (MariaDBParser.MONTH - 667)) | (1 << (MariaDBParser.DAY - 667)) | (1 << (MariaDBParser.HOUR - 667)))) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & ((1 << (MariaDBParser.MINUTE - 699)) | (1 << (MariaDBParser.WEEK - 699)) | (1 << (MariaDBParser.SECOND - 699)) | (1 << (MariaDBParser.MICROSECOND - 699)) | (1 << (MariaDBParser.USER_STATISTICS - 699)) | (1 << (MariaDBParser.CLIENT_STATISTICS - 699)) | (1 << (MariaDBParser.INDEX_STATISTICS - 699)) | (1 << (MariaDBParser.TABLE_STATISTICS - 699)) | (1 << (MariaDBParser.ADMIN - 699)) | (1 << (MariaDBParser.AUDIT_ADMIN - 699)) | (1 << (MariaDBParser.BACKUP_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ENCRYPTION_ADMIN - 699)) | (1 << (MariaDBParser.CLONE_ADMIN - 699)) | (1 << (MariaDBParser.CONNECTION_ADMIN - 699)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ADMIN - 699)) | (1 << (MariaDBParser.EXECUTE - 699)) | (1 << (MariaDBParser.FILE - 699)) | (1 << (MariaDBParser.FIREWALL_ADMIN - 699)) | (1 << (MariaDBParser.FIREWALL_USER - 699)) | (1 << (MariaDBParser.GROUP_REPLICATION_ADMIN - 699)) | (1 << (MariaDBParser.INNODB_REDO_LOG_ARCHIVE - 699)) | (1 << (MariaDBParser.INVOKE - 699)) | (1 << (MariaDBParser.LAMBDA - 699)) | (1 << (MariaDBParser.NDB_STORED_USER - 699)) | (1 << (MariaDBParser.PASSWORDLESS_USER_ADMIN - 699)))) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & ((1 << (MariaDBParser.PERSIST_RO_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.PRIVILEGES - 731)) | (1 << (MariaDBParser.PROCESS - 731)) | (1 << (MariaDBParser.RELOAD - 731)) | (1 << (MariaDBParser.REPLICATION_APPLIER - 731)) | (1 << (MariaDBParser.REPLICATION_SLAVE_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_USER - 731)) | (1 << (MariaDBParser.ROLE_ADMIN - 731)) | (1 << (MariaDBParser.ROUTINE - 731)) | (1 << (MariaDBParser.S3 - 731)) | (1 << (MariaDBParser.SESSION_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.SET_USER_ID - 731)) | (1 << (MariaDBParser.SHOW_ROUTINE - 731)) | (1 << (MariaDBParser.SHUTDOWN - 731)) | (1 << (MariaDBParser.SUPER - 731)) | (1 << (MariaDBParser.SYSTEM_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.TABLES - 731)) | (1 << (MariaDBParser.TABLE_ENCRYPTION_ADMIN - 731)) | (1 << (MariaDBParser.VERSION_TOKEN_ADMIN - 731)) | (1 << (MariaDBParser.XA_RECOVER_ADMIN - 731)) | (1 << (MariaDBParser.ARMSCII8 - 731)) | (1 << (MariaDBParser.ASCII - 731)) | (1 << (MariaDBParser.BIG5 - 731)) | (1 << (MariaDBParser.CP1250 - 731)) | (1 << (MariaDBParser.CP1251 - 731)) | (1 << (MariaDBParser.CP1256 - 731)) | (1 << (MariaDBParser.CP1257 - 731)) | (1 << (MariaDBParser.CP850 - 731)) | (1 << (MariaDBParser.CP852 - 731)) | (1 << (MariaDBParser.CP866 - 731)))) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & ((1 << (MariaDBParser.CP932 - 763)) | (1 << (MariaDBParser.DEC8 - 763)) | (1 << (MariaDBParser.EUCJPMS - 763)) | (1 << (MariaDBParser.EUCKR - 763)) | (1 << (MariaDBParser.GB18030 - 763)) | (1 << (MariaDBParser.GB2312 - 763)) | (1 << (MariaDBParser.GBK - 763)) | (1 << (MariaDBParser.GEOSTD8 - 763)) | (1 << (MariaDBParser.GREEK - 763)) | (1 << (MariaDBParser.HEBREW - 763)) | (1 << (MariaDBParser.HP8 - 763)) | (1 << (MariaDBParser.KEYBCS2 - 763)) | (1 << (MariaDBParser.KOI8R - 763)) | (1 << (MariaDBParser.KOI8U - 763)) | (1 << (MariaDBParser.LATIN1 - 763)) | (1 << (MariaDBParser.LATIN2 - 763)) | (1 << (MariaDBParser.LATIN5 - 763)) | (1 << (MariaDBParser.LATIN7 - 763)) | (1 << (MariaDBParser.MACCE - 763)) | (1 << (MariaDBParser.MACROMAN - 763)) | (1 << (MariaDBParser.SJIS - 763)) | (1 << (MariaDBParser.SWE7 - 763)) | (1 << (MariaDBParser.TIS620 - 763)) | (1 << (MariaDBParser.UCS2 - 763)) | (1 << (MariaDBParser.UJIS - 763)) | (1 << (MariaDBParser.UTF16 - 763)) | (1 << (MariaDBParser.UTF16LE - 763)) | (1 << (MariaDBParser.UTF32 - 763)) | (1 << (MariaDBParser.UTF8 - 763)) | (1 << (MariaDBParser.UTF8MB3 - 763)) | (1 << (MariaDBParser.UTF8MB4 - 763)) | (1 << (MariaDBParser.ARCHIVE - 763)))) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & ((1 << (MariaDBParser.BLACKHOLE - 795)) | (1 << (MariaDBParser.CSV - 795)) | (1 << (MariaDBParser.FEDERATED - 795)) | (1 << (MariaDBParser.INNODB - 795)) | (1 << (MariaDBParser.MEMORY - 795)) | (1 << (MariaDBParser.MRG_MYISAM - 795)) | (1 << (MariaDBParser.MYISAM - 795)) | (1 << (MariaDBParser.NDB - 795)) | (1 << (MariaDBParser.NDBCLUSTER - 795)) | (1 << (MariaDBParser.PERFORMANCE_SCHEMA - 795)) | (1 << (MariaDBParser.TOKUDB - 795)) | (1 << (MariaDBParser.REPEATABLE - 795)) | (1 << (MariaDBParser.COMMITTED - 795)) | (1 << (MariaDBParser.UNCOMMITTED - 795)) | (1 << (MariaDBParser.SERIALIZABLE - 795)) | (1 << (MariaDBParser.GEOMETRYCOLLECTION - 795)) | (1 << (MariaDBParser.LINESTRING - 795)) | (1 << (MariaDBParser.MULTILINESTRING - 795)) | (1 << (MariaDBParser.MULTIPOINT - 795)) | (1 << (MariaDBParser.MULTIPOLYGON - 795)) | (1 << (MariaDBParser.POINT - 795)) | (1 << (MariaDBParser.POLYGON - 795)) | (1 << (MariaDBParser.ABS - 795)) | (1 << (MariaDBParser.ACOS - 795)) | (1 << (MariaDBParser.ADDDATE - 795)) | (1 << (MariaDBParser.ADDTIME - 795)) | (1 << (MariaDBParser.AES_DECRYPT - 795)) | (1 << (MariaDBParser.AES_ENCRYPT - 795)) | (1 << (MariaDBParser.AREA - 795)) | (1 << (MariaDBParser.ASBINARY - 795)))) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & ((1 << (MariaDBParser.ASIN - 827)) | (1 << (MariaDBParser.ASTEXT - 827)) | (1 << (MariaDBParser.ASWKB - 827)) | (1 << (MariaDBParser.ASWKT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DECRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DERIVE - 827)) | (1 << (MariaDBParser.ASYMMETRIC_ENCRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_SIGN - 827)) | (1 << (MariaDBParser.ASYMMETRIC_VERIFY - 827)) | (1 << (MariaDBParser.ATAN - 827)) | (1 << (MariaDBParser.ATAN2 - 827)) | (1 << (MariaDBParser.BENCHMARK - 827)) | (1 << (MariaDBParser.BIN - 827)) | (1 << (MariaDBParser.BIT_COUNT - 827)) | (1 << (MariaDBParser.BIT_LENGTH - 827)) | (1 << (MariaDBParser.BUFFER - 827)) | (1 << (MariaDBParser.CATALOG_NAME - 827)) | (1 << (MariaDBParser.CEIL - 827)) | (1 << (MariaDBParser.CEILING - 827)) | (1 << (MariaDBParser.CENTROID - 827)) | (1 << (MariaDBParser.CHARACTER_LENGTH - 827)) | (1 << (MariaDBParser.CHARSET - 827)) | (1 << (MariaDBParser.CHAR_LENGTH - 827)) | (1 << (MariaDBParser.COERCIBILITY - 827)) | (1 << (MariaDBParser.COLLATION - 827)) | (1 << (MariaDBParser.COMPRESS - 827)) | (1 << (MariaDBParser.CONCAT - 827)) | (1 << (MariaDBParser.CONCAT_WS - 827)) | (1 << (MariaDBParser.CONNECTION_ID - 827)) | (1 << (MariaDBParser.CONV - 827)) | (1 << (MariaDBParser.CONVERT_TZ - 827)) | (1 << (MariaDBParser.COS - 827)))) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & ((1 << (MariaDBParser.COT - 859)) | (1 << (MariaDBParser.CRC32 - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY - 859)) | (1 << (MariaDBParser.CREATE_DH_PARAMETERS - 859)) | (1 << (MariaDBParser.CREATE_DIGEST - 859)) | (1 << (MariaDBParser.CROSSES - 859)) | (1 << (MariaDBParser.DATEDIFF - 859)) | (1 << (MariaDBParser.DATE_FORMAT - 859)) | (1 << (MariaDBParser.DAYNAME - 859)) | (1 << (MariaDBParser.DAYOFMONTH - 859)) | (1 << (MariaDBParser.DAYOFWEEK - 859)) | (1 << (MariaDBParser.DAYOFYEAR - 859)) | (1 << (MariaDBParser.DECODE - 859)) | (1 << (MariaDBParser.DEGREES - 859)) | (1 << (MariaDBParser.DES_DECRYPT - 859)) | (1 << (MariaDBParser.DES_ENCRYPT - 859)) | (1 << (MariaDBParser.DIMENSION - 859)) | (1 << (MariaDBParser.DISJOINT - 859)) | (1 << (MariaDBParser.ELT - 859)) | (1 << (MariaDBParser.ENCODE - 859)) | (1 << (MariaDBParser.ENCRYPT - 859)) | (1 << (MariaDBParser.ENDPOINT - 859)) | (1 << (MariaDBParser.ENGINE_ATTRIBUTE - 859)) | (1 << (MariaDBParser.ENVELOPE - 859)) | (1 << (MariaDBParser.EQUALS - 859)) | (1 << (MariaDBParser.EXP - 859)) | (1 << (MariaDBParser.EXPORT_SET - 859)) | (1 << (MariaDBParser.EXTERIORRING - 859)) | (1 << (MariaDBParser.EXTRACTVALUE - 859)) | (1 << (MariaDBParser.FIELD - 859)) | (1 << (MariaDBParser.FIND_IN_SET - 859)))) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & ((1 << (MariaDBParser.FLOOR - 891)) | (1 << (MariaDBParser.FORMAT - 891)) | (1 << (MariaDBParser.FOUND_ROWS - 891)) | (1 << (MariaDBParser.FROM_BASE64 - 891)) | (1 << (MariaDBParser.FROM_DAYS - 891)) | (1 << (MariaDBParser.FROM_UNIXTIME - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYN - 891)) | (1 << (MariaDBParser.GEOMETRYTYPE - 891)) | (1 << (MariaDBParser.GEOMFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMFROMWKB - 891)) | (1 << (MariaDBParser.GET_FORMAT - 891)) | (1 << (MariaDBParser.GET_LOCK - 891)) | (1 << (MariaDBParser.GLENGTH - 891)) | (1 << (MariaDBParser.GREATEST - 891)) | (1 << (MariaDBParser.GTID_SUBSET - 891)) | (1 << (MariaDBParser.GTID_SUBTRACT - 891)) | (1 << (MariaDBParser.HEX - 891)) | (1 << (MariaDBParser.IFNULL - 891)) | (1 << (MariaDBParser.INET6_ATON - 891)) | (1 << (MariaDBParser.INET6_NTOA - 891)) | (1 << (MariaDBParser.INET_ATON - 891)) | (1 << (MariaDBParser.INET_NTOA - 891)) | (1 << (MariaDBParser.INSTR - 891)) | (1 << (MariaDBParser.INTERIORRINGN - 891)) | (1 << (MariaDBParser.INTERSECTS - 891)) | (1 << (MariaDBParser.ISCLOSED - 891)))) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & ((1 << (MariaDBParser.ISEMPTY - 923)) | (1 << (MariaDBParser.ISNULL - 923)) | (1 << (MariaDBParser.ISSIMPLE - 923)) | (1 << (MariaDBParser.IS_FREE_LOCK - 923)) | (1 << (MariaDBParser.IS_IPV4 - 923)) | (1 << (MariaDBParser.IS_IPV4_COMPAT - 923)) | (1 << (MariaDBParser.IS_IPV4_MAPPED - 923)) | (1 << (MariaDBParser.IS_IPV6 - 923)) | (1 << (MariaDBParser.IS_USED_LOCK - 923)) | (1 << (MariaDBParser.LAST_INSERT_ID - 923)) | (1 << (MariaDBParser.LCASE - 923)) | (1 << (MariaDBParser.LEAST - 923)) | (1 << (MariaDBParser.LENGTH - 923)) | (1 << (MariaDBParser.LINEFROMTEXT - 923)) | (1 << (MariaDBParser.LINEFROMWKB - 923)) | (1 << (MariaDBParser.LINESTRINGFROMTEXT - 923)) | (1 << (MariaDBParser.LINESTRINGFROMWKB - 923)) | (1 << (MariaDBParser.LN - 923)) | (1 << (MariaDBParser.LOAD_FILE - 923)) | (1 << (MariaDBParser.LOCATE - 923)) | (1 << (MariaDBParser.LOG - 923)) | (1 << (MariaDBParser.LOG10 - 923)) | (1 << (MariaDBParser.LOG2 - 923)) | (1 << (MariaDBParser.LOWER - 923)) | (1 << (MariaDBParser.LPAD - 923)) | (1 << (MariaDBParser.LTRIM - 923)) | (1 << (MariaDBParser.MAKEDATE - 923)) | (1 << (MariaDBParser.MAKETIME - 923)) | (1 << (MariaDBParser.MAKE_SET - 923)) | (1 << (MariaDBParser.MASTER_POS_WAIT - 923)) | (1 << (MariaDBParser.MBRCONTAINS - 923)) | (1 << (MariaDBParser.MBRDISJOINT - 923)))) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & ((1 << (MariaDBParser.MBREQUAL - 955)) | (1 << (MariaDBParser.MBRINTERSECTS - 955)) | (1 << (MariaDBParser.MBROVERLAPS - 955)) | (1 << (MariaDBParser.MBRTOUCHES - 955)) | (1 << (MariaDBParser.MBRWITHIN - 955)) | (1 << (MariaDBParser.MD5 - 955)) | (1 << (MariaDBParser.MLINEFROMTEXT - 955)) | (1 << (MariaDBParser.MLINEFROMWKB - 955)) | (1 << (MariaDBParser.MONTHNAME - 955)) | (1 << (MariaDBParser.MPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MPOLYFROMTEXT - 955)) | (1 << (MariaDBParser.MPOLYFROMWKB - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMTEXT - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMWKB - 955)) | (1 << (MariaDBParser.NAME_CONST - 955)) | (1 << (MariaDBParser.NULLIF - 955)) | (1 << (MariaDBParser.NUMGEOMETRIES - 955)) | (1 << (MariaDBParser.NUMINTERIORRINGS - 955)) | (1 << (MariaDBParser.NUMPOINTS - 955)) | (1 << (MariaDBParser.OCT - 955)) | (1 << (MariaDBParser.OCTET_LENGTH - 955)) | (1 << (MariaDBParser.ORD - 955)) | (1 << (MariaDBParser.OVERLAPS - 955)) | (1 << (MariaDBParser.PERIOD_ADD - 955)) | (1 << (MariaDBParser.PERIOD_DIFF - 955)) | (1 << (MariaDBParser.PI - 955)) | (1 << (MariaDBParser.POINTFROMTEXT - 955)))) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & ((1 << (MariaDBParser.POINTFROMWKB - 987)) | (1 << (MariaDBParser.POINTN - 987)) | (1 << (MariaDBParser.POLYFROMTEXT - 987)) | (1 << (MariaDBParser.POLYFROMWKB - 987)) | (1 << (MariaDBParser.POLYGONFROMTEXT - 987)) | (1 << (MariaDBParser.POLYGONFROMWKB - 987)) | (1 << (MariaDBParser.POW - 987)) | (1 << (MariaDBParser.POWER - 987)) | (1 << (MariaDBParser.QUOTE - 987)) | (1 << (MariaDBParser.RADIANS - 987)) | (1 << (MariaDBParser.RAND - 987)) | (1 << (MariaDBParser.RANDOM_BYTES - 987)) | (1 << (MariaDBParser.RELEASE_LOCK - 987)) | (1 << (MariaDBParser.REVERSE - 987)) | (1 << (MariaDBParser.ROUND - 987)) | (1 << (MariaDBParser.ROW_COUNT - 987)) | (1 << (MariaDBParser.RPAD - 987)) | (1 << (MariaDBParser.RTRIM - 987)) | (1 << (MariaDBParser.SEC_TO_TIME - 987)) | (1 << (MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE - 987)) | (1 << (MariaDBParser.SESSION_USER - 987)) | (1 << (MariaDBParser.SHA - 987)) | (1 << (MariaDBParser.SHA1 - 987)) | (1 << (MariaDBParser.SHA2 - 987)) | (1 << (MariaDBParser.SCHEMA_NAME - 987)) | (1 << (MariaDBParser.SIGN - 987)) | (1 << (MariaDBParser.SIN - 987)) | (1 << (MariaDBParser.SLEEP - 987)) | (1 << (MariaDBParser.SOUNDEX - 987)) | (1 << (MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS - 987)) | (1 << (MariaDBParser.SQRT - 987)) | (1 << (MariaDBParser.SRID - 987)))) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & ((1 << (MariaDBParser.STARTPOINT - 1019)) | (1 << (MariaDBParser.STRCMP - 1019)) | (1 << (MariaDBParser.STR_TO_DATE - 1019)) | (1 << (MariaDBParser.ST_AREA - 1019)) | (1 << (MariaDBParser.ST_ASBINARY - 1019)) | (1 << (MariaDBParser.ST_ASTEXT - 1019)) | (1 << (MariaDBParser.ST_ASWKB - 1019)) | (1 << (MariaDBParser.ST_ASWKT - 1019)) | (1 << (MariaDBParser.ST_BUFFER - 1019)) | (1 << (MariaDBParser.ST_CENTROID - 1019)) | (1 << (MariaDBParser.ST_CONTAINS - 1019)) | (1 << (MariaDBParser.ST_CROSSES - 1019)) | (1 << (MariaDBParser.ST_DIFFERENCE - 1019)) | (1 << (MariaDBParser.ST_DIMENSION - 1019)) | (1 << (MariaDBParser.ST_DISJOINT - 1019)) | (1 << (MariaDBParser.ST_DISTANCE - 1019)) | (1 << (MariaDBParser.ST_ENDPOINT - 1019)) | (1 << (MariaDBParser.ST_ENVELOPE - 1019)) | (1 << (MariaDBParser.ST_EQUALS - 1019)) | (1 << (MariaDBParser.ST_EXTERIORRING - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYN - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYTYPE - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMWKB - 1019)) | (1 << (MariaDBParser.ST_INTERIORRINGN - 1019)))) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & ((1 << (MariaDBParser.ST_INTERSECTION - 1051)) | (1 << (MariaDBParser.ST_INTERSECTS - 1051)) | (1 << (MariaDBParser.ST_ISCLOSED - 1051)) | (1 << (MariaDBParser.ST_ISEMPTY - 1051)) | (1 << (MariaDBParser.ST_ISSIMPLE - 1051)) | (1 << (MariaDBParser.ST_LINEFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINEFROMWKB - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMWKB - 1051)) | (1 << (MariaDBParser.ST_NUMGEOMETRIES - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRING - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRINGS - 1051)) | (1 << (MariaDBParser.ST_NUMPOINTS - 1051)) | (1 << (MariaDBParser.ST_OVERLAPS - 1051)) | (1 << (MariaDBParser.ST_POINTFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POINTFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POINTN - 1051)) | (1 << (MariaDBParser.ST_POLYFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMWKB - 1051)) | (1 << (MariaDBParser.ST_SRID - 1051)) | (1 << (MariaDBParser.ST_STARTPOINT - 1051)) | (1 << (MariaDBParser.ST_SYMDIFFERENCE - 1051)) | (1 << (MariaDBParser.ST_TOUCHES - 1051)) | (1 << (MariaDBParser.ST_UNION - 1051)) | (1 << (MariaDBParser.ST_WITHIN - 1051)) | (1 << (MariaDBParser.ST_X - 1051)) | (1 << (MariaDBParser.ST_Y - 1051)) | (1 << (MariaDBParser.SUBDATE - 1051)) | (1 << (MariaDBParser.SUBSTRING_INDEX - 1051)) | (1 << (MariaDBParser.SUBTIME - 1051)))) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & ((1 << (MariaDBParser.SYSTEM_USER - 1083)) | (1 << (MariaDBParser.TAN - 1083)) | (1 << (MariaDBParser.TIMEDIFF - 1083)) | (1 << (MariaDBParser.TIMESTAMPADD - 1083)) | (1 << (MariaDBParser.TIMESTAMPDIFF - 1083)) | (1 << (MariaDBParser.TIME_FORMAT - 1083)) | (1 << (MariaDBParser.TIME_TO_SEC - 1083)) | (1 << (MariaDBParser.TOUCHES - 1083)) | (1 << (MariaDBParser.TO_BASE64 - 1083)) | (1 << (MariaDBParser.TO_DAYS - 1083)) | (1 << (MariaDBParser.TO_SECONDS - 1083)) | (1 << (MariaDBParser.UCASE - 1083)) | (1 << (MariaDBParser.UNCOMPRESS - 1083)) | (1 << (MariaDBParser.UNCOMPRESSED_LENGTH - 1083)) | (1 << (MariaDBParser.UNHEX - 1083)) | (1 << (MariaDBParser.UNIX_TIMESTAMP - 1083)) | (1 << (MariaDBParser.UPDATEXML - 1083)) | (1 << (MariaDBParser.UPPER - 1083)) | (1 << (MariaDBParser.UUID - 1083)) | (1 << (MariaDBParser.UUID_SHORT - 1083)) | (1 << (MariaDBParser.VALIDATE_PASSWORD_STRENGTH - 1083)) | (1 << (MariaDBParser.VERSION - 1083)) | (1 << (MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1083)) | (1 << (MariaDBParser.WEEKDAY - 1083)) | (1 << (MariaDBParser.WEEKOFYEAR - 1083)) | (1 << (MariaDBParser.WEIGHT_STRING - 1083)) | (1 << (MariaDBParser.WITHIN - 1083)) | (1 << (MariaDBParser.YEARWEEK - 1083)) | (1 << (MariaDBParser.Y_FUNCTION - 1083)) | (1 << (MariaDBParser.X_FUNCTION - 1083)) | (1 << (MariaDBParser.VIA - 1083)) | (1 << (MariaDBParser.LASTVAL - 1083)))) !== 0) || ((((_la - 1115)) & ~0x1F) === 0 && ((1 << (_la - 1115)) & ((1 << (MariaDBParser.NEXTVAL - 1115)) | (1 << (MariaDBParser.SETVAL - 1115)) | (1 << (MariaDBParser.PREVIOUS - 1115)) | (1 << (MariaDBParser.PERSISTENT - 1115)) | (1 << (MariaDBParser.BINLOG_MONITOR - 1115)) | (1 << (MariaDBParser.BINLOG_REPLAY - 1115)) | (1 << (MariaDBParser.FEDERATED_ADMIN - 1115)) | (1 << (MariaDBParser.READ_ONLY_ADMIN - 1115)) | (1 << (MariaDBParser.REPLICA - 1115)) | (1 << (MariaDBParser.REPLICAS - 1115)) | (1 << (MariaDBParser.REPLICATION_MASTER_ADMIN - 1115)) | (1 << (MariaDBParser.MONITOR - 1115)) | (1 << (MariaDBParser.READ_ONLY - 1115)) | (1 << (MariaDBParser.REPLAY - 1115)) | (1 << (MariaDBParser.MOD - 1115)))) !== 0) || ((((_la - 1166)) & ~0x1F) === 0 && ((1 << (_la - 1166)) & ((1 << (MariaDBParser.CHARSET_REVERSE_QOUTE_STRING - 1166)) | (1 << (MariaDBParser.STRING_LITERAL - 1166)) | (1 << (MariaDBParser.ID - 1166)))) !== 0)) {
						{
						this.state = 1772;
						(_localctx as CheckColumnConstraintContext)._name = this.uid();
						}
					}

					}
				}

				this.state = 1777;
				this.match(MariaDBParser.CHECK);
				this.state = 1778;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 1779;
				this.expression(0);
				this.state = 1780;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableConstraint(): TableConstraintContext {
		let _localctx: TableConstraintContext = new TableConstraintContext(this._ctx, this.state);
		this.enterRule(_localctx, 102, MariaDBParser.RULE_tableConstraint);
		let _la: number;
		try {
			this.state = 1853;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 195, this._ctx) ) {
			case 1:
				_localctx = new PrimaryKeyTableConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1788;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.CONSTRAINT) {
					{
					this.state = 1784;
					this.match(MariaDBParser.CONSTRAINT);
					this.state = 1786;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 179, this._ctx) ) {
					case 1:
						{
						this.state = 1785;
						(_localctx as PrimaryKeyTableConstraintContext)._name = this.uid();
						}
						break;
					}
					}
				}

				this.state = 1790;
				this.match(MariaDBParser.PRIMARY);
				this.state = 1791;
				this.match(MariaDBParser.KEY);
				this.state = 1793;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MariaDBParser.ATTRIBUTE) | (1 << MariaDBParser.BODY) | (1 << MariaDBParser.BUCKETS) | (1 << MariaDBParser.CONDITION))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (MariaDBParser.CURRENT - 36)) | (1 << (MariaDBParser.CURRENT_ROLE - 36)) | (1 << (MariaDBParser.CURRENT_USER - 36)) | (1 << (MariaDBParser.DATABASE - 36)) | (1 << (MariaDBParser.DEFAULT - 36)) | (1 << (MariaDBParser.DIAGNOSTICS - 36)) | (1 << (MariaDBParser.EMPTY - 36)) | (1 << (MariaDBParser.EXCEPT - 36)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (MariaDBParser.GROUP - 73)) | (1 << (MariaDBParser.IF - 73)) | (1 << (MariaDBParser.IGNORED - 73)) | (1 << (MariaDBParser.INSERT - 73)) | (1 << (MariaDBParser.LATERAL - 73)) | (1 << (MariaDBParser.LEFT - 73)) | (1 << (MariaDBParser.LOCKED - 73)))) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & ((1 << (MariaDBParser.MAXVALUE - 110)) | (1 << (MariaDBParser.MINVALUE - 110)) | (1 << (MariaDBParser.NUMBER - 110)) | (1 << (MariaDBParser.OPTIONAL - 110)) | (1 << (MariaDBParser.ORDER - 110)) | (1 << (MariaDBParser.PRIMARY - 110)) | (1 << (MariaDBParser.PACKAGE - 110)))) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (MariaDBParser.REPLACE - 142)) | (1 << (MariaDBParser.RIGHT - 142)) | (1 << (MariaDBParser.SCHEMA - 142)) | (1 << (MariaDBParser.SKIP_ - 142)) | (1 << (MariaDBParser.STACKED - 142)) | (1 << (MariaDBParser.STATEMENT - 142)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MariaDBParser.DATE - 217)) | (1 << (MariaDBParser.TIME - 217)) | (1 << (MariaDBParser.TIMESTAMP - 217)) | (1 << (MariaDBParser.DATETIME - 217)) | (1 << (MariaDBParser.YEAR - 217)) | (1 << (MariaDBParser.BINARY - 217)) | (1 << (MariaDBParser.TEXT - 217)) | (1 << (MariaDBParser.ENUM - 217)) | (1 << (MariaDBParser.SERIAL - 217)))) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & ((1 << (MariaDBParser.JSON_ARRAY - 251)) | (1 << (MariaDBParser.JSON_ARRAYAGG - 251)) | (1 << (MariaDBParser.JSON_ARRAY_APPEND - 251)) | (1 << (MariaDBParser.JSON_ARRAY_INSERT - 251)) | (1 << (MariaDBParser.JSON_CONTAINS - 251)) | (1 << (MariaDBParser.JSON_CONTAINS_PATH - 251)) | (1 << (MariaDBParser.JSON_DEPTH - 251)) | (1 << (MariaDBParser.JSON_EXTRACT - 251)) | (1 << (MariaDBParser.JSON_INSERT - 251)) | (1 << (MariaDBParser.JSON_KEYS - 251)) | (1 << (MariaDBParser.JSON_LENGTH - 251)) | (1 << (MariaDBParser.JSON_MERGE - 251)) | (1 << (MariaDBParser.JSON_MERGE_PATCH - 251)) | (1 << (MariaDBParser.JSON_MERGE_PRESERVE - 251)) | (1 << (MariaDBParser.JSON_OBJECT - 251)) | (1 << (MariaDBParser.JSON_OBJECTAGG - 251)) | (1 << (MariaDBParser.JSON_OVERLAPS - 251)) | (1 << (MariaDBParser.JSON_PRETTY - 251)) | (1 << (MariaDBParser.JSON_QUOTE - 251)) | (1 << (MariaDBParser.JSON_REMOVE - 251)) | (1 << (MariaDBParser.JSON_REPLACE - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALID - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT - 251)) | (1 << (MariaDBParser.JSON_SEARCH - 251)) | (1 << (MariaDBParser.JSON_SET - 251)) | (1 << (MariaDBParser.JSON_STORAGE_FREE - 251)) | (1 << (MariaDBParser.JSON_STORAGE_SIZE - 251)) | (1 << (MariaDBParser.JSON_TABLE - 251)) | (1 << (MariaDBParser.JSON_TYPE - 251)) | (1 << (MariaDBParser.JSON_UNQUOTE - 251)) | (1 << (MariaDBParser.JSON_VALID - 251)) | (1 << (MariaDBParser.JSON_VALUE - 251)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (MariaDBParser.NESTED - 283)) | (1 << (MariaDBParser.ORDINALITY - 283)) | (1 << (MariaDBParser.PATH - 283)) | (1 << (MariaDBParser.AVG - 283)) | (1 << (MariaDBParser.BIT_AND - 283)) | (1 << (MariaDBParser.BIT_OR - 283)) | (1 << (MariaDBParser.BIT_XOR - 283)) | (1 << (MariaDBParser.COUNT - 283)) | (1 << (MariaDBParser.CUME_DIST - 283)) | (1 << (MariaDBParser.DENSE_RANK - 283)) | (1 << (MariaDBParser.FIRST_VALUE - 283)) | (1 << (MariaDBParser.GROUP_CONCAT - 283)) | (1 << (MariaDBParser.LAG - 283)) | (1 << (MariaDBParser.LAST_VALUE - 283)) | (1 << (MariaDBParser.LEAD - 283)) | (1 << (MariaDBParser.MAX - 283)) | (1 << (MariaDBParser.MIN - 283)) | (1 << (MariaDBParser.NTILE - 283)) | (1 << (MariaDBParser.NTH_VALUE - 283)) | (1 << (MariaDBParser.PERCENT_RANK - 283)) | (1 << (MariaDBParser.RANK - 283)) | (1 << (MariaDBParser.ROW_NUMBER - 283)) | (1 << (MariaDBParser.STD - 283)) | (1 << (MariaDBParser.STDDEV - 283)) | (1 << (MariaDBParser.STDDEV_POP - 283)) | (1 << (MariaDBParser.STDDEV_SAMP - 283)) | (1 << (MariaDBParser.SUM - 283)) | (1 << (MariaDBParser.VAR_POP - 283)) | (1 << (MariaDBParser.VAR_SAMP - 283)) | (1 << (MariaDBParser.VARIANCE - 283)) | (1 << (MariaDBParser.CURRENT_DATE - 283)) | (1 << (MariaDBParser.CURRENT_TIME - 283)))) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & ((1 << (MariaDBParser.CURRENT_TIMESTAMP - 315)) | (1 << (MariaDBParser.LOCALTIME - 315)) | (1 << (MariaDBParser.CURDATE - 315)) | (1 << (MariaDBParser.CURTIME - 315)) | (1 << (MariaDBParser.DATE_ADD - 315)) | (1 << (MariaDBParser.DATE_SUB - 315)) | (1 << (MariaDBParser.LOCALTIMESTAMP - 315)) | (1 << (MariaDBParser.NOW - 315)) | (1 << (MariaDBParser.POSITION - 315)) | (1 << (MariaDBParser.SUBSTR - 315)) | (1 << (MariaDBParser.SUBSTRING - 315)) | (1 << (MariaDBParser.SYSDATE - 315)) | (1 << (MariaDBParser.TRIM - 315)) | (1 << (MariaDBParser.UTC_DATE - 315)) | (1 << (MariaDBParser.UTC_TIME - 315)) | (1 << (MariaDBParser.UTC_TIMESTAMP - 315)) | (1 << (MariaDBParser.ACCOUNT - 315)) | (1 << (MariaDBParser.ACTION - 315)) | (1 << (MariaDBParser.AFTER - 315)) | (1 << (MariaDBParser.AGGREGATE - 315)) | (1 << (MariaDBParser.ALGORITHM - 315)) | (1 << (MariaDBParser.ANY - 315)) | (1 << (MariaDBParser.AT - 315)) | (1 << (MariaDBParser.AUTHORS - 315)) | (1 << (MariaDBParser.AUTOCOMMIT - 315)) | (1 << (MariaDBParser.AUTOEXTEND_SIZE - 315)) | (1 << (MariaDBParser.AUTO_INCREMENT - 315)) | (1 << (MariaDBParser.AVG_ROW_LENGTH - 315)) | (1 << (MariaDBParser.BEGIN - 315)) | (1 << (MariaDBParser.BINLOG - 315)) | (1 << (MariaDBParser.BIT - 315)))) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & ((1 << (MariaDBParser.BLOCK - 347)) | (1 << (MariaDBParser.BOOL - 347)) | (1 << (MariaDBParser.BOOLEAN - 347)) | (1 << (MariaDBParser.BTREE - 347)) | (1 << (MariaDBParser.CACHE - 347)) | (1 << (MariaDBParser.CASCADED - 347)) | (1 << (MariaDBParser.CHAIN - 347)) | (1 << (MariaDBParser.CHANGED - 347)) | (1 << (MariaDBParser.CHANNEL - 347)) | (1 << (MariaDBParser.CHECKSUM - 347)) | (1 << (MariaDBParser.PAGE_CHECKSUM - 347)) | (1 << (MariaDBParser.CIPHER - 347)) | (1 << (MariaDBParser.CLASS_ORIGIN - 347)) | (1 << (MariaDBParser.CLIENT - 347)) | (1 << (MariaDBParser.CLOSE - 347)) | (1 << (MariaDBParser.CLUSTERING - 347)) | (1 << (MariaDBParser.COALESCE - 347)) | (1 << (MariaDBParser.CODE - 347)) | (1 << (MariaDBParser.COLUMNS - 347)) | (1 << (MariaDBParser.COLUMN_FORMAT - 347)) | (1 << (MariaDBParser.COLUMN_NAME - 347)) | (1 << (MariaDBParser.COMMENT - 347)) | (1 << (MariaDBParser.COMMIT - 347)) | (1 << (MariaDBParser.COMPACT - 347)) | (1 << (MariaDBParser.COMPLETION - 347)) | (1 << (MariaDBParser.COMPRESSED - 347)) | (1 << (MariaDBParser.COMPRESSION - 347)) | (1 << (MariaDBParser.CONCURRENT - 347)) | (1 << (MariaDBParser.CONNECT - 347)) | (1 << (MariaDBParser.CONNECTION - 347)) | (1 << (MariaDBParser.CONSISTENT - 347)) | (1 << (MariaDBParser.CONSTRAINT_CATALOG - 347)))) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & ((1 << (MariaDBParser.CONSTRAINT_SCHEMA - 379)) | (1 << (MariaDBParser.CONSTRAINT_NAME - 379)) | (1 << (MariaDBParser.CONTAINS - 379)) | (1 << (MariaDBParser.CONTEXT - 379)) | (1 << (MariaDBParser.CONTRIBUTORS - 379)) | (1 << (MariaDBParser.COPY - 379)) | (1 << (MariaDBParser.CPU - 379)) | (1 << (MariaDBParser.CYCLE - 379)) | (1 << (MariaDBParser.CURSOR_NAME - 379)) | (1 << (MariaDBParser.DATA - 379)) | (1 << (MariaDBParser.DATAFILE - 379)) | (1 << (MariaDBParser.DEALLOCATE - 379)) | (1 << (MariaDBParser.DEFAULT_AUTH - 379)) | (1 << (MariaDBParser.DEFINER - 379)) | (1 << (MariaDBParser.DELAY_KEY_WRITE - 379)) | (1 << (MariaDBParser.DES_KEY_FILE - 379)) | (1 << (MariaDBParser.DIRECTORY - 379)) | (1 << (MariaDBParser.DISABLE - 379)) | (1 << (MariaDBParser.DISCARD - 379)) | (1 << (MariaDBParser.DISK - 379)) | (1 << (MariaDBParser.DO - 379)) | (1 << (MariaDBParser.DUMPFILE - 379)) | (1 << (MariaDBParser.DUPLICATE - 379)) | (1 << (MariaDBParser.DYNAMIC - 379)) | (1 << (MariaDBParser.ENABLE - 379)) | (1 << (MariaDBParser.ENCRYPTED - 379)) | (1 << (MariaDBParser.ENCRYPTION - 379)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ID - 379)) | (1 << (MariaDBParser.END - 379)) | (1 << (MariaDBParser.ENDS - 379)) | (1 << (MariaDBParser.ENGINE - 379)) | (1 << (MariaDBParser.ENGINES - 379)))) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & ((1 << (MariaDBParser.ERROR - 411)) | (1 << (MariaDBParser.ERRORS - 411)) | (1 << (MariaDBParser.ESCAPE - 411)) | (1 << (MariaDBParser.EVEN - 411)) | (1 << (MariaDBParser.EVENT - 411)) | (1 << (MariaDBParser.EVENTS - 411)) | (1 << (MariaDBParser.EVERY - 411)) | (1 << (MariaDBParser.EXCHANGE - 411)) | (1 << (MariaDBParser.EXCLUSIVE - 411)) | (1 << (MariaDBParser.EXPIRE - 411)) | (1 << (MariaDBParser.EXPORT - 411)) | (1 << (MariaDBParser.EXTENDED - 411)) | (1 << (MariaDBParser.EXTENT_SIZE - 411)) | (1 << (MariaDBParser.FAILED_LOGIN_ATTEMPTS - 411)) | (1 << (MariaDBParser.FAST - 411)) | (1 << (MariaDBParser.FAULTS - 411)) | (1 << (MariaDBParser.FIELDS - 411)) | (1 << (MariaDBParser.FILE_BLOCK_SIZE - 411)) | (1 << (MariaDBParser.FILTER - 411)) | (1 << (MariaDBParser.FIRST - 411)) | (1 << (MariaDBParser.FIXED - 411)) | (1 << (MariaDBParser.FLUSH - 411)) | (1 << (MariaDBParser.FOLLOWS - 411)) | (1 << (MariaDBParser.FOUND - 411)) | (1 << (MariaDBParser.FULL - 411)) | (1 << (MariaDBParser.FUNCTION - 411)) | (1 << (MariaDBParser.GENERAL - 411)) | (1 << (MariaDBParser.GLOBAL - 411)) | (1 << (MariaDBParser.GRANTS - 411)) | (1 << (MariaDBParser.GROUP_REPLICATION - 411)) | (1 << (MariaDBParser.HANDLER - 411)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (MariaDBParser.HASH - 443)) | (1 << (MariaDBParser.HELP - 443)) | (1 << (MariaDBParser.HISTORY - 443)) | (1 << (MariaDBParser.HOST - 443)) | (1 << (MariaDBParser.HOSTS - 443)) | (1 << (MariaDBParser.IDENTIFIED - 443)) | (1 << (MariaDBParser.IGNORE_SERVER_IDS - 443)) | (1 << (MariaDBParser.IMPORT - 443)) | (1 << (MariaDBParser.INCREMENT - 443)) | (1 << (MariaDBParser.INDEXES - 443)) | (1 << (MariaDBParser.INITIAL_SIZE - 443)) | (1 << (MariaDBParser.INPLACE - 443)) | (1 << (MariaDBParser.INSERT_METHOD - 443)) | (1 << (MariaDBParser.INSTALL - 443)) | (1 << (MariaDBParser.INSTANCE - 443)) | (1 << (MariaDBParser.INSTANT - 443)) | (1 << (MariaDBParser.INVISIBLE - 443)) | (1 << (MariaDBParser.INVOKER - 443)) | (1 << (MariaDBParser.IO - 443)) | (1 << (MariaDBParser.IO_THREAD - 443)) | (1 << (MariaDBParser.IPC - 443)) | (1 << (MariaDBParser.ISOLATION - 443)) | (1 << (MariaDBParser.ISSUER - 443)) | (1 << (MariaDBParser.JSON - 443)) | (1 << (MariaDBParser.KEY_BLOCK_SIZE - 443)) | (1 << (MariaDBParser.LANGUAGE - 443)) | (1 << (MariaDBParser.LAST - 443)) | (1 << (MariaDBParser.LEAVES - 443)) | (1 << (MariaDBParser.LESS - 443)) | (1 << (MariaDBParser.LEVEL - 443)) | (1 << (MariaDBParser.LIST - 443)) | (1 << (MariaDBParser.LOCAL - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (MariaDBParser.LOCALES - 475)) | (1 << (MariaDBParser.LOGFILE - 475)) | (1 << (MariaDBParser.LOGS - 475)) | (1 << (MariaDBParser.MASTER - 475)) | (1 << (MariaDBParser.MASTER_AUTO_POSITION - 475)) | (1 << (MariaDBParser.MASTER_CONNECT_RETRY - 475)) | (1 << (MariaDBParser.MASTER_DELAY - 475)) | (1 << (MariaDBParser.MASTER_HEARTBEAT_PERIOD - 475)) | (1 << (MariaDBParser.MASTER_HOST - 475)) | (1 << (MariaDBParser.MASTER_LOG_FILE - 475)) | (1 << (MariaDBParser.MASTER_LOG_POS - 475)) | (1 << (MariaDBParser.MASTER_PASSWORD - 475)) | (1 << (MariaDBParser.MASTER_PORT - 475)) | (1 << (MariaDBParser.MASTER_RETRY_COUNT - 475)) | (1 << (MariaDBParser.MASTER_SSL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CA - 475)) | (1 << (MariaDBParser.MASTER_SSL_CAPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_CERT - 475)) | (1 << (MariaDBParser.MASTER_SSL_CIPHER - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRLPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_KEY - 475)) | (1 << (MariaDBParser.MASTER_TLS_VERSION - 475)) | (1 << (MariaDBParser.MASTER_USER - 475)) | (1 << (MariaDBParser.MAX_CONNECTIONS_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_QUERIES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_ROWS - 475)) | (1 << (MariaDBParser.MAX_SIZE - 475)) | (1 << (MariaDBParser.MAX_UPDATES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_USER_CONNECTIONS - 475)) | (1 << (MariaDBParser.MEDIUM - 475)) | (1 << (MariaDBParser.MEMBER - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (MariaDBParser.MERGE - 507)) | (1 << (MariaDBParser.MESSAGE_TEXT - 507)) | (1 << (MariaDBParser.MID - 507)) | (1 << (MariaDBParser.MIGRATE - 507)) | (1 << (MariaDBParser.MIN_ROWS - 507)) | (1 << (MariaDBParser.MODE - 507)) | (1 << (MariaDBParser.MODIFY - 507)) | (1 << (MariaDBParser.MUTEX - 507)) | (1 << (MariaDBParser.MYSQL - 507)) | (1 << (MariaDBParser.MYSQL_ERRNO - 507)) | (1 << (MariaDBParser.NAME - 507)) | (1 << (MariaDBParser.NAMES - 507)) | (1 << (MariaDBParser.NCHAR - 507)) | (1 << (MariaDBParser.NEVER - 507)) | (1 << (MariaDBParser.NEXT - 507)) | (1 << (MariaDBParser.NO - 507)) | (1 << (MariaDBParser.NOCACHE - 507)) | (1 << (MariaDBParser.NOCOPY - 507)) | (1 << (MariaDBParser.NOCYCLE - 507)) | (1 << (MariaDBParser.NOMAXVALUE - 507)) | (1 << (MariaDBParser.NOMINVALUE - 507)) | (1 << (MariaDBParser.NOWAIT - 507)) | (1 << (MariaDBParser.NODEGROUP - 507)) | (1 << (MariaDBParser.NONE - 507)) | (1 << (MariaDBParser.ODBC - 507)) | (1 << (MariaDBParser.OFFLINE - 507)) | (1 << (MariaDBParser.OFFSET - 507)) | (1 << (MariaDBParser.OF - 507)) | (1 << (MariaDBParser.OJ - 507)) | (1 << (MariaDBParser.OLD_PASSWORD - 507)) | (1 << (MariaDBParser.ONE - 507)) | (1 << (MariaDBParser.ONLINE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (MariaDBParser.ONLY - 539)) | (1 << (MariaDBParser.OPEN - 539)) | (1 << (MariaDBParser.OPTIMIZER_COSTS - 539)) | (1 << (MariaDBParser.OPTIONS - 539)) | (1 << (MariaDBParser.OWNER - 539)) | (1 << (MariaDBParser.PACK_KEYS - 539)) | (1 << (MariaDBParser.PAGE - 539)) | (1 << (MariaDBParser.PARSER - 539)) | (1 << (MariaDBParser.PARTIAL - 539)) | (1 << (MariaDBParser.PARTITIONING - 539)) | (1 << (MariaDBParser.PARTITIONS - 539)) | (1 << (MariaDBParser.PASSWORD - 539)) | (1 << (MariaDBParser.PASSWORD_LOCK_TIME - 539)) | (1 << (MariaDBParser.PHASE - 539)) | (1 << (MariaDBParser.PLUGIN - 539)) | (1 << (MariaDBParser.PLUGIN_DIR - 539)) | (1 << (MariaDBParser.PLUGINS - 539)) | (1 << (MariaDBParser.PORT - 539)) | (1 << (MariaDBParser.PRECEDES - 539)) | (1 << (MariaDBParser.PREPARE - 539)) | (1 << (MariaDBParser.PRESERVE - 539)) | (1 << (MariaDBParser.PREV - 539)) | (1 << (MariaDBParser.PROCESSLIST - 539)) | (1 << (MariaDBParser.PROFILE - 539)) | (1 << (MariaDBParser.PROFILES - 539)) | (1 << (MariaDBParser.PROXY - 539)) | (1 << (MariaDBParser.QUERY - 539)) | (1 << (MariaDBParser.QUERY_RESPONSE_TIME - 539)) | (1 << (MariaDBParser.QUICK - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (MariaDBParser.REBUILD - 571)) | (1 << (MariaDBParser.RECOVER - 571)) | (1 << (MariaDBParser.RECURSIVE - 571)) | (1 << (MariaDBParser.REDO_BUFFER_SIZE - 571)) | (1 << (MariaDBParser.REDUNDANT - 571)) | (1 << (MariaDBParser.RELAY - 571)) | (1 << (MariaDBParser.RELAY_LOG_FILE - 571)) | (1 << (MariaDBParser.RELAY_LOG_POS - 571)) | (1 << (MariaDBParser.RELAYLOG - 571)) | (1 << (MariaDBParser.REMOVE - 571)) | (1 << (MariaDBParser.REORGANIZE - 571)) | (1 << (MariaDBParser.REPAIR - 571)) | (1 << (MariaDBParser.REPLICATE_DO_DB - 571)) | (1 << (MariaDBParser.REPLICATE_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_REWRITE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATION - 571)) | (1 << (MariaDBParser.RESET - 571)) | (1 << (MariaDBParser.RESTART - 571)) | (1 << (MariaDBParser.RESUME - 571)) | (1 << (MariaDBParser.RETURNED_SQLSTATE - 571)) | (1 << (MariaDBParser.RETURNS - 571)) | (1 << (MariaDBParser.REUSE - 571)) | (1 << (MariaDBParser.ROLE - 571)) | (1 << (MariaDBParser.ROLLBACK - 571)) | (1 << (MariaDBParser.ROLLUP - 571)) | (1 << (MariaDBParser.ROTATE - 571)) | (1 << (MariaDBParser.ROW - 571)))) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & ((1 << (MariaDBParser.ROWS - 603)) | (1 << (MariaDBParser.ROW_FORMAT - 603)) | (1 << (MariaDBParser.RTREE - 603)) | (1 << (MariaDBParser.SAVEPOINT - 603)) | (1 << (MariaDBParser.SCHEDULE - 603)) | (1 << (MariaDBParser.SECURITY - 603)) | (1 << (MariaDBParser.SEQUENCE - 603)) | (1 << (MariaDBParser.SERVER - 603)) | (1 << (MariaDBParser.SESSION - 603)) | (1 << (MariaDBParser.SHARE - 603)) | (1 << (MariaDBParser.SHARED - 603)) | (1 << (MariaDBParser.SIGNED - 603)) | (1 << (MariaDBParser.SIMPLE - 603)) | (1 << (MariaDBParser.SLAVE - 603)) | (1 << (MariaDBParser.SLAVES - 603)) | (1 << (MariaDBParser.SLOW - 603)) | (1 << (MariaDBParser.SNAPSHOT - 603)) | (1 << (MariaDBParser.SOCKET - 603)) | (1 << (MariaDBParser.SOME - 603)) | (1 << (MariaDBParser.SONAME - 603)) | (1 << (MariaDBParser.SOUNDS - 603)) | (1 << (MariaDBParser.SOURCE - 603)) | (1 << (MariaDBParser.SQL_AFTER_GTIDS - 603)) | (1 << (MariaDBParser.SQL_AFTER_MTS_GAPS - 603)) | (1 << (MariaDBParser.SQL_BEFORE_GTIDS - 603)) | (1 << (MariaDBParser.SQL_BUFFER_RESULT - 603)) | (1 << (MariaDBParser.SQL_CACHE - 603)) | (1 << (MariaDBParser.SQL_NO_CACHE - 603)) | (1 << (MariaDBParser.SQL_THREAD - 603)) | (1 << (MariaDBParser.START - 603)) | (1 << (MariaDBParser.STARTS - 603)) | (1 << (MariaDBParser.STATS_AUTO_RECALC - 603)))) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & ((1 << (MariaDBParser.STATS_PERSISTENT - 635)) | (1 << (MariaDBParser.STATS_SAMPLE_PAGES - 635)) | (1 << (MariaDBParser.STATUS - 635)) | (1 << (MariaDBParser.STOP - 635)) | (1 << (MariaDBParser.STORAGE - 635)) | (1 << (MariaDBParser.STRING - 635)) | (1 << (MariaDBParser.SUBCLASS_ORIGIN - 635)) | (1 << (MariaDBParser.SUBJECT - 635)) | (1 << (MariaDBParser.SUBPARTITION - 635)) | (1 << (MariaDBParser.SUBPARTITIONS - 635)) | (1 << (MariaDBParser.SUSPEND - 635)) | (1 << (MariaDBParser.SWAPS - 635)) | (1 << (MariaDBParser.SWITCHES - 635)) | (1 << (MariaDBParser.TABLE_NAME - 635)) | (1 << (MariaDBParser.TABLESPACE - 635)) | (1 << (MariaDBParser.TABLE_TYPE - 635)) | (1 << (MariaDBParser.TEMPORARY - 635)) | (1 << (MariaDBParser.TEMPTABLE - 635)) | (1 << (MariaDBParser.THAN - 635)) | (1 << (MariaDBParser.TRADITIONAL - 635)) | (1 << (MariaDBParser.TRANSACTION - 635)) | (1 << (MariaDBParser.TRANSACTIONAL - 635)) | (1 << (MariaDBParser.TRIGGERS - 635)) | (1 << (MariaDBParser.TRUNCATE - 635)) | (1 << (MariaDBParser.TYPES - 635)) | (1 << (MariaDBParser.UNBOUNDED - 635)) | (1 << (MariaDBParser.UNDEFINED - 635)) | (1 << (MariaDBParser.UNDOFILE - 635)) | (1 << (MariaDBParser.UNDO_BUFFER_SIZE - 635)) | (1 << (MariaDBParser.UNINSTALL - 635)) | (1 << (MariaDBParser.UNKNOWN - 635)))) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & ((1 << (MariaDBParser.UNTIL - 667)) | (1 << (MariaDBParser.UPGRADE - 667)) | (1 << (MariaDBParser.USER - 667)) | (1 << (MariaDBParser.USE_FRM - 667)) | (1 << (MariaDBParser.USER_RESOURCES - 667)) | (1 << (MariaDBParser.VALIDATION - 667)) | (1 << (MariaDBParser.VALUE - 667)) | (1 << (MariaDBParser.VARIABLES - 667)) | (1 << (MariaDBParser.VIEW - 667)) | (1 << (MariaDBParser.VIRTUAL - 667)) | (1 << (MariaDBParser.VISIBLE - 667)) | (1 << (MariaDBParser.WAIT - 667)) | (1 << (MariaDBParser.WARNINGS - 667)) | (1 << (MariaDBParser.WITHOUT - 667)) | (1 << (MariaDBParser.WORK - 667)) | (1 << (MariaDBParser.WRAPPER - 667)) | (1 << (MariaDBParser.WSREP_MEMBERSHIP - 667)) | (1 << (MariaDBParser.WSREP_STATUS - 667)) | (1 << (MariaDBParser.X509 - 667)) | (1 << (MariaDBParser.XA - 667)) | (1 << (MariaDBParser.XML - 667)) | (1 << (MariaDBParser.EUR - 667)) | (1 << (MariaDBParser.USA - 667)) | (1 << (MariaDBParser.JIS - 667)) | (1 << (MariaDBParser.ISO - 667)) | (1 << (MariaDBParser.INTERNAL - 667)) | (1 << (MariaDBParser.QUARTER - 667)) | (1 << (MariaDBParser.MONTH - 667)) | (1 << (MariaDBParser.DAY - 667)) | (1 << (MariaDBParser.HOUR - 667)))) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & ((1 << (MariaDBParser.MINUTE - 699)) | (1 << (MariaDBParser.WEEK - 699)) | (1 << (MariaDBParser.SECOND - 699)) | (1 << (MariaDBParser.MICROSECOND - 699)) | (1 << (MariaDBParser.USER_STATISTICS - 699)) | (1 << (MariaDBParser.CLIENT_STATISTICS - 699)) | (1 << (MariaDBParser.INDEX_STATISTICS - 699)) | (1 << (MariaDBParser.TABLE_STATISTICS - 699)) | (1 << (MariaDBParser.ADMIN - 699)) | (1 << (MariaDBParser.AUDIT_ADMIN - 699)) | (1 << (MariaDBParser.BACKUP_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ENCRYPTION_ADMIN - 699)) | (1 << (MariaDBParser.CLONE_ADMIN - 699)) | (1 << (MariaDBParser.CONNECTION_ADMIN - 699)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ADMIN - 699)) | (1 << (MariaDBParser.EXECUTE - 699)) | (1 << (MariaDBParser.FILE - 699)) | (1 << (MariaDBParser.FIREWALL_ADMIN - 699)) | (1 << (MariaDBParser.FIREWALL_USER - 699)) | (1 << (MariaDBParser.GROUP_REPLICATION_ADMIN - 699)) | (1 << (MariaDBParser.INNODB_REDO_LOG_ARCHIVE - 699)) | (1 << (MariaDBParser.INVOKE - 699)) | (1 << (MariaDBParser.LAMBDA - 699)) | (1 << (MariaDBParser.NDB_STORED_USER - 699)) | (1 << (MariaDBParser.PASSWORDLESS_USER_ADMIN - 699)))) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & ((1 << (MariaDBParser.PERSIST_RO_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.PRIVILEGES - 731)) | (1 << (MariaDBParser.PROCESS - 731)) | (1 << (MariaDBParser.RELOAD - 731)) | (1 << (MariaDBParser.REPLICATION_APPLIER - 731)) | (1 << (MariaDBParser.REPLICATION_SLAVE_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_USER - 731)) | (1 << (MariaDBParser.ROLE_ADMIN - 731)) | (1 << (MariaDBParser.ROUTINE - 731)) | (1 << (MariaDBParser.S3 - 731)) | (1 << (MariaDBParser.SESSION_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.SET_USER_ID - 731)) | (1 << (MariaDBParser.SHOW_ROUTINE - 731)) | (1 << (MariaDBParser.SHUTDOWN - 731)) | (1 << (MariaDBParser.SUPER - 731)) | (1 << (MariaDBParser.SYSTEM_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.TABLES - 731)) | (1 << (MariaDBParser.TABLE_ENCRYPTION_ADMIN - 731)) | (1 << (MariaDBParser.VERSION_TOKEN_ADMIN - 731)) | (1 << (MariaDBParser.XA_RECOVER_ADMIN - 731)) | (1 << (MariaDBParser.ARMSCII8 - 731)) | (1 << (MariaDBParser.ASCII - 731)) | (1 << (MariaDBParser.BIG5 - 731)) | (1 << (MariaDBParser.CP1250 - 731)) | (1 << (MariaDBParser.CP1251 - 731)) | (1 << (MariaDBParser.CP1256 - 731)) | (1 << (MariaDBParser.CP1257 - 731)) | (1 << (MariaDBParser.CP850 - 731)) | (1 << (MariaDBParser.CP852 - 731)) | (1 << (MariaDBParser.CP866 - 731)))) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & ((1 << (MariaDBParser.CP932 - 763)) | (1 << (MariaDBParser.DEC8 - 763)) | (1 << (MariaDBParser.EUCJPMS - 763)) | (1 << (MariaDBParser.EUCKR - 763)) | (1 << (MariaDBParser.GB18030 - 763)) | (1 << (MariaDBParser.GB2312 - 763)) | (1 << (MariaDBParser.GBK - 763)) | (1 << (MariaDBParser.GEOSTD8 - 763)) | (1 << (MariaDBParser.GREEK - 763)) | (1 << (MariaDBParser.HEBREW - 763)) | (1 << (MariaDBParser.HP8 - 763)) | (1 << (MariaDBParser.KEYBCS2 - 763)) | (1 << (MariaDBParser.KOI8R - 763)) | (1 << (MariaDBParser.KOI8U - 763)) | (1 << (MariaDBParser.LATIN1 - 763)) | (1 << (MariaDBParser.LATIN2 - 763)) | (1 << (MariaDBParser.LATIN5 - 763)) | (1 << (MariaDBParser.LATIN7 - 763)) | (1 << (MariaDBParser.MACCE - 763)) | (1 << (MariaDBParser.MACROMAN - 763)) | (1 << (MariaDBParser.SJIS - 763)) | (1 << (MariaDBParser.SWE7 - 763)) | (1 << (MariaDBParser.TIS620 - 763)) | (1 << (MariaDBParser.UCS2 - 763)) | (1 << (MariaDBParser.UJIS - 763)) | (1 << (MariaDBParser.UTF16 - 763)) | (1 << (MariaDBParser.UTF16LE - 763)) | (1 << (MariaDBParser.UTF32 - 763)) | (1 << (MariaDBParser.UTF8 - 763)) | (1 << (MariaDBParser.UTF8MB3 - 763)) | (1 << (MariaDBParser.UTF8MB4 - 763)) | (1 << (MariaDBParser.ARCHIVE - 763)))) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & ((1 << (MariaDBParser.BLACKHOLE - 795)) | (1 << (MariaDBParser.CSV - 795)) | (1 << (MariaDBParser.FEDERATED - 795)) | (1 << (MariaDBParser.INNODB - 795)) | (1 << (MariaDBParser.MEMORY - 795)) | (1 << (MariaDBParser.MRG_MYISAM - 795)) | (1 << (MariaDBParser.MYISAM - 795)) | (1 << (MariaDBParser.NDB - 795)) | (1 << (MariaDBParser.NDBCLUSTER - 795)) | (1 << (MariaDBParser.PERFORMANCE_SCHEMA - 795)) | (1 << (MariaDBParser.TOKUDB - 795)) | (1 << (MariaDBParser.REPEATABLE - 795)) | (1 << (MariaDBParser.COMMITTED - 795)) | (1 << (MariaDBParser.UNCOMMITTED - 795)) | (1 << (MariaDBParser.SERIALIZABLE - 795)) | (1 << (MariaDBParser.GEOMETRYCOLLECTION - 795)) | (1 << (MariaDBParser.LINESTRING - 795)) | (1 << (MariaDBParser.MULTILINESTRING - 795)) | (1 << (MariaDBParser.MULTIPOINT - 795)) | (1 << (MariaDBParser.MULTIPOLYGON - 795)) | (1 << (MariaDBParser.POINT - 795)) | (1 << (MariaDBParser.POLYGON - 795)) | (1 << (MariaDBParser.ABS - 795)) | (1 << (MariaDBParser.ACOS - 795)) | (1 << (MariaDBParser.ADDDATE - 795)) | (1 << (MariaDBParser.ADDTIME - 795)) | (1 << (MariaDBParser.AES_DECRYPT - 795)) | (1 << (MariaDBParser.AES_ENCRYPT - 795)) | (1 << (MariaDBParser.AREA - 795)) | (1 << (MariaDBParser.ASBINARY - 795)))) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & ((1 << (MariaDBParser.ASIN - 827)) | (1 << (MariaDBParser.ASTEXT - 827)) | (1 << (MariaDBParser.ASWKB - 827)) | (1 << (MariaDBParser.ASWKT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DECRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DERIVE - 827)) | (1 << (MariaDBParser.ASYMMETRIC_ENCRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_SIGN - 827)) | (1 << (MariaDBParser.ASYMMETRIC_VERIFY - 827)) | (1 << (MariaDBParser.ATAN - 827)) | (1 << (MariaDBParser.ATAN2 - 827)) | (1 << (MariaDBParser.BENCHMARK - 827)) | (1 << (MariaDBParser.BIN - 827)) | (1 << (MariaDBParser.BIT_COUNT - 827)) | (1 << (MariaDBParser.BIT_LENGTH - 827)) | (1 << (MariaDBParser.BUFFER - 827)) | (1 << (MariaDBParser.CATALOG_NAME - 827)) | (1 << (MariaDBParser.CEIL - 827)) | (1 << (MariaDBParser.CEILING - 827)) | (1 << (MariaDBParser.CENTROID - 827)) | (1 << (MariaDBParser.CHARACTER_LENGTH - 827)) | (1 << (MariaDBParser.CHARSET - 827)) | (1 << (MariaDBParser.CHAR_LENGTH - 827)) | (1 << (MariaDBParser.COERCIBILITY - 827)) | (1 << (MariaDBParser.COLLATION - 827)) | (1 << (MariaDBParser.COMPRESS - 827)) | (1 << (MariaDBParser.CONCAT - 827)) | (1 << (MariaDBParser.CONCAT_WS - 827)) | (1 << (MariaDBParser.CONNECTION_ID - 827)) | (1 << (MariaDBParser.CONV - 827)) | (1 << (MariaDBParser.CONVERT_TZ - 827)) | (1 << (MariaDBParser.COS - 827)))) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & ((1 << (MariaDBParser.COT - 859)) | (1 << (MariaDBParser.CRC32 - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY - 859)) | (1 << (MariaDBParser.CREATE_DH_PARAMETERS - 859)) | (1 << (MariaDBParser.CREATE_DIGEST - 859)) | (1 << (MariaDBParser.CROSSES - 859)) | (1 << (MariaDBParser.DATEDIFF - 859)) | (1 << (MariaDBParser.DATE_FORMAT - 859)) | (1 << (MariaDBParser.DAYNAME - 859)) | (1 << (MariaDBParser.DAYOFMONTH - 859)) | (1 << (MariaDBParser.DAYOFWEEK - 859)) | (1 << (MariaDBParser.DAYOFYEAR - 859)) | (1 << (MariaDBParser.DECODE - 859)) | (1 << (MariaDBParser.DEGREES - 859)) | (1 << (MariaDBParser.DES_DECRYPT - 859)) | (1 << (MariaDBParser.DES_ENCRYPT - 859)) | (1 << (MariaDBParser.DIMENSION - 859)) | (1 << (MariaDBParser.DISJOINT - 859)) | (1 << (MariaDBParser.ELT - 859)) | (1 << (MariaDBParser.ENCODE - 859)) | (1 << (MariaDBParser.ENCRYPT - 859)) | (1 << (MariaDBParser.ENDPOINT - 859)) | (1 << (MariaDBParser.ENGINE_ATTRIBUTE - 859)) | (1 << (MariaDBParser.ENVELOPE - 859)) | (1 << (MariaDBParser.EQUALS - 859)) | (1 << (MariaDBParser.EXP - 859)) | (1 << (MariaDBParser.EXPORT_SET - 859)) | (1 << (MariaDBParser.EXTERIORRING - 859)) | (1 << (MariaDBParser.EXTRACTVALUE - 859)) | (1 << (MariaDBParser.FIELD - 859)) | (1 << (MariaDBParser.FIND_IN_SET - 859)))) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & ((1 << (MariaDBParser.FLOOR - 891)) | (1 << (MariaDBParser.FORMAT - 891)) | (1 << (MariaDBParser.FOUND_ROWS - 891)) | (1 << (MariaDBParser.FROM_BASE64 - 891)) | (1 << (MariaDBParser.FROM_DAYS - 891)) | (1 << (MariaDBParser.FROM_UNIXTIME - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYN - 891)) | (1 << (MariaDBParser.GEOMETRYTYPE - 891)) | (1 << (MariaDBParser.GEOMFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMFROMWKB - 891)) | (1 << (MariaDBParser.GET_FORMAT - 891)) | (1 << (MariaDBParser.GET_LOCK - 891)) | (1 << (MariaDBParser.GLENGTH - 891)) | (1 << (MariaDBParser.GREATEST - 891)) | (1 << (MariaDBParser.GTID_SUBSET - 891)) | (1 << (MariaDBParser.GTID_SUBTRACT - 891)) | (1 << (MariaDBParser.HEX - 891)) | (1 << (MariaDBParser.IFNULL - 891)) | (1 << (MariaDBParser.INET6_ATON - 891)) | (1 << (MariaDBParser.INET6_NTOA - 891)) | (1 << (MariaDBParser.INET_ATON - 891)) | (1 << (MariaDBParser.INET_NTOA - 891)) | (1 << (MariaDBParser.INSTR - 891)) | (1 << (MariaDBParser.INTERIORRINGN - 891)) | (1 << (MariaDBParser.INTERSECTS - 891)) | (1 << (MariaDBParser.ISCLOSED - 891)))) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & ((1 << (MariaDBParser.ISEMPTY - 923)) | (1 << (MariaDBParser.ISNULL - 923)) | (1 << (MariaDBParser.ISSIMPLE - 923)) | (1 << (MariaDBParser.IS_FREE_LOCK - 923)) | (1 << (MariaDBParser.IS_IPV4 - 923)) | (1 << (MariaDBParser.IS_IPV4_COMPAT - 923)) | (1 << (MariaDBParser.IS_IPV4_MAPPED - 923)) | (1 << (MariaDBParser.IS_IPV6 - 923)) | (1 << (MariaDBParser.IS_USED_LOCK - 923)) | (1 << (MariaDBParser.LAST_INSERT_ID - 923)) | (1 << (MariaDBParser.LCASE - 923)) | (1 << (MariaDBParser.LEAST - 923)) | (1 << (MariaDBParser.LENGTH - 923)) | (1 << (MariaDBParser.LINEFROMTEXT - 923)) | (1 << (MariaDBParser.LINEFROMWKB - 923)) | (1 << (MariaDBParser.LINESTRINGFROMTEXT - 923)) | (1 << (MariaDBParser.LINESTRINGFROMWKB - 923)) | (1 << (MariaDBParser.LN - 923)) | (1 << (MariaDBParser.LOAD_FILE - 923)) | (1 << (MariaDBParser.LOCATE - 923)) | (1 << (MariaDBParser.LOG - 923)) | (1 << (MariaDBParser.LOG10 - 923)) | (1 << (MariaDBParser.LOG2 - 923)) | (1 << (MariaDBParser.LOWER - 923)) | (1 << (MariaDBParser.LPAD - 923)) | (1 << (MariaDBParser.LTRIM - 923)) | (1 << (MariaDBParser.MAKEDATE - 923)) | (1 << (MariaDBParser.MAKETIME - 923)) | (1 << (MariaDBParser.MAKE_SET - 923)) | (1 << (MariaDBParser.MASTER_POS_WAIT - 923)) | (1 << (MariaDBParser.MBRCONTAINS - 923)) | (1 << (MariaDBParser.MBRDISJOINT - 923)))) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & ((1 << (MariaDBParser.MBREQUAL - 955)) | (1 << (MariaDBParser.MBRINTERSECTS - 955)) | (1 << (MariaDBParser.MBROVERLAPS - 955)) | (1 << (MariaDBParser.MBRTOUCHES - 955)) | (1 << (MariaDBParser.MBRWITHIN - 955)) | (1 << (MariaDBParser.MD5 - 955)) | (1 << (MariaDBParser.MLINEFROMTEXT - 955)) | (1 << (MariaDBParser.MLINEFROMWKB - 955)) | (1 << (MariaDBParser.MONTHNAME - 955)) | (1 << (MariaDBParser.MPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MPOLYFROMTEXT - 955)) | (1 << (MariaDBParser.MPOLYFROMWKB - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMTEXT - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMWKB - 955)) | (1 << (MariaDBParser.NAME_CONST - 955)) | (1 << (MariaDBParser.NULLIF - 955)) | (1 << (MariaDBParser.NUMGEOMETRIES - 955)) | (1 << (MariaDBParser.NUMINTERIORRINGS - 955)) | (1 << (MariaDBParser.NUMPOINTS - 955)) | (1 << (MariaDBParser.OCT - 955)) | (1 << (MariaDBParser.OCTET_LENGTH - 955)) | (1 << (MariaDBParser.ORD - 955)) | (1 << (MariaDBParser.OVERLAPS - 955)) | (1 << (MariaDBParser.PERIOD_ADD - 955)) | (1 << (MariaDBParser.PERIOD_DIFF - 955)) | (1 << (MariaDBParser.PI - 955)) | (1 << (MariaDBParser.POINTFROMTEXT - 955)))) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & ((1 << (MariaDBParser.POINTFROMWKB - 987)) | (1 << (MariaDBParser.POINTN - 987)) | (1 << (MariaDBParser.POLYFROMTEXT - 987)) | (1 << (MariaDBParser.POLYFROMWKB - 987)) | (1 << (MariaDBParser.POLYGONFROMTEXT - 987)) | (1 << (MariaDBParser.POLYGONFROMWKB - 987)) | (1 << (MariaDBParser.POW - 987)) | (1 << (MariaDBParser.POWER - 987)) | (1 << (MariaDBParser.QUOTE - 987)) | (1 << (MariaDBParser.RADIANS - 987)) | (1 << (MariaDBParser.RAND - 987)) | (1 << (MariaDBParser.RANDOM_BYTES - 987)) | (1 << (MariaDBParser.RELEASE_LOCK - 987)) | (1 << (MariaDBParser.REVERSE - 987)) | (1 << (MariaDBParser.ROUND - 987)) | (1 << (MariaDBParser.ROW_COUNT - 987)) | (1 << (MariaDBParser.RPAD - 987)) | (1 << (MariaDBParser.RTRIM - 987)) | (1 << (MariaDBParser.SEC_TO_TIME - 987)) | (1 << (MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE - 987)) | (1 << (MariaDBParser.SESSION_USER - 987)) | (1 << (MariaDBParser.SHA - 987)) | (1 << (MariaDBParser.SHA1 - 987)) | (1 << (MariaDBParser.SHA2 - 987)) | (1 << (MariaDBParser.SCHEMA_NAME - 987)) | (1 << (MariaDBParser.SIGN - 987)) | (1 << (MariaDBParser.SIN - 987)) | (1 << (MariaDBParser.SLEEP - 987)) | (1 << (MariaDBParser.SOUNDEX - 987)) | (1 << (MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS - 987)) | (1 << (MariaDBParser.SQRT - 987)) | (1 << (MariaDBParser.SRID - 987)))) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & ((1 << (MariaDBParser.STARTPOINT - 1019)) | (1 << (MariaDBParser.STRCMP - 1019)) | (1 << (MariaDBParser.STR_TO_DATE - 1019)) | (1 << (MariaDBParser.ST_AREA - 1019)) | (1 << (MariaDBParser.ST_ASBINARY - 1019)) | (1 << (MariaDBParser.ST_ASTEXT - 1019)) | (1 << (MariaDBParser.ST_ASWKB - 1019)) | (1 << (MariaDBParser.ST_ASWKT - 1019)) | (1 << (MariaDBParser.ST_BUFFER - 1019)) | (1 << (MariaDBParser.ST_CENTROID - 1019)) | (1 << (MariaDBParser.ST_CONTAINS - 1019)) | (1 << (MariaDBParser.ST_CROSSES - 1019)) | (1 << (MariaDBParser.ST_DIFFERENCE - 1019)) | (1 << (MariaDBParser.ST_DIMENSION - 1019)) | (1 << (MariaDBParser.ST_DISJOINT - 1019)) | (1 << (MariaDBParser.ST_DISTANCE - 1019)) | (1 << (MariaDBParser.ST_ENDPOINT - 1019)) | (1 << (MariaDBParser.ST_ENVELOPE - 1019)) | (1 << (MariaDBParser.ST_EQUALS - 1019)) | (1 << (MariaDBParser.ST_EXTERIORRING - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYN - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYTYPE - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMWKB - 1019)) | (1 << (MariaDBParser.ST_INTERIORRINGN - 1019)))) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & ((1 << (MariaDBParser.ST_INTERSECTION - 1051)) | (1 << (MariaDBParser.ST_INTERSECTS - 1051)) | (1 << (MariaDBParser.ST_ISCLOSED - 1051)) | (1 << (MariaDBParser.ST_ISEMPTY - 1051)) | (1 << (MariaDBParser.ST_ISSIMPLE - 1051)) | (1 << (MariaDBParser.ST_LINEFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINEFROMWKB - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMWKB - 1051)) | (1 << (MariaDBParser.ST_NUMGEOMETRIES - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRING - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRINGS - 1051)) | (1 << (MariaDBParser.ST_NUMPOINTS - 1051)) | (1 << (MariaDBParser.ST_OVERLAPS - 1051)) | (1 << (MariaDBParser.ST_POINTFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POINTFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POINTN - 1051)) | (1 << (MariaDBParser.ST_POLYFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMWKB - 1051)) | (1 << (MariaDBParser.ST_SRID - 1051)) | (1 << (MariaDBParser.ST_STARTPOINT - 1051)) | (1 << (MariaDBParser.ST_SYMDIFFERENCE - 1051)) | (1 << (MariaDBParser.ST_TOUCHES - 1051)) | (1 << (MariaDBParser.ST_UNION - 1051)) | (1 << (MariaDBParser.ST_WITHIN - 1051)) | (1 << (MariaDBParser.ST_X - 1051)) | (1 << (MariaDBParser.ST_Y - 1051)) | (1 << (MariaDBParser.SUBDATE - 1051)) | (1 << (MariaDBParser.SUBSTRING_INDEX - 1051)) | (1 << (MariaDBParser.SUBTIME - 1051)))) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & ((1 << (MariaDBParser.SYSTEM_USER - 1083)) | (1 << (MariaDBParser.TAN - 1083)) | (1 << (MariaDBParser.TIMEDIFF - 1083)) | (1 << (MariaDBParser.TIMESTAMPADD - 1083)) | (1 << (MariaDBParser.TIMESTAMPDIFF - 1083)) | (1 << (MariaDBParser.TIME_FORMAT - 1083)) | (1 << (MariaDBParser.TIME_TO_SEC - 1083)) | (1 << (MariaDBParser.TOUCHES - 1083)) | (1 << (MariaDBParser.TO_BASE64 - 1083)) | (1 << (MariaDBParser.TO_DAYS - 1083)) | (1 << (MariaDBParser.TO_SECONDS - 1083)) | (1 << (MariaDBParser.UCASE - 1083)) | (1 << (MariaDBParser.UNCOMPRESS - 1083)) | (1 << (MariaDBParser.UNCOMPRESSED_LENGTH - 1083)) | (1 << (MariaDBParser.UNHEX - 1083)) | (1 << (MariaDBParser.UNIX_TIMESTAMP - 1083)) | (1 << (MariaDBParser.UPDATEXML - 1083)) | (1 << (MariaDBParser.UPPER - 1083)) | (1 << (MariaDBParser.UUID - 1083)) | (1 << (MariaDBParser.UUID_SHORT - 1083)) | (1 << (MariaDBParser.VALIDATE_PASSWORD_STRENGTH - 1083)) | (1 << (MariaDBParser.VERSION - 1083)) | (1 << (MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1083)) | (1 << (MariaDBParser.WEEKDAY - 1083)) | (1 << (MariaDBParser.WEEKOFYEAR - 1083)) | (1 << (MariaDBParser.WEIGHT_STRING - 1083)) | (1 << (MariaDBParser.WITHIN - 1083)) | (1 << (MariaDBParser.YEARWEEK - 1083)) | (1 << (MariaDBParser.Y_FUNCTION - 1083)) | (1 << (MariaDBParser.X_FUNCTION - 1083)) | (1 << (MariaDBParser.VIA - 1083)) | (1 << (MariaDBParser.LASTVAL - 1083)))) !== 0) || ((((_la - 1115)) & ~0x1F) === 0 && ((1 << (_la - 1115)) & ((1 << (MariaDBParser.NEXTVAL - 1115)) | (1 << (MariaDBParser.SETVAL - 1115)) | (1 << (MariaDBParser.PREVIOUS - 1115)) | (1 << (MariaDBParser.PERSISTENT - 1115)) | (1 << (MariaDBParser.BINLOG_MONITOR - 1115)) | (1 << (MariaDBParser.BINLOG_REPLAY - 1115)) | (1 << (MariaDBParser.FEDERATED_ADMIN - 1115)) | (1 << (MariaDBParser.READ_ONLY_ADMIN - 1115)) | (1 << (MariaDBParser.REPLICA - 1115)) | (1 << (MariaDBParser.REPLICAS - 1115)) | (1 << (MariaDBParser.REPLICATION_MASTER_ADMIN - 1115)) | (1 << (MariaDBParser.MONITOR - 1115)) | (1 << (MariaDBParser.READ_ONLY - 1115)) | (1 << (MariaDBParser.REPLAY - 1115)) | (1 << (MariaDBParser.MOD - 1115)))) !== 0) || ((((_la - 1166)) & ~0x1F) === 0 && ((1 << (_la - 1166)) & ((1 << (MariaDBParser.CHARSET_REVERSE_QOUTE_STRING - 1166)) | (1 << (MariaDBParser.STRING_LITERAL - 1166)) | (1 << (MariaDBParser.ID - 1166)))) !== 0)) {
					{
					this.state = 1792;
					(_localctx as PrimaryKeyTableConstraintContext)._index = this.uid();
					}
				}

				this.state = 1796;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.USING) {
					{
					this.state = 1795;
					this.indexType();
					}
				}

				this.state = 1798;
				this.indexColumnNames();
				this.state = 1802;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.IGNORED || _la === MariaDBParser.NOT || _la === MariaDBParser.USING || _la === MariaDBParser.WITH || _la === MariaDBParser.CLUSTERING || _la === MariaDBParser.COMMENT || _la === MariaDBParser.INVISIBLE || _la === MariaDBParser.KEY_BLOCK_SIZE || _la === MariaDBParser.VISIBLE || _la === MariaDBParser.ENGINE_ATTRIBUTE || _la === MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					this.state = 1799;
					this.indexOption();
					}
					}
					this.state = 1804;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 2:
				_localctx = new UniqueKeyTableConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1809;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.CONSTRAINT) {
					{
					this.state = 1805;
					this.match(MariaDBParser.CONSTRAINT);
					this.state = 1807;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MariaDBParser.ATTRIBUTE) | (1 << MariaDBParser.BODY) | (1 << MariaDBParser.BUCKETS) | (1 << MariaDBParser.CONDITION))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (MariaDBParser.CURRENT - 36)) | (1 << (MariaDBParser.CURRENT_ROLE - 36)) | (1 << (MariaDBParser.CURRENT_USER - 36)) | (1 << (MariaDBParser.DATABASE - 36)) | (1 << (MariaDBParser.DEFAULT - 36)) | (1 << (MariaDBParser.DIAGNOSTICS - 36)) | (1 << (MariaDBParser.EMPTY - 36)) | (1 << (MariaDBParser.EXCEPT - 36)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (MariaDBParser.GROUP - 73)) | (1 << (MariaDBParser.IF - 73)) | (1 << (MariaDBParser.IGNORED - 73)) | (1 << (MariaDBParser.INSERT - 73)) | (1 << (MariaDBParser.LATERAL - 73)) | (1 << (MariaDBParser.LEFT - 73)) | (1 << (MariaDBParser.LOCKED - 73)))) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & ((1 << (MariaDBParser.MAXVALUE - 110)) | (1 << (MariaDBParser.MINVALUE - 110)) | (1 << (MariaDBParser.NUMBER - 110)) | (1 << (MariaDBParser.OPTIONAL - 110)) | (1 << (MariaDBParser.ORDER - 110)) | (1 << (MariaDBParser.PRIMARY - 110)) | (1 << (MariaDBParser.PACKAGE - 110)))) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (MariaDBParser.REPLACE - 142)) | (1 << (MariaDBParser.RIGHT - 142)) | (1 << (MariaDBParser.SCHEMA - 142)) | (1 << (MariaDBParser.SKIP_ - 142)) | (1 << (MariaDBParser.STACKED - 142)) | (1 << (MariaDBParser.STATEMENT - 142)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MariaDBParser.DATE - 217)) | (1 << (MariaDBParser.TIME - 217)) | (1 << (MariaDBParser.TIMESTAMP - 217)) | (1 << (MariaDBParser.DATETIME - 217)) | (1 << (MariaDBParser.YEAR - 217)) | (1 << (MariaDBParser.BINARY - 217)) | (1 << (MariaDBParser.TEXT - 217)) | (1 << (MariaDBParser.ENUM - 217)) | (1 << (MariaDBParser.SERIAL - 217)))) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & ((1 << (MariaDBParser.JSON_ARRAY - 251)) | (1 << (MariaDBParser.JSON_ARRAYAGG - 251)) | (1 << (MariaDBParser.JSON_ARRAY_APPEND - 251)) | (1 << (MariaDBParser.JSON_ARRAY_INSERT - 251)) | (1 << (MariaDBParser.JSON_CONTAINS - 251)) | (1 << (MariaDBParser.JSON_CONTAINS_PATH - 251)) | (1 << (MariaDBParser.JSON_DEPTH - 251)) | (1 << (MariaDBParser.JSON_EXTRACT - 251)) | (1 << (MariaDBParser.JSON_INSERT - 251)) | (1 << (MariaDBParser.JSON_KEYS - 251)) | (1 << (MariaDBParser.JSON_LENGTH - 251)) | (1 << (MariaDBParser.JSON_MERGE - 251)) | (1 << (MariaDBParser.JSON_MERGE_PATCH - 251)) | (1 << (MariaDBParser.JSON_MERGE_PRESERVE - 251)) | (1 << (MariaDBParser.JSON_OBJECT - 251)) | (1 << (MariaDBParser.JSON_OBJECTAGG - 251)) | (1 << (MariaDBParser.JSON_OVERLAPS - 251)) | (1 << (MariaDBParser.JSON_PRETTY - 251)) | (1 << (MariaDBParser.JSON_QUOTE - 251)) | (1 << (MariaDBParser.JSON_REMOVE - 251)) | (1 << (MariaDBParser.JSON_REPLACE - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALID - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT - 251)) | (1 << (MariaDBParser.JSON_SEARCH - 251)) | (1 << (MariaDBParser.JSON_SET - 251)) | (1 << (MariaDBParser.JSON_STORAGE_FREE - 251)) | (1 << (MariaDBParser.JSON_STORAGE_SIZE - 251)) | (1 << (MariaDBParser.JSON_TABLE - 251)) | (1 << (MariaDBParser.JSON_TYPE - 251)) | (1 << (MariaDBParser.JSON_UNQUOTE - 251)) | (1 << (MariaDBParser.JSON_VALID - 251)) | (1 << (MariaDBParser.JSON_VALUE - 251)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (MariaDBParser.NESTED - 283)) | (1 << (MariaDBParser.ORDINALITY - 283)) | (1 << (MariaDBParser.PATH - 283)) | (1 << (MariaDBParser.AVG - 283)) | (1 << (MariaDBParser.BIT_AND - 283)) | (1 << (MariaDBParser.BIT_OR - 283)) | (1 << (MariaDBParser.BIT_XOR - 283)) | (1 << (MariaDBParser.COUNT - 283)) | (1 << (MariaDBParser.CUME_DIST - 283)) | (1 << (MariaDBParser.DENSE_RANK - 283)) | (1 << (MariaDBParser.FIRST_VALUE - 283)) | (1 << (MariaDBParser.GROUP_CONCAT - 283)) | (1 << (MariaDBParser.LAG - 283)) | (1 << (MariaDBParser.LAST_VALUE - 283)) | (1 << (MariaDBParser.LEAD - 283)) | (1 << (MariaDBParser.MAX - 283)) | (1 << (MariaDBParser.MIN - 283)) | (1 << (MariaDBParser.NTILE - 283)) | (1 << (MariaDBParser.NTH_VALUE - 283)) | (1 << (MariaDBParser.PERCENT_RANK - 283)) | (1 << (MariaDBParser.RANK - 283)) | (1 << (MariaDBParser.ROW_NUMBER - 283)) | (1 << (MariaDBParser.STD - 283)) | (1 << (MariaDBParser.STDDEV - 283)) | (1 << (MariaDBParser.STDDEV_POP - 283)) | (1 << (MariaDBParser.STDDEV_SAMP - 283)) | (1 << (MariaDBParser.SUM - 283)) | (1 << (MariaDBParser.VAR_POP - 283)) | (1 << (MariaDBParser.VAR_SAMP - 283)) | (1 << (MariaDBParser.VARIANCE - 283)) | (1 << (MariaDBParser.CURRENT_DATE - 283)) | (1 << (MariaDBParser.CURRENT_TIME - 283)))) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & ((1 << (MariaDBParser.CURRENT_TIMESTAMP - 315)) | (1 << (MariaDBParser.LOCALTIME - 315)) | (1 << (MariaDBParser.CURDATE - 315)) | (1 << (MariaDBParser.CURTIME - 315)) | (1 << (MariaDBParser.DATE_ADD - 315)) | (1 << (MariaDBParser.DATE_SUB - 315)) | (1 << (MariaDBParser.LOCALTIMESTAMP - 315)) | (1 << (MariaDBParser.NOW - 315)) | (1 << (MariaDBParser.POSITION - 315)) | (1 << (MariaDBParser.SUBSTR - 315)) | (1 << (MariaDBParser.SUBSTRING - 315)) | (1 << (MariaDBParser.SYSDATE - 315)) | (1 << (MariaDBParser.TRIM - 315)) | (1 << (MariaDBParser.UTC_DATE - 315)) | (1 << (MariaDBParser.UTC_TIME - 315)) | (1 << (MariaDBParser.UTC_TIMESTAMP - 315)) | (1 << (MariaDBParser.ACCOUNT - 315)) | (1 << (MariaDBParser.ACTION - 315)) | (1 << (MariaDBParser.AFTER - 315)) | (1 << (MariaDBParser.AGGREGATE - 315)) | (1 << (MariaDBParser.ALGORITHM - 315)) | (1 << (MariaDBParser.ANY - 315)) | (1 << (MariaDBParser.AT - 315)) | (1 << (MariaDBParser.AUTHORS - 315)) | (1 << (MariaDBParser.AUTOCOMMIT - 315)) | (1 << (MariaDBParser.AUTOEXTEND_SIZE - 315)) | (1 << (MariaDBParser.AUTO_INCREMENT - 315)) | (1 << (MariaDBParser.AVG_ROW_LENGTH - 315)) | (1 << (MariaDBParser.BEGIN - 315)) | (1 << (MariaDBParser.BINLOG - 315)) | (1 << (MariaDBParser.BIT - 315)))) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & ((1 << (MariaDBParser.BLOCK - 347)) | (1 << (MariaDBParser.BOOL - 347)) | (1 << (MariaDBParser.BOOLEAN - 347)) | (1 << (MariaDBParser.BTREE - 347)) | (1 << (MariaDBParser.CACHE - 347)) | (1 << (MariaDBParser.CASCADED - 347)) | (1 << (MariaDBParser.CHAIN - 347)) | (1 << (MariaDBParser.CHANGED - 347)) | (1 << (MariaDBParser.CHANNEL - 347)) | (1 << (MariaDBParser.CHECKSUM - 347)) | (1 << (MariaDBParser.PAGE_CHECKSUM - 347)) | (1 << (MariaDBParser.CIPHER - 347)) | (1 << (MariaDBParser.CLASS_ORIGIN - 347)) | (1 << (MariaDBParser.CLIENT - 347)) | (1 << (MariaDBParser.CLOSE - 347)) | (1 << (MariaDBParser.CLUSTERING - 347)) | (1 << (MariaDBParser.COALESCE - 347)) | (1 << (MariaDBParser.CODE - 347)) | (1 << (MariaDBParser.COLUMNS - 347)) | (1 << (MariaDBParser.COLUMN_FORMAT - 347)) | (1 << (MariaDBParser.COLUMN_NAME - 347)) | (1 << (MariaDBParser.COMMENT - 347)) | (1 << (MariaDBParser.COMMIT - 347)) | (1 << (MariaDBParser.COMPACT - 347)) | (1 << (MariaDBParser.COMPLETION - 347)) | (1 << (MariaDBParser.COMPRESSED - 347)) | (1 << (MariaDBParser.COMPRESSION - 347)) | (1 << (MariaDBParser.CONCURRENT - 347)) | (1 << (MariaDBParser.CONNECT - 347)) | (1 << (MariaDBParser.CONNECTION - 347)) | (1 << (MariaDBParser.CONSISTENT - 347)) | (1 << (MariaDBParser.CONSTRAINT_CATALOG - 347)))) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & ((1 << (MariaDBParser.CONSTRAINT_SCHEMA - 379)) | (1 << (MariaDBParser.CONSTRAINT_NAME - 379)) | (1 << (MariaDBParser.CONTAINS - 379)) | (1 << (MariaDBParser.CONTEXT - 379)) | (1 << (MariaDBParser.CONTRIBUTORS - 379)) | (1 << (MariaDBParser.COPY - 379)) | (1 << (MariaDBParser.CPU - 379)) | (1 << (MariaDBParser.CYCLE - 379)) | (1 << (MariaDBParser.CURSOR_NAME - 379)) | (1 << (MariaDBParser.DATA - 379)) | (1 << (MariaDBParser.DATAFILE - 379)) | (1 << (MariaDBParser.DEALLOCATE - 379)) | (1 << (MariaDBParser.DEFAULT_AUTH - 379)) | (1 << (MariaDBParser.DEFINER - 379)) | (1 << (MariaDBParser.DELAY_KEY_WRITE - 379)) | (1 << (MariaDBParser.DES_KEY_FILE - 379)) | (1 << (MariaDBParser.DIRECTORY - 379)) | (1 << (MariaDBParser.DISABLE - 379)) | (1 << (MariaDBParser.DISCARD - 379)) | (1 << (MariaDBParser.DISK - 379)) | (1 << (MariaDBParser.DO - 379)) | (1 << (MariaDBParser.DUMPFILE - 379)) | (1 << (MariaDBParser.DUPLICATE - 379)) | (1 << (MariaDBParser.DYNAMIC - 379)) | (1 << (MariaDBParser.ENABLE - 379)) | (1 << (MariaDBParser.ENCRYPTED - 379)) | (1 << (MariaDBParser.ENCRYPTION - 379)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ID - 379)) | (1 << (MariaDBParser.END - 379)) | (1 << (MariaDBParser.ENDS - 379)) | (1 << (MariaDBParser.ENGINE - 379)) | (1 << (MariaDBParser.ENGINES - 379)))) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & ((1 << (MariaDBParser.ERROR - 411)) | (1 << (MariaDBParser.ERRORS - 411)) | (1 << (MariaDBParser.ESCAPE - 411)) | (1 << (MariaDBParser.EVEN - 411)) | (1 << (MariaDBParser.EVENT - 411)) | (1 << (MariaDBParser.EVENTS - 411)) | (1 << (MariaDBParser.EVERY - 411)) | (1 << (MariaDBParser.EXCHANGE - 411)) | (1 << (MariaDBParser.EXCLUSIVE - 411)) | (1 << (MariaDBParser.EXPIRE - 411)) | (1 << (MariaDBParser.EXPORT - 411)) | (1 << (MariaDBParser.EXTENDED - 411)) | (1 << (MariaDBParser.EXTENT_SIZE - 411)) | (1 << (MariaDBParser.FAILED_LOGIN_ATTEMPTS - 411)) | (1 << (MariaDBParser.FAST - 411)) | (1 << (MariaDBParser.FAULTS - 411)) | (1 << (MariaDBParser.FIELDS - 411)) | (1 << (MariaDBParser.FILE_BLOCK_SIZE - 411)) | (1 << (MariaDBParser.FILTER - 411)) | (1 << (MariaDBParser.FIRST - 411)) | (1 << (MariaDBParser.FIXED - 411)) | (1 << (MariaDBParser.FLUSH - 411)) | (1 << (MariaDBParser.FOLLOWS - 411)) | (1 << (MariaDBParser.FOUND - 411)) | (1 << (MariaDBParser.FULL - 411)) | (1 << (MariaDBParser.FUNCTION - 411)) | (1 << (MariaDBParser.GENERAL - 411)) | (1 << (MariaDBParser.GLOBAL - 411)) | (1 << (MariaDBParser.GRANTS - 411)) | (1 << (MariaDBParser.GROUP_REPLICATION - 411)) | (1 << (MariaDBParser.HANDLER - 411)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (MariaDBParser.HASH - 443)) | (1 << (MariaDBParser.HELP - 443)) | (1 << (MariaDBParser.HISTORY - 443)) | (1 << (MariaDBParser.HOST - 443)) | (1 << (MariaDBParser.HOSTS - 443)) | (1 << (MariaDBParser.IDENTIFIED - 443)) | (1 << (MariaDBParser.IGNORE_SERVER_IDS - 443)) | (1 << (MariaDBParser.IMPORT - 443)) | (1 << (MariaDBParser.INCREMENT - 443)) | (1 << (MariaDBParser.INDEXES - 443)) | (1 << (MariaDBParser.INITIAL_SIZE - 443)) | (1 << (MariaDBParser.INPLACE - 443)) | (1 << (MariaDBParser.INSERT_METHOD - 443)) | (1 << (MariaDBParser.INSTALL - 443)) | (1 << (MariaDBParser.INSTANCE - 443)) | (1 << (MariaDBParser.INSTANT - 443)) | (1 << (MariaDBParser.INVISIBLE - 443)) | (1 << (MariaDBParser.INVOKER - 443)) | (1 << (MariaDBParser.IO - 443)) | (1 << (MariaDBParser.IO_THREAD - 443)) | (1 << (MariaDBParser.IPC - 443)) | (1 << (MariaDBParser.ISOLATION - 443)) | (1 << (MariaDBParser.ISSUER - 443)) | (1 << (MariaDBParser.JSON - 443)) | (1 << (MariaDBParser.KEY_BLOCK_SIZE - 443)) | (1 << (MariaDBParser.LANGUAGE - 443)) | (1 << (MariaDBParser.LAST - 443)) | (1 << (MariaDBParser.LEAVES - 443)) | (1 << (MariaDBParser.LESS - 443)) | (1 << (MariaDBParser.LEVEL - 443)) | (1 << (MariaDBParser.LIST - 443)) | (1 << (MariaDBParser.LOCAL - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (MariaDBParser.LOCALES - 475)) | (1 << (MariaDBParser.LOGFILE - 475)) | (1 << (MariaDBParser.LOGS - 475)) | (1 << (MariaDBParser.MASTER - 475)) | (1 << (MariaDBParser.MASTER_AUTO_POSITION - 475)) | (1 << (MariaDBParser.MASTER_CONNECT_RETRY - 475)) | (1 << (MariaDBParser.MASTER_DELAY - 475)) | (1 << (MariaDBParser.MASTER_HEARTBEAT_PERIOD - 475)) | (1 << (MariaDBParser.MASTER_HOST - 475)) | (1 << (MariaDBParser.MASTER_LOG_FILE - 475)) | (1 << (MariaDBParser.MASTER_LOG_POS - 475)) | (1 << (MariaDBParser.MASTER_PASSWORD - 475)) | (1 << (MariaDBParser.MASTER_PORT - 475)) | (1 << (MariaDBParser.MASTER_RETRY_COUNT - 475)) | (1 << (MariaDBParser.MASTER_SSL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CA - 475)) | (1 << (MariaDBParser.MASTER_SSL_CAPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_CERT - 475)) | (1 << (MariaDBParser.MASTER_SSL_CIPHER - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRLPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_KEY - 475)) | (1 << (MariaDBParser.MASTER_TLS_VERSION - 475)) | (1 << (MariaDBParser.MASTER_USER - 475)) | (1 << (MariaDBParser.MAX_CONNECTIONS_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_QUERIES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_ROWS - 475)) | (1 << (MariaDBParser.MAX_SIZE - 475)) | (1 << (MariaDBParser.MAX_UPDATES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_USER_CONNECTIONS - 475)) | (1 << (MariaDBParser.MEDIUM - 475)) | (1 << (MariaDBParser.MEMBER - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (MariaDBParser.MERGE - 507)) | (1 << (MariaDBParser.MESSAGE_TEXT - 507)) | (1 << (MariaDBParser.MID - 507)) | (1 << (MariaDBParser.MIGRATE - 507)) | (1 << (MariaDBParser.MIN_ROWS - 507)) | (1 << (MariaDBParser.MODE - 507)) | (1 << (MariaDBParser.MODIFY - 507)) | (1 << (MariaDBParser.MUTEX - 507)) | (1 << (MariaDBParser.MYSQL - 507)) | (1 << (MariaDBParser.MYSQL_ERRNO - 507)) | (1 << (MariaDBParser.NAME - 507)) | (1 << (MariaDBParser.NAMES - 507)) | (1 << (MariaDBParser.NCHAR - 507)) | (1 << (MariaDBParser.NEVER - 507)) | (1 << (MariaDBParser.NEXT - 507)) | (1 << (MariaDBParser.NO - 507)) | (1 << (MariaDBParser.NOCACHE - 507)) | (1 << (MariaDBParser.NOCOPY - 507)) | (1 << (MariaDBParser.NOCYCLE - 507)) | (1 << (MariaDBParser.NOMAXVALUE - 507)) | (1 << (MariaDBParser.NOMINVALUE - 507)) | (1 << (MariaDBParser.NOWAIT - 507)) | (1 << (MariaDBParser.NODEGROUP - 507)) | (1 << (MariaDBParser.NONE - 507)) | (1 << (MariaDBParser.ODBC - 507)) | (1 << (MariaDBParser.OFFLINE - 507)) | (1 << (MariaDBParser.OFFSET - 507)) | (1 << (MariaDBParser.OF - 507)) | (1 << (MariaDBParser.OJ - 507)) | (1 << (MariaDBParser.OLD_PASSWORD - 507)) | (1 << (MariaDBParser.ONE - 507)) | (1 << (MariaDBParser.ONLINE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (MariaDBParser.ONLY - 539)) | (1 << (MariaDBParser.OPEN - 539)) | (1 << (MariaDBParser.OPTIMIZER_COSTS - 539)) | (1 << (MariaDBParser.OPTIONS - 539)) | (1 << (MariaDBParser.OWNER - 539)) | (1 << (MariaDBParser.PACK_KEYS - 539)) | (1 << (MariaDBParser.PAGE - 539)) | (1 << (MariaDBParser.PARSER - 539)) | (1 << (MariaDBParser.PARTIAL - 539)) | (1 << (MariaDBParser.PARTITIONING - 539)) | (1 << (MariaDBParser.PARTITIONS - 539)) | (1 << (MariaDBParser.PASSWORD - 539)) | (1 << (MariaDBParser.PASSWORD_LOCK_TIME - 539)) | (1 << (MariaDBParser.PHASE - 539)) | (1 << (MariaDBParser.PLUGIN - 539)) | (1 << (MariaDBParser.PLUGIN_DIR - 539)) | (1 << (MariaDBParser.PLUGINS - 539)) | (1 << (MariaDBParser.PORT - 539)) | (1 << (MariaDBParser.PRECEDES - 539)) | (1 << (MariaDBParser.PREPARE - 539)) | (1 << (MariaDBParser.PRESERVE - 539)) | (1 << (MariaDBParser.PREV - 539)) | (1 << (MariaDBParser.PROCESSLIST - 539)) | (1 << (MariaDBParser.PROFILE - 539)) | (1 << (MariaDBParser.PROFILES - 539)) | (1 << (MariaDBParser.PROXY - 539)) | (1 << (MariaDBParser.QUERY - 539)) | (1 << (MariaDBParser.QUERY_RESPONSE_TIME - 539)) | (1 << (MariaDBParser.QUICK - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (MariaDBParser.REBUILD - 571)) | (1 << (MariaDBParser.RECOVER - 571)) | (1 << (MariaDBParser.RECURSIVE - 571)) | (1 << (MariaDBParser.REDO_BUFFER_SIZE - 571)) | (1 << (MariaDBParser.REDUNDANT - 571)) | (1 << (MariaDBParser.RELAY - 571)) | (1 << (MariaDBParser.RELAY_LOG_FILE - 571)) | (1 << (MariaDBParser.RELAY_LOG_POS - 571)) | (1 << (MariaDBParser.RELAYLOG - 571)) | (1 << (MariaDBParser.REMOVE - 571)) | (1 << (MariaDBParser.REORGANIZE - 571)) | (1 << (MariaDBParser.REPAIR - 571)) | (1 << (MariaDBParser.REPLICATE_DO_DB - 571)) | (1 << (MariaDBParser.REPLICATE_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_REWRITE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATION - 571)) | (1 << (MariaDBParser.RESET - 571)) | (1 << (MariaDBParser.RESTART - 571)) | (1 << (MariaDBParser.RESUME - 571)) | (1 << (MariaDBParser.RETURNED_SQLSTATE - 571)) | (1 << (MariaDBParser.RETURNS - 571)) | (1 << (MariaDBParser.REUSE - 571)) | (1 << (MariaDBParser.ROLE - 571)) | (1 << (MariaDBParser.ROLLBACK - 571)) | (1 << (MariaDBParser.ROLLUP - 571)) | (1 << (MariaDBParser.ROTATE - 571)) | (1 << (MariaDBParser.ROW - 571)))) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & ((1 << (MariaDBParser.ROWS - 603)) | (1 << (MariaDBParser.ROW_FORMAT - 603)) | (1 << (MariaDBParser.RTREE - 603)) | (1 << (MariaDBParser.SAVEPOINT - 603)) | (1 << (MariaDBParser.SCHEDULE - 603)) | (1 << (MariaDBParser.SECURITY - 603)) | (1 << (MariaDBParser.SEQUENCE - 603)) | (1 << (MariaDBParser.SERVER - 603)) | (1 << (MariaDBParser.SESSION - 603)) | (1 << (MariaDBParser.SHARE - 603)) | (1 << (MariaDBParser.SHARED - 603)) | (1 << (MariaDBParser.SIGNED - 603)) | (1 << (MariaDBParser.SIMPLE - 603)) | (1 << (MariaDBParser.SLAVE - 603)) | (1 << (MariaDBParser.SLAVES - 603)) | (1 << (MariaDBParser.SLOW - 603)) | (1 << (MariaDBParser.SNAPSHOT - 603)) | (1 << (MariaDBParser.SOCKET - 603)) | (1 << (MariaDBParser.SOME - 603)) | (1 << (MariaDBParser.SONAME - 603)) | (1 << (MariaDBParser.SOUNDS - 603)) | (1 << (MariaDBParser.SOURCE - 603)) | (1 << (MariaDBParser.SQL_AFTER_GTIDS - 603)) | (1 << (MariaDBParser.SQL_AFTER_MTS_GAPS - 603)) | (1 << (MariaDBParser.SQL_BEFORE_GTIDS - 603)) | (1 << (MariaDBParser.SQL_BUFFER_RESULT - 603)) | (1 << (MariaDBParser.SQL_CACHE - 603)) | (1 << (MariaDBParser.SQL_NO_CACHE - 603)) | (1 << (MariaDBParser.SQL_THREAD - 603)) | (1 << (MariaDBParser.START - 603)) | (1 << (MariaDBParser.STARTS - 603)) | (1 << (MariaDBParser.STATS_AUTO_RECALC - 603)))) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & ((1 << (MariaDBParser.STATS_PERSISTENT - 635)) | (1 << (MariaDBParser.STATS_SAMPLE_PAGES - 635)) | (1 << (MariaDBParser.STATUS - 635)) | (1 << (MariaDBParser.STOP - 635)) | (1 << (MariaDBParser.STORAGE - 635)) | (1 << (MariaDBParser.STRING - 635)) | (1 << (MariaDBParser.SUBCLASS_ORIGIN - 635)) | (1 << (MariaDBParser.SUBJECT - 635)) | (1 << (MariaDBParser.SUBPARTITION - 635)) | (1 << (MariaDBParser.SUBPARTITIONS - 635)) | (1 << (MariaDBParser.SUSPEND - 635)) | (1 << (MariaDBParser.SWAPS - 635)) | (1 << (MariaDBParser.SWITCHES - 635)) | (1 << (MariaDBParser.TABLE_NAME - 635)) | (1 << (MariaDBParser.TABLESPACE - 635)) | (1 << (MariaDBParser.TABLE_TYPE - 635)) | (1 << (MariaDBParser.TEMPORARY - 635)) | (1 << (MariaDBParser.TEMPTABLE - 635)) | (1 << (MariaDBParser.THAN - 635)) | (1 << (MariaDBParser.TRADITIONAL - 635)) | (1 << (MariaDBParser.TRANSACTION - 635)) | (1 << (MariaDBParser.TRANSACTIONAL - 635)) | (1 << (MariaDBParser.TRIGGERS - 635)) | (1 << (MariaDBParser.TRUNCATE - 635)) | (1 << (MariaDBParser.TYPES - 635)) | (1 << (MariaDBParser.UNBOUNDED - 635)) | (1 << (MariaDBParser.UNDEFINED - 635)) | (1 << (MariaDBParser.UNDOFILE - 635)) | (1 << (MariaDBParser.UNDO_BUFFER_SIZE - 635)) | (1 << (MariaDBParser.UNINSTALL - 635)) | (1 << (MariaDBParser.UNKNOWN - 635)))) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & ((1 << (MariaDBParser.UNTIL - 667)) | (1 << (MariaDBParser.UPGRADE - 667)) | (1 << (MariaDBParser.USER - 667)) | (1 << (MariaDBParser.USE_FRM - 667)) | (1 << (MariaDBParser.USER_RESOURCES - 667)) | (1 << (MariaDBParser.VALIDATION - 667)) | (1 << (MariaDBParser.VALUE - 667)) | (1 << (MariaDBParser.VARIABLES - 667)) | (1 << (MariaDBParser.VIEW - 667)) | (1 << (MariaDBParser.VIRTUAL - 667)) | (1 << (MariaDBParser.VISIBLE - 667)) | (1 << (MariaDBParser.WAIT - 667)) | (1 << (MariaDBParser.WARNINGS - 667)) | (1 << (MariaDBParser.WITHOUT - 667)) | (1 << (MariaDBParser.WORK - 667)) | (1 << (MariaDBParser.WRAPPER - 667)) | (1 << (MariaDBParser.WSREP_MEMBERSHIP - 667)) | (1 << (MariaDBParser.WSREP_STATUS - 667)) | (1 << (MariaDBParser.X509 - 667)) | (1 << (MariaDBParser.XA - 667)) | (1 << (MariaDBParser.XML - 667)) | (1 << (MariaDBParser.EUR - 667)) | (1 << (MariaDBParser.USA - 667)) | (1 << (MariaDBParser.JIS - 667)) | (1 << (MariaDBParser.ISO - 667)) | (1 << (MariaDBParser.INTERNAL - 667)) | (1 << (MariaDBParser.QUARTER - 667)) | (1 << (MariaDBParser.MONTH - 667)) | (1 << (MariaDBParser.DAY - 667)) | (1 << (MariaDBParser.HOUR - 667)))) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & ((1 << (MariaDBParser.MINUTE - 699)) | (1 << (MariaDBParser.WEEK - 699)) | (1 << (MariaDBParser.SECOND - 699)) | (1 << (MariaDBParser.MICROSECOND - 699)) | (1 << (MariaDBParser.USER_STATISTICS - 699)) | (1 << (MariaDBParser.CLIENT_STATISTICS - 699)) | (1 << (MariaDBParser.INDEX_STATISTICS - 699)) | (1 << (MariaDBParser.TABLE_STATISTICS - 699)) | (1 << (MariaDBParser.ADMIN - 699)) | (1 << (MariaDBParser.AUDIT_ADMIN - 699)) | (1 << (MariaDBParser.BACKUP_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ENCRYPTION_ADMIN - 699)) | (1 << (MariaDBParser.CLONE_ADMIN - 699)) | (1 << (MariaDBParser.CONNECTION_ADMIN - 699)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ADMIN - 699)) | (1 << (MariaDBParser.EXECUTE - 699)) | (1 << (MariaDBParser.FILE - 699)) | (1 << (MariaDBParser.FIREWALL_ADMIN - 699)) | (1 << (MariaDBParser.FIREWALL_USER - 699)) | (1 << (MariaDBParser.GROUP_REPLICATION_ADMIN - 699)) | (1 << (MariaDBParser.INNODB_REDO_LOG_ARCHIVE - 699)) | (1 << (MariaDBParser.INVOKE - 699)) | (1 << (MariaDBParser.LAMBDA - 699)) | (1 << (MariaDBParser.NDB_STORED_USER - 699)) | (1 << (MariaDBParser.PASSWORDLESS_USER_ADMIN - 699)))) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & ((1 << (MariaDBParser.PERSIST_RO_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.PRIVILEGES - 731)) | (1 << (MariaDBParser.PROCESS - 731)) | (1 << (MariaDBParser.RELOAD - 731)) | (1 << (MariaDBParser.REPLICATION_APPLIER - 731)) | (1 << (MariaDBParser.REPLICATION_SLAVE_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_USER - 731)) | (1 << (MariaDBParser.ROLE_ADMIN - 731)) | (1 << (MariaDBParser.ROUTINE - 731)) | (1 << (MariaDBParser.S3 - 731)) | (1 << (MariaDBParser.SESSION_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.SET_USER_ID - 731)) | (1 << (MariaDBParser.SHOW_ROUTINE - 731)) | (1 << (MariaDBParser.SHUTDOWN - 731)) | (1 << (MariaDBParser.SUPER - 731)) | (1 << (MariaDBParser.SYSTEM_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.TABLES - 731)) | (1 << (MariaDBParser.TABLE_ENCRYPTION_ADMIN - 731)) | (1 << (MariaDBParser.VERSION_TOKEN_ADMIN - 731)) | (1 << (MariaDBParser.XA_RECOVER_ADMIN - 731)) | (1 << (MariaDBParser.ARMSCII8 - 731)) | (1 << (MariaDBParser.ASCII - 731)) | (1 << (MariaDBParser.BIG5 - 731)) | (1 << (MariaDBParser.CP1250 - 731)) | (1 << (MariaDBParser.CP1251 - 731)) | (1 << (MariaDBParser.CP1256 - 731)) | (1 << (MariaDBParser.CP1257 - 731)) | (1 << (MariaDBParser.CP850 - 731)) | (1 << (MariaDBParser.CP852 - 731)) | (1 << (MariaDBParser.CP866 - 731)))) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & ((1 << (MariaDBParser.CP932 - 763)) | (1 << (MariaDBParser.DEC8 - 763)) | (1 << (MariaDBParser.EUCJPMS - 763)) | (1 << (MariaDBParser.EUCKR - 763)) | (1 << (MariaDBParser.GB18030 - 763)) | (1 << (MariaDBParser.GB2312 - 763)) | (1 << (MariaDBParser.GBK - 763)) | (1 << (MariaDBParser.GEOSTD8 - 763)) | (1 << (MariaDBParser.GREEK - 763)) | (1 << (MariaDBParser.HEBREW - 763)) | (1 << (MariaDBParser.HP8 - 763)) | (1 << (MariaDBParser.KEYBCS2 - 763)) | (1 << (MariaDBParser.KOI8R - 763)) | (1 << (MariaDBParser.KOI8U - 763)) | (1 << (MariaDBParser.LATIN1 - 763)) | (1 << (MariaDBParser.LATIN2 - 763)) | (1 << (MariaDBParser.LATIN5 - 763)) | (1 << (MariaDBParser.LATIN7 - 763)) | (1 << (MariaDBParser.MACCE - 763)) | (1 << (MariaDBParser.MACROMAN - 763)) | (1 << (MariaDBParser.SJIS - 763)) | (1 << (MariaDBParser.SWE7 - 763)) | (1 << (MariaDBParser.TIS620 - 763)) | (1 << (MariaDBParser.UCS2 - 763)) | (1 << (MariaDBParser.UJIS - 763)) | (1 << (MariaDBParser.UTF16 - 763)) | (1 << (MariaDBParser.UTF16LE - 763)) | (1 << (MariaDBParser.UTF32 - 763)) | (1 << (MariaDBParser.UTF8 - 763)) | (1 << (MariaDBParser.UTF8MB3 - 763)) | (1 << (MariaDBParser.UTF8MB4 - 763)) | (1 << (MariaDBParser.ARCHIVE - 763)))) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & ((1 << (MariaDBParser.BLACKHOLE - 795)) | (1 << (MariaDBParser.CSV - 795)) | (1 << (MariaDBParser.FEDERATED - 795)) | (1 << (MariaDBParser.INNODB - 795)) | (1 << (MariaDBParser.MEMORY - 795)) | (1 << (MariaDBParser.MRG_MYISAM - 795)) | (1 << (MariaDBParser.MYISAM - 795)) | (1 << (MariaDBParser.NDB - 795)) | (1 << (MariaDBParser.NDBCLUSTER - 795)) | (1 << (MariaDBParser.PERFORMANCE_SCHEMA - 795)) | (1 << (MariaDBParser.TOKUDB - 795)) | (1 << (MariaDBParser.REPEATABLE - 795)) | (1 << (MariaDBParser.COMMITTED - 795)) | (1 << (MariaDBParser.UNCOMMITTED - 795)) | (1 << (MariaDBParser.SERIALIZABLE - 795)) | (1 << (MariaDBParser.GEOMETRYCOLLECTION - 795)) | (1 << (MariaDBParser.LINESTRING - 795)) | (1 << (MariaDBParser.MULTILINESTRING - 795)) | (1 << (MariaDBParser.MULTIPOINT - 795)) | (1 << (MariaDBParser.MULTIPOLYGON - 795)) | (1 << (MariaDBParser.POINT - 795)) | (1 << (MariaDBParser.POLYGON - 795)) | (1 << (MariaDBParser.ABS - 795)) | (1 << (MariaDBParser.ACOS - 795)) | (1 << (MariaDBParser.ADDDATE - 795)) | (1 << (MariaDBParser.ADDTIME - 795)) | (1 << (MariaDBParser.AES_DECRYPT - 795)) | (1 << (MariaDBParser.AES_ENCRYPT - 795)) | (1 << (MariaDBParser.AREA - 795)) | (1 << (MariaDBParser.ASBINARY - 795)))) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & ((1 << (MariaDBParser.ASIN - 827)) | (1 << (MariaDBParser.ASTEXT - 827)) | (1 << (MariaDBParser.ASWKB - 827)) | (1 << (MariaDBParser.ASWKT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DECRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DERIVE - 827)) | (1 << (MariaDBParser.ASYMMETRIC_ENCRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_SIGN - 827)) | (1 << (MariaDBParser.ASYMMETRIC_VERIFY - 827)) | (1 << (MariaDBParser.ATAN - 827)) | (1 << (MariaDBParser.ATAN2 - 827)) | (1 << (MariaDBParser.BENCHMARK - 827)) | (1 << (MariaDBParser.BIN - 827)) | (1 << (MariaDBParser.BIT_COUNT - 827)) | (1 << (MariaDBParser.BIT_LENGTH - 827)) | (1 << (MariaDBParser.BUFFER - 827)) | (1 << (MariaDBParser.CATALOG_NAME - 827)) | (1 << (MariaDBParser.CEIL - 827)) | (1 << (MariaDBParser.CEILING - 827)) | (1 << (MariaDBParser.CENTROID - 827)) | (1 << (MariaDBParser.CHARACTER_LENGTH - 827)) | (1 << (MariaDBParser.CHARSET - 827)) | (1 << (MariaDBParser.CHAR_LENGTH - 827)) | (1 << (MariaDBParser.COERCIBILITY - 827)) | (1 << (MariaDBParser.COLLATION - 827)) | (1 << (MariaDBParser.COMPRESS - 827)) | (1 << (MariaDBParser.CONCAT - 827)) | (1 << (MariaDBParser.CONCAT_WS - 827)) | (1 << (MariaDBParser.CONNECTION_ID - 827)) | (1 << (MariaDBParser.CONV - 827)) | (1 << (MariaDBParser.CONVERT_TZ - 827)) | (1 << (MariaDBParser.COS - 827)))) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & ((1 << (MariaDBParser.COT - 859)) | (1 << (MariaDBParser.CRC32 - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY - 859)) | (1 << (MariaDBParser.CREATE_DH_PARAMETERS - 859)) | (1 << (MariaDBParser.CREATE_DIGEST - 859)) | (1 << (MariaDBParser.CROSSES - 859)) | (1 << (MariaDBParser.DATEDIFF - 859)) | (1 << (MariaDBParser.DATE_FORMAT - 859)) | (1 << (MariaDBParser.DAYNAME - 859)) | (1 << (MariaDBParser.DAYOFMONTH - 859)) | (1 << (MariaDBParser.DAYOFWEEK - 859)) | (1 << (MariaDBParser.DAYOFYEAR - 859)) | (1 << (MariaDBParser.DECODE - 859)) | (1 << (MariaDBParser.DEGREES - 859)) | (1 << (MariaDBParser.DES_DECRYPT - 859)) | (1 << (MariaDBParser.DES_ENCRYPT - 859)) | (1 << (MariaDBParser.DIMENSION - 859)) | (1 << (MariaDBParser.DISJOINT - 859)) | (1 << (MariaDBParser.ELT - 859)) | (1 << (MariaDBParser.ENCODE - 859)) | (1 << (MariaDBParser.ENCRYPT - 859)) | (1 << (MariaDBParser.ENDPOINT - 859)) | (1 << (MariaDBParser.ENGINE_ATTRIBUTE - 859)) | (1 << (MariaDBParser.ENVELOPE - 859)) | (1 << (MariaDBParser.EQUALS - 859)) | (1 << (MariaDBParser.EXP - 859)) | (1 << (MariaDBParser.EXPORT_SET - 859)) | (1 << (MariaDBParser.EXTERIORRING - 859)) | (1 << (MariaDBParser.EXTRACTVALUE - 859)) | (1 << (MariaDBParser.FIELD - 859)) | (1 << (MariaDBParser.FIND_IN_SET - 859)))) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & ((1 << (MariaDBParser.FLOOR - 891)) | (1 << (MariaDBParser.FORMAT - 891)) | (1 << (MariaDBParser.FOUND_ROWS - 891)) | (1 << (MariaDBParser.FROM_BASE64 - 891)) | (1 << (MariaDBParser.FROM_DAYS - 891)) | (1 << (MariaDBParser.FROM_UNIXTIME - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYN - 891)) | (1 << (MariaDBParser.GEOMETRYTYPE - 891)) | (1 << (MariaDBParser.GEOMFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMFROMWKB - 891)) | (1 << (MariaDBParser.GET_FORMAT - 891)) | (1 << (MariaDBParser.GET_LOCK - 891)) | (1 << (MariaDBParser.GLENGTH - 891)) | (1 << (MariaDBParser.GREATEST - 891)) | (1 << (MariaDBParser.GTID_SUBSET - 891)) | (1 << (MariaDBParser.GTID_SUBTRACT - 891)) | (1 << (MariaDBParser.HEX - 891)) | (1 << (MariaDBParser.IFNULL - 891)) | (1 << (MariaDBParser.INET6_ATON - 891)) | (1 << (MariaDBParser.INET6_NTOA - 891)) | (1 << (MariaDBParser.INET_ATON - 891)) | (1 << (MariaDBParser.INET_NTOA - 891)) | (1 << (MariaDBParser.INSTR - 891)) | (1 << (MariaDBParser.INTERIORRINGN - 891)) | (1 << (MariaDBParser.INTERSECTS - 891)) | (1 << (MariaDBParser.ISCLOSED - 891)))) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & ((1 << (MariaDBParser.ISEMPTY - 923)) | (1 << (MariaDBParser.ISNULL - 923)) | (1 << (MariaDBParser.ISSIMPLE - 923)) | (1 << (MariaDBParser.IS_FREE_LOCK - 923)) | (1 << (MariaDBParser.IS_IPV4 - 923)) | (1 << (MariaDBParser.IS_IPV4_COMPAT - 923)) | (1 << (MariaDBParser.IS_IPV4_MAPPED - 923)) | (1 << (MariaDBParser.IS_IPV6 - 923)) | (1 << (MariaDBParser.IS_USED_LOCK - 923)) | (1 << (MariaDBParser.LAST_INSERT_ID - 923)) | (1 << (MariaDBParser.LCASE - 923)) | (1 << (MariaDBParser.LEAST - 923)) | (1 << (MariaDBParser.LENGTH - 923)) | (1 << (MariaDBParser.LINEFROMTEXT - 923)) | (1 << (MariaDBParser.LINEFROMWKB - 923)) | (1 << (MariaDBParser.LINESTRINGFROMTEXT - 923)) | (1 << (MariaDBParser.LINESTRINGFROMWKB - 923)) | (1 << (MariaDBParser.LN - 923)) | (1 << (MariaDBParser.LOAD_FILE - 923)) | (1 << (MariaDBParser.LOCATE - 923)) | (1 << (MariaDBParser.LOG - 923)) | (1 << (MariaDBParser.LOG10 - 923)) | (1 << (MariaDBParser.LOG2 - 923)) | (1 << (MariaDBParser.LOWER - 923)) | (1 << (MariaDBParser.LPAD - 923)) | (1 << (MariaDBParser.LTRIM - 923)) | (1 << (MariaDBParser.MAKEDATE - 923)) | (1 << (MariaDBParser.MAKETIME - 923)) | (1 << (MariaDBParser.MAKE_SET - 923)) | (1 << (MariaDBParser.MASTER_POS_WAIT - 923)) | (1 << (MariaDBParser.MBRCONTAINS - 923)) | (1 << (MariaDBParser.MBRDISJOINT - 923)))) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & ((1 << (MariaDBParser.MBREQUAL - 955)) | (1 << (MariaDBParser.MBRINTERSECTS - 955)) | (1 << (MariaDBParser.MBROVERLAPS - 955)) | (1 << (MariaDBParser.MBRTOUCHES - 955)) | (1 << (MariaDBParser.MBRWITHIN - 955)) | (1 << (MariaDBParser.MD5 - 955)) | (1 << (MariaDBParser.MLINEFROMTEXT - 955)) | (1 << (MariaDBParser.MLINEFROMWKB - 955)) | (1 << (MariaDBParser.MONTHNAME - 955)) | (1 << (MariaDBParser.MPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MPOLYFROMTEXT - 955)) | (1 << (MariaDBParser.MPOLYFROMWKB - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMTEXT - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMWKB - 955)) | (1 << (MariaDBParser.NAME_CONST - 955)) | (1 << (MariaDBParser.NULLIF - 955)) | (1 << (MariaDBParser.NUMGEOMETRIES - 955)) | (1 << (MariaDBParser.NUMINTERIORRINGS - 955)) | (1 << (MariaDBParser.NUMPOINTS - 955)) | (1 << (MariaDBParser.OCT - 955)) | (1 << (MariaDBParser.OCTET_LENGTH - 955)) | (1 << (MariaDBParser.ORD - 955)) | (1 << (MariaDBParser.OVERLAPS - 955)) | (1 << (MariaDBParser.PERIOD_ADD - 955)) | (1 << (MariaDBParser.PERIOD_DIFF - 955)) | (1 << (MariaDBParser.PI - 955)) | (1 << (MariaDBParser.POINTFROMTEXT - 955)))) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & ((1 << (MariaDBParser.POINTFROMWKB - 987)) | (1 << (MariaDBParser.POINTN - 987)) | (1 << (MariaDBParser.POLYFROMTEXT - 987)) | (1 << (MariaDBParser.POLYFROMWKB - 987)) | (1 << (MariaDBParser.POLYGONFROMTEXT - 987)) | (1 << (MariaDBParser.POLYGONFROMWKB - 987)) | (1 << (MariaDBParser.POW - 987)) | (1 << (MariaDBParser.POWER - 987)) | (1 << (MariaDBParser.QUOTE - 987)) | (1 << (MariaDBParser.RADIANS - 987)) | (1 << (MariaDBParser.RAND - 987)) | (1 << (MariaDBParser.RANDOM_BYTES - 987)) | (1 << (MariaDBParser.RELEASE_LOCK - 987)) | (1 << (MariaDBParser.REVERSE - 987)) | (1 << (MariaDBParser.ROUND - 987)) | (1 << (MariaDBParser.ROW_COUNT - 987)) | (1 << (MariaDBParser.RPAD - 987)) | (1 << (MariaDBParser.RTRIM - 987)) | (1 << (MariaDBParser.SEC_TO_TIME - 987)) | (1 << (MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE - 987)) | (1 << (MariaDBParser.SESSION_USER - 987)) | (1 << (MariaDBParser.SHA - 987)) | (1 << (MariaDBParser.SHA1 - 987)) | (1 << (MariaDBParser.SHA2 - 987)) | (1 << (MariaDBParser.SCHEMA_NAME - 987)) | (1 << (MariaDBParser.SIGN - 987)) | (1 << (MariaDBParser.SIN - 987)) | (1 << (MariaDBParser.SLEEP - 987)) | (1 << (MariaDBParser.SOUNDEX - 987)) | (1 << (MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS - 987)) | (1 << (MariaDBParser.SQRT - 987)) | (1 << (MariaDBParser.SRID - 987)))) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & ((1 << (MariaDBParser.STARTPOINT - 1019)) | (1 << (MariaDBParser.STRCMP - 1019)) | (1 << (MariaDBParser.STR_TO_DATE - 1019)) | (1 << (MariaDBParser.ST_AREA - 1019)) | (1 << (MariaDBParser.ST_ASBINARY - 1019)) | (1 << (MariaDBParser.ST_ASTEXT - 1019)) | (1 << (MariaDBParser.ST_ASWKB - 1019)) | (1 << (MariaDBParser.ST_ASWKT - 1019)) | (1 << (MariaDBParser.ST_BUFFER - 1019)) | (1 << (MariaDBParser.ST_CENTROID - 1019)) | (1 << (MariaDBParser.ST_CONTAINS - 1019)) | (1 << (MariaDBParser.ST_CROSSES - 1019)) | (1 << (MariaDBParser.ST_DIFFERENCE - 1019)) | (1 << (MariaDBParser.ST_DIMENSION - 1019)) | (1 << (MariaDBParser.ST_DISJOINT - 1019)) | (1 << (MariaDBParser.ST_DISTANCE - 1019)) | (1 << (MariaDBParser.ST_ENDPOINT - 1019)) | (1 << (MariaDBParser.ST_ENVELOPE - 1019)) | (1 << (MariaDBParser.ST_EQUALS - 1019)) | (1 << (MariaDBParser.ST_EXTERIORRING - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYN - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYTYPE - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMWKB - 1019)) | (1 << (MariaDBParser.ST_INTERIORRINGN - 1019)))) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & ((1 << (MariaDBParser.ST_INTERSECTION - 1051)) | (1 << (MariaDBParser.ST_INTERSECTS - 1051)) | (1 << (MariaDBParser.ST_ISCLOSED - 1051)) | (1 << (MariaDBParser.ST_ISEMPTY - 1051)) | (1 << (MariaDBParser.ST_ISSIMPLE - 1051)) | (1 << (MariaDBParser.ST_LINEFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINEFROMWKB - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMWKB - 1051)) | (1 << (MariaDBParser.ST_NUMGEOMETRIES - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRING - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRINGS - 1051)) | (1 << (MariaDBParser.ST_NUMPOINTS - 1051)) | (1 << (MariaDBParser.ST_OVERLAPS - 1051)) | (1 << (MariaDBParser.ST_POINTFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POINTFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POINTN - 1051)) | (1 << (MariaDBParser.ST_POLYFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMWKB - 1051)) | (1 << (MariaDBParser.ST_SRID - 1051)) | (1 << (MariaDBParser.ST_STARTPOINT - 1051)) | (1 << (MariaDBParser.ST_SYMDIFFERENCE - 1051)) | (1 << (MariaDBParser.ST_TOUCHES - 1051)) | (1 << (MariaDBParser.ST_UNION - 1051)) | (1 << (MariaDBParser.ST_WITHIN - 1051)) | (1 << (MariaDBParser.ST_X - 1051)) | (1 << (MariaDBParser.ST_Y - 1051)) | (1 << (MariaDBParser.SUBDATE - 1051)) | (1 << (MariaDBParser.SUBSTRING_INDEX - 1051)) | (1 << (MariaDBParser.SUBTIME - 1051)))) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & ((1 << (MariaDBParser.SYSTEM_USER - 1083)) | (1 << (MariaDBParser.TAN - 1083)) | (1 << (MariaDBParser.TIMEDIFF - 1083)) | (1 << (MariaDBParser.TIMESTAMPADD - 1083)) | (1 << (MariaDBParser.TIMESTAMPDIFF - 1083)) | (1 << (MariaDBParser.TIME_FORMAT - 1083)) | (1 << (MariaDBParser.TIME_TO_SEC - 1083)) | (1 << (MariaDBParser.TOUCHES - 1083)) | (1 << (MariaDBParser.TO_BASE64 - 1083)) | (1 << (MariaDBParser.TO_DAYS - 1083)) | (1 << (MariaDBParser.TO_SECONDS - 1083)) | (1 << (MariaDBParser.UCASE - 1083)) | (1 << (MariaDBParser.UNCOMPRESS - 1083)) | (1 << (MariaDBParser.UNCOMPRESSED_LENGTH - 1083)) | (1 << (MariaDBParser.UNHEX - 1083)) | (1 << (MariaDBParser.UNIX_TIMESTAMP - 1083)) | (1 << (MariaDBParser.UPDATEXML - 1083)) | (1 << (MariaDBParser.UPPER - 1083)) | (1 << (MariaDBParser.UUID - 1083)) | (1 << (MariaDBParser.UUID_SHORT - 1083)) | (1 << (MariaDBParser.VALIDATE_PASSWORD_STRENGTH - 1083)) | (1 << (MariaDBParser.VERSION - 1083)) | (1 << (MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1083)) | (1 << (MariaDBParser.WEEKDAY - 1083)) | (1 << (MariaDBParser.WEEKOFYEAR - 1083)) | (1 << (MariaDBParser.WEIGHT_STRING - 1083)) | (1 << (MariaDBParser.WITHIN - 1083)) | (1 << (MariaDBParser.YEARWEEK - 1083)) | (1 << (MariaDBParser.Y_FUNCTION - 1083)) | (1 << (MariaDBParser.X_FUNCTION - 1083)) | (1 << (MariaDBParser.VIA - 1083)) | (1 << (MariaDBParser.LASTVAL - 1083)))) !== 0) || ((((_la - 1115)) & ~0x1F) === 0 && ((1 << (_la - 1115)) & ((1 << (MariaDBParser.NEXTVAL - 1115)) | (1 << (MariaDBParser.SETVAL - 1115)) | (1 << (MariaDBParser.PREVIOUS - 1115)) | (1 << (MariaDBParser.PERSISTENT - 1115)) | (1 << (MariaDBParser.BINLOG_MONITOR - 1115)) | (1 << (MariaDBParser.BINLOG_REPLAY - 1115)) | (1 << (MariaDBParser.FEDERATED_ADMIN - 1115)) | (1 << (MariaDBParser.READ_ONLY_ADMIN - 1115)) | (1 << (MariaDBParser.REPLICA - 1115)) | (1 << (MariaDBParser.REPLICAS - 1115)) | (1 << (MariaDBParser.REPLICATION_MASTER_ADMIN - 1115)) | (1 << (MariaDBParser.MONITOR - 1115)) | (1 << (MariaDBParser.READ_ONLY - 1115)) | (1 << (MariaDBParser.REPLAY - 1115)) | (1 << (MariaDBParser.MOD - 1115)))) !== 0) || ((((_la - 1166)) & ~0x1F) === 0 && ((1 << (_la - 1166)) & ((1 << (MariaDBParser.CHARSET_REVERSE_QOUTE_STRING - 1166)) | (1 << (MariaDBParser.STRING_LITERAL - 1166)) | (1 << (MariaDBParser.ID - 1166)))) !== 0)) {
						{
						this.state = 1806;
						(_localctx as UniqueKeyTableConstraintContext)._name = this.uid();
						}
					}

					}
				}

				this.state = 1811;
				this.match(MariaDBParser.UNIQUE);
				this.state = 1813;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.INDEX || _la === MariaDBParser.KEY) {
					{
					this.state = 1812;
					(_localctx as UniqueKeyTableConstraintContext)._indexFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MariaDBParser.INDEX || _la === MariaDBParser.KEY)) {
						(_localctx as UniqueKeyTableConstraintContext)._indexFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 1816;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MariaDBParser.ATTRIBUTE) | (1 << MariaDBParser.BODY) | (1 << MariaDBParser.BUCKETS) | (1 << MariaDBParser.CONDITION))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (MariaDBParser.CURRENT - 36)) | (1 << (MariaDBParser.CURRENT_ROLE - 36)) | (1 << (MariaDBParser.CURRENT_USER - 36)) | (1 << (MariaDBParser.DATABASE - 36)) | (1 << (MariaDBParser.DEFAULT - 36)) | (1 << (MariaDBParser.DIAGNOSTICS - 36)) | (1 << (MariaDBParser.EMPTY - 36)) | (1 << (MariaDBParser.EXCEPT - 36)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (MariaDBParser.GROUP - 73)) | (1 << (MariaDBParser.IF - 73)) | (1 << (MariaDBParser.IGNORED - 73)) | (1 << (MariaDBParser.INSERT - 73)) | (1 << (MariaDBParser.LATERAL - 73)) | (1 << (MariaDBParser.LEFT - 73)) | (1 << (MariaDBParser.LOCKED - 73)))) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & ((1 << (MariaDBParser.MAXVALUE - 110)) | (1 << (MariaDBParser.MINVALUE - 110)) | (1 << (MariaDBParser.NUMBER - 110)) | (1 << (MariaDBParser.OPTIONAL - 110)) | (1 << (MariaDBParser.ORDER - 110)) | (1 << (MariaDBParser.PRIMARY - 110)) | (1 << (MariaDBParser.PACKAGE - 110)))) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (MariaDBParser.REPLACE - 142)) | (1 << (MariaDBParser.RIGHT - 142)) | (1 << (MariaDBParser.SCHEMA - 142)) | (1 << (MariaDBParser.SKIP_ - 142)) | (1 << (MariaDBParser.STACKED - 142)) | (1 << (MariaDBParser.STATEMENT - 142)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MariaDBParser.DATE - 217)) | (1 << (MariaDBParser.TIME - 217)) | (1 << (MariaDBParser.TIMESTAMP - 217)) | (1 << (MariaDBParser.DATETIME - 217)) | (1 << (MariaDBParser.YEAR - 217)) | (1 << (MariaDBParser.BINARY - 217)) | (1 << (MariaDBParser.TEXT - 217)) | (1 << (MariaDBParser.ENUM - 217)) | (1 << (MariaDBParser.SERIAL - 217)))) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & ((1 << (MariaDBParser.JSON_ARRAY - 251)) | (1 << (MariaDBParser.JSON_ARRAYAGG - 251)) | (1 << (MariaDBParser.JSON_ARRAY_APPEND - 251)) | (1 << (MariaDBParser.JSON_ARRAY_INSERT - 251)) | (1 << (MariaDBParser.JSON_CONTAINS - 251)) | (1 << (MariaDBParser.JSON_CONTAINS_PATH - 251)) | (1 << (MariaDBParser.JSON_DEPTH - 251)) | (1 << (MariaDBParser.JSON_EXTRACT - 251)) | (1 << (MariaDBParser.JSON_INSERT - 251)) | (1 << (MariaDBParser.JSON_KEYS - 251)) | (1 << (MariaDBParser.JSON_LENGTH - 251)) | (1 << (MariaDBParser.JSON_MERGE - 251)) | (1 << (MariaDBParser.JSON_MERGE_PATCH - 251)) | (1 << (MariaDBParser.JSON_MERGE_PRESERVE - 251)) | (1 << (MariaDBParser.JSON_OBJECT - 251)) | (1 << (MariaDBParser.JSON_OBJECTAGG - 251)) | (1 << (MariaDBParser.JSON_OVERLAPS - 251)) | (1 << (MariaDBParser.JSON_PRETTY - 251)) | (1 << (MariaDBParser.JSON_QUOTE - 251)) | (1 << (MariaDBParser.JSON_REMOVE - 251)) | (1 << (MariaDBParser.JSON_REPLACE - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALID - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT - 251)) | (1 << (MariaDBParser.JSON_SEARCH - 251)) | (1 << (MariaDBParser.JSON_SET - 251)) | (1 << (MariaDBParser.JSON_STORAGE_FREE - 251)) | (1 << (MariaDBParser.JSON_STORAGE_SIZE - 251)) | (1 << (MariaDBParser.JSON_TABLE - 251)) | (1 << (MariaDBParser.JSON_TYPE - 251)) | (1 << (MariaDBParser.JSON_UNQUOTE - 251)) | (1 << (MariaDBParser.JSON_VALID - 251)) | (1 << (MariaDBParser.JSON_VALUE - 251)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (MariaDBParser.NESTED - 283)) | (1 << (MariaDBParser.ORDINALITY - 283)) | (1 << (MariaDBParser.PATH - 283)) | (1 << (MariaDBParser.AVG - 283)) | (1 << (MariaDBParser.BIT_AND - 283)) | (1 << (MariaDBParser.BIT_OR - 283)) | (1 << (MariaDBParser.BIT_XOR - 283)) | (1 << (MariaDBParser.COUNT - 283)) | (1 << (MariaDBParser.CUME_DIST - 283)) | (1 << (MariaDBParser.DENSE_RANK - 283)) | (1 << (MariaDBParser.FIRST_VALUE - 283)) | (1 << (MariaDBParser.GROUP_CONCAT - 283)) | (1 << (MariaDBParser.LAG - 283)) | (1 << (MariaDBParser.LAST_VALUE - 283)) | (1 << (MariaDBParser.LEAD - 283)) | (1 << (MariaDBParser.MAX - 283)) | (1 << (MariaDBParser.MIN - 283)) | (1 << (MariaDBParser.NTILE - 283)) | (1 << (MariaDBParser.NTH_VALUE - 283)) | (1 << (MariaDBParser.PERCENT_RANK - 283)) | (1 << (MariaDBParser.RANK - 283)) | (1 << (MariaDBParser.ROW_NUMBER - 283)) | (1 << (MariaDBParser.STD - 283)) | (1 << (MariaDBParser.STDDEV - 283)) | (1 << (MariaDBParser.STDDEV_POP - 283)) | (1 << (MariaDBParser.STDDEV_SAMP - 283)) | (1 << (MariaDBParser.SUM - 283)) | (1 << (MariaDBParser.VAR_POP - 283)) | (1 << (MariaDBParser.VAR_SAMP - 283)) | (1 << (MariaDBParser.VARIANCE - 283)) | (1 << (MariaDBParser.CURRENT_DATE - 283)) | (1 << (MariaDBParser.CURRENT_TIME - 283)))) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & ((1 << (MariaDBParser.CURRENT_TIMESTAMP - 315)) | (1 << (MariaDBParser.LOCALTIME - 315)) | (1 << (MariaDBParser.CURDATE - 315)) | (1 << (MariaDBParser.CURTIME - 315)) | (1 << (MariaDBParser.DATE_ADD - 315)) | (1 << (MariaDBParser.DATE_SUB - 315)) | (1 << (MariaDBParser.LOCALTIMESTAMP - 315)) | (1 << (MariaDBParser.NOW - 315)) | (1 << (MariaDBParser.POSITION - 315)) | (1 << (MariaDBParser.SUBSTR - 315)) | (1 << (MariaDBParser.SUBSTRING - 315)) | (1 << (MariaDBParser.SYSDATE - 315)) | (1 << (MariaDBParser.TRIM - 315)) | (1 << (MariaDBParser.UTC_DATE - 315)) | (1 << (MariaDBParser.UTC_TIME - 315)) | (1 << (MariaDBParser.UTC_TIMESTAMP - 315)) | (1 << (MariaDBParser.ACCOUNT - 315)) | (1 << (MariaDBParser.ACTION - 315)) | (1 << (MariaDBParser.AFTER - 315)) | (1 << (MariaDBParser.AGGREGATE - 315)) | (1 << (MariaDBParser.ALGORITHM - 315)) | (1 << (MariaDBParser.ANY - 315)) | (1 << (MariaDBParser.AT - 315)) | (1 << (MariaDBParser.AUTHORS - 315)) | (1 << (MariaDBParser.AUTOCOMMIT - 315)) | (1 << (MariaDBParser.AUTOEXTEND_SIZE - 315)) | (1 << (MariaDBParser.AUTO_INCREMENT - 315)) | (1 << (MariaDBParser.AVG_ROW_LENGTH - 315)) | (1 << (MariaDBParser.BEGIN - 315)) | (1 << (MariaDBParser.BINLOG - 315)) | (1 << (MariaDBParser.BIT - 315)))) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & ((1 << (MariaDBParser.BLOCK - 347)) | (1 << (MariaDBParser.BOOL - 347)) | (1 << (MariaDBParser.BOOLEAN - 347)) | (1 << (MariaDBParser.BTREE - 347)) | (1 << (MariaDBParser.CACHE - 347)) | (1 << (MariaDBParser.CASCADED - 347)) | (1 << (MariaDBParser.CHAIN - 347)) | (1 << (MariaDBParser.CHANGED - 347)) | (1 << (MariaDBParser.CHANNEL - 347)) | (1 << (MariaDBParser.CHECKSUM - 347)) | (1 << (MariaDBParser.PAGE_CHECKSUM - 347)) | (1 << (MariaDBParser.CIPHER - 347)) | (1 << (MariaDBParser.CLASS_ORIGIN - 347)) | (1 << (MariaDBParser.CLIENT - 347)) | (1 << (MariaDBParser.CLOSE - 347)) | (1 << (MariaDBParser.CLUSTERING - 347)) | (1 << (MariaDBParser.COALESCE - 347)) | (1 << (MariaDBParser.CODE - 347)) | (1 << (MariaDBParser.COLUMNS - 347)) | (1 << (MariaDBParser.COLUMN_FORMAT - 347)) | (1 << (MariaDBParser.COLUMN_NAME - 347)) | (1 << (MariaDBParser.COMMENT - 347)) | (1 << (MariaDBParser.COMMIT - 347)) | (1 << (MariaDBParser.COMPACT - 347)) | (1 << (MariaDBParser.COMPLETION - 347)) | (1 << (MariaDBParser.COMPRESSED - 347)) | (1 << (MariaDBParser.COMPRESSION - 347)) | (1 << (MariaDBParser.CONCURRENT - 347)) | (1 << (MariaDBParser.CONNECT - 347)) | (1 << (MariaDBParser.CONNECTION - 347)) | (1 << (MariaDBParser.CONSISTENT - 347)) | (1 << (MariaDBParser.CONSTRAINT_CATALOG - 347)))) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & ((1 << (MariaDBParser.CONSTRAINT_SCHEMA - 379)) | (1 << (MariaDBParser.CONSTRAINT_NAME - 379)) | (1 << (MariaDBParser.CONTAINS - 379)) | (1 << (MariaDBParser.CONTEXT - 379)) | (1 << (MariaDBParser.CONTRIBUTORS - 379)) | (1 << (MariaDBParser.COPY - 379)) | (1 << (MariaDBParser.CPU - 379)) | (1 << (MariaDBParser.CYCLE - 379)) | (1 << (MariaDBParser.CURSOR_NAME - 379)) | (1 << (MariaDBParser.DATA - 379)) | (1 << (MariaDBParser.DATAFILE - 379)) | (1 << (MariaDBParser.DEALLOCATE - 379)) | (1 << (MariaDBParser.DEFAULT_AUTH - 379)) | (1 << (MariaDBParser.DEFINER - 379)) | (1 << (MariaDBParser.DELAY_KEY_WRITE - 379)) | (1 << (MariaDBParser.DES_KEY_FILE - 379)) | (1 << (MariaDBParser.DIRECTORY - 379)) | (1 << (MariaDBParser.DISABLE - 379)) | (1 << (MariaDBParser.DISCARD - 379)) | (1 << (MariaDBParser.DISK - 379)) | (1 << (MariaDBParser.DO - 379)) | (1 << (MariaDBParser.DUMPFILE - 379)) | (1 << (MariaDBParser.DUPLICATE - 379)) | (1 << (MariaDBParser.DYNAMIC - 379)) | (1 << (MariaDBParser.ENABLE - 379)) | (1 << (MariaDBParser.ENCRYPTED - 379)) | (1 << (MariaDBParser.ENCRYPTION - 379)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ID - 379)) | (1 << (MariaDBParser.END - 379)) | (1 << (MariaDBParser.ENDS - 379)) | (1 << (MariaDBParser.ENGINE - 379)) | (1 << (MariaDBParser.ENGINES - 379)))) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & ((1 << (MariaDBParser.ERROR - 411)) | (1 << (MariaDBParser.ERRORS - 411)) | (1 << (MariaDBParser.ESCAPE - 411)) | (1 << (MariaDBParser.EVEN - 411)) | (1 << (MariaDBParser.EVENT - 411)) | (1 << (MariaDBParser.EVENTS - 411)) | (1 << (MariaDBParser.EVERY - 411)) | (1 << (MariaDBParser.EXCHANGE - 411)) | (1 << (MariaDBParser.EXCLUSIVE - 411)) | (1 << (MariaDBParser.EXPIRE - 411)) | (1 << (MariaDBParser.EXPORT - 411)) | (1 << (MariaDBParser.EXTENDED - 411)) | (1 << (MariaDBParser.EXTENT_SIZE - 411)) | (1 << (MariaDBParser.FAILED_LOGIN_ATTEMPTS - 411)) | (1 << (MariaDBParser.FAST - 411)) | (1 << (MariaDBParser.FAULTS - 411)) | (1 << (MariaDBParser.FIELDS - 411)) | (1 << (MariaDBParser.FILE_BLOCK_SIZE - 411)) | (1 << (MariaDBParser.FILTER - 411)) | (1 << (MariaDBParser.FIRST - 411)) | (1 << (MariaDBParser.FIXED - 411)) | (1 << (MariaDBParser.FLUSH - 411)) | (1 << (MariaDBParser.FOLLOWS - 411)) | (1 << (MariaDBParser.FOUND - 411)) | (1 << (MariaDBParser.FULL - 411)) | (1 << (MariaDBParser.FUNCTION - 411)) | (1 << (MariaDBParser.GENERAL - 411)) | (1 << (MariaDBParser.GLOBAL - 411)) | (1 << (MariaDBParser.GRANTS - 411)) | (1 << (MariaDBParser.GROUP_REPLICATION - 411)) | (1 << (MariaDBParser.HANDLER - 411)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (MariaDBParser.HASH - 443)) | (1 << (MariaDBParser.HELP - 443)) | (1 << (MariaDBParser.HISTORY - 443)) | (1 << (MariaDBParser.HOST - 443)) | (1 << (MariaDBParser.HOSTS - 443)) | (1 << (MariaDBParser.IDENTIFIED - 443)) | (1 << (MariaDBParser.IGNORE_SERVER_IDS - 443)) | (1 << (MariaDBParser.IMPORT - 443)) | (1 << (MariaDBParser.INCREMENT - 443)) | (1 << (MariaDBParser.INDEXES - 443)) | (1 << (MariaDBParser.INITIAL_SIZE - 443)) | (1 << (MariaDBParser.INPLACE - 443)) | (1 << (MariaDBParser.INSERT_METHOD - 443)) | (1 << (MariaDBParser.INSTALL - 443)) | (1 << (MariaDBParser.INSTANCE - 443)) | (1 << (MariaDBParser.INSTANT - 443)) | (1 << (MariaDBParser.INVISIBLE - 443)) | (1 << (MariaDBParser.INVOKER - 443)) | (1 << (MariaDBParser.IO - 443)) | (1 << (MariaDBParser.IO_THREAD - 443)) | (1 << (MariaDBParser.IPC - 443)) | (1 << (MariaDBParser.ISOLATION - 443)) | (1 << (MariaDBParser.ISSUER - 443)) | (1 << (MariaDBParser.JSON - 443)) | (1 << (MariaDBParser.KEY_BLOCK_SIZE - 443)) | (1 << (MariaDBParser.LANGUAGE - 443)) | (1 << (MariaDBParser.LAST - 443)) | (1 << (MariaDBParser.LEAVES - 443)) | (1 << (MariaDBParser.LESS - 443)) | (1 << (MariaDBParser.LEVEL - 443)) | (1 << (MariaDBParser.LIST - 443)) | (1 << (MariaDBParser.LOCAL - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (MariaDBParser.LOCALES - 475)) | (1 << (MariaDBParser.LOGFILE - 475)) | (1 << (MariaDBParser.LOGS - 475)) | (1 << (MariaDBParser.MASTER - 475)) | (1 << (MariaDBParser.MASTER_AUTO_POSITION - 475)) | (1 << (MariaDBParser.MASTER_CONNECT_RETRY - 475)) | (1 << (MariaDBParser.MASTER_DELAY - 475)) | (1 << (MariaDBParser.MASTER_HEARTBEAT_PERIOD - 475)) | (1 << (MariaDBParser.MASTER_HOST - 475)) | (1 << (MariaDBParser.MASTER_LOG_FILE - 475)) | (1 << (MariaDBParser.MASTER_LOG_POS - 475)) | (1 << (MariaDBParser.MASTER_PASSWORD - 475)) | (1 << (MariaDBParser.MASTER_PORT - 475)) | (1 << (MariaDBParser.MASTER_RETRY_COUNT - 475)) | (1 << (MariaDBParser.MASTER_SSL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CA - 475)) | (1 << (MariaDBParser.MASTER_SSL_CAPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_CERT - 475)) | (1 << (MariaDBParser.MASTER_SSL_CIPHER - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRLPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_KEY - 475)) | (1 << (MariaDBParser.MASTER_TLS_VERSION - 475)) | (1 << (MariaDBParser.MASTER_USER - 475)) | (1 << (MariaDBParser.MAX_CONNECTIONS_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_QUERIES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_ROWS - 475)) | (1 << (MariaDBParser.MAX_SIZE - 475)) | (1 << (MariaDBParser.MAX_UPDATES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_USER_CONNECTIONS - 475)) | (1 << (MariaDBParser.MEDIUM - 475)) | (1 << (MariaDBParser.MEMBER - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (MariaDBParser.MERGE - 507)) | (1 << (MariaDBParser.MESSAGE_TEXT - 507)) | (1 << (MariaDBParser.MID - 507)) | (1 << (MariaDBParser.MIGRATE - 507)) | (1 << (MariaDBParser.MIN_ROWS - 507)) | (1 << (MariaDBParser.MODE - 507)) | (1 << (MariaDBParser.MODIFY - 507)) | (1 << (MariaDBParser.MUTEX - 507)) | (1 << (MariaDBParser.MYSQL - 507)) | (1 << (MariaDBParser.MYSQL_ERRNO - 507)) | (1 << (MariaDBParser.NAME - 507)) | (1 << (MariaDBParser.NAMES - 507)) | (1 << (MariaDBParser.NCHAR - 507)) | (1 << (MariaDBParser.NEVER - 507)) | (1 << (MariaDBParser.NEXT - 507)) | (1 << (MariaDBParser.NO - 507)) | (1 << (MariaDBParser.NOCACHE - 507)) | (1 << (MariaDBParser.NOCOPY - 507)) | (1 << (MariaDBParser.NOCYCLE - 507)) | (1 << (MariaDBParser.NOMAXVALUE - 507)) | (1 << (MariaDBParser.NOMINVALUE - 507)) | (1 << (MariaDBParser.NOWAIT - 507)) | (1 << (MariaDBParser.NODEGROUP - 507)) | (1 << (MariaDBParser.NONE - 507)) | (1 << (MariaDBParser.ODBC - 507)) | (1 << (MariaDBParser.OFFLINE - 507)) | (1 << (MariaDBParser.OFFSET - 507)) | (1 << (MariaDBParser.OF - 507)) | (1 << (MariaDBParser.OJ - 507)) | (1 << (MariaDBParser.OLD_PASSWORD - 507)) | (1 << (MariaDBParser.ONE - 507)) | (1 << (MariaDBParser.ONLINE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (MariaDBParser.ONLY - 539)) | (1 << (MariaDBParser.OPEN - 539)) | (1 << (MariaDBParser.OPTIMIZER_COSTS - 539)) | (1 << (MariaDBParser.OPTIONS - 539)) | (1 << (MariaDBParser.OWNER - 539)) | (1 << (MariaDBParser.PACK_KEYS - 539)) | (1 << (MariaDBParser.PAGE - 539)) | (1 << (MariaDBParser.PARSER - 539)) | (1 << (MariaDBParser.PARTIAL - 539)) | (1 << (MariaDBParser.PARTITIONING - 539)) | (1 << (MariaDBParser.PARTITIONS - 539)) | (1 << (MariaDBParser.PASSWORD - 539)) | (1 << (MariaDBParser.PASSWORD_LOCK_TIME - 539)) | (1 << (MariaDBParser.PHASE - 539)) | (1 << (MariaDBParser.PLUGIN - 539)) | (1 << (MariaDBParser.PLUGIN_DIR - 539)) | (1 << (MariaDBParser.PLUGINS - 539)) | (1 << (MariaDBParser.PORT - 539)) | (1 << (MariaDBParser.PRECEDES - 539)) | (1 << (MariaDBParser.PREPARE - 539)) | (1 << (MariaDBParser.PRESERVE - 539)) | (1 << (MariaDBParser.PREV - 539)) | (1 << (MariaDBParser.PROCESSLIST - 539)) | (1 << (MariaDBParser.PROFILE - 539)) | (1 << (MariaDBParser.PROFILES - 539)) | (1 << (MariaDBParser.PROXY - 539)) | (1 << (MariaDBParser.QUERY - 539)) | (1 << (MariaDBParser.QUERY_RESPONSE_TIME - 539)) | (1 << (MariaDBParser.QUICK - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (MariaDBParser.REBUILD - 571)) | (1 << (MariaDBParser.RECOVER - 571)) | (1 << (MariaDBParser.RECURSIVE - 571)) | (1 << (MariaDBParser.REDO_BUFFER_SIZE - 571)) | (1 << (MariaDBParser.REDUNDANT - 571)) | (1 << (MariaDBParser.RELAY - 571)) | (1 << (MariaDBParser.RELAY_LOG_FILE - 571)) | (1 << (MariaDBParser.RELAY_LOG_POS - 571)) | (1 << (MariaDBParser.RELAYLOG - 571)) | (1 << (MariaDBParser.REMOVE - 571)) | (1 << (MariaDBParser.REORGANIZE - 571)) | (1 << (MariaDBParser.REPAIR - 571)) | (1 << (MariaDBParser.REPLICATE_DO_DB - 571)) | (1 << (MariaDBParser.REPLICATE_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_REWRITE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATION - 571)) | (1 << (MariaDBParser.RESET - 571)) | (1 << (MariaDBParser.RESTART - 571)) | (1 << (MariaDBParser.RESUME - 571)) | (1 << (MariaDBParser.RETURNED_SQLSTATE - 571)) | (1 << (MariaDBParser.RETURNS - 571)) | (1 << (MariaDBParser.REUSE - 571)) | (1 << (MariaDBParser.ROLE - 571)) | (1 << (MariaDBParser.ROLLBACK - 571)) | (1 << (MariaDBParser.ROLLUP - 571)) | (1 << (MariaDBParser.ROTATE - 571)) | (1 << (MariaDBParser.ROW - 571)))) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & ((1 << (MariaDBParser.ROWS - 603)) | (1 << (MariaDBParser.ROW_FORMAT - 603)) | (1 << (MariaDBParser.RTREE - 603)) | (1 << (MariaDBParser.SAVEPOINT - 603)) | (1 << (MariaDBParser.SCHEDULE - 603)) | (1 << (MariaDBParser.SECURITY - 603)) | (1 << (MariaDBParser.SEQUENCE - 603)) | (1 << (MariaDBParser.SERVER - 603)) | (1 << (MariaDBParser.SESSION - 603)) | (1 << (MariaDBParser.SHARE - 603)) | (1 << (MariaDBParser.SHARED - 603)) | (1 << (MariaDBParser.SIGNED - 603)) | (1 << (MariaDBParser.SIMPLE - 603)) | (1 << (MariaDBParser.SLAVE - 603)) | (1 << (MariaDBParser.SLAVES - 603)) | (1 << (MariaDBParser.SLOW - 603)) | (1 << (MariaDBParser.SNAPSHOT - 603)) | (1 << (MariaDBParser.SOCKET - 603)) | (1 << (MariaDBParser.SOME - 603)) | (1 << (MariaDBParser.SONAME - 603)) | (1 << (MariaDBParser.SOUNDS - 603)) | (1 << (MariaDBParser.SOURCE - 603)) | (1 << (MariaDBParser.SQL_AFTER_GTIDS - 603)) | (1 << (MariaDBParser.SQL_AFTER_MTS_GAPS - 603)) | (1 << (MariaDBParser.SQL_BEFORE_GTIDS - 603)) | (1 << (MariaDBParser.SQL_BUFFER_RESULT - 603)) | (1 << (MariaDBParser.SQL_CACHE - 603)) | (1 << (MariaDBParser.SQL_NO_CACHE - 603)) | (1 << (MariaDBParser.SQL_THREAD - 603)) | (1 << (MariaDBParser.START - 603)) | (1 << (MariaDBParser.STARTS - 603)) | (1 << (MariaDBParser.STATS_AUTO_RECALC - 603)))) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & ((1 << (MariaDBParser.STATS_PERSISTENT - 635)) | (1 << (MariaDBParser.STATS_SAMPLE_PAGES - 635)) | (1 << (MariaDBParser.STATUS - 635)) | (1 << (MariaDBParser.STOP - 635)) | (1 << (MariaDBParser.STORAGE - 635)) | (1 << (MariaDBParser.STRING - 635)) | (1 << (MariaDBParser.SUBCLASS_ORIGIN - 635)) | (1 << (MariaDBParser.SUBJECT - 635)) | (1 << (MariaDBParser.SUBPARTITION - 635)) | (1 << (MariaDBParser.SUBPARTITIONS - 635)) | (1 << (MariaDBParser.SUSPEND - 635)) | (1 << (MariaDBParser.SWAPS - 635)) | (1 << (MariaDBParser.SWITCHES - 635)) | (1 << (MariaDBParser.TABLE_NAME - 635)) | (1 << (MariaDBParser.TABLESPACE - 635)) | (1 << (MariaDBParser.TABLE_TYPE - 635)) | (1 << (MariaDBParser.TEMPORARY - 635)) | (1 << (MariaDBParser.TEMPTABLE - 635)) | (1 << (MariaDBParser.THAN - 635)) | (1 << (MariaDBParser.TRADITIONAL - 635)) | (1 << (MariaDBParser.TRANSACTION - 635)) | (1 << (MariaDBParser.TRANSACTIONAL - 635)) | (1 << (MariaDBParser.TRIGGERS - 635)) | (1 << (MariaDBParser.TRUNCATE - 635)) | (1 << (MariaDBParser.TYPES - 635)) | (1 << (MariaDBParser.UNBOUNDED - 635)) | (1 << (MariaDBParser.UNDEFINED - 635)) | (1 << (MariaDBParser.UNDOFILE - 635)) | (1 << (MariaDBParser.UNDO_BUFFER_SIZE - 635)) | (1 << (MariaDBParser.UNINSTALL - 635)) | (1 << (MariaDBParser.UNKNOWN - 635)))) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & ((1 << (MariaDBParser.UNTIL - 667)) | (1 << (MariaDBParser.UPGRADE - 667)) | (1 << (MariaDBParser.USER - 667)) | (1 << (MariaDBParser.USE_FRM - 667)) | (1 << (MariaDBParser.USER_RESOURCES - 667)) | (1 << (MariaDBParser.VALIDATION - 667)) | (1 << (MariaDBParser.VALUE - 667)) | (1 << (MariaDBParser.VARIABLES - 667)) | (1 << (MariaDBParser.VIEW - 667)) | (1 << (MariaDBParser.VIRTUAL - 667)) | (1 << (MariaDBParser.VISIBLE - 667)) | (1 << (MariaDBParser.WAIT - 667)) | (1 << (MariaDBParser.WARNINGS - 667)) | (1 << (MariaDBParser.WITHOUT - 667)) | (1 << (MariaDBParser.WORK - 667)) | (1 << (MariaDBParser.WRAPPER - 667)) | (1 << (MariaDBParser.WSREP_MEMBERSHIP - 667)) | (1 << (MariaDBParser.WSREP_STATUS - 667)) | (1 << (MariaDBParser.X509 - 667)) | (1 << (MariaDBParser.XA - 667)) | (1 << (MariaDBParser.XML - 667)) | (1 << (MariaDBParser.EUR - 667)) | (1 << (MariaDBParser.USA - 667)) | (1 << (MariaDBParser.JIS - 667)) | (1 << (MariaDBParser.ISO - 667)) | (1 << (MariaDBParser.INTERNAL - 667)) | (1 << (MariaDBParser.QUARTER - 667)) | (1 << (MariaDBParser.MONTH - 667)) | (1 << (MariaDBParser.DAY - 667)) | (1 << (MariaDBParser.HOUR - 667)))) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & ((1 << (MariaDBParser.MINUTE - 699)) | (1 << (MariaDBParser.WEEK - 699)) | (1 << (MariaDBParser.SECOND - 699)) | (1 << (MariaDBParser.MICROSECOND - 699)) | (1 << (MariaDBParser.USER_STATISTICS - 699)) | (1 << (MariaDBParser.CLIENT_STATISTICS - 699)) | (1 << (MariaDBParser.INDEX_STATISTICS - 699)) | (1 << (MariaDBParser.TABLE_STATISTICS - 699)) | (1 << (MariaDBParser.ADMIN - 699)) | (1 << (MariaDBParser.AUDIT_ADMIN - 699)) | (1 << (MariaDBParser.BACKUP_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ENCRYPTION_ADMIN - 699)) | (1 << (MariaDBParser.CLONE_ADMIN - 699)) | (1 << (MariaDBParser.CONNECTION_ADMIN - 699)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ADMIN - 699)) | (1 << (MariaDBParser.EXECUTE - 699)) | (1 << (MariaDBParser.FILE - 699)) | (1 << (MariaDBParser.FIREWALL_ADMIN - 699)) | (1 << (MariaDBParser.FIREWALL_USER - 699)) | (1 << (MariaDBParser.GROUP_REPLICATION_ADMIN - 699)) | (1 << (MariaDBParser.INNODB_REDO_LOG_ARCHIVE - 699)) | (1 << (MariaDBParser.INVOKE - 699)) | (1 << (MariaDBParser.LAMBDA - 699)) | (1 << (MariaDBParser.NDB_STORED_USER - 699)) | (1 << (MariaDBParser.PASSWORDLESS_USER_ADMIN - 699)))) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & ((1 << (MariaDBParser.PERSIST_RO_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.PRIVILEGES - 731)) | (1 << (MariaDBParser.PROCESS - 731)) | (1 << (MariaDBParser.RELOAD - 731)) | (1 << (MariaDBParser.REPLICATION_APPLIER - 731)) | (1 << (MariaDBParser.REPLICATION_SLAVE_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_USER - 731)) | (1 << (MariaDBParser.ROLE_ADMIN - 731)) | (1 << (MariaDBParser.ROUTINE - 731)) | (1 << (MariaDBParser.S3 - 731)) | (1 << (MariaDBParser.SESSION_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.SET_USER_ID - 731)) | (1 << (MariaDBParser.SHOW_ROUTINE - 731)) | (1 << (MariaDBParser.SHUTDOWN - 731)) | (1 << (MariaDBParser.SUPER - 731)) | (1 << (MariaDBParser.SYSTEM_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.TABLES - 731)) | (1 << (MariaDBParser.TABLE_ENCRYPTION_ADMIN - 731)) | (1 << (MariaDBParser.VERSION_TOKEN_ADMIN - 731)) | (1 << (MariaDBParser.XA_RECOVER_ADMIN - 731)) | (1 << (MariaDBParser.ARMSCII8 - 731)) | (1 << (MariaDBParser.ASCII - 731)) | (1 << (MariaDBParser.BIG5 - 731)) | (1 << (MariaDBParser.CP1250 - 731)) | (1 << (MariaDBParser.CP1251 - 731)) | (1 << (MariaDBParser.CP1256 - 731)) | (1 << (MariaDBParser.CP1257 - 731)) | (1 << (MariaDBParser.CP850 - 731)) | (1 << (MariaDBParser.CP852 - 731)) | (1 << (MariaDBParser.CP866 - 731)))) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & ((1 << (MariaDBParser.CP932 - 763)) | (1 << (MariaDBParser.DEC8 - 763)) | (1 << (MariaDBParser.EUCJPMS - 763)) | (1 << (MariaDBParser.EUCKR - 763)) | (1 << (MariaDBParser.GB18030 - 763)) | (1 << (MariaDBParser.GB2312 - 763)) | (1 << (MariaDBParser.GBK - 763)) | (1 << (MariaDBParser.GEOSTD8 - 763)) | (1 << (MariaDBParser.GREEK - 763)) | (1 << (MariaDBParser.HEBREW - 763)) | (1 << (MariaDBParser.HP8 - 763)) | (1 << (MariaDBParser.KEYBCS2 - 763)) | (1 << (MariaDBParser.KOI8R - 763)) | (1 << (MariaDBParser.KOI8U - 763)) | (1 << (MariaDBParser.LATIN1 - 763)) | (1 << (MariaDBParser.LATIN2 - 763)) | (1 << (MariaDBParser.LATIN5 - 763)) | (1 << (MariaDBParser.LATIN7 - 763)) | (1 << (MariaDBParser.MACCE - 763)) | (1 << (MariaDBParser.MACROMAN - 763)) | (1 << (MariaDBParser.SJIS - 763)) | (1 << (MariaDBParser.SWE7 - 763)) | (1 << (MariaDBParser.TIS620 - 763)) | (1 << (MariaDBParser.UCS2 - 763)) | (1 << (MariaDBParser.UJIS - 763)) | (1 << (MariaDBParser.UTF16 - 763)) | (1 << (MariaDBParser.UTF16LE - 763)) | (1 << (MariaDBParser.UTF32 - 763)) | (1 << (MariaDBParser.UTF8 - 763)) | (1 << (MariaDBParser.UTF8MB3 - 763)) | (1 << (MariaDBParser.UTF8MB4 - 763)) | (1 << (MariaDBParser.ARCHIVE - 763)))) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & ((1 << (MariaDBParser.BLACKHOLE - 795)) | (1 << (MariaDBParser.CSV - 795)) | (1 << (MariaDBParser.FEDERATED - 795)) | (1 << (MariaDBParser.INNODB - 795)) | (1 << (MariaDBParser.MEMORY - 795)) | (1 << (MariaDBParser.MRG_MYISAM - 795)) | (1 << (MariaDBParser.MYISAM - 795)) | (1 << (MariaDBParser.NDB - 795)) | (1 << (MariaDBParser.NDBCLUSTER - 795)) | (1 << (MariaDBParser.PERFORMANCE_SCHEMA - 795)) | (1 << (MariaDBParser.TOKUDB - 795)) | (1 << (MariaDBParser.REPEATABLE - 795)) | (1 << (MariaDBParser.COMMITTED - 795)) | (1 << (MariaDBParser.UNCOMMITTED - 795)) | (1 << (MariaDBParser.SERIALIZABLE - 795)) | (1 << (MariaDBParser.GEOMETRYCOLLECTION - 795)) | (1 << (MariaDBParser.LINESTRING - 795)) | (1 << (MariaDBParser.MULTILINESTRING - 795)) | (1 << (MariaDBParser.MULTIPOINT - 795)) | (1 << (MariaDBParser.MULTIPOLYGON - 795)) | (1 << (MariaDBParser.POINT - 795)) | (1 << (MariaDBParser.POLYGON - 795)) | (1 << (MariaDBParser.ABS - 795)) | (1 << (MariaDBParser.ACOS - 795)) | (1 << (MariaDBParser.ADDDATE - 795)) | (1 << (MariaDBParser.ADDTIME - 795)) | (1 << (MariaDBParser.AES_DECRYPT - 795)) | (1 << (MariaDBParser.AES_ENCRYPT - 795)) | (1 << (MariaDBParser.AREA - 795)) | (1 << (MariaDBParser.ASBINARY - 795)))) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & ((1 << (MariaDBParser.ASIN - 827)) | (1 << (MariaDBParser.ASTEXT - 827)) | (1 << (MariaDBParser.ASWKB - 827)) | (1 << (MariaDBParser.ASWKT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DECRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DERIVE - 827)) | (1 << (MariaDBParser.ASYMMETRIC_ENCRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_SIGN - 827)) | (1 << (MariaDBParser.ASYMMETRIC_VERIFY - 827)) | (1 << (MariaDBParser.ATAN - 827)) | (1 << (MariaDBParser.ATAN2 - 827)) | (1 << (MariaDBParser.BENCHMARK - 827)) | (1 << (MariaDBParser.BIN - 827)) | (1 << (MariaDBParser.BIT_COUNT - 827)) | (1 << (MariaDBParser.BIT_LENGTH - 827)) | (1 << (MariaDBParser.BUFFER - 827)) | (1 << (MariaDBParser.CATALOG_NAME - 827)) | (1 << (MariaDBParser.CEIL - 827)) | (1 << (MariaDBParser.CEILING - 827)) | (1 << (MariaDBParser.CENTROID - 827)) | (1 << (MariaDBParser.CHARACTER_LENGTH - 827)) | (1 << (MariaDBParser.CHARSET - 827)) | (1 << (MariaDBParser.CHAR_LENGTH - 827)) | (1 << (MariaDBParser.COERCIBILITY - 827)) | (1 << (MariaDBParser.COLLATION - 827)) | (1 << (MariaDBParser.COMPRESS - 827)) | (1 << (MariaDBParser.CONCAT - 827)) | (1 << (MariaDBParser.CONCAT_WS - 827)) | (1 << (MariaDBParser.CONNECTION_ID - 827)) | (1 << (MariaDBParser.CONV - 827)) | (1 << (MariaDBParser.CONVERT_TZ - 827)) | (1 << (MariaDBParser.COS - 827)))) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & ((1 << (MariaDBParser.COT - 859)) | (1 << (MariaDBParser.CRC32 - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY - 859)) | (1 << (MariaDBParser.CREATE_DH_PARAMETERS - 859)) | (1 << (MariaDBParser.CREATE_DIGEST - 859)) | (1 << (MariaDBParser.CROSSES - 859)) | (1 << (MariaDBParser.DATEDIFF - 859)) | (1 << (MariaDBParser.DATE_FORMAT - 859)) | (1 << (MariaDBParser.DAYNAME - 859)) | (1 << (MariaDBParser.DAYOFMONTH - 859)) | (1 << (MariaDBParser.DAYOFWEEK - 859)) | (1 << (MariaDBParser.DAYOFYEAR - 859)) | (1 << (MariaDBParser.DECODE - 859)) | (1 << (MariaDBParser.DEGREES - 859)) | (1 << (MariaDBParser.DES_DECRYPT - 859)) | (1 << (MariaDBParser.DES_ENCRYPT - 859)) | (1 << (MariaDBParser.DIMENSION - 859)) | (1 << (MariaDBParser.DISJOINT - 859)) | (1 << (MariaDBParser.ELT - 859)) | (1 << (MariaDBParser.ENCODE - 859)) | (1 << (MariaDBParser.ENCRYPT - 859)) | (1 << (MariaDBParser.ENDPOINT - 859)) | (1 << (MariaDBParser.ENGINE_ATTRIBUTE - 859)) | (1 << (MariaDBParser.ENVELOPE - 859)) | (1 << (MariaDBParser.EQUALS - 859)) | (1 << (MariaDBParser.EXP - 859)) | (1 << (MariaDBParser.EXPORT_SET - 859)) | (1 << (MariaDBParser.EXTERIORRING - 859)) | (1 << (MariaDBParser.EXTRACTVALUE - 859)) | (1 << (MariaDBParser.FIELD - 859)) | (1 << (MariaDBParser.FIND_IN_SET - 859)))) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & ((1 << (MariaDBParser.FLOOR - 891)) | (1 << (MariaDBParser.FORMAT - 891)) | (1 << (MariaDBParser.FOUND_ROWS - 891)) | (1 << (MariaDBParser.FROM_BASE64 - 891)) | (1 << (MariaDBParser.FROM_DAYS - 891)) | (1 << (MariaDBParser.FROM_UNIXTIME - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYN - 891)) | (1 << (MariaDBParser.GEOMETRYTYPE - 891)) | (1 << (MariaDBParser.GEOMFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMFROMWKB - 891)) | (1 << (MariaDBParser.GET_FORMAT - 891)) | (1 << (MariaDBParser.GET_LOCK - 891)) | (1 << (MariaDBParser.GLENGTH - 891)) | (1 << (MariaDBParser.GREATEST - 891)) | (1 << (MariaDBParser.GTID_SUBSET - 891)) | (1 << (MariaDBParser.GTID_SUBTRACT - 891)) | (1 << (MariaDBParser.HEX - 891)) | (1 << (MariaDBParser.IFNULL - 891)) | (1 << (MariaDBParser.INET6_ATON - 891)) | (1 << (MariaDBParser.INET6_NTOA - 891)) | (1 << (MariaDBParser.INET_ATON - 891)) | (1 << (MariaDBParser.INET_NTOA - 891)) | (1 << (MariaDBParser.INSTR - 891)) | (1 << (MariaDBParser.INTERIORRINGN - 891)) | (1 << (MariaDBParser.INTERSECTS - 891)) | (1 << (MariaDBParser.ISCLOSED - 891)))) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & ((1 << (MariaDBParser.ISEMPTY - 923)) | (1 << (MariaDBParser.ISNULL - 923)) | (1 << (MariaDBParser.ISSIMPLE - 923)) | (1 << (MariaDBParser.IS_FREE_LOCK - 923)) | (1 << (MariaDBParser.IS_IPV4 - 923)) | (1 << (MariaDBParser.IS_IPV4_COMPAT - 923)) | (1 << (MariaDBParser.IS_IPV4_MAPPED - 923)) | (1 << (MariaDBParser.IS_IPV6 - 923)) | (1 << (MariaDBParser.IS_USED_LOCK - 923)) | (1 << (MariaDBParser.LAST_INSERT_ID - 923)) | (1 << (MariaDBParser.LCASE - 923)) | (1 << (MariaDBParser.LEAST - 923)) | (1 << (MariaDBParser.LENGTH - 923)) | (1 << (MariaDBParser.LINEFROMTEXT - 923)) | (1 << (MariaDBParser.LINEFROMWKB - 923)) | (1 << (MariaDBParser.LINESTRINGFROMTEXT - 923)) | (1 << (MariaDBParser.LINESTRINGFROMWKB - 923)) | (1 << (MariaDBParser.LN - 923)) | (1 << (MariaDBParser.LOAD_FILE - 923)) | (1 << (MariaDBParser.LOCATE - 923)) | (1 << (MariaDBParser.LOG - 923)) | (1 << (MariaDBParser.LOG10 - 923)) | (1 << (MariaDBParser.LOG2 - 923)) | (1 << (MariaDBParser.LOWER - 923)) | (1 << (MariaDBParser.LPAD - 923)) | (1 << (MariaDBParser.LTRIM - 923)) | (1 << (MariaDBParser.MAKEDATE - 923)) | (1 << (MariaDBParser.MAKETIME - 923)) | (1 << (MariaDBParser.MAKE_SET - 923)) | (1 << (MariaDBParser.MASTER_POS_WAIT - 923)) | (1 << (MariaDBParser.MBRCONTAINS - 923)) | (1 << (MariaDBParser.MBRDISJOINT - 923)))) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & ((1 << (MariaDBParser.MBREQUAL - 955)) | (1 << (MariaDBParser.MBRINTERSECTS - 955)) | (1 << (MariaDBParser.MBROVERLAPS - 955)) | (1 << (MariaDBParser.MBRTOUCHES - 955)) | (1 << (MariaDBParser.MBRWITHIN - 955)) | (1 << (MariaDBParser.MD5 - 955)) | (1 << (MariaDBParser.MLINEFROMTEXT - 955)) | (1 << (MariaDBParser.MLINEFROMWKB - 955)) | (1 << (MariaDBParser.MONTHNAME - 955)) | (1 << (MariaDBParser.MPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MPOLYFROMTEXT - 955)) | (1 << (MariaDBParser.MPOLYFROMWKB - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMTEXT - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMWKB - 955)) | (1 << (MariaDBParser.NAME_CONST - 955)) | (1 << (MariaDBParser.NULLIF - 955)) | (1 << (MariaDBParser.NUMGEOMETRIES - 955)) | (1 << (MariaDBParser.NUMINTERIORRINGS - 955)) | (1 << (MariaDBParser.NUMPOINTS - 955)) | (1 << (MariaDBParser.OCT - 955)) | (1 << (MariaDBParser.OCTET_LENGTH - 955)) | (1 << (MariaDBParser.ORD - 955)) | (1 << (MariaDBParser.OVERLAPS - 955)) | (1 << (MariaDBParser.PERIOD_ADD - 955)) | (1 << (MariaDBParser.PERIOD_DIFF - 955)) | (1 << (MariaDBParser.PI - 955)) | (1 << (MariaDBParser.POINTFROMTEXT - 955)))) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & ((1 << (MariaDBParser.POINTFROMWKB - 987)) | (1 << (MariaDBParser.POINTN - 987)) | (1 << (MariaDBParser.POLYFROMTEXT - 987)) | (1 << (MariaDBParser.POLYFROMWKB - 987)) | (1 << (MariaDBParser.POLYGONFROMTEXT - 987)) | (1 << (MariaDBParser.POLYGONFROMWKB - 987)) | (1 << (MariaDBParser.POW - 987)) | (1 << (MariaDBParser.POWER - 987)) | (1 << (MariaDBParser.QUOTE - 987)) | (1 << (MariaDBParser.RADIANS - 987)) | (1 << (MariaDBParser.RAND - 987)) | (1 << (MariaDBParser.RANDOM_BYTES - 987)) | (1 << (MariaDBParser.RELEASE_LOCK - 987)) | (1 << (MariaDBParser.REVERSE - 987)) | (1 << (MariaDBParser.ROUND - 987)) | (1 << (MariaDBParser.ROW_COUNT - 987)) | (1 << (MariaDBParser.RPAD - 987)) | (1 << (MariaDBParser.RTRIM - 987)) | (1 << (MariaDBParser.SEC_TO_TIME - 987)) | (1 << (MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE - 987)) | (1 << (MariaDBParser.SESSION_USER - 987)) | (1 << (MariaDBParser.SHA - 987)) | (1 << (MariaDBParser.SHA1 - 987)) | (1 << (MariaDBParser.SHA2 - 987)) | (1 << (MariaDBParser.SCHEMA_NAME - 987)) | (1 << (MariaDBParser.SIGN - 987)) | (1 << (MariaDBParser.SIN - 987)) | (1 << (MariaDBParser.SLEEP - 987)) | (1 << (MariaDBParser.SOUNDEX - 987)) | (1 << (MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS - 987)) | (1 << (MariaDBParser.SQRT - 987)) | (1 << (MariaDBParser.SRID - 987)))) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & ((1 << (MariaDBParser.STARTPOINT - 1019)) | (1 << (MariaDBParser.STRCMP - 1019)) | (1 << (MariaDBParser.STR_TO_DATE - 1019)) | (1 << (MariaDBParser.ST_AREA - 1019)) | (1 << (MariaDBParser.ST_ASBINARY - 1019)) | (1 << (MariaDBParser.ST_ASTEXT - 1019)) | (1 << (MariaDBParser.ST_ASWKB - 1019)) | (1 << (MariaDBParser.ST_ASWKT - 1019)) | (1 << (MariaDBParser.ST_BUFFER - 1019)) | (1 << (MariaDBParser.ST_CENTROID - 1019)) | (1 << (MariaDBParser.ST_CONTAINS - 1019)) | (1 << (MariaDBParser.ST_CROSSES - 1019)) | (1 << (MariaDBParser.ST_DIFFERENCE - 1019)) | (1 << (MariaDBParser.ST_DIMENSION - 1019)) | (1 << (MariaDBParser.ST_DISJOINT - 1019)) | (1 << (MariaDBParser.ST_DISTANCE - 1019)) | (1 << (MariaDBParser.ST_ENDPOINT - 1019)) | (1 << (MariaDBParser.ST_ENVELOPE - 1019)) | (1 << (MariaDBParser.ST_EQUALS - 1019)) | (1 << (MariaDBParser.ST_EXTERIORRING - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYN - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYTYPE - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMWKB - 1019)) | (1 << (MariaDBParser.ST_INTERIORRINGN - 1019)))) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & ((1 << (MariaDBParser.ST_INTERSECTION - 1051)) | (1 << (MariaDBParser.ST_INTERSECTS - 1051)) | (1 << (MariaDBParser.ST_ISCLOSED - 1051)) | (1 << (MariaDBParser.ST_ISEMPTY - 1051)) | (1 << (MariaDBParser.ST_ISSIMPLE - 1051)) | (1 << (MariaDBParser.ST_LINEFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINEFROMWKB - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMWKB - 1051)) | (1 << (MariaDBParser.ST_NUMGEOMETRIES - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRING - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRINGS - 1051)) | (1 << (MariaDBParser.ST_NUMPOINTS - 1051)) | (1 << (MariaDBParser.ST_OVERLAPS - 1051)) | (1 << (MariaDBParser.ST_POINTFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POINTFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POINTN - 1051)) | (1 << (MariaDBParser.ST_POLYFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMWKB - 1051)) | (1 << (MariaDBParser.ST_SRID - 1051)) | (1 << (MariaDBParser.ST_STARTPOINT - 1051)) | (1 << (MariaDBParser.ST_SYMDIFFERENCE - 1051)) | (1 << (MariaDBParser.ST_TOUCHES - 1051)) | (1 << (MariaDBParser.ST_UNION - 1051)) | (1 << (MariaDBParser.ST_WITHIN - 1051)) | (1 << (MariaDBParser.ST_X - 1051)) | (1 << (MariaDBParser.ST_Y - 1051)) | (1 << (MariaDBParser.SUBDATE - 1051)) | (1 << (MariaDBParser.SUBSTRING_INDEX - 1051)) | (1 << (MariaDBParser.SUBTIME - 1051)))) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & ((1 << (MariaDBParser.SYSTEM_USER - 1083)) | (1 << (MariaDBParser.TAN - 1083)) | (1 << (MariaDBParser.TIMEDIFF - 1083)) | (1 << (MariaDBParser.TIMESTAMPADD - 1083)) | (1 << (MariaDBParser.TIMESTAMPDIFF - 1083)) | (1 << (MariaDBParser.TIME_FORMAT - 1083)) | (1 << (MariaDBParser.TIME_TO_SEC - 1083)) | (1 << (MariaDBParser.TOUCHES - 1083)) | (1 << (MariaDBParser.TO_BASE64 - 1083)) | (1 << (MariaDBParser.TO_DAYS - 1083)) | (1 << (MariaDBParser.TO_SECONDS - 1083)) | (1 << (MariaDBParser.UCASE - 1083)) | (1 << (MariaDBParser.UNCOMPRESS - 1083)) | (1 << (MariaDBParser.UNCOMPRESSED_LENGTH - 1083)) | (1 << (MariaDBParser.UNHEX - 1083)) | (1 << (MariaDBParser.UNIX_TIMESTAMP - 1083)) | (1 << (MariaDBParser.UPDATEXML - 1083)) | (1 << (MariaDBParser.UPPER - 1083)) | (1 << (MariaDBParser.UUID - 1083)) | (1 << (MariaDBParser.UUID_SHORT - 1083)) | (1 << (MariaDBParser.VALIDATE_PASSWORD_STRENGTH - 1083)) | (1 << (MariaDBParser.VERSION - 1083)) | (1 << (MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1083)) | (1 << (MariaDBParser.WEEKDAY - 1083)) | (1 << (MariaDBParser.WEEKOFYEAR - 1083)) | (1 << (MariaDBParser.WEIGHT_STRING - 1083)) | (1 << (MariaDBParser.WITHIN - 1083)) | (1 << (MariaDBParser.YEARWEEK - 1083)) | (1 << (MariaDBParser.Y_FUNCTION - 1083)) | (1 << (MariaDBParser.X_FUNCTION - 1083)) | (1 << (MariaDBParser.VIA - 1083)) | (1 << (MariaDBParser.LASTVAL - 1083)))) !== 0) || ((((_la - 1115)) & ~0x1F) === 0 && ((1 << (_la - 1115)) & ((1 << (MariaDBParser.NEXTVAL - 1115)) | (1 << (MariaDBParser.SETVAL - 1115)) | (1 << (MariaDBParser.PREVIOUS - 1115)) | (1 << (MariaDBParser.PERSISTENT - 1115)) | (1 << (MariaDBParser.BINLOG_MONITOR - 1115)) | (1 << (MariaDBParser.BINLOG_REPLAY - 1115)) | (1 << (MariaDBParser.FEDERATED_ADMIN - 1115)) | (1 << (MariaDBParser.READ_ONLY_ADMIN - 1115)) | (1 << (MariaDBParser.REPLICA - 1115)) | (1 << (MariaDBParser.REPLICAS - 1115)) | (1 << (MariaDBParser.REPLICATION_MASTER_ADMIN - 1115)) | (1 << (MariaDBParser.MONITOR - 1115)) | (1 << (MariaDBParser.READ_ONLY - 1115)) | (1 << (MariaDBParser.REPLAY - 1115)) | (1 << (MariaDBParser.MOD - 1115)))) !== 0) || ((((_la - 1166)) & ~0x1F) === 0 && ((1 << (_la - 1166)) & ((1 << (MariaDBParser.CHARSET_REVERSE_QOUTE_STRING - 1166)) | (1 << (MariaDBParser.STRING_LITERAL - 1166)) | (1 << (MariaDBParser.ID - 1166)))) !== 0)) {
					{
					this.state = 1815;
					(_localctx as UniqueKeyTableConstraintContext)._index = this.uid();
					}
				}

				this.state = 1819;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.USING) {
					{
					this.state = 1818;
					this.indexType();
					}
				}

				this.state = 1821;
				this.indexColumnNames();
				this.state = 1825;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.IGNORED || _la === MariaDBParser.NOT || _la === MariaDBParser.USING || _la === MariaDBParser.WITH || _la === MariaDBParser.CLUSTERING || _la === MariaDBParser.COMMENT || _la === MariaDBParser.INVISIBLE || _la === MariaDBParser.KEY_BLOCK_SIZE || _la === MariaDBParser.VISIBLE || _la === MariaDBParser.ENGINE_ATTRIBUTE || _la === MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					this.state = 1822;
					this.indexOption();
					}
					}
					this.state = 1827;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 3:
				_localctx = new ForeignKeyTableConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1832;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.CONSTRAINT) {
					{
					this.state = 1828;
					this.match(MariaDBParser.CONSTRAINT);
					this.state = 1830;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MariaDBParser.ATTRIBUTE) | (1 << MariaDBParser.BODY) | (1 << MariaDBParser.BUCKETS) | (1 << MariaDBParser.CONDITION))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (MariaDBParser.CURRENT - 36)) | (1 << (MariaDBParser.CURRENT_ROLE - 36)) | (1 << (MariaDBParser.CURRENT_USER - 36)) | (1 << (MariaDBParser.DATABASE - 36)) | (1 << (MariaDBParser.DEFAULT - 36)) | (1 << (MariaDBParser.DIAGNOSTICS - 36)) | (1 << (MariaDBParser.EMPTY - 36)) | (1 << (MariaDBParser.EXCEPT - 36)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (MariaDBParser.GROUP - 73)) | (1 << (MariaDBParser.IF - 73)) | (1 << (MariaDBParser.IGNORED - 73)) | (1 << (MariaDBParser.INSERT - 73)) | (1 << (MariaDBParser.LATERAL - 73)) | (1 << (MariaDBParser.LEFT - 73)) | (1 << (MariaDBParser.LOCKED - 73)))) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & ((1 << (MariaDBParser.MAXVALUE - 110)) | (1 << (MariaDBParser.MINVALUE - 110)) | (1 << (MariaDBParser.NUMBER - 110)) | (1 << (MariaDBParser.OPTIONAL - 110)) | (1 << (MariaDBParser.ORDER - 110)) | (1 << (MariaDBParser.PRIMARY - 110)) | (1 << (MariaDBParser.PACKAGE - 110)))) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (MariaDBParser.REPLACE - 142)) | (1 << (MariaDBParser.RIGHT - 142)) | (1 << (MariaDBParser.SCHEMA - 142)) | (1 << (MariaDBParser.SKIP_ - 142)) | (1 << (MariaDBParser.STACKED - 142)) | (1 << (MariaDBParser.STATEMENT - 142)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MariaDBParser.DATE - 217)) | (1 << (MariaDBParser.TIME - 217)) | (1 << (MariaDBParser.TIMESTAMP - 217)) | (1 << (MariaDBParser.DATETIME - 217)) | (1 << (MariaDBParser.YEAR - 217)) | (1 << (MariaDBParser.BINARY - 217)) | (1 << (MariaDBParser.TEXT - 217)) | (1 << (MariaDBParser.ENUM - 217)) | (1 << (MariaDBParser.SERIAL - 217)))) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & ((1 << (MariaDBParser.JSON_ARRAY - 251)) | (1 << (MariaDBParser.JSON_ARRAYAGG - 251)) | (1 << (MariaDBParser.JSON_ARRAY_APPEND - 251)) | (1 << (MariaDBParser.JSON_ARRAY_INSERT - 251)) | (1 << (MariaDBParser.JSON_CONTAINS - 251)) | (1 << (MariaDBParser.JSON_CONTAINS_PATH - 251)) | (1 << (MariaDBParser.JSON_DEPTH - 251)) | (1 << (MariaDBParser.JSON_EXTRACT - 251)) | (1 << (MariaDBParser.JSON_INSERT - 251)) | (1 << (MariaDBParser.JSON_KEYS - 251)) | (1 << (MariaDBParser.JSON_LENGTH - 251)) | (1 << (MariaDBParser.JSON_MERGE - 251)) | (1 << (MariaDBParser.JSON_MERGE_PATCH - 251)) | (1 << (MariaDBParser.JSON_MERGE_PRESERVE - 251)) | (1 << (MariaDBParser.JSON_OBJECT - 251)) | (1 << (MariaDBParser.JSON_OBJECTAGG - 251)) | (1 << (MariaDBParser.JSON_OVERLAPS - 251)) | (1 << (MariaDBParser.JSON_PRETTY - 251)) | (1 << (MariaDBParser.JSON_QUOTE - 251)) | (1 << (MariaDBParser.JSON_REMOVE - 251)) | (1 << (MariaDBParser.JSON_REPLACE - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALID - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT - 251)) | (1 << (MariaDBParser.JSON_SEARCH - 251)) | (1 << (MariaDBParser.JSON_SET - 251)) | (1 << (MariaDBParser.JSON_STORAGE_FREE - 251)) | (1 << (MariaDBParser.JSON_STORAGE_SIZE - 251)) | (1 << (MariaDBParser.JSON_TABLE - 251)) | (1 << (MariaDBParser.JSON_TYPE - 251)) | (1 << (MariaDBParser.JSON_UNQUOTE - 251)) | (1 << (MariaDBParser.JSON_VALID - 251)) | (1 << (MariaDBParser.JSON_VALUE - 251)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (MariaDBParser.NESTED - 283)) | (1 << (MariaDBParser.ORDINALITY - 283)) | (1 << (MariaDBParser.PATH - 283)) | (1 << (MariaDBParser.AVG - 283)) | (1 << (MariaDBParser.BIT_AND - 283)) | (1 << (MariaDBParser.BIT_OR - 283)) | (1 << (MariaDBParser.BIT_XOR - 283)) | (1 << (MariaDBParser.COUNT - 283)) | (1 << (MariaDBParser.CUME_DIST - 283)) | (1 << (MariaDBParser.DENSE_RANK - 283)) | (1 << (MariaDBParser.FIRST_VALUE - 283)) | (1 << (MariaDBParser.GROUP_CONCAT - 283)) | (1 << (MariaDBParser.LAG - 283)) | (1 << (MariaDBParser.LAST_VALUE - 283)) | (1 << (MariaDBParser.LEAD - 283)) | (1 << (MariaDBParser.MAX - 283)) | (1 << (MariaDBParser.MIN - 283)) | (1 << (MariaDBParser.NTILE - 283)) | (1 << (MariaDBParser.NTH_VALUE - 283)) | (1 << (MariaDBParser.PERCENT_RANK - 283)) | (1 << (MariaDBParser.RANK - 283)) | (1 << (MariaDBParser.ROW_NUMBER - 283)) | (1 << (MariaDBParser.STD - 283)) | (1 << (MariaDBParser.STDDEV - 283)) | (1 << (MariaDBParser.STDDEV_POP - 283)) | (1 << (MariaDBParser.STDDEV_SAMP - 283)) | (1 << (MariaDBParser.SUM - 283)) | (1 << (MariaDBParser.VAR_POP - 283)) | (1 << (MariaDBParser.VAR_SAMP - 283)) | (1 << (MariaDBParser.VARIANCE - 283)) | (1 << (MariaDBParser.CURRENT_DATE - 283)) | (1 << (MariaDBParser.CURRENT_TIME - 283)))) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & ((1 << (MariaDBParser.CURRENT_TIMESTAMP - 315)) | (1 << (MariaDBParser.LOCALTIME - 315)) | (1 << (MariaDBParser.CURDATE - 315)) | (1 << (MariaDBParser.CURTIME - 315)) | (1 << (MariaDBParser.DATE_ADD - 315)) | (1 << (MariaDBParser.DATE_SUB - 315)) | (1 << (MariaDBParser.LOCALTIMESTAMP - 315)) | (1 << (MariaDBParser.NOW - 315)) | (1 << (MariaDBParser.POSITION - 315)) | (1 << (MariaDBParser.SUBSTR - 315)) | (1 << (MariaDBParser.SUBSTRING - 315)) | (1 << (MariaDBParser.SYSDATE - 315)) | (1 << (MariaDBParser.TRIM - 315)) | (1 << (MariaDBParser.UTC_DATE - 315)) | (1 << (MariaDBParser.UTC_TIME - 315)) | (1 << (MariaDBParser.UTC_TIMESTAMP - 315)) | (1 << (MariaDBParser.ACCOUNT - 315)) | (1 << (MariaDBParser.ACTION - 315)) | (1 << (MariaDBParser.AFTER - 315)) | (1 << (MariaDBParser.AGGREGATE - 315)) | (1 << (MariaDBParser.ALGORITHM - 315)) | (1 << (MariaDBParser.ANY - 315)) | (1 << (MariaDBParser.AT - 315)) | (1 << (MariaDBParser.AUTHORS - 315)) | (1 << (MariaDBParser.AUTOCOMMIT - 315)) | (1 << (MariaDBParser.AUTOEXTEND_SIZE - 315)) | (1 << (MariaDBParser.AUTO_INCREMENT - 315)) | (1 << (MariaDBParser.AVG_ROW_LENGTH - 315)) | (1 << (MariaDBParser.BEGIN - 315)) | (1 << (MariaDBParser.BINLOG - 315)) | (1 << (MariaDBParser.BIT - 315)))) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & ((1 << (MariaDBParser.BLOCK - 347)) | (1 << (MariaDBParser.BOOL - 347)) | (1 << (MariaDBParser.BOOLEAN - 347)) | (1 << (MariaDBParser.BTREE - 347)) | (1 << (MariaDBParser.CACHE - 347)) | (1 << (MariaDBParser.CASCADED - 347)) | (1 << (MariaDBParser.CHAIN - 347)) | (1 << (MariaDBParser.CHANGED - 347)) | (1 << (MariaDBParser.CHANNEL - 347)) | (1 << (MariaDBParser.CHECKSUM - 347)) | (1 << (MariaDBParser.PAGE_CHECKSUM - 347)) | (1 << (MariaDBParser.CIPHER - 347)) | (1 << (MariaDBParser.CLASS_ORIGIN - 347)) | (1 << (MariaDBParser.CLIENT - 347)) | (1 << (MariaDBParser.CLOSE - 347)) | (1 << (MariaDBParser.CLUSTERING - 347)) | (1 << (MariaDBParser.COALESCE - 347)) | (1 << (MariaDBParser.CODE - 347)) | (1 << (MariaDBParser.COLUMNS - 347)) | (1 << (MariaDBParser.COLUMN_FORMAT - 347)) | (1 << (MariaDBParser.COLUMN_NAME - 347)) | (1 << (MariaDBParser.COMMENT - 347)) | (1 << (MariaDBParser.COMMIT - 347)) | (1 << (MariaDBParser.COMPACT - 347)) | (1 << (MariaDBParser.COMPLETION - 347)) | (1 << (MariaDBParser.COMPRESSED - 347)) | (1 << (MariaDBParser.COMPRESSION - 347)) | (1 << (MariaDBParser.CONCURRENT - 347)) | (1 << (MariaDBParser.CONNECT - 347)) | (1 << (MariaDBParser.CONNECTION - 347)) | (1 << (MariaDBParser.CONSISTENT - 347)) | (1 << (MariaDBParser.CONSTRAINT_CATALOG - 347)))) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & ((1 << (MariaDBParser.CONSTRAINT_SCHEMA - 379)) | (1 << (MariaDBParser.CONSTRAINT_NAME - 379)) | (1 << (MariaDBParser.CONTAINS - 379)) | (1 << (MariaDBParser.CONTEXT - 379)) | (1 << (MariaDBParser.CONTRIBUTORS - 379)) | (1 << (MariaDBParser.COPY - 379)) | (1 << (MariaDBParser.CPU - 379)) | (1 << (MariaDBParser.CYCLE - 379)) | (1 << (MariaDBParser.CURSOR_NAME - 379)) | (1 << (MariaDBParser.DATA - 379)) | (1 << (MariaDBParser.DATAFILE - 379)) | (1 << (MariaDBParser.DEALLOCATE - 379)) | (1 << (MariaDBParser.DEFAULT_AUTH - 379)) | (1 << (MariaDBParser.DEFINER - 379)) | (1 << (MariaDBParser.DELAY_KEY_WRITE - 379)) | (1 << (MariaDBParser.DES_KEY_FILE - 379)) | (1 << (MariaDBParser.DIRECTORY - 379)) | (1 << (MariaDBParser.DISABLE - 379)) | (1 << (MariaDBParser.DISCARD - 379)) | (1 << (MariaDBParser.DISK - 379)) | (1 << (MariaDBParser.DO - 379)) | (1 << (MariaDBParser.DUMPFILE - 379)) | (1 << (MariaDBParser.DUPLICATE - 379)) | (1 << (MariaDBParser.DYNAMIC - 379)) | (1 << (MariaDBParser.ENABLE - 379)) | (1 << (MariaDBParser.ENCRYPTED - 379)) | (1 << (MariaDBParser.ENCRYPTION - 379)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ID - 379)) | (1 << (MariaDBParser.END - 379)) | (1 << (MariaDBParser.ENDS - 379)) | (1 << (MariaDBParser.ENGINE - 379)) | (1 << (MariaDBParser.ENGINES - 379)))) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & ((1 << (MariaDBParser.ERROR - 411)) | (1 << (MariaDBParser.ERRORS - 411)) | (1 << (MariaDBParser.ESCAPE - 411)) | (1 << (MariaDBParser.EVEN - 411)) | (1 << (MariaDBParser.EVENT - 411)) | (1 << (MariaDBParser.EVENTS - 411)) | (1 << (MariaDBParser.EVERY - 411)) | (1 << (MariaDBParser.EXCHANGE - 411)) | (1 << (MariaDBParser.EXCLUSIVE - 411)) | (1 << (MariaDBParser.EXPIRE - 411)) | (1 << (MariaDBParser.EXPORT - 411)) | (1 << (MariaDBParser.EXTENDED - 411)) | (1 << (MariaDBParser.EXTENT_SIZE - 411)) | (1 << (MariaDBParser.FAILED_LOGIN_ATTEMPTS - 411)) | (1 << (MariaDBParser.FAST - 411)) | (1 << (MariaDBParser.FAULTS - 411)) | (1 << (MariaDBParser.FIELDS - 411)) | (1 << (MariaDBParser.FILE_BLOCK_SIZE - 411)) | (1 << (MariaDBParser.FILTER - 411)) | (1 << (MariaDBParser.FIRST - 411)) | (1 << (MariaDBParser.FIXED - 411)) | (1 << (MariaDBParser.FLUSH - 411)) | (1 << (MariaDBParser.FOLLOWS - 411)) | (1 << (MariaDBParser.FOUND - 411)) | (1 << (MariaDBParser.FULL - 411)) | (1 << (MariaDBParser.FUNCTION - 411)) | (1 << (MariaDBParser.GENERAL - 411)) | (1 << (MariaDBParser.GLOBAL - 411)) | (1 << (MariaDBParser.GRANTS - 411)) | (1 << (MariaDBParser.GROUP_REPLICATION - 411)) | (1 << (MariaDBParser.HANDLER - 411)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (MariaDBParser.HASH - 443)) | (1 << (MariaDBParser.HELP - 443)) | (1 << (MariaDBParser.HISTORY - 443)) | (1 << (MariaDBParser.HOST - 443)) | (1 << (MariaDBParser.HOSTS - 443)) | (1 << (MariaDBParser.IDENTIFIED - 443)) | (1 << (MariaDBParser.IGNORE_SERVER_IDS - 443)) | (1 << (MariaDBParser.IMPORT - 443)) | (1 << (MariaDBParser.INCREMENT - 443)) | (1 << (MariaDBParser.INDEXES - 443)) | (1 << (MariaDBParser.INITIAL_SIZE - 443)) | (1 << (MariaDBParser.INPLACE - 443)) | (1 << (MariaDBParser.INSERT_METHOD - 443)) | (1 << (MariaDBParser.INSTALL - 443)) | (1 << (MariaDBParser.INSTANCE - 443)) | (1 << (MariaDBParser.INSTANT - 443)) | (1 << (MariaDBParser.INVISIBLE - 443)) | (1 << (MariaDBParser.INVOKER - 443)) | (1 << (MariaDBParser.IO - 443)) | (1 << (MariaDBParser.IO_THREAD - 443)) | (1 << (MariaDBParser.IPC - 443)) | (1 << (MariaDBParser.ISOLATION - 443)) | (1 << (MariaDBParser.ISSUER - 443)) | (1 << (MariaDBParser.JSON - 443)) | (1 << (MariaDBParser.KEY_BLOCK_SIZE - 443)) | (1 << (MariaDBParser.LANGUAGE - 443)) | (1 << (MariaDBParser.LAST - 443)) | (1 << (MariaDBParser.LEAVES - 443)) | (1 << (MariaDBParser.LESS - 443)) | (1 << (MariaDBParser.LEVEL - 443)) | (1 << (MariaDBParser.LIST - 443)) | (1 << (MariaDBParser.LOCAL - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (MariaDBParser.LOCALES - 475)) | (1 << (MariaDBParser.LOGFILE - 475)) | (1 << (MariaDBParser.LOGS - 475)) | (1 << (MariaDBParser.MASTER - 475)) | (1 << (MariaDBParser.MASTER_AUTO_POSITION - 475)) | (1 << (MariaDBParser.MASTER_CONNECT_RETRY - 475)) | (1 << (MariaDBParser.MASTER_DELAY - 475)) | (1 << (MariaDBParser.MASTER_HEARTBEAT_PERIOD - 475)) | (1 << (MariaDBParser.MASTER_HOST - 475)) | (1 << (MariaDBParser.MASTER_LOG_FILE - 475)) | (1 << (MariaDBParser.MASTER_LOG_POS - 475)) | (1 << (MariaDBParser.MASTER_PASSWORD - 475)) | (1 << (MariaDBParser.MASTER_PORT - 475)) | (1 << (MariaDBParser.MASTER_RETRY_COUNT - 475)) | (1 << (MariaDBParser.MASTER_SSL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CA - 475)) | (1 << (MariaDBParser.MASTER_SSL_CAPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_CERT - 475)) | (1 << (MariaDBParser.MASTER_SSL_CIPHER - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRLPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_KEY - 475)) | (1 << (MariaDBParser.MASTER_TLS_VERSION - 475)) | (1 << (MariaDBParser.MASTER_USER - 475)) | (1 << (MariaDBParser.MAX_CONNECTIONS_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_QUERIES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_ROWS - 475)) | (1 << (MariaDBParser.MAX_SIZE - 475)) | (1 << (MariaDBParser.MAX_UPDATES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_USER_CONNECTIONS - 475)) | (1 << (MariaDBParser.MEDIUM - 475)) | (1 << (MariaDBParser.MEMBER - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (MariaDBParser.MERGE - 507)) | (1 << (MariaDBParser.MESSAGE_TEXT - 507)) | (1 << (MariaDBParser.MID - 507)) | (1 << (MariaDBParser.MIGRATE - 507)) | (1 << (MariaDBParser.MIN_ROWS - 507)) | (1 << (MariaDBParser.MODE - 507)) | (1 << (MariaDBParser.MODIFY - 507)) | (1 << (MariaDBParser.MUTEX - 507)) | (1 << (MariaDBParser.MYSQL - 507)) | (1 << (MariaDBParser.MYSQL_ERRNO - 507)) | (1 << (MariaDBParser.NAME - 507)) | (1 << (MariaDBParser.NAMES - 507)) | (1 << (MariaDBParser.NCHAR - 507)) | (1 << (MariaDBParser.NEVER - 507)) | (1 << (MariaDBParser.NEXT - 507)) | (1 << (MariaDBParser.NO - 507)) | (1 << (MariaDBParser.NOCACHE - 507)) | (1 << (MariaDBParser.NOCOPY - 507)) | (1 << (MariaDBParser.NOCYCLE - 507)) | (1 << (MariaDBParser.NOMAXVALUE - 507)) | (1 << (MariaDBParser.NOMINVALUE - 507)) | (1 << (MariaDBParser.NOWAIT - 507)) | (1 << (MariaDBParser.NODEGROUP - 507)) | (1 << (MariaDBParser.NONE - 507)) | (1 << (MariaDBParser.ODBC - 507)) | (1 << (MariaDBParser.OFFLINE - 507)) | (1 << (MariaDBParser.OFFSET - 507)) | (1 << (MariaDBParser.OF - 507)) | (1 << (MariaDBParser.OJ - 507)) | (1 << (MariaDBParser.OLD_PASSWORD - 507)) | (1 << (MariaDBParser.ONE - 507)) | (1 << (MariaDBParser.ONLINE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (MariaDBParser.ONLY - 539)) | (1 << (MariaDBParser.OPEN - 539)) | (1 << (MariaDBParser.OPTIMIZER_COSTS - 539)) | (1 << (MariaDBParser.OPTIONS - 539)) | (1 << (MariaDBParser.OWNER - 539)) | (1 << (MariaDBParser.PACK_KEYS - 539)) | (1 << (MariaDBParser.PAGE - 539)) | (1 << (MariaDBParser.PARSER - 539)) | (1 << (MariaDBParser.PARTIAL - 539)) | (1 << (MariaDBParser.PARTITIONING - 539)) | (1 << (MariaDBParser.PARTITIONS - 539)) | (1 << (MariaDBParser.PASSWORD - 539)) | (1 << (MariaDBParser.PASSWORD_LOCK_TIME - 539)) | (1 << (MariaDBParser.PHASE - 539)) | (1 << (MariaDBParser.PLUGIN - 539)) | (1 << (MariaDBParser.PLUGIN_DIR - 539)) | (1 << (MariaDBParser.PLUGINS - 539)) | (1 << (MariaDBParser.PORT - 539)) | (1 << (MariaDBParser.PRECEDES - 539)) | (1 << (MariaDBParser.PREPARE - 539)) | (1 << (MariaDBParser.PRESERVE - 539)) | (1 << (MariaDBParser.PREV - 539)) | (1 << (MariaDBParser.PROCESSLIST - 539)) | (1 << (MariaDBParser.PROFILE - 539)) | (1 << (MariaDBParser.PROFILES - 539)) | (1 << (MariaDBParser.PROXY - 539)) | (1 << (MariaDBParser.QUERY - 539)) | (1 << (MariaDBParser.QUERY_RESPONSE_TIME - 539)) | (1 << (MariaDBParser.QUICK - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (MariaDBParser.REBUILD - 571)) | (1 << (MariaDBParser.RECOVER - 571)) | (1 << (MariaDBParser.RECURSIVE - 571)) | (1 << (MariaDBParser.REDO_BUFFER_SIZE - 571)) | (1 << (MariaDBParser.REDUNDANT - 571)) | (1 << (MariaDBParser.RELAY - 571)) | (1 << (MariaDBParser.RELAY_LOG_FILE - 571)) | (1 << (MariaDBParser.RELAY_LOG_POS - 571)) | (1 << (MariaDBParser.RELAYLOG - 571)) | (1 << (MariaDBParser.REMOVE - 571)) | (1 << (MariaDBParser.REORGANIZE - 571)) | (1 << (MariaDBParser.REPAIR - 571)) | (1 << (MariaDBParser.REPLICATE_DO_DB - 571)) | (1 << (MariaDBParser.REPLICATE_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_REWRITE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATION - 571)) | (1 << (MariaDBParser.RESET - 571)) | (1 << (MariaDBParser.RESTART - 571)) | (1 << (MariaDBParser.RESUME - 571)) | (1 << (MariaDBParser.RETURNED_SQLSTATE - 571)) | (1 << (MariaDBParser.RETURNS - 571)) | (1 << (MariaDBParser.REUSE - 571)) | (1 << (MariaDBParser.ROLE - 571)) | (1 << (MariaDBParser.ROLLBACK - 571)) | (1 << (MariaDBParser.ROLLUP - 571)) | (1 << (MariaDBParser.ROTATE - 571)) | (1 << (MariaDBParser.ROW - 571)))) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & ((1 << (MariaDBParser.ROWS - 603)) | (1 << (MariaDBParser.ROW_FORMAT - 603)) | (1 << (MariaDBParser.RTREE - 603)) | (1 << (MariaDBParser.SAVEPOINT - 603)) | (1 << (MariaDBParser.SCHEDULE - 603)) | (1 << (MariaDBParser.SECURITY - 603)) | (1 << (MariaDBParser.SEQUENCE - 603)) | (1 << (MariaDBParser.SERVER - 603)) | (1 << (MariaDBParser.SESSION - 603)) | (1 << (MariaDBParser.SHARE - 603)) | (1 << (MariaDBParser.SHARED - 603)) | (1 << (MariaDBParser.SIGNED - 603)) | (1 << (MariaDBParser.SIMPLE - 603)) | (1 << (MariaDBParser.SLAVE - 603)) | (1 << (MariaDBParser.SLAVES - 603)) | (1 << (MariaDBParser.SLOW - 603)) | (1 << (MariaDBParser.SNAPSHOT - 603)) | (1 << (MariaDBParser.SOCKET - 603)) | (1 << (MariaDBParser.SOME - 603)) | (1 << (MariaDBParser.SONAME - 603)) | (1 << (MariaDBParser.SOUNDS - 603)) | (1 << (MariaDBParser.SOURCE - 603)) | (1 << (MariaDBParser.SQL_AFTER_GTIDS - 603)) | (1 << (MariaDBParser.SQL_AFTER_MTS_GAPS - 603)) | (1 << (MariaDBParser.SQL_BEFORE_GTIDS - 603)) | (1 << (MariaDBParser.SQL_BUFFER_RESULT - 603)) | (1 << (MariaDBParser.SQL_CACHE - 603)) | (1 << (MariaDBParser.SQL_NO_CACHE - 603)) | (1 << (MariaDBParser.SQL_THREAD - 603)) | (1 << (MariaDBParser.START - 603)) | (1 << (MariaDBParser.STARTS - 603)) | (1 << (MariaDBParser.STATS_AUTO_RECALC - 603)))) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & ((1 << (MariaDBParser.STATS_PERSISTENT - 635)) | (1 << (MariaDBParser.STATS_SAMPLE_PAGES - 635)) | (1 << (MariaDBParser.STATUS - 635)) | (1 << (MariaDBParser.STOP - 635)) | (1 << (MariaDBParser.STORAGE - 635)) | (1 << (MariaDBParser.STRING - 635)) | (1 << (MariaDBParser.SUBCLASS_ORIGIN - 635)) | (1 << (MariaDBParser.SUBJECT - 635)) | (1 << (MariaDBParser.SUBPARTITION - 635)) | (1 << (MariaDBParser.SUBPARTITIONS - 635)) | (1 << (MariaDBParser.SUSPEND - 635)) | (1 << (MariaDBParser.SWAPS - 635)) | (1 << (MariaDBParser.SWITCHES - 635)) | (1 << (MariaDBParser.TABLE_NAME - 635)) | (1 << (MariaDBParser.TABLESPACE - 635)) | (1 << (MariaDBParser.TABLE_TYPE - 635)) | (1 << (MariaDBParser.TEMPORARY - 635)) | (1 << (MariaDBParser.TEMPTABLE - 635)) | (1 << (MariaDBParser.THAN - 635)) | (1 << (MariaDBParser.TRADITIONAL - 635)) | (1 << (MariaDBParser.TRANSACTION - 635)) | (1 << (MariaDBParser.TRANSACTIONAL - 635)) | (1 << (MariaDBParser.TRIGGERS - 635)) | (1 << (MariaDBParser.TRUNCATE - 635)) | (1 << (MariaDBParser.TYPES - 635)) | (1 << (MariaDBParser.UNBOUNDED - 635)) | (1 << (MariaDBParser.UNDEFINED - 635)) | (1 << (MariaDBParser.UNDOFILE - 635)) | (1 << (MariaDBParser.UNDO_BUFFER_SIZE - 635)) | (1 << (MariaDBParser.UNINSTALL - 635)) | (1 << (MariaDBParser.UNKNOWN - 635)))) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & ((1 << (MariaDBParser.UNTIL - 667)) | (1 << (MariaDBParser.UPGRADE - 667)) | (1 << (MariaDBParser.USER - 667)) | (1 << (MariaDBParser.USE_FRM - 667)) | (1 << (MariaDBParser.USER_RESOURCES - 667)) | (1 << (MariaDBParser.VALIDATION - 667)) | (1 << (MariaDBParser.VALUE - 667)) | (1 << (MariaDBParser.VARIABLES - 667)) | (1 << (MariaDBParser.VIEW - 667)) | (1 << (MariaDBParser.VIRTUAL - 667)) | (1 << (MariaDBParser.VISIBLE - 667)) | (1 << (MariaDBParser.WAIT - 667)) | (1 << (MariaDBParser.WARNINGS - 667)) | (1 << (MariaDBParser.WITHOUT - 667)) | (1 << (MariaDBParser.WORK - 667)) | (1 << (MariaDBParser.WRAPPER - 667)) | (1 << (MariaDBParser.WSREP_MEMBERSHIP - 667)) | (1 << (MariaDBParser.WSREP_STATUS - 667)) | (1 << (MariaDBParser.X509 - 667)) | (1 << (MariaDBParser.XA - 667)) | (1 << (MariaDBParser.XML - 667)) | (1 << (MariaDBParser.EUR - 667)) | (1 << (MariaDBParser.USA - 667)) | (1 << (MariaDBParser.JIS - 667)) | (1 << (MariaDBParser.ISO - 667)) | (1 << (MariaDBParser.INTERNAL - 667)) | (1 << (MariaDBParser.QUARTER - 667)) | (1 << (MariaDBParser.MONTH - 667)) | (1 << (MariaDBParser.DAY - 667)) | (1 << (MariaDBParser.HOUR - 667)))) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & ((1 << (MariaDBParser.MINUTE - 699)) | (1 << (MariaDBParser.WEEK - 699)) | (1 << (MariaDBParser.SECOND - 699)) | (1 << (MariaDBParser.MICROSECOND - 699)) | (1 << (MariaDBParser.USER_STATISTICS - 699)) | (1 << (MariaDBParser.CLIENT_STATISTICS - 699)) | (1 << (MariaDBParser.INDEX_STATISTICS - 699)) | (1 << (MariaDBParser.TABLE_STATISTICS - 699)) | (1 << (MariaDBParser.ADMIN - 699)) | (1 << (MariaDBParser.AUDIT_ADMIN - 699)) | (1 << (MariaDBParser.BACKUP_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ENCRYPTION_ADMIN - 699)) | (1 << (MariaDBParser.CLONE_ADMIN - 699)) | (1 << (MariaDBParser.CONNECTION_ADMIN - 699)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ADMIN - 699)) | (1 << (MariaDBParser.EXECUTE - 699)) | (1 << (MariaDBParser.FILE - 699)) | (1 << (MariaDBParser.FIREWALL_ADMIN - 699)) | (1 << (MariaDBParser.FIREWALL_USER - 699)) | (1 << (MariaDBParser.GROUP_REPLICATION_ADMIN - 699)) | (1 << (MariaDBParser.INNODB_REDO_LOG_ARCHIVE - 699)) | (1 << (MariaDBParser.INVOKE - 699)) | (1 << (MariaDBParser.LAMBDA - 699)) | (1 << (MariaDBParser.NDB_STORED_USER - 699)) | (1 << (MariaDBParser.PASSWORDLESS_USER_ADMIN - 699)))) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & ((1 << (MariaDBParser.PERSIST_RO_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.PRIVILEGES - 731)) | (1 << (MariaDBParser.PROCESS - 731)) | (1 << (MariaDBParser.RELOAD - 731)) | (1 << (MariaDBParser.REPLICATION_APPLIER - 731)) | (1 << (MariaDBParser.REPLICATION_SLAVE_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_USER - 731)) | (1 << (MariaDBParser.ROLE_ADMIN - 731)) | (1 << (MariaDBParser.ROUTINE - 731)) | (1 << (MariaDBParser.S3 - 731)) | (1 << (MariaDBParser.SESSION_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.SET_USER_ID - 731)) | (1 << (MariaDBParser.SHOW_ROUTINE - 731)) | (1 << (MariaDBParser.SHUTDOWN - 731)) | (1 << (MariaDBParser.SUPER - 731)) | (1 << (MariaDBParser.SYSTEM_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.TABLES - 731)) | (1 << (MariaDBParser.TABLE_ENCRYPTION_ADMIN - 731)) | (1 << (MariaDBParser.VERSION_TOKEN_ADMIN - 731)) | (1 << (MariaDBParser.XA_RECOVER_ADMIN - 731)) | (1 << (MariaDBParser.ARMSCII8 - 731)) | (1 << (MariaDBParser.ASCII - 731)) | (1 << (MariaDBParser.BIG5 - 731)) | (1 << (MariaDBParser.CP1250 - 731)) | (1 << (MariaDBParser.CP1251 - 731)) | (1 << (MariaDBParser.CP1256 - 731)) | (1 << (MariaDBParser.CP1257 - 731)) | (1 << (MariaDBParser.CP850 - 731)) | (1 << (MariaDBParser.CP852 - 731)) | (1 << (MariaDBParser.CP866 - 731)))) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & ((1 << (MariaDBParser.CP932 - 763)) | (1 << (MariaDBParser.DEC8 - 763)) | (1 << (MariaDBParser.EUCJPMS - 763)) | (1 << (MariaDBParser.EUCKR - 763)) | (1 << (MariaDBParser.GB18030 - 763)) | (1 << (MariaDBParser.GB2312 - 763)) | (1 << (MariaDBParser.GBK - 763)) | (1 << (MariaDBParser.GEOSTD8 - 763)) | (1 << (MariaDBParser.GREEK - 763)) | (1 << (MariaDBParser.HEBREW - 763)) | (1 << (MariaDBParser.HP8 - 763)) | (1 << (MariaDBParser.KEYBCS2 - 763)) | (1 << (MariaDBParser.KOI8R - 763)) | (1 << (MariaDBParser.KOI8U - 763)) | (1 << (MariaDBParser.LATIN1 - 763)) | (1 << (MariaDBParser.LATIN2 - 763)) | (1 << (MariaDBParser.LATIN5 - 763)) | (1 << (MariaDBParser.LATIN7 - 763)) | (1 << (MariaDBParser.MACCE - 763)) | (1 << (MariaDBParser.MACROMAN - 763)) | (1 << (MariaDBParser.SJIS - 763)) | (1 << (MariaDBParser.SWE7 - 763)) | (1 << (MariaDBParser.TIS620 - 763)) | (1 << (MariaDBParser.UCS2 - 763)) | (1 << (MariaDBParser.UJIS - 763)) | (1 << (MariaDBParser.UTF16 - 763)) | (1 << (MariaDBParser.UTF16LE - 763)) | (1 << (MariaDBParser.UTF32 - 763)) | (1 << (MariaDBParser.UTF8 - 763)) | (1 << (MariaDBParser.UTF8MB3 - 763)) | (1 << (MariaDBParser.UTF8MB4 - 763)) | (1 << (MariaDBParser.ARCHIVE - 763)))) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & ((1 << (MariaDBParser.BLACKHOLE - 795)) | (1 << (MariaDBParser.CSV - 795)) | (1 << (MariaDBParser.FEDERATED - 795)) | (1 << (MariaDBParser.INNODB - 795)) | (1 << (MariaDBParser.MEMORY - 795)) | (1 << (MariaDBParser.MRG_MYISAM - 795)) | (1 << (MariaDBParser.MYISAM - 795)) | (1 << (MariaDBParser.NDB - 795)) | (1 << (MariaDBParser.NDBCLUSTER - 795)) | (1 << (MariaDBParser.PERFORMANCE_SCHEMA - 795)) | (1 << (MariaDBParser.TOKUDB - 795)) | (1 << (MariaDBParser.REPEATABLE - 795)) | (1 << (MariaDBParser.COMMITTED - 795)) | (1 << (MariaDBParser.UNCOMMITTED - 795)) | (1 << (MariaDBParser.SERIALIZABLE - 795)) | (1 << (MariaDBParser.GEOMETRYCOLLECTION - 795)) | (1 << (MariaDBParser.LINESTRING - 795)) | (1 << (MariaDBParser.MULTILINESTRING - 795)) | (1 << (MariaDBParser.MULTIPOINT - 795)) | (1 << (MariaDBParser.MULTIPOLYGON - 795)) | (1 << (MariaDBParser.POINT - 795)) | (1 << (MariaDBParser.POLYGON - 795)) | (1 << (MariaDBParser.ABS - 795)) | (1 << (MariaDBParser.ACOS - 795)) | (1 << (MariaDBParser.ADDDATE - 795)) | (1 << (MariaDBParser.ADDTIME - 795)) | (1 << (MariaDBParser.AES_DECRYPT - 795)) | (1 << (MariaDBParser.AES_ENCRYPT - 795)) | (1 << (MariaDBParser.AREA - 795)) | (1 << (MariaDBParser.ASBINARY - 795)))) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & ((1 << (MariaDBParser.ASIN - 827)) | (1 << (MariaDBParser.ASTEXT - 827)) | (1 << (MariaDBParser.ASWKB - 827)) | (1 << (MariaDBParser.ASWKT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DECRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DERIVE - 827)) | (1 << (MariaDBParser.ASYMMETRIC_ENCRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_SIGN - 827)) | (1 << (MariaDBParser.ASYMMETRIC_VERIFY - 827)) | (1 << (MariaDBParser.ATAN - 827)) | (1 << (MariaDBParser.ATAN2 - 827)) | (1 << (MariaDBParser.BENCHMARK - 827)) | (1 << (MariaDBParser.BIN - 827)) | (1 << (MariaDBParser.BIT_COUNT - 827)) | (1 << (MariaDBParser.BIT_LENGTH - 827)) | (1 << (MariaDBParser.BUFFER - 827)) | (1 << (MariaDBParser.CATALOG_NAME - 827)) | (1 << (MariaDBParser.CEIL - 827)) | (1 << (MariaDBParser.CEILING - 827)) | (1 << (MariaDBParser.CENTROID - 827)) | (1 << (MariaDBParser.CHARACTER_LENGTH - 827)) | (1 << (MariaDBParser.CHARSET - 827)) | (1 << (MariaDBParser.CHAR_LENGTH - 827)) | (1 << (MariaDBParser.COERCIBILITY - 827)) | (1 << (MariaDBParser.COLLATION - 827)) | (1 << (MariaDBParser.COMPRESS - 827)) | (1 << (MariaDBParser.CONCAT - 827)) | (1 << (MariaDBParser.CONCAT_WS - 827)) | (1 << (MariaDBParser.CONNECTION_ID - 827)) | (1 << (MariaDBParser.CONV - 827)) | (1 << (MariaDBParser.CONVERT_TZ - 827)) | (1 << (MariaDBParser.COS - 827)))) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & ((1 << (MariaDBParser.COT - 859)) | (1 << (MariaDBParser.CRC32 - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY - 859)) | (1 << (MariaDBParser.CREATE_DH_PARAMETERS - 859)) | (1 << (MariaDBParser.CREATE_DIGEST - 859)) | (1 << (MariaDBParser.CROSSES - 859)) | (1 << (MariaDBParser.DATEDIFF - 859)) | (1 << (MariaDBParser.DATE_FORMAT - 859)) | (1 << (MariaDBParser.DAYNAME - 859)) | (1 << (MariaDBParser.DAYOFMONTH - 859)) | (1 << (MariaDBParser.DAYOFWEEK - 859)) | (1 << (MariaDBParser.DAYOFYEAR - 859)) | (1 << (MariaDBParser.DECODE - 859)) | (1 << (MariaDBParser.DEGREES - 859)) | (1 << (MariaDBParser.DES_DECRYPT - 859)) | (1 << (MariaDBParser.DES_ENCRYPT - 859)) | (1 << (MariaDBParser.DIMENSION - 859)) | (1 << (MariaDBParser.DISJOINT - 859)) | (1 << (MariaDBParser.ELT - 859)) | (1 << (MariaDBParser.ENCODE - 859)) | (1 << (MariaDBParser.ENCRYPT - 859)) | (1 << (MariaDBParser.ENDPOINT - 859)) | (1 << (MariaDBParser.ENGINE_ATTRIBUTE - 859)) | (1 << (MariaDBParser.ENVELOPE - 859)) | (1 << (MariaDBParser.EQUALS - 859)) | (1 << (MariaDBParser.EXP - 859)) | (1 << (MariaDBParser.EXPORT_SET - 859)) | (1 << (MariaDBParser.EXTERIORRING - 859)) | (1 << (MariaDBParser.EXTRACTVALUE - 859)) | (1 << (MariaDBParser.FIELD - 859)) | (1 << (MariaDBParser.FIND_IN_SET - 859)))) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & ((1 << (MariaDBParser.FLOOR - 891)) | (1 << (MariaDBParser.FORMAT - 891)) | (1 << (MariaDBParser.FOUND_ROWS - 891)) | (1 << (MariaDBParser.FROM_BASE64 - 891)) | (1 << (MariaDBParser.FROM_DAYS - 891)) | (1 << (MariaDBParser.FROM_UNIXTIME - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYN - 891)) | (1 << (MariaDBParser.GEOMETRYTYPE - 891)) | (1 << (MariaDBParser.GEOMFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMFROMWKB - 891)) | (1 << (MariaDBParser.GET_FORMAT - 891)) | (1 << (MariaDBParser.GET_LOCK - 891)) | (1 << (MariaDBParser.GLENGTH - 891)) | (1 << (MariaDBParser.GREATEST - 891)) | (1 << (MariaDBParser.GTID_SUBSET - 891)) | (1 << (MariaDBParser.GTID_SUBTRACT - 891)) | (1 << (MariaDBParser.HEX - 891)) | (1 << (MariaDBParser.IFNULL - 891)) | (1 << (MariaDBParser.INET6_ATON - 891)) | (1 << (MariaDBParser.INET6_NTOA - 891)) | (1 << (MariaDBParser.INET_ATON - 891)) | (1 << (MariaDBParser.INET_NTOA - 891)) | (1 << (MariaDBParser.INSTR - 891)) | (1 << (MariaDBParser.INTERIORRINGN - 891)) | (1 << (MariaDBParser.INTERSECTS - 891)) | (1 << (MariaDBParser.ISCLOSED - 891)))) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & ((1 << (MariaDBParser.ISEMPTY - 923)) | (1 << (MariaDBParser.ISNULL - 923)) | (1 << (MariaDBParser.ISSIMPLE - 923)) | (1 << (MariaDBParser.IS_FREE_LOCK - 923)) | (1 << (MariaDBParser.IS_IPV4 - 923)) | (1 << (MariaDBParser.IS_IPV4_COMPAT - 923)) | (1 << (MariaDBParser.IS_IPV4_MAPPED - 923)) | (1 << (MariaDBParser.IS_IPV6 - 923)) | (1 << (MariaDBParser.IS_USED_LOCK - 923)) | (1 << (MariaDBParser.LAST_INSERT_ID - 923)) | (1 << (MariaDBParser.LCASE - 923)) | (1 << (MariaDBParser.LEAST - 923)) | (1 << (MariaDBParser.LENGTH - 923)) | (1 << (MariaDBParser.LINEFROMTEXT - 923)) | (1 << (MariaDBParser.LINEFROMWKB - 923)) | (1 << (MariaDBParser.LINESTRINGFROMTEXT - 923)) | (1 << (MariaDBParser.LINESTRINGFROMWKB - 923)) | (1 << (MariaDBParser.LN - 923)) | (1 << (MariaDBParser.LOAD_FILE - 923)) | (1 << (MariaDBParser.LOCATE - 923)) | (1 << (MariaDBParser.LOG - 923)) | (1 << (MariaDBParser.LOG10 - 923)) | (1 << (MariaDBParser.LOG2 - 923)) | (1 << (MariaDBParser.LOWER - 923)) | (1 << (MariaDBParser.LPAD - 923)) | (1 << (MariaDBParser.LTRIM - 923)) | (1 << (MariaDBParser.MAKEDATE - 923)) | (1 << (MariaDBParser.MAKETIME - 923)) | (1 << (MariaDBParser.MAKE_SET - 923)) | (1 << (MariaDBParser.MASTER_POS_WAIT - 923)) | (1 << (MariaDBParser.MBRCONTAINS - 923)) | (1 << (MariaDBParser.MBRDISJOINT - 923)))) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & ((1 << (MariaDBParser.MBREQUAL - 955)) | (1 << (MariaDBParser.MBRINTERSECTS - 955)) | (1 << (MariaDBParser.MBROVERLAPS - 955)) | (1 << (MariaDBParser.MBRTOUCHES - 955)) | (1 << (MariaDBParser.MBRWITHIN - 955)) | (1 << (MariaDBParser.MD5 - 955)) | (1 << (MariaDBParser.MLINEFROMTEXT - 955)) | (1 << (MariaDBParser.MLINEFROMWKB - 955)) | (1 << (MariaDBParser.MONTHNAME - 955)) | (1 << (MariaDBParser.MPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MPOLYFROMTEXT - 955)) | (1 << (MariaDBParser.MPOLYFROMWKB - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMTEXT - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMWKB - 955)) | (1 << (MariaDBParser.NAME_CONST - 955)) | (1 << (MariaDBParser.NULLIF - 955)) | (1 << (MariaDBParser.NUMGEOMETRIES - 955)) | (1 << (MariaDBParser.NUMINTERIORRINGS - 955)) | (1 << (MariaDBParser.NUMPOINTS - 955)) | (1 << (MariaDBParser.OCT - 955)) | (1 << (MariaDBParser.OCTET_LENGTH - 955)) | (1 << (MariaDBParser.ORD - 955)) | (1 << (MariaDBParser.OVERLAPS - 955)) | (1 << (MariaDBParser.PERIOD_ADD - 955)) | (1 << (MariaDBParser.PERIOD_DIFF - 955)) | (1 << (MariaDBParser.PI - 955)) | (1 << (MariaDBParser.POINTFROMTEXT - 955)))) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & ((1 << (MariaDBParser.POINTFROMWKB - 987)) | (1 << (MariaDBParser.POINTN - 987)) | (1 << (MariaDBParser.POLYFROMTEXT - 987)) | (1 << (MariaDBParser.POLYFROMWKB - 987)) | (1 << (MariaDBParser.POLYGONFROMTEXT - 987)) | (1 << (MariaDBParser.POLYGONFROMWKB - 987)) | (1 << (MariaDBParser.POW - 987)) | (1 << (MariaDBParser.POWER - 987)) | (1 << (MariaDBParser.QUOTE - 987)) | (1 << (MariaDBParser.RADIANS - 987)) | (1 << (MariaDBParser.RAND - 987)) | (1 << (MariaDBParser.RANDOM_BYTES - 987)) | (1 << (MariaDBParser.RELEASE_LOCK - 987)) | (1 << (MariaDBParser.REVERSE - 987)) | (1 << (MariaDBParser.ROUND - 987)) | (1 << (MariaDBParser.ROW_COUNT - 987)) | (1 << (MariaDBParser.RPAD - 987)) | (1 << (MariaDBParser.RTRIM - 987)) | (1 << (MariaDBParser.SEC_TO_TIME - 987)) | (1 << (MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE - 987)) | (1 << (MariaDBParser.SESSION_USER - 987)) | (1 << (MariaDBParser.SHA - 987)) | (1 << (MariaDBParser.SHA1 - 987)) | (1 << (MariaDBParser.SHA2 - 987)) | (1 << (MariaDBParser.SCHEMA_NAME - 987)) | (1 << (MariaDBParser.SIGN - 987)) | (1 << (MariaDBParser.SIN - 987)) | (1 << (MariaDBParser.SLEEP - 987)) | (1 << (MariaDBParser.SOUNDEX - 987)) | (1 << (MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS - 987)) | (1 << (MariaDBParser.SQRT - 987)) | (1 << (MariaDBParser.SRID - 987)))) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & ((1 << (MariaDBParser.STARTPOINT - 1019)) | (1 << (MariaDBParser.STRCMP - 1019)) | (1 << (MariaDBParser.STR_TO_DATE - 1019)) | (1 << (MariaDBParser.ST_AREA - 1019)) | (1 << (MariaDBParser.ST_ASBINARY - 1019)) | (1 << (MariaDBParser.ST_ASTEXT - 1019)) | (1 << (MariaDBParser.ST_ASWKB - 1019)) | (1 << (MariaDBParser.ST_ASWKT - 1019)) | (1 << (MariaDBParser.ST_BUFFER - 1019)) | (1 << (MariaDBParser.ST_CENTROID - 1019)) | (1 << (MariaDBParser.ST_CONTAINS - 1019)) | (1 << (MariaDBParser.ST_CROSSES - 1019)) | (1 << (MariaDBParser.ST_DIFFERENCE - 1019)) | (1 << (MariaDBParser.ST_DIMENSION - 1019)) | (1 << (MariaDBParser.ST_DISJOINT - 1019)) | (1 << (MariaDBParser.ST_DISTANCE - 1019)) | (1 << (MariaDBParser.ST_ENDPOINT - 1019)) | (1 << (MariaDBParser.ST_ENVELOPE - 1019)) | (1 << (MariaDBParser.ST_EQUALS - 1019)) | (1 << (MariaDBParser.ST_EXTERIORRING - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYN - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYTYPE - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMWKB - 1019)) | (1 << (MariaDBParser.ST_INTERIORRINGN - 1019)))) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & ((1 << (MariaDBParser.ST_INTERSECTION - 1051)) | (1 << (MariaDBParser.ST_INTERSECTS - 1051)) | (1 << (MariaDBParser.ST_ISCLOSED - 1051)) | (1 << (MariaDBParser.ST_ISEMPTY - 1051)) | (1 << (MariaDBParser.ST_ISSIMPLE - 1051)) | (1 << (MariaDBParser.ST_LINEFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINEFROMWKB - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMWKB - 1051)) | (1 << (MariaDBParser.ST_NUMGEOMETRIES - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRING - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRINGS - 1051)) | (1 << (MariaDBParser.ST_NUMPOINTS - 1051)) | (1 << (MariaDBParser.ST_OVERLAPS - 1051)) | (1 << (MariaDBParser.ST_POINTFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POINTFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POINTN - 1051)) | (1 << (MariaDBParser.ST_POLYFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMWKB - 1051)) | (1 << (MariaDBParser.ST_SRID - 1051)) | (1 << (MariaDBParser.ST_STARTPOINT - 1051)) | (1 << (MariaDBParser.ST_SYMDIFFERENCE - 1051)) | (1 << (MariaDBParser.ST_TOUCHES - 1051)) | (1 << (MariaDBParser.ST_UNION - 1051)) | (1 << (MariaDBParser.ST_WITHIN - 1051)) | (1 << (MariaDBParser.ST_X - 1051)) | (1 << (MariaDBParser.ST_Y - 1051)) | (1 << (MariaDBParser.SUBDATE - 1051)) | (1 << (MariaDBParser.SUBSTRING_INDEX - 1051)) | (1 << (MariaDBParser.SUBTIME - 1051)))) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & ((1 << (MariaDBParser.SYSTEM_USER - 1083)) | (1 << (MariaDBParser.TAN - 1083)) | (1 << (MariaDBParser.TIMEDIFF - 1083)) | (1 << (MariaDBParser.TIMESTAMPADD - 1083)) | (1 << (MariaDBParser.TIMESTAMPDIFF - 1083)) | (1 << (MariaDBParser.TIME_FORMAT - 1083)) | (1 << (MariaDBParser.TIME_TO_SEC - 1083)) | (1 << (MariaDBParser.TOUCHES - 1083)) | (1 << (MariaDBParser.TO_BASE64 - 1083)) | (1 << (MariaDBParser.TO_DAYS - 1083)) | (1 << (MariaDBParser.TO_SECONDS - 1083)) | (1 << (MariaDBParser.UCASE - 1083)) | (1 << (MariaDBParser.UNCOMPRESS - 1083)) | (1 << (MariaDBParser.UNCOMPRESSED_LENGTH - 1083)) | (1 << (MariaDBParser.UNHEX - 1083)) | (1 << (MariaDBParser.UNIX_TIMESTAMP - 1083)) | (1 << (MariaDBParser.UPDATEXML - 1083)) | (1 << (MariaDBParser.UPPER - 1083)) | (1 << (MariaDBParser.UUID - 1083)) | (1 << (MariaDBParser.UUID_SHORT - 1083)) | (1 << (MariaDBParser.VALIDATE_PASSWORD_STRENGTH - 1083)) | (1 << (MariaDBParser.VERSION - 1083)) | (1 << (MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1083)) | (1 << (MariaDBParser.WEEKDAY - 1083)) | (1 << (MariaDBParser.WEEKOFYEAR - 1083)) | (1 << (MariaDBParser.WEIGHT_STRING - 1083)) | (1 << (MariaDBParser.WITHIN - 1083)) | (1 << (MariaDBParser.YEARWEEK - 1083)) | (1 << (MariaDBParser.Y_FUNCTION - 1083)) | (1 << (MariaDBParser.X_FUNCTION - 1083)) | (1 << (MariaDBParser.VIA - 1083)) | (1 << (MariaDBParser.LASTVAL - 1083)))) !== 0) || ((((_la - 1115)) & ~0x1F) === 0 && ((1 << (_la - 1115)) & ((1 << (MariaDBParser.NEXTVAL - 1115)) | (1 << (MariaDBParser.SETVAL - 1115)) | (1 << (MariaDBParser.PREVIOUS - 1115)) | (1 << (MariaDBParser.PERSISTENT - 1115)) | (1 << (MariaDBParser.BINLOG_MONITOR - 1115)) | (1 << (MariaDBParser.BINLOG_REPLAY - 1115)) | (1 << (MariaDBParser.FEDERATED_ADMIN - 1115)) | (1 << (MariaDBParser.READ_ONLY_ADMIN - 1115)) | (1 << (MariaDBParser.REPLICA - 1115)) | (1 << (MariaDBParser.REPLICAS - 1115)) | (1 << (MariaDBParser.REPLICATION_MASTER_ADMIN - 1115)) | (1 << (MariaDBParser.MONITOR - 1115)) | (1 << (MariaDBParser.READ_ONLY - 1115)) | (1 << (MariaDBParser.REPLAY - 1115)) | (1 << (MariaDBParser.MOD - 1115)))) !== 0) || ((((_la - 1166)) & ~0x1F) === 0 && ((1 << (_la - 1166)) & ((1 << (MariaDBParser.CHARSET_REVERSE_QOUTE_STRING - 1166)) | (1 << (MariaDBParser.STRING_LITERAL - 1166)) | (1 << (MariaDBParser.ID - 1166)))) !== 0)) {
						{
						this.state = 1829;
						(_localctx as ForeignKeyTableConstraintContext)._name = this.uid();
						}
					}

					}
				}

				this.state = 1834;
				this.match(MariaDBParser.FOREIGN);
				this.state = 1835;
				this.match(MariaDBParser.KEY);
				this.state = 1837;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MariaDBParser.ATTRIBUTE) | (1 << MariaDBParser.BODY) | (1 << MariaDBParser.BUCKETS) | (1 << MariaDBParser.CONDITION))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (MariaDBParser.CURRENT - 36)) | (1 << (MariaDBParser.CURRENT_ROLE - 36)) | (1 << (MariaDBParser.CURRENT_USER - 36)) | (1 << (MariaDBParser.DATABASE - 36)) | (1 << (MariaDBParser.DEFAULT - 36)) | (1 << (MariaDBParser.DIAGNOSTICS - 36)) | (1 << (MariaDBParser.EMPTY - 36)) | (1 << (MariaDBParser.EXCEPT - 36)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (MariaDBParser.GROUP - 73)) | (1 << (MariaDBParser.IF - 73)) | (1 << (MariaDBParser.IGNORED - 73)) | (1 << (MariaDBParser.INSERT - 73)) | (1 << (MariaDBParser.LATERAL - 73)) | (1 << (MariaDBParser.LEFT - 73)) | (1 << (MariaDBParser.LOCKED - 73)))) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & ((1 << (MariaDBParser.MAXVALUE - 110)) | (1 << (MariaDBParser.MINVALUE - 110)) | (1 << (MariaDBParser.NUMBER - 110)) | (1 << (MariaDBParser.OPTIONAL - 110)) | (1 << (MariaDBParser.ORDER - 110)) | (1 << (MariaDBParser.PRIMARY - 110)) | (1 << (MariaDBParser.PACKAGE - 110)))) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (MariaDBParser.REPLACE - 142)) | (1 << (MariaDBParser.RIGHT - 142)) | (1 << (MariaDBParser.SCHEMA - 142)) | (1 << (MariaDBParser.SKIP_ - 142)) | (1 << (MariaDBParser.STACKED - 142)) | (1 << (MariaDBParser.STATEMENT - 142)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MariaDBParser.DATE - 217)) | (1 << (MariaDBParser.TIME - 217)) | (1 << (MariaDBParser.TIMESTAMP - 217)) | (1 << (MariaDBParser.DATETIME - 217)) | (1 << (MariaDBParser.YEAR - 217)) | (1 << (MariaDBParser.BINARY - 217)) | (1 << (MariaDBParser.TEXT - 217)) | (1 << (MariaDBParser.ENUM - 217)) | (1 << (MariaDBParser.SERIAL - 217)))) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & ((1 << (MariaDBParser.JSON_ARRAY - 251)) | (1 << (MariaDBParser.JSON_ARRAYAGG - 251)) | (1 << (MariaDBParser.JSON_ARRAY_APPEND - 251)) | (1 << (MariaDBParser.JSON_ARRAY_INSERT - 251)) | (1 << (MariaDBParser.JSON_CONTAINS - 251)) | (1 << (MariaDBParser.JSON_CONTAINS_PATH - 251)) | (1 << (MariaDBParser.JSON_DEPTH - 251)) | (1 << (MariaDBParser.JSON_EXTRACT - 251)) | (1 << (MariaDBParser.JSON_INSERT - 251)) | (1 << (MariaDBParser.JSON_KEYS - 251)) | (1 << (MariaDBParser.JSON_LENGTH - 251)) | (1 << (MariaDBParser.JSON_MERGE - 251)) | (1 << (MariaDBParser.JSON_MERGE_PATCH - 251)) | (1 << (MariaDBParser.JSON_MERGE_PRESERVE - 251)) | (1 << (MariaDBParser.JSON_OBJECT - 251)) | (1 << (MariaDBParser.JSON_OBJECTAGG - 251)) | (1 << (MariaDBParser.JSON_OVERLAPS - 251)) | (1 << (MariaDBParser.JSON_PRETTY - 251)) | (1 << (MariaDBParser.JSON_QUOTE - 251)) | (1 << (MariaDBParser.JSON_REMOVE - 251)) | (1 << (MariaDBParser.JSON_REPLACE - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALID - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT - 251)) | (1 << (MariaDBParser.JSON_SEARCH - 251)) | (1 << (MariaDBParser.JSON_SET - 251)) | (1 << (MariaDBParser.JSON_STORAGE_FREE - 251)) | (1 << (MariaDBParser.JSON_STORAGE_SIZE - 251)) | (1 << (MariaDBParser.JSON_TABLE - 251)) | (1 << (MariaDBParser.JSON_TYPE - 251)) | (1 << (MariaDBParser.JSON_UNQUOTE - 251)) | (1 << (MariaDBParser.JSON_VALID - 251)) | (1 << (MariaDBParser.JSON_VALUE - 251)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (MariaDBParser.NESTED - 283)) | (1 << (MariaDBParser.ORDINALITY - 283)) | (1 << (MariaDBParser.PATH - 283)) | (1 << (MariaDBParser.AVG - 283)) | (1 << (MariaDBParser.BIT_AND - 283)) | (1 << (MariaDBParser.BIT_OR - 283)) | (1 << (MariaDBParser.BIT_XOR - 283)) | (1 << (MariaDBParser.COUNT - 283)) | (1 << (MariaDBParser.CUME_DIST - 283)) | (1 << (MariaDBParser.DENSE_RANK - 283)) | (1 << (MariaDBParser.FIRST_VALUE - 283)) | (1 << (MariaDBParser.GROUP_CONCAT - 283)) | (1 << (MariaDBParser.LAG - 283)) | (1 << (MariaDBParser.LAST_VALUE - 283)) | (1 << (MariaDBParser.LEAD - 283)) | (1 << (MariaDBParser.MAX - 283)) | (1 << (MariaDBParser.MIN - 283)) | (1 << (MariaDBParser.NTILE - 283)) | (1 << (MariaDBParser.NTH_VALUE - 283)) | (1 << (MariaDBParser.PERCENT_RANK - 283)) | (1 << (MariaDBParser.RANK - 283)) | (1 << (MariaDBParser.ROW_NUMBER - 283)) | (1 << (MariaDBParser.STD - 283)) | (1 << (MariaDBParser.STDDEV - 283)) | (1 << (MariaDBParser.STDDEV_POP - 283)) | (1 << (MariaDBParser.STDDEV_SAMP - 283)) | (1 << (MariaDBParser.SUM - 283)) | (1 << (MariaDBParser.VAR_POP - 283)) | (1 << (MariaDBParser.VAR_SAMP - 283)) | (1 << (MariaDBParser.VARIANCE - 283)) | (1 << (MariaDBParser.CURRENT_DATE - 283)) | (1 << (MariaDBParser.CURRENT_TIME - 283)))) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & ((1 << (MariaDBParser.CURRENT_TIMESTAMP - 315)) | (1 << (MariaDBParser.LOCALTIME - 315)) | (1 << (MariaDBParser.CURDATE - 315)) | (1 << (MariaDBParser.CURTIME - 315)) | (1 << (MariaDBParser.DATE_ADD - 315)) | (1 << (MariaDBParser.DATE_SUB - 315)) | (1 << (MariaDBParser.LOCALTIMESTAMP - 315)) | (1 << (MariaDBParser.NOW - 315)) | (1 << (MariaDBParser.POSITION - 315)) | (1 << (MariaDBParser.SUBSTR - 315)) | (1 << (MariaDBParser.SUBSTRING - 315)) | (1 << (MariaDBParser.SYSDATE - 315)) | (1 << (MariaDBParser.TRIM - 315)) | (1 << (MariaDBParser.UTC_DATE - 315)) | (1 << (MariaDBParser.UTC_TIME - 315)) | (1 << (MariaDBParser.UTC_TIMESTAMP - 315)) | (1 << (MariaDBParser.ACCOUNT - 315)) | (1 << (MariaDBParser.ACTION - 315)) | (1 << (MariaDBParser.AFTER - 315)) | (1 << (MariaDBParser.AGGREGATE - 315)) | (1 << (MariaDBParser.ALGORITHM - 315)) | (1 << (MariaDBParser.ANY - 315)) | (1 << (MariaDBParser.AT - 315)) | (1 << (MariaDBParser.AUTHORS - 315)) | (1 << (MariaDBParser.AUTOCOMMIT - 315)) | (1 << (MariaDBParser.AUTOEXTEND_SIZE - 315)) | (1 << (MariaDBParser.AUTO_INCREMENT - 315)) | (1 << (MariaDBParser.AVG_ROW_LENGTH - 315)) | (1 << (MariaDBParser.BEGIN - 315)) | (1 << (MariaDBParser.BINLOG - 315)) | (1 << (MariaDBParser.BIT - 315)))) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & ((1 << (MariaDBParser.BLOCK - 347)) | (1 << (MariaDBParser.BOOL - 347)) | (1 << (MariaDBParser.BOOLEAN - 347)) | (1 << (MariaDBParser.BTREE - 347)) | (1 << (MariaDBParser.CACHE - 347)) | (1 << (MariaDBParser.CASCADED - 347)) | (1 << (MariaDBParser.CHAIN - 347)) | (1 << (MariaDBParser.CHANGED - 347)) | (1 << (MariaDBParser.CHANNEL - 347)) | (1 << (MariaDBParser.CHECKSUM - 347)) | (1 << (MariaDBParser.PAGE_CHECKSUM - 347)) | (1 << (MariaDBParser.CIPHER - 347)) | (1 << (MariaDBParser.CLASS_ORIGIN - 347)) | (1 << (MariaDBParser.CLIENT - 347)) | (1 << (MariaDBParser.CLOSE - 347)) | (1 << (MariaDBParser.CLUSTERING - 347)) | (1 << (MariaDBParser.COALESCE - 347)) | (1 << (MariaDBParser.CODE - 347)) | (1 << (MariaDBParser.COLUMNS - 347)) | (1 << (MariaDBParser.COLUMN_FORMAT - 347)) | (1 << (MariaDBParser.COLUMN_NAME - 347)) | (1 << (MariaDBParser.COMMENT - 347)) | (1 << (MariaDBParser.COMMIT - 347)) | (1 << (MariaDBParser.COMPACT - 347)) | (1 << (MariaDBParser.COMPLETION - 347)) | (1 << (MariaDBParser.COMPRESSED - 347)) | (1 << (MariaDBParser.COMPRESSION - 347)) | (1 << (MariaDBParser.CONCURRENT - 347)) | (1 << (MariaDBParser.CONNECT - 347)) | (1 << (MariaDBParser.CONNECTION - 347)) | (1 << (MariaDBParser.CONSISTENT - 347)) | (1 << (MariaDBParser.CONSTRAINT_CATALOG - 347)))) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & ((1 << (MariaDBParser.CONSTRAINT_SCHEMA - 379)) | (1 << (MariaDBParser.CONSTRAINT_NAME - 379)) | (1 << (MariaDBParser.CONTAINS - 379)) | (1 << (MariaDBParser.CONTEXT - 379)) | (1 << (MariaDBParser.CONTRIBUTORS - 379)) | (1 << (MariaDBParser.COPY - 379)) | (1 << (MariaDBParser.CPU - 379)) | (1 << (MariaDBParser.CYCLE - 379)) | (1 << (MariaDBParser.CURSOR_NAME - 379)) | (1 << (MariaDBParser.DATA - 379)) | (1 << (MariaDBParser.DATAFILE - 379)) | (1 << (MariaDBParser.DEALLOCATE - 379)) | (1 << (MariaDBParser.DEFAULT_AUTH - 379)) | (1 << (MariaDBParser.DEFINER - 379)) | (1 << (MariaDBParser.DELAY_KEY_WRITE - 379)) | (1 << (MariaDBParser.DES_KEY_FILE - 379)) | (1 << (MariaDBParser.DIRECTORY - 379)) | (1 << (MariaDBParser.DISABLE - 379)) | (1 << (MariaDBParser.DISCARD - 379)) | (1 << (MariaDBParser.DISK - 379)) | (1 << (MariaDBParser.DO - 379)) | (1 << (MariaDBParser.DUMPFILE - 379)) | (1 << (MariaDBParser.DUPLICATE - 379)) | (1 << (MariaDBParser.DYNAMIC - 379)) | (1 << (MariaDBParser.ENABLE - 379)) | (1 << (MariaDBParser.ENCRYPTED - 379)) | (1 << (MariaDBParser.ENCRYPTION - 379)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ID - 379)) | (1 << (MariaDBParser.END - 379)) | (1 << (MariaDBParser.ENDS - 379)) | (1 << (MariaDBParser.ENGINE - 379)) | (1 << (MariaDBParser.ENGINES - 379)))) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & ((1 << (MariaDBParser.ERROR - 411)) | (1 << (MariaDBParser.ERRORS - 411)) | (1 << (MariaDBParser.ESCAPE - 411)) | (1 << (MariaDBParser.EVEN - 411)) | (1 << (MariaDBParser.EVENT - 411)) | (1 << (MariaDBParser.EVENTS - 411)) | (1 << (MariaDBParser.EVERY - 411)) | (1 << (MariaDBParser.EXCHANGE - 411)) | (1 << (MariaDBParser.EXCLUSIVE - 411)) | (1 << (MariaDBParser.EXPIRE - 411)) | (1 << (MariaDBParser.EXPORT - 411)) | (1 << (MariaDBParser.EXTENDED - 411)) | (1 << (MariaDBParser.EXTENT_SIZE - 411)) | (1 << (MariaDBParser.FAILED_LOGIN_ATTEMPTS - 411)) | (1 << (MariaDBParser.FAST - 411)) | (1 << (MariaDBParser.FAULTS - 411)) | (1 << (MariaDBParser.FIELDS - 411)) | (1 << (MariaDBParser.FILE_BLOCK_SIZE - 411)) | (1 << (MariaDBParser.FILTER - 411)) | (1 << (MariaDBParser.FIRST - 411)) | (1 << (MariaDBParser.FIXED - 411)) | (1 << (MariaDBParser.FLUSH - 411)) | (1 << (MariaDBParser.FOLLOWS - 411)) | (1 << (MariaDBParser.FOUND - 411)) | (1 << (MariaDBParser.FULL - 411)) | (1 << (MariaDBParser.FUNCTION - 411)) | (1 << (MariaDBParser.GENERAL - 411)) | (1 << (MariaDBParser.GLOBAL - 411)) | (1 << (MariaDBParser.GRANTS - 411)) | (1 << (MariaDBParser.GROUP_REPLICATION - 411)) | (1 << (MariaDBParser.HANDLER - 411)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (MariaDBParser.HASH - 443)) | (1 << (MariaDBParser.HELP - 443)) | (1 << (MariaDBParser.HISTORY - 443)) | (1 << (MariaDBParser.HOST - 443)) | (1 << (MariaDBParser.HOSTS - 443)) | (1 << (MariaDBParser.IDENTIFIED - 443)) | (1 << (MariaDBParser.IGNORE_SERVER_IDS - 443)) | (1 << (MariaDBParser.IMPORT - 443)) | (1 << (MariaDBParser.INCREMENT - 443)) | (1 << (MariaDBParser.INDEXES - 443)) | (1 << (MariaDBParser.INITIAL_SIZE - 443)) | (1 << (MariaDBParser.INPLACE - 443)) | (1 << (MariaDBParser.INSERT_METHOD - 443)) | (1 << (MariaDBParser.INSTALL - 443)) | (1 << (MariaDBParser.INSTANCE - 443)) | (1 << (MariaDBParser.INSTANT - 443)) | (1 << (MariaDBParser.INVISIBLE - 443)) | (1 << (MariaDBParser.INVOKER - 443)) | (1 << (MariaDBParser.IO - 443)) | (1 << (MariaDBParser.IO_THREAD - 443)) | (1 << (MariaDBParser.IPC - 443)) | (1 << (MariaDBParser.ISOLATION - 443)) | (1 << (MariaDBParser.ISSUER - 443)) | (1 << (MariaDBParser.JSON - 443)) | (1 << (MariaDBParser.KEY_BLOCK_SIZE - 443)) | (1 << (MariaDBParser.LANGUAGE - 443)) | (1 << (MariaDBParser.LAST - 443)) | (1 << (MariaDBParser.LEAVES - 443)) | (1 << (MariaDBParser.LESS - 443)) | (1 << (MariaDBParser.LEVEL - 443)) | (1 << (MariaDBParser.LIST - 443)) | (1 << (MariaDBParser.LOCAL - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (MariaDBParser.LOCALES - 475)) | (1 << (MariaDBParser.LOGFILE - 475)) | (1 << (MariaDBParser.LOGS - 475)) | (1 << (MariaDBParser.MASTER - 475)) | (1 << (MariaDBParser.MASTER_AUTO_POSITION - 475)) | (1 << (MariaDBParser.MASTER_CONNECT_RETRY - 475)) | (1 << (MariaDBParser.MASTER_DELAY - 475)) | (1 << (MariaDBParser.MASTER_HEARTBEAT_PERIOD - 475)) | (1 << (MariaDBParser.MASTER_HOST - 475)) | (1 << (MariaDBParser.MASTER_LOG_FILE - 475)) | (1 << (MariaDBParser.MASTER_LOG_POS - 475)) | (1 << (MariaDBParser.MASTER_PASSWORD - 475)) | (1 << (MariaDBParser.MASTER_PORT - 475)) | (1 << (MariaDBParser.MASTER_RETRY_COUNT - 475)) | (1 << (MariaDBParser.MASTER_SSL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CA - 475)) | (1 << (MariaDBParser.MASTER_SSL_CAPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_CERT - 475)) | (1 << (MariaDBParser.MASTER_SSL_CIPHER - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRLPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_KEY - 475)) | (1 << (MariaDBParser.MASTER_TLS_VERSION - 475)) | (1 << (MariaDBParser.MASTER_USER - 475)) | (1 << (MariaDBParser.MAX_CONNECTIONS_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_QUERIES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_ROWS - 475)) | (1 << (MariaDBParser.MAX_SIZE - 475)) | (1 << (MariaDBParser.MAX_UPDATES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_USER_CONNECTIONS - 475)) | (1 << (MariaDBParser.MEDIUM - 475)) | (1 << (MariaDBParser.MEMBER - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (MariaDBParser.MERGE - 507)) | (1 << (MariaDBParser.MESSAGE_TEXT - 507)) | (1 << (MariaDBParser.MID - 507)) | (1 << (MariaDBParser.MIGRATE - 507)) | (1 << (MariaDBParser.MIN_ROWS - 507)) | (1 << (MariaDBParser.MODE - 507)) | (1 << (MariaDBParser.MODIFY - 507)) | (1 << (MariaDBParser.MUTEX - 507)) | (1 << (MariaDBParser.MYSQL - 507)) | (1 << (MariaDBParser.MYSQL_ERRNO - 507)) | (1 << (MariaDBParser.NAME - 507)) | (1 << (MariaDBParser.NAMES - 507)) | (1 << (MariaDBParser.NCHAR - 507)) | (1 << (MariaDBParser.NEVER - 507)) | (1 << (MariaDBParser.NEXT - 507)) | (1 << (MariaDBParser.NO - 507)) | (1 << (MariaDBParser.NOCACHE - 507)) | (1 << (MariaDBParser.NOCOPY - 507)) | (1 << (MariaDBParser.NOCYCLE - 507)) | (1 << (MariaDBParser.NOMAXVALUE - 507)) | (1 << (MariaDBParser.NOMINVALUE - 507)) | (1 << (MariaDBParser.NOWAIT - 507)) | (1 << (MariaDBParser.NODEGROUP - 507)) | (1 << (MariaDBParser.NONE - 507)) | (1 << (MariaDBParser.ODBC - 507)) | (1 << (MariaDBParser.OFFLINE - 507)) | (1 << (MariaDBParser.OFFSET - 507)) | (1 << (MariaDBParser.OF - 507)) | (1 << (MariaDBParser.OJ - 507)) | (1 << (MariaDBParser.OLD_PASSWORD - 507)) | (1 << (MariaDBParser.ONE - 507)) | (1 << (MariaDBParser.ONLINE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (MariaDBParser.ONLY - 539)) | (1 << (MariaDBParser.OPEN - 539)) | (1 << (MariaDBParser.OPTIMIZER_COSTS - 539)) | (1 << (MariaDBParser.OPTIONS - 539)) | (1 << (MariaDBParser.OWNER - 539)) | (1 << (MariaDBParser.PACK_KEYS - 539)) | (1 << (MariaDBParser.PAGE - 539)) | (1 << (MariaDBParser.PARSER - 539)) | (1 << (MariaDBParser.PARTIAL - 539)) | (1 << (MariaDBParser.PARTITIONING - 539)) | (1 << (MariaDBParser.PARTITIONS - 539)) | (1 << (MariaDBParser.PASSWORD - 539)) | (1 << (MariaDBParser.PASSWORD_LOCK_TIME - 539)) | (1 << (MariaDBParser.PHASE - 539)) | (1 << (MariaDBParser.PLUGIN - 539)) | (1 << (MariaDBParser.PLUGIN_DIR - 539)) | (1 << (MariaDBParser.PLUGINS - 539)) | (1 << (MariaDBParser.PORT - 539)) | (1 << (MariaDBParser.PRECEDES - 539)) | (1 << (MariaDBParser.PREPARE - 539)) | (1 << (MariaDBParser.PRESERVE - 539)) | (1 << (MariaDBParser.PREV - 539)) | (1 << (MariaDBParser.PROCESSLIST - 539)) | (1 << (MariaDBParser.PROFILE - 539)) | (1 << (MariaDBParser.PROFILES - 539)) | (1 << (MariaDBParser.PROXY - 539)) | (1 << (MariaDBParser.QUERY - 539)) | (1 << (MariaDBParser.QUERY_RESPONSE_TIME - 539)) | (1 << (MariaDBParser.QUICK - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (MariaDBParser.REBUILD - 571)) | (1 << (MariaDBParser.RECOVER - 571)) | (1 << (MariaDBParser.RECURSIVE - 571)) | (1 << (MariaDBParser.REDO_BUFFER_SIZE - 571)) | (1 << (MariaDBParser.REDUNDANT - 571)) | (1 << (MariaDBParser.RELAY - 571)) | (1 << (MariaDBParser.RELAY_LOG_FILE - 571)) | (1 << (MariaDBParser.RELAY_LOG_POS - 571)) | (1 << (MariaDBParser.RELAYLOG - 571)) | (1 << (MariaDBParser.REMOVE - 571)) | (1 << (MariaDBParser.REORGANIZE - 571)) | (1 << (MariaDBParser.REPAIR - 571)) | (1 << (MariaDBParser.REPLICATE_DO_DB - 571)) | (1 << (MariaDBParser.REPLICATE_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_REWRITE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATION - 571)) | (1 << (MariaDBParser.RESET - 571)) | (1 << (MariaDBParser.RESTART - 571)) | (1 << (MariaDBParser.RESUME - 571)) | (1 << (MariaDBParser.RETURNED_SQLSTATE - 571)) | (1 << (MariaDBParser.RETURNS - 571)) | (1 << (MariaDBParser.REUSE - 571)) | (1 << (MariaDBParser.ROLE - 571)) | (1 << (MariaDBParser.ROLLBACK - 571)) | (1 << (MariaDBParser.ROLLUP - 571)) | (1 << (MariaDBParser.ROTATE - 571)) | (1 << (MariaDBParser.ROW - 571)))) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & ((1 << (MariaDBParser.ROWS - 603)) | (1 << (MariaDBParser.ROW_FORMAT - 603)) | (1 << (MariaDBParser.RTREE - 603)) | (1 << (MariaDBParser.SAVEPOINT - 603)) | (1 << (MariaDBParser.SCHEDULE - 603)) | (1 << (MariaDBParser.SECURITY - 603)) | (1 << (MariaDBParser.SEQUENCE - 603)) | (1 << (MariaDBParser.SERVER - 603)) | (1 << (MariaDBParser.SESSION - 603)) | (1 << (MariaDBParser.SHARE - 603)) | (1 << (MariaDBParser.SHARED - 603)) | (1 << (MariaDBParser.SIGNED - 603)) | (1 << (MariaDBParser.SIMPLE - 603)) | (1 << (MariaDBParser.SLAVE - 603)) | (1 << (MariaDBParser.SLAVES - 603)) | (1 << (MariaDBParser.SLOW - 603)) | (1 << (MariaDBParser.SNAPSHOT - 603)) | (1 << (MariaDBParser.SOCKET - 603)) | (1 << (MariaDBParser.SOME - 603)) | (1 << (MariaDBParser.SONAME - 603)) | (1 << (MariaDBParser.SOUNDS - 603)) | (1 << (MariaDBParser.SOURCE - 603)) | (1 << (MariaDBParser.SQL_AFTER_GTIDS - 603)) | (1 << (MariaDBParser.SQL_AFTER_MTS_GAPS - 603)) | (1 << (MariaDBParser.SQL_BEFORE_GTIDS - 603)) | (1 << (MariaDBParser.SQL_BUFFER_RESULT - 603)) | (1 << (MariaDBParser.SQL_CACHE - 603)) | (1 << (MariaDBParser.SQL_NO_CACHE - 603)) | (1 << (MariaDBParser.SQL_THREAD - 603)) | (1 << (MariaDBParser.START - 603)) | (1 << (MariaDBParser.STARTS - 603)) | (1 << (MariaDBParser.STATS_AUTO_RECALC - 603)))) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & ((1 << (MariaDBParser.STATS_PERSISTENT - 635)) | (1 << (MariaDBParser.STATS_SAMPLE_PAGES - 635)) | (1 << (MariaDBParser.STATUS - 635)) | (1 << (MariaDBParser.STOP - 635)) | (1 << (MariaDBParser.STORAGE - 635)) | (1 << (MariaDBParser.STRING - 635)) | (1 << (MariaDBParser.SUBCLASS_ORIGIN - 635)) | (1 << (MariaDBParser.SUBJECT - 635)) | (1 << (MariaDBParser.SUBPARTITION - 635)) | (1 << (MariaDBParser.SUBPARTITIONS - 635)) | (1 << (MariaDBParser.SUSPEND - 635)) | (1 << (MariaDBParser.SWAPS - 635)) | (1 << (MariaDBParser.SWITCHES - 635)) | (1 << (MariaDBParser.TABLE_NAME - 635)) | (1 << (MariaDBParser.TABLESPACE - 635)) | (1 << (MariaDBParser.TABLE_TYPE - 635)) | (1 << (MariaDBParser.TEMPORARY - 635)) | (1 << (MariaDBParser.TEMPTABLE - 635)) | (1 << (MariaDBParser.THAN - 635)) | (1 << (MariaDBParser.TRADITIONAL - 635)) | (1 << (MariaDBParser.TRANSACTION - 635)) | (1 << (MariaDBParser.TRANSACTIONAL - 635)) | (1 << (MariaDBParser.TRIGGERS - 635)) | (1 << (MariaDBParser.TRUNCATE - 635)) | (1 << (MariaDBParser.TYPES - 635)) | (1 << (MariaDBParser.UNBOUNDED - 635)) | (1 << (MariaDBParser.UNDEFINED - 635)) | (1 << (MariaDBParser.UNDOFILE - 635)) | (1 << (MariaDBParser.UNDO_BUFFER_SIZE - 635)) | (1 << (MariaDBParser.UNINSTALL - 635)) | (1 << (MariaDBParser.UNKNOWN - 635)))) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & ((1 << (MariaDBParser.UNTIL - 667)) | (1 << (MariaDBParser.UPGRADE - 667)) | (1 << (MariaDBParser.USER - 667)) | (1 << (MariaDBParser.USE_FRM - 667)) | (1 << (MariaDBParser.USER_RESOURCES - 667)) | (1 << (MariaDBParser.VALIDATION - 667)) | (1 << (MariaDBParser.VALUE - 667)) | (1 << (MariaDBParser.VARIABLES - 667)) | (1 << (MariaDBParser.VIEW - 667)) | (1 << (MariaDBParser.VIRTUAL - 667)) | (1 << (MariaDBParser.VISIBLE - 667)) | (1 << (MariaDBParser.WAIT - 667)) | (1 << (MariaDBParser.WARNINGS - 667)) | (1 << (MariaDBParser.WITHOUT - 667)) | (1 << (MariaDBParser.WORK - 667)) | (1 << (MariaDBParser.WRAPPER - 667)) | (1 << (MariaDBParser.WSREP_MEMBERSHIP - 667)) | (1 << (MariaDBParser.WSREP_STATUS - 667)) | (1 << (MariaDBParser.X509 - 667)) | (1 << (MariaDBParser.XA - 667)) | (1 << (MariaDBParser.XML - 667)) | (1 << (MariaDBParser.EUR - 667)) | (1 << (MariaDBParser.USA - 667)) | (1 << (MariaDBParser.JIS - 667)) | (1 << (MariaDBParser.ISO - 667)) | (1 << (MariaDBParser.INTERNAL - 667)) | (1 << (MariaDBParser.QUARTER - 667)) | (1 << (MariaDBParser.MONTH - 667)) | (1 << (MariaDBParser.DAY - 667)) | (1 << (MariaDBParser.HOUR - 667)))) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & ((1 << (MariaDBParser.MINUTE - 699)) | (1 << (MariaDBParser.WEEK - 699)) | (1 << (MariaDBParser.SECOND - 699)) | (1 << (MariaDBParser.MICROSECOND - 699)) | (1 << (MariaDBParser.USER_STATISTICS - 699)) | (1 << (MariaDBParser.CLIENT_STATISTICS - 699)) | (1 << (MariaDBParser.INDEX_STATISTICS - 699)) | (1 << (MariaDBParser.TABLE_STATISTICS - 699)) | (1 << (MariaDBParser.ADMIN - 699)) | (1 << (MariaDBParser.AUDIT_ADMIN - 699)) | (1 << (MariaDBParser.BACKUP_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ENCRYPTION_ADMIN - 699)) | (1 << (MariaDBParser.CLONE_ADMIN - 699)) | (1 << (MariaDBParser.CONNECTION_ADMIN - 699)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ADMIN - 699)) | (1 << (MariaDBParser.EXECUTE - 699)) | (1 << (MariaDBParser.FILE - 699)) | (1 << (MariaDBParser.FIREWALL_ADMIN - 699)) | (1 << (MariaDBParser.FIREWALL_USER - 699)) | (1 << (MariaDBParser.GROUP_REPLICATION_ADMIN - 699)) | (1 << (MariaDBParser.INNODB_REDO_LOG_ARCHIVE - 699)) | (1 << (MariaDBParser.INVOKE - 699)) | (1 << (MariaDBParser.LAMBDA - 699)) | (1 << (MariaDBParser.NDB_STORED_USER - 699)) | (1 << (MariaDBParser.PASSWORDLESS_USER_ADMIN - 699)))) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & ((1 << (MariaDBParser.PERSIST_RO_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.PRIVILEGES - 731)) | (1 << (MariaDBParser.PROCESS - 731)) | (1 << (MariaDBParser.RELOAD - 731)) | (1 << (MariaDBParser.REPLICATION_APPLIER - 731)) | (1 << (MariaDBParser.REPLICATION_SLAVE_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_USER - 731)) | (1 << (MariaDBParser.ROLE_ADMIN - 731)) | (1 << (MariaDBParser.ROUTINE - 731)) | (1 << (MariaDBParser.S3 - 731)) | (1 << (MariaDBParser.SESSION_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.SET_USER_ID - 731)) | (1 << (MariaDBParser.SHOW_ROUTINE - 731)) | (1 << (MariaDBParser.SHUTDOWN - 731)) | (1 << (MariaDBParser.SUPER - 731)) | (1 << (MariaDBParser.SYSTEM_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.TABLES - 731)) | (1 << (MariaDBParser.TABLE_ENCRYPTION_ADMIN - 731)) | (1 << (MariaDBParser.VERSION_TOKEN_ADMIN - 731)) | (1 << (MariaDBParser.XA_RECOVER_ADMIN - 731)) | (1 << (MariaDBParser.ARMSCII8 - 731)) | (1 << (MariaDBParser.ASCII - 731)) | (1 << (MariaDBParser.BIG5 - 731)) | (1 << (MariaDBParser.CP1250 - 731)) | (1 << (MariaDBParser.CP1251 - 731)) | (1 << (MariaDBParser.CP1256 - 731)) | (1 << (MariaDBParser.CP1257 - 731)) | (1 << (MariaDBParser.CP850 - 731)) | (1 << (MariaDBParser.CP852 - 731)) | (1 << (MariaDBParser.CP866 - 731)))) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & ((1 << (MariaDBParser.CP932 - 763)) | (1 << (MariaDBParser.DEC8 - 763)) | (1 << (MariaDBParser.EUCJPMS - 763)) | (1 << (MariaDBParser.EUCKR - 763)) | (1 << (MariaDBParser.GB18030 - 763)) | (1 << (MariaDBParser.GB2312 - 763)) | (1 << (MariaDBParser.GBK - 763)) | (1 << (MariaDBParser.GEOSTD8 - 763)) | (1 << (MariaDBParser.GREEK - 763)) | (1 << (MariaDBParser.HEBREW - 763)) | (1 << (MariaDBParser.HP8 - 763)) | (1 << (MariaDBParser.KEYBCS2 - 763)) | (1 << (MariaDBParser.KOI8R - 763)) | (1 << (MariaDBParser.KOI8U - 763)) | (1 << (MariaDBParser.LATIN1 - 763)) | (1 << (MariaDBParser.LATIN2 - 763)) | (1 << (MariaDBParser.LATIN5 - 763)) | (1 << (MariaDBParser.LATIN7 - 763)) | (1 << (MariaDBParser.MACCE - 763)) | (1 << (MariaDBParser.MACROMAN - 763)) | (1 << (MariaDBParser.SJIS - 763)) | (1 << (MariaDBParser.SWE7 - 763)) | (1 << (MariaDBParser.TIS620 - 763)) | (1 << (MariaDBParser.UCS2 - 763)) | (1 << (MariaDBParser.UJIS - 763)) | (1 << (MariaDBParser.UTF16 - 763)) | (1 << (MariaDBParser.UTF16LE - 763)) | (1 << (MariaDBParser.UTF32 - 763)) | (1 << (MariaDBParser.UTF8 - 763)) | (1 << (MariaDBParser.UTF8MB3 - 763)) | (1 << (MariaDBParser.UTF8MB4 - 763)) | (1 << (MariaDBParser.ARCHIVE - 763)))) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & ((1 << (MariaDBParser.BLACKHOLE - 795)) | (1 << (MariaDBParser.CSV - 795)) | (1 << (MariaDBParser.FEDERATED - 795)) | (1 << (MariaDBParser.INNODB - 795)) | (1 << (MariaDBParser.MEMORY - 795)) | (1 << (MariaDBParser.MRG_MYISAM - 795)) | (1 << (MariaDBParser.MYISAM - 795)) | (1 << (MariaDBParser.NDB - 795)) | (1 << (MariaDBParser.NDBCLUSTER - 795)) | (1 << (MariaDBParser.PERFORMANCE_SCHEMA - 795)) | (1 << (MariaDBParser.TOKUDB - 795)) | (1 << (MariaDBParser.REPEATABLE - 795)) | (1 << (MariaDBParser.COMMITTED - 795)) | (1 << (MariaDBParser.UNCOMMITTED - 795)) | (1 << (MariaDBParser.SERIALIZABLE - 795)) | (1 << (MariaDBParser.GEOMETRYCOLLECTION - 795)) | (1 << (MariaDBParser.LINESTRING - 795)) | (1 << (MariaDBParser.MULTILINESTRING - 795)) | (1 << (MariaDBParser.MULTIPOINT - 795)) | (1 << (MariaDBParser.MULTIPOLYGON - 795)) | (1 << (MariaDBParser.POINT - 795)) | (1 << (MariaDBParser.POLYGON - 795)) | (1 << (MariaDBParser.ABS - 795)) | (1 << (MariaDBParser.ACOS - 795)) | (1 << (MariaDBParser.ADDDATE - 795)) | (1 << (MariaDBParser.ADDTIME - 795)) | (1 << (MariaDBParser.AES_DECRYPT - 795)) | (1 << (MariaDBParser.AES_ENCRYPT - 795)) | (1 << (MariaDBParser.AREA - 795)) | (1 << (MariaDBParser.ASBINARY - 795)))) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & ((1 << (MariaDBParser.ASIN - 827)) | (1 << (MariaDBParser.ASTEXT - 827)) | (1 << (MariaDBParser.ASWKB - 827)) | (1 << (MariaDBParser.ASWKT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DECRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DERIVE - 827)) | (1 << (MariaDBParser.ASYMMETRIC_ENCRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_SIGN - 827)) | (1 << (MariaDBParser.ASYMMETRIC_VERIFY - 827)) | (1 << (MariaDBParser.ATAN - 827)) | (1 << (MariaDBParser.ATAN2 - 827)) | (1 << (MariaDBParser.BENCHMARK - 827)) | (1 << (MariaDBParser.BIN - 827)) | (1 << (MariaDBParser.BIT_COUNT - 827)) | (1 << (MariaDBParser.BIT_LENGTH - 827)) | (1 << (MariaDBParser.BUFFER - 827)) | (1 << (MariaDBParser.CATALOG_NAME - 827)) | (1 << (MariaDBParser.CEIL - 827)) | (1 << (MariaDBParser.CEILING - 827)) | (1 << (MariaDBParser.CENTROID - 827)) | (1 << (MariaDBParser.CHARACTER_LENGTH - 827)) | (1 << (MariaDBParser.CHARSET - 827)) | (1 << (MariaDBParser.CHAR_LENGTH - 827)) | (1 << (MariaDBParser.COERCIBILITY - 827)) | (1 << (MariaDBParser.COLLATION - 827)) | (1 << (MariaDBParser.COMPRESS - 827)) | (1 << (MariaDBParser.CONCAT - 827)) | (1 << (MariaDBParser.CONCAT_WS - 827)) | (1 << (MariaDBParser.CONNECTION_ID - 827)) | (1 << (MariaDBParser.CONV - 827)) | (1 << (MariaDBParser.CONVERT_TZ - 827)) | (1 << (MariaDBParser.COS - 827)))) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & ((1 << (MariaDBParser.COT - 859)) | (1 << (MariaDBParser.CRC32 - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY - 859)) | (1 << (MariaDBParser.CREATE_DH_PARAMETERS - 859)) | (1 << (MariaDBParser.CREATE_DIGEST - 859)) | (1 << (MariaDBParser.CROSSES - 859)) | (1 << (MariaDBParser.DATEDIFF - 859)) | (1 << (MariaDBParser.DATE_FORMAT - 859)) | (1 << (MariaDBParser.DAYNAME - 859)) | (1 << (MariaDBParser.DAYOFMONTH - 859)) | (1 << (MariaDBParser.DAYOFWEEK - 859)) | (1 << (MariaDBParser.DAYOFYEAR - 859)) | (1 << (MariaDBParser.DECODE - 859)) | (1 << (MariaDBParser.DEGREES - 859)) | (1 << (MariaDBParser.DES_DECRYPT - 859)) | (1 << (MariaDBParser.DES_ENCRYPT - 859)) | (1 << (MariaDBParser.DIMENSION - 859)) | (1 << (MariaDBParser.DISJOINT - 859)) | (1 << (MariaDBParser.ELT - 859)) | (1 << (MariaDBParser.ENCODE - 859)) | (1 << (MariaDBParser.ENCRYPT - 859)) | (1 << (MariaDBParser.ENDPOINT - 859)) | (1 << (MariaDBParser.ENGINE_ATTRIBUTE - 859)) | (1 << (MariaDBParser.ENVELOPE - 859)) | (1 << (MariaDBParser.EQUALS - 859)) | (1 << (MariaDBParser.EXP - 859)) | (1 << (MariaDBParser.EXPORT_SET - 859)) | (1 << (MariaDBParser.EXTERIORRING - 859)) | (1 << (MariaDBParser.EXTRACTVALUE - 859)) | (1 << (MariaDBParser.FIELD - 859)) | (1 << (MariaDBParser.FIND_IN_SET - 859)))) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & ((1 << (MariaDBParser.FLOOR - 891)) | (1 << (MariaDBParser.FORMAT - 891)) | (1 << (MariaDBParser.FOUND_ROWS - 891)) | (1 << (MariaDBParser.FROM_BASE64 - 891)) | (1 << (MariaDBParser.FROM_DAYS - 891)) | (1 << (MariaDBParser.FROM_UNIXTIME - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYN - 891)) | (1 << (MariaDBParser.GEOMETRYTYPE - 891)) | (1 << (MariaDBParser.GEOMFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMFROMWKB - 891)) | (1 << (MariaDBParser.GET_FORMAT - 891)) | (1 << (MariaDBParser.GET_LOCK - 891)) | (1 << (MariaDBParser.GLENGTH - 891)) | (1 << (MariaDBParser.GREATEST - 891)) | (1 << (MariaDBParser.GTID_SUBSET - 891)) | (1 << (MariaDBParser.GTID_SUBTRACT - 891)) | (1 << (MariaDBParser.HEX - 891)) | (1 << (MariaDBParser.IFNULL - 891)) | (1 << (MariaDBParser.INET6_ATON - 891)) | (1 << (MariaDBParser.INET6_NTOA - 891)) | (1 << (MariaDBParser.INET_ATON - 891)) | (1 << (MariaDBParser.INET_NTOA - 891)) | (1 << (MariaDBParser.INSTR - 891)) | (1 << (MariaDBParser.INTERIORRINGN - 891)) | (1 << (MariaDBParser.INTERSECTS - 891)) | (1 << (MariaDBParser.ISCLOSED - 891)))) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & ((1 << (MariaDBParser.ISEMPTY - 923)) | (1 << (MariaDBParser.ISNULL - 923)) | (1 << (MariaDBParser.ISSIMPLE - 923)) | (1 << (MariaDBParser.IS_FREE_LOCK - 923)) | (1 << (MariaDBParser.IS_IPV4 - 923)) | (1 << (MariaDBParser.IS_IPV4_COMPAT - 923)) | (1 << (MariaDBParser.IS_IPV4_MAPPED - 923)) | (1 << (MariaDBParser.IS_IPV6 - 923)) | (1 << (MariaDBParser.IS_USED_LOCK - 923)) | (1 << (MariaDBParser.LAST_INSERT_ID - 923)) | (1 << (MariaDBParser.LCASE - 923)) | (1 << (MariaDBParser.LEAST - 923)) | (1 << (MariaDBParser.LENGTH - 923)) | (1 << (MariaDBParser.LINEFROMTEXT - 923)) | (1 << (MariaDBParser.LINEFROMWKB - 923)) | (1 << (MariaDBParser.LINESTRINGFROMTEXT - 923)) | (1 << (MariaDBParser.LINESTRINGFROMWKB - 923)) | (1 << (MariaDBParser.LN - 923)) | (1 << (MariaDBParser.LOAD_FILE - 923)) | (1 << (MariaDBParser.LOCATE - 923)) | (1 << (MariaDBParser.LOG - 923)) | (1 << (MariaDBParser.LOG10 - 923)) | (1 << (MariaDBParser.LOG2 - 923)) | (1 << (MariaDBParser.LOWER - 923)) | (1 << (MariaDBParser.LPAD - 923)) | (1 << (MariaDBParser.LTRIM - 923)) | (1 << (MariaDBParser.MAKEDATE - 923)) | (1 << (MariaDBParser.MAKETIME - 923)) | (1 << (MariaDBParser.MAKE_SET - 923)) | (1 << (MariaDBParser.MASTER_POS_WAIT - 923)) | (1 << (MariaDBParser.MBRCONTAINS - 923)) | (1 << (MariaDBParser.MBRDISJOINT - 923)))) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & ((1 << (MariaDBParser.MBREQUAL - 955)) | (1 << (MariaDBParser.MBRINTERSECTS - 955)) | (1 << (MariaDBParser.MBROVERLAPS - 955)) | (1 << (MariaDBParser.MBRTOUCHES - 955)) | (1 << (MariaDBParser.MBRWITHIN - 955)) | (1 << (MariaDBParser.MD5 - 955)) | (1 << (MariaDBParser.MLINEFROMTEXT - 955)) | (1 << (MariaDBParser.MLINEFROMWKB - 955)) | (1 << (MariaDBParser.MONTHNAME - 955)) | (1 << (MariaDBParser.MPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MPOLYFROMTEXT - 955)) | (1 << (MariaDBParser.MPOLYFROMWKB - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMTEXT - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMWKB - 955)) | (1 << (MariaDBParser.NAME_CONST - 955)) | (1 << (MariaDBParser.NULLIF - 955)) | (1 << (MariaDBParser.NUMGEOMETRIES - 955)) | (1 << (MariaDBParser.NUMINTERIORRINGS - 955)) | (1 << (MariaDBParser.NUMPOINTS - 955)) | (1 << (MariaDBParser.OCT - 955)) | (1 << (MariaDBParser.OCTET_LENGTH - 955)) | (1 << (MariaDBParser.ORD - 955)) | (1 << (MariaDBParser.OVERLAPS - 955)) | (1 << (MariaDBParser.PERIOD_ADD - 955)) | (1 << (MariaDBParser.PERIOD_DIFF - 955)) | (1 << (MariaDBParser.PI - 955)) | (1 << (MariaDBParser.POINTFROMTEXT - 955)))) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & ((1 << (MariaDBParser.POINTFROMWKB - 987)) | (1 << (MariaDBParser.POINTN - 987)) | (1 << (MariaDBParser.POLYFROMTEXT - 987)) | (1 << (MariaDBParser.POLYFROMWKB - 987)) | (1 << (MariaDBParser.POLYGONFROMTEXT - 987)) | (1 << (MariaDBParser.POLYGONFROMWKB - 987)) | (1 << (MariaDBParser.POW - 987)) | (1 << (MariaDBParser.POWER - 987)) | (1 << (MariaDBParser.QUOTE - 987)) | (1 << (MariaDBParser.RADIANS - 987)) | (1 << (MariaDBParser.RAND - 987)) | (1 << (MariaDBParser.RANDOM_BYTES - 987)) | (1 << (MariaDBParser.RELEASE_LOCK - 987)) | (1 << (MariaDBParser.REVERSE - 987)) | (1 << (MariaDBParser.ROUND - 987)) | (1 << (MariaDBParser.ROW_COUNT - 987)) | (1 << (MariaDBParser.RPAD - 987)) | (1 << (MariaDBParser.RTRIM - 987)) | (1 << (MariaDBParser.SEC_TO_TIME - 987)) | (1 << (MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE - 987)) | (1 << (MariaDBParser.SESSION_USER - 987)) | (1 << (MariaDBParser.SHA - 987)) | (1 << (MariaDBParser.SHA1 - 987)) | (1 << (MariaDBParser.SHA2 - 987)) | (1 << (MariaDBParser.SCHEMA_NAME - 987)) | (1 << (MariaDBParser.SIGN - 987)) | (1 << (MariaDBParser.SIN - 987)) | (1 << (MariaDBParser.SLEEP - 987)) | (1 << (MariaDBParser.SOUNDEX - 987)) | (1 << (MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS - 987)) | (1 << (MariaDBParser.SQRT - 987)) | (1 << (MariaDBParser.SRID - 987)))) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & ((1 << (MariaDBParser.STARTPOINT - 1019)) | (1 << (MariaDBParser.STRCMP - 1019)) | (1 << (MariaDBParser.STR_TO_DATE - 1019)) | (1 << (MariaDBParser.ST_AREA - 1019)) | (1 << (MariaDBParser.ST_ASBINARY - 1019)) | (1 << (MariaDBParser.ST_ASTEXT - 1019)) | (1 << (MariaDBParser.ST_ASWKB - 1019)) | (1 << (MariaDBParser.ST_ASWKT - 1019)) | (1 << (MariaDBParser.ST_BUFFER - 1019)) | (1 << (MariaDBParser.ST_CENTROID - 1019)) | (1 << (MariaDBParser.ST_CONTAINS - 1019)) | (1 << (MariaDBParser.ST_CROSSES - 1019)) | (1 << (MariaDBParser.ST_DIFFERENCE - 1019)) | (1 << (MariaDBParser.ST_DIMENSION - 1019)) | (1 << (MariaDBParser.ST_DISJOINT - 1019)) | (1 << (MariaDBParser.ST_DISTANCE - 1019)) | (1 << (MariaDBParser.ST_ENDPOINT - 1019)) | (1 << (MariaDBParser.ST_ENVELOPE - 1019)) | (1 << (MariaDBParser.ST_EQUALS - 1019)) | (1 << (MariaDBParser.ST_EXTERIORRING - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYN - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYTYPE - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMWKB - 1019)) | (1 << (MariaDBParser.ST_INTERIORRINGN - 1019)))) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & ((1 << (MariaDBParser.ST_INTERSECTION - 1051)) | (1 << (MariaDBParser.ST_INTERSECTS - 1051)) | (1 << (MariaDBParser.ST_ISCLOSED - 1051)) | (1 << (MariaDBParser.ST_ISEMPTY - 1051)) | (1 << (MariaDBParser.ST_ISSIMPLE - 1051)) | (1 << (MariaDBParser.ST_LINEFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINEFROMWKB - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMWKB - 1051)) | (1 << (MariaDBParser.ST_NUMGEOMETRIES - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRING - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRINGS - 1051)) | (1 << (MariaDBParser.ST_NUMPOINTS - 1051)) | (1 << (MariaDBParser.ST_OVERLAPS - 1051)) | (1 << (MariaDBParser.ST_POINTFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POINTFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POINTN - 1051)) | (1 << (MariaDBParser.ST_POLYFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMWKB - 1051)) | (1 << (MariaDBParser.ST_SRID - 1051)) | (1 << (MariaDBParser.ST_STARTPOINT - 1051)) | (1 << (MariaDBParser.ST_SYMDIFFERENCE - 1051)) | (1 << (MariaDBParser.ST_TOUCHES - 1051)) | (1 << (MariaDBParser.ST_UNION - 1051)) | (1 << (MariaDBParser.ST_WITHIN - 1051)) | (1 << (MariaDBParser.ST_X - 1051)) | (1 << (MariaDBParser.ST_Y - 1051)) | (1 << (MariaDBParser.SUBDATE - 1051)) | (1 << (MariaDBParser.SUBSTRING_INDEX - 1051)) | (1 << (MariaDBParser.SUBTIME - 1051)))) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & ((1 << (MariaDBParser.SYSTEM_USER - 1083)) | (1 << (MariaDBParser.TAN - 1083)) | (1 << (MariaDBParser.TIMEDIFF - 1083)) | (1 << (MariaDBParser.TIMESTAMPADD - 1083)) | (1 << (MariaDBParser.TIMESTAMPDIFF - 1083)) | (1 << (MariaDBParser.TIME_FORMAT - 1083)) | (1 << (MariaDBParser.TIME_TO_SEC - 1083)) | (1 << (MariaDBParser.TOUCHES - 1083)) | (1 << (MariaDBParser.TO_BASE64 - 1083)) | (1 << (MariaDBParser.TO_DAYS - 1083)) | (1 << (MariaDBParser.TO_SECONDS - 1083)) | (1 << (MariaDBParser.UCASE - 1083)) | (1 << (MariaDBParser.UNCOMPRESS - 1083)) | (1 << (MariaDBParser.UNCOMPRESSED_LENGTH - 1083)) | (1 << (MariaDBParser.UNHEX - 1083)) | (1 << (MariaDBParser.UNIX_TIMESTAMP - 1083)) | (1 << (MariaDBParser.UPDATEXML - 1083)) | (1 << (MariaDBParser.UPPER - 1083)) | (1 << (MariaDBParser.UUID - 1083)) | (1 << (MariaDBParser.UUID_SHORT - 1083)) | (1 << (MariaDBParser.VALIDATE_PASSWORD_STRENGTH - 1083)) | (1 << (MariaDBParser.VERSION - 1083)) | (1 << (MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1083)) | (1 << (MariaDBParser.WEEKDAY - 1083)) | (1 << (MariaDBParser.WEEKOFYEAR - 1083)) | (1 << (MariaDBParser.WEIGHT_STRING - 1083)) | (1 << (MariaDBParser.WITHIN - 1083)) | (1 << (MariaDBParser.YEARWEEK - 1083)) | (1 << (MariaDBParser.Y_FUNCTION - 1083)) | (1 << (MariaDBParser.X_FUNCTION - 1083)) | (1 << (MariaDBParser.VIA - 1083)) | (1 << (MariaDBParser.LASTVAL - 1083)))) !== 0) || ((((_la - 1115)) & ~0x1F) === 0 && ((1 << (_la - 1115)) & ((1 << (MariaDBParser.NEXTVAL - 1115)) | (1 << (MariaDBParser.SETVAL - 1115)) | (1 << (MariaDBParser.PREVIOUS - 1115)) | (1 << (MariaDBParser.PERSISTENT - 1115)) | (1 << (MariaDBParser.BINLOG_MONITOR - 1115)) | (1 << (MariaDBParser.BINLOG_REPLAY - 1115)) | (1 << (MariaDBParser.FEDERATED_ADMIN - 1115)) | (1 << (MariaDBParser.READ_ONLY_ADMIN - 1115)) | (1 << (MariaDBParser.REPLICA - 1115)) | (1 << (MariaDBParser.REPLICAS - 1115)) | (1 << (MariaDBParser.REPLICATION_MASTER_ADMIN - 1115)) | (1 << (MariaDBParser.MONITOR - 1115)) | (1 << (MariaDBParser.READ_ONLY - 1115)) | (1 << (MariaDBParser.REPLAY - 1115)) | (1 << (MariaDBParser.MOD - 1115)))) !== 0) || ((((_la - 1166)) & ~0x1F) === 0 && ((1 << (_la - 1166)) & ((1 << (MariaDBParser.CHARSET_REVERSE_QOUTE_STRING - 1166)) | (1 << (MariaDBParser.STRING_LITERAL - 1166)) | (1 << (MariaDBParser.ID - 1166)))) !== 0)) {
					{
					this.state = 1836;
					(_localctx as ForeignKeyTableConstraintContext)._index = this.uid();
					}
				}

				this.state = 1839;
				this.indexColumnNames();
				this.state = 1840;
				this.referenceDefinition();
				}
				break;

			case 4:
				_localctx = new CheckTableConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1846;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.CONSTRAINT) {
					{
					this.state = 1842;
					this.match(MariaDBParser.CONSTRAINT);
					this.state = 1844;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MariaDBParser.ATTRIBUTE) | (1 << MariaDBParser.BODY) | (1 << MariaDBParser.BUCKETS) | (1 << MariaDBParser.CONDITION))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (MariaDBParser.CURRENT - 36)) | (1 << (MariaDBParser.CURRENT_ROLE - 36)) | (1 << (MariaDBParser.CURRENT_USER - 36)) | (1 << (MariaDBParser.DATABASE - 36)) | (1 << (MariaDBParser.DEFAULT - 36)) | (1 << (MariaDBParser.DIAGNOSTICS - 36)) | (1 << (MariaDBParser.EMPTY - 36)) | (1 << (MariaDBParser.EXCEPT - 36)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (MariaDBParser.GROUP - 73)) | (1 << (MariaDBParser.IF - 73)) | (1 << (MariaDBParser.IGNORED - 73)) | (1 << (MariaDBParser.INSERT - 73)) | (1 << (MariaDBParser.LATERAL - 73)) | (1 << (MariaDBParser.LEFT - 73)) | (1 << (MariaDBParser.LOCKED - 73)))) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & ((1 << (MariaDBParser.MAXVALUE - 110)) | (1 << (MariaDBParser.MINVALUE - 110)) | (1 << (MariaDBParser.NUMBER - 110)) | (1 << (MariaDBParser.OPTIONAL - 110)) | (1 << (MariaDBParser.ORDER - 110)) | (1 << (MariaDBParser.PRIMARY - 110)) | (1 << (MariaDBParser.PACKAGE - 110)))) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (MariaDBParser.REPLACE - 142)) | (1 << (MariaDBParser.RIGHT - 142)) | (1 << (MariaDBParser.SCHEMA - 142)) | (1 << (MariaDBParser.SKIP_ - 142)) | (1 << (MariaDBParser.STACKED - 142)) | (1 << (MariaDBParser.STATEMENT - 142)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MariaDBParser.DATE - 217)) | (1 << (MariaDBParser.TIME - 217)) | (1 << (MariaDBParser.TIMESTAMP - 217)) | (1 << (MariaDBParser.DATETIME - 217)) | (1 << (MariaDBParser.YEAR - 217)) | (1 << (MariaDBParser.BINARY - 217)) | (1 << (MariaDBParser.TEXT - 217)) | (1 << (MariaDBParser.ENUM - 217)) | (1 << (MariaDBParser.SERIAL - 217)))) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & ((1 << (MariaDBParser.JSON_ARRAY - 251)) | (1 << (MariaDBParser.JSON_ARRAYAGG - 251)) | (1 << (MariaDBParser.JSON_ARRAY_APPEND - 251)) | (1 << (MariaDBParser.JSON_ARRAY_INSERT - 251)) | (1 << (MariaDBParser.JSON_CONTAINS - 251)) | (1 << (MariaDBParser.JSON_CONTAINS_PATH - 251)) | (1 << (MariaDBParser.JSON_DEPTH - 251)) | (1 << (MariaDBParser.JSON_EXTRACT - 251)) | (1 << (MariaDBParser.JSON_INSERT - 251)) | (1 << (MariaDBParser.JSON_KEYS - 251)) | (1 << (MariaDBParser.JSON_LENGTH - 251)) | (1 << (MariaDBParser.JSON_MERGE - 251)) | (1 << (MariaDBParser.JSON_MERGE_PATCH - 251)) | (1 << (MariaDBParser.JSON_MERGE_PRESERVE - 251)) | (1 << (MariaDBParser.JSON_OBJECT - 251)) | (1 << (MariaDBParser.JSON_OBJECTAGG - 251)) | (1 << (MariaDBParser.JSON_OVERLAPS - 251)) | (1 << (MariaDBParser.JSON_PRETTY - 251)) | (1 << (MariaDBParser.JSON_QUOTE - 251)) | (1 << (MariaDBParser.JSON_REMOVE - 251)) | (1 << (MariaDBParser.JSON_REPLACE - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALID - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT - 251)) | (1 << (MariaDBParser.JSON_SEARCH - 251)) | (1 << (MariaDBParser.JSON_SET - 251)) | (1 << (MariaDBParser.JSON_STORAGE_FREE - 251)) | (1 << (MariaDBParser.JSON_STORAGE_SIZE - 251)) | (1 << (MariaDBParser.JSON_TABLE - 251)) | (1 << (MariaDBParser.JSON_TYPE - 251)) | (1 << (MariaDBParser.JSON_UNQUOTE - 251)) | (1 << (MariaDBParser.JSON_VALID - 251)) | (1 << (MariaDBParser.JSON_VALUE - 251)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (MariaDBParser.NESTED - 283)) | (1 << (MariaDBParser.ORDINALITY - 283)) | (1 << (MariaDBParser.PATH - 283)) | (1 << (MariaDBParser.AVG - 283)) | (1 << (MariaDBParser.BIT_AND - 283)) | (1 << (MariaDBParser.BIT_OR - 283)) | (1 << (MariaDBParser.BIT_XOR - 283)) | (1 << (MariaDBParser.COUNT - 283)) | (1 << (MariaDBParser.CUME_DIST - 283)) | (1 << (MariaDBParser.DENSE_RANK - 283)) | (1 << (MariaDBParser.FIRST_VALUE - 283)) | (1 << (MariaDBParser.GROUP_CONCAT - 283)) | (1 << (MariaDBParser.LAG - 283)) | (1 << (MariaDBParser.LAST_VALUE - 283)) | (1 << (MariaDBParser.LEAD - 283)) | (1 << (MariaDBParser.MAX - 283)) | (1 << (MariaDBParser.MIN - 283)) | (1 << (MariaDBParser.NTILE - 283)) | (1 << (MariaDBParser.NTH_VALUE - 283)) | (1 << (MariaDBParser.PERCENT_RANK - 283)) | (1 << (MariaDBParser.RANK - 283)) | (1 << (MariaDBParser.ROW_NUMBER - 283)) | (1 << (MariaDBParser.STD - 283)) | (1 << (MariaDBParser.STDDEV - 283)) | (1 << (MariaDBParser.STDDEV_POP - 283)) | (1 << (MariaDBParser.STDDEV_SAMP - 283)) | (1 << (MariaDBParser.SUM - 283)) | (1 << (MariaDBParser.VAR_POP - 283)) | (1 << (MariaDBParser.VAR_SAMP - 283)) | (1 << (MariaDBParser.VARIANCE - 283)) | (1 << (MariaDBParser.CURRENT_DATE - 283)) | (1 << (MariaDBParser.CURRENT_TIME - 283)))) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & ((1 << (MariaDBParser.CURRENT_TIMESTAMP - 315)) | (1 << (MariaDBParser.LOCALTIME - 315)) | (1 << (MariaDBParser.CURDATE - 315)) | (1 << (MariaDBParser.CURTIME - 315)) | (1 << (MariaDBParser.DATE_ADD - 315)) | (1 << (MariaDBParser.DATE_SUB - 315)) | (1 << (MariaDBParser.LOCALTIMESTAMP - 315)) | (1 << (MariaDBParser.NOW - 315)) | (1 << (MariaDBParser.POSITION - 315)) | (1 << (MariaDBParser.SUBSTR - 315)) | (1 << (MariaDBParser.SUBSTRING - 315)) | (1 << (MariaDBParser.SYSDATE - 315)) | (1 << (MariaDBParser.TRIM - 315)) | (1 << (MariaDBParser.UTC_DATE - 315)) | (1 << (MariaDBParser.UTC_TIME - 315)) | (1 << (MariaDBParser.UTC_TIMESTAMP - 315)) | (1 << (MariaDBParser.ACCOUNT - 315)) | (1 << (MariaDBParser.ACTION - 315)) | (1 << (MariaDBParser.AFTER - 315)) | (1 << (MariaDBParser.AGGREGATE - 315)) | (1 << (MariaDBParser.ALGORITHM - 315)) | (1 << (MariaDBParser.ANY - 315)) | (1 << (MariaDBParser.AT - 315)) | (1 << (MariaDBParser.AUTHORS - 315)) | (1 << (MariaDBParser.AUTOCOMMIT - 315)) | (1 << (MariaDBParser.AUTOEXTEND_SIZE - 315)) | (1 << (MariaDBParser.AUTO_INCREMENT - 315)) | (1 << (MariaDBParser.AVG_ROW_LENGTH - 315)) | (1 << (MariaDBParser.BEGIN - 315)) | (1 << (MariaDBParser.BINLOG - 315)) | (1 << (MariaDBParser.BIT - 315)))) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & ((1 << (MariaDBParser.BLOCK - 347)) | (1 << (MariaDBParser.BOOL - 347)) | (1 << (MariaDBParser.BOOLEAN - 347)) | (1 << (MariaDBParser.BTREE - 347)) | (1 << (MariaDBParser.CACHE - 347)) | (1 << (MariaDBParser.CASCADED - 347)) | (1 << (MariaDBParser.CHAIN - 347)) | (1 << (MariaDBParser.CHANGED - 347)) | (1 << (MariaDBParser.CHANNEL - 347)) | (1 << (MariaDBParser.CHECKSUM - 347)) | (1 << (MariaDBParser.PAGE_CHECKSUM - 347)) | (1 << (MariaDBParser.CIPHER - 347)) | (1 << (MariaDBParser.CLASS_ORIGIN - 347)) | (1 << (MariaDBParser.CLIENT - 347)) | (1 << (MariaDBParser.CLOSE - 347)) | (1 << (MariaDBParser.CLUSTERING - 347)) | (1 << (MariaDBParser.COALESCE - 347)) | (1 << (MariaDBParser.CODE - 347)) | (1 << (MariaDBParser.COLUMNS - 347)) | (1 << (MariaDBParser.COLUMN_FORMAT - 347)) | (1 << (MariaDBParser.COLUMN_NAME - 347)) | (1 << (MariaDBParser.COMMENT - 347)) | (1 << (MariaDBParser.COMMIT - 347)) | (1 << (MariaDBParser.COMPACT - 347)) | (1 << (MariaDBParser.COMPLETION - 347)) | (1 << (MariaDBParser.COMPRESSED - 347)) | (1 << (MariaDBParser.COMPRESSION - 347)) | (1 << (MariaDBParser.CONCURRENT - 347)) | (1 << (MariaDBParser.CONNECT - 347)) | (1 << (MariaDBParser.CONNECTION - 347)) | (1 << (MariaDBParser.CONSISTENT - 347)) | (1 << (MariaDBParser.CONSTRAINT_CATALOG - 347)))) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & ((1 << (MariaDBParser.CONSTRAINT_SCHEMA - 379)) | (1 << (MariaDBParser.CONSTRAINT_NAME - 379)) | (1 << (MariaDBParser.CONTAINS - 379)) | (1 << (MariaDBParser.CONTEXT - 379)) | (1 << (MariaDBParser.CONTRIBUTORS - 379)) | (1 << (MariaDBParser.COPY - 379)) | (1 << (MariaDBParser.CPU - 379)) | (1 << (MariaDBParser.CYCLE - 379)) | (1 << (MariaDBParser.CURSOR_NAME - 379)) | (1 << (MariaDBParser.DATA - 379)) | (1 << (MariaDBParser.DATAFILE - 379)) | (1 << (MariaDBParser.DEALLOCATE - 379)) | (1 << (MariaDBParser.DEFAULT_AUTH - 379)) | (1 << (MariaDBParser.DEFINER - 379)) | (1 << (MariaDBParser.DELAY_KEY_WRITE - 379)) | (1 << (MariaDBParser.DES_KEY_FILE - 379)) | (1 << (MariaDBParser.DIRECTORY - 379)) | (1 << (MariaDBParser.DISABLE - 379)) | (1 << (MariaDBParser.DISCARD - 379)) | (1 << (MariaDBParser.DISK - 379)) | (1 << (MariaDBParser.DO - 379)) | (1 << (MariaDBParser.DUMPFILE - 379)) | (1 << (MariaDBParser.DUPLICATE - 379)) | (1 << (MariaDBParser.DYNAMIC - 379)) | (1 << (MariaDBParser.ENABLE - 379)) | (1 << (MariaDBParser.ENCRYPTED - 379)) | (1 << (MariaDBParser.ENCRYPTION - 379)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ID - 379)) | (1 << (MariaDBParser.END - 379)) | (1 << (MariaDBParser.ENDS - 379)) | (1 << (MariaDBParser.ENGINE - 379)) | (1 << (MariaDBParser.ENGINES - 379)))) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & ((1 << (MariaDBParser.ERROR - 411)) | (1 << (MariaDBParser.ERRORS - 411)) | (1 << (MariaDBParser.ESCAPE - 411)) | (1 << (MariaDBParser.EVEN - 411)) | (1 << (MariaDBParser.EVENT - 411)) | (1 << (MariaDBParser.EVENTS - 411)) | (1 << (MariaDBParser.EVERY - 411)) | (1 << (MariaDBParser.EXCHANGE - 411)) | (1 << (MariaDBParser.EXCLUSIVE - 411)) | (1 << (MariaDBParser.EXPIRE - 411)) | (1 << (MariaDBParser.EXPORT - 411)) | (1 << (MariaDBParser.EXTENDED - 411)) | (1 << (MariaDBParser.EXTENT_SIZE - 411)) | (1 << (MariaDBParser.FAILED_LOGIN_ATTEMPTS - 411)) | (1 << (MariaDBParser.FAST - 411)) | (1 << (MariaDBParser.FAULTS - 411)) | (1 << (MariaDBParser.FIELDS - 411)) | (1 << (MariaDBParser.FILE_BLOCK_SIZE - 411)) | (1 << (MariaDBParser.FILTER - 411)) | (1 << (MariaDBParser.FIRST - 411)) | (1 << (MariaDBParser.FIXED - 411)) | (1 << (MariaDBParser.FLUSH - 411)) | (1 << (MariaDBParser.FOLLOWS - 411)) | (1 << (MariaDBParser.FOUND - 411)) | (1 << (MariaDBParser.FULL - 411)) | (1 << (MariaDBParser.FUNCTION - 411)) | (1 << (MariaDBParser.GENERAL - 411)) | (1 << (MariaDBParser.GLOBAL - 411)) | (1 << (MariaDBParser.GRANTS - 411)) | (1 << (MariaDBParser.GROUP_REPLICATION - 411)) | (1 << (MariaDBParser.HANDLER - 411)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (MariaDBParser.HASH - 443)) | (1 << (MariaDBParser.HELP - 443)) | (1 << (MariaDBParser.HISTORY - 443)) | (1 << (MariaDBParser.HOST - 443)) | (1 << (MariaDBParser.HOSTS - 443)) | (1 << (MariaDBParser.IDENTIFIED - 443)) | (1 << (MariaDBParser.IGNORE_SERVER_IDS - 443)) | (1 << (MariaDBParser.IMPORT - 443)) | (1 << (MariaDBParser.INCREMENT - 443)) | (1 << (MariaDBParser.INDEXES - 443)) | (1 << (MariaDBParser.INITIAL_SIZE - 443)) | (1 << (MariaDBParser.INPLACE - 443)) | (1 << (MariaDBParser.INSERT_METHOD - 443)) | (1 << (MariaDBParser.INSTALL - 443)) | (1 << (MariaDBParser.INSTANCE - 443)) | (1 << (MariaDBParser.INSTANT - 443)) | (1 << (MariaDBParser.INVISIBLE - 443)) | (1 << (MariaDBParser.INVOKER - 443)) | (1 << (MariaDBParser.IO - 443)) | (1 << (MariaDBParser.IO_THREAD - 443)) | (1 << (MariaDBParser.IPC - 443)) | (1 << (MariaDBParser.ISOLATION - 443)) | (1 << (MariaDBParser.ISSUER - 443)) | (1 << (MariaDBParser.JSON - 443)) | (1 << (MariaDBParser.KEY_BLOCK_SIZE - 443)) | (1 << (MariaDBParser.LANGUAGE - 443)) | (1 << (MariaDBParser.LAST - 443)) | (1 << (MariaDBParser.LEAVES - 443)) | (1 << (MariaDBParser.LESS - 443)) | (1 << (MariaDBParser.LEVEL - 443)) | (1 << (MariaDBParser.LIST - 443)) | (1 << (MariaDBParser.LOCAL - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (MariaDBParser.LOCALES - 475)) | (1 << (MariaDBParser.LOGFILE - 475)) | (1 << (MariaDBParser.LOGS - 475)) | (1 << (MariaDBParser.MASTER - 475)) | (1 << (MariaDBParser.MASTER_AUTO_POSITION - 475)) | (1 << (MariaDBParser.MASTER_CONNECT_RETRY - 475)) | (1 << (MariaDBParser.MASTER_DELAY - 475)) | (1 << (MariaDBParser.MASTER_HEARTBEAT_PERIOD - 475)) | (1 << (MariaDBParser.MASTER_HOST - 475)) | (1 << (MariaDBParser.MASTER_LOG_FILE - 475)) | (1 << (MariaDBParser.MASTER_LOG_POS - 475)) | (1 << (MariaDBParser.MASTER_PASSWORD - 475)) | (1 << (MariaDBParser.MASTER_PORT - 475)) | (1 << (MariaDBParser.MASTER_RETRY_COUNT - 475)) | (1 << (MariaDBParser.MASTER_SSL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CA - 475)) | (1 << (MariaDBParser.MASTER_SSL_CAPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_CERT - 475)) | (1 << (MariaDBParser.MASTER_SSL_CIPHER - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRLPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_KEY - 475)) | (1 << (MariaDBParser.MASTER_TLS_VERSION - 475)) | (1 << (MariaDBParser.MASTER_USER - 475)) | (1 << (MariaDBParser.MAX_CONNECTIONS_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_QUERIES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_ROWS - 475)) | (1 << (MariaDBParser.MAX_SIZE - 475)) | (1 << (MariaDBParser.MAX_UPDATES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_USER_CONNECTIONS - 475)) | (1 << (MariaDBParser.MEDIUM - 475)) | (1 << (MariaDBParser.MEMBER - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (MariaDBParser.MERGE - 507)) | (1 << (MariaDBParser.MESSAGE_TEXT - 507)) | (1 << (MariaDBParser.MID - 507)) | (1 << (MariaDBParser.MIGRATE - 507)) | (1 << (MariaDBParser.MIN_ROWS - 507)) | (1 << (MariaDBParser.MODE - 507)) | (1 << (MariaDBParser.MODIFY - 507)) | (1 << (MariaDBParser.MUTEX - 507)) | (1 << (MariaDBParser.MYSQL - 507)) | (1 << (MariaDBParser.MYSQL_ERRNO - 507)) | (1 << (MariaDBParser.NAME - 507)) | (1 << (MariaDBParser.NAMES - 507)) | (1 << (MariaDBParser.NCHAR - 507)) | (1 << (MariaDBParser.NEVER - 507)) | (1 << (MariaDBParser.NEXT - 507)) | (1 << (MariaDBParser.NO - 507)) | (1 << (MariaDBParser.NOCACHE - 507)) | (1 << (MariaDBParser.NOCOPY - 507)) | (1 << (MariaDBParser.NOCYCLE - 507)) | (1 << (MariaDBParser.NOMAXVALUE - 507)) | (1 << (MariaDBParser.NOMINVALUE - 507)) | (1 << (MariaDBParser.NOWAIT - 507)) | (1 << (MariaDBParser.NODEGROUP - 507)) | (1 << (MariaDBParser.NONE - 507)) | (1 << (MariaDBParser.ODBC - 507)) | (1 << (MariaDBParser.OFFLINE - 507)) | (1 << (MariaDBParser.OFFSET - 507)) | (1 << (MariaDBParser.OF - 507)) | (1 << (MariaDBParser.OJ - 507)) | (1 << (MariaDBParser.OLD_PASSWORD - 507)) | (1 << (MariaDBParser.ONE - 507)) | (1 << (MariaDBParser.ONLINE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (MariaDBParser.ONLY - 539)) | (1 << (MariaDBParser.OPEN - 539)) | (1 << (MariaDBParser.OPTIMIZER_COSTS - 539)) | (1 << (MariaDBParser.OPTIONS - 539)) | (1 << (MariaDBParser.OWNER - 539)) | (1 << (MariaDBParser.PACK_KEYS - 539)) | (1 << (MariaDBParser.PAGE - 539)) | (1 << (MariaDBParser.PARSER - 539)) | (1 << (MariaDBParser.PARTIAL - 539)) | (1 << (MariaDBParser.PARTITIONING - 539)) | (1 << (MariaDBParser.PARTITIONS - 539)) | (1 << (MariaDBParser.PASSWORD - 539)) | (1 << (MariaDBParser.PASSWORD_LOCK_TIME - 539)) | (1 << (MariaDBParser.PHASE - 539)) | (1 << (MariaDBParser.PLUGIN - 539)) | (1 << (MariaDBParser.PLUGIN_DIR - 539)) | (1 << (MariaDBParser.PLUGINS - 539)) | (1 << (MariaDBParser.PORT - 539)) | (1 << (MariaDBParser.PRECEDES - 539)) | (1 << (MariaDBParser.PREPARE - 539)) | (1 << (MariaDBParser.PRESERVE - 539)) | (1 << (MariaDBParser.PREV - 539)) | (1 << (MariaDBParser.PROCESSLIST - 539)) | (1 << (MariaDBParser.PROFILE - 539)) | (1 << (MariaDBParser.PROFILES - 539)) | (1 << (MariaDBParser.PROXY - 539)) | (1 << (MariaDBParser.QUERY - 539)) | (1 << (MariaDBParser.QUERY_RESPONSE_TIME - 539)) | (1 << (MariaDBParser.QUICK - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (MariaDBParser.REBUILD - 571)) | (1 << (MariaDBParser.RECOVER - 571)) | (1 << (MariaDBParser.RECURSIVE - 571)) | (1 << (MariaDBParser.REDO_BUFFER_SIZE - 571)) | (1 << (MariaDBParser.REDUNDANT - 571)) | (1 << (MariaDBParser.RELAY - 571)) | (1 << (MariaDBParser.RELAY_LOG_FILE - 571)) | (1 << (MariaDBParser.RELAY_LOG_POS - 571)) | (1 << (MariaDBParser.RELAYLOG - 571)) | (1 << (MariaDBParser.REMOVE - 571)) | (1 << (MariaDBParser.REORGANIZE - 571)) | (1 << (MariaDBParser.REPAIR - 571)) | (1 << (MariaDBParser.REPLICATE_DO_DB - 571)) | (1 << (MariaDBParser.REPLICATE_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_REWRITE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATION - 571)) | (1 << (MariaDBParser.RESET - 571)) | (1 << (MariaDBParser.RESTART - 571)) | (1 << (MariaDBParser.RESUME - 571)) | (1 << (MariaDBParser.RETURNED_SQLSTATE - 571)) | (1 << (MariaDBParser.RETURNS - 571)) | (1 << (MariaDBParser.REUSE - 571)) | (1 << (MariaDBParser.ROLE - 571)) | (1 << (MariaDBParser.ROLLBACK - 571)) | (1 << (MariaDBParser.ROLLUP - 571)) | (1 << (MariaDBParser.ROTATE - 571)) | (1 << (MariaDBParser.ROW - 571)))) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & ((1 << (MariaDBParser.ROWS - 603)) | (1 << (MariaDBParser.ROW_FORMAT - 603)) | (1 << (MariaDBParser.RTREE - 603)) | (1 << (MariaDBParser.SAVEPOINT - 603)) | (1 << (MariaDBParser.SCHEDULE - 603)) | (1 << (MariaDBParser.SECURITY - 603)) | (1 << (MariaDBParser.SEQUENCE - 603)) | (1 << (MariaDBParser.SERVER - 603)) | (1 << (MariaDBParser.SESSION - 603)) | (1 << (MariaDBParser.SHARE - 603)) | (1 << (MariaDBParser.SHARED - 603)) | (1 << (MariaDBParser.SIGNED - 603)) | (1 << (MariaDBParser.SIMPLE - 603)) | (1 << (MariaDBParser.SLAVE - 603)) | (1 << (MariaDBParser.SLAVES - 603)) | (1 << (MariaDBParser.SLOW - 603)) | (1 << (MariaDBParser.SNAPSHOT - 603)) | (1 << (MariaDBParser.SOCKET - 603)) | (1 << (MariaDBParser.SOME - 603)) | (1 << (MariaDBParser.SONAME - 603)) | (1 << (MariaDBParser.SOUNDS - 603)) | (1 << (MariaDBParser.SOURCE - 603)) | (1 << (MariaDBParser.SQL_AFTER_GTIDS - 603)) | (1 << (MariaDBParser.SQL_AFTER_MTS_GAPS - 603)) | (1 << (MariaDBParser.SQL_BEFORE_GTIDS - 603)) | (1 << (MariaDBParser.SQL_BUFFER_RESULT - 603)) | (1 << (MariaDBParser.SQL_CACHE - 603)) | (1 << (MariaDBParser.SQL_NO_CACHE - 603)) | (1 << (MariaDBParser.SQL_THREAD - 603)) | (1 << (MariaDBParser.START - 603)) | (1 << (MariaDBParser.STARTS - 603)) | (1 << (MariaDBParser.STATS_AUTO_RECALC - 603)))) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & ((1 << (MariaDBParser.STATS_PERSISTENT - 635)) | (1 << (MariaDBParser.STATS_SAMPLE_PAGES - 635)) | (1 << (MariaDBParser.STATUS - 635)) | (1 << (MariaDBParser.STOP - 635)) | (1 << (MariaDBParser.STORAGE - 635)) | (1 << (MariaDBParser.STRING - 635)) | (1 << (MariaDBParser.SUBCLASS_ORIGIN - 635)) | (1 << (MariaDBParser.SUBJECT - 635)) | (1 << (MariaDBParser.SUBPARTITION - 635)) | (1 << (MariaDBParser.SUBPARTITIONS - 635)) | (1 << (MariaDBParser.SUSPEND - 635)) | (1 << (MariaDBParser.SWAPS - 635)) | (1 << (MariaDBParser.SWITCHES - 635)) | (1 << (MariaDBParser.TABLE_NAME - 635)) | (1 << (MariaDBParser.TABLESPACE - 635)) | (1 << (MariaDBParser.TABLE_TYPE - 635)) | (1 << (MariaDBParser.TEMPORARY - 635)) | (1 << (MariaDBParser.TEMPTABLE - 635)) | (1 << (MariaDBParser.THAN - 635)) | (1 << (MariaDBParser.TRADITIONAL - 635)) | (1 << (MariaDBParser.TRANSACTION - 635)) | (1 << (MariaDBParser.TRANSACTIONAL - 635)) | (1 << (MariaDBParser.TRIGGERS - 635)) | (1 << (MariaDBParser.TRUNCATE - 635)) | (1 << (MariaDBParser.TYPES - 635)) | (1 << (MariaDBParser.UNBOUNDED - 635)) | (1 << (MariaDBParser.UNDEFINED - 635)) | (1 << (MariaDBParser.UNDOFILE - 635)) | (1 << (MariaDBParser.UNDO_BUFFER_SIZE - 635)) | (1 << (MariaDBParser.UNINSTALL - 635)) | (1 << (MariaDBParser.UNKNOWN - 635)))) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & ((1 << (MariaDBParser.UNTIL - 667)) | (1 << (MariaDBParser.UPGRADE - 667)) | (1 << (MariaDBParser.USER - 667)) | (1 << (MariaDBParser.USE_FRM - 667)) | (1 << (MariaDBParser.USER_RESOURCES - 667)) | (1 << (MariaDBParser.VALIDATION - 667)) | (1 << (MariaDBParser.VALUE - 667)) | (1 << (MariaDBParser.VARIABLES - 667)) | (1 << (MariaDBParser.VIEW - 667)) | (1 << (MariaDBParser.VIRTUAL - 667)) | (1 << (MariaDBParser.VISIBLE - 667)) | (1 << (MariaDBParser.WAIT - 667)) | (1 << (MariaDBParser.WARNINGS - 667)) | (1 << (MariaDBParser.WITHOUT - 667)) | (1 << (MariaDBParser.WORK - 667)) | (1 << (MariaDBParser.WRAPPER - 667)) | (1 << (MariaDBParser.WSREP_MEMBERSHIP - 667)) | (1 << (MariaDBParser.WSREP_STATUS - 667)) | (1 << (MariaDBParser.X509 - 667)) | (1 << (MariaDBParser.XA - 667)) | (1 << (MariaDBParser.XML - 667)) | (1 << (MariaDBParser.EUR - 667)) | (1 << (MariaDBParser.USA - 667)) | (1 << (MariaDBParser.JIS - 667)) | (1 << (MariaDBParser.ISO - 667)) | (1 << (MariaDBParser.INTERNAL - 667)) | (1 << (MariaDBParser.QUARTER - 667)) | (1 << (MariaDBParser.MONTH - 667)) | (1 << (MariaDBParser.DAY - 667)) | (1 << (MariaDBParser.HOUR - 667)))) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & ((1 << (MariaDBParser.MINUTE - 699)) | (1 << (MariaDBParser.WEEK - 699)) | (1 << (MariaDBParser.SECOND - 699)) | (1 << (MariaDBParser.MICROSECOND - 699)) | (1 << (MariaDBParser.USER_STATISTICS - 699)) | (1 << (MariaDBParser.CLIENT_STATISTICS - 699)) | (1 << (MariaDBParser.INDEX_STATISTICS - 699)) | (1 << (MariaDBParser.TABLE_STATISTICS - 699)) | (1 << (MariaDBParser.ADMIN - 699)) | (1 << (MariaDBParser.AUDIT_ADMIN - 699)) | (1 << (MariaDBParser.BACKUP_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ENCRYPTION_ADMIN - 699)) | (1 << (MariaDBParser.CLONE_ADMIN - 699)) | (1 << (MariaDBParser.CONNECTION_ADMIN - 699)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ADMIN - 699)) | (1 << (MariaDBParser.EXECUTE - 699)) | (1 << (MariaDBParser.FILE - 699)) | (1 << (MariaDBParser.FIREWALL_ADMIN - 699)) | (1 << (MariaDBParser.FIREWALL_USER - 699)) | (1 << (MariaDBParser.GROUP_REPLICATION_ADMIN - 699)) | (1 << (MariaDBParser.INNODB_REDO_LOG_ARCHIVE - 699)) | (1 << (MariaDBParser.INVOKE - 699)) | (1 << (MariaDBParser.LAMBDA - 699)) | (1 << (MariaDBParser.NDB_STORED_USER - 699)) | (1 << (MariaDBParser.PASSWORDLESS_USER_ADMIN - 699)))) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & ((1 << (MariaDBParser.PERSIST_RO_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.PRIVILEGES - 731)) | (1 << (MariaDBParser.PROCESS - 731)) | (1 << (MariaDBParser.RELOAD - 731)) | (1 << (MariaDBParser.REPLICATION_APPLIER - 731)) | (1 << (MariaDBParser.REPLICATION_SLAVE_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_USER - 731)) | (1 << (MariaDBParser.ROLE_ADMIN - 731)) | (1 << (MariaDBParser.ROUTINE - 731)) | (1 << (MariaDBParser.S3 - 731)) | (1 << (MariaDBParser.SESSION_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.SET_USER_ID - 731)) | (1 << (MariaDBParser.SHOW_ROUTINE - 731)) | (1 << (MariaDBParser.SHUTDOWN - 731)) | (1 << (MariaDBParser.SUPER - 731)) | (1 << (MariaDBParser.SYSTEM_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.TABLES - 731)) | (1 << (MariaDBParser.TABLE_ENCRYPTION_ADMIN - 731)) | (1 << (MariaDBParser.VERSION_TOKEN_ADMIN - 731)) | (1 << (MariaDBParser.XA_RECOVER_ADMIN - 731)) | (1 << (MariaDBParser.ARMSCII8 - 731)) | (1 << (MariaDBParser.ASCII - 731)) | (1 << (MariaDBParser.BIG5 - 731)) | (1 << (MariaDBParser.CP1250 - 731)) | (1 << (MariaDBParser.CP1251 - 731)) | (1 << (MariaDBParser.CP1256 - 731)) | (1 << (MariaDBParser.CP1257 - 731)) | (1 << (MariaDBParser.CP850 - 731)) | (1 << (MariaDBParser.CP852 - 731)) | (1 << (MariaDBParser.CP866 - 731)))) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & ((1 << (MariaDBParser.CP932 - 763)) | (1 << (MariaDBParser.DEC8 - 763)) | (1 << (MariaDBParser.EUCJPMS - 763)) | (1 << (MariaDBParser.EUCKR - 763)) | (1 << (MariaDBParser.GB18030 - 763)) | (1 << (MariaDBParser.GB2312 - 763)) | (1 << (MariaDBParser.GBK - 763)) | (1 << (MariaDBParser.GEOSTD8 - 763)) | (1 << (MariaDBParser.GREEK - 763)) | (1 << (MariaDBParser.HEBREW - 763)) | (1 << (MariaDBParser.HP8 - 763)) | (1 << (MariaDBParser.KEYBCS2 - 763)) | (1 << (MariaDBParser.KOI8R - 763)) | (1 << (MariaDBParser.KOI8U - 763)) | (1 << (MariaDBParser.LATIN1 - 763)) | (1 << (MariaDBParser.LATIN2 - 763)) | (1 << (MariaDBParser.LATIN5 - 763)) | (1 << (MariaDBParser.LATIN7 - 763)) | (1 << (MariaDBParser.MACCE - 763)) | (1 << (MariaDBParser.MACROMAN - 763)) | (1 << (MariaDBParser.SJIS - 763)) | (1 << (MariaDBParser.SWE7 - 763)) | (1 << (MariaDBParser.TIS620 - 763)) | (1 << (MariaDBParser.UCS2 - 763)) | (1 << (MariaDBParser.UJIS - 763)) | (1 << (MariaDBParser.UTF16 - 763)) | (1 << (MariaDBParser.UTF16LE - 763)) | (1 << (MariaDBParser.UTF32 - 763)) | (1 << (MariaDBParser.UTF8 - 763)) | (1 << (MariaDBParser.UTF8MB3 - 763)) | (1 << (MariaDBParser.UTF8MB4 - 763)) | (1 << (MariaDBParser.ARCHIVE - 763)))) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & ((1 << (MariaDBParser.BLACKHOLE - 795)) | (1 << (MariaDBParser.CSV - 795)) | (1 << (MariaDBParser.FEDERATED - 795)) | (1 << (MariaDBParser.INNODB - 795)) | (1 << (MariaDBParser.MEMORY - 795)) | (1 << (MariaDBParser.MRG_MYISAM - 795)) | (1 << (MariaDBParser.MYISAM - 795)) | (1 << (MariaDBParser.NDB - 795)) | (1 << (MariaDBParser.NDBCLUSTER - 795)) | (1 << (MariaDBParser.PERFORMANCE_SCHEMA - 795)) | (1 << (MariaDBParser.TOKUDB - 795)) | (1 << (MariaDBParser.REPEATABLE - 795)) | (1 << (MariaDBParser.COMMITTED - 795)) | (1 << (MariaDBParser.UNCOMMITTED - 795)) | (1 << (MariaDBParser.SERIALIZABLE - 795)) | (1 << (MariaDBParser.GEOMETRYCOLLECTION - 795)) | (1 << (MariaDBParser.LINESTRING - 795)) | (1 << (MariaDBParser.MULTILINESTRING - 795)) | (1 << (MariaDBParser.MULTIPOINT - 795)) | (1 << (MariaDBParser.MULTIPOLYGON - 795)) | (1 << (MariaDBParser.POINT - 795)) | (1 << (MariaDBParser.POLYGON - 795)) | (1 << (MariaDBParser.ABS - 795)) | (1 << (MariaDBParser.ACOS - 795)) | (1 << (MariaDBParser.ADDDATE - 795)) | (1 << (MariaDBParser.ADDTIME - 795)) | (1 << (MariaDBParser.AES_DECRYPT - 795)) | (1 << (MariaDBParser.AES_ENCRYPT - 795)) | (1 << (MariaDBParser.AREA - 795)) | (1 << (MariaDBParser.ASBINARY - 795)))) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & ((1 << (MariaDBParser.ASIN - 827)) | (1 << (MariaDBParser.ASTEXT - 827)) | (1 << (MariaDBParser.ASWKB - 827)) | (1 << (MariaDBParser.ASWKT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DECRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DERIVE - 827)) | (1 << (MariaDBParser.ASYMMETRIC_ENCRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_SIGN - 827)) | (1 << (MariaDBParser.ASYMMETRIC_VERIFY - 827)) | (1 << (MariaDBParser.ATAN - 827)) | (1 << (MariaDBParser.ATAN2 - 827)) | (1 << (MariaDBParser.BENCHMARK - 827)) | (1 << (MariaDBParser.BIN - 827)) | (1 << (MariaDBParser.BIT_COUNT - 827)) | (1 << (MariaDBParser.BIT_LENGTH - 827)) | (1 << (MariaDBParser.BUFFER - 827)) | (1 << (MariaDBParser.CATALOG_NAME - 827)) | (1 << (MariaDBParser.CEIL - 827)) | (1 << (MariaDBParser.CEILING - 827)) | (1 << (MariaDBParser.CENTROID - 827)) | (1 << (MariaDBParser.CHARACTER_LENGTH - 827)) | (1 << (MariaDBParser.CHARSET - 827)) | (1 << (MariaDBParser.CHAR_LENGTH - 827)) | (1 << (MariaDBParser.COERCIBILITY - 827)) | (1 << (MariaDBParser.COLLATION - 827)) | (1 << (MariaDBParser.COMPRESS - 827)) | (1 << (MariaDBParser.CONCAT - 827)) | (1 << (MariaDBParser.CONCAT_WS - 827)) | (1 << (MariaDBParser.CONNECTION_ID - 827)) | (1 << (MariaDBParser.CONV - 827)) | (1 << (MariaDBParser.CONVERT_TZ - 827)) | (1 << (MariaDBParser.COS - 827)))) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & ((1 << (MariaDBParser.COT - 859)) | (1 << (MariaDBParser.CRC32 - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY - 859)) | (1 << (MariaDBParser.CREATE_DH_PARAMETERS - 859)) | (1 << (MariaDBParser.CREATE_DIGEST - 859)) | (1 << (MariaDBParser.CROSSES - 859)) | (1 << (MariaDBParser.DATEDIFF - 859)) | (1 << (MariaDBParser.DATE_FORMAT - 859)) | (1 << (MariaDBParser.DAYNAME - 859)) | (1 << (MariaDBParser.DAYOFMONTH - 859)) | (1 << (MariaDBParser.DAYOFWEEK - 859)) | (1 << (MariaDBParser.DAYOFYEAR - 859)) | (1 << (MariaDBParser.DECODE - 859)) | (1 << (MariaDBParser.DEGREES - 859)) | (1 << (MariaDBParser.DES_DECRYPT - 859)) | (1 << (MariaDBParser.DES_ENCRYPT - 859)) | (1 << (MariaDBParser.DIMENSION - 859)) | (1 << (MariaDBParser.DISJOINT - 859)) | (1 << (MariaDBParser.ELT - 859)) | (1 << (MariaDBParser.ENCODE - 859)) | (1 << (MariaDBParser.ENCRYPT - 859)) | (1 << (MariaDBParser.ENDPOINT - 859)) | (1 << (MariaDBParser.ENGINE_ATTRIBUTE - 859)) | (1 << (MariaDBParser.ENVELOPE - 859)) | (1 << (MariaDBParser.EQUALS - 859)) | (1 << (MariaDBParser.EXP - 859)) | (1 << (MariaDBParser.EXPORT_SET - 859)) | (1 << (MariaDBParser.EXTERIORRING - 859)) | (1 << (MariaDBParser.EXTRACTVALUE - 859)) | (1 << (MariaDBParser.FIELD - 859)) | (1 << (MariaDBParser.FIND_IN_SET - 859)))) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & ((1 << (MariaDBParser.FLOOR - 891)) | (1 << (MariaDBParser.FORMAT - 891)) | (1 << (MariaDBParser.FOUND_ROWS - 891)) | (1 << (MariaDBParser.FROM_BASE64 - 891)) | (1 << (MariaDBParser.FROM_DAYS - 891)) | (1 << (MariaDBParser.FROM_UNIXTIME - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYN - 891)) | (1 << (MariaDBParser.GEOMETRYTYPE - 891)) | (1 << (MariaDBParser.GEOMFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMFROMWKB - 891)) | (1 << (MariaDBParser.GET_FORMAT - 891)) | (1 << (MariaDBParser.GET_LOCK - 891)) | (1 << (MariaDBParser.GLENGTH - 891)) | (1 << (MariaDBParser.GREATEST - 891)) | (1 << (MariaDBParser.GTID_SUBSET - 891)) | (1 << (MariaDBParser.GTID_SUBTRACT - 891)) | (1 << (MariaDBParser.HEX - 891)) | (1 << (MariaDBParser.IFNULL - 891)) | (1 << (MariaDBParser.INET6_ATON - 891)) | (1 << (MariaDBParser.INET6_NTOA - 891)) | (1 << (MariaDBParser.INET_ATON - 891)) | (1 << (MariaDBParser.INET_NTOA - 891)) | (1 << (MariaDBParser.INSTR - 891)) | (1 << (MariaDBParser.INTERIORRINGN - 891)) | (1 << (MariaDBParser.INTERSECTS - 891)) | (1 << (MariaDBParser.ISCLOSED - 891)))) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & ((1 << (MariaDBParser.ISEMPTY - 923)) | (1 << (MariaDBParser.ISNULL - 923)) | (1 << (MariaDBParser.ISSIMPLE - 923)) | (1 << (MariaDBParser.IS_FREE_LOCK - 923)) | (1 << (MariaDBParser.IS_IPV4 - 923)) | (1 << (MariaDBParser.IS_IPV4_COMPAT - 923)) | (1 << (MariaDBParser.IS_IPV4_MAPPED - 923)) | (1 << (MariaDBParser.IS_IPV6 - 923)) | (1 << (MariaDBParser.IS_USED_LOCK - 923)) | (1 << (MariaDBParser.LAST_INSERT_ID - 923)) | (1 << (MariaDBParser.LCASE - 923)) | (1 << (MariaDBParser.LEAST - 923)) | (1 << (MariaDBParser.LENGTH - 923)) | (1 << (MariaDBParser.LINEFROMTEXT - 923)) | (1 << (MariaDBParser.LINEFROMWKB - 923)) | (1 << (MariaDBParser.LINESTRINGFROMTEXT - 923)) | (1 << (MariaDBParser.LINESTRINGFROMWKB - 923)) | (1 << (MariaDBParser.LN - 923)) | (1 << (MariaDBParser.LOAD_FILE - 923)) | (1 << (MariaDBParser.LOCATE - 923)) | (1 << (MariaDBParser.LOG - 923)) | (1 << (MariaDBParser.LOG10 - 923)) | (1 << (MariaDBParser.LOG2 - 923)) | (1 << (MariaDBParser.LOWER - 923)) | (1 << (MariaDBParser.LPAD - 923)) | (1 << (MariaDBParser.LTRIM - 923)) | (1 << (MariaDBParser.MAKEDATE - 923)) | (1 << (MariaDBParser.MAKETIME - 923)) | (1 << (MariaDBParser.MAKE_SET - 923)) | (1 << (MariaDBParser.MASTER_POS_WAIT - 923)) | (1 << (MariaDBParser.MBRCONTAINS - 923)) | (1 << (MariaDBParser.MBRDISJOINT - 923)))) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & ((1 << (MariaDBParser.MBREQUAL - 955)) | (1 << (MariaDBParser.MBRINTERSECTS - 955)) | (1 << (MariaDBParser.MBROVERLAPS - 955)) | (1 << (MariaDBParser.MBRTOUCHES - 955)) | (1 << (MariaDBParser.MBRWITHIN - 955)) | (1 << (MariaDBParser.MD5 - 955)) | (1 << (MariaDBParser.MLINEFROMTEXT - 955)) | (1 << (MariaDBParser.MLINEFROMWKB - 955)) | (1 << (MariaDBParser.MONTHNAME - 955)) | (1 << (MariaDBParser.MPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MPOLYFROMTEXT - 955)) | (1 << (MariaDBParser.MPOLYFROMWKB - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMTEXT - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMWKB - 955)) | (1 << (MariaDBParser.NAME_CONST - 955)) | (1 << (MariaDBParser.NULLIF - 955)) | (1 << (MariaDBParser.NUMGEOMETRIES - 955)) | (1 << (MariaDBParser.NUMINTERIORRINGS - 955)) | (1 << (MariaDBParser.NUMPOINTS - 955)) | (1 << (MariaDBParser.OCT - 955)) | (1 << (MariaDBParser.OCTET_LENGTH - 955)) | (1 << (MariaDBParser.ORD - 955)) | (1 << (MariaDBParser.OVERLAPS - 955)) | (1 << (MariaDBParser.PERIOD_ADD - 955)) | (1 << (MariaDBParser.PERIOD_DIFF - 955)) | (1 << (MariaDBParser.PI - 955)) | (1 << (MariaDBParser.POINTFROMTEXT - 955)))) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & ((1 << (MariaDBParser.POINTFROMWKB - 987)) | (1 << (MariaDBParser.POINTN - 987)) | (1 << (MariaDBParser.POLYFROMTEXT - 987)) | (1 << (MariaDBParser.POLYFROMWKB - 987)) | (1 << (MariaDBParser.POLYGONFROMTEXT - 987)) | (1 << (MariaDBParser.POLYGONFROMWKB - 987)) | (1 << (MariaDBParser.POW - 987)) | (1 << (MariaDBParser.POWER - 987)) | (1 << (MariaDBParser.QUOTE - 987)) | (1 << (MariaDBParser.RADIANS - 987)) | (1 << (MariaDBParser.RAND - 987)) | (1 << (MariaDBParser.RANDOM_BYTES - 987)) | (1 << (MariaDBParser.RELEASE_LOCK - 987)) | (1 << (MariaDBParser.REVERSE - 987)) | (1 << (MariaDBParser.ROUND - 987)) | (1 << (MariaDBParser.ROW_COUNT - 987)) | (1 << (MariaDBParser.RPAD - 987)) | (1 << (MariaDBParser.RTRIM - 987)) | (1 << (MariaDBParser.SEC_TO_TIME - 987)) | (1 << (MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE - 987)) | (1 << (MariaDBParser.SESSION_USER - 987)) | (1 << (MariaDBParser.SHA - 987)) | (1 << (MariaDBParser.SHA1 - 987)) | (1 << (MariaDBParser.SHA2 - 987)) | (1 << (MariaDBParser.SCHEMA_NAME - 987)) | (1 << (MariaDBParser.SIGN - 987)) | (1 << (MariaDBParser.SIN - 987)) | (1 << (MariaDBParser.SLEEP - 987)) | (1 << (MariaDBParser.SOUNDEX - 987)) | (1 << (MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS - 987)) | (1 << (MariaDBParser.SQRT - 987)) | (1 << (MariaDBParser.SRID - 987)))) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & ((1 << (MariaDBParser.STARTPOINT - 1019)) | (1 << (MariaDBParser.STRCMP - 1019)) | (1 << (MariaDBParser.STR_TO_DATE - 1019)) | (1 << (MariaDBParser.ST_AREA - 1019)) | (1 << (MariaDBParser.ST_ASBINARY - 1019)) | (1 << (MariaDBParser.ST_ASTEXT - 1019)) | (1 << (MariaDBParser.ST_ASWKB - 1019)) | (1 << (MariaDBParser.ST_ASWKT - 1019)) | (1 << (MariaDBParser.ST_BUFFER - 1019)) | (1 << (MariaDBParser.ST_CENTROID - 1019)) | (1 << (MariaDBParser.ST_CONTAINS - 1019)) | (1 << (MariaDBParser.ST_CROSSES - 1019)) | (1 << (MariaDBParser.ST_DIFFERENCE - 1019)) | (1 << (MariaDBParser.ST_DIMENSION - 1019)) | (1 << (MariaDBParser.ST_DISJOINT - 1019)) | (1 << (MariaDBParser.ST_DISTANCE - 1019)) | (1 << (MariaDBParser.ST_ENDPOINT - 1019)) | (1 << (MariaDBParser.ST_ENVELOPE - 1019)) | (1 << (MariaDBParser.ST_EQUALS - 1019)) | (1 << (MariaDBParser.ST_EXTERIORRING - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYN - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYTYPE - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMWKB - 1019)) | (1 << (MariaDBParser.ST_INTERIORRINGN - 1019)))) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & ((1 << (MariaDBParser.ST_INTERSECTION - 1051)) | (1 << (MariaDBParser.ST_INTERSECTS - 1051)) | (1 << (MariaDBParser.ST_ISCLOSED - 1051)) | (1 << (MariaDBParser.ST_ISEMPTY - 1051)) | (1 << (MariaDBParser.ST_ISSIMPLE - 1051)) | (1 << (MariaDBParser.ST_LINEFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINEFROMWKB - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMWKB - 1051)) | (1 << (MariaDBParser.ST_NUMGEOMETRIES - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRING - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRINGS - 1051)) | (1 << (MariaDBParser.ST_NUMPOINTS - 1051)) | (1 << (MariaDBParser.ST_OVERLAPS - 1051)) | (1 << (MariaDBParser.ST_POINTFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POINTFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POINTN - 1051)) | (1 << (MariaDBParser.ST_POLYFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMWKB - 1051)) | (1 << (MariaDBParser.ST_SRID - 1051)) | (1 << (MariaDBParser.ST_STARTPOINT - 1051)) | (1 << (MariaDBParser.ST_SYMDIFFERENCE - 1051)) | (1 << (MariaDBParser.ST_TOUCHES - 1051)) | (1 << (MariaDBParser.ST_UNION - 1051)) | (1 << (MariaDBParser.ST_WITHIN - 1051)) | (1 << (MariaDBParser.ST_X - 1051)) | (1 << (MariaDBParser.ST_Y - 1051)) | (1 << (MariaDBParser.SUBDATE - 1051)) | (1 << (MariaDBParser.SUBSTRING_INDEX - 1051)) | (1 << (MariaDBParser.SUBTIME - 1051)))) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & ((1 << (MariaDBParser.SYSTEM_USER - 1083)) | (1 << (MariaDBParser.TAN - 1083)) | (1 << (MariaDBParser.TIMEDIFF - 1083)) | (1 << (MariaDBParser.TIMESTAMPADD - 1083)) | (1 << (MariaDBParser.TIMESTAMPDIFF - 1083)) | (1 << (MariaDBParser.TIME_FORMAT - 1083)) | (1 << (MariaDBParser.TIME_TO_SEC - 1083)) | (1 << (MariaDBParser.TOUCHES - 1083)) | (1 << (MariaDBParser.TO_BASE64 - 1083)) | (1 << (MariaDBParser.TO_DAYS - 1083)) | (1 << (MariaDBParser.TO_SECONDS - 1083)) | (1 << (MariaDBParser.UCASE - 1083)) | (1 << (MariaDBParser.UNCOMPRESS - 1083)) | (1 << (MariaDBParser.UNCOMPRESSED_LENGTH - 1083)) | (1 << (MariaDBParser.UNHEX - 1083)) | (1 << (MariaDBParser.UNIX_TIMESTAMP - 1083)) | (1 << (MariaDBParser.UPDATEXML - 1083)) | (1 << (MariaDBParser.UPPER - 1083)) | (1 << (MariaDBParser.UUID - 1083)) | (1 << (MariaDBParser.UUID_SHORT - 1083)) | (1 << (MariaDBParser.VALIDATE_PASSWORD_STRENGTH - 1083)) | (1 << (MariaDBParser.VERSION - 1083)) | (1 << (MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1083)) | (1 << (MariaDBParser.WEEKDAY - 1083)) | (1 << (MariaDBParser.WEEKOFYEAR - 1083)) | (1 << (MariaDBParser.WEIGHT_STRING - 1083)) | (1 << (MariaDBParser.WITHIN - 1083)) | (1 << (MariaDBParser.YEARWEEK - 1083)) | (1 << (MariaDBParser.Y_FUNCTION - 1083)) | (1 << (MariaDBParser.X_FUNCTION - 1083)) | (1 << (MariaDBParser.VIA - 1083)) | (1 << (MariaDBParser.LASTVAL - 1083)))) !== 0) || ((((_la - 1115)) & ~0x1F) === 0 && ((1 << (_la - 1115)) & ((1 << (MariaDBParser.NEXTVAL - 1115)) | (1 << (MariaDBParser.SETVAL - 1115)) | (1 << (MariaDBParser.PREVIOUS - 1115)) | (1 << (MariaDBParser.PERSISTENT - 1115)) | (1 << (MariaDBParser.BINLOG_MONITOR - 1115)) | (1 << (MariaDBParser.BINLOG_REPLAY - 1115)) | (1 << (MariaDBParser.FEDERATED_ADMIN - 1115)) | (1 << (MariaDBParser.READ_ONLY_ADMIN - 1115)) | (1 << (MariaDBParser.REPLICA - 1115)) | (1 << (MariaDBParser.REPLICAS - 1115)) | (1 << (MariaDBParser.REPLICATION_MASTER_ADMIN - 1115)) | (1 << (MariaDBParser.MONITOR - 1115)) | (1 << (MariaDBParser.READ_ONLY - 1115)) | (1 << (MariaDBParser.REPLAY - 1115)) | (1 << (MariaDBParser.MOD - 1115)))) !== 0) || ((((_la - 1166)) & ~0x1F) === 0 && ((1 << (_la - 1166)) & ((1 << (MariaDBParser.CHARSET_REVERSE_QOUTE_STRING - 1166)) | (1 << (MariaDBParser.STRING_LITERAL - 1166)) | (1 << (MariaDBParser.ID - 1166)))) !== 0)) {
						{
						this.state = 1843;
						(_localctx as CheckTableConstraintContext)._name = this.uid();
						}
					}

					}
				}

				this.state = 1848;
				this.match(MariaDBParser.CHECK);
				this.state = 1849;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 1850;
				this.expression(0);
				this.state = 1851;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public referenceDefinition(): ReferenceDefinitionContext {
		let _localctx: ReferenceDefinitionContext = new ReferenceDefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 104, MariaDBParser.RULE_referenceDefinition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1855;
			this.match(MariaDBParser.REFERENCES);
			this.state = 1856;
			this.tableName();
			this.state = 1858;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 196, this._ctx) ) {
			case 1:
				{
				this.state = 1857;
				this.indexColumnNames();
				}
				break;
			}
			this.state = 1862;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.MATCH) {
				{
				this.state = 1860;
				this.match(MariaDBParser.MATCH);
				this.state = 1861;
				_localctx._matchType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.FULL || _la === MariaDBParser.PARTIAL || _la === MariaDBParser.SIMPLE)) {
					_localctx._matchType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 1865;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 198, this._ctx) ) {
			case 1:
				{
				this.state = 1864;
				this.referenceAction();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public referenceAction(): ReferenceActionContext {
		let _localctx: ReferenceActionContext = new ReferenceActionContext(this._ctx, this.state);
		this.enterRule(_localctx, 106, MariaDBParser.RULE_referenceAction);
		try {
			this.state = 1883;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 201, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1867;
				this.match(MariaDBParser.ON);
				this.state = 1868;
				this.match(MariaDBParser.DELETE);
				this.state = 1869;
				_localctx._onDelete = this.referenceControlType();
				this.state = 1873;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 199, this._ctx) ) {
				case 1:
					{
					this.state = 1870;
					this.match(MariaDBParser.ON);
					this.state = 1871;
					this.match(MariaDBParser.UPDATE);
					this.state = 1872;
					_localctx._onUpdate = this.referenceControlType();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1875;
				this.match(MariaDBParser.ON);
				this.state = 1876;
				this.match(MariaDBParser.UPDATE);
				this.state = 1877;
				_localctx._onUpdate = this.referenceControlType();
				this.state = 1881;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 200, this._ctx) ) {
				case 1:
					{
					this.state = 1878;
					this.match(MariaDBParser.ON);
					this.state = 1879;
					this.match(MariaDBParser.DELETE);
					this.state = 1880;
					_localctx._onDelete = this.referenceControlType();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public referenceControlType(): ReferenceControlTypeContext {
		let _localctx: ReferenceControlTypeContext = new ReferenceControlTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 108, MariaDBParser.RULE_referenceControlType);
		try {
			this.state = 1891;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.RESTRICT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1885;
				this.match(MariaDBParser.RESTRICT);
				}
				break;
			case MariaDBParser.CASCADE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1886;
				this.match(MariaDBParser.CASCADE);
				}
				break;
			case MariaDBParser.SET:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1887;
				this.match(MariaDBParser.SET);
				this.state = 1888;
				this.match(MariaDBParser.NULL_LITERAL);
				}
				break;
			case MariaDBParser.NO:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1889;
				this.match(MariaDBParser.NO);
				this.state = 1890;
				this.match(MariaDBParser.ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexColumnDefinition(): IndexColumnDefinitionContext {
		let _localctx: IndexColumnDefinitionContext = new IndexColumnDefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 110, MariaDBParser.RULE_indexColumnDefinition);
		let _la: number;
		try {
			this.state = 1921;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.INDEX:
			case MariaDBParser.KEY:
				_localctx = new SimpleIndexDeclarationContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1893;
				(_localctx as SimpleIndexDeclarationContext)._indexFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.INDEX || _la === MariaDBParser.KEY)) {
					(_localctx as SimpleIndexDeclarationContext)._indexFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1895;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MariaDBParser.ATTRIBUTE) | (1 << MariaDBParser.BODY) | (1 << MariaDBParser.BUCKETS) | (1 << MariaDBParser.CONDITION))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (MariaDBParser.CURRENT - 36)) | (1 << (MariaDBParser.CURRENT_ROLE - 36)) | (1 << (MariaDBParser.CURRENT_USER - 36)) | (1 << (MariaDBParser.DATABASE - 36)) | (1 << (MariaDBParser.DEFAULT - 36)) | (1 << (MariaDBParser.DIAGNOSTICS - 36)) | (1 << (MariaDBParser.EMPTY - 36)) | (1 << (MariaDBParser.EXCEPT - 36)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (MariaDBParser.GROUP - 73)) | (1 << (MariaDBParser.IF - 73)) | (1 << (MariaDBParser.IGNORED - 73)) | (1 << (MariaDBParser.INSERT - 73)) | (1 << (MariaDBParser.LATERAL - 73)) | (1 << (MariaDBParser.LEFT - 73)) | (1 << (MariaDBParser.LOCKED - 73)))) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & ((1 << (MariaDBParser.MAXVALUE - 110)) | (1 << (MariaDBParser.MINVALUE - 110)) | (1 << (MariaDBParser.NUMBER - 110)) | (1 << (MariaDBParser.OPTIONAL - 110)) | (1 << (MariaDBParser.ORDER - 110)) | (1 << (MariaDBParser.PRIMARY - 110)) | (1 << (MariaDBParser.PACKAGE - 110)))) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (MariaDBParser.REPLACE - 142)) | (1 << (MariaDBParser.RIGHT - 142)) | (1 << (MariaDBParser.SCHEMA - 142)) | (1 << (MariaDBParser.SKIP_ - 142)) | (1 << (MariaDBParser.STACKED - 142)) | (1 << (MariaDBParser.STATEMENT - 142)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MariaDBParser.DATE - 217)) | (1 << (MariaDBParser.TIME - 217)) | (1 << (MariaDBParser.TIMESTAMP - 217)) | (1 << (MariaDBParser.DATETIME - 217)) | (1 << (MariaDBParser.YEAR - 217)) | (1 << (MariaDBParser.BINARY - 217)) | (1 << (MariaDBParser.TEXT - 217)) | (1 << (MariaDBParser.ENUM - 217)) | (1 << (MariaDBParser.SERIAL - 217)))) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & ((1 << (MariaDBParser.JSON_ARRAY - 251)) | (1 << (MariaDBParser.JSON_ARRAYAGG - 251)) | (1 << (MariaDBParser.JSON_ARRAY_APPEND - 251)) | (1 << (MariaDBParser.JSON_ARRAY_INSERT - 251)) | (1 << (MariaDBParser.JSON_CONTAINS - 251)) | (1 << (MariaDBParser.JSON_CONTAINS_PATH - 251)) | (1 << (MariaDBParser.JSON_DEPTH - 251)) | (1 << (MariaDBParser.JSON_EXTRACT - 251)) | (1 << (MariaDBParser.JSON_INSERT - 251)) | (1 << (MariaDBParser.JSON_KEYS - 251)) | (1 << (MariaDBParser.JSON_LENGTH - 251)) | (1 << (MariaDBParser.JSON_MERGE - 251)) | (1 << (MariaDBParser.JSON_MERGE_PATCH - 251)) | (1 << (MariaDBParser.JSON_MERGE_PRESERVE - 251)) | (1 << (MariaDBParser.JSON_OBJECT - 251)) | (1 << (MariaDBParser.JSON_OBJECTAGG - 251)) | (1 << (MariaDBParser.JSON_OVERLAPS - 251)) | (1 << (MariaDBParser.JSON_PRETTY - 251)) | (1 << (MariaDBParser.JSON_QUOTE - 251)) | (1 << (MariaDBParser.JSON_REMOVE - 251)) | (1 << (MariaDBParser.JSON_REPLACE - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALID - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT - 251)) | (1 << (MariaDBParser.JSON_SEARCH - 251)) | (1 << (MariaDBParser.JSON_SET - 251)) | (1 << (MariaDBParser.JSON_STORAGE_FREE - 251)) | (1 << (MariaDBParser.JSON_STORAGE_SIZE - 251)) | (1 << (MariaDBParser.JSON_TABLE - 251)) | (1 << (MariaDBParser.JSON_TYPE - 251)) | (1 << (MariaDBParser.JSON_UNQUOTE - 251)) | (1 << (MariaDBParser.JSON_VALID - 251)) | (1 << (MariaDBParser.JSON_VALUE - 251)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (MariaDBParser.NESTED - 283)) | (1 << (MariaDBParser.ORDINALITY - 283)) | (1 << (MariaDBParser.PATH - 283)) | (1 << (MariaDBParser.AVG - 283)) | (1 << (MariaDBParser.BIT_AND - 283)) | (1 << (MariaDBParser.BIT_OR - 283)) | (1 << (MariaDBParser.BIT_XOR - 283)) | (1 << (MariaDBParser.COUNT - 283)) | (1 << (MariaDBParser.CUME_DIST - 283)) | (1 << (MariaDBParser.DENSE_RANK - 283)) | (1 << (MariaDBParser.FIRST_VALUE - 283)) | (1 << (MariaDBParser.GROUP_CONCAT - 283)) | (1 << (MariaDBParser.LAG - 283)) | (1 << (MariaDBParser.LAST_VALUE - 283)) | (1 << (MariaDBParser.LEAD - 283)) | (1 << (MariaDBParser.MAX - 283)) | (1 << (MariaDBParser.MIN - 283)) | (1 << (MariaDBParser.NTILE - 283)) | (1 << (MariaDBParser.NTH_VALUE - 283)) | (1 << (MariaDBParser.PERCENT_RANK - 283)) | (1 << (MariaDBParser.RANK - 283)) | (1 << (MariaDBParser.ROW_NUMBER - 283)) | (1 << (MariaDBParser.STD - 283)) | (1 << (MariaDBParser.STDDEV - 283)) | (1 << (MariaDBParser.STDDEV_POP - 283)) | (1 << (MariaDBParser.STDDEV_SAMP - 283)) | (1 << (MariaDBParser.SUM - 283)) | (1 << (MariaDBParser.VAR_POP - 283)) | (1 << (MariaDBParser.VAR_SAMP - 283)) | (1 << (MariaDBParser.VARIANCE - 283)) | (1 << (MariaDBParser.CURRENT_DATE - 283)) | (1 << (MariaDBParser.CURRENT_TIME - 283)))) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & ((1 << (MariaDBParser.CURRENT_TIMESTAMP - 315)) | (1 << (MariaDBParser.LOCALTIME - 315)) | (1 << (MariaDBParser.CURDATE - 315)) | (1 << (MariaDBParser.CURTIME - 315)) | (1 << (MariaDBParser.DATE_ADD - 315)) | (1 << (MariaDBParser.DATE_SUB - 315)) | (1 << (MariaDBParser.LOCALTIMESTAMP - 315)) | (1 << (MariaDBParser.NOW - 315)) | (1 << (MariaDBParser.POSITION - 315)) | (1 << (MariaDBParser.SUBSTR - 315)) | (1 << (MariaDBParser.SUBSTRING - 315)) | (1 << (MariaDBParser.SYSDATE - 315)) | (1 << (MariaDBParser.TRIM - 315)) | (1 << (MariaDBParser.UTC_DATE - 315)) | (1 << (MariaDBParser.UTC_TIME - 315)) | (1 << (MariaDBParser.UTC_TIMESTAMP - 315)) | (1 << (MariaDBParser.ACCOUNT - 315)) | (1 << (MariaDBParser.ACTION - 315)) | (1 << (MariaDBParser.AFTER - 315)) | (1 << (MariaDBParser.AGGREGATE - 315)) | (1 << (MariaDBParser.ALGORITHM - 315)) | (1 << (MariaDBParser.ANY - 315)) | (1 << (MariaDBParser.AT - 315)) | (1 << (MariaDBParser.AUTHORS - 315)) | (1 << (MariaDBParser.AUTOCOMMIT - 315)) | (1 << (MariaDBParser.AUTOEXTEND_SIZE - 315)) | (1 << (MariaDBParser.AUTO_INCREMENT - 315)) | (1 << (MariaDBParser.AVG_ROW_LENGTH - 315)) | (1 << (MariaDBParser.BEGIN - 315)) | (1 << (MariaDBParser.BINLOG - 315)) | (1 << (MariaDBParser.BIT - 315)))) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & ((1 << (MariaDBParser.BLOCK - 347)) | (1 << (MariaDBParser.BOOL - 347)) | (1 << (MariaDBParser.BOOLEAN - 347)) | (1 << (MariaDBParser.BTREE - 347)) | (1 << (MariaDBParser.CACHE - 347)) | (1 << (MariaDBParser.CASCADED - 347)) | (1 << (MariaDBParser.CHAIN - 347)) | (1 << (MariaDBParser.CHANGED - 347)) | (1 << (MariaDBParser.CHANNEL - 347)) | (1 << (MariaDBParser.CHECKSUM - 347)) | (1 << (MariaDBParser.PAGE_CHECKSUM - 347)) | (1 << (MariaDBParser.CIPHER - 347)) | (1 << (MariaDBParser.CLASS_ORIGIN - 347)) | (1 << (MariaDBParser.CLIENT - 347)) | (1 << (MariaDBParser.CLOSE - 347)) | (1 << (MariaDBParser.CLUSTERING - 347)) | (1 << (MariaDBParser.COALESCE - 347)) | (1 << (MariaDBParser.CODE - 347)) | (1 << (MariaDBParser.COLUMNS - 347)) | (1 << (MariaDBParser.COLUMN_FORMAT - 347)) | (1 << (MariaDBParser.COLUMN_NAME - 347)) | (1 << (MariaDBParser.COMMENT - 347)) | (1 << (MariaDBParser.COMMIT - 347)) | (1 << (MariaDBParser.COMPACT - 347)) | (1 << (MariaDBParser.COMPLETION - 347)) | (1 << (MariaDBParser.COMPRESSED - 347)) | (1 << (MariaDBParser.COMPRESSION - 347)) | (1 << (MariaDBParser.CONCURRENT - 347)) | (1 << (MariaDBParser.CONNECT - 347)) | (1 << (MariaDBParser.CONNECTION - 347)) | (1 << (MariaDBParser.CONSISTENT - 347)) | (1 << (MariaDBParser.CONSTRAINT_CATALOG - 347)))) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & ((1 << (MariaDBParser.CONSTRAINT_SCHEMA - 379)) | (1 << (MariaDBParser.CONSTRAINT_NAME - 379)) | (1 << (MariaDBParser.CONTAINS - 379)) | (1 << (MariaDBParser.CONTEXT - 379)) | (1 << (MariaDBParser.CONTRIBUTORS - 379)) | (1 << (MariaDBParser.COPY - 379)) | (1 << (MariaDBParser.CPU - 379)) | (1 << (MariaDBParser.CYCLE - 379)) | (1 << (MariaDBParser.CURSOR_NAME - 379)) | (1 << (MariaDBParser.DATA - 379)) | (1 << (MariaDBParser.DATAFILE - 379)) | (1 << (MariaDBParser.DEALLOCATE - 379)) | (1 << (MariaDBParser.DEFAULT_AUTH - 379)) | (1 << (MariaDBParser.DEFINER - 379)) | (1 << (MariaDBParser.DELAY_KEY_WRITE - 379)) | (1 << (MariaDBParser.DES_KEY_FILE - 379)) | (1 << (MariaDBParser.DIRECTORY - 379)) | (1 << (MariaDBParser.DISABLE - 379)) | (1 << (MariaDBParser.DISCARD - 379)) | (1 << (MariaDBParser.DISK - 379)) | (1 << (MariaDBParser.DO - 379)) | (1 << (MariaDBParser.DUMPFILE - 379)) | (1 << (MariaDBParser.DUPLICATE - 379)) | (1 << (MariaDBParser.DYNAMIC - 379)) | (1 << (MariaDBParser.ENABLE - 379)) | (1 << (MariaDBParser.ENCRYPTED - 379)) | (1 << (MariaDBParser.ENCRYPTION - 379)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ID - 379)) | (1 << (MariaDBParser.END - 379)) | (1 << (MariaDBParser.ENDS - 379)) | (1 << (MariaDBParser.ENGINE - 379)) | (1 << (MariaDBParser.ENGINES - 379)))) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & ((1 << (MariaDBParser.ERROR - 411)) | (1 << (MariaDBParser.ERRORS - 411)) | (1 << (MariaDBParser.ESCAPE - 411)) | (1 << (MariaDBParser.EVEN - 411)) | (1 << (MariaDBParser.EVENT - 411)) | (1 << (MariaDBParser.EVENTS - 411)) | (1 << (MariaDBParser.EVERY - 411)) | (1 << (MariaDBParser.EXCHANGE - 411)) | (1 << (MariaDBParser.EXCLUSIVE - 411)) | (1 << (MariaDBParser.EXPIRE - 411)) | (1 << (MariaDBParser.EXPORT - 411)) | (1 << (MariaDBParser.EXTENDED - 411)) | (1 << (MariaDBParser.EXTENT_SIZE - 411)) | (1 << (MariaDBParser.FAILED_LOGIN_ATTEMPTS - 411)) | (1 << (MariaDBParser.FAST - 411)) | (1 << (MariaDBParser.FAULTS - 411)) | (1 << (MariaDBParser.FIELDS - 411)) | (1 << (MariaDBParser.FILE_BLOCK_SIZE - 411)) | (1 << (MariaDBParser.FILTER - 411)) | (1 << (MariaDBParser.FIRST - 411)) | (1 << (MariaDBParser.FIXED - 411)) | (1 << (MariaDBParser.FLUSH - 411)) | (1 << (MariaDBParser.FOLLOWS - 411)) | (1 << (MariaDBParser.FOUND - 411)) | (1 << (MariaDBParser.FULL - 411)) | (1 << (MariaDBParser.FUNCTION - 411)) | (1 << (MariaDBParser.GENERAL - 411)) | (1 << (MariaDBParser.GLOBAL - 411)) | (1 << (MariaDBParser.GRANTS - 411)) | (1 << (MariaDBParser.GROUP_REPLICATION - 411)) | (1 << (MariaDBParser.HANDLER - 411)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (MariaDBParser.HASH - 443)) | (1 << (MariaDBParser.HELP - 443)) | (1 << (MariaDBParser.HISTORY - 443)) | (1 << (MariaDBParser.HOST - 443)) | (1 << (MariaDBParser.HOSTS - 443)) | (1 << (MariaDBParser.IDENTIFIED - 443)) | (1 << (MariaDBParser.IGNORE_SERVER_IDS - 443)) | (1 << (MariaDBParser.IMPORT - 443)) | (1 << (MariaDBParser.INCREMENT - 443)) | (1 << (MariaDBParser.INDEXES - 443)) | (1 << (MariaDBParser.INITIAL_SIZE - 443)) | (1 << (MariaDBParser.INPLACE - 443)) | (1 << (MariaDBParser.INSERT_METHOD - 443)) | (1 << (MariaDBParser.INSTALL - 443)) | (1 << (MariaDBParser.INSTANCE - 443)) | (1 << (MariaDBParser.INSTANT - 443)) | (1 << (MariaDBParser.INVISIBLE - 443)) | (1 << (MariaDBParser.INVOKER - 443)) | (1 << (MariaDBParser.IO - 443)) | (1 << (MariaDBParser.IO_THREAD - 443)) | (1 << (MariaDBParser.IPC - 443)) | (1 << (MariaDBParser.ISOLATION - 443)) | (1 << (MariaDBParser.ISSUER - 443)) | (1 << (MariaDBParser.JSON - 443)) | (1 << (MariaDBParser.KEY_BLOCK_SIZE - 443)) | (1 << (MariaDBParser.LANGUAGE - 443)) | (1 << (MariaDBParser.LAST - 443)) | (1 << (MariaDBParser.LEAVES - 443)) | (1 << (MariaDBParser.LESS - 443)) | (1 << (MariaDBParser.LEVEL - 443)) | (1 << (MariaDBParser.LIST - 443)) | (1 << (MariaDBParser.LOCAL - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (MariaDBParser.LOCALES - 475)) | (1 << (MariaDBParser.LOGFILE - 475)) | (1 << (MariaDBParser.LOGS - 475)) | (1 << (MariaDBParser.MASTER - 475)) | (1 << (MariaDBParser.MASTER_AUTO_POSITION - 475)) | (1 << (MariaDBParser.MASTER_CONNECT_RETRY - 475)) | (1 << (MariaDBParser.MASTER_DELAY - 475)) | (1 << (MariaDBParser.MASTER_HEARTBEAT_PERIOD - 475)) | (1 << (MariaDBParser.MASTER_HOST - 475)) | (1 << (MariaDBParser.MASTER_LOG_FILE - 475)) | (1 << (MariaDBParser.MASTER_LOG_POS - 475)) | (1 << (MariaDBParser.MASTER_PASSWORD - 475)) | (1 << (MariaDBParser.MASTER_PORT - 475)) | (1 << (MariaDBParser.MASTER_RETRY_COUNT - 475)) | (1 << (MariaDBParser.MASTER_SSL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CA - 475)) | (1 << (MariaDBParser.MASTER_SSL_CAPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_CERT - 475)) | (1 << (MariaDBParser.MASTER_SSL_CIPHER - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRLPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_KEY - 475)) | (1 << (MariaDBParser.MASTER_TLS_VERSION - 475)) | (1 << (MariaDBParser.MASTER_USER - 475)) | (1 << (MariaDBParser.MAX_CONNECTIONS_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_QUERIES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_ROWS - 475)) | (1 << (MariaDBParser.MAX_SIZE - 475)) | (1 << (MariaDBParser.MAX_UPDATES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_USER_CONNECTIONS - 475)) | (1 << (MariaDBParser.MEDIUM - 475)) | (1 << (MariaDBParser.MEMBER - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (MariaDBParser.MERGE - 507)) | (1 << (MariaDBParser.MESSAGE_TEXT - 507)) | (1 << (MariaDBParser.MID - 507)) | (1 << (MariaDBParser.MIGRATE - 507)) | (1 << (MariaDBParser.MIN_ROWS - 507)) | (1 << (MariaDBParser.MODE - 507)) | (1 << (MariaDBParser.MODIFY - 507)) | (1 << (MariaDBParser.MUTEX - 507)) | (1 << (MariaDBParser.MYSQL - 507)) | (1 << (MariaDBParser.MYSQL_ERRNO - 507)) | (1 << (MariaDBParser.NAME - 507)) | (1 << (MariaDBParser.NAMES - 507)) | (1 << (MariaDBParser.NCHAR - 507)) | (1 << (MariaDBParser.NEVER - 507)) | (1 << (MariaDBParser.NEXT - 507)) | (1 << (MariaDBParser.NO - 507)) | (1 << (MariaDBParser.NOCACHE - 507)) | (1 << (MariaDBParser.NOCOPY - 507)) | (1 << (MariaDBParser.NOCYCLE - 507)) | (1 << (MariaDBParser.NOMAXVALUE - 507)) | (1 << (MariaDBParser.NOMINVALUE - 507)) | (1 << (MariaDBParser.NOWAIT - 507)) | (1 << (MariaDBParser.NODEGROUP - 507)) | (1 << (MariaDBParser.NONE - 507)) | (1 << (MariaDBParser.ODBC - 507)) | (1 << (MariaDBParser.OFFLINE - 507)) | (1 << (MariaDBParser.OFFSET - 507)) | (1 << (MariaDBParser.OF - 507)) | (1 << (MariaDBParser.OJ - 507)) | (1 << (MariaDBParser.OLD_PASSWORD - 507)) | (1 << (MariaDBParser.ONE - 507)) | (1 << (MariaDBParser.ONLINE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (MariaDBParser.ONLY - 539)) | (1 << (MariaDBParser.OPEN - 539)) | (1 << (MariaDBParser.OPTIMIZER_COSTS - 539)) | (1 << (MariaDBParser.OPTIONS - 539)) | (1 << (MariaDBParser.OWNER - 539)) | (1 << (MariaDBParser.PACK_KEYS - 539)) | (1 << (MariaDBParser.PAGE - 539)) | (1 << (MariaDBParser.PARSER - 539)) | (1 << (MariaDBParser.PARTIAL - 539)) | (1 << (MariaDBParser.PARTITIONING - 539)) | (1 << (MariaDBParser.PARTITIONS - 539)) | (1 << (MariaDBParser.PASSWORD - 539)) | (1 << (MariaDBParser.PASSWORD_LOCK_TIME - 539)) | (1 << (MariaDBParser.PHASE - 539)) | (1 << (MariaDBParser.PLUGIN - 539)) | (1 << (MariaDBParser.PLUGIN_DIR - 539)) | (1 << (MariaDBParser.PLUGINS - 539)) | (1 << (MariaDBParser.PORT - 539)) | (1 << (MariaDBParser.PRECEDES - 539)) | (1 << (MariaDBParser.PREPARE - 539)) | (1 << (MariaDBParser.PRESERVE - 539)) | (1 << (MariaDBParser.PREV - 539)) | (1 << (MariaDBParser.PROCESSLIST - 539)) | (1 << (MariaDBParser.PROFILE - 539)) | (1 << (MariaDBParser.PROFILES - 539)) | (1 << (MariaDBParser.PROXY - 539)) | (1 << (MariaDBParser.QUERY - 539)) | (1 << (MariaDBParser.QUERY_RESPONSE_TIME - 539)) | (1 << (MariaDBParser.QUICK - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (MariaDBParser.REBUILD - 571)) | (1 << (MariaDBParser.RECOVER - 571)) | (1 << (MariaDBParser.RECURSIVE - 571)) | (1 << (MariaDBParser.REDO_BUFFER_SIZE - 571)) | (1 << (MariaDBParser.REDUNDANT - 571)) | (1 << (MariaDBParser.RELAY - 571)) | (1 << (MariaDBParser.RELAY_LOG_FILE - 571)) | (1 << (MariaDBParser.RELAY_LOG_POS - 571)) | (1 << (MariaDBParser.RELAYLOG - 571)) | (1 << (MariaDBParser.REMOVE - 571)) | (1 << (MariaDBParser.REORGANIZE - 571)) | (1 << (MariaDBParser.REPAIR - 571)) | (1 << (MariaDBParser.REPLICATE_DO_DB - 571)) | (1 << (MariaDBParser.REPLICATE_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_REWRITE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATION - 571)) | (1 << (MariaDBParser.RESET - 571)) | (1 << (MariaDBParser.RESTART - 571)) | (1 << (MariaDBParser.RESUME - 571)) | (1 << (MariaDBParser.RETURNED_SQLSTATE - 571)) | (1 << (MariaDBParser.RETURNS - 571)) | (1 << (MariaDBParser.REUSE - 571)) | (1 << (MariaDBParser.ROLE - 571)) | (1 << (MariaDBParser.ROLLBACK - 571)) | (1 << (MariaDBParser.ROLLUP - 571)) | (1 << (MariaDBParser.ROTATE - 571)) | (1 << (MariaDBParser.ROW - 571)))) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & ((1 << (MariaDBParser.ROWS - 603)) | (1 << (MariaDBParser.ROW_FORMAT - 603)) | (1 << (MariaDBParser.RTREE - 603)) | (1 << (MariaDBParser.SAVEPOINT - 603)) | (1 << (MariaDBParser.SCHEDULE - 603)) | (1 << (MariaDBParser.SECURITY - 603)) | (1 << (MariaDBParser.SEQUENCE - 603)) | (1 << (MariaDBParser.SERVER - 603)) | (1 << (MariaDBParser.SESSION - 603)) | (1 << (MariaDBParser.SHARE - 603)) | (1 << (MariaDBParser.SHARED - 603)) | (1 << (MariaDBParser.SIGNED - 603)) | (1 << (MariaDBParser.SIMPLE - 603)) | (1 << (MariaDBParser.SLAVE - 603)) | (1 << (MariaDBParser.SLAVES - 603)) | (1 << (MariaDBParser.SLOW - 603)) | (1 << (MariaDBParser.SNAPSHOT - 603)) | (1 << (MariaDBParser.SOCKET - 603)) | (1 << (MariaDBParser.SOME - 603)) | (1 << (MariaDBParser.SONAME - 603)) | (1 << (MariaDBParser.SOUNDS - 603)) | (1 << (MariaDBParser.SOURCE - 603)) | (1 << (MariaDBParser.SQL_AFTER_GTIDS - 603)) | (1 << (MariaDBParser.SQL_AFTER_MTS_GAPS - 603)) | (1 << (MariaDBParser.SQL_BEFORE_GTIDS - 603)) | (1 << (MariaDBParser.SQL_BUFFER_RESULT - 603)) | (1 << (MariaDBParser.SQL_CACHE - 603)) | (1 << (MariaDBParser.SQL_NO_CACHE - 603)) | (1 << (MariaDBParser.SQL_THREAD - 603)) | (1 << (MariaDBParser.START - 603)) | (1 << (MariaDBParser.STARTS - 603)) | (1 << (MariaDBParser.STATS_AUTO_RECALC - 603)))) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & ((1 << (MariaDBParser.STATS_PERSISTENT - 635)) | (1 << (MariaDBParser.STATS_SAMPLE_PAGES - 635)) | (1 << (MariaDBParser.STATUS - 635)) | (1 << (MariaDBParser.STOP - 635)) | (1 << (MariaDBParser.STORAGE - 635)) | (1 << (MariaDBParser.STRING - 635)) | (1 << (MariaDBParser.SUBCLASS_ORIGIN - 635)) | (1 << (MariaDBParser.SUBJECT - 635)) | (1 << (MariaDBParser.SUBPARTITION - 635)) | (1 << (MariaDBParser.SUBPARTITIONS - 635)) | (1 << (MariaDBParser.SUSPEND - 635)) | (1 << (MariaDBParser.SWAPS - 635)) | (1 << (MariaDBParser.SWITCHES - 635)) | (1 << (MariaDBParser.TABLE_NAME - 635)) | (1 << (MariaDBParser.TABLESPACE - 635)) | (1 << (MariaDBParser.TABLE_TYPE - 635)) | (1 << (MariaDBParser.TEMPORARY - 635)) | (1 << (MariaDBParser.TEMPTABLE - 635)) | (1 << (MariaDBParser.THAN - 635)) | (1 << (MariaDBParser.TRADITIONAL - 635)) | (1 << (MariaDBParser.TRANSACTION - 635)) | (1 << (MariaDBParser.TRANSACTIONAL - 635)) | (1 << (MariaDBParser.TRIGGERS - 635)) | (1 << (MariaDBParser.TRUNCATE - 635)) | (1 << (MariaDBParser.TYPES - 635)) | (1 << (MariaDBParser.UNBOUNDED - 635)) | (1 << (MariaDBParser.UNDEFINED - 635)) | (1 << (MariaDBParser.UNDOFILE - 635)) | (1 << (MariaDBParser.UNDO_BUFFER_SIZE - 635)) | (1 << (MariaDBParser.UNINSTALL - 635)) | (1 << (MariaDBParser.UNKNOWN - 635)))) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & ((1 << (MariaDBParser.UNTIL - 667)) | (1 << (MariaDBParser.UPGRADE - 667)) | (1 << (MariaDBParser.USER - 667)) | (1 << (MariaDBParser.USE_FRM - 667)) | (1 << (MariaDBParser.USER_RESOURCES - 667)) | (1 << (MariaDBParser.VALIDATION - 667)) | (1 << (MariaDBParser.VALUE - 667)) | (1 << (MariaDBParser.VARIABLES - 667)) | (1 << (MariaDBParser.VIEW - 667)) | (1 << (MariaDBParser.VIRTUAL - 667)) | (1 << (MariaDBParser.VISIBLE - 667)) | (1 << (MariaDBParser.WAIT - 667)) | (1 << (MariaDBParser.WARNINGS - 667)) | (1 << (MariaDBParser.WITHOUT - 667)) | (1 << (MariaDBParser.WORK - 667)) | (1 << (MariaDBParser.WRAPPER - 667)) | (1 << (MariaDBParser.WSREP_MEMBERSHIP - 667)) | (1 << (MariaDBParser.WSREP_STATUS - 667)) | (1 << (MariaDBParser.X509 - 667)) | (1 << (MariaDBParser.XA - 667)) | (1 << (MariaDBParser.XML - 667)) | (1 << (MariaDBParser.EUR - 667)) | (1 << (MariaDBParser.USA - 667)) | (1 << (MariaDBParser.JIS - 667)) | (1 << (MariaDBParser.ISO - 667)) | (1 << (MariaDBParser.INTERNAL - 667)) | (1 << (MariaDBParser.QUARTER - 667)) | (1 << (MariaDBParser.MONTH - 667)) | (1 << (MariaDBParser.DAY - 667)) | (1 << (MariaDBParser.HOUR - 667)))) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & ((1 << (MariaDBParser.MINUTE - 699)) | (1 << (MariaDBParser.WEEK - 699)) | (1 << (MariaDBParser.SECOND - 699)) | (1 << (MariaDBParser.MICROSECOND - 699)) | (1 << (MariaDBParser.USER_STATISTICS - 699)) | (1 << (MariaDBParser.CLIENT_STATISTICS - 699)) | (1 << (MariaDBParser.INDEX_STATISTICS - 699)) | (1 << (MariaDBParser.TABLE_STATISTICS - 699)) | (1 << (MariaDBParser.ADMIN - 699)) | (1 << (MariaDBParser.AUDIT_ADMIN - 699)) | (1 << (MariaDBParser.BACKUP_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ENCRYPTION_ADMIN - 699)) | (1 << (MariaDBParser.CLONE_ADMIN - 699)) | (1 << (MariaDBParser.CONNECTION_ADMIN - 699)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ADMIN - 699)) | (1 << (MariaDBParser.EXECUTE - 699)) | (1 << (MariaDBParser.FILE - 699)) | (1 << (MariaDBParser.FIREWALL_ADMIN - 699)) | (1 << (MariaDBParser.FIREWALL_USER - 699)) | (1 << (MariaDBParser.GROUP_REPLICATION_ADMIN - 699)) | (1 << (MariaDBParser.INNODB_REDO_LOG_ARCHIVE - 699)) | (1 << (MariaDBParser.INVOKE - 699)) | (1 << (MariaDBParser.LAMBDA - 699)) | (1 << (MariaDBParser.NDB_STORED_USER - 699)) | (1 << (MariaDBParser.PASSWORDLESS_USER_ADMIN - 699)))) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & ((1 << (MariaDBParser.PERSIST_RO_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.PRIVILEGES - 731)) | (1 << (MariaDBParser.PROCESS - 731)) | (1 << (MariaDBParser.RELOAD - 731)) | (1 << (MariaDBParser.REPLICATION_APPLIER - 731)) | (1 << (MariaDBParser.REPLICATION_SLAVE_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_USER - 731)) | (1 << (MariaDBParser.ROLE_ADMIN - 731)) | (1 << (MariaDBParser.ROUTINE - 731)) | (1 << (MariaDBParser.S3 - 731)) | (1 << (MariaDBParser.SESSION_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.SET_USER_ID - 731)) | (1 << (MariaDBParser.SHOW_ROUTINE - 731)) | (1 << (MariaDBParser.SHUTDOWN - 731)) | (1 << (MariaDBParser.SUPER - 731)) | (1 << (MariaDBParser.SYSTEM_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.TABLES - 731)) | (1 << (MariaDBParser.TABLE_ENCRYPTION_ADMIN - 731)) | (1 << (MariaDBParser.VERSION_TOKEN_ADMIN - 731)) | (1 << (MariaDBParser.XA_RECOVER_ADMIN - 731)) | (1 << (MariaDBParser.ARMSCII8 - 731)) | (1 << (MariaDBParser.ASCII - 731)) | (1 << (MariaDBParser.BIG5 - 731)) | (1 << (MariaDBParser.CP1250 - 731)) | (1 << (MariaDBParser.CP1251 - 731)) | (1 << (MariaDBParser.CP1256 - 731)) | (1 << (MariaDBParser.CP1257 - 731)) | (1 << (MariaDBParser.CP850 - 731)) | (1 << (MariaDBParser.CP852 - 731)) | (1 << (MariaDBParser.CP866 - 731)))) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & ((1 << (MariaDBParser.CP932 - 763)) | (1 << (MariaDBParser.DEC8 - 763)) | (1 << (MariaDBParser.EUCJPMS - 763)) | (1 << (MariaDBParser.EUCKR - 763)) | (1 << (MariaDBParser.GB18030 - 763)) | (1 << (MariaDBParser.GB2312 - 763)) | (1 << (MariaDBParser.GBK - 763)) | (1 << (MariaDBParser.GEOSTD8 - 763)) | (1 << (MariaDBParser.GREEK - 763)) | (1 << (MariaDBParser.HEBREW - 763)) | (1 << (MariaDBParser.HP8 - 763)) | (1 << (MariaDBParser.KEYBCS2 - 763)) | (1 << (MariaDBParser.KOI8R - 763)) | (1 << (MariaDBParser.KOI8U - 763)) | (1 << (MariaDBParser.LATIN1 - 763)) | (1 << (MariaDBParser.LATIN2 - 763)) | (1 << (MariaDBParser.LATIN5 - 763)) | (1 << (MariaDBParser.LATIN7 - 763)) | (1 << (MariaDBParser.MACCE - 763)) | (1 << (MariaDBParser.MACROMAN - 763)) | (1 << (MariaDBParser.SJIS - 763)) | (1 << (MariaDBParser.SWE7 - 763)) | (1 << (MariaDBParser.TIS620 - 763)) | (1 << (MariaDBParser.UCS2 - 763)) | (1 << (MariaDBParser.UJIS - 763)) | (1 << (MariaDBParser.UTF16 - 763)) | (1 << (MariaDBParser.UTF16LE - 763)) | (1 << (MariaDBParser.UTF32 - 763)) | (1 << (MariaDBParser.UTF8 - 763)) | (1 << (MariaDBParser.UTF8MB3 - 763)) | (1 << (MariaDBParser.UTF8MB4 - 763)) | (1 << (MariaDBParser.ARCHIVE - 763)))) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & ((1 << (MariaDBParser.BLACKHOLE - 795)) | (1 << (MariaDBParser.CSV - 795)) | (1 << (MariaDBParser.FEDERATED - 795)) | (1 << (MariaDBParser.INNODB - 795)) | (1 << (MariaDBParser.MEMORY - 795)) | (1 << (MariaDBParser.MRG_MYISAM - 795)) | (1 << (MariaDBParser.MYISAM - 795)) | (1 << (MariaDBParser.NDB - 795)) | (1 << (MariaDBParser.NDBCLUSTER - 795)) | (1 << (MariaDBParser.PERFORMANCE_SCHEMA - 795)) | (1 << (MariaDBParser.TOKUDB - 795)) | (1 << (MariaDBParser.REPEATABLE - 795)) | (1 << (MariaDBParser.COMMITTED - 795)) | (1 << (MariaDBParser.UNCOMMITTED - 795)) | (1 << (MariaDBParser.SERIALIZABLE - 795)) | (1 << (MariaDBParser.GEOMETRYCOLLECTION - 795)) | (1 << (MariaDBParser.LINESTRING - 795)) | (1 << (MariaDBParser.MULTILINESTRING - 795)) | (1 << (MariaDBParser.MULTIPOINT - 795)) | (1 << (MariaDBParser.MULTIPOLYGON - 795)) | (1 << (MariaDBParser.POINT - 795)) | (1 << (MariaDBParser.POLYGON - 795)) | (1 << (MariaDBParser.ABS - 795)) | (1 << (MariaDBParser.ACOS - 795)) | (1 << (MariaDBParser.ADDDATE - 795)) | (1 << (MariaDBParser.ADDTIME - 795)) | (1 << (MariaDBParser.AES_DECRYPT - 795)) | (1 << (MariaDBParser.AES_ENCRYPT - 795)) | (1 << (MariaDBParser.AREA - 795)) | (1 << (MariaDBParser.ASBINARY - 795)))) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & ((1 << (MariaDBParser.ASIN - 827)) | (1 << (MariaDBParser.ASTEXT - 827)) | (1 << (MariaDBParser.ASWKB - 827)) | (1 << (MariaDBParser.ASWKT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DECRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DERIVE - 827)) | (1 << (MariaDBParser.ASYMMETRIC_ENCRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_SIGN - 827)) | (1 << (MariaDBParser.ASYMMETRIC_VERIFY - 827)) | (1 << (MariaDBParser.ATAN - 827)) | (1 << (MariaDBParser.ATAN2 - 827)) | (1 << (MariaDBParser.BENCHMARK - 827)) | (1 << (MariaDBParser.BIN - 827)) | (1 << (MariaDBParser.BIT_COUNT - 827)) | (1 << (MariaDBParser.BIT_LENGTH - 827)) | (1 << (MariaDBParser.BUFFER - 827)) | (1 << (MariaDBParser.CATALOG_NAME - 827)) | (1 << (MariaDBParser.CEIL - 827)) | (1 << (MariaDBParser.CEILING - 827)) | (1 << (MariaDBParser.CENTROID - 827)) | (1 << (MariaDBParser.CHARACTER_LENGTH - 827)) | (1 << (MariaDBParser.CHARSET - 827)) | (1 << (MariaDBParser.CHAR_LENGTH - 827)) | (1 << (MariaDBParser.COERCIBILITY - 827)) | (1 << (MariaDBParser.COLLATION - 827)) | (1 << (MariaDBParser.COMPRESS - 827)) | (1 << (MariaDBParser.CONCAT - 827)) | (1 << (MariaDBParser.CONCAT_WS - 827)) | (1 << (MariaDBParser.CONNECTION_ID - 827)) | (1 << (MariaDBParser.CONV - 827)) | (1 << (MariaDBParser.CONVERT_TZ - 827)) | (1 << (MariaDBParser.COS - 827)))) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & ((1 << (MariaDBParser.COT - 859)) | (1 << (MariaDBParser.CRC32 - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY - 859)) | (1 << (MariaDBParser.CREATE_DH_PARAMETERS - 859)) | (1 << (MariaDBParser.CREATE_DIGEST - 859)) | (1 << (MariaDBParser.CROSSES - 859)) | (1 << (MariaDBParser.DATEDIFF - 859)) | (1 << (MariaDBParser.DATE_FORMAT - 859)) | (1 << (MariaDBParser.DAYNAME - 859)) | (1 << (MariaDBParser.DAYOFMONTH - 859)) | (1 << (MariaDBParser.DAYOFWEEK - 859)) | (1 << (MariaDBParser.DAYOFYEAR - 859)) | (1 << (MariaDBParser.DECODE - 859)) | (1 << (MariaDBParser.DEGREES - 859)) | (1 << (MariaDBParser.DES_DECRYPT - 859)) | (1 << (MariaDBParser.DES_ENCRYPT - 859)) | (1 << (MariaDBParser.DIMENSION - 859)) | (1 << (MariaDBParser.DISJOINT - 859)) | (1 << (MariaDBParser.ELT - 859)) | (1 << (MariaDBParser.ENCODE - 859)) | (1 << (MariaDBParser.ENCRYPT - 859)) | (1 << (MariaDBParser.ENDPOINT - 859)) | (1 << (MariaDBParser.ENGINE_ATTRIBUTE - 859)) | (1 << (MariaDBParser.ENVELOPE - 859)) | (1 << (MariaDBParser.EQUALS - 859)) | (1 << (MariaDBParser.EXP - 859)) | (1 << (MariaDBParser.EXPORT_SET - 859)) | (1 << (MariaDBParser.EXTERIORRING - 859)) | (1 << (MariaDBParser.EXTRACTVALUE - 859)) | (1 << (MariaDBParser.FIELD - 859)) | (1 << (MariaDBParser.FIND_IN_SET - 859)))) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & ((1 << (MariaDBParser.FLOOR - 891)) | (1 << (MariaDBParser.FORMAT - 891)) | (1 << (MariaDBParser.FOUND_ROWS - 891)) | (1 << (MariaDBParser.FROM_BASE64 - 891)) | (1 << (MariaDBParser.FROM_DAYS - 891)) | (1 << (MariaDBParser.FROM_UNIXTIME - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYN - 891)) | (1 << (MariaDBParser.GEOMETRYTYPE - 891)) | (1 << (MariaDBParser.GEOMFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMFROMWKB - 891)) | (1 << (MariaDBParser.GET_FORMAT - 891)) | (1 << (MariaDBParser.GET_LOCK - 891)) | (1 << (MariaDBParser.GLENGTH - 891)) | (1 << (MariaDBParser.GREATEST - 891)) | (1 << (MariaDBParser.GTID_SUBSET - 891)) | (1 << (MariaDBParser.GTID_SUBTRACT - 891)) | (1 << (MariaDBParser.HEX - 891)) | (1 << (MariaDBParser.IFNULL - 891)) | (1 << (MariaDBParser.INET6_ATON - 891)) | (1 << (MariaDBParser.INET6_NTOA - 891)) | (1 << (MariaDBParser.INET_ATON - 891)) | (1 << (MariaDBParser.INET_NTOA - 891)) | (1 << (MariaDBParser.INSTR - 891)) | (1 << (MariaDBParser.INTERIORRINGN - 891)) | (1 << (MariaDBParser.INTERSECTS - 891)) | (1 << (MariaDBParser.ISCLOSED - 891)))) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & ((1 << (MariaDBParser.ISEMPTY - 923)) | (1 << (MariaDBParser.ISNULL - 923)) | (1 << (MariaDBParser.ISSIMPLE - 923)) | (1 << (MariaDBParser.IS_FREE_LOCK - 923)) | (1 << (MariaDBParser.IS_IPV4 - 923)) | (1 << (MariaDBParser.IS_IPV4_COMPAT - 923)) | (1 << (MariaDBParser.IS_IPV4_MAPPED - 923)) | (1 << (MariaDBParser.IS_IPV6 - 923)) | (1 << (MariaDBParser.IS_USED_LOCK - 923)) | (1 << (MariaDBParser.LAST_INSERT_ID - 923)) | (1 << (MariaDBParser.LCASE - 923)) | (1 << (MariaDBParser.LEAST - 923)) | (1 << (MariaDBParser.LENGTH - 923)) | (1 << (MariaDBParser.LINEFROMTEXT - 923)) | (1 << (MariaDBParser.LINEFROMWKB - 923)) | (1 << (MariaDBParser.LINESTRINGFROMTEXT - 923)) | (1 << (MariaDBParser.LINESTRINGFROMWKB - 923)) | (1 << (MariaDBParser.LN - 923)) | (1 << (MariaDBParser.LOAD_FILE - 923)) | (1 << (MariaDBParser.LOCATE - 923)) | (1 << (MariaDBParser.LOG - 923)) | (1 << (MariaDBParser.LOG10 - 923)) | (1 << (MariaDBParser.LOG2 - 923)) | (1 << (MariaDBParser.LOWER - 923)) | (1 << (MariaDBParser.LPAD - 923)) | (1 << (MariaDBParser.LTRIM - 923)) | (1 << (MariaDBParser.MAKEDATE - 923)) | (1 << (MariaDBParser.MAKETIME - 923)) | (1 << (MariaDBParser.MAKE_SET - 923)) | (1 << (MariaDBParser.MASTER_POS_WAIT - 923)) | (1 << (MariaDBParser.MBRCONTAINS - 923)) | (1 << (MariaDBParser.MBRDISJOINT - 923)))) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & ((1 << (MariaDBParser.MBREQUAL - 955)) | (1 << (MariaDBParser.MBRINTERSECTS - 955)) | (1 << (MariaDBParser.MBROVERLAPS - 955)) | (1 << (MariaDBParser.MBRTOUCHES - 955)) | (1 << (MariaDBParser.MBRWITHIN - 955)) | (1 << (MariaDBParser.MD5 - 955)) | (1 << (MariaDBParser.MLINEFROMTEXT - 955)) | (1 << (MariaDBParser.MLINEFROMWKB - 955)) | (1 << (MariaDBParser.MONTHNAME - 955)) | (1 << (MariaDBParser.MPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MPOLYFROMTEXT - 955)) | (1 << (MariaDBParser.MPOLYFROMWKB - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMTEXT - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMWKB - 955)) | (1 << (MariaDBParser.NAME_CONST - 955)) | (1 << (MariaDBParser.NULLIF - 955)) | (1 << (MariaDBParser.NUMGEOMETRIES - 955)) | (1 << (MariaDBParser.NUMINTERIORRINGS - 955)) | (1 << (MariaDBParser.NUMPOINTS - 955)) | (1 << (MariaDBParser.OCT - 955)) | (1 << (MariaDBParser.OCTET_LENGTH - 955)) | (1 << (MariaDBParser.ORD - 955)) | (1 << (MariaDBParser.OVERLAPS - 955)) | (1 << (MariaDBParser.PERIOD_ADD - 955)) | (1 << (MariaDBParser.PERIOD_DIFF - 955)) | (1 << (MariaDBParser.PI - 955)) | (1 << (MariaDBParser.POINTFROMTEXT - 955)))) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & ((1 << (MariaDBParser.POINTFROMWKB - 987)) | (1 << (MariaDBParser.POINTN - 987)) | (1 << (MariaDBParser.POLYFROMTEXT - 987)) | (1 << (MariaDBParser.POLYFROMWKB - 987)) | (1 << (MariaDBParser.POLYGONFROMTEXT - 987)) | (1 << (MariaDBParser.POLYGONFROMWKB - 987)) | (1 << (MariaDBParser.POW - 987)) | (1 << (MariaDBParser.POWER - 987)) | (1 << (MariaDBParser.QUOTE - 987)) | (1 << (MariaDBParser.RADIANS - 987)) | (1 << (MariaDBParser.RAND - 987)) | (1 << (MariaDBParser.RANDOM_BYTES - 987)) | (1 << (MariaDBParser.RELEASE_LOCK - 987)) | (1 << (MariaDBParser.REVERSE - 987)) | (1 << (MariaDBParser.ROUND - 987)) | (1 << (MariaDBParser.ROW_COUNT - 987)) | (1 << (MariaDBParser.RPAD - 987)) | (1 << (MariaDBParser.RTRIM - 987)) | (1 << (MariaDBParser.SEC_TO_TIME - 987)) | (1 << (MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE - 987)) | (1 << (MariaDBParser.SESSION_USER - 987)) | (1 << (MariaDBParser.SHA - 987)) | (1 << (MariaDBParser.SHA1 - 987)) | (1 << (MariaDBParser.SHA2 - 987)) | (1 << (MariaDBParser.SCHEMA_NAME - 987)) | (1 << (MariaDBParser.SIGN - 987)) | (1 << (MariaDBParser.SIN - 987)) | (1 << (MariaDBParser.SLEEP - 987)) | (1 << (MariaDBParser.SOUNDEX - 987)) | (1 << (MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS - 987)) | (1 << (MariaDBParser.SQRT - 987)) | (1 << (MariaDBParser.SRID - 987)))) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & ((1 << (MariaDBParser.STARTPOINT - 1019)) | (1 << (MariaDBParser.STRCMP - 1019)) | (1 << (MariaDBParser.STR_TO_DATE - 1019)) | (1 << (MariaDBParser.ST_AREA - 1019)) | (1 << (MariaDBParser.ST_ASBINARY - 1019)) | (1 << (MariaDBParser.ST_ASTEXT - 1019)) | (1 << (MariaDBParser.ST_ASWKB - 1019)) | (1 << (MariaDBParser.ST_ASWKT - 1019)) | (1 << (MariaDBParser.ST_BUFFER - 1019)) | (1 << (MariaDBParser.ST_CENTROID - 1019)) | (1 << (MariaDBParser.ST_CONTAINS - 1019)) | (1 << (MariaDBParser.ST_CROSSES - 1019)) | (1 << (MariaDBParser.ST_DIFFERENCE - 1019)) | (1 << (MariaDBParser.ST_DIMENSION - 1019)) | (1 << (MariaDBParser.ST_DISJOINT - 1019)) | (1 << (MariaDBParser.ST_DISTANCE - 1019)) | (1 << (MariaDBParser.ST_ENDPOINT - 1019)) | (1 << (MariaDBParser.ST_ENVELOPE - 1019)) | (1 << (MariaDBParser.ST_EQUALS - 1019)) | (1 << (MariaDBParser.ST_EXTERIORRING - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYN - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYTYPE - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMWKB - 1019)) | (1 << (MariaDBParser.ST_INTERIORRINGN - 1019)))) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & ((1 << (MariaDBParser.ST_INTERSECTION - 1051)) | (1 << (MariaDBParser.ST_INTERSECTS - 1051)) | (1 << (MariaDBParser.ST_ISCLOSED - 1051)) | (1 << (MariaDBParser.ST_ISEMPTY - 1051)) | (1 << (MariaDBParser.ST_ISSIMPLE - 1051)) | (1 << (MariaDBParser.ST_LINEFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINEFROMWKB - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMWKB - 1051)) | (1 << (MariaDBParser.ST_NUMGEOMETRIES - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRING - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRINGS - 1051)) | (1 << (MariaDBParser.ST_NUMPOINTS - 1051)) | (1 << (MariaDBParser.ST_OVERLAPS - 1051)) | (1 << (MariaDBParser.ST_POINTFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POINTFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POINTN - 1051)) | (1 << (MariaDBParser.ST_POLYFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMWKB - 1051)) | (1 << (MariaDBParser.ST_SRID - 1051)) | (1 << (MariaDBParser.ST_STARTPOINT - 1051)) | (1 << (MariaDBParser.ST_SYMDIFFERENCE - 1051)) | (1 << (MariaDBParser.ST_TOUCHES - 1051)) | (1 << (MariaDBParser.ST_UNION - 1051)) | (1 << (MariaDBParser.ST_WITHIN - 1051)) | (1 << (MariaDBParser.ST_X - 1051)) | (1 << (MariaDBParser.ST_Y - 1051)) | (1 << (MariaDBParser.SUBDATE - 1051)) | (1 << (MariaDBParser.SUBSTRING_INDEX - 1051)) | (1 << (MariaDBParser.SUBTIME - 1051)))) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & ((1 << (MariaDBParser.SYSTEM_USER - 1083)) | (1 << (MariaDBParser.TAN - 1083)) | (1 << (MariaDBParser.TIMEDIFF - 1083)) | (1 << (MariaDBParser.TIMESTAMPADD - 1083)) | (1 << (MariaDBParser.TIMESTAMPDIFF - 1083)) | (1 << (MariaDBParser.TIME_FORMAT - 1083)) | (1 << (MariaDBParser.TIME_TO_SEC - 1083)) | (1 << (MariaDBParser.TOUCHES - 1083)) | (1 << (MariaDBParser.TO_BASE64 - 1083)) | (1 << (MariaDBParser.TO_DAYS - 1083)) | (1 << (MariaDBParser.TO_SECONDS - 1083)) | (1 << (MariaDBParser.UCASE - 1083)) | (1 << (MariaDBParser.UNCOMPRESS - 1083)) | (1 << (MariaDBParser.UNCOMPRESSED_LENGTH - 1083)) | (1 << (MariaDBParser.UNHEX - 1083)) | (1 << (MariaDBParser.UNIX_TIMESTAMP - 1083)) | (1 << (MariaDBParser.UPDATEXML - 1083)) | (1 << (MariaDBParser.UPPER - 1083)) | (1 << (MariaDBParser.UUID - 1083)) | (1 << (MariaDBParser.UUID_SHORT - 1083)) | (1 << (MariaDBParser.VALIDATE_PASSWORD_STRENGTH - 1083)) | (1 << (MariaDBParser.VERSION - 1083)) | (1 << (MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1083)) | (1 << (MariaDBParser.WEEKDAY - 1083)) | (1 << (MariaDBParser.WEEKOFYEAR - 1083)) | (1 << (MariaDBParser.WEIGHT_STRING - 1083)) | (1 << (MariaDBParser.WITHIN - 1083)) | (1 << (MariaDBParser.YEARWEEK - 1083)) | (1 << (MariaDBParser.Y_FUNCTION - 1083)) | (1 << (MariaDBParser.X_FUNCTION - 1083)) | (1 << (MariaDBParser.VIA - 1083)) | (1 << (MariaDBParser.LASTVAL - 1083)))) !== 0) || ((((_la - 1115)) & ~0x1F) === 0 && ((1 << (_la - 1115)) & ((1 << (MariaDBParser.NEXTVAL - 1115)) | (1 << (MariaDBParser.SETVAL - 1115)) | (1 << (MariaDBParser.PREVIOUS - 1115)) | (1 << (MariaDBParser.PERSISTENT - 1115)) | (1 << (MariaDBParser.BINLOG_MONITOR - 1115)) | (1 << (MariaDBParser.BINLOG_REPLAY - 1115)) | (1 << (MariaDBParser.FEDERATED_ADMIN - 1115)) | (1 << (MariaDBParser.READ_ONLY_ADMIN - 1115)) | (1 << (MariaDBParser.REPLICA - 1115)) | (1 << (MariaDBParser.REPLICAS - 1115)) | (1 << (MariaDBParser.REPLICATION_MASTER_ADMIN - 1115)) | (1 << (MariaDBParser.MONITOR - 1115)) | (1 << (MariaDBParser.READ_ONLY - 1115)) | (1 << (MariaDBParser.REPLAY - 1115)) | (1 << (MariaDBParser.MOD - 1115)))) !== 0) || ((((_la - 1166)) & ~0x1F) === 0 && ((1 << (_la - 1166)) & ((1 << (MariaDBParser.CHARSET_REVERSE_QOUTE_STRING - 1166)) | (1 << (MariaDBParser.STRING_LITERAL - 1166)) | (1 << (MariaDBParser.ID - 1166)))) !== 0)) {
					{
					this.state = 1894;
					this.uid();
					}
				}

				this.state = 1898;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.USING) {
					{
					this.state = 1897;
					this.indexType();
					}
				}

				this.state = 1900;
				this.indexColumnNames();
				this.state = 1904;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.IGNORED || _la === MariaDBParser.NOT || _la === MariaDBParser.USING || _la === MariaDBParser.WITH || _la === MariaDBParser.CLUSTERING || _la === MariaDBParser.COMMENT || _la === MariaDBParser.INVISIBLE || _la === MariaDBParser.KEY_BLOCK_SIZE || _la === MariaDBParser.VISIBLE || _la === MariaDBParser.ENGINE_ATTRIBUTE || _la === MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					this.state = 1901;
					this.indexOption();
					}
					}
					this.state = 1906;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case MariaDBParser.FULLTEXT:
			case MariaDBParser.SPATIAL:
				_localctx = new SpecialIndexDeclarationContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1907;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.FULLTEXT || _la === MariaDBParser.SPATIAL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1909;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.INDEX || _la === MariaDBParser.KEY) {
					{
					this.state = 1908;
					(_localctx as SpecialIndexDeclarationContext)._indexFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MariaDBParser.INDEX || _la === MariaDBParser.KEY)) {
						(_localctx as SpecialIndexDeclarationContext)._indexFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 1912;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MariaDBParser.ATTRIBUTE) | (1 << MariaDBParser.BODY) | (1 << MariaDBParser.BUCKETS) | (1 << MariaDBParser.CONDITION))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (MariaDBParser.CURRENT - 36)) | (1 << (MariaDBParser.CURRENT_ROLE - 36)) | (1 << (MariaDBParser.CURRENT_USER - 36)) | (1 << (MariaDBParser.DATABASE - 36)) | (1 << (MariaDBParser.DEFAULT - 36)) | (1 << (MariaDBParser.DIAGNOSTICS - 36)) | (1 << (MariaDBParser.EMPTY - 36)) | (1 << (MariaDBParser.EXCEPT - 36)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (MariaDBParser.GROUP - 73)) | (1 << (MariaDBParser.IF - 73)) | (1 << (MariaDBParser.IGNORED - 73)) | (1 << (MariaDBParser.INSERT - 73)) | (1 << (MariaDBParser.LATERAL - 73)) | (1 << (MariaDBParser.LEFT - 73)) | (1 << (MariaDBParser.LOCKED - 73)))) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & ((1 << (MariaDBParser.MAXVALUE - 110)) | (1 << (MariaDBParser.MINVALUE - 110)) | (1 << (MariaDBParser.NUMBER - 110)) | (1 << (MariaDBParser.OPTIONAL - 110)) | (1 << (MariaDBParser.ORDER - 110)) | (1 << (MariaDBParser.PRIMARY - 110)) | (1 << (MariaDBParser.PACKAGE - 110)))) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (MariaDBParser.REPLACE - 142)) | (1 << (MariaDBParser.RIGHT - 142)) | (1 << (MariaDBParser.SCHEMA - 142)) | (1 << (MariaDBParser.SKIP_ - 142)) | (1 << (MariaDBParser.STACKED - 142)) | (1 << (MariaDBParser.STATEMENT - 142)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MariaDBParser.DATE - 217)) | (1 << (MariaDBParser.TIME - 217)) | (1 << (MariaDBParser.TIMESTAMP - 217)) | (1 << (MariaDBParser.DATETIME - 217)) | (1 << (MariaDBParser.YEAR - 217)) | (1 << (MariaDBParser.BINARY - 217)) | (1 << (MariaDBParser.TEXT - 217)) | (1 << (MariaDBParser.ENUM - 217)) | (1 << (MariaDBParser.SERIAL - 217)))) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & ((1 << (MariaDBParser.JSON_ARRAY - 251)) | (1 << (MariaDBParser.JSON_ARRAYAGG - 251)) | (1 << (MariaDBParser.JSON_ARRAY_APPEND - 251)) | (1 << (MariaDBParser.JSON_ARRAY_INSERT - 251)) | (1 << (MariaDBParser.JSON_CONTAINS - 251)) | (1 << (MariaDBParser.JSON_CONTAINS_PATH - 251)) | (1 << (MariaDBParser.JSON_DEPTH - 251)) | (1 << (MariaDBParser.JSON_EXTRACT - 251)) | (1 << (MariaDBParser.JSON_INSERT - 251)) | (1 << (MariaDBParser.JSON_KEYS - 251)) | (1 << (MariaDBParser.JSON_LENGTH - 251)) | (1 << (MariaDBParser.JSON_MERGE - 251)) | (1 << (MariaDBParser.JSON_MERGE_PATCH - 251)) | (1 << (MariaDBParser.JSON_MERGE_PRESERVE - 251)) | (1 << (MariaDBParser.JSON_OBJECT - 251)) | (1 << (MariaDBParser.JSON_OBJECTAGG - 251)) | (1 << (MariaDBParser.JSON_OVERLAPS - 251)) | (1 << (MariaDBParser.JSON_PRETTY - 251)) | (1 << (MariaDBParser.JSON_QUOTE - 251)) | (1 << (MariaDBParser.JSON_REMOVE - 251)) | (1 << (MariaDBParser.JSON_REPLACE - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALID - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT - 251)) | (1 << (MariaDBParser.JSON_SEARCH - 251)) | (1 << (MariaDBParser.JSON_SET - 251)) | (1 << (MariaDBParser.JSON_STORAGE_FREE - 251)) | (1 << (MariaDBParser.JSON_STORAGE_SIZE - 251)) | (1 << (MariaDBParser.JSON_TABLE - 251)) | (1 << (MariaDBParser.JSON_TYPE - 251)) | (1 << (MariaDBParser.JSON_UNQUOTE - 251)) | (1 << (MariaDBParser.JSON_VALID - 251)) | (1 << (MariaDBParser.JSON_VALUE - 251)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (MariaDBParser.NESTED - 283)) | (1 << (MariaDBParser.ORDINALITY - 283)) | (1 << (MariaDBParser.PATH - 283)) | (1 << (MariaDBParser.AVG - 283)) | (1 << (MariaDBParser.BIT_AND - 283)) | (1 << (MariaDBParser.BIT_OR - 283)) | (1 << (MariaDBParser.BIT_XOR - 283)) | (1 << (MariaDBParser.COUNT - 283)) | (1 << (MariaDBParser.CUME_DIST - 283)) | (1 << (MariaDBParser.DENSE_RANK - 283)) | (1 << (MariaDBParser.FIRST_VALUE - 283)) | (1 << (MariaDBParser.GROUP_CONCAT - 283)) | (1 << (MariaDBParser.LAG - 283)) | (1 << (MariaDBParser.LAST_VALUE - 283)) | (1 << (MariaDBParser.LEAD - 283)) | (1 << (MariaDBParser.MAX - 283)) | (1 << (MariaDBParser.MIN - 283)) | (1 << (MariaDBParser.NTILE - 283)) | (1 << (MariaDBParser.NTH_VALUE - 283)) | (1 << (MariaDBParser.PERCENT_RANK - 283)) | (1 << (MariaDBParser.RANK - 283)) | (1 << (MariaDBParser.ROW_NUMBER - 283)) | (1 << (MariaDBParser.STD - 283)) | (1 << (MariaDBParser.STDDEV - 283)) | (1 << (MariaDBParser.STDDEV_POP - 283)) | (1 << (MariaDBParser.STDDEV_SAMP - 283)) | (1 << (MariaDBParser.SUM - 283)) | (1 << (MariaDBParser.VAR_POP - 283)) | (1 << (MariaDBParser.VAR_SAMP - 283)) | (1 << (MariaDBParser.VARIANCE - 283)) | (1 << (MariaDBParser.CURRENT_DATE - 283)) | (1 << (MariaDBParser.CURRENT_TIME - 283)))) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & ((1 << (MariaDBParser.CURRENT_TIMESTAMP - 315)) | (1 << (MariaDBParser.LOCALTIME - 315)) | (1 << (MariaDBParser.CURDATE - 315)) | (1 << (MariaDBParser.CURTIME - 315)) | (1 << (MariaDBParser.DATE_ADD - 315)) | (1 << (MariaDBParser.DATE_SUB - 315)) | (1 << (MariaDBParser.LOCALTIMESTAMP - 315)) | (1 << (MariaDBParser.NOW - 315)) | (1 << (MariaDBParser.POSITION - 315)) | (1 << (MariaDBParser.SUBSTR - 315)) | (1 << (MariaDBParser.SUBSTRING - 315)) | (1 << (MariaDBParser.SYSDATE - 315)) | (1 << (MariaDBParser.TRIM - 315)) | (1 << (MariaDBParser.UTC_DATE - 315)) | (1 << (MariaDBParser.UTC_TIME - 315)) | (1 << (MariaDBParser.UTC_TIMESTAMP - 315)) | (1 << (MariaDBParser.ACCOUNT - 315)) | (1 << (MariaDBParser.ACTION - 315)) | (1 << (MariaDBParser.AFTER - 315)) | (1 << (MariaDBParser.AGGREGATE - 315)) | (1 << (MariaDBParser.ALGORITHM - 315)) | (1 << (MariaDBParser.ANY - 315)) | (1 << (MariaDBParser.AT - 315)) | (1 << (MariaDBParser.AUTHORS - 315)) | (1 << (MariaDBParser.AUTOCOMMIT - 315)) | (1 << (MariaDBParser.AUTOEXTEND_SIZE - 315)) | (1 << (MariaDBParser.AUTO_INCREMENT - 315)) | (1 << (MariaDBParser.AVG_ROW_LENGTH - 315)) | (1 << (MariaDBParser.BEGIN - 315)) | (1 << (MariaDBParser.BINLOG - 315)) | (1 << (MariaDBParser.BIT - 315)))) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & ((1 << (MariaDBParser.BLOCK - 347)) | (1 << (MariaDBParser.BOOL - 347)) | (1 << (MariaDBParser.BOOLEAN - 347)) | (1 << (MariaDBParser.BTREE - 347)) | (1 << (MariaDBParser.CACHE - 347)) | (1 << (MariaDBParser.CASCADED - 347)) | (1 << (MariaDBParser.CHAIN - 347)) | (1 << (MariaDBParser.CHANGED - 347)) | (1 << (MariaDBParser.CHANNEL - 347)) | (1 << (MariaDBParser.CHECKSUM - 347)) | (1 << (MariaDBParser.PAGE_CHECKSUM - 347)) | (1 << (MariaDBParser.CIPHER - 347)) | (1 << (MariaDBParser.CLASS_ORIGIN - 347)) | (1 << (MariaDBParser.CLIENT - 347)) | (1 << (MariaDBParser.CLOSE - 347)) | (1 << (MariaDBParser.CLUSTERING - 347)) | (1 << (MariaDBParser.COALESCE - 347)) | (1 << (MariaDBParser.CODE - 347)) | (1 << (MariaDBParser.COLUMNS - 347)) | (1 << (MariaDBParser.COLUMN_FORMAT - 347)) | (1 << (MariaDBParser.COLUMN_NAME - 347)) | (1 << (MariaDBParser.COMMENT - 347)) | (1 << (MariaDBParser.COMMIT - 347)) | (1 << (MariaDBParser.COMPACT - 347)) | (1 << (MariaDBParser.COMPLETION - 347)) | (1 << (MariaDBParser.COMPRESSED - 347)) | (1 << (MariaDBParser.COMPRESSION - 347)) | (1 << (MariaDBParser.CONCURRENT - 347)) | (1 << (MariaDBParser.CONNECT - 347)) | (1 << (MariaDBParser.CONNECTION - 347)) | (1 << (MariaDBParser.CONSISTENT - 347)) | (1 << (MariaDBParser.CONSTRAINT_CATALOG - 347)))) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & ((1 << (MariaDBParser.CONSTRAINT_SCHEMA - 379)) | (1 << (MariaDBParser.CONSTRAINT_NAME - 379)) | (1 << (MariaDBParser.CONTAINS - 379)) | (1 << (MariaDBParser.CONTEXT - 379)) | (1 << (MariaDBParser.CONTRIBUTORS - 379)) | (1 << (MariaDBParser.COPY - 379)) | (1 << (MariaDBParser.CPU - 379)) | (1 << (MariaDBParser.CYCLE - 379)) | (1 << (MariaDBParser.CURSOR_NAME - 379)) | (1 << (MariaDBParser.DATA - 379)) | (1 << (MariaDBParser.DATAFILE - 379)) | (1 << (MariaDBParser.DEALLOCATE - 379)) | (1 << (MariaDBParser.DEFAULT_AUTH - 379)) | (1 << (MariaDBParser.DEFINER - 379)) | (1 << (MariaDBParser.DELAY_KEY_WRITE - 379)) | (1 << (MariaDBParser.DES_KEY_FILE - 379)) | (1 << (MariaDBParser.DIRECTORY - 379)) | (1 << (MariaDBParser.DISABLE - 379)) | (1 << (MariaDBParser.DISCARD - 379)) | (1 << (MariaDBParser.DISK - 379)) | (1 << (MariaDBParser.DO - 379)) | (1 << (MariaDBParser.DUMPFILE - 379)) | (1 << (MariaDBParser.DUPLICATE - 379)) | (1 << (MariaDBParser.DYNAMIC - 379)) | (1 << (MariaDBParser.ENABLE - 379)) | (1 << (MariaDBParser.ENCRYPTED - 379)) | (1 << (MariaDBParser.ENCRYPTION - 379)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ID - 379)) | (1 << (MariaDBParser.END - 379)) | (1 << (MariaDBParser.ENDS - 379)) | (1 << (MariaDBParser.ENGINE - 379)) | (1 << (MariaDBParser.ENGINES - 379)))) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & ((1 << (MariaDBParser.ERROR - 411)) | (1 << (MariaDBParser.ERRORS - 411)) | (1 << (MariaDBParser.ESCAPE - 411)) | (1 << (MariaDBParser.EVEN - 411)) | (1 << (MariaDBParser.EVENT - 411)) | (1 << (MariaDBParser.EVENTS - 411)) | (1 << (MariaDBParser.EVERY - 411)) | (1 << (MariaDBParser.EXCHANGE - 411)) | (1 << (MariaDBParser.EXCLUSIVE - 411)) | (1 << (MariaDBParser.EXPIRE - 411)) | (1 << (MariaDBParser.EXPORT - 411)) | (1 << (MariaDBParser.EXTENDED - 411)) | (1 << (MariaDBParser.EXTENT_SIZE - 411)) | (1 << (MariaDBParser.FAILED_LOGIN_ATTEMPTS - 411)) | (1 << (MariaDBParser.FAST - 411)) | (1 << (MariaDBParser.FAULTS - 411)) | (1 << (MariaDBParser.FIELDS - 411)) | (1 << (MariaDBParser.FILE_BLOCK_SIZE - 411)) | (1 << (MariaDBParser.FILTER - 411)) | (1 << (MariaDBParser.FIRST - 411)) | (1 << (MariaDBParser.FIXED - 411)) | (1 << (MariaDBParser.FLUSH - 411)) | (1 << (MariaDBParser.FOLLOWS - 411)) | (1 << (MariaDBParser.FOUND - 411)) | (1 << (MariaDBParser.FULL - 411)) | (1 << (MariaDBParser.FUNCTION - 411)) | (1 << (MariaDBParser.GENERAL - 411)) | (1 << (MariaDBParser.GLOBAL - 411)) | (1 << (MariaDBParser.GRANTS - 411)) | (1 << (MariaDBParser.GROUP_REPLICATION - 411)) | (1 << (MariaDBParser.HANDLER - 411)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (MariaDBParser.HASH - 443)) | (1 << (MariaDBParser.HELP - 443)) | (1 << (MariaDBParser.HISTORY - 443)) | (1 << (MariaDBParser.HOST - 443)) | (1 << (MariaDBParser.HOSTS - 443)) | (1 << (MariaDBParser.IDENTIFIED - 443)) | (1 << (MariaDBParser.IGNORE_SERVER_IDS - 443)) | (1 << (MariaDBParser.IMPORT - 443)) | (1 << (MariaDBParser.INCREMENT - 443)) | (1 << (MariaDBParser.INDEXES - 443)) | (1 << (MariaDBParser.INITIAL_SIZE - 443)) | (1 << (MariaDBParser.INPLACE - 443)) | (1 << (MariaDBParser.INSERT_METHOD - 443)) | (1 << (MariaDBParser.INSTALL - 443)) | (1 << (MariaDBParser.INSTANCE - 443)) | (1 << (MariaDBParser.INSTANT - 443)) | (1 << (MariaDBParser.INVISIBLE - 443)) | (1 << (MariaDBParser.INVOKER - 443)) | (1 << (MariaDBParser.IO - 443)) | (1 << (MariaDBParser.IO_THREAD - 443)) | (1 << (MariaDBParser.IPC - 443)) | (1 << (MariaDBParser.ISOLATION - 443)) | (1 << (MariaDBParser.ISSUER - 443)) | (1 << (MariaDBParser.JSON - 443)) | (1 << (MariaDBParser.KEY_BLOCK_SIZE - 443)) | (1 << (MariaDBParser.LANGUAGE - 443)) | (1 << (MariaDBParser.LAST - 443)) | (1 << (MariaDBParser.LEAVES - 443)) | (1 << (MariaDBParser.LESS - 443)) | (1 << (MariaDBParser.LEVEL - 443)) | (1 << (MariaDBParser.LIST - 443)) | (1 << (MariaDBParser.LOCAL - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (MariaDBParser.LOCALES - 475)) | (1 << (MariaDBParser.LOGFILE - 475)) | (1 << (MariaDBParser.LOGS - 475)) | (1 << (MariaDBParser.MASTER - 475)) | (1 << (MariaDBParser.MASTER_AUTO_POSITION - 475)) | (1 << (MariaDBParser.MASTER_CONNECT_RETRY - 475)) | (1 << (MariaDBParser.MASTER_DELAY - 475)) | (1 << (MariaDBParser.MASTER_HEARTBEAT_PERIOD - 475)) | (1 << (MariaDBParser.MASTER_HOST - 475)) | (1 << (MariaDBParser.MASTER_LOG_FILE - 475)) | (1 << (MariaDBParser.MASTER_LOG_POS - 475)) | (1 << (MariaDBParser.MASTER_PASSWORD - 475)) | (1 << (MariaDBParser.MASTER_PORT - 475)) | (1 << (MariaDBParser.MASTER_RETRY_COUNT - 475)) | (1 << (MariaDBParser.MASTER_SSL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CA - 475)) | (1 << (MariaDBParser.MASTER_SSL_CAPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_CERT - 475)) | (1 << (MariaDBParser.MASTER_SSL_CIPHER - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRLPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_KEY - 475)) | (1 << (MariaDBParser.MASTER_TLS_VERSION - 475)) | (1 << (MariaDBParser.MASTER_USER - 475)) | (1 << (MariaDBParser.MAX_CONNECTIONS_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_QUERIES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_ROWS - 475)) | (1 << (MariaDBParser.MAX_SIZE - 475)) | (1 << (MariaDBParser.MAX_UPDATES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_USER_CONNECTIONS - 475)) | (1 << (MariaDBParser.MEDIUM - 475)) | (1 << (MariaDBParser.MEMBER - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (MariaDBParser.MERGE - 507)) | (1 << (MariaDBParser.MESSAGE_TEXT - 507)) | (1 << (MariaDBParser.MID - 507)) | (1 << (MariaDBParser.MIGRATE - 507)) | (1 << (MariaDBParser.MIN_ROWS - 507)) | (1 << (MariaDBParser.MODE - 507)) | (1 << (MariaDBParser.MODIFY - 507)) | (1 << (MariaDBParser.MUTEX - 507)) | (1 << (MariaDBParser.MYSQL - 507)) | (1 << (MariaDBParser.MYSQL_ERRNO - 507)) | (1 << (MariaDBParser.NAME - 507)) | (1 << (MariaDBParser.NAMES - 507)) | (1 << (MariaDBParser.NCHAR - 507)) | (1 << (MariaDBParser.NEVER - 507)) | (1 << (MariaDBParser.NEXT - 507)) | (1 << (MariaDBParser.NO - 507)) | (1 << (MariaDBParser.NOCACHE - 507)) | (1 << (MariaDBParser.NOCOPY - 507)) | (1 << (MariaDBParser.NOCYCLE - 507)) | (1 << (MariaDBParser.NOMAXVALUE - 507)) | (1 << (MariaDBParser.NOMINVALUE - 507)) | (1 << (MariaDBParser.NOWAIT - 507)) | (1 << (MariaDBParser.NODEGROUP - 507)) | (1 << (MariaDBParser.NONE - 507)) | (1 << (MariaDBParser.ODBC - 507)) | (1 << (MariaDBParser.OFFLINE - 507)) | (1 << (MariaDBParser.OFFSET - 507)) | (1 << (MariaDBParser.OF - 507)) | (1 << (MariaDBParser.OJ - 507)) | (1 << (MariaDBParser.OLD_PASSWORD - 507)) | (1 << (MariaDBParser.ONE - 507)) | (1 << (MariaDBParser.ONLINE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (MariaDBParser.ONLY - 539)) | (1 << (MariaDBParser.OPEN - 539)) | (1 << (MariaDBParser.OPTIMIZER_COSTS - 539)) | (1 << (MariaDBParser.OPTIONS - 539)) | (1 << (MariaDBParser.OWNER - 539)) | (1 << (MariaDBParser.PACK_KEYS - 539)) | (1 << (MariaDBParser.PAGE - 539)) | (1 << (MariaDBParser.PARSER - 539)) | (1 << (MariaDBParser.PARTIAL - 539)) | (1 << (MariaDBParser.PARTITIONING - 539)) | (1 << (MariaDBParser.PARTITIONS - 539)) | (1 << (MariaDBParser.PASSWORD - 539)) | (1 << (MariaDBParser.PASSWORD_LOCK_TIME - 539)) | (1 << (MariaDBParser.PHASE - 539)) | (1 << (MariaDBParser.PLUGIN - 539)) | (1 << (MariaDBParser.PLUGIN_DIR - 539)) | (1 << (MariaDBParser.PLUGINS - 539)) | (1 << (MariaDBParser.PORT - 539)) | (1 << (MariaDBParser.PRECEDES - 539)) | (1 << (MariaDBParser.PREPARE - 539)) | (1 << (MariaDBParser.PRESERVE - 539)) | (1 << (MariaDBParser.PREV - 539)) | (1 << (MariaDBParser.PROCESSLIST - 539)) | (1 << (MariaDBParser.PROFILE - 539)) | (1 << (MariaDBParser.PROFILES - 539)) | (1 << (MariaDBParser.PROXY - 539)) | (1 << (MariaDBParser.QUERY - 539)) | (1 << (MariaDBParser.QUERY_RESPONSE_TIME - 539)) | (1 << (MariaDBParser.QUICK - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (MariaDBParser.REBUILD - 571)) | (1 << (MariaDBParser.RECOVER - 571)) | (1 << (MariaDBParser.RECURSIVE - 571)) | (1 << (MariaDBParser.REDO_BUFFER_SIZE - 571)) | (1 << (MariaDBParser.REDUNDANT - 571)) | (1 << (MariaDBParser.RELAY - 571)) | (1 << (MariaDBParser.RELAY_LOG_FILE - 571)) | (1 << (MariaDBParser.RELAY_LOG_POS - 571)) | (1 << (MariaDBParser.RELAYLOG - 571)) | (1 << (MariaDBParser.REMOVE - 571)) | (1 << (MariaDBParser.REORGANIZE - 571)) | (1 << (MariaDBParser.REPAIR - 571)) | (1 << (MariaDBParser.REPLICATE_DO_DB - 571)) | (1 << (MariaDBParser.REPLICATE_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_REWRITE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATION - 571)) | (1 << (MariaDBParser.RESET - 571)) | (1 << (MariaDBParser.RESTART - 571)) | (1 << (MariaDBParser.RESUME - 571)) | (1 << (MariaDBParser.RETURNED_SQLSTATE - 571)) | (1 << (MariaDBParser.RETURNS - 571)) | (1 << (MariaDBParser.REUSE - 571)) | (1 << (MariaDBParser.ROLE - 571)) | (1 << (MariaDBParser.ROLLBACK - 571)) | (1 << (MariaDBParser.ROLLUP - 571)) | (1 << (MariaDBParser.ROTATE - 571)) | (1 << (MariaDBParser.ROW - 571)))) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & ((1 << (MariaDBParser.ROWS - 603)) | (1 << (MariaDBParser.ROW_FORMAT - 603)) | (1 << (MariaDBParser.RTREE - 603)) | (1 << (MariaDBParser.SAVEPOINT - 603)) | (1 << (MariaDBParser.SCHEDULE - 603)) | (1 << (MariaDBParser.SECURITY - 603)) | (1 << (MariaDBParser.SEQUENCE - 603)) | (1 << (MariaDBParser.SERVER - 603)) | (1 << (MariaDBParser.SESSION - 603)) | (1 << (MariaDBParser.SHARE - 603)) | (1 << (MariaDBParser.SHARED - 603)) | (1 << (MariaDBParser.SIGNED - 603)) | (1 << (MariaDBParser.SIMPLE - 603)) | (1 << (MariaDBParser.SLAVE - 603)) | (1 << (MariaDBParser.SLAVES - 603)) | (1 << (MariaDBParser.SLOW - 603)) | (1 << (MariaDBParser.SNAPSHOT - 603)) | (1 << (MariaDBParser.SOCKET - 603)) | (1 << (MariaDBParser.SOME - 603)) | (1 << (MariaDBParser.SONAME - 603)) | (1 << (MariaDBParser.SOUNDS - 603)) | (1 << (MariaDBParser.SOURCE - 603)) | (1 << (MariaDBParser.SQL_AFTER_GTIDS - 603)) | (1 << (MariaDBParser.SQL_AFTER_MTS_GAPS - 603)) | (1 << (MariaDBParser.SQL_BEFORE_GTIDS - 603)) | (1 << (MariaDBParser.SQL_BUFFER_RESULT - 603)) | (1 << (MariaDBParser.SQL_CACHE - 603)) | (1 << (MariaDBParser.SQL_NO_CACHE - 603)) | (1 << (MariaDBParser.SQL_THREAD - 603)) | (1 << (MariaDBParser.START - 603)) | (1 << (MariaDBParser.STARTS - 603)) | (1 << (MariaDBParser.STATS_AUTO_RECALC - 603)))) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & ((1 << (MariaDBParser.STATS_PERSISTENT - 635)) | (1 << (MariaDBParser.STATS_SAMPLE_PAGES - 635)) | (1 << (MariaDBParser.STATUS - 635)) | (1 << (MariaDBParser.STOP - 635)) | (1 << (MariaDBParser.STORAGE - 635)) | (1 << (MariaDBParser.STRING - 635)) | (1 << (MariaDBParser.SUBCLASS_ORIGIN - 635)) | (1 << (MariaDBParser.SUBJECT - 635)) | (1 << (MariaDBParser.SUBPARTITION - 635)) | (1 << (MariaDBParser.SUBPARTITIONS - 635)) | (1 << (MariaDBParser.SUSPEND - 635)) | (1 << (MariaDBParser.SWAPS - 635)) | (1 << (MariaDBParser.SWITCHES - 635)) | (1 << (MariaDBParser.TABLE_NAME - 635)) | (1 << (MariaDBParser.TABLESPACE - 635)) | (1 << (MariaDBParser.TABLE_TYPE - 635)) | (1 << (MariaDBParser.TEMPORARY - 635)) | (1 << (MariaDBParser.TEMPTABLE - 635)) | (1 << (MariaDBParser.THAN - 635)) | (1 << (MariaDBParser.TRADITIONAL - 635)) | (1 << (MariaDBParser.TRANSACTION - 635)) | (1 << (MariaDBParser.TRANSACTIONAL - 635)) | (1 << (MariaDBParser.TRIGGERS - 635)) | (1 << (MariaDBParser.TRUNCATE - 635)) | (1 << (MariaDBParser.TYPES - 635)) | (1 << (MariaDBParser.UNBOUNDED - 635)) | (1 << (MariaDBParser.UNDEFINED - 635)) | (1 << (MariaDBParser.UNDOFILE - 635)) | (1 << (MariaDBParser.UNDO_BUFFER_SIZE - 635)) | (1 << (MariaDBParser.UNINSTALL - 635)) | (1 << (MariaDBParser.UNKNOWN - 635)))) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & ((1 << (MariaDBParser.UNTIL - 667)) | (1 << (MariaDBParser.UPGRADE - 667)) | (1 << (MariaDBParser.USER - 667)) | (1 << (MariaDBParser.USE_FRM - 667)) | (1 << (MariaDBParser.USER_RESOURCES - 667)) | (1 << (MariaDBParser.VALIDATION - 667)) | (1 << (MariaDBParser.VALUE - 667)) | (1 << (MariaDBParser.VARIABLES - 667)) | (1 << (MariaDBParser.VIEW - 667)) | (1 << (MariaDBParser.VIRTUAL - 667)) | (1 << (MariaDBParser.VISIBLE - 667)) | (1 << (MariaDBParser.WAIT - 667)) | (1 << (MariaDBParser.WARNINGS - 667)) | (1 << (MariaDBParser.WITHOUT - 667)) | (1 << (MariaDBParser.WORK - 667)) | (1 << (MariaDBParser.WRAPPER - 667)) | (1 << (MariaDBParser.WSREP_MEMBERSHIP - 667)) | (1 << (MariaDBParser.WSREP_STATUS - 667)) | (1 << (MariaDBParser.X509 - 667)) | (1 << (MariaDBParser.XA - 667)) | (1 << (MariaDBParser.XML - 667)) | (1 << (MariaDBParser.EUR - 667)) | (1 << (MariaDBParser.USA - 667)) | (1 << (MariaDBParser.JIS - 667)) | (1 << (MariaDBParser.ISO - 667)) | (1 << (MariaDBParser.INTERNAL - 667)) | (1 << (MariaDBParser.QUARTER - 667)) | (1 << (MariaDBParser.MONTH - 667)) | (1 << (MariaDBParser.DAY - 667)) | (1 << (MariaDBParser.HOUR - 667)))) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & ((1 << (MariaDBParser.MINUTE - 699)) | (1 << (MariaDBParser.WEEK - 699)) | (1 << (MariaDBParser.SECOND - 699)) | (1 << (MariaDBParser.MICROSECOND - 699)) | (1 << (MariaDBParser.USER_STATISTICS - 699)) | (1 << (MariaDBParser.CLIENT_STATISTICS - 699)) | (1 << (MariaDBParser.INDEX_STATISTICS - 699)) | (1 << (MariaDBParser.TABLE_STATISTICS - 699)) | (1 << (MariaDBParser.ADMIN - 699)) | (1 << (MariaDBParser.AUDIT_ADMIN - 699)) | (1 << (MariaDBParser.BACKUP_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ENCRYPTION_ADMIN - 699)) | (1 << (MariaDBParser.CLONE_ADMIN - 699)) | (1 << (MariaDBParser.CONNECTION_ADMIN - 699)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ADMIN - 699)) | (1 << (MariaDBParser.EXECUTE - 699)) | (1 << (MariaDBParser.FILE - 699)) | (1 << (MariaDBParser.FIREWALL_ADMIN - 699)) | (1 << (MariaDBParser.FIREWALL_USER - 699)) | (1 << (MariaDBParser.GROUP_REPLICATION_ADMIN - 699)) | (1 << (MariaDBParser.INNODB_REDO_LOG_ARCHIVE - 699)) | (1 << (MariaDBParser.INVOKE - 699)) | (1 << (MariaDBParser.LAMBDA - 699)) | (1 << (MariaDBParser.NDB_STORED_USER - 699)) | (1 << (MariaDBParser.PASSWORDLESS_USER_ADMIN - 699)))) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & ((1 << (MariaDBParser.PERSIST_RO_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.PRIVILEGES - 731)) | (1 << (MariaDBParser.PROCESS - 731)) | (1 << (MariaDBParser.RELOAD - 731)) | (1 << (MariaDBParser.REPLICATION_APPLIER - 731)) | (1 << (MariaDBParser.REPLICATION_SLAVE_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_USER - 731)) | (1 << (MariaDBParser.ROLE_ADMIN - 731)) | (1 << (MariaDBParser.ROUTINE - 731)) | (1 << (MariaDBParser.S3 - 731)) | (1 << (MariaDBParser.SESSION_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.SET_USER_ID - 731)) | (1 << (MariaDBParser.SHOW_ROUTINE - 731)) | (1 << (MariaDBParser.SHUTDOWN - 731)) | (1 << (MariaDBParser.SUPER - 731)) | (1 << (MariaDBParser.SYSTEM_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.TABLES - 731)) | (1 << (MariaDBParser.TABLE_ENCRYPTION_ADMIN - 731)) | (1 << (MariaDBParser.VERSION_TOKEN_ADMIN - 731)) | (1 << (MariaDBParser.XA_RECOVER_ADMIN - 731)) | (1 << (MariaDBParser.ARMSCII8 - 731)) | (1 << (MariaDBParser.ASCII - 731)) | (1 << (MariaDBParser.BIG5 - 731)) | (1 << (MariaDBParser.CP1250 - 731)) | (1 << (MariaDBParser.CP1251 - 731)) | (1 << (MariaDBParser.CP1256 - 731)) | (1 << (MariaDBParser.CP1257 - 731)) | (1 << (MariaDBParser.CP850 - 731)) | (1 << (MariaDBParser.CP852 - 731)) | (1 << (MariaDBParser.CP866 - 731)))) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & ((1 << (MariaDBParser.CP932 - 763)) | (1 << (MariaDBParser.DEC8 - 763)) | (1 << (MariaDBParser.EUCJPMS - 763)) | (1 << (MariaDBParser.EUCKR - 763)) | (1 << (MariaDBParser.GB18030 - 763)) | (1 << (MariaDBParser.GB2312 - 763)) | (1 << (MariaDBParser.GBK - 763)) | (1 << (MariaDBParser.GEOSTD8 - 763)) | (1 << (MariaDBParser.GREEK - 763)) | (1 << (MariaDBParser.HEBREW - 763)) | (1 << (MariaDBParser.HP8 - 763)) | (1 << (MariaDBParser.KEYBCS2 - 763)) | (1 << (MariaDBParser.KOI8R - 763)) | (1 << (MariaDBParser.KOI8U - 763)) | (1 << (MariaDBParser.LATIN1 - 763)) | (1 << (MariaDBParser.LATIN2 - 763)) | (1 << (MariaDBParser.LATIN5 - 763)) | (1 << (MariaDBParser.LATIN7 - 763)) | (1 << (MariaDBParser.MACCE - 763)) | (1 << (MariaDBParser.MACROMAN - 763)) | (1 << (MariaDBParser.SJIS - 763)) | (1 << (MariaDBParser.SWE7 - 763)) | (1 << (MariaDBParser.TIS620 - 763)) | (1 << (MariaDBParser.UCS2 - 763)) | (1 << (MariaDBParser.UJIS - 763)) | (1 << (MariaDBParser.UTF16 - 763)) | (1 << (MariaDBParser.UTF16LE - 763)) | (1 << (MariaDBParser.UTF32 - 763)) | (1 << (MariaDBParser.UTF8 - 763)) | (1 << (MariaDBParser.UTF8MB3 - 763)) | (1 << (MariaDBParser.UTF8MB4 - 763)) | (1 << (MariaDBParser.ARCHIVE - 763)))) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & ((1 << (MariaDBParser.BLACKHOLE - 795)) | (1 << (MariaDBParser.CSV - 795)) | (1 << (MariaDBParser.FEDERATED - 795)) | (1 << (MariaDBParser.INNODB - 795)) | (1 << (MariaDBParser.MEMORY - 795)) | (1 << (MariaDBParser.MRG_MYISAM - 795)) | (1 << (MariaDBParser.MYISAM - 795)) | (1 << (MariaDBParser.NDB - 795)) | (1 << (MariaDBParser.NDBCLUSTER - 795)) | (1 << (MariaDBParser.PERFORMANCE_SCHEMA - 795)) | (1 << (MariaDBParser.TOKUDB - 795)) | (1 << (MariaDBParser.REPEATABLE - 795)) | (1 << (MariaDBParser.COMMITTED - 795)) | (1 << (MariaDBParser.UNCOMMITTED - 795)) | (1 << (MariaDBParser.SERIALIZABLE - 795)) | (1 << (MariaDBParser.GEOMETRYCOLLECTION - 795)) | (1 << (MariaDBParser.LINESTRING - 795)) | (1 << (MariaDBParser.MULTILINESTRING - 795)) | (1 << (MariaDBParser.MULTIPOINT - 795)) | (1 << (MariaDBParser.MULTIPOLYGON - 795)) | (1 << (MariaDBParser.POINT - 795)) | (1 << (MariaDBParser.POLYGON - 795)) | (1 << (MariaDBParser.ABS - 795)) | (1 << (MariaDBParser.ACOS - 795)) | (1 << (MariaDBParser.ADDDATE - 795)) | (1 << (MariaDBParser.ADDTIME - 795)) | (1 << (MariaDBParser.AES_DECRYPT - 795)) | (1 << (MariaDBParser.AES_ENCRYPT - 795)) | (1 << (MariaDBParser.AREA - 795)) | (1 << (MariaDBParser.ASBINARY - 795)))) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & ((1 << (MariaDBParser.ASIN - 827)) | (1 << (MariaDBParser.ASTEXT - 827)) | (1 << (MariaDBParser.ASWKB - 827)) | (1 << (MariaDBParser.ASWKT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DECRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DERIVE - 827)) | (1 << (MariaDBParser.ASYMMETRIC_ENCRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_SIGN - 827)) | (1 << (MariaDBParser.ASYMMETRIC_VERIFY - 827)) | (1 << (MariaDBParser.ATAN - 827)) | (1 << (MariaDBParser.ATAN2 - 827)) | (1 << (MariaDBParser.BENCHMARK - 827)) | (1 << (MariaDBParser.BIN - 827)) | (1 << (MariaDBParser.BIT_COUNT - 827)) | (1 << (MariaDBParser.BIT_LENGTH - 827)) | (1 << (MariaDBParser.BUFFER - 827)) | (1 << (MariaDBParser.CATALOG_NAME - 827)) | (1 << (MariaDBParser.CEIL - 827)) | (1 << (MariaDBParser.CEILING - 827)) | (1 << (MariaDBParser.CENTROID - 827)) | (1 << (MariaDBParser.CHARACTER_LENGTH - 827)) | (1 << (MariaDBParser.CHARSET - 827)) | (1 << (MariaDBParser.CHAR_LENGTH - 827)) | (1 << (MariaDBParser.COERCIBILITY - 827)) | (1 << (MariaDBParser.COLLATION - 827)) | (1 << (MariaDBParser.COMPRESS - 827)) | (1 << (MariaDBParser.CONCAT - 827)) | (1 << (MariaDBParser.CONCAT_WS - 827)) | (1 << (MariaDBParser.CONNECTION_ID - 827)) | (1 << (MariaDBParser.CONV - 827)) | (1 << (MariaDBParser.CONVERT_TZ - 827)) | (1 << (MariaDBParser.COS - 827)))) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & ((1 << (MariaDBParser.COT - 859)) | (1 << (MariaDBParser.CRC32 - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY - 859)) | (1 << (MariaDBParser.CREATE_DH_PARAMETERS - 859)) | (1 << (MariaDBParser.CREATE_DIGEST - 859)) | (1 << (MariaDBParser.CROSSES - 859)) | (1 << (MariaDBParser.DATEDIFF - 859)) | (1 << (MariaDBParser.DATE_FORMAT - 859)) | (1 << (MariaDBParser.DAYNAME - 859)) | (1 << (MariaDBParser.DAYOFMONTH - 859)) | (1 << (MariaDBParser.DAYOFWEEK - 859)) | (1 << (MariaDBParser.DAYOFYEAR - 859)) | (1 << (MariaDBParser.DECODE - 859)) | (1 << (MariaDBParser.DEGREES - 859)) | (1 << (MariaDBParser.DES_DECRYPT - 859)) | (1 << (MariaDBParser.DES_ENCRYPT - 859)) | (1 << (MariaDBParser.DIMENSION - 859)) | (1 << (MariaDBParser.DISJOINT - 859)) | (1 << (MariaDBParser.ELT - 859)) | (1 << (MariaDBParser.ENCODE - 859)) | (1 << (MariaDBParser.ENCRYPT - 859)) | (1 << (MariaDBParser.ENDPOINT - 859)) | (1 << (MariaDBParser.ENGINE_ATTRIBUTE - 859)) | (1 << (MariaDBParser.ENVELOPE - 859)) | (1 << (MariaDBParser.EQUALS - 859)) | (1 << (MariaDBParser.EXP - 859)) | (1 << (MariaDBParser.EXPORT_SET - 859)) | (1 << (MariaDBParser.EXTERIORRING - 859)) | (1 << (MariaDBParser.EXTRACTVALUE - 859)) | (1 << (MariaDBParser.FIELD - 859)) | (1 << (MariaDBParser.FIND_IN_SET - 859)))) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & ((1 << (MariaDBParser.FLOOR - 891)) | (1 << (MariaDBParser.FORMAT - 891)) | (1 << (MariaDBParser.FOUND_ROWS - 891)) | (1 << (MariaDBParser.FROM_BASE64 - 891)) | (1 << (MariaDBParser.FROM_DAYS - 891)) | (1 << (MariaDBParser.FROM_UNIXTIME - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYN - 891)) | (1 << (MariaDBParser.GEOMETRYTYPE - 891)) | (1 << (MariaDBParser.GEOMFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMFROMWKB - 891)) | (1 << (MariaDBParser.GET_FORMAT - 891)) | (1 << (MariaDBParser.GET_LOCK - 891)) | (1 << (MariaDBParser.GLENGTH - 891)) | (1 << (MariaDBParser.GREATEST - 891)) | (1 << (MariaDBParser.GTID_SUBSET - 891)) | (1 << (MariaDBParser.GTID_SUBTRACT - 891)) | (1 << (MariaDBParser.HEX - 891)) | (1 << (MariaDBParser.IFNULL - 891)) | (1 << (MariaDBParser.INET6_ATON - 891)) | (1 << (MariaDBParser.INET6_NTOA - 891)) | (1 << (MariaDBParser.INET_ATON - 891)) | (1 << (MariaDBParser.INET_NTOA - 891)) | (1 << (MariaDBParser.INSTR - 891)) | (1 << (MariaDBParser.INTERIORRINGN - 891)) | (1 << (MariaDBParser.INTERSECTS - 891)) | (1 << (MariaDBParser.ISCLOSED - 891)))) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & ((1 << (MariaDBParser.ISEMPTY - 923)) | (1 << (MariaDBParser.ISNULL - 923)) | (1 << (MariaDBParser.ISSIMPLE - 923)) | (1 << (MariaDBParser.IS_FREE_LOCK - 923)) | (1 << (MariaDBParser.IS_IPV4 - 923)) | (1 << (MariaDBParser.IS_IPV4_COMPAT - 923)) | (1 << (MariaDBParser.IS_IPV4_MAPPED - 923)) | (1 << (MariaDBParser.IS_IPV6 - 923)) | (1 << (MariaDBParser.IS_USED_LOCK - 923)) | (1 << (MariaDBParser.LAST_INSERT_ID - 923)) | (1 << (MariaDBParser.LCASE - 923)) | (1 << (MariaDBParser.LEAST - 923)) | (1 << (MariaDBParser.LENGTH - 923)) | (1 << (MariaDBParser.LINEFROMTEXT - 923)) | (1 << (MariaDBParser.LINEFROMWKB - 923)) | (1 << (MariaDBParser.LINESTRINGFROMTEXT - 923)) | (1 << (MariaDBParser.LINESTRINGFROMWKB - 923)) | (1 << (MariaDBParser.LN - 923)) | (1 << (MariaDBParser.LOAD_FILE - 923)) | (1 << (MariaDBParser.LOCATE - 923)) | (1 << (MariaDBParser.LOG - 923)) | (1 << (MariaDBParser.LOG10 - 923)) | (1 << (MariaDBParser.LOG2 - 923)) | (1 << (MariaDBParser.LOWER - 923)) | (1 << (MariaDBParser.LPAD - 923)) | (1 << (MariaDBParser.LTRIM - 923)) | (1 << (MariaDBParser.MAKEDATE - 923)) | (1 << (MariaDBParser.MAKETIME - 923)) | (1 << (MariaDBParser.MAKE_SET - 923)) | (1 << (MariaDBParser.MASTER_POS_WAIT - 923)) | (1 << (MariaDBParser.MBRCONTAINS - 923)) | (1 << (MariaDBParser.MBRDISJOINT - 923)))) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & ((1 << (MariaDBParser.MBREQUAL - 955)) | (1 << (MariaDBParser.MBRINTERSECTS - 955)) | (1 << (MariaDBParser.MBROVERLAPS - 955)) | (1 << (MariaDBParser.MBRTOUCHES - 955)) | (1 << (MariaDBParser.MBRWITHIN - 955)) | (1 << (MariaDBParser.MD5 - 955)) | (1 << (MariaDBParser.MLINEFROMTEXT - 955)) | (1 << (MariaDBParser.MLINEFROMWKB - 955)) | (1 << (MariaDBParser.MONTHNAME - 955)) | (1 << (MariaDBParser.MPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MPOLYFROMTEXT - 955)) | (1 << (MariaDBParser.MPOLYFROMWKB - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMTEXT - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMWKB - 955)) | (1 << (MariaDBParser.NAME_CONST - 955)) | (1 << (MariaDBParser.NULLIF - 955)) | (1 << (MariaDBParser.NUMGEOMETRIES - 955)) | (1 << (MariaDBParser.NUMINTERIORRINGS - 955)) | (1 << (MariaDBParser.NUMPOINTS - 955)) | (1 << (MariaDBParser.OCT - 955)) | (1 << (MariaDBParser.OCTET_LENGTH - 955)) | (1 << (MariaDBParser.ORD - 955)) | (1 << (MariaDBParser.OVERLAPS - 955)) | (1 << (MariaDBParser.PERIOD_ADD - 955)) | (1 << (MariaDBParser.PERIOD_DIFF - 955)) | (1 << (MariaDBParser.PI - 955)) | (1 << (MariaDBParser.POINTFROMTEXT - 955)))) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & ((1 << (MariaDBParser.POINTFROMWKB - 987)) | (1 << (MariaDBParser.POINTN - 987)) | (1 << (MariaDBParser.POLYFROMTEXT - 987)) | (1 << (MariaDBParser.POLYFROMWKB - 987)) | (1 << (MariaDBParser.POLYGONFROMTEXT - 987)) | (1 << (MariaDBParser.POLYGONFROMWKB - 987)) | (1 << (MariaDBParser.POW - 987)) | (1 << (MariaDBParser.POWER - 987)) | (1 << (MariaDBParser.QUOTE - 987)) | (1 << (MariaDBParser.RADIANS - 987)) | (1 << (MariaDBParser.RAND - 987)) | (1 << (MariaDBParser.RANDOM_BYTES - 987)) | (1 << (MariaDBParser.RELEASE_LOCK - 987)) | (1 << (MariaDBParser.REVERSE - 987)) | (1 << (MariaDBParser.ROUND - 987)) | (1 << (MariaDBParser.ROW_COUNT - 987)) | (1 << (MariaDBParser.RPAD - 987)) | (1 << (MariaDBParser.RTRIM - 987)) | (1 << (MariaDBParser.SEC_TO_TIME - 987)) | (1 << (MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE - 987)) | (1 << (MariaDBParser.SESSION_USER - 987)) | (1 << (MariaDBParser.SHA - 987)) | (1 << (MariaDBParser.SHA1 - 987)) | (1 << (MariaDBParser.SHA2 - 987)) | (1 << (MariaDBParser.SCHEMA_NAME - 987)) | (1 << (MariaDBParser.SIGN - 987)) | (1 << (MariaDBParser.SIN - 987)) | (1 << (MariaDBParser.SLEEP - 987)) | (1 << (MariaDBParser.SOUNDEX - 987)) | (1 << (MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS - 987)) | (1 << (MariaDBParser.SQRT - 987)) | (1 << (MariaDBParser.SRID - 987)))) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & ((1 << (MariaDBParser.STARTPOINT - 1019)) | (1 << (MariaDBParser.STRCMP - 1019)) | (1 << (MariaDBParser.STR_TO_DATE - 1019)) | (1 << (MariaDBParser.ST_AREA - 1019)) | (1 << (MariaDBParser.ST_ASBINARY - 1019)) | (1 << (MariaDBParser.ST_ASTEXT - 1019)) | (1 << (MariaDBParser.ST_ASWKB - 1019)) | (1 << (MariaDBParser.ST_ASWKT - 1019)) | (1 << (MariaDBParser.ST_BUFFER - 1019)) | (1 << (MariaDBParser.ST_CENTROID - 1019)) | (1 << (MariaDBParser.ST_CONTAINS - 1019)) | (1 << (MariaDBParser.ST_CROSSES - 1019)) | (1 << (MariaDBParser.ST_DIFFERENCE - 1019)) | (1 << (MariaDBParser.ST_DIMENSION - 1019)) | (1 << (MariaDBParser.ST_DISJOINT - 1019)) | (1 << (MariaDBParser.ST_DISTANCE - 1019)) | (1 << (MariaDBParser.ST_ENDPOINT - 1019)) | (1 << (MariaDBParser.ST_ENVELOPE - 1019)) | (1 << (MariaDBParser.ST_EQUALS - 1019)) | (1 << (MariaDBParser.ST_EXTERIORRING - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYN - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYTYPE - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMWKB - 1019)) | (1 << (MariaDBParser.ST_INTERIORRINGN - 1019)))) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & ((1 << (MariaDBParser.ST_INTERSECTION - 1051)) | (1 << (MariaDBParser.ST_INTERSECTS - 1051)) | (1 << (MariaDBParser.ST_ISCLOSED - 1051)) | (1 << (MariaDBParser.ST_ISEMPTY - 1051)) | (1 << (MariaDBParser.ST_ISSIMPLE - 1051)) | (1 << (MariaDBParser.ST_LINEFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINEFROMWKB - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMWKB - 1051)) | (1 << (MariaDBParser.ST_NUMGEOMETRIES - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRING - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRINGS - 1051)) | (1 << (MariaDBParser.ST_NUMPOINTS - 1051)) | (1 << (MariaDBParser.ST_OVERLAPS - 1051)) | (1 << (MariaDBParser.ST_POINTFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POINTFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POINTN - 1051)) | (1 << (MariaDBParser.ST_POLYFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMWKB - 1051)) | (1 << (MariaDBParser.ST_SRID - 1051)) | (1 << (MariaDBParser.ST_STARTPOINT - 1051)) | (1 << (MariaDBParser.ST_SYMDIFFERENCE - 1051)) | (1 << (MariaDBParser.ST_TOUCHES - 1051)) | (1 << (MariaDBParser.ST_UNION - 1051)) | (1 << (MariaDBParser.ST_WITHIN - 1051)) | (1 << (MariaDBParser.ST_X - 1051)) | (1 << (MariaDBParser.ST_Y - 1051)) | (1 << (MariaDBParser.SUBDATE - 1051)) | (1 << (MariaDBParser.SUBSTRING_INDEX - 1051)) | (1 << (MariaDBParser.SUBTIME - 1051)))) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & ((1 << (MariaDBParser.SYSTEM_USER - 1083)) | (1 << (MariaDBParser.TAN - 1083)) | (1 << (MariaDBParser.TIMEDIFF - 1083)) | (1 << (MariaDBParser.TIMESTAMPADD - 1083)) | (1 << (MariaDBParser.TIMESTAMPDIFF - 1083)) | (1 << (MariaDBParser.TIME_FORMAT - 1083)) | (1 << (MariaDBParser.TIME_TO_SEC - 1083)) | (1 << (MariaDBParser.TOUCHES - 1083)) | (1 << (MariaDBParser.TO_BASE64 - 1083)) | (1 << (MariaDBParser.TO_DAYS - 1083)) | (1 << (MariaDBParser.TO_SECONDS - 1083)) | (1 << (MariaDBParser.UCASE - 1083)) | (1 << (MariaDBParser.UNCOMPRESS - 1083)) | (1 << (MariaDBParser.UNCOMPRESSED_LENGTH - 1083)) | (1 << (MariaDBParser.UNHEX - 1083)) | (1 << (MariaDBParser.UNIX_TIMESTAMP - 1083)) | (1 << (MariaDBParser.UPDATEXML - 1083)) | (1 << (MariaDBParser.UPPER - 1083)) | (1 << (MariaDBParser.UUID - 1083)) | (1 << (MariaDBParser.UUID_SHORT - 1083)) | (1 << (MariaDBParser.VALIDATE_PASSWORD_STRENGTH - 1083)) | (1 << (MariaDBParser.VERSION - 1083)) | (1 << (MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1083)) | (1 << (MariaDBParser.WEEKDAY - 1083)) | (1 << (MariaDBParser.WEEKOFYEAR - 1083)) | (1 << (MariaDBParser.WEIGHT_STRING - 1083)) | (1 << (MariaDBParser.WITHIN - 1083)) | (1 << (MariaDBParser.YEARWEEK - 1083)) | (1 << (MariaDBParser.Y_FUNCTION - 1083)) | (1 << (MariaDBParser.X_FUNCTION - 1083)) | (1 << (MariaDBParser.VIA - 1083)) | (1 << (MariaDBParser.LASTVAL - 1083)))) !== 0) || ((((_la - 1115)) & ~0x1F) === 0 && ((1 << (_la - 1115)) & ((1 << (MariaDBParser.NEXTVAL - 1115)) | (1 << (MariaDBParser.SETVAL - 1115)) | (1 << (MariaDBParser.PREVIOUS - 1115)) | (1 << (MariaDBParser.PERSISTENT - 1115)) | (1 << (MariaDBParser.BINLOG_MONITOR - 1115)) | (1 << (MariaDBParser.BINLOG_REPLAY - 1115)) | (1 << (MariaDBParser.FEDERATED_ADMIN - 1115)) | (1 << (MariaDBParser.READ_ONLY_ADMIN - 1115)) | (1 << (MariaDBParser.REPLICA - 1115)) | (1 << (MariaDBParser.REPLICAS - 1115)) | (1 << (MariaDBParser.REPLICATION_MASTER_ADMIN - 1115)) | (1 << (MariaDBParser.MONITOR - 1115)) | (1 << (MariaDBParser.READ_ONLY - 1115)) | (1 << (MariaDBParser.REPLAY - 1115)) | (1 << (MariaDBParser.MOD - 1115)))) !== 0) || ((((_la - 1166)) & ~0x1F) === 0 && ((1 << (_la - 1166)) & ((1 << (MariaDBParser.CHARSET_REVERSE_QOUTE_STRING - 1166)) | (1 << (MariaDBParser.STRING_LITERAL - 1166)) | (1 << (MariaDBParser.ID - 1166)))) !== 0)) {
					{
					this.state = 1911;
					this.uid();
					}
				}

				this.state = 1914;
				this.indexColumnNames();
				this.state = 1918;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.IGNORED || _la === MariaDBParser.NOT || _la === MariaDBParser.USING || _la === MariaDBParser.WITH || _la === MariaDBParser.CLUSTERING || _la === MariaDBParser.COMMENT || _la === MariaDBParser.INVISIBLE || _la === MariaDBParser.KEY_BLOCK_SIZE || _la === MariaDBParser.VISIBLE || _la === MariaDBParser.ENGINE_ATTRIBUTE || _la === MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					this.state = 1915;
					this.indexOption();
					}
					}
					this.state = 1920;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableOption(): TableOptionContext {
		let _localctx: TableOptionContext = new TableOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 112, MariaDBParser.RULE_tableOption);
		let _la: number;
		try {
			this.state = 2114;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 248, this._ctx) ) {
			case 1:
				_localctx = new TableOptionEngineContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1923;
				this.match(MariaDBParser.ENGINE);
				this.state = 1925;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1924;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1928;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 211, this._ctx) ) {
				case 1:
					{
					this.state = 1927;
					this.engineName();
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new TableOptionEngineAttributeContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1930;
				this.match(MariaDBParser.ENGINE_ATTRIBUTE);
				this.state = 1932;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1931;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1934;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;

			case 3:
				_localctx = new TableOptionAutoextendSizeContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1935;
				this.match(MariaDBParser.AUTOEXTEND_SIZE);
				this.state = 1937;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1936;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1939;
				this.decimalLiteral();
				}
				break;

			case 4:
				_localctx = new TableOptionAutoIncrementContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1940;
				this.match(MariaDBParser.AUTO_INCREMENT);
				this.state = 1942;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1941;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1944;
				this.decimalLiteral();
				}
				break;

			case 5:
				_localctx = new TableOptionAverageContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1945;
				this.match(MariaDBParser.AVG_ROW_LENGTH);
				this.state = 1947;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1946;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1949;
				this.decimalLiteral();
				}
				break;

			case 6:
				_localctx = new TableOptionCharsetContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1951;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.DEFAULT) {
					{
					this.state = 1950;
					this.match(MariaDBParser.DEFAULT);
					}
				}

				this.state = 1953;
				this.charSet();
				this.state = 1955;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1954;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1959;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.BINARY:
				case MariaDBParser.ARMSCII8:
				case MariaDBParser.ASCII:
				case MariaDBParser.BIG5:
				case MariaDBParser.CP1250:
				case MariaDBParser.CP1251:
				case MariaDBParser.CP1256:
				case MariaDBParser.CP1257:
				case MariaDBParser.CP850:
				case MariaDBParser.CP852:
				case MariaDBParser.CP866:
				case MariaDBParser.CP932:
				case MariaDBParser.DEC8:
				case MariaDBParser.EUCJPMS:
				case MariaDBParser.EUCKR:
				case MariaDBParser.GB18030:
				case MariaDBParser.GB2312:
				case MariaDBParser.GBK:
				case MariaDBParser.GEOSTD8:
				case MariaDBParser.GREEK:
				case MariaDBParser.HEBREW:
				case MariaDBParser.HP8:
				case MariaDBParser.KEYBCS2:
				case MariaDBParser.KOI8R:
				case MariaDBParser.KOI8U:
				case MariaDBParser.LATIN1:
				case MariaDBParser.LATIN2:
				case MariaDBParser.LATIN5:
				case MariaDBParser.LATIN7:
				case MariaDBParser.MACCE:
				case MariaDBParser.MACROMAN:
				case MariaDBParser.SJIS:
				case MariaDBParser.SWE7:
				case MariaDBParser.TIS620:
				case MariaDBParser.UCS2:
				case MariaDBParser.UJIS:
				case MariaDBParser.UTF16:
				case MariaDBParser.UTF16LE:
				case MariaDBParser.UTF32:
				case MariaDBParser.UTF8:
				case MariaDBParser.UTF8MB3:
				case MariaDBParser.UTF8MB4:
				case MariaDBParser.CHARSET_REVERSE_QOUTE_STRING:
				case MariaDBParser.STRING_LITERAL:
					{
					this.state = 1957;
					this.charsetName();
					}
					break;
				case MariaDBParser.DEFAULT:
					{
					this.state = 1958;
					this.match(MariaDBParser.DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 7:
				_localctx = new TableOptionChecksumContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1961;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.CHECKSUM || _la === MariaDBParser.PAGE_CHECKSUM)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1963;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1962;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1965;
				(_localctx as TableOptionChecksumContext)._boolValue = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.ZERO_DECIMAL || _la === MariaDBParser.ONE_DECIMAL)) {
					(_localctx as TableOptionChecksumContext)._boolValue = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 8:
				_localctx = new TableOptionCollateContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1967;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.DEFAULT) {
					{
					this.state = 1966;
					this.match(MariaDBParser.DEFAULT);
					}
				}

				this.state = 1969;
				this.match(MariaDBParser.COLLATE);
				this.state = 1971;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1970;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1973;
				this.collationName();
				}
				break;

			case 9:
				_localctx = new TableOptionCommentContext(_localctx);
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1974;
				this.match(MariaDBParser.COMMENT);
				this.state = 1976;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1975;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1978;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;

			case 10:
				_localctx = new TableOptionCompressionContext(_localctx);
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1979;
				this.match(MariaDBParser.COMPRESSION);
				this.state = 1981;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1980;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1983;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.STRING_LITERAL || _la === MariaDBParser.ID)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 11:
				_localctx = new TableOptionConnectionContext(_localctx);
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1984;
				this.match(MariaDBParser.CONNECTION);
				this.state = 1986;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1985;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1988;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;

			case 12:
				_localctx = new TableOptionDataDirectoryContext(_localctx);
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1989;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.INDEX || _la === MariaDBParser.DATA)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1990;
				this.match(MariaDBParser.DIRECTORY);
				this.state = 1992;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1991;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1994;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;

			case 13:
				_localctx = new TableOptionDelayContext(_localctx);
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1995;
				this.match(MariaDBParser.DELAY_KEY_WRITE);
				this.state = 1997;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 1996;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1999;
				(_localctx as TableOptionDelayContext)._boolValue = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.ZERO_DECIMAL || _la === MariaDBParser.ONE_DECIMAL)) {
					(_localctx as TableOptionDelayContext)._boolValue = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 14:
				_localctx = new TableOptionEncryptionContext(_localctx);
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 2000;
				this.match(MariaDBParser.ENCRYPTION);
				this.state = 2002;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 2001;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2004;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;

			case 15:
				_localctx = new TableOptionEncryptedContext(_localctx);
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 2005;
				this.encryptedLiteral();
				this.state = 2007;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 2006;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2009;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.NO || _la === MariaDBParser.YES)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 16:
				_localctx = new TableOptionPageCompressedContext(_localctx);
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 2011;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.PAGE_COMPRESSED || _la === MariaDBParser.STRING_LITERAL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2013;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 2012;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2015;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.ZERO_DECIMAL || _la === MariaDBParser.ONE_DECIMAL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 17:
				_localctx = new TableOptionPageCompressionLevelContext(_localctx);
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 2016;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.PAGE_COMPRESSION_LEVEL || _la === MariaDBParser.STRING_LITERAL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2018;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 2017;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2020;
				this.decimalLiteral();
				}
				break;

			case 18:
				_localctx = new TableOptionEncryptionKeyIdContext(_localctx);
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 2021;
				this.match(MariaDBParser.ENCRYPTION_KEY_ID);
				this.state = 2023;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 2022;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2025;
				this.decimalLiteral();
				}
				break;

			case 19:
				_localctx = new TableOptionIndexDirectoryContext(_localctx);
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 2026;
				this.match(MariaDBParser.INDEX);
				this.state = 2027;
				this.match(MariaDBParser.DIRECTORY);
				this.state = 2029;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 2028;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2031;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;

			case 20:
				_localctx = new TableOptionInsertMethodContext(_localctx);
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 2032;
				this.match(MariaDBParser.INSERT_METHOD);
				this.state = 2034;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 2033;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2036;
				(_localctx as TableOptionInsertMethodContext)._insertMethod = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.FIRST || _la === MariaDBParser.LAST || _la === MariaDBParser.NO)) {
					(_localctx as TableOptionInsertMethodContext)._insertMethod = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 21:
				_localctx = new TableOptionKeyBlockSizeContext(_localctx);
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 2037;
				this.match(MariaDBParser.KEY_BLOCK_SIZE);
				this.state = 2039;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 2038;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2041;
				this.fileSizeLiteral();
				}
				break;

			case 22:
				_localctx = new TableOptionMaxRowsContext(_localctx);
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 2042;
				this.match(MariaDBParser.MAX_ROWS);
				this.state = 2044;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 2043;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2046;
				this.decimalLiteral();
				}
				break;

			case 23:
				_localctx = new TableOptionMinRowsContext(_localctx);
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 2047;
				this.match(MariaDBParser.MIN_ROWS);
				this.state = 2049;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 2048;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2051;
				this.decimalLiteral();
				}
				break;

			case 24:
				_localctx = new TableOptionPackKeysContext(_localctx);
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 2052;
				this.match(MariaDBParser.PACK_KEYS);
				this.state = 2054;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 2053;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2056;
				(_localctx as TableOptionPackKeysContext)._extBoolValue = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.DEFAULT || _la === MariaDBParser.ZERO_DECIMAL || _la === MariaDBParser.ONE_DECIMAL)) {
					(_localctx as TableOptionPackKeysContext)._extBoolValue = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 25:
				_localctx = new TableOptionPasswordContext(_localctx);
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 2057;
				this.match(MariaDBParser.PASSWORD);
				this.state = 2059;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 2058;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2061;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;

			case 26:
				_localctx = new TableOptionRowFormatContext(_localctx);
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 2062;
				this.match(MariaDBParser.ROW_FORMAT);
				this.state = 2064;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 2063;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2066;
				(_localctx as TableOptionRowFormatContext)._rowFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.DEFAULT || _la === MariaDBParser.COMPACT || _la === MariaDBParser.COMPRESSED || _la === MariaDBParser.DYNAMIC || _la === MariaDBParser.FIXED || _la === MariaDBParser.REDUNDANT || _la === MariaDBParser.ID)) {
					(_localctx as TableOptionRowFormatContext)._rowFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 27:
				_localctx = new TableOptionStartTransactionContext(_localctx);
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 2067;
				this.match(MariaDBParser.START);
				this.state = 2068;
				this.match(MariaDBParser.TRANSACTION);
				}
				break;

			case 28:
				_localctx = new TableOptionSecondaryEngineAttributeContext(_localctx);
				this.enterOuterAlt(_localctx, 28);
				{
				this.state = 2069;
				this.match(MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE);
				this.state = 2071;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 2070;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2073;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;

			case 29:
				_localctx = new TableOptionRecalculationContext(_localctx);
				this.enterOuterAlt(_localctx, 29);
				{
				this.state = 2074;
				this.match(MariaDBParser.STATS_AUTO_RECALC);
				this.state = 2076;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 2075;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2078;
				(_localctx as TableOptionRecalculationContext)._extBoolValue = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.DEFAULT || _la === MariaDBParser.ZERO_DECIMAL || _la === MariaDBParser.ONE_DECIMAL)) {
					(_localctx as TableOptionRecalculationContext)._extBoolValue = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 30:
				_localctx = new TableOptionPersistentContext(_localctx);
				this.enterOuterAlt(_localctx, 30);
				{
				this.state = 2079;
				this.match(MariaDBParser.STATS_PERSISTENT);
				this.state = 2081;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 2080;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2083;
				(_localctx as TableOptionPersistentContext)._extBoolValue = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.DEFAULT || _la === MariaDBParser.ZERO_DECIMAL || _la === MariaDBParser.ONE_DECIMAL)) {
					(_localctx as TableOptionPersistentContext)._extBoolValue = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 31:
				_localctx = new TableOptionSamplePageContext(_localctx);
				this.enterOuterAlt(_localctx, 31);
				{
				this.state = 2084;
				this.match(MariaDBParser.STATS_SAMPLE_PAGES);
				this.state = 2086;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 2085;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2090;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.DEFAULT:
					{
					this.state = 2088;
					this.match(MariaDBParser.DEFAULT);
					}
					break;
				case MariaDBParser.ZERO_DECIMAL:
				case MariaDBParser.ONE_DECIMAL:
				case MariaDBParser.TWO_DECIMAL:
				case MariaDBParser.DECIMAL_LITERAL:
				case MariaDBParser.REAL_LITERAL:
					{
					this.state = 2089;
					this.decimalLiteral();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 32:
				_localctx = new TableOptionTablespaceContext(_localctx);
				this.enterOuterAlt(_localctx, 32);
				{
				this.state = 2092;
				this.match(MariaDBParser.TABLESPACE);
				this.state = 2093;
				this.uid();
				this.state = 2095;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 245, this._ctx) ) {
				case 1:
					{
					this.state = 2094;
					this.tablespaceStorage();
					}
					break;
				}
				}
				break;

			case 33:
				_localctx = new TableOptionTableTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 33);
				{
				this.state = 2097;
				this.match(MariaDBParser.TABLE_TYPE);
				this.state = 2098;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				this.state = 2099;
				this.tableType();
				}
				break;

			case 34:
				_localctx = new TableOptionTablespaceContext(_localctx);
				this.enterOuterAlt(_localctx, 34);
				{
				this.state = 2100;
				this.tablespaceStorage();
				}
				break;

			case 35:
				_localctx = new TableOptionTransactionalContext(_localctx);
				this.enterOuterAlt(_localctx, 35);
				{
				this.state = 2101;
				this.match(MariaDBParser.TRANSACTIONAL);
				this.state = 2103;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 2102;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2105;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.ZERO_DECIMAL || _la === MariaDBParser.ONE_DECIMAL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 36:
				_localctx = new TableOptionUnionContext(_localctx);
				this.enterOuterAlt(_localctx, 36);
				{
				this.state = 2106;
				this.match(MariaDBParser.UNION);
				this.state = 2108;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 2107;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2110;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 2111;
				this.tables();
				this.state = 2112;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableType(): TableTypeContext {
		let _localctx: TableTypeContext = new TableTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 114, MariaDBParser.RULE_tableType);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2116;
			_la = this._input.LA(1);
			if (!(_la === MariaDBParser.MYSQL || _la === MariaDBParser.ODBC)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tablespaceStorage(): TablespaceStorageContext {
		let _localctx: TablespaceStorageContext = new TablespaceStorageContext(this._ctx, this.state);
		this.enterRule(_localctx, 116, MariaDBParser.RULE_tablespaceStorage);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2118;
			this.match(MariaDBParser.STORAGE);
			this.state = 2119;
			_la = this._input.LA(1);
			if (!(_la === MariaDBParser.DEFAULT || _la === MariaDBParser.DISK || _la === MariaDBParser.MEMORY)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionDefinitions(): PartitionDefinitionsContext {
		let _localctx: PartitionDefinitionsContext = new PartitionDefinitionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 118, MariaDBParser.RULE_partitionDefinitions);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2121;
			this.match(MariaDBParser.PARTITION);
			this.state = 2122;
			this.match(MariaDBParser.BY);
			this.state = 2123;
			this.partitionFunctionDefinition();
			this.state = 2126;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.PARTITIONS) {
				{
				this.state = 2124;
				this.match(MariaDBParser.PARTITIONS);
				this.state = 2125;
				_localctx._count = this.decimalLiteral();
				}
			}

			this.state = 2135;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.SUBPARTITION) {
				{
				this.state = 2128;
				this.match(MariaDBParser.SUBPARTITION);
				this.state = 2129;
				this.match(MariaDBParser.BY);
				this.state = 2130;
				this.subpartitionFunctionDefinition();
				this.state = 2133;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.SUBPARTITIONS) {
					{
					this.state = 2131;
					this.match(MariaDBParser.SUBPARTITIONS);
					this.state = 2132;
					_localctx._subCount = this.decimalLiteral();
					}
				}

				}
			}

			this.state = 2148;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 253, this._ctx) ) {
			case 1:
				{
				this.state = 2137;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 2138;
				this.partitionDefinition();
				this.state = 2143;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 2139;
					this.match(MariaDBParser.COMMA);
					this.state = 2140;
					this.partitionDefinition();
					}
					}
					this.state = 2145;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2146;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionFunctionDefinition(): PartitionFunctionDefinitionContext {
		let _localctx: PartitionFunctionDefinitionContext = new PartitionFunctionDefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 120, MariaDBParser.RULE_partitionFunctionDefinition);
		let _la: number;
		try {
			this.state = 2195;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 259, this._ctx) ) {
			case 1:
				_localctx = new PartitionFunctionHashContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2151;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.LINEAR) {
					{
					this.state = 2150;
					this.match(MariaDBParser.LINEAR);
					}
				}

				this.state = 2153;
				this.match(MariaDBParser.HASH);
				this.state = 2154;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 2155;
				this.expression(0);
				this.state = 2156;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;

			case 2:
				_localctx = new PartitionFunctionKeyContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2159;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.LINEAR) {
					{
					this.state = 2158;
					this.match(MariaDBParser.LINEAR);
					}
				}

				this.state = 2161;
				this.match(MariaDBParser.KEY);
				this.state = 2165;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.ALGORITHM) {
					{
					this.state = 2162;
					this.match(MariaDBParser.ALGORITHM);
					this.state = 2163;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					this.state = 2164;
					(_localctx as PartitionFunctionKeyContext)._algType = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MariaDBParser.ONE_DECIMAL || _la === MariaDBParser.TWO_DECIMAL)) {
						(_localctx as PartitionFunctionKeyContext)._algType = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 2167;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 2168;
				this.uidList();
				this.state = 2169;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;

			case 3:
				_localctx = new PartitionFunctionRangeContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2171;
				this.match(MariaDBParser.RANGE);
				this.state = 2181;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.LR_BRACKET:
					{
					this.state = 2172;
					this.match(MariaDBParser.LR_BRACKET);
					this.state = 2173;
					this.expression(0);
					this.state = 2174;
					this.match(MariaDBParser.RR_BRACKET);
					}
					break;
				case MariaDBParser.COLUMNS:
					{
					this.state = 2176;
					this.match(MariaDBParser.COLUMNS);
					this.state = 2177;
					this.match(MariaDBParser.LR_BRACKET);
					this.state = 2178;
					this.uidList();
					this.state = 2179;
					this.match(MariaDBParser.RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 4:
				_localctx = new PartitionFunctionListContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2183;
				this.match(MariaDBParser.LIST);
				this.state = 2193;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.LR_BRACKET:
					{
					this.state = 2184;
					this.match(MariaDBParser.LR_BRACKET);
					this.state = 2185;
					this.expression(0);
					this.state = 2186;
					this.match(MariaDBParser.RR_BRACKET);
					}
					break;
				case MariaDBParser.COLUMNS:
					{
					this.state = 2188;
					this.match(MariaDBParser.COLUMNS);
					this.state = 2189;
					this.match(MariaDBParser.LR_BRACKET);
					this.state = 2190;
					this.uidList();
					this.state = 2191;
					this.match(MariaDBParser.RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subpartitionFunctionDefinition(): SubpartitionFunctionDefinitionContext {
		let _localctx: SubpartitionFunctionDefinitionContext = new SubpartitionFunctionDefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 122, MariaDBParser.RULE_subpartitionFunctionDefinition);
		let _la: number;
		try {
			this.state = 2218;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 263, this._ctx) ) {
			case 1:
				_localctx = new SubPartitionFunctionHashContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2198;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.LINEAR) {
					{
					this.state = 2197;
					this.match(MariaDBParser.LINEAR);
					}
				}

				this.state = 2200;
				this.match(MariaDBParser.HASH);
				this.state = 2201;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 2202;
				this.expression(0);
				this.state = 2203;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;

			case 2:
				_localctx = new SubPartitionFunctionKeyContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2206;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.LINEAR) {
					{
					this.state = 2205;
					this.match(MariaDBParser.LINEAR);
					}
				}

				this.state = 2208;
				this.match(MariaDBParser.KEY);
				this.state = 2212;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.ALGORITHM) {
					{
					this.state = 2209;
					this.match(MariaDBParser.ALGORITHM);
					this.state = 2210;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					this.state = 2211;
					(_localctx as SubPartitionFunctionKeyContext)._algType = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MariaDBParser.ONE_DECIMAL || _la === MariaDBParser.TWO_DECIMAL)) {
						(_localctx as SubPartitionFunctionKeyContext)._algType = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 2214;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 2215;
				this.uidList();
				this.state = 2216;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionDefinition(): PartitionDefinitionContext {
		let _localctx: PartitionDefinitionContext = new PartitionDefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 124, MariaDBParser.RULE_partitionDefinition);
		let _la: number;
		try {
			this.state = 2366;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 282, this._ctx) ) {
			case 1:
				_localctx = new PartitionComparisonContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2220;
				this.match(MariaDBParser.PARTITION);
				this.state = 2221;
				this.uid();
				this.state = 2222;
				this.match(MariaDBParser.VALUES);
				this.state = 2223;
				this.match(MariaDBParser.LESS);
				this.state = 2224;
				this.match(MariaDBParser.THAN);
				this.state = 2225;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 2226;
				this.partitionDefinerAtom();
				this.state = 2231;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 2227;
					this.match(MariaDBParser.COMMA);
					this.state = 2228;
					this.partitionDefinerAtom();
					}
					}
					this.state = 2233;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2234;
				this.match(MariaDBParser.RR_BRACKET);
				this.state = 2238;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.DEFAULT || _la === MariaDBParser.INDEX || _la === MariaDBParser.COMMENT || _la === MariaDBParser.DATA || _la === MariaDBParser.ENGINE || ((((_la - 501)) & ~0x1F) === 0 && ((1 << (_la - 501)) & ((1 << (MariaDBParser.MAX_ROWS - 501)) | (1 << (MariaDBParser.MIN_ROWS - 501)) | (1 << (MariaDBParser.NODEGROUP - 501)))) !== 0) || _la === MariaDBParser.STORAGE || _la === MariaDBParser.TABLESPACE) {
					{
					{
					this.state = 2235;
					this.partitionOption();
					}
					}
					this.state = 2240;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2252;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.LR_BRACKET) {
					{
					this.state = 2241;
					this.match(MariaDBParser.LR_BRACKET);
					this.state = 2242;
					this.subpartitionDefinition();
					this.state = 2247;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === MariaDBParser.COMMA) {
						{
						{
						this.state = 2243;
						this.match(MariaDBParser.COMMA);
						this.state = 2244;
						this.subpartitionDefinition();
						}
						}
						this.state = 2249;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 2250;
					this.match(MariaDBParser.RR_BRACKET);
					}
				}

				}
				break;

			case 2:
				_localctx = new PartitionComparisonContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2254;
				this.match(MariaDBParser.PARTITION);
				this.state = 2255;
				this.uid();
				this.state = 2256;
				this.match(MariaDBParser.VALUES);
				this.state = 2257;
				this.match(MariaDBParser.LESS);
				this.state = 2258;
				this.match(MariaDBParser.THAN);
				this.state = 2259;
				this.partitionDefinerAtom();
				this.state = 2263;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.DEFAULT || _la === MariaDBParser.INDEX || _la === MariaDBParser.COMMENT || _la === MariaDBParser.DATA || _la === MariaDBParser.ENGINE || ((((_la - 501)) & ~0x1F) === 0 && ((1 << (_la - 501)) & ((1 << (MariaDBParser.MAX_ROWS - 501)) | (1 << (MariaDBParser.MIN_ROWS - 501)) | (1 << (MariaDBParser.NODEGROUP - 501)))) !== 0) || _la === MariaDBParser.STORAGE || _la === MariaDBParser.TABLESPACE) {
					{
					{
					this.state = 2260;
					this.partitionOption();
					}
					}
					this.state = 2265;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2277;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.LR_BRACKET) {
					{
					this.state = 2266;
					this.match(MariaDBParser.LR_BRACKET);
					this.state = 2267;
					this.subpartitionDefinition();
					this.state = 2272;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === MariaDBParser.COMMA) {
						{
						{
						this.state = 2268;
						this.match(MariaDBParser.COMMA);
						this.state = 2269;
						this.subpartitionDefinition();
						}
						}
						this.state = 2274;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 2275;
					this.match(MariaDBParser.RR_BRACKET);
					}
				}

				}
				break;

			case 3:
				_localctx = new PartitionListAtomContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2279;
				this.match(MariaDBParser.PARTITION);
				this.state = 2280;
				this.uid();
				this.state = 2281;
				this.match(MariaDBParser.VALUES);
				this.state = 2282;
				this.match(MariaDBParser.IN);
				this.state = 2283;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 2284;
				this.partitionDefinerAtom();
				this.state = 2289;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 2285;
					this.match(MariaDBParser.COMMA);
					this.state = 2286;
					this.partitionDefinerAtom();
					}
					}
					this.state = 2291;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2292;
				this.match(MariaDBParser.RR_BRACKET);
				this.state = 2296;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.DEFAULT || _la === MariaDBParser.INDEX || _la === MariaDBParser.COMMENT || _la === MariaDBParser.DATA || _la === MariaDBParser.ENGINE || ((((_la - 501)) & ~0x1F) === 0 && ((1 << (_la - 501)) & ((1 << (MariaDBParser.MAX_ROWS - 501)) | (1 << (MariaDBParser.MIN_ROWS - 501)) | (1 << (MariaDBParser.NODEGROUP - 501)))) !== 0) || _la === MariaDBParser.STORAGE || _la === MariaDBParser.TABLESPACE) {
					{
					{
					this.state = 2293;
					this.partitionOption();
					}
					}
					this.state = 2298;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2310;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.LR_BRACKET) {
					{
					this.state = 2299;
					this.match(MariaDBParser.LR_BRACKET);
					this.state = 2300;
					this.subpartitionDefinition();
					this.state = 2305;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === MariaDBParser.COMMA) {
						{
						{
						this.state = 2301;
						this.match(MariaDBParser.COMMA);
						this.state = 2302;
						this.subpartitionDefinition();
						}
						}
						this.state = 2307;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 2308;
					this.match(MariaDBParser.RR_BRACKET);
					}
				}

				}
				break;

			case 4:
				_localctx = new PartitionListVectorContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2312;
				this.match(MariaDBParser.PARTITION);
				this.state = 2313;
				this.uid();
				this.state = 2314;
				this.match(MariaDBParser.VALUES);
				this.state = 2315;
				this.match(MariaDBParser.IN);
				this.state = 2316;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 2317;
				this.partitionDefinerVector();
				this.state = 2322;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 2318;
					this.match(MariaDBParser.COMMA);
					this.state = 2319;
					this.partitionDefinerVector();
					}
					}
					this.state = 2324;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2325;
				this.match(MariaDBParser.RR_BRACKET);
				this.state = 2329;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.DEFAULT || _la === MariaDBParser.INDEX || _la === MariaDBParser.COMMENT || _la === MariaDBParser.DATA || _la === MariaDBParser.ENGINE || ((((_la - 501)) & ~0x1F) === 0 && ((1 << (_la - 501)) & ((1 << (MariaDBParser.MAX_ROWS - 501)) | (1 << (MariaDBParser.MIN_ROWS - 501)) | (1 << (MariaDBParser.NODEGROUP - 501)))) !== 0) || _la === MariaDBParser.STORAGE || _la === MariaDBParser.TABLESPACE) {
					{
					{
					this.state = 2326;
					this.partitionOption();
					}
					}
					this.state = 2331;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2343;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.LR_BRACKET) {
					{
					this.state = 2332;
					this.match(MariaDBParser.LR_BRACKET);
					this.state = 2333;
					this.subpartitionDefinition();
					this.state = 2338;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === MariaDBParser.COMMA) {
						{
						{
						this.state = 2334;
						this.match(MariaDBParser.COMMA);
						this.state = 2335;
						this.subpartitionDefinition();
						}
						}
						this.state = 2340;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 2341;
					this.match(MariaDBParser.RR_BRACKET);
					}
				}

				}
				break;

			case 5:
				_localctx = new PartitionSimpleContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2345;
				this.match(MariaDBParser.PARTITION);
				this.state = 2346;
				this.uid();
				this.state = 2350;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.DEFAULT || _la === MariaDBParser.INDEX || _la === MariaDBParser.COMMENT || _la === MariaDBParser.DATA || _la === MariaDBParser.ENGINE || ((((_la - 501)) & ~0x1F) === 0 && ((1 << (_la - 501)) & ((1 << (MariaDBParser.MAX_ROWS - 501)) | (1 << (MariaDBParser.MIN_ROWS - 501)) | (1 << (MariaDBParser.NODEGROUP - 501)))) !== 0) || _la === MariaDBParser.STORAGE || _la === MariaDBParser.TABLESPACE) {
					{
					{
					this.state = 2347;
					this.partitionOption();
					}
					}
					this.state = 2352;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2364;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.LR_BRACKET) {
					{
					this.state = 2353;
					this.match(MariaDBParser.LR_BRACKET);
					this.state = 2354;
					this.subpartitionDefinition();
					this.state = 2359;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === MariaDBParser.COMMA) {
						{
						{
						this.state = 2355;
						this.match(MariaDBParser.COMMA);
						this.state = 2356;
						this.subpartitionDefinition();
						}
						}
						this.state = 2361;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 2362;
					this.match(MariaDBParser.RR_BRACKET);
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionDefinerAtom(): PartitionDefinerAtomContext {
		let _localctx: PartitionDefinerAtomContext = new PartitionDefinerAtomContext(this._ctx, this.state);
		this.enterRule(_localctx, 126, MariaDBParser.RULE_partitionDefinerAtom);
		try {
			this.state = 2371;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 283, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2368;
				this.constant();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2369;
				this.expression(0);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2370;
				this.match(MariaDBParser.MAXVALUE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionDefinerVector(): PartitionDefinerVectorContext {
		let _localctx: PartitionDefinerVectorContext = new PartitionDefinerVectorContext(this._ctx, this.state);
		this.enterRule(_localctx, 128, MariaDBParser.RULE_partitionDefinerVector);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2373;
			this.match(MariaDBParser.LR_BRACKET);
			this.state = 2374;
			this.partitionDefinerAtom();
			this.state = 2377;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2375;
				this.match(MariaDBParser.COMMA);
				this.state = 2376;
				this.partitionDefinerAtom();
				}
				}
				this.state = 2379;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === MariaDBParser.COMMA);
			this.state = 2381;
			this.match(MariaDBParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subpartitionDefinition(): SubpartitionDefinitionContext {
		let _localctx: SubpartitionDefinitionContext = new SubpartitionDefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 130, MariaDBParser.RULE_subpartitionDefinition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2383;
			this.match(MariaDBParser.SUBPARTITION);
			this.state = 2384;
			this.uid();
			this.state = 2388;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.DEFAULT || _la === MariaDBParser.INDEX || _la === MariaDBParser.COMMENT || _la === MariaDBParser.DATA || _la === MariaDBParser.ENGINE || ((((_la - 501)) & ~0x1F) === 0 && ((1 << (_la - 501)) & ((1 << (MariaDBParser.MAX_ROWS - 501)) | (1 << (MariaDBParser.MIN_ROWS - 501)) | (1 << (MariaDBParser.NODEGROUP - 501)))) !== 0) || _la === MariaDBParser.STORAGE || _la === MariaDBParser.TABLESPACE) {
				{
				{
				this.state = 2385;
				this.partitionOption();
				}
				}
				this.state = 2390;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionOption(): PartitionOptionContext {
		let _localctx: PartitionOptionContext = new PartitionOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 132, MariaDBParser.RULE_partitionOption);
		let _la: number;
		try {
			this.state = 2439;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.DEFAULT:
			case MariaDBParser.ENGINE:
			case MariaDBParser.STORAGE:
				_localctx = new PartitionOptionEngineContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2392;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.DEFAULT) {
					{
					this.state = 2391;
					this.match(MariaDBParser.DEFAULT);
					}
				}

				this.state = 2395;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.STORAGE) {
					{
					this.state = 2394;
					this.match(MariaDBParser.STORAGE);
					}
				}

				this.state = 2397;
				this.match(MariaDBParser.ENGINE);
				this.state = 2399;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 2398;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2401;
				this.engineName();
				}
				break;
			case MariaDBParser.COMMENT:
				_localctx = new PartitionOptionCommentContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2402;
				this.match(MariaDBParser.COMMENT);
				this.state = 2404;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 2403;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2406;
				(_localctx as PartitionOptionCommentContext)._comment = this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			case MariaDBParser.DATA:
				_localctx = new PartitionOptionDataDirectoryContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2407;
				this.match(MariaDBParser.DATA);
				this.state = 2408;
				this.match(MariaDBParser.DIRECTORY);
				this.state = 2410;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 2409;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2412;
				(_localctx as PartitionOptionDataDirectoryContext)._dataDirectory = this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			case MariaDBParser.INDEX:
				_localctx = new PartitionOptionIndexDirectoryContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2413;
				this.match(MariaDBParser.INDEX);
				this.state = 2414;
				this.match(MariaDBParser.DIRECTORY);
				this.state = 2416;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 2415;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2418;
				(_localctx as PartitionOptionIndexDirectoryContext)._indexDirectory = this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			case MariaDBParser.MAX_ROWS:
				_localctx = new PartitionOptionMaxRowsContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2419;
				this.match(MariaDBParser.MAX_ROWS);
				this.state = 2421;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 2420;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2423;
				(_localctx as PartitionOptionMaxRowsContext)._maxRows = this.decimalLiteral();
				}
				break;
			case MariaDBParser.MIN_ROWS:
				_localctx = new PartitionOptionMinRowsContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2424;
				this.match(MariaDBParser.MIN_ROWS);
				this.state = 2426;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 2425;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2428;
				(_localctx as PartitionOptionMinRowsContext)._minRows = this.decimalLiteral();
				}
				break;
			case MariaDBParser.TABLESPACE:
				_localctx = new PartitionOptionTablespaceContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 2429;
				this.match(MariaDBParser.TABLESPACE);
				this.state = 2431;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 2430;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2433;
				(_localctx as PartitionOptionTablespaceContext)._tablespace = this.uid();
				}
				break;
			case MariaDBParser.NODEGROUP:
				_localctx = new PartitionOptionNodeGroupContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 2434;
				this.match(MariaDBParser.NODEGROUP);
				this.state = 2436;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 2435;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2438;
				(_localctx as PartitionOptionNodeGroupContext)._nodegroup = this.uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterDatabase(): AlterDatabaseContext {
		let _localctx: AlterDatabaseContext = new AlterDatabaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 134, MariaDBParser.RULE_alterDatabase);
		let _la: number;
		try {
			this.state = 2459;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 299, this._ctx) ) {
			case 1:
				_localctx = new AlterSimpleDatabaseContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2441;
				this.match(MariaDBParser.ALTER);
				this.state = 2442;
				(_localctx as AlterSimpleDatabaseContext)._dbFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.DATABASE || _la === MariaDBParser.SCHEMA)) {
					(_localctx as AlterSimpleDatabaseContext)._dbFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2444;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 297, this._ctx) ) {
				case 1:
					{
					this.state = 2443;
					this.uid();
					}
					break;
				}
				this.state = 2447;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2446;
					this.createDatabaseOption();
					}
					}
					this.state = 2449;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 26)) & ~0x1F) === 0 && ((1 << (_la - 26)) & ((1 << (MariaDBParser.CHARACTER - 26)) | (1 << (MariaDBParser.COLLATE - 26)) | (1 << (MariaDBParser.DEFAULT - 26)))) !== 0) || _la === MariaDBParser.READ || _la === MariaDBParser.CHAR || _la === MariaDBParser.ENCRYPTION || _la === MariaDBParser.CHARSET);
				}
				break;

			case 2:
				_localctx = new AlterUpgradeNameContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2451;
				this.match(MariaDBParser.ALTER);
				this.state = 2452;
				(_localctx as AlterUpgradeNameContext)._dbFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.DATABASE || _la === MariaDBParser.SCHEMA)) {
					(_localctx as AlterUpgradeNameContext)._dbFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2453;
				this.uid();
				this.state = 2454;
				this.match(MariaDBParser.UPGRADE);
				this.state = 2455;
				this.match(MariaDBParser.DATA);
				this.state = 2456;
				this.match(MariaDBParser.DIRECTORY);
				this.state = 2457;
				this.match(MariaDBParser.NAME);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterEvent(): AlterEventContext {
		let _localctx: AlterEventContext = new AlterEventContext(this._ctx, this.state);
		this.enterRule(_localctx, 136, MariaDBParser.RULE_alterEvent);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2461;
			this.match(MariaDBParser.ALTER);
			this.state = 2463;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.DEFINER) {
				{
				this.state = 2462;
				this.ownerStatement();
				}
			}

			this.state = 2465;
			this.match(MariaDBParser.EVENT);
			this.state = 2466;
			this.fullId();
			this.state = 2470;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 301, this._ctx) ) {
			case 1:
				{
				this.state = 2467;
				this.match(MariaDBParser.ON);
				this.state = 2468;
				this.match(MariaDBParser.SCHEDULE);
				this.state = 2469;
				this.scheduleExpression();
				}
				break;
			}
			this.state = 2478;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.ON) {
				{
				this.state = 2472;
				this.match(MariaDBParser.ON);
				this.state = 2473;
				this.match(MariaDBParser.COMPLETION);
				this.state = 2475;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.NOT) {
					{
					this.state = 2474;
					this.match(MariaDBParser.NOT);
					}
				}

				this.state = 2477;
				this.match(MariaDBParser.PRESERVE);
				}
			}

			this.state = 2483;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 304, this._ctx) ) {
			case 1:
				{
				this.state = 2480;
				this.match(MariaDBParser.RENAME);
				this.state = 2481;
				this.match(MariaDBParser.TO);
				this.state = 2482;
				this.fullId();
				}
				break;
			}
			this.state = 2486;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.DISABLE || _la === MariaDBParser.ENABLE) {
				{
				this.state = 2485;
				this.enableType();
				}
			}

			this.state = 2490;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.COMMENT) {
				{
				this.state = 2488;
				this.match(MariaDBParser.COMMENT);
				this.state = 2489;
				this.match(MariaDBParser.STRING_LITERAL);
				}
			}

			this.state = 2494;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 307, this._ctx) ) {
			case 1:
				{
				this.state = 2492;
				this.match(MariaDBParser.DO);
				this.state = 2493;
				this.routineBody();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterFunction(): AlterFunctionContext {
		let _localctx: AlterFunctionContext = new AlterFunctionContext(this._ctx, this.state);
		this.enterRule(_localctx, 138, MariaDBParser.RULE_alterFunction);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2496;
			this.match(MariaDBParser.ALTER);
			this.state = 2497;
			this.match(MariaDBParser.FUNCTION);
			this.state = 2498;
			this.fullId();
			this.state = 2502;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.DETERMINISTIC || ((((_la - 112)) & ~0x1F) === 0 && ((1 << (_la - 112)) & ((1 << (MariaDBParser.MODIFIES - 112)) | (1 << (MariaDBParser.NOT - 112)) | (1 << (MariaDBParser.READS - 112)))) !== 0) || _la === MariaDBParser.SQL || _la === MariaDBParser.COMMENT || _la === MariaDBParser.CONTAINS || _la === MariaDBParser.LANGUAGE || _la === MariaDBParser.NO) {
				{
				{
				this.state = 2499;
				this.routineOption();
				}
				}
				this.state = 2504;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterInstance(): AlterInstanceContext {
		let _localctx: AlterInstanceContext = new AlterInstanceContext(this._ctx, this.state);
		this.enterRule(_localctx, 140, MariaDBParser.RULE_alterInstance);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2505;
			this.match(MariaDBParser.ALTER);
			this.state = 2506;
			this.match(MariaDBParser.INSTANCE);
			this.state = 2507;
			this.match(MariaDBParser.ROTATE);
			this.state = 2508;
			this.match(MariaDBParser.INNODB);
			this.state = 2509;
			this.match(MariaDBParser.MASTER);
			this.state = 2510;
			this.match(MariaDBParser.KEY);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterLogfileGroup(): AlterLogfileGroupContext {
		let _localctx: AlterLogfileGroupContext = new AlterLogfileGroupContext(this._ctx, this.state);
		this.enterRule(_localctx, 142, MariaDBParser.RULE_alterLogfileGroup);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2512;
			this.match(MariaDBParser.ALTER);
			this.state = 2513;
			this.match(MariaDBParser.LOGFILE);
			this.state = 2514;
			this.match(MariaDBParser.GROUP);
			this.state = 2515;
			this.uid();
			this.state = 2516;
			this.match(MariaDBParser.ADD);
			this.state = 2517;
			this.match(MariaDBParser.UNDOFILE);
			this.state = 2518;
			this.match(MariaDBParser.STRING_LITERAL);
			this.state = 2524;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.INITIAL_SIZE) {
				{
				this.state = 2519;
				this.match(MariaDBParser.INITIAL_SIZE);
				this.state = 2521;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 2520;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2523;
				this.fileSizeLiteral();
				}
			}

			this.state = 2527;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.WAIT) {
				{
				this.state = 2526;
				this.match(MariaDBParser.WAIT);
				}
			}

			this.state = 2529;
			this.match(MariaDBParser.ENGINE);
			this.state = 2531;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.EQUAL_SYMBOL) {
				{
				this.state = 2530;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				}
			}

			this.state = 2533;
			this.engineName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterProcedure(): AlterProcedureContext {
		let _localctx: AlterProcedureContext = new AlterProcedureContext(this._ctx, this.state);
		this.enterRule(_localctx, 144, MariaDBParser.RULE_alterProcedure);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2535;
			this.match(MariaDBParser.ALTER);
			this.state = 2536;
			this.match(MariaDBParser.PROCEDURE);
			this.state = 2537;
			this.fullId();
			this.state = 2541;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.DETERMINISTIC || ((((_la - 112)) & ~0x1F) === 0 && ((1 << (_la - 112)) & ((1 << (MariaDBParser.MODIFIES - 112)) | (1 << (MariaDBParser.NOT - 112)) | (1 << (MariaDBParser.READS - 112)))) !== 0) || _la === MariaDBParser.SQL || _la === MariaDBParser.COMMENT || _la === MariaDBParser.CONTAINS || _la === MariaDBParser.LANGUAGE || _la === MariaDBParser.NO) {
				{
				{
				this.state = 2538;
				this.routineOption();
				}
				}
				this.state = 2543;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterServer(): AlterServerContext {
		let _localctx: AlterServerContext = new AlterServerContext(this._ctx, this.state);
		this.enterRule(_localctx, 146, MariaDBParser.RULE_alterServer);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2544;
			this.match(MariaDBParser.ALTER);
			this.state = 2545;
			this.match(MariaDBParser.SERVER);
			this.state = 2546;
			this.uid();
			this.state = 2547;
			this.match(MariaDBParser.OPTIONS);
			this.state = 2548;
			this.match(MariaDBParser.LR_BRACKET);
			this.state = 2549;
			this.serverOption();
			this.state = 2554;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.COMMA) {
				{
				{
				this.state = 2550;
				this.match(MariaDBParser.COMMA);
				this.state = 2551;
				this.serverOption();
				}
				}
				this.state = 2556;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2557;
			this.match(MariaDBParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterTable(): AlterTableContext {
		let _localctx: AlterTableContext = new AlterTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 148, MariaDBParser.RULE_alterTable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2559;
			this.match(MariaDBParser.ALTER);
			this.state = 2561;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.OFFLINE || _la === MariaDBParser.ONLINE) {
				{
				this.state = 2560;
				_localctx._intimeAction = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.OFFLINE || _la === MariaDBParser.ONLINE)) {
					_localctx._intimeAction = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2564;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.IGNORE) {
				{
				this.state = 2563;
				this.match(MariaDBParser.IGNORE);
				}
			}

			this.state = 2566;
			this.match(MariaDBParser.TABLE);
			this.state = 2567;
			this.tableName();
			this.state = 2569;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.NOWAIT || _la === MariaDBParser.WAIT) {
				{
				this.state = 2568;
				this.waitNowaitClause();
				}
			}

			this.state = 2579;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 319, this._ctx) ) {
			case 1:
				{
				this.state = 2571;
				this.alterSpecification();
				this.state = 2576;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 2572;
					this.match(MariaDBParser.COMMA);
					this.state = 2573;
					this.alterSpecification();
					}
					}
					this.state = 2578;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			this.state = 2582;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.PARTITION) {
				{
				this.state = 2581;
				this.partitionDefinitions();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterTablespace(): AlterTablespaceContext {
		let _localctx: AlterTablespaceContext = new AlterTablespaceContext(this._ctx, this.state);
		this.enterRule(_localctx, 150, MariaDBParser.RULE_alterTablespace);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2584;
			this.match(MariaDBParser.ALTER);
			this.state = 2585;
			this.match(MariaDBParser.TABLESPACE);
			this.state = 2586;
			this.uid();
			this.state = 2587;
			_localctx._objectAction = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MariaDBParser.ADD || _la === MariaDBParser.DROP)) {
				_localctx._objectAction = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2588;
			this.match(MariaDBParser.DATAFILE);
			this.state = 2589;
			this.match(MariaDBParser.STRING_LITERAL);
			this.state = 2593;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.INITIAL_SIZE) {
				{
				this.state = 2590;
				this.match(MariaDBParser.INITIAL_SIZE);
				this.state = 2591;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				this.state = 2592;
				this.fileSizeLiteral();
				}
			}

			this.state = 2596;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.WAIT) {
				{
				this.state = 2595;
				this.match(MariaDBParser.WAIT);
				}
			}

			this.state = 2598;
			this.match(MariaDBParser.ENGINE);
			this.state = 2600;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.EQUAL_SYMBOL) {
				{
				this.state = 2599;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				}
			}

			this.state = 2602;
			this.engineName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterView(): AlterViewContext {
		let _localctx: AlterViewContext = new AlterViewContext(this._ctx, this.state);
		this.enterRule(_localctx, 152, MariaDBParser.RULE_alterView);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2604;
			this.match(MariaDBParser.ALTER);
			this.state = 2608;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.ALGORITHM) {
				{
				this.state = 2605;
				this.match(MariaDBParser.ALGORITHM);
				this.state = 2606;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				this.state = 2607;
				_localctx._algType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.MERGE || _la === MariaDBParser.TEMPTABLE || _la === MariaDBParser.UNDEFINED)) {
					_localctx._algType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2611;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.DEFINER) {
				{
				this.state = 2610;
				this.ownerStatement();
				}
			}

			this.state = 2616;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.SQL) {
				{
				this.state = 2613;
				this.match(MariaDBParser.SQL);
				this.state = 2614;
				this.match(MariaDBParser.SECURITY);
				this.state = 2615;
				_localctx._secContext = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.DEFINER || _la === MariaDBParser.INVOKER)) {
					_localctx._secContext = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2618;
			this.match(MariaDBParser.VIEW);
			this.state = 2619;
			this.fullId();
			this.state = 2624;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.LR_BRACKET) {
				{
				this.state = 2620;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 2621;
				this.uidList();
				this.state = 2622;
				this.match(MariaDBParser.RR_BRACKET);
				}
			}

			this.state = 2626;
			this.match(MariaDBParser.AS);
			this.state = 2627;
			this.selectStatement();
			this.state = 2634;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.WITH) {
				{
				this.state = 2628;
				this.match(MariaDBParser.WITH);
				this.state = 2630;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.CASCADED || _la === MariaDBParser.LOCAL) {
					{
					this.state = 2629;
					_localctx._checkOpt = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MariaDBParser.CASCADED || _la === MariaDBParser.LOCAL)) {
						_localctx._checkOpt = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 2632;
				this.match(MariaDBParser.CHECK);
				this.state = 2633;
				this.match(MariaDBParser.OPTION);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterSequence(): AlterSequenceContext {
		let _localctx: AlterSequenceContext = new AlterSequenceContext(this._ctx, this.state);
		this.enterRule(_localctx, 154, MariaDBParser.RULE_alterSequence);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2636;
			this.match(MariaDBParser.ALTER);
			this.state = 2637;
			this.match(MariaDBParser.SEQUENCE);
			this.state = 2639;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 330, this._ctx) ) {
			case 1:
				{
				this.state = 2638;
				this.ifExists();
				}
				break;
			}
			this.state = 2641;
			this.fullId();
			this.state = 2643;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2642;
					this.sequenceSpec();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2645;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 331, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterSpecification(): AlterSpecificationContext {
		let _localctx: AlterSpecificationContext = new AlterSpecificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 156, MariaDBParser.RULE_alterSpecification);
		let _la: number;
		try {
			let _alt: number;
			this.state = 2967;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 389, this._ctx) ) {
			case 1:
				_localctx = new AlterByTableOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2647;
				this.tableOption();
				this.state = 2654;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 333, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2649;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === MariaDBParser.COMMA) {
							{
							this.state = 2648;
							this.match(MariaDBParser.COMMA);
							}
						}

						this.state = 2651;
						this.tableOption();
						}
						}
					}
					this.state = 2656;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 333, this._ctx);
				}
				}
				break;

			case 2:
				_localctx = new AlterByAddColumnContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2657;
				this.match(MariaDBParser.ADD);
				this.state = 2659;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.COLUMN) {
					{
					this.state = 2658;
					this.match(MariaDBParser.COLUMN);
					}
				}

				this.state = 2662;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 335, this._ctx) ) {
				case 1:
					{
					this.state = 2661;
					this.ifNotExists();
					}
					break;
				}
				this.state = 2664;
				this.uid();
				this.state = 2665;
				this.columnDefinition();
				this.state = 2669;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.FIRST:
					{
					this.state = 2666;
					this.match(MariaDBParser.FIRST);
					}
					break;
				case MariaDBParser.AFTER:
					{
					this.state = 2667;
					this.match(MariaDBParser.AFTER);
					this.state = 2668;
					this.uid();
					}
					break;
				case MariaDBParser.EOF:
				case MariaDBParser.ALTER:
				case MariaDBParser.ANALYZE:
				case MariaDBParser.CALL:
				case MariaDBParser.CHANGE:
				case MariaDBParser.CHECK:
				case MariaDBParser.CREATE:
				case MariaDBParser.DELETE:
				case MariaDBParser.DESC:
				case MariaDBParser.DESCRIBE:
				case MariaDBParser.DROP:
				case MariaDBParser.EXPLAIN:
				case MariaDBParser.GET:
				case MariaDBParser.GRANT:
				case MariaDBParser.INSERT:
				case MariaDBParser.KILL:
				case MariaDBParser.LOAD:
				case MariaDBParser.LOCK:
				case MariaDBParser.OPTIMIZE:
				case MariaDBParser.PARTITION:
				case MariaDBParser.PURGE:
				case MariaDBParser.RELEASE:
				case MariaDBParser.RENAME:
				case MariaDBParser.REPLACE:
				case MariaDBParser.RESIGNAL:
				case MariaDBParser.REVOKE:
				case MariaDBParser.SELECT:
				case MariaDBParser.SET:
				case MariaDBParser.SHOW:
				case MariaDBParser.SIGNAL:
				case MariaDBParser.UNLOCK:
				case MariaDBParser.UPDATE:
				case MariaDBParser.USE:
				case MariaDBParser.VALUES:
				case MariaDBParser.BEGIN:
				case MariaDBParser.BINLOG:
				case MariaDBParser.CACHE:
				case MariaDBParser.CHECKSUM:
				case MariaDBParser.COMMIT:
				case MariaDBParser.DEALLOCATE:
				case MariaDBParser.DO:
				case MariaDBParser.FLUSH:
				case MariaDBParser.HANDLER:
				case MariaDBParser.HELP:
				case MariaDBParser.INSTALL:
				case MariaDBParser.PREPARE:
				case MariaDBParser.REPAIR:
				case MariaDBParser.RESET:
				case MariaDBParser.ROLLBACK:
				case MariaDBParser.SAVEPOINT:
				case MariaDBParser.START:
				case MariaDBParser.STOP:
				case MariaDBParser.TRUNCATE:
				case MariaDBParser.UNINSTALL:
				case MariaDBParser.XA:
				case MariaDBParser.EXECUTE:
				case MariaDBParser.SHUTDOWN:
				case MariaDBParser.MINUS:
				case MariaDBParser.LR_BRACKET:
				case MariaDBParser.COMMA:
				case MariaDBParser.SEMI:
					break;
				default:
					break;
				}
				}
				break;

			case 3:
				_localctx = new AlterByAddColumnsContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2671;
				this.match(MariaDBParser.ADD);
				this.state = 2673;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.COLUMN) {
					{
					this.state = 2672;
					this.match(MariaDBParser.COLUMN);
					}
				}

				this.state = 2676;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.IF) {
					{
					this.state = 2675;
					this.ifNotExists();
					}
				}

				this.state = 2678;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 2679;
				this.uid();
				this.state = 2680;
				this.columnDefinition();
				this.state = 2687;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 2681;
					this.match(MariaDBParser.COMMA);
					this.state = 2682;
					this.uid();
					this.state = 2683;
					this.columnDefinition();
					}
					}
					this.state = 2689;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2690;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;

			case 4:
				_localctx = new AlterByAddIndexContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2692;
				this.match(MariaDBParser.ADD);
				this.state = 2693;
				(_localctx as AlterByAddIndexContext)._indexFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.INDEX || _la === MariaDBParser.KEY)) {
					(_localctx as AlterByAddIndexContext)._indexFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2695;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 340, this._ctx) ) {
				case 1:
					{
					this.state = 2694;
					this.ifNotExists();
					}
					break;
				}
				this.state = 2698;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MariaDBParser.ATTRIBUTE) | (1 << MariaDBParser.BODY) | (1 << MariaDBParser.BUCKETS) | (1 << MariaDBParser.CONDITION))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (MariaDBParser.CURRENT - 36)) | (1 << (MariaDBParser.CURRENT_ROLE - 36)) | (1 << (MariaDBParser.CURRENT_USER - 36)) | (1 << (MariaDBParser.DATABASE - 36)) | (1 << (MariaDBParser.DEFAULT - 36)) | (1 << (MariaDBParser.DIAGNOSTICS - 36)) | (1 << (MariaDBParser.EMPTY - 36)) | (1 << (MariaDBParser.EXCEPT - 36)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (MariaDBParser.GROUP - 73)) | (1 << (MariaDBParser.IF - 73)) | (1 << (MariaDBParser.IGNORED - 73)) | (1 << (MariaDBParser.INSERT - 73)) | (1 << (MariaDBParser.LATERAL - 73)) | (1 << (MariaDBParser.LEFT - 73)) | (1 << (MariaDBParser.LOCKED - 73)))) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & ((1 << (MariaDBParser.MAXVALUE - 110)) | (1 << (MariaDBParser.MINVALUE - 110)) | (1 << (MariaDBParser.NUMBER - 110)) | (1 << (MariaDBParser.OPTIONAL - 110)) | (1 << (MariaDBParser.ORDER - 110)) | (1 << (MariaDBParser.PRIMARY - 110)) | (1 << (MariaDBParser.PACKAGE - 110)))) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (MariaDBParser.REPLACE - 142)) | (1 << (MariaDBParser.RIGHT - 142)) | (1 << (MariaDBParser.SCHEMA - 142)) | (1 << (MariaDBParser.SKIP_ - 142)) | (1 << (MariaDBParser.STACKED - 142)) | (1 << (MariaDBParser.STATEMENT - 142)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MariaDBParser.DATE - 217)) | (1 << (MariaDBParser.TIME - 217)) | (1 << (MariaDBParser.TIMESTAMP - 217)) | (1 << (MariaDBParser.DATETIME - 217)) | (1 << (MariaDBParser.YEAR - 217)) | (1 << (MariaDBParser.BINARY - 217)) | (1 << (MariaDBParser.TEXT - 217)) | (1 << (MariaDBParser.ENUM - 217)) | (1 << (MariaDBParser.SERIAL - 217)))) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & ((1 << (MariaDBParser.JSON_ARRAY - 251)) | (1 << (MariaDBParser.JSON_ARRAYAGG - 251)) | (1 << (MariaDBParser.JSON_ARRAY_APPEND - 251)) | (1 << (MariaDBParser.JSON_ARRAY_INSERT - 251)) | (1 << (MariaDBParser.JSON_CONTAINS - 251)) | (1 << (MariaDBParser.JSON_CONTAINS_PATH - 251)) | (1 << (MariaDBParser.JSON_DEPTH - 251)) | (1 << (MariaDBParser.JSON_EXTRACT - 251)) | (1 << (MariaDBParser.JSON_INSERT - 251)) | (1 << (MariaDBParser.JSON_KEYS - 251)) | (1 << (MariaDBParser.JSON_LENGTH - 251)) | (1 << (MariaDBParser.JSON_MERGE - 251)) | (1 << (MariaDBParser.JSON_MERGE_PATCH - 251)) | (1 << (MariaDBParser.JSON_MERGE_PRESERVE - 251)) | (1 << (MariaDBParser.JSON_OBJECT - 251)) | (1 << (MariaDBParser.JSON_OBJECTAGG - 251)) | (1 << (MariaDBParser.JSON_OVERLAPS - 251)) | (1 << (MariaDBParser.JSON_PRETTY - 251)) | (1 << (MariaDBParser.JSON_QUOTE - 251)) | (1 << (MariaDBParser.JSON_REMOVE - 251)) | (1 << (MariaDBParser.JSON_REPLACE - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALID - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT - 251)) | (1 << (MariaDBParser.JSON_SEARCH - 251)) | (1 << (MariaDBParser.JSON_SET - 251)) | (1 << (MariaDBParser.JSON_STORAGE_FREE - 251)) | (1 << (MariaDBParser.JSON_STORAGE_SIZE - 251)) | (1 << (MariaDBParser.JSON_TABLE - 251)) | (1 << (MariaDBParser.JSON_TYPE - 251)) | (1 << (MariaDBParser.JSON_UNQUOTE - 251)) | (1 << (MariaDBParser.JSON_VALID - 251)) | (1 << (MariaDBParser.JSON_VALUE - 251)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (MariaDBParser.NESTED - 283)) | (1 << (MariaDBParser.ORDINALITY - 283)) | (1 << (MariaDBParser.PATH - 283)) | (1 << (MariaDBParser.AVG - 283)) | (1 << (MariaDBParser.BIT_AND - 283)) | (1 << (MariaDBParser.BIT_OR - 283)) | (1 << (MariaDBParser.BIT_XOR - 283)) | (1 << (MariaDBParser.COUNT - 283)) | (1 << (MariaDBParser.CUME_DIST - 283)) | (1 << (MariaDBParser.DENSE_RANK - 283)) | (1 << (MariaDBParser.FIRST_VALUE - 283)) | (1 << (MariaDBParser.GROUP_CONCAT - 283)) | (1 << (MariaDBParser.LAG - 283)) | (1 << (MariaDBParser.LAST_VALUE - 283)) | (1 << (MariaDBParser.LEAD - 283)) | (1 << (MariaDBParser.MAX - 283)) | (1 << (MariaDBParser.MIN - 283)) | (1 << (MariaDBParser.NTILE - 283)) | (1 << (MariaDBParser.NTH_VALUE - 283)) | (1 << (MariaDBParser.PERCENT_RANK - 283)) | (1 << (MariaDBParser.RANK - 283)) | (1 << (MariaDBParser.ROW_NUMBER - 283)) | (1 << (MariaDBParser.STD - 283)) | (1 << (MariaDBParser.STDDEV - 283)) | (1 << (MariaDBParser.STDDEV_POP - 283)) | (1 << (MariaDBParser.STDDEV_SAMP - 283)) | (1 << (MariaDBParser.SUM - 283)) | (1 << (MariaDBParser.VAR_POP - 283)) | (1 << (MariaDBParser.VAR_SAMP - 283)) | (1 << (MariaDBParser.VARIANCE - 283)) | (1 << (MariaDBParser.CURRENT_DATE - 283)) | (1 << (MariaDBParser.CURRENT_TIME - 283)))) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & ((1 << (MariaDBParser.CURRENT_TIMESTAMP - 315)) | (1 << (MariaDBParser.LOCALTIME - 315)) | (1 << (MariaDBParser.CURDATE - 315)) | (1 << (MariaDBParser.CURTIME - 315)) | (1 << (MariaDBParser.DATE_ADD - 315)) | (1 << (MariaDBParser.DATE_SUB - 315)) | (1 << (MariaDBParser.LOCALTIMESTAMP - 315)) | (1 << (MariaDBParser.NOW - 315)) | (1 << (MariaDBParser.POSITION - 315)) | (1 << (MariaDBParser.SUBSTR - 315)) | (1 << (MariaDBParser.SUBSTRING - 315)) | (1 << (MariaDBParser.SYSDATE - 315)) | (1 << (MariaDBParser.TRIM - 315)) | (1 << (MariaDBParser.UTC_DATE - 315)) | (1 << (MariaDBParser.UTC_TIME - 315)) | (1 << (MariaDBParser.UTC_TIMESTAMP - 315)) | (1 << (MariaDBParser.ACCOUNT - 315)) | (1 << (MariaDBParser.ACTION - 315)) | (1 << (MariaDBParser.AFTER - 315)) | (1 << (MariaDBParser.AGGREGATE - 315)) | (1 << (MariaDBParser.ALGORITHM - 315)) | (1 << (MariaDBParser.ANY - 315)) | (1 << (MariaDBParser.AT - 315)) | (1 << (MariaDBParser.AUTHORS - 315)) | (1 << (MariaDBParser.AUTOCOMMIT - 315)) | (1 << (MariaDBParser.AUTOEXTEND_SIZE - 315)) | (1 << (MariaDBParser.AUTO_INCREMENT - 315)) | (1 << (MariaDBParser.AVG_ROW_LENGTH - 315)) | (1 << (MariaDBParser.BEGIN - 315)) | (1 << (MariaDBParser.BINLOG - 315)) | (1 << (MariaDBParser.BIT - 315)))) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & ((1 << (MariaDBParser.BLOCK - 347)) | (1 << (MariaDBParser.BOOL - 347)) | (1 << (MariaDBParser.BOOLEAN - 347)) | (1 << (MariaDBParser.BTREE - 347)) | (1 << (MariaDBParser.CACHE - 347)) | (1 << (MariaDBParser.CASCADED - 347)) | (1 << (MariaDBParser.CHAIN - 347)) | (1 << (MariaDBParser.CHANGED - 347)) | (1 << (MariaDBParser.CHANNEL - 347)) | (1 << (MariaDBParser.CHECKSUM - 347)) | (1 << (MariaDBParser.PAGE_CHECKSUM - 347)) | (1 << (MariaDBParser.CIPHER - 347)) | (1 << (MariaDBParser.CLASS_ORIGIN - 347)) | (1 << (MariaDBParser.CLIENT - 347)) | (1 << (MariaDBParser.CLOSE - 347)) | (1 << (MariaDBParser.CLUSTERING - 347)) | (1 << (MariaDBParser.COALESCE - 347)) | (1 << (MariaDBParser.CODE - 347)) | (1 << (MariaDBParser.COLUMNS - 347)) | (1 << (MariaDBParser.COLUMN_FORMAT - 347)) | (1 << (MariaDBParser.COLUMN_NAME - 347)) | (1 << (MariaDBParser.COMMENT - 347)) | (1 << (MariaDBParser.COMMIT - 347)) | (1 << (MariaDBParser.COMPACT - 347)) | (1 << (MariaDBParser.COMPLETION - 347)) | (1 << (MariaDBParser.COMPRESSED - 347)) | (1 << (MariaDBParser.COMPRESSION - 347)) | (1 << (MariaDBParser.CONCURRENT - 347)) | (1 << (MariaDBParser.CONNECT - 347)) | (1 << (MariaDBParser.CONNECTION - 347)) | (1 << (MariaDBParser.CONSISTENT - 347)) | (1 << (MariaDBParser.CONSTRAINT_CATALOG - 347)))) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & ((1 << (MariaDBParser.CONSTRAINT_SCHEMA - 379)) | (1 << (MariaDBParser.CONSTRAINT_NAME - 379)) | (1 << (MariaDBParser.CONTAINS - 379)) | (1 << (MariaDBParser.CONTEXT - 379)) | (1 << (MariaDBParser.CONTRIBUTORS - 379)) | (1 << (MariaDBParser.COPY - 379)) | (1 << (MariaDBParser.CPU - 379)) | (1 << (MariaDBParser.CYCLE - 379)) | (1 << (MariaDBParser.CURSOR_NAME - 379)) | (1 << (MariaDBParser.DATA - 379)) | (1 << (MariaDBParser.DATAFILE - 379)) | (1 << (MariaDBParser.DEALLOCATE - 379)) | (1 << (MariaDBParser.DEFAULT_AUTH - 379)) | (1 << (MariaDBParser.DEFINER - 379)) | (1 << (MariaDBParser.DELAY_KEY_WRITE - 379)) | (1 << (MariaDBParser.DES_KEY_FILE - 379)) | (1 << (MariaDBParser.DIRECTORY - 379)) | (1 << (MariaDBParser.DISABLE - 379)) | (1 << (MariaDBParser.DISCARD - 379)) | (1 << (MariaDBParser.DISK - 379)) | (1 << (MariaDBParser.DO - 379)) | (1 << (MariaDBParser.DUMPFILE - 379)) | (1 << (MariaDBParser.DUPLICATE - 379)) | (1 << (MariaDBParser.DYNAMIC - 379)) | (1 << (MariaDBParser.ENABLE - 379)) | (1 << (MariaDBParser.ENCRYPTED - 379)) | (1 << (MariaDBParser.ENCRYPTION - 379)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ID - 379)) | (1 << (MariaDBParser.END - 379)) | (1 << (MariaDBParser.ENDS - 379)) | (1 << (MariaDBParser.ENGINE - 379)) | (1 << (MariaDBParser.ENGINES - 379)))) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & ((1 << (MariaDBParser.ERROR - 411)) | (1 << (MariaDBParser.ERRORS - 411)) | (1 << (MariaDBParser.ESCAPE - 411)) | (1 << (MariaDBParser.EVEN - 411)) | (1 << (MariaDBParser.EVENT - 411)) | (1 << (MariaDBParser.EVENTS - 411)) | (1 << (MariaDBParser.EVERY - 411)) | (1 << (MariaDBParser.EXCHANGE - 411)) | (1 << (MariaDBParser.EXCLUSIVE - 411)) | (1 << (MariaDBParser.EXPIRE - 411)) | (1 << (MariaDBParser.EXPORT - 411)) | (1 << (MariaDBParser.EXTENDED - 411)) | (1 << (MariaDBParser.EXTENT_SIZE - 411)) | (1 << (MariaDBParser.FAILED_LOGIN_ATTEMPTS - 411)) | (1 << (MariaDBParser.FAST - 411)) | (1 << (MariaDBParser.FAULTS - 411)) | (1 << (MariaDBParser.FIELDS - 411)) | (1 << (MariaDBParser.FILE_BLOCK_SIZE - 411)) | (1 << (MariaDBParser.FILTER - 411)) | (1 << (MariaDBParser.FIRST - 411)) | (1 << (MariaDBParser.FIXED - 411)) | (1 << (MariaDBParser.FLUSH - 411)) | (1 << (MariaDBParser.FOLLOWS - 411)) | (1 << (MariaDBParser.FOUND - 411)) | (1 << (MariaDBParser.FULL - 411)) | (1 << (MariaDBParser.FUNCTION - 411)) | (1 << (MariaDBParser.GENERAL - 411)) | (1 << (MariaDBParser.GLOBAL - 411)) | (1 << (MariaDBParser.GRANTS - 411)) | (1 << (MariaDBParser.GROUP_REPLICATION - 411)) | (1 << (MariaDBParser.HANDLER - 411)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (MariaDBParser.HASH - 443)) | (1 << (MariaDBParser.HELP - 443)) | (1 << (MariaDBParser.HISTORY - 443)) | (1 << (MariaDBParser.HOST - 443)) | (1 << (MariaDBParser.HOSTS - 443)) | (1 << (MariaDBParser.IDENTIFIED - 443)) | (1 << (MariaDBParser.IGNORE_SERVER_IDS - 443)) | (1 << (MariaDBParser.IMPORT - 443)) | (1 << (MariaDBParser.INCREMENT - 443)) | (1 << (MariaDBParser.INDEXES - 443)) | (1 << (MariaDBParser.INITIAL_SIZE - 443)) | (1 << (MariaDBParser.INPLACE - 443)) | (1 << (MariaDBParser.INSERT_METHOD - 443)) | (1 << (MariaDBParser.INSTALL - 443)) | (1 << (MariaDBParser.INSTANCE - 443)) | (1 << (MariaDBParser.INSTANT - 443)) | (1 << (MariaDBParser.INVISIBLE - 443)) | (1 << (MariaDBParser.INVOKER - 443)) | (1 << (MariaDBParser.IO - 443)) | (1 << (MariaDBParser.IO_THREAD - 443)) | (1 << (MariaDBParser.IPC - 443)) | (1 << (MariaDBParser.ISOLATION - 443)) | (1 << (MariaDBParser.ISSUER - 443)) | (1 << (MariaDBParser.JSON - 443)) | (1 << (MariaDBParser.KEY_BLOCK_SIZE - 443)) | (1 << (MariaDBParser.LANGUAGE - 443)) | (1 << (MariaDBParser.LAST - 443)) | (1 << (MariaDBParser.LEAVES - 443)) | (1 << (MariaDBParser.LESS - 443)) | (1 << (MariaDBParser.LEVEL - 443)) | (1 << (MariaDBParser.LIST - 443)) | (1 << (MariaDBParser.LOCAL - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (MariaDBParser.LOCALES - 475)) | (1 << (MariaDBParser.LOGFILE - 475)) | (1 << (MariaDBParser.LOGS - 475)) | (1 << (MariaDBParser.MASTER - 475)) | (1 << (MariaDBParser.MASTER_AUTO_POSITION - 475)) | (1 << (MariaDBParser.MASTER_CONNECT_RETRY - 475)) | (1 << (MariaDBParser.MASTER_DELAY - 475)) | (1 << (MariaDBParser.MASTER_HEARTBEAT_PERIOD - 475)) | (1 << (MariaDBParser.MASTER_HOST - 475)) | (1 << (MariaDBParser.MASTER_LOG_FILE - 475)) | (1 << (MariaDBParser.MASTER_LOG_POS - 475)) | (1 << (MariaDBParser.MASTER_PASSWORD - 475)) | (1 << (MariaDBParser.MASTER_PORT - 475)) | (1 << (MariaDBParser.MASTER_RETRY_COUNT - 475)) | (1 << (MariaDBParser.MASTER_SSL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CA - 475)) | (1 << (MariaDBParser.MASTER_SSL_CAPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_CERT - 475)) | (1 << (MariaDBParser.MASTER_SSL_CIPHER - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRLPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_KEY - 475)) | (1 << (MariaDBParser.MASTER_TLS_VERSION - 475)) | (1 << (MariaDBParser.MASTER_USER - 475)) | (1 << (MariaDBParser.MAX_CONNECTIONS_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_QUERIES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_ROWS - 475)) | (1 << (MariaDBParser.MAX_SIZE - 475)) | (1 << (MariaDBParser.MAX_UPDATES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_USER_CONNECTIONS - 475)) | (1 << (MariaDBParser.MEDIUM - 475)) | (1 << (MariaDBParser.MEMBER - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (MariaDBParser.MERGE - 507)) | (1 << (MariaDBParser.MESSAGE_TEXT - 507)) | (1 << (MariaDBParser.MID - 507)) | (1 << (MariaDBParser.MIGRATE - 507)) | (1 << (MariaDBParser.MIN_ROWS - 507)) | (1 << (MariaDBParser.MODE - 507)) | (1 << (MariaDBParser.MODIFY - 507)) | (1 << (MariaDBParser.MUTEX - 507)) | (1 << (MariaDBParser.MYSQL - 507)) | (1 << (MariaDBParser.MYSQL_ERRNO - 507)) | (1 << (MariaDBParser.NAME - 507)) | (1 << (MariaDBParser.NAMES - 507)) | (1 << (MariaDBParser.NCHAR - 507)) | (1 << (MariaDBParser.NEVER - 507)) | (1 << (MariaDBParser.NEXT - 507)) | (1 << (MariaDBParser.NO - 507)) | (1 << (MariaDBParser.NOCACHE - 507)) | (1 << (MariaDBParser.NOCOPY - 507)) | (1 << (MariaDBParser.NOCYCLE - 507)) | (1 << (MariaDBParser.NOMAXVALUE - 507)) | (1 << (MariaDBParser.NOMINVALUE - 507)) | (1 << (MariaDBParser.NOWAIT - 507)) | (1 << (MariaDBParser.NODEGROUP - 507)) | (1 << (MariaDBParser.NONE - 507)) | (1 << (MariaDBParser.ODBC - 507)) | (1 << (MariaDBParser.OFFLINE - 507)) | (1 << (MariaDBParser.OFFSET - 507)) | (1 << (MariaDBParser.OF - 507)) | (1 << (MariaDBParser.OJ - 507)) | (1 << (MariaDBParser.OLD_PASSWORD - 507)) | (1 << (MariaDBParser.ONE - 507)) | (1 << (MariaDBParser.ONLINE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (MariaDBParser.ONLY - 539)) | (1 << (MariaDBParser.OPEN - 539)) | (1 << (MariaDBParser.OPTIMIZER_COSTS - 539)) | (1 << (MariaDBParser.OPTIONS - 539)) | (1 << (MariaDBParser.OWNER - 539)) | (1 << (MariaDBParser.PACK_KEYS - 539)) | (1 << (MariaDBParser.PAGE - 539)) | (1 << (MariaDBParser.PARSER - 539)) | (1 << (MariaDBParser.PARTIAL - 539)) | (1 << (MariaDBParser.PARTITIONING - 539)) | (1 << (MariaDBParser.PARTITIONS - 539)) | (1 << (MariaDBParser.PASSWORD - 539)) | (1 << (MariaDBParser.PASSWORD_LOCK_TIME - 539)) | (1 << (MariaDBParser.PHASE - 539)) | (1 << (MariaDBParser.PLUGIN - 539)) | (1 << (MariaDBParser.PLUGIN_DIR - 539)) | (1 << (MariaDBParser.PLUGINS - 539)) | (1 << (MariaDBParser.PORT - 539)) | (1 << (MariaDBParser.PRECEDES - 539)) | (1 << (MariaDBParser.PREPARE - 539)) | (1 << (MariaDBParser.PRESERVE - 539)) | (1 << (MariaDBParser.PREV - 539)) | (1 << (MariaDBParser.PROCESSLIST - 539)) | (1 << (MariaDBParser.PROFILE - 539)) | (1 << (MariaDBParser.PROFILES - 539)) | (1 << (MariaDBParser.PROXY - 539)) | (1 << (MariaDBParser.QUERY - 539)) | (1 << (MariaDBParser.QUERY_RESPONSE_TIME - 539)) | (1 << (MariaDBParser.QUICK - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (MariaDBParser.REBUILD - 571)) | (1 << (MariaDBParser.RECOVER - 571)) | (1 << (MariaDBParser.RECURSIVE - 571)) | (1 << (MariaDBParser.REDO_BUFFER_SIZE - 571)) | (1 << (MariaDBParser.REDUNDANT - 571)) | (1 << (MariaDBParser.RELAY - 571)) | (1 << (MariaDBParser.RELAY_LOG_FILE - 571)) | (1 << (MariaDBParser.RELAY_LOG_POS - 571)) | (1 << (MariaDBParser.RELAYLOG - 571)) | (1 << (MariaDBParser.REMOVE - 571)) | (1 << (MariaDBParser.REORGANIZE - 571)) | (1 << (MariaDBParser.REPAIR - 571)) | (1 << (MariaDBParser.REPLICATE_DO_DB - 571)) | (1 << (MariaDBParser.REPLICATE_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_REWRITE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATION - 571)) | (1 << (MariaDBParser.RESET - 571)) | (1 << (MariaDBParser.RESTART - 571)) | (1 << (MariaDBParser.RESUME - 571)) | (1 << (MariaDBParser.RETURNED_SQLSTATE - 571)) | (1 << (MariaDBParser.RETURNS - 571)) | (1 << (MariaDBParser.REUSE - 571)) | (1 << (MariaDBParser.ROLE - 571)) | (1 << (MariaDBParser.ROLLBACK - 571)) | (1 << (MariaDBParser.ROLLUP - 571)) | (1 << (MariaDBParser.ROTATE - 571)) | (1 << (MariaDBParser.ROW - 571)))) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & ((1 << (MariaDBParser.ROWS - 603)) | (1 << (MariaDBParser.ROW_FORMAT - 603)) | (1 << (MariaDBParser.RTREE - 603)) | (1 << (MariaDBParser.SAVEPOINT - 603)) | (1 << (MariaDBParser.SCHEDULE - 603)) | (1 << (MariaDBParser.SECURITY - 603)) | (1 << (MariaDBParser.SEQUENCE - 603)) | (1 << (MariaDBParser.SERVER - 603)) | (1 << (MariaDBParser.SESSION - 603)) | (1 << (MariaDBParser.SHARE - 603)) | (1 << (MariaDBParser.SHARED - 603)) | (1 << (MariaDBParser.SIGNED - 603)) | (1 << (MariaDBParser.SIMPLE - 603)) | (1 << (MariaDBParser.SLAVE - 603)) | (1 << (MariaDBParser.SLAVES - 603)) | (1 << (MariaDBParser.SLOW - 603)) | (1 << (MariaDBParser.SNAPSHOT - 603)) | (1 << (MariaDBParser.SOCKET - 603)) | (1 << (MariaDBParser.SOME - 603)) | (1 << (MariaDBParser.SONAME - 603)) | (1 << (MariaDBParser.SOUNDS - 603)) | (1 << (MariaDBParser.SOURCE - 603)) | (1 << (MariaDBParser.SQL_AFTER_GTIDS - 603)) | (1 << (MariaDBParser.SQL_AFTER_MTS_GAPS - 603)) | (1 << (MariaDBParser.SQL_BEFORE_GTIDS - 603)) | (1 << (MariaDBParser.SQL_BUFFER_RESULT - 603)) | (1 << (MariaDBParser.SQL_CACHE - 603)) | (1 << (MariaDBParser.SQL_NO_CACHE - 603)) | (1 << (MariaDBParser.SQL_THREAD - 603)) | (1 << (MariaDBParser.START - 603)) | (1 << (MariaDBParser.STARTS - 603)) | (1 << (MariaDBParser.STATS_AUTO_RECALC - 603)))) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & ((1 << (MariaDBParser.STATS_PERSISTENT - 635)) | (1 << (MariaDBParser.STATS_SAMPLE_PAGES - 635)) | (1 << (MariaDBParser.STATUS - 635)) | (1 << (MariaDBParser.STOP - 635)) | (1 << (MariaDBParser.STORAGE - 635)) | (1 << (MariaDBParser.STRING - 635)) | (1 << (MariaDBParser.SUBCLASS_ORIGIN - 635)) | (1 << (MariaDBParser.SUBJECT - 635)) | (1 << (MariaDBParser.SUBPARTITION - 635)) | (1 << (MariaDBParser.SUBPARTITIONS - 635)) | (1 << (MariaDBParser.SUSPEND - 635)) | (1 << (MariaDBParser.SWAPS - 635)) | (1 << (MariaDBParser.SWITCHES - 635)) | (1 << (MariaDBParser.TABLE_NAME - 635)) | (1 << (MariaDBParser.TABLESPACE - 635)) | (1 << (MariaDBParser.TABLE_TYPE - 635)) | (1 << (MariaDBParser.TEMPORARY - 635)) | (1 << (MariaDBParser.TEMPTABLE - 635)) | (1 << (MariaDBParser.THAN - 635)) | (1 << (MariaDBParser.TRADITIONAL - 635)) | (1 << (MariaDBParser.TRANSACTION - 635)) | (1 << (MariaDBParser.TRANSACTIONAL - 635)) | (1 << (MariaDBParser.TRIGGERS - 635)) | (1 << (MariaDBParser.TRUNCATE - 635)) | (1 << (MariaDBParser.TYPES - 635)) | (1 << (MariaDBParser.UNBOUNDED - 635)) | (1 << (MariaDBParser.UNDEFINED - 635)) | (1 << (MariaDBParser.UNDOFILE - 635)) | (1 << (MariaDBParser.UNDO_BUFFER_SIZE - 635)) | (1 << (MariaDBParser.UNINSTALL - 635)) | (1 << (MariaDBParser.UNKNOWN - 635)))) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & ((1 << (MariaDBParser.UNTIL - 667)) | (1 << (MariaDBParser.UPGRADE - 667)) | (1 << (MariaDBParser.USER - 667)) | (1 << (MariaDBParser.USE_FRM - 667)) | (1 << (MariaDBParser.USER_RESOURCES - 667)) | (1 << (MariaDBParser.VALIDATION - 667)) | (1 << (MariaDBParser.VALUE - 667)) | (1 << (MariaDBParser.VARIABLES - 667)) | (1 << (MariaDBParser.VIEW - 667)) | (1 << (MariaDBParser.VIRTUAL - 667)) | (1 << (MariaDBParser.VISIBLE - 667)) | (1 << (MariaDBParser.WAIT - 667)) | (1 << (MariaDBParser.WARNINGS - 667)) | (1 << (MariaDBParser.WITHOUT - 667)) | (1 << (MariaDBParser.WORK - 667)) | (1 << (MariaDBParser.WRAPPER - 667)) | (1 << (MariaDBParser.WSREP_MEMBERSHIP - 667)) | (1 << (MariaDBParser.WSREP_STATUS - 667)) | (1 << (MariaDBParser.X509 - 667)) | (1 << (MariaDBParser.XA - 667)) | (1 << (MariaDBParser.XML - 667)) | (1 << (MariaDBParser.EUR - 667)) | (1 << (MariaDBParser.USA - 667)) | (1 << (MariaDBParser.JIS - 667)) | (1 << (MariaDBParser.ISO - 667)) | (1 << (MariaDBParser.INTERNAL - 667)) | (1 << (MariaDBParser.QUARTER - 667)) | (1 << (MariaDBParser.MONTH - 667)) | (1 << (MariaDBParser.DAY - 667)) | (1 << (MariaDBParser.HOUR - 667)))) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & ((1 << (MariaDBParser.MINUTE - 699)) | (1 << (MariaDBParser.WEEK - 699)) | (1 << (MariaDBParser.SECOND - 699)) | (1 << (MariaDBParser.MICROSECOND - 699)) | (1 << (MariaDBParser.USER_STATISTICS - 699)) | (1 << (MariaDBParser.CLIENT_STATISTICS - 699)) | (1 << (MariaDBParser.INDEX_STATISTICS - 699)) | (1 << (MariaDBParser.TABLE_STATISTICS - 699)) | (1 << (MariaDBParser.ADMIN - 699)) | (1 << (MariaDBParser.AUDIT_ADMIN - 699)) | (1 << (MariaDBParser.BACKUP_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ENCRYPTION_ADMIN - 699)) | (1 << (MariaDBParser.CLONE_ADMIN - 699)) | (1 << (MariaDBParser.CONNECTION_ADMIN - 699)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ADMIN - 699)) | (1 << (MariaDBParser.EXECUTE - 699)) | (1 << (MariaDBParser.FILE - 699)) | (1 << (MariaDBParser.FIREWALL_ADMIN - 699)) | (1 << (MariaDBParser.FIREWALL_USER - 699)) | (1 << (MariaDBParser.GROUP_REPLICATION_ADMIN - 699)) | (1 << (MariaDBParser.INNODB_REDO_LOG_ARCHIVE - 699)) | (1 << (MariaDBParser.INVOKE - 699)) | (1 << (MariaDBParser.LAMBDA - 699)) | (1 << (MariaDBParser.NDB_STORED_USER - 699)) | (1 << (MariaDBParser.PASSWORDLESS_USER_ADMIN - 699)))) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & ((1 << (MariaDBParser.PERSIST_RO_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.PRIVILEGES - 731)) | (1 << (MariaDBParser.PROCESS - 731)) | (1 << (MariaDBParser.RELOAD - 731)) | (1 << (MariaDBParser.REPLICATION_APPLIER - 731)) | (1 << (MariaDBParser.REPLICATION_SLAVE_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_USER - 731)) | (1 << (MariaDBParser.ROLE_ADMIN - 731)) | (1 << (MariaDBParser.ROUTINE - 731)) | (1 << (MariaDBParser.S3 - 731)) | (1 << (MariaDBParser.SESSION_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.SET_USER_ID - 731)) | (1 << (MariaDBParser.SHOW_ROUTINE - 731)) | (1 << (MariaDBParser.SHUTDOWN - 731)) | (1 << (MariaDBParser.SUPER - 731)) | (1 << (MariaDBParser.SYSTEM_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.TABLES - 731)) | (1 << (MariaDBParser.TABLE_ENCRYPTION_ADMIN - 731)) | (1 << (MariaDBParser.VERSION_TOKEN_ADMIN - 731)) | (1 << (MariaDBParser.XA_RECOVER_ADMIN - 731)) | (1 << (MariaDBParser.ARMSCII8 - 731)) | (1 << (MariaDBParser.ASCII - 731)) | (1 << (MariaDBParser.BIG5 - 731)) | (1 << (MariaDBParser.CP1250 - 731)) | (1 << (MariaDBParser.CP1251 - 731)) | (1 << (MariaDBParser.CP1256 - 731)) | (1 << (MariaDBParser.CP1257 - 731)) | (1 << (MariaDBParser.CP850 - 731)) | (1 << (MariaDBParser.CP852 - 731)) | (1 << (MariaDBParser.CP866 - 731)))) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & ((1 << (MariaDBParser.CP932 - 763)) | (1 << (MariaDBParser.DEC8 - 763)) | (1 << (MariaDBParser.EUCJPMS - 763)) | (1 << (MariaDBParser.EUCKR - 763)) | (1 << (MariaDBParser.GB18030 - 763)) | (1 << (MariaDBParser.GB2312 - 763)) | (1 << (MariaDBParser.GBK - 763)) | (1 << (MariaDBParser.GEOSTD8 - 763)) | (1 << (MariaDBParser.GREEK - 763)) | (1 << (MariaDBParser.HEBREW - 763)) | (1 << (MariaDBParser.HP8 - 763)) | (1 << (MariaDBParser.KEYBCS2 - 763)) | (1 << (MariaDBParser.KOI8R - 763)) | (1 << (MariaDBParser.KOI8U - 763)) | (1 << (MariaDBParser.LATIN1 - 763)) | (1 << (MariaDBParser.LATIN2 - 763)) | (1 << (MariaDBParser.LATIN5 - 763)) | (1 << (MariaDBParser.LATIN7 - 763)) | (1 << (MariaDBParser.MACCE - 763)) | (1 << (MariaDBParser.MACROMAN - 763)) | (1 << (MariaDBParser.SJIS - 763)) | (1 << (MariaDBParser.SWE7 - 763)) | (1 << (MariaDBParser.TIS620 - 763)) | (1 << (MariaDBParser.UCS2 - 763)) | (1 << (MariaDBParser.UJIS - 763)) | (1 << (MariaDBParser.UTF16 - 763)) | (1 << (MariaDBParser.UTF16LE - 763)) | (1 << (MariaDBParser.UTF32 - 763)) | (1 << (MariaDBParser.UTF8 - 763)) | (1 << (MariaDBParser.UTF8MB3 - 763)) | (1 << (MariaDBParser.UTF8MB4 - 763)) | (1 << (MariaDBParser.ARCHIVE - 763)))) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & ((1 << (MariaDBParser.BLACKHOLE - 795)) | (1 << (MariaDBParser.CSV - 795)) | (1 << (MariaDBParser.FEDERATED - 795)) | (1 << (MariaDBParser.INNODB - 795)) | (1 << (MariaDBParser.MEMORY - 795)) | (1 << (MariaDBParser.MRG_MYISAM - 795)) | (1 << (MariaDBParser.MYISAM - 795)) | (1 << (MariaDBParser.NDB - 795)) | (1 << (MariaDBParser.NDBCLUSTER - 795)) | (1 << (MariaDBParser.PERFORMANCE_SCHEMA - 795)) | (1 << (MariaDBParser.TOKUDB - 795)) | (1 << (MariaDBParser.REPEATABLE - 795)) | (1 << (MariaDBParser.COMMITTED - 795)) | (1 << (MariaDBParser.UNCOMMITTED - 795)) | (1 << (MariaDBParser.SERIALIZABLE - 795)) | (1 << (MariaDBParser.GEOMETRYCOLLECTION - 795)) | (1 << (MariaDBParser.LINESTRING - 795)) | (1 << (MariaDBParser.MULTILINESTRING - 795)) | (1 << (MariaDBParser.MULTIPOINT - 795)) | (1 << (MariaDBParser.MULTIPOLYGON - 795)) | (1 << (MariaDBParser.POINT - 795)) | (1 << (MariaDBParser.POLYGON - 795)) | (1 << (MariaDBParser.ABS - 795)) | (1 << (MariaDBParser.ACOS - 795)) | (1 << (MariaDBParser.ADDDATE - 795)) | (1 << (MariaDBParser.ADDTIME - 795)) | (1 << (MariaDBParser.AES_DECRYPT - 795)) | (1 << (MariaDBParser.AES_ENCRYPT - 795)) | (1 << (MariaDBParser.AREA - 795)) | (1 << (MariaDBParser.ASBINARY - 795)))) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & ((1 << (MariaDBParser.ASIN - 827)) | (1 << (MariaDBParser.ASTEXT - 827)) | (1 << (MariaDBParser.ASWKB - 827)) | (1 << (MariaDBParser.ASWKT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DECRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DERIVE - 827)) | (1 << (MariaDBParser.ASYMMETRIC_ENCRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_SIGN - 827)) | (1 << (MariaDBParser.ASYMMETRIC_VERIFY - 827)) | (1 << (MariaDBParser.ATAN - 827)) | (1 << (MariaDBParser.ATAN2 - 827)) | (1 << (MariaDBParser.BENCHMARK - 827)) | (1 << (MariaDBParser.BIN - 827)) | (1 << (MariaDBParser.BIT_COUNT - 827)) | (1 << (MariaDBParser.BIT_LENGTH - 827)) | (1 << (MariaDBParser.BUFFER - 827)) | (1 << (MariaDBParser.CATALOG_NAME - 827)) | (1 << (MariaDBParser.CEIL - 827)) | (1 << (MariaDBParser.CEILING - 827)) | (1 << (MariaDBParser.CENTROID - 827)) | (1 << (MariaDBParser.CHARACTER_LENGTH - 827)) | (1 << (MariaDBParser.CHARSET - 827)) | (1 << (MariaDBParser.CHAR_LENGTH - 827)) | (1 << (MariaDBParser.COERCIBILITY - 827)) | (1 << (MariaDBParser.COLLATION - 827)) | (1 << (MariaDBParser.COMPRESS - 827)) | (1 << (MariaDBParser.CONCAT - 827)) | (1 << (MariaDBParser.CONCAT_WS - 827)) | (1 << (MariaDBParser.CONNECTION_ID - 827)) | (1 << (MariaDBParser.CONV - 827)) | (1 << (MariaDBParser.CONVERT_TZ - 827)) | (1 << (MariaDBParser.COS - 827)))) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & ((1 << (MariaDBParser.COT - 859)) | (1 << (MariaDBParser.CRC32 - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY - 859)) | (1 << (MariaDBParser.CREATE_DH_PARAMETERS - 859)) | (1 << (MariaDBParser.CREATE_DIGEST - 859)) | (1 << (MariaDBParser.CROSSES - 859)) | (1 << (MariaDBParser.DATEDIFF - 859)) | (1 << (MariaDBParser.DATE_FORMAT - 859)) | (1 << (MariaDBParser.DAYNAME - 859)) | (1 << (MariaDBParser.DAYOFMONTH - 859)) | (1 << (MariaDBParser.DAYOFWEEK - 859)) | (1 << (MariaDBParser.DAYOFYEAR - 859)) | (1 << (MariaDBParser.DECODE - 859)) | (1 << (MariaDBParser.DEGREES - 859)) | (1 << (MariaDBParser.DES_DECRYPT - 859)) | (1 << (MariaDBParser.DES_ENCRYPT - 859)) | (1 << (MariaDBParser.DIMENSION - 859)) | (1 << (MariaDBParser.DISJOINT - 859)) | (1 << (MariaDBParser.ELT - 859)) | (1 << (MariaDBParser.ENCODE - 859)) | (1 << (MariaDBParser.ENCRYPT - 859)) | (1 << (MariaDBParser.ENDPOINT - 859)) | (1 << (MariaDBParser.ENGINE_ATTRIBUTE - 859)) | (1 << (MariaDBParser.ENVELOPE - 859)) | (1 << (MariaDBParser.EQUALS - 859)) | (1 << (MariaDBParser.EXP - 859)) | (1 << (MariaDBParser.EXPORT_SET - 859)) | (1 << (MariaDBParser.EXTERIORRING - 859)) | (1 << (MariaDBParser.EXTRACTVALUE - 859)) | (1 << (MariaDBParser.FIELD - 859)) | (1 << (MariaDBParser.FIND_IN_SET - 859)))) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & ((1 << (MariaDBParser.FLOOR - 891)) | (1 << (MariaDBParser.FORMAT - 891)) | (1 << (MariaDBParser.FOUND_ROWS - 891)) | (1 << (MariaDBParser.FROM_BASE64 - 891)) | (1 << (MariaDBParser.FROM_DAYS - 891)) | (1 << (MariaDBParser.FROM_UNIXTIME - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYN - 891)) | (1 << (MariaDBParser.GEOMETRYTYPE - 891)) | (1 << (MariaDBParser.GEOMFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMFROMWKB - 891)) | (1 << (MariaDBParser.GET_FORMAT - 891)) | (1 << (MariaDBParser.GET_LOCK - 891)) | (1 << (MariaDBParser.GLENGTH - 891)) | (1 << (MariaDBParser.GREATEST - 891)) | (1 << (MariaDBParser.GTID_SUBSET - 891)) | (1 << (MariaDBParser.GTID_SUBTRACT - 891)) | (1 << (MariaDBParser.HEX - 891)) | (1 << (MariaDBParser.IFNULL - 891)) | (1 << (MariaDBParser.INET6_ATON - 891)) | (1 << (MariaDBParser.INET6_NTOA - 891)) | (1 << (MariaDBParser.INET_ATON - 891)) | (1 << (MariaDBParser.INET_NTOA - 891)) | (1 << (MariaDBParser.INSTR - 891)) | (1 << (MariaDBParser.INTERIORRINGN - 891)) | (1 << (MariaDBParser.INTERSECTS - 891)) | (1 << (MariaDBParser.ISCLOSED - 891)))) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & ((1 << (MariaDBParser.ISEMPTY - 923)) | (1 << (MariaDBParser.ISNULL - 923)) | (1 << (MariaDBParser.ISSIMPLE - 923)) | (1 << (MariaDBParser.IS_FREE_LOCK - 923)) | (1 << (MariaDBParser.IS_IPV4 - 923)) | (1 << (MariaDBParser.IS_IPV4_COMPAT - 923)) | (1 << (MariaDBParser.IS_IPV4_MAPPED - 923)) | (1 << (MariaDBParser.IS_IPV6 - 923)) | (1 << (MariaDBParser.IS_USED_LOCK - 923)) | (1 << (MariaDBParser.LAST_INSERT_ID - 923)) | (1 << (MariaDBParser.LCASE - 923)) | (1 << (MariaDBParser.LEAST - 923)) | (1 << (MariaDBParser.LENGTH - 923)) | (1 << (MariaDBParser.LINEFROMTEXT - 923)) | (1 << (MariaDBParser.LINEFROMWKB - 923)) | (1 << (MariaDBParser.LINESTRINGFROMTEXT - 923)) | (1 << (MariaDBParser.LINESTRINGFROMWKB - 923)) | (1 << (MariaDBParser.LN - 923)) | (1 << (MariaDBParser.LOAD_FILE - 923)) | (1 << (MariaDBParser.LOCATE - 923)) | (1 << (MariaDBParser.LOG - 923)) | (1 << (MariaDBParser.LOG10 - 923)) | (1 << (MariaDBParser.LOG2 - 923)) | (1 << (MariaDBParser.LOWER - 923)) | (1 << (MariaDBParser.LPAD - 923)) | (1 << (MariaDBParser.LTRIM - 923)) | (1 << (MariaDBParser.MAKEDATE - 923)) | (1 << (MariaDBParser.MAKETIME - 923)) | (1 << (MariaDBParser.MAKE_SET - 923)) | (1 << (MariaDBParser.MASTER_POS_WAIT - 923)) | (1 << (MariaDBParser.MBRCONTAINS - 923)) | (1 << (MariaDBParser.MBRDISJOINT - 923)))) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & ((1 << (MariaDBParser.MBREQUAL - 955)) | (1 << (MariaDBParser.MBRINTERSECTS - 955)) | (1 << (MariaDBParser.MBROVERLAPS - 955)) | (1 << (MariaDBParser.MBRTOUCHES - 955)) | (1 << (MariaDBParser.MBRWITHIN - 955)) | (1 << (MariaDBParser.MD5 - 955)) | (1 << (MariaDBParser.MLINEFROMTEXT - 955)) | (1 << (MariaDBParser.MLINEFROMWKB - 955)) | (1 << (MariaDBParser.MONTHNAME - 955)) | (1 << (MariaDBParser.MPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MPOLYFROMTEXT - 955)) | (1 << (MariaDBParser.MPOLYFROMWKB - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMTEXT - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMWKB - 955)) | (1 << (MariaDBParser.NAME_CONST - 955)) | (1 << (MariaDBParser.NULLIF - 955)) | (1 << (MariaDBParser.NUMGEOMETRIES - 955)) | (1 << (MariaDBParser.NUMINTERIORRINGS - 955)) | (1 << (MariaDBParser.NUMPOINTS - 955)) | (1 << (MariaDBParser.OCT - 955)) | (1 << (MariaDBParser.OCTET_LENGTH - 955)) | (1 << (MariaDBParser.ORD - 955)) | (1 << (MariaDBParser.OVERLAPS - 955)) | (1 << (MariaDBParser.PERIOD_ADD - 955)) | (1 << (MariaDBParser.PERIOD_DIFF - 955)) | (1 << (MariaDBParser.PI - 955)) | (1 << (MariaDBParser.POINTFROMTEXT - 955)))) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & ((1 << (MariaDBParser.POINTFROMWKB - 987)) | (1 << (MariaDBParser.POINTN - 987)) | (1 << (MariaDBParser.POLYFROMTEXT - 987)) | (1 << (MariaDBParser.POLYFROMWKB - 987)) | (1 << (MariaDBParser.POLYGONFROMTEXT - 987)) | (1 << (MariaDBParser.POLYGONFROMWKB - 987)) | (1 << (MariaDBParser.POW - 987)) | (1 << (MariaDBParser.POWER - 987)) | (1 << (MariaDBParser.QUOTE - 987)) | (1 << (MariaDBParser.RADIANS - 987)) | (1 << (MariaDBParser.RAND - 987)) | (1 << (MariaDBParser.RANDOM_BYTES - 987)) | (1 << (MariaDBParser.RELEASE_LOCK - 987)) | (1 << (MariaDBParser.REVERSE - 987)) | (1 << (MariaDBParser.ROUND - 987)) | (1 << (MariaDBParser.ROW_COUNT - 987)) | (1 << (MariaDBParser.RPAD - 987)) | (1 << (MariaDBParser.RTRIM - 987)) | (1 << (MariaDBParser.SEC_TO_TIME - 987)) | (1 << (MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE - 987)) | (1 << (MariaDBParser.SESSION_USER - 987)) | (1 << (MariaDBParser.SHA - 987)) | (1 << (MariaDBParser.SHA1 - 987)) | (1 << (MariaDBParser.SHA2 - 987)) | (1 << (MariaDBParser.SCHEMA_NAME - 987)) | (1 << (MariaDBParser.SIGN - 987)) | (1 << (MariaDBParser.SIN - 987)) | (1 << (MariaDBParser.SLEEP - 987)) | (1 << (MariaDBParser.SOUNDEX - 987)) | (1 << (MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS - 987)) | (1 << (MariaDBParser.SQRT - 987)) | (1 << (MariaDBParser.SRID - 987)))) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & ((1 << (MariaDBParser.STARTPOINT - 1019)) | (1 << (MariaDBParser.STRCMP - 1019)) | (1 << (MariaDBParser.STR_TO_DATE - 1019)) | (1 << (MariaDBParser.ST_AREA - 1019)) | (1 << (MariaDBParser.ST_ASBINARY - 1019)) | (1 << (MariaDBParser.ST_ASTEXT - 1019)) | (1 << (MariaDBParser.ST_ASWKB - 1019)) | (1 << (MariaDBParser.ST_ASWKT - 1019)) | (1 << (MariaDBParser.ST_BUFFER - 1019)) | (1 << (MariaDBParser.ST_CENTROID - 1019)) | (1 << (MariaDBParser.ST_CONTAINS - 1019)) | (1 << (MariaDBParser.ST_CROSSES - 1019)) | (1 << (MariaDBParser.ST_DIFFERENCE - 1019)) | (1 << (MariaDBParser.ST_DIMENSION - 1019)) | (1 << (MariaDBParser.ST_DISJOINT - 1019)) | (1 << (MariaDBParser.ST_DISTANCE - 1019)) | (1 << (MariaDBParser.ST_ENDPOINT - 1019)) | (1 << (MariaDBParser.ST_ENVELOPE - 1019)) | (1 << (MariaDBParser.ST_EQUALS - 1019)) | (1 << (MariaDBParser.ST_EXTERIORRING - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYN - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYTYPE - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMWKB - 1019)) | (1 << (MariaDBParser.ST_INTERIORRINGN - 1019)))) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & ((1 << (MariaDBParser.ST_INTERSECTION - 1051)) | (1 << (MariaDBParser.ST_INTERSECTS - 1051)) | (1 << (MariaDBParser.ST_ISCLOSED - 1051)) | (1 << (MariaDBParser.ST_ISEMPTY - 1051)) | (1 << (MariaDBParser.ST_ISSIMPLE - 1051)) | (1 << (MariaDBParser.ST_LINEFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINEFROMWKB - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMWKB - 1051)) | (1 << (MariaDBParser.ST_NUMGEOMETRIES - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRING - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRINGS - 1051)) | (1 << (MariaDBParser.ST_NUMPOINTS - 1051)) | (1 << (MariaDBParser.ST_OVERLAPS - 1051)) | (1 << (MariaDBParser.ST_POINTFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POINTFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POINTN - 1051)) | (1 << (MariaDBParser.ST_POLYFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMWKB - 1051)) | (1 << (MariaDBParser.ST_SRID - 1051)) | (1 << (MariaDBParser.ST_STARTPOINT - 1051)) | (1 << (MariaDBParser.ST_SYMDIFFERENCE - 1051)) | (1 << (MariaDBParser.ST_TOUCHES - 1051)) | (1 << (MariaDBParser.ST_UNION - 1051)) | (1 << (MariaDBParser.ST_WITHIN - 1051)) | (1 << (MariaDBParser.ST_X - 1051)) | (1 << (MariaDBParser.ST_Y - 1051)) | (1 << (MariaDBParser.SUBDATE - 1051)) | (1 << (MariaDBParser.SUBSTRING_INDEX - 1051)) | (1 << (MariaDBParser.SUBTIME - 1051)))) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & ((1 << (MariaDBParser.SYSTEM_USER - 1083)) | (1 << (MariaDBParser.TAN - 1083)) | (1 << (MariaDBParser.TIMEDIFF - 1083)) | (1 << (MariaDBParser.TIMESTAMPADD - 1083)) | (1 << (MariaDBParser.TIMESTAMPDIFF - 1083)) | (1 << (MariaDBParser.TIME_FORMAT - 1083)) | (1 << (MariaDBParser.TIME_TO_SEC - 1083)) | (1 << (MariaDBParser.TOUCHES - 1083)) | (1 << (MariaDBParser.TO_BASE64 - 1083)) | (1 << (MariaDBParser.TO_DAYS - 1083)) | (1 << (MariaDBParser.TO_SECONDS - 1083)) | (1 << (MariaDBParser.UCASE - 1083)) | (1 << (MariaDBParser.UNCOMPRESS - 1083)) | (1 << (MariaDBParser.UNCOMPRESSED_LENGTH - 1083)) | (1 << (MariaDBParser.UNHEX - 1083)) | (1 << (MariaDBParser.UNIX_TIMESTAMP - 1083)) | (1 << (MariaDBParser.UPDATEXML - 1083)) | (1 << (MariaDBParser.UPPER - 1083)) | (1 << (MariaDBParser.UUID - 1083)) | (1 << (MariaDBParser.UUID_SHORT - 1083)) | (1 << (MariaDBParser.VALIDATE_PASSWORD_STRENGTH - 1083)) | (1 << (MariaDBParser.VERSION - 1083)) | (1 << (MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1083)) | (1 << (MariaDBParser.WEEKDAY - 1083)) | (1 << (MariaDBParser.WEEKOFYEAR - 1083)) | (1 << (MariaDBParser.WEIGHT_STRING - 1083)) | (1 << (MariaDBParser.WITHIN - 1083)) | (1 << (MariaDBParser.YEARWEEK - 1083)) | (1 << (MariaDBParser.Y_FUNCTION - 1083)) | (1 << (MariaDBParser.X_FUNCTION - 1083)) | (1 << (MariaDBParser.VIA - 1083)) | (1 << (MariaDBParser.LASTVAL - 1083)))) !== 0) || ((((_la - 1115)) & ~0x1F) === 0 && ((1 << (_la - 1115)) & ((1 << (MariaDBParser.NEXTVAL - 1115)) | (1 << (MariaDBParser.SETVAL - 1115)) | (1 << (MariaDBParser.PREVIOUS - 1115)) | (1 << (MariaDBParser.PERSISTENT - 1115)) | (1 << (MariaDBParser.BINLOG_MONITOR - 1115)) | (1 << (MariaDBParser.BINLOG_REPLAY - 1115)) | (1 << (MariaDBParser.FEDERATED_ADMIN - 1115)) | (1 << (MariaDBParser.READ_ONLY_ADMIN - 1115)) | (1 << (MariaDBParser.REPLICA - 1115)) | (1 << (MariaDBParser.REPLICAS - 1115)) | (1 << (MariaDBParser.REPLICATION_MASTER_ADMIN - 1115)) | (1 << (MariaDBParser.MONITOR - 1115)) | (1 << (MariaDBParser.READ_ONLY - 1115)) | (1 << (MariaDBParser.REPLAY - 1115)) | (1 << (MariaDBParser.MOD - 1115)))) !== 0) || ((((_la - 1166)) & ~0x1F) === 0 && ((1 << (_la - 1166)) & ((1 << (MariaDBParser.CHARSET_REVERSE_QOUTE_STRING - 1166)) | (1 << (MariaDBParser.STRING_LITERAL - 1166)) | (1 << (MariaDBParser.ID - 1166)))) !== 0)) {
					{
					this.state = 2697;
					this.uid();
					}
				}

				this.state = 2701;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.USING) {
					{
					this.state = 2700;
					this.indexType();
					}
				}

				this.state = 2703;
				this.indexColumnNames();
				this.state = 2707;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.IGNORED || _la === MariaDBParser.NOT || _la === MariaDBParser.USING || _la === MariaDBParser.WITH || _la === MariaDBParser.CLUSTERING || _la === MariaDBParser.COMMENT || _la === MariaDBParser.INVISIBLE || _la === MariaDBParser.KEY_BLOCK_SIZE || _la === MariaDBParser.VISIBLE || _la === MariaDBParser.ENGINE_ATTRIBUTE || _la === MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					this.state = 2704;
					this.indexOption();
					}
					}
					this.state = 2709;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 5:
				_localctx = new AlterByAddPrimaryKeyContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2710;
				this.match(MariaDBParser.ADD);
				this.state = 2715;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.CONSTRAINT) {
					{
					this.state = 2711;
					this.match(MariaDBParser.CONSTRAINT);
					this.state = 2713;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 344, this._ctx) ) {
					case 1:
						{
						this.state = 2712;
						(_localctx as AlterByAddPrimaryKeyContext)._name = this.uid();
						}
						break;
					}
					}
				}

				this.state = 2717;
				this.match(MariaDBParser.PRIMARY);
				this.state = 2718;
				this.match(MariaDBParser.KEY);
				this.state = 2720;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MariaDBParser.ATTRIBUTE) | (1 << MariaDBParser.BODY) | (1 << MariaDBParser.BUCKETS) | (1 << MariaDBParser.CONDITION))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (MariaDBParser.CURRENT - 36)) | (1 << (MariaDBParser.CURRENT_ROLE - 36)) | (1 << (MariaDBParser.CURRENT_USER - 36)) | (1 << (MariaDBParser.DATABASE - 36)) | (1 << (MariaDBParser.DEFAULT - 36)) | (1 << (MariaDBParser.DIAGNOSTICS - 36)) | (1 << (MariaDBParser.EMPTY - 36)) | (1 << (MariaDBParser.EXCEPT - 36)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (MariaDBParser.GROUP - 73)) | (1 << (MariaDBParser.IF - 73)) | (1 << (MariaDBParser.IGNORED - 73)) | (1 << (MariaDBParser.INSERT - 73)) | (1 << (MariaDBParser.LATERAL - 73)) | (1 << (MariaDBParser.LEFT - 73)) | (1 << (MariaDBParser.LOCKED - 73)))) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & ((1 << (MariaDBParser.MAXVALUE - 110)) | (1 << (MariaDBParser.MINVALUE - 110)) | (1 << (MariaDBParser.NUMBER - 110)) | (1 << (MariaDBParser.OPTIONAL - 110)) | (1 << (MariaDBParser.ORDER - 110)) | (1 << (MariaDBParser.PRIMARY - 110)) | (1 << (MariaDBParser.PACKAGE - 110)))) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (MariaDBParser.REPLACE - 142)) | (1 << (MariaDBParser.RIGHT - 142)) | (1 << (MariaDBParser.SCHEMA - 142)) | (1 << (MariaDBParser.SKIP_ - 142)) | (1 << (MariaDBParser.STACKED - 142)) | (1 << (MariaDBParser.STATEMENT - 142)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MariaDBParser.DATE - 217)) | (1 << (MariaDBParser.TIME - 217)) | (1 << (MariaDBParser.TIMESTAMP - 217)) | (1 << (MariaDBParser.DATETIME - 217)) | (1 << (MariaDBParser.YEAR - 217)) | (1 << (MariaDBParser.BINARY - 217)) | (1 << (MariaDBParser.TEXT - 217)) | (1 << (MariaDBParser.ENUM - 217)) | (1 << (MariaDBParser.SERIAL - 217)))) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & ((1 << (MariaDBParser.JSON_ARRAY - 251)) | (1 << (MariaDBParser.JSON_ARRAYAGG - 251)) | (1 << (MariaDBParser.JSON_ARRAY_APPEND - 251)) | (1 << (MariaDBParser.JSON_ARRAY_INSERT - 251)) | (1 << (MariaDBParser.JSON_CONTAINS - 251)) | (1 << (MariaDBParser.JSON_CONTAINS_PATH - 251)) | (1 << (MariaDBParser.JSON_DEPTH - 251)) | (1 << (MariaDBParser.JSON_EXTRACT - 251)) | (1 << (MariaDBParser.JSON_INSERT - 251)) | (1 << (MariaDBParser.JSON_KEYS - 251)) | (1 << (MariaDBParser.JSON_LENGTH - 251)) | (1 << (MariaDBParser.JSON_MERGE - 251)) | (1 << (MariaDBParser.JSON_MERGE_PATCH - 251)) | (1 << (MariaDBParser.JSON_MERGE_PRESERVE - 251)) | (1 << (MariaDBParser.JSON_OBJECT - 251)) | (1 << (MariaDBParser.JSON_OBJECTAGG - 251)) | (1 << (MariaDBParser.JSON_OVERLAPS - 251)) | (1 << (MariaDBParser.JSON_PRETTY - 251)) | (1 << (MariaDBParser.JSON_QUOTE - 251)) | (1 << (MariaDBParser.JSON_REMOVE - 251)) | (1 << (MariaDBParser.JSON_REPLACE - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALID - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT - 251)) | (1 << (MariaDBParser.JSON_SEARCH - 251)) | (1 << (MariaDBParser.JSON_SET - 251)) | (1 << (MariaDBParser.JSON_STORAGE_FREE - 251)) | (1 << (MariaDBParser.JSON_STORAGE_SIZE - 251)) | (1 << (MariaDBParser.JSON_TABLE - 251)) | (1 << (MariaDBParser.JSON_TYPE - 251)) | (1 << (MariaDBParser.JSON_UNQUOTE - 251)) | (1 << (MariaDBParser.JSON_VALID - 251)) | (1 << (MariaDBParser.JSON_VALUE - 251)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (MariaDBParser.NESTED - 283)) | (1 << (MariaDBParser.ORDINALITY - 283)) | (1 << (MariaDBParser.PATH - 283)) | (1 << (MariaDBParser.AVG - 283)) | (1 << (MariaDBParser.BIT_AND - 283)) | (1 << (MariaDBParser.BIT_OR - 283)) | (1 << (MariaDBParser.BIT_XOR - 283)) | (1 << (MariaDBParser.COUNT - 283)) | (1 << (MariaDBParser.CUME_DIST - 283)) | (1 << (MariaDBParser.DENSE_RANK - 283)) | (1 << (MariaDBParser.FIRST_VALUE - 283)) | (1 << (MariaDBParser.GROUP_CONCAT - 283)) | (1 << (MariaDBParser.LAG - 283)) | (1 << (MariaDBParser.LAST_VALUE - 283)) | (1 << (MariaDBParser.LEAD - 283)) | (1 << (MariaDBParser.MAX - 283)) | (1 << (MariaDBParser.MIN - 283)) | (1 << (MariaDBParser.NTILE - 283)) | (1 << (MariaDBParser.NTH_VALUE - 283)) | (1 << (MariaDBParser.PERCENT_RANK - 283)) | (1 << (MariaDBParser.RANK - 283)) | (1 << (MariaDBParser.ROW_NUMBER - 283)) | (1 << (MariaDBParser.STD - 283)) | (1 << (MariaDBParser.STDDEV - 283)) | (1 << (MariaDBParser.STDDEV_POP - 283)) | (1 << (MariaDBParser.STDDEV_SAMP - 283)) | (1 << (MariaDBParser.SUM - 283)) | (1 << (MariaDBParser.VAR_POP - 283)) | (1 << (MariaDBParser.VAR_SAMP - 283)) | (1 << (MariaDBParser.VARIANCE - 283)) | (1 << (MariaDBParser.CURRENT_DATE - 283)) | (1 << (MariaDBParser.CURRENT_TIME - 283)))) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & ((1 << (MariaDBParser.CURRENT_TIMESTAMP - 315)) | (1 << (MariaDBParser.LOCALTIME - 315)) | (1 << (MariaDBParser.CURDATE - 315)) | (1 << (MariaDBParser.CURTIME - 315)) | (1 << (MariaDBParser.DATE_ADD - 315)) | (1 << (MariaDBParser.DATE_SUB - 315)) | (1 << (MariaDBParser.LOCALTIMESTAMP - 315)) | (1 << (MariaDBParser.NOW - 315)) | (1 << (MariaDBParser.POSITION - 315)) | (1 << (MariaDBParser.SUBSTR - 315)) | (1 << (MariaDBParser.SUBSTRING - 315)) | (1 << (MariaDBParser.SYSDATE - 315)) | (1 << (MariaDBParser.TRIM - 315)) | (1 << (MariaDBParser.UTC_DATE - 315)) | (1 << (MariaDBParser.UTC_TIME - 315)) | (1 << (MariaDBParser.UTC_TIMESTAMP - 315)) | (1 << (MariaDBParser.ACCOUNT - 315)) | (1 << (MariaDBParser.ACTION - 315)) | (1 << (MariaDBParser.AFTER - 315)) | (1 << (MariaDBParser.AGGREGATE - 315)) | (1 << (MariaDBParser.ALGORITHM - 315)) | (1 << (MariaDBParser.ANY - 315)) | (1 << (MariaDBParser.AT - 315)) | (1 << (MariaDBParser.AUTHORS - 315)) | (1 << (MariaDBParser.AUTOCOMMIT - 315)) | (1 << (MariaDBParser.AUTOEXTEND_SIZE - 315)) | (1 << (MariaDBParser.AUTO_INCREMENT - 315)) | (1 << (MariaDBParser.AVG_ROW_LENGTH - 315)) | (1 << (MariaDBParser.BEGIN - 315)) | (1 << (MariaDBParser.BINLOG - 315)) | (1 << (MariaDBParser.BIT - 315)))) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & ((1 << (MariaDBParser.BLOCK - 347)) | (1 << (MariaDBParser.BOOL - 347)) | (1 << (MariaDBParser.BOOLEAN - 347)) | (1 << (MariaDBParser.BTREE - 347)) | (1 << (MariaDBParser.CACHE - 347)) | (1 << (MariaDBParser.CASCADED - 347)) | (1 << (MariaDBParser.CHAIN - 347)) | (1 << (MariaDBParser.CHANGED - 347)) | (1 << (MariaDBParser.CHANNEL - 347)) | (1 << (MariaDBParser.CHECKSUM - 347)) | (1 << (MariaDBParser.PAGE_CHECKSUM - 347)) | (1 << (MariaDBParser.CIPHER - 347)) | (1 << (MariaDBParser.CLASS_ORIGIN - 347)) | (1 << (MariaDBParser.CLIENT - 347)) | (1 << (MariaDBParser.CLOSE - 347)) | (1 << (MariaDBParser.CLUSTERING - 347)) | (1 << (MariaDBParser.COALESCE - 347)) | (1 << (MariaDBParser.CODE - 347)) | (1 << (MariaDBParser.COLUMNS - 347)) | (1 << (MariaDBParser.COLUMN_FORMAT - 347)) | (1 << (MariaDBParser.COLUMN_NAME - 347)) | (1 << (MariaDBParser.COMMENT - 347)) | (1 << (MariaDBParser.COMMIT - 347)) | (1 << (MariaDBParser.COMPACT - 347)) | (1 << (MariaDBParser.COMPLETION - 347)) | (1 << (MariaDBParser.COMPRESSED - 347)) | (1 << (MariaDBParser.COMPRESSION - 347)) | (1 << (MariaDBParser.CONCURRENT - 347)) | (1 << (MariaDBParser.CONNECT - 347)) | (1 << (MariaDBParser.CONNECTION - 347)) | (1 << (MariaDBParser.CONSISTENT - 347)) | (1 << (MariaDBParser.CONSTRAINT_CATALOG - 347)))) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & ((1 << (MariaDBParser.CONSTRAINT_SCHEMA - 379)) | (1 << (MariaDBParser.CONSTRAINT_NAME - 379)) | (1 << (MariaDBParser.CONTAINS - 379)) | (1 << (MariaDBParser.CONTEXT - 379)) | (1 << (MariaDBParser.CONTRIBUTORS - 379)) | (1 << (MariaDBParser.COPY - 379)) | (1 << (MariaDBParser.CPU - 379)) | (1 << (MariaDBParser.CYCLE - 379)) | (1 << (MariaDBParser.CURSOR_NAME - 379)) | (1 << (MariaDBParser.DATA - 379)) | (1 << (MariaDBParser.DATAFILE - 379)) | (1 << (MariaDBParser.DEALLOCATE - 379)) | (1 << (MariaDBParser.DEFAULT_AUTH - 379)) | (1 << (MariaDBParser.DEFINER - 379)) | (1 << (MariaDBParser.DELAY_KEY_WRITE - 379)) | (1 << (MariaDBParser.DES_KEY_FILE - 379)) | (1 << (MariaDBParser.DIRECTORY - 379)) | (1 << (MariaDBParser.DISABLE - 379)) | (1 << (MariaDBParser.DISCARD - 379)) | (1 << (MariaDBParser.DISK - 379)) | (1 << (MariaDBParser.DO - 379)) | (1 << (MariaDBParser.DUMPFILE - 379)) | (1 << (MariaDBParser.DUPLICATE - 379)) | (1 << (MariaDBParser.DYNAMIC - 379)) | (1 << (MariaDBParser.ENABLE - 379)) | (1 << (MariaDBParser.ENCRYPTED - 379)) | (1 << (MariaDBParser.ENCRYPTION - 379)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ID - 379)) | (1 << (MariaDBParser.END - 379)) | (1 << (MariaDBParser.ENDS - 379)) | (1 << (MariaDBParser.ENGINE - 379)) | (1 << (MariaDBParser.ENGINES - 379)))) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & ((1 << (MariaDBParser.ERROR - 411)) | (1 << (MariaDBParser.ERRORS - 411)) | (1 << (MariaDBParser.ESCAPE - 411)) | (1 << (MariaDBParser.EVEN - 411)) | (1 << (MariaDBParser.EVENT - 411)) | (1 << (MariaDBParser.EVENTS - 411)) | (1 << (MariaDBParser.EVERY - 411)) | (1 << (MariaDBParser.EXCHANGE - 411)) | (1 << (MariaDBParser.EXCLUSIVE - 411)) | (1 << (MariaDBParser.EXPIRE - 411)) | (1 << (MariaDBParser.EXPORT - 411)) | (1 << (MariaDBParser.EXTENDED - 411)) | (1 << (MariaDBParser.EXTENT_SIZE - 411)) | (1 << (MariaDBParser.FAILED_LOGIN_ATTEMPTS - 411)) | (1 << (MariaDBParser.FAST - 411)) | (1 << (MariaDBParser.FAULTS - 411)) | (1 << (MariaDBParser.FIELDS - 411)) | (1 << (MariaDBParser.FILE_BLOCK_SIZE - 411)) | (1 << (MariaDBParser.FILTER - 411)) | (1 << (MariaDBParser.FIRST - 411)) | (1 << (MariaDBParser.FIXED - 411)) | (1 << (MariaDBParser.FLUSH - 411)) | (1 << (MariaDBParser.FOLLOWS - 411)) | (1 << (MariaDBParser.FOUND - 411)) | (1 << (MariaDBParser.FULL - 411)) | (1 << (MariaDBParser.FUNCTION - 411)) | (1 << (MariaDBParser.GENERAL - 411)) | (1 << (MariaDBParser.GLOBAL - 411)) | (1 << (MariaDBParser.GRANTS - 411)) | (1 << (MariaDBParser.GROUP_REPLICATION - 411)) | (1 << (MariaDBParser.HANDLER - 411)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (MariaDBParser.HASH - 443)) | (1 << (MariaDBParser.HELP - 443)) | (1 << (MariaDBParser.HISTORY - 443)) | (1 << (MariaDBParser.HOST - 443)) | (1 << (MariaDBParser.HOSTS - 443)) | (1 << (MariaDBParser.IDENTIFIED - 443)) | (1 << (MariaDBParser.IGNORE_SERVER_IDS - 443)) | (1 << (MariaDBParser.IMPORT - 443)) | (1 << (MariaDBParser.INCREMENT - 443)) | (1 << (MariaDBParser.INDEXES - 443)) | (1 << (MariaDBParser.INITIAL_SIZE - 443)) | (1 << (MariaDBParser.INPLACE - 443)) | (1 << (MariaDBParser.INSERT_METHOD - 443)) | (1 << (MariaDBParser.INSTALL - 443)) | (1 << (MariaDBParser.INSTANCE - 443)) | (1 << (MariaDBParser.INSTANT - 443)) | (1 << (MariaDBParser.INVISIBLE - 443)) | (1 << (MariaDBParser.INVOKER - 443)) | (1 << (MariaDBParser.IO - 443)) | (1 << (MariaDBParser.IO_THREAD - 443)) | (1 << (MariaDBParser.IPC - 443)) | (1 << (MariaDBParser.ISOLATION - 443)) | (1 << (MariaDBParser.ISSUER - 443)) | (1 << (MariaDBParser.JSON - 443)) | (1 << (MariaDBParser.KEY_BLOCK_SIZE - 443)) | (1 << (MariaDBParser.LANGUAGE - 443)) | (1 << (MariaDBParser.LAST - 443)) | (1 << (MariaDBParser.LEAVES - 443)) | (1 << (MariaDBParser.LESS - 443)) | (1 << (MariaDBParser.LEVEL - 443)) | (1 << (MariaDBParser.LIST - 443)) | (1 << (MariaDBParser.LOCAL - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (MariaDBParser.LOCALES - 475)) | (1 << (MariaDBParser.LOGFILE - 475)) | (1 << (MariaDBParser.LOGS - 475)) | (1 << (MariaDBParser.MASTER - 475)) | (1 << (MariaDBParser.MASTER_AUTO_POSITION - 475)) | (1 << (MariaDBParser.MASTER_CONNECT_RETRY - 475)) | (1 << (MariaDBParser.MASTER_DELAY - 475)) | (1 << (MariaDBParser.MASTER_HEARTBEAT_PERIOD - 475)) | (1 << (MariaDBParser.MASTER_HOST - 475)) | (1 << (MariaDBParser.MASTER_LOG_FILE - 475)) | (1 << (MariaDBParser.MASTER_LOG_POS - 475)) | (1 << (MariaDBParser.MASTER_PASSWORD - 475)) | (1 << (MariaDBParser.MASTER_PORT - 475)) | (1 << (MariaDBParser.MASTER_RETRY_COUNT - 475)) | (1 << (MariaDBParser.MASTER_SSL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CA - 475)) | (1 << (MariaDBParser.MASTER_SSL_CAPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_CERT - 475)) | (1 << (MariaDBParser.MASTER_SSL_CIPHER - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRLPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_KEY - 475)) | (1 << (MariaDBParser.MASTER_TLS_VERSION - 475)) | (1 << (MariaDBParser.MASTER_USER - 475)) | (1 << (MariaDBParser.MAX_CONNECTIONS_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_QUERIES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_ROWS - 475)) | (1 << (MariaDBParser.MAX_SIZE - 475)) | (1 << (MariaDBParser.MAX_UPDATES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_USER_CONNECTIONS - 475)) | (1 << (MariaDBParser.MEDIUM - 475)) | (1 << (MariaDBParser.MEMBER - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (MariaDBParser.MERGE - 507)) | (1 << (MariaDBParser.MESSAGE_TEXT - 507)) | (1 << (MariaDBParser.MID - 507)) | (1 << (MariaDBParser.MIGRATE - 507)) | (1 << (MariaDBParser.MIN_ROWS - 507)) | (1 << (MariaDBParser.MODE - 507)) | (1 << (MariaDBParser.MODIFY - 507)) | (1 << (MariaDBParser.MUTEX - 507)) | (1 << (MariaDBParser.MYSQL - 507)) | (1 << (MariaDBParser.MYSQL_ERRNO - 507)) | (1 << (MariaDBParser.NAME - 507)) | (1 << (MariaDBParser.NAMES - 507)) | (1 << (MariaDBParser.NCHAR - 507)) | (1 << (MariaDBParser.NEVER - 507)) | (1 << (MariaDBParser.NEXT - 507)) | (1 << (MariaDBParser.NO - 507)) | (1 << (MariaDBParser.NOCACHE - 507)) | (1 << (MariaDBParser.NOCOPY - 507)) | (1 << (MariaDBParser.NOCYCLE - 507)) | (1 << (MariaDBParser.NOMAXVALUE - 507)) | (1 << (MariaDBParser.NOMINVALUE - 507)) | (1 << (MariaDBParser.NOWAIT - 507)) | (1 << (MariaDBParser.NODEGROUP - 507)) | (1 << (MariaDBParser.NONE - 507)) | (1 << (MariaDBParser.ODBC - 507)) | (1 << (MariaDBParser.OFFLINE - 507)) | (1 << (MariaDBParser.OFFSET - 507)) | (1 << (MariaDBParser.OF - 507)) | (1 << (MariaDBParser.OJ - 507)) | (1 << (MariaDBParser.OLD_PASSWORD - 507)) | (1 << (MariaDBParser.ONE - 507)) | (1 << (MariaDBParser.ONLINE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (MariaDBParser.ONLY - 539)) | (1 << (MariaDBParser.OPEN - 539)) | (1 << (MariaDBParser.OPTIMIZER_COSTS - 539)) | (1 << (MariaDBParser.OPTIONS - 539)) | (1 << (MariaDBParser.OWNER - 539)) | (1 << (MariaDBParser.PACK_KEYS - 539)) | (1 << (MariaDBParser.PAGE - 539)) | (1 << (MariaDBParser.PARSER - 539)) | (1 << (MariaDBParser.PARTIAL - 539)) | (1 << (MariaDBParser.PARTITIONING - 539)) | (1 << (MariaDBParser.PARTITIONS - 539)) | (1 << (MariaDBParser.PASSWORD - 539)) | (1 << (MariaDBParser.PASSWORD_LOCK_TIME - 539)) | (1 << (MariaDBParser.PHASE - 539)) | (1 << (MariaDBParser.PLUGIN - 539)) | (1 << (MariaDBParser.PLUGIN_DIR - 539)) | (1 << (MariaDBParser.PLUGINS - 539)) | (1 << (MariaDBParser.PORT - 539)) | (1 << (MariaDBParser.PRECEDES - 539)) | (1 << (MariaDBParser.PREPARE - 539)) | (1 << (MariaDBParser.PRESERVE - 539)) | (1 << (MariaDBParser.PREV - 539)) | (1 << (MariaDBParser.PROCESSLIST - 539)) | (1 << (MariaDBParser.PROFILE - 539)) | (1 << (MariaDBParser.PROFILES - 539)) | (1 << (MariaDBParser.PROXY - 539)) | (1 << (MariaDBParser.QUERY - 539)) | (1 << (MariaDBParser.QUERY_RESPONSE_TIME - 539)) | (1 << (MariaDBParser.QUICK - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (MariaDBParser.REBUILD - 571)) | (1 << (MariaDBParser.RECOVER - 571)) | (1 << (MariaDBParser.RECURSIVE - 571)) | (1 << (MariaDBParser.REDO_BUFFER_SIZE - 571)) | (1 << (MariaDBParser.REDUNDANT - 571)) | (1 << (MariaDBParser.RELAY - 571)) | (1 << (MariaDBParser.RELAY_LOG_FILE - 571)) | (1 << (MariaDBParser.RELAY_LOG_POS - 571)) | (1 << (MariaDBParser.RELAYLOG - 571)) | (1 << (MariaDBParser.REMOVE - 571)) | (1 << (MariaDBParser.REORGANIZE - 571)) | (1 << (MariaDBParser.REPAIR - 571)) | (1 << (MariaDBParser.REPLICATE_DO_DB - 571)) | (1 << (MariaDBParser.REPLICATE_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_REWRITE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATION - 571)) | (1 << (MariaDBParser.RESET - 571)) | (1 << (MariaDBParser.RESTART - 571)) | (1 << (MariaDBParser.RESUME - 571)) | (1 << (MariaDBParser.RETURNED_SQLSTATE - 571)) | (1 << (MariaDBParser.RETURNS - 571)) | (1 << (MariaDBParser.REUSE - 571)) | (1 << (MariaDBParser.ROLE - 571)) | (1 << (MariaDBParser.ROLLBACK - 571)) | (1 << (MariaDBParser.ROLLUP - 571)) | (1 << (MariaDBParser.ROTATE - 571)) | (1 << (MariaDBParser.ROW - 571)))) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & ((1 << (MariaDBParser.ROWS - 603)) | (1 << (MariaDBParser.ROW_FORMAT - 603)) | (1 << (MariaDBParser.RTREE - 603)) | (1 << (MariaDBParser.SAVEPOINT - 603)) | (1 << (MariaDBParser.SCHEDULE - 603)) | (1 << (MariaDBParser.SECURITY - 603)) | (1 << (MariaDBParser.SEQUENCE - 603)) | (1 << (MariaDBParser.SERVER - 603)) | (1 << (MariaDBParser.SESSION - 603)) | (1 << (MariaDBParser.SHARE - 603)) | (1 << (MariaDBParser.SHARED - 603)) | (1 << (MariaDBParser.SIGNED - 603)) | (1 << (MariaDBParser.SIMPLE - 603)) | (1 << (MariaDBParser.SLAVE - 603)) | (1 << (MariaDBParser.SLAVES - 603)) | (1 << (MariaDBParser.SLOW - 603)) | (1 << (MariaDBParser.SNAPSHOT - 603)) | (1 << (MariaDBParser.SOCKET - 603)) | (1 << (MariaDBParser.SOME - 603)) | (1 << (MariaDBParser.SONAME - 603)) | (1 << (MariaDBParser.SOUNDS - 603)) | (1 << (MariaDBParser.SOURCE - 603)) | (1 << (MariaDBParser.SQL_AFTER_GTIDS - 603)) | (1 << (MariaDBParser.SQL_AFTER_MTS_GAPS - 603)) | (1 << (MariaDBParser.SQL_BEFORE_GTIDS - 603)) | (1 << (MariaDBParser.SQL_BUFFER_RESULT - 603)) | (1 << (MariaDBParser.SQL_CACHE - 603)) | (1 << (MariaDBParser.SQL_NO_CACHE - 603)) | (1 << (MariaDBParser.SQL_THREAD - 603)) | (1 << (MariaDBParser.START - 603)) | (1 << (MariaDBParser.STARTS - 603)) | (1 << (MariaDBParser.STATS_AUTO_RECALC - 603)))) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & ((1 << (MariaDBParser.STATS_PERSISTENT - 635)) | (1 << (MariaDBParser.STATS_SAMPLE_PAGES - 635)) | (1 << (MariaDBParser.STATUS - 635)) | (1 << (MariaDBParser.STOP - 635)) | (1 << (MariaDBParser.STORAGE - 635)) | (1 << (MariaDBParser.STRING - 635)) | (1 << (MariaDBParser.SUBCLASS_ORIGIN - 635)) | (1 << (MariaDBParser.SUBJECT - 635)) | (1 << (MariaDBParser.SUBPARTITION - 635)) | (1 << (MariaDBParser.SUBPARTITIONS - 635)) | (1 << (MariaDBParser.SUSPEND - 635)) | (1 << (MariaDBParser.SWAPS - 635)) | (1 << (MariaDBParser.SWITCHES - 635)) | (1 << (MariaDBParser.TABLE_NAME - 635)) | (1 << (MariaDBParser.TABLESPACE - 635)) | (1 << (MariaDBParser.TABLE_TYPE - 635)) | (1 << (MariaDBParser.TEMPORARY - 635)) | (1 << (MariaDBParser.TEMPTABLE - 635)) | (1 << (MariaDBParser.THAN - 635)) | (1 << (MariaDBParser.TRADITIONAL - 635)) | (1 << (MariaDBParser.TRANSACTION - 635)) | (1 << (MariaDBParser.TRANSACTIONAL - 635)) | (1 << (MariaDBParser.TRIGGERS - 635)) | (1 << (MariaDBParser.TRUNCATE - 635)) | (1 << (MariaDBParser.TYPES - 635)) | (1 << (MariaDBParser.UNBOUNDED - 635)) | (1 << (MariaDBParser.UNDEFINED - 635)) | (1 << (MariaDBParser.UNDOFILE - 635)) | (1 << (MariaDBParser.UNDO_BUFFER_SIZE - 635)) | (1 << (MariaDBParser.UNINSTALL - 635)) | (1 << (MariaDBParser.UNKNOWN - 635)))) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & ((1 << (MariaDBParser.UNTIL - 667)) | (1 << (MariaDBParser.UPGRADE - 667)) | (1 << (MariaDBParser.USER - 667)) | (1 << (MariaDBParser.USE_FRM - 667)) | (1 << (MariaDBParser.USER_RESOURCES - 667)) | (1 << (MariaDBParser.VALIDATION - 667)) | (1 << (MariaDBParser.VALUE - 667)) | (1 << (MariaDBParser.VARIABLES - 667)) | (1 << (MariaDBParser.VIEW - 667)) | (1 << (MariaDBParser.VIRTUAL - 667)) | (1 << (MariaDBParser.VISIBLE - 667)) | (1 << (MariaDBParser.WAIT - 667)) | (1 << (MariaDBParser.WARNINGS - 667)) | (1 << (MariaDBParser.WITHOUT - 667)) | (1 << (MariaDBParser.WORK - 667)) | (1 << (MariaDBParser.WRAPPER - 667)) | (1 << (MariaDBParser.WSREP_MEMBERSHIP - 667)) | (1 << (MariaDBParser.WSREP_STATUS - 667)) | (1 << (MariaDBParser.X509 - 667)) | (1 << (MariaDBParser.XA - 667)) | (1 << (MariaDBParser.XML - 667)) | (1 << (MariaDBParser.EUR - 667)) | (1 << (MariaDBParser.USA - 667)) | (1 << (MariaDBParser.JIS - 667)) | (1 << (MariaDBParser.ISO - 667)) | (1 << (MariaDBParser.INTERNAL - 667)) | (1 << (MariaDBParser.QUARTER - 667)) | (1 << (MariaDBParser.MONTH - 667)) | (1 << (MariaDBParser.DAY - 667)) | (1 << (MariaDBParser.HOUR - 667)))) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & ((1 << (MariaDBParser.MINUTE - 699)) | (1 << (MariaDBParser.WEEK - 699)) | (1 << (MariaDBParser.SECOND - 699)) | (1 << (MariaDBParser.MICROSECOND - 699)) | (1 << (MariaDBParser.USER_STATISTICS - 699)) | (1 << (MariaDBParser.CLIENT_STATISTICS - 699)) | (1 << (MariaDBParser.INDEX_STATISTICS - 699)) | (1 << (MariaDBParser.TABLE_STATISTICS - 699)) | (1 << (MariaDBParser.ADMIN - 699)) | (1 << (MariaDBParser.AUDIT_ADMIN - 699)) | (1 << (MariaDBParser.BACKUP_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ENCRYPTION_ADMIN - 699)) | (1 << (MariaDBParser.CLONE_ADMIN - 699)) | (1 << (MariaDBParser.CONNECTION_ADMIN - 699)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ADMIN - 699)) | (1 << (MariaDBParser.EXECUTE - 699)) | (1 << (MariaDBParser.FILE - 699)) | (1 << (MariaDBParser.FIREWALL_ADMIN - 699)) | (1 << (MariaDBParser.FIREWALL_USER - 699)) | (1 << (MariaDBParser.GROUP_REPLICATION_ADMIN - 699)) | (1 << (MariaDBParser.INNODB_REDO_LOG_ARCHIVE - 699)) | (1 << (MariaDBParser.INVOKE - 699)) | (1 << (MariaDBParser.LAMBDA - 699)) | (1 << (MariaDBParser.NDB_STORED_USER - 699)) | (1 << (MariaDBParser.PASSWORDLESS_USER_ADMIN - 699)))) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & ((1 << (MariaDBParser.PERSIST_RO_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.PRIVILEGES - 731)) | (1 << (MariaDBParser.PROCESS - 731)) | (1 << (MariaDBParser.RELOAD - 731)) | (1 << (MariaDBParser.REPLICATION_APPLIER - 731)) | (1 << (MariaDBParser.REPLICATION_SLAVE_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_USER - 731)) | (1 << (MariaDBParser.ROLE_ADMIN - 731)) | (1 << (MariaDBParser.ROUTINE - 731)) | (1 << (MariaDBParser.S3 - 731)) | (1 << (MariaDBParser.SESSION_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.SET_USER_ID - 731)) | (1 << (MariaDBParser.SHOW_ROUTINE - 731)) | (1 << (MariaDBParser.SHUTDOWN - 731)) | (1 << (MariaDBParser.SUPER - 731)) | (1 << (MariaDBParser.SYSTEM_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.TABLES - 731)) | (1 << (MariaDBParser.TABLE_ENCRYPTION_ADMIN - 731)) | (1 << (MariaDBParser.VERSION_TOKEN_ADMIN - 731)) | (1 << (MariaDBParser.XA_RECOVER_ADMIN - 731)) | (1 << (MariaDBParser.ARMSCII8 - 731)) | (1 << (MariaDBParser.ASCII - 731)) | (1 << (MariaDBParser.BIG5 - 731)) | (1 << (MariaDBParser.CP1250 - 731)) | (1 << (MariaDBParser.CP1251 - 731)) | (1 << (MariaDBParser.CP1256 - 731)) | (1 << (MariaDBParser.CP1257 - 731)) | (1 << (MariaDBParser.CP850 - 731)) | (1 << (MariaDBParser.CP852 - 731)) | (1 << (MariaDBParser.CP866 - 731)))) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & ((1 << (MariaDBParser.CP932 - 763)) | (1 << (MariaDBParser.DEC8 - 763)) | (1 << (MariaDBParser.EUCJPMS - 763)) | (1 << (MariaDBParser.EUCKR - 763)) | (1 << (MariaDBParser.GB18030 - 763)) | (1 << (MariaDBParser.GB2312 - 763)) | (1 << (MariaDBParser.GBK - 763)) | (1 << (MariaDBParser.GEOSTD8 - 763)) | (1 << (MariaDBParser.GREEK - 763)) | (1 << (MariaDBParser.HEBREW - 763)) | (1 << (MariaDBParser.HP8 - 763)) | (1 << (MariaDBParser.KEYBCS2 - 763)) | (1 << (MariaDBParser.KOI8R - 763)) | (1 << (MariaDBParser.KOI8U - 763)) | (1 << (MariaDBParser.LATIN1 - 763)) | (1 << (MariaDBParser.LATIN2 - 763)) | (1 << (MariaDBParser.LATIN5 - 763)) | (1 << (MariaDBParser.LATIN7 - 763)) | (1 << (MariaDBParser.MACCE - 763)) | (1 << (MariaDBParser.MACROMAN - 763)) | (1 << (MariaDBParser.SJIS - 763)) | (1 << (MariaDBParser.SWE7 - 763)) | (1 << (MariaDBParser.TIS620 - 763)) | (1 << (MariaDBParser.UCS2 - 763)) | (1 << (MariaDBParser.UJIS - 763)) | (1 << (MariaDBParser.UTF16 - 763)) | (1 << (MariaDBParser.UTF16LE - 763)) | (1 << (MariaDBParser.UTF32 - 763)) | (1 << (MariaDBParser.UTF8 - 763)) | (1 << (MariaDBParser.UTF8MB3 - 763)) | (1 << (MariaDBParser.UTF8MB4 - 763)) | (1 << (MariaDBParser.ARCHIVE - 763)))) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & ((1 << (MariaDBParser.BLACKHOLE - 795)) | (1 << (MariaDBParser.CSV - 795)) | (1 << (MariaDBParser.FEDERATED - 795)) | (1 << (MariaDBParser.INNODB - 795)) | (1 << (MariaDBParser.MEMORY - 795)) | (1 << (MariaDBParser.MRG_MYISAM - 795)) | (1 << (MariaDBParser.MYISAM - 795)) | (1 << (MariaDBParser.NDB - 795)) | (1 << (MariaDBParser.NDBCLUSTER - 795)) | (1 << (MariaDBParser.PERFORMANCE_SCHEMA - 795)) | (1 << (MariaDBParser.TOKUDB - 795)) | (1 << (MariaDBParser.REPEATABLE - 795)) | (1 << (MariaDBParser.COMMITTED - 795)) | (1 << (MariaDBParser.UNCOMMITTED - 795)) | (1 << (MariaDBParser.SERIALIZABLE - 795)) | (1 << (MariaDBParser.GEOMETRYCOLLECTION - 795)) | (1 << (MariaDBParser.LINESTRING - 795)) | (1 << (MariaDBParser.MULTILINESTRING - 795)) | (1 << (MariaDBParser.MULTIPOINT - 795)) | (1 << (MariaDBParser.MULTIPOLYGON - 795)) | (1 << (MariaDBParser.POINT - 795)) | (1 << (MariaDBParser.POLYGON - 795)) | (1 << (MariaDBParser.ABS - 795)) | (1 << (MariaDBParser.ACOS - 795)) | (1 << (MariaDBParser.ADDDATE - 795)) | (1 << (MariaDBParser.ADDTIME - 795)) | (1 << (MariaDBParser.AES_DECRYPT - 795)) | (1 << (MariaDBParser.AES_ENCRYPT - 795)) | (1 << (MariaDBParser.AREA - 795)) | (1 << (MariaDBParser.ASBINARY - 795)))) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & ((1 << (MariaDBParser.ASIN - 827)) | (1 << (MariaDBParser.ASTEXT - 827)) | (1 << (MariaDBParser.ASWKB - 827)) | (1 << (MariaDBParser.ASWKT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DECRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DERIVE - 827)) | (1 << (MariaDBParser.ASYMMETRIC_ENCRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_SIGN - 827)) | (1 << (MariaDBParser.ASYMMETRIC_VERIFY - 827)) | (1 << (MariaDBParser.ATAN - 827)) | (1 << (MariaDBParser.ATAN2 - 827)) | (1 << (MariaDBParser.BENCHMARK - 827)) | (1 << (MariaDBParser.BIN - 827)) | (1 << (MariaDBParser.BIT_COUNT - 827)) | (1 << (MariaDBParser.BIT_LENGTH - 827)) | (1 << (MariaDBParser.BUFFER - 827)) | (1 << (MariaDBParser.CATALOG_NAME - 827)) | (1 << (MariaDBParser.CEIL - 827)) | (1 << (MariaDBParser.CEILING - 827)) | (1 << (MariaDBParser.CENTROID - 827)) | (1 << (MariaDBParser.CHARACTER_LENGTH - 827)) | (1 << (MariaDBParser.CHARSET - 827)) | (1 << (MariaDBParser.CHAR_LENGTH - 827)) | (1 << (MariaDBParser.COERCIBILITY - 827)) | (1 << (MariaDBParser.COLLATION - 827)) | (1 << (MariaDBParser.COMPRESS - 827)) | (1 << (MariaDBParser.CONCAT - 827)) | (1 << (MariaDBParser.CONCAT_WS - 827)) | (1 << (MariaDBParser.CONNECTION_ID - 827)) | (1 << (MariaDBParser.CONV - 827)) | (1 << (MariaDBParser.CONVERT_TZ - 827)) | (1 << (MariaDBParser.COS - 827)))) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & ((1 << (MariaDBParser.COT - 859)) | (1 << (MariaDBParser.CRC32 - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY - 859)) | (1 << (MariaDBParser.CREATE_DH_PARAMETERS - 859)) | (1 << (MariaDBParser.CREATE_DIGEST - 859)) | (1 << (MariaDBParser.CROSSES - 859)) | (1 << (MariaDBParser.DATEDIFF - 859)) | (1 << (MariaDBParser.DATE_FORMAT - 859)) | (1 << (MariaDBParser.DAYNAME - 859)) | (1 << (MariaDBParser.DAYOFMONTH - 859)) | (1 << (MariaDBParser.DAYOFWEEK - 859)) | (1 << (MariaDBParser.DAYOFYEAR - 859)) | (1 << (MariaDBParser.DECODE - 859)) | (1 << (MariaDBParser.DEGREES - 859)) | (1 << (MariaDBParser.DES_DECRYPT - 859)) | (1 << (MariaDBParser.DES_ENCRYPT - 859)) | (1 << (MariaDBParser.DIMENSION - 859)) | (1 << (MariaDBParser.DISJOINT - 859)) | (1 << (MariaDBParser.ELT - 859)) | (1 << (MariaDBParser.ENCODE - 859)) | (1 << (MariaDBParser.ENCRYPT - 859)) | (1 << (MariaDBParser.ENDPOINT - 859)) | (1 << (MariaDBParser.ENGINE_ATTRIBUTE - 859)) | (1 << (MariaDBParser.ENVELOPE - 859)) | (1 << (MariaDBParser.EQUALS - 859)) | (1 << (MariaDBParser.EXP - 859)) | (1 << (MariaDBParser.EXPORT_SET - 859)) | (1 << (MariaDBParser.EXTERIORRING - 859)) | (1 << (MariaDBParser.EXTRACTVALUE - 859)) | (1 << (MariaDBParser.FIELD - 859)) | (1 << (MariaDBParser.FIND_IN_SET - 859)))) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & ((1 << (MariaDBParser.FLOOR - 891)) | (1 << (MariaDBParser.FORMAT - 891)) | (1 << (MariaDBParser.FOUND_ROWS - 891)) | (1 << (MariaDBParser.FROM_BASE64 - 891)) | (1 << (MariaDBParser.FROM_DAYS - 891)) | (1 << (MariaDBParser.FROM_UNIXTIME - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYN - 891)) | (1 << (MariaDBParser.GEOMETRYTYPE - 891)) | (1 << (MariaDBParser.GEOMFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMFROMWKB - 891)) | (1 << (MariaDBParser.GET_FORMAT - 891)) | (1 << (MariaDBParser.GET_LOCK - 891)) | (1 << (MariaDBParser.GLENGTH - 891)) | (1 << (MariaDBParser.GREATEST - 891)) | (1 << (MariaDBParser.GTID_SUBSET - 891)) | (1 << (MariaDBParser.GTID_SUBTRACT - 891)) | (1 << (MariaDBParser.HEX - 891)) | (1 << (MariaDBParser.IFNULL - 891)) | (1 << (MariaDBParser.INET6_ATON - 891)) | (1 << (MariaDBParser.INET6_NTOA - 891)) | (1 << (MariaDBParser.INET_ATON - 891)) | (1 << (MariaDBParser.INET_NTOA - 891)) | (1 << (MariaDBParser.INSTR - 891)) | (1 << (MariaDBParser.INTERIORRINGN - 891)) | (1 << (MariaDBParser.INTERSECTS - 891)) | (1 << (MariaDBParser.ISCLOSED - 891)))) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & ((1 << (MariaDBParser.ISEMPTY - 923)) | (1 << (MariaDBParser.ISNULL - 923)) | (1 << (MariaDBParser.ISSIMPLE - 923)) | (1 << (MariaDBParser.IS_FREE_LOCK - 923)) | (1 << (MariaDBParser.IS_IPV4 - 923)) | (1 << (MariaDBParser.IS_IPV4_COMPAT - 923)) | (1 << (MariaDBParser.IS_IPV4_MAPPED - 923)) | (1 << (MariaDBParser.IS_IPV6 - 923)) | (1 << (MariaDBParser.IS_USED_LOCK - 923)) | (1 << (MariaDBParser.LAST_INSERT_ID - 923)) | (1 << (MariaDBParser.LCASE - 923)) | (1 << (MariaDBParser.LEAST - 923)) | (1 << (MariaDBParser.LENGTH - 923)) | (1 << (MariaDBParser.LINEFROMTEXT - 923)) | (1 << (MariaDBParser.LINEFROMWKB - 923)) | (1 << (MariaDBParser.LINESTRINGFROMTEXT - 923)) | (1 << (MariaDBParser.LINESTRINGFROMWKB - 923)) | (1 << (MariaDBParser.LN - 923)) | (1 << (MariaDBParser.LOAD_FILE - 923)) | (1 << (MariaDBParser.LOCATE - 923)) | (1 << (MariaDBParser.LOG - 923)) | (1 << (MariaDBParser.LOG10 - 923)) | (1 << (MariaDBParser.LOG2 - 923)) | (1 << (MariaDBParser.LOWER - 923)) | (1 << (MariaDBParser.LPAD - 923)) | (1 << (MariaDBParser.LTRIM - 923)) | (1 << (MariaDBParser.MAKEDATE - 923)) | (1 << (MariaDBParser.MAKETIME - 923)) | (1 << (MariaDBParser.MAKE_SET - 923)) | (1 << (MariaDBParser.MASTER_POS_WAIT - 923)) | (1 << (MariaDBParser.MBRCONTAINS - 923)) | (1 << (MariaDBParser.MBRDISJOINT - 923)))) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & ((1 << (MariaDBParser.MBREQUAL - 955)) | (1 << (MariaDBParser.MBRINTERSECTS - 955)) | (1 << (MariaDBParser.MBROVERLAPS - 955)) | (1 << (MariaDBParser.MBRTOUCHES - 955)) | (1 << (MariaDBParser.MBRWITHIN - 955)) | (1 << (MariaDBParser.MD5 - 955)) | (1 << (MariaDBParser.MLINEFROMTEXT - 955)) | (1 << (MariaDBParser.MLINEFROMWKB - 955)) | (1 << (MariaDBParser.MONTHNAME - 955)) | (1 << (MariaDBParser.MPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MPOLYFROMTEXT - 955)) | (1 << (MariaDBParser.MPOLYFROMWKB - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMTEXT - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMWKB - 955)) | (1 << (MariaDBParser.NAME_CONST - 955)) | (1 << (MariaDBParser.NULLIF - 955)) | (1 << (MariaDBParser.NUMGEOMETRIES - 955)) | (1 << (MariaDBParser.NUMINTERIORRINGS - 955)) | (1 << (MariaDBParser.NUMPOINTS - 955)) | (1 << (MariaDBParser.OCT - 955)) | (1 << (MariaDBParser.OCTET_LENGTH - 955)) | (1 << (MariaDBParser.ORD - 955)) | (1 << (MariaDBParser.OVERLAPS - 955)) | (1 << (MariaDBParser.PERIOD_ADD - 955)) | (1 << (MariaDBParser.PERIOD_DIFF - 955)) | (1 << (MariaDBParser.PI - 955)) | (1 << (MariaDBParser.POINTFROMTEXT - 955)))) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & ((1 << (MariaDBParser.POINTFROMWKB - 987)) | (1 << (MariaDBParser.POINTN - 987)) | (1 << (MariaDBParser.POLYFROMTEXT - 987)) | (1 << (MariaDBParser.POLYFROMWKB - 987)) | (1 << (MariaDBParser.POLYGONFROMTEXT - 987)) | (1 << (MariaDBParser.POLYGONFROMWKB - 987)) | (1 << (MariaDBParser.POW - 987)) | (1 << (MariaDBParser.POWER - 987)) | (1 << (MariaDBParser.QUOTE - 987)) | (1 << (MariaDBParser.RADIANS - 987)) | (1 << (MariaDBParser.RAND - 987)) | (1 << (MariaDBParser.RANDOM_BYTES - 987)) | (1 << (MariaDBParser.RELEASE_LOCK - 987)) | (1 << (MariaDBParser.REVERSE - 987)) | (1 << (MariaDBParser.ROUND - 987)) | (1 << (MariaDBParser.ROW_COUNT - 987)) | (1 << (MariaDBParser.RPAD - 987)) | (1 << (MariaDBParser.RTRIM - 987)) | (1 << (MariaDBParser.SEC_TO_TIME - 987)) | (1 << (MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE - 987)) | (1 << (MariaDBParser.SESSION_USER - 987)) | (1 << (MariaDBParser.SHA - 987)) | (1 << (MariaDBParser.SHA1 - 987)) | (1 << (MariaDBParser.SHA2 - 987)) | (1 << (MariaDBParser.SCHEMA_NAME - 987)) | (1 << (MariaDBParser.SIGN - 987)) | (1 << (MariaDBParser.SIN - 987)) | (1 << (MariaDBParser.SLEEP - 987)) | (1 << (MariaDBParser.SOUNDEX - 987)) | (1 << (MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS - 987)) | (1 << (MariaDBParser.SQRT - 987)) | (1 << (MariaDBParser.SRID - 987)))) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & ((1 << (MariaDBParser.STARTPOINT - 1019)) | (1 << (MariaDBParser.STRCMP - 1019)) | (1 << (MariaDBParser.STR_TO_DATE - 1019)) | (1 << (MariaDBParser.ST_AREA - 1019)) | (1 << (MariaDBParser.ST_ASBINARY - 1019)) | (1 << (MariaDBParser.ST_ASTEXT - 1019)) | (1 << (MariaDBParser.ST_ASWKB - 1019)) | (1 << (MariaDBParser.ST_ASWKT - 1019)) | (1 << (MariaDBParser.ST_BUFFER - 1019)) | (1 << (MariaDBParser.ST_CENTROID - 1019)) | (1 << (MariaDBParser.ST_CONTAINS - 1019)) | (1 << (MariaDBParser.ST_CROSSES - 1019)) | (1 << (MariaDBParser.ST_DIFFERENCE - 1019)) | (1 << (MariaDBParser.ST_DIMENSION - 1019)) | (1 << (MariaDBParser.ST_DISJOINT - 1019)) | (1 << (MariaDBParser.ST_DISTANCE - 1019)) | (1 << (MariaDBParser.ST_ENDPOINT - 1019)) | (1 << (MariaDBParser.ST_ENVELOPE - 1019)) | (1 << (MariaDBParser.ST_EQUALS - 1019)) | (1 << (MariaDBParser.ST_EXTERIORRING - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYN - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYTYPE - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMWKB - 1019)) | (1 << (MariaDBParser.ST_INTERIORRINGN - 1019)))) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & ((1 << (MariaDBParser.ST_INTERSECTION - 1051)) | (1 << (MariaDBParser.ST_INTERSECTS - 1051)) | (1 << (MariaDBParser.ST_ISCLOSED - 1051)) | (1 << (MariaDBParser.ST_ISEMPTY - 1051)) | (1 << (MariaDBParser.ST_ISSIMPLE - 1051)) | (1 << (MariaDBParser.ST_LINEFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINEFROMWKB - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMWKB - 1051)) | (1 << (MariaDBParser.ST_NUMGEOMETRIES - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRING - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRINGS - 1051)) | (1 << (MariaDBParser.ST_NUMPOINTS - 1051)) | (1 << (MariaDBParser.ST_OVERLAPS - 1051)) | (1 << (MariaDBParser.ST_POINTFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POINTFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POINTN - 1051)) | (1 << (MariaDBParser.ST_POLYFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMWKB - 1051)) | (1 << (MariaDBParser.ST_SRID - 1051)) | (1 << (MariaDBParser.ST_STARTPOINT - 1051)) | (1 << (MariaDBParser.ST_SYMDIFFERENCE - 1051)) | (1 << (MariaDBParser.ST_TOUCHES - 1051)) | (1 << (MariaDBParser.ST_UNION - 1051)) | (1 << (MariaDBParser.ST_WITHIN - 1051)) | (1 << (MariaDBParser.ST_X - 1051)) | (1 << (MariaDBParser.ST_Y - 1051)) | (1 << (MariaDBParser.SUBDATE - 1051)) | (1 << (MariaDBParser.SUBSTRING_INDEX - 1051)) | (1 << (MariaDBParser.SUBTIME - 1051)))) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & ((1 << (MariaDBParser.SYSTEM_USER - 1083)) | (1 << (MariaDBParser.TAN - 1083)) | (1 << (MariaDBParser.TIMEDIFF - 1083)) | (1 << (MariaDBParser.TIMESTAMPADD - 1083)) | (1 << (MariaDBParser.TIMESTAMPDIFF - 1083)) | (1 << (MariaDBParser.TIME_FORMAT - 1083)) | (1 << (MariaDBParser.TIME_TO_SEC - 1083)) | (1 << (MariaDBParser.TOUCHES - 1083)) | (1 << (MariaDBParser.TO_BASE64 - 1083)) | (1 << (MariaDBParser.TO_DAYS - 1083)) | (1 << (MariaDBParser.TO_SECONDS - 1083)) | (1 << (MariaDBParser.UCASE - 1083)) | (1 << (MariaDBParser.UNCOMPRESS - 1083)) | (1 << (MariaDBParser.UNCOMPRESSED_LENGTH - 1083)) | (1 << (MariaDBParser.UNHEX - 1083)) | (1 << (MariaDBParser.UNIX_TIMESTAMP - 1083)) | (1 << (MariaDBParser.UPDATEXML - 1083)) | (1 << (MariaDBParser.UPPER - 1083)) | (1 << (MariaDBParser.UUID - 1083)) | (1 << (MariaDBParser.UUID_SHORT - 1083)) | (1 << (MariaDBParser.VALIDATE_PASSWORD_STRENGTH - 1083)) | (1 << (MariaDBParser.VERSION - 1083)) | (1 << (MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1083)) | (1 << (MariaDBParser.WEEKDAY - 1083)) | (1 << (MariaDBParser.WEEKOFYEAR - 1083)) | (1 << (MariaDBParser.WEIGHT_STRING - 1083)) | (1 << (MariaDBParser.WITHIN - 1083)) | (1 << (MariaDBParser.YEARWEEK - 1083)) | (1 << (MariaDBParser.Y_FUNCTION - 1083)) | (1 << (MariaDBParser.X_FUNCTION - 1083)) | (1 << (MariaDBParser.VIA - 1083)) | (1 << (MariaDBParser.LASTVAL - 1083)))) !== 0) || ((((_la - 1115)) & ~0x1F) === 0 && ((1 << (_la - 1115)) & ((1 << (MariaDBParser.NEXTVAL - 1115)) | (1 << (MariaDBParser.SETVAL - 1115)) | (1 << (MariaDBParser.PREVIOUS - 1115)) | (1 << (MariaDBParser.PERSISTENT - 1115)) | (1 << (MariaDBParser.BINLOG_MONITOR - 1115)) | (1 << (MariaDBParser.BINLOG_REPLAY - 1115)) | (1 << (MariaDBParser.FEDERATED_ADMIN - 1115)) | (1 << (MariaDBParser.READ_ONLY_ADMIN - 1115)) | (1 << (MariaDBParser.REPLICA - 1115)) | (1 << (MariaDBParser.REPLICAS - 1115)) | (1 << (MariaDBParser.REPLICATION_MASTER_ADMIN - 1115)) | (1 << (MariaDBParser.MONITOR - 1115)) | (1 << (MariaDBParser.READ_ONLY - 1115)) | (1 << (MariaDBParser.REPLAY - 1115)) | (1 << (MariaDBParser.MOD - 1115)))) !== 0) || ((((_la - 1166)) & ~0x1F) === 0 && ((1 << (_la - 1166)) & ((1 << (MariaDBParser.CHARSET_REVERSE_QOUTE_STRING - 1166)) | (1 << (MariaDBParser.STRING_LITERAL - 1166)) | (1 << (MariaDBParser.ID - 1166)))) !== 0)) {
					{
					this.state = 2719;
					(_localctx as AlterByAddPrimaryKeyContext)._index = this.uid();
					}
				}

				this.state = 2723;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.USING) {
					{
					this.state = 2722;
					this.indexType();
					}
				}

				this.state = 2725;
				this.indexColumnNames();
				this.state = 2729;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.IGNORED || _la === MariaDBParser.NOT || _la === MariaDBParser.USING || _la === MariaDBParser.WITH || _la === MariaDBParser.CLUSTERING || _la === MariaDBParser.COMMENT || _la === MariaDBParser.INVISIBLE || _la === MariaDBParser.KEY_BLOCK_SIZE || _la === MariaDBParser.VISIBLE || _la === MariaDBParser.ENGINE_ATTRIBUTE || _la === MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					this.state = 2726;
					this.indexOption();
					}
					}
					this.state = 2731;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 6:
				_localctx = new AlterByAddUniqueKeyContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2732;
				this.match(MariaDBParser.ADD);
				this.state = 2737;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.CONSTRAINT) {
					{
					this.state = 2733;
					this.match(MariaDBParser.CONSTRAINT);
					this.state = 2735;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MariaDBParser.ATTRIBUTE) | (1 << MariaDBParser.BODY) | (1 << MariaDBParser.BUCKETS) | (1 << MariaDBParser.CONDITION))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (MariaDBParser.CURRENT - 36)) | (1 << (MariaDBParser.CURRENT_ROLE - 36)) | (1 << (MariaDBParser.CURRENT_USER - 36)) | (1 << (MariaDBParser.DATABASE - 36)) | (1 << (MariaDBParser.DEFAULT - 36)) | (1 << (MariaDBParser.DIAGNOSTICS - 36)) | (1 << (MariaDBParser.EMPTY - 36)) | (1 << (MariaDBParser.EXCEPT - 36)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (MariaDBParser.GROUP - 73)) | (1 << (MariaDBParser.IF - 73)) | (1 << (MariaDBParser.IGNORED - 73)) | (1 << (MariaDBParser.INSERT - 73)) | (1 << (MariaDBParser.LATERAL - 73)) | (1 << (MariaDBParser.LEFT - 73)) | (1 << (MariaDBParser.LOCKED - 73)))) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & ((1 << (MariaDBParser.MAXVALUE - 110)) | (1 << (MariaDBParser.MINVALUE - 110)) | (1 << (MariaDBParser.NUMBER - 110)) | (1 << (MariaDBParser.OPTIONAL - 110)) | (1 << (MariaDBParser.ORDER - 110)) | (1 << (MariaDBParser.PRIMARY - 110)) | (1 << (MariaDBParser.PACKAGE - 110)))) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (MariaDBParser.REPLACE - 142)) | (1 << (MariaDBParser.RIGHT - 142)) | (1 << (MariaDBParser.SCHEMA - 142)) | (1 << (MariaDBParser.SKIP_ - 142)) | (1 << (MariaDBParser.STACKED - 142)) | (1 << (MariaDBParser.STATEMENT - 142)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MariaDBParser.DATE - 217)) | (1 << (MariaDBParser.TIME - 217)) | (1 << (MariaDBParser.TIMESTAMP - 217)) | (1 << (MariaDBParser.DATETIME - 217)) | (1 << (MariaDBParser.YEAR - 217)) | (1 << (MariaDBParser.BINARY - 217)) | (1 << (MariaDBParser.TEXT - 217)) | (1 << (MariaDBParser.ENUM - 217)) | (1 << (MariaDBParser.SERIAL - 217)))) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & ((1 << (MariaDBParser.JSON_ARRAY - 251)) | (1 << (MariaDBParser.JSON_ARRAYAGG - 251)) | (1 << (MariaDBParser.JSON_ARRAY_APPEND - 251)) | (1 << (MariaDBParser.JSON_ARRAY_INSERT - 251)) | (1 << (MariaDBParser.JSON_CONTAINS - 251)) | (1 << (MariaDBParser.JSON_CONTAINS_PATH - 251)) | (1 << (MariaDBParser.JSON_DEPTH - 251)) | (1 << (MariaDBParser.JSON_EXTRACT - 251)) | (1 << (MariaDBParser.JSON_INSERT - 251)) | (1 << (MariaDBParser.JSON_KEYS - 251)) | (1 << (MariaDBParser.JSON_LENGTH - 251)) | (1 << (MariaDBParser.JSON_MERGE - 251)) | (1 << (MariaDBParser.JSON_MERGE_PATCH - 251)) | (1 << (MariaDBParser.JSON_MERGE_PRESERVE - 251)) | (1 << (MariaDBParser.JSON_OBJECT - 251)) | (1 << (MariaDBParser.JSON_OBJECTAGG - 251)) | (1 << (MariaDBParser.JSON_OVERLAPS - 251)) | (1 << (MariaDBParser.JSON_PRETTY - 251)) | (1 << (MariaDBParser.JSON_QUOTE - 251)) | (1 << (MariaDBParser.JSON_REMOVE - 251)) | (1 << (MariaDBParser.JSON_REPLACE - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALID - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT - 251)) | (1 << (MariaDBParser.JSON_SEARCH - 251)) | (1 << (MariaDBParser.JSON_SET - 251)) | (1 << (MariaDBParser.JSON_STORAGE_FREE - 251)) | (1 << (MariaDBParser.JSON_STORAGE_SIZE - 251)) | (1 << (MariaDBParser.JSON_TABLE - 251)) | (1 << (MariaDBParser.JSON_TYPE - 251)) | (1 << (MariaDBParser.JSON_UNQUOTE - 251)) | (1 << (MariaDBParser.JSON_VALID - 251)) | (1 << (MariaDBParser.JSON_VALUE - 251)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (MariaDBParser.NESTED - 283)) | (1 << (MariaDBParser.ORDINALITY - 283)) | (1 << (MariaDBParser.PATH - 283)) | (1 << (MariaDBParser.AVG - 283)) | (1 << (MariaDBParser.BIT_AND - 283)) | (1 << (MariaDBParser.BIT_OR - 283)) | (1 << (MariaDBParser.BIT_XOR - 283)) | (1 << (MariaDBParser.COUNT - 283)) | (1 << (MariaDBParser.CUME_DIST - 283)) | (1 << (MariaDBParser.DENSE_RANK - 283)) | (1 << (MariaDBParser.FIRST_VALUE - 283)) | (1 << (MariaDBParser.GROUP_CONCAT - 283)) | (1 << (MariaDBParser.LAG - 283)) | (1 << (MariaDBParser.LAST_VALUE - 283)) | (1 << (MariaDBParser.LEAD - 283)) | (1 << (MariaDBParser.MAX - 283)) | (1 << (MariaDBParser.MIN - 283)) | (1 << (MariaDBParser.NTILE - 283)) | (1 << (MariaDBParser.NTH_VALUE - 283)) | (1 << (MariaDBParser.PERCENT_RANK - 283)) | (1 << (MariaDBParser.RANK - 283)) | (1 << (MariaDBParser.ROW_NUMBER - 283)) | (1 << (MariaDBParser.STD - 283)) | (1 << (MariaDBParser.STDDEV - 283)) | (1 << (MariaDBParser.STDDEV_POP - 283)) | (1 << (MariaDBParser.STDDEV_SAMP - 283)) | (1 << (MariaDBParser.SUM - 283)) | (1 << (MariaDBParser.VAR_POP - 283)) | (1 << (MariaDBParser.VAR_SAMP - 283)) | (1 << (MariaDBParser.VARIANCE - 283)) | (1 << (MariaDBParser.CURRENT_DATE - 283)) | (1 << (MariaDBParser.CURRENT_TIME - 283)))) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & ((1 << (MariaDBParser.CURRENT_TIMESTAMP - 315)) | (1 << (MariaDBParser.LOCALTIME - 315)) | (1 << (MariaDBParser.CURDATE - 315)) | (1 << (MariaDBParser.CURTIME - 315)) | (1 << (MariaDBParser.DATE_ADD - 315)) | (1 << (MariaDBParser.DATE_SUB - 315)) | (1 << (MariaDBParser.LOCALTIMESTAMP - 315)) | (1 << (MariaDBParser.NOW - 315)) | (1 << (MariaDBParser.POSITION - 315)) | (1 << (MariaDBParser.SUBSTR - 315)) | (1 << (MariaDBParser.SUBSTRING - 315)) | (1 << (MariaDBParser.SYSDATE - 315)) | (1 << (MariaDBParser.TRIM - 315)) | (1 << (MariaDBParser.UTC_DATE - 315)) | (1 << (MariaDBParser.UTC_TIME - 315)) | (1 << (MariaDBParser.UTC_TIMESTAMP - 315)) | (1 << (MariaDBParser.ACCOUNT - 315)) | (1 << (MariaDBParser.ACTION - 315)) | (1 << (MariaDBParser.AFTER - 315)) | (1 << (MariaDBParser.AGGREGATE - 315)) | (1 << (MariaDBParser.ALGORITHM - 315)) | (1 << (MariaDBParser.ANY - 315)) | (1 << (MariaDBParser.AT - 315)) | (1 << (MariaDBParser.AUTHORS - 315)) | (1 << (MariaDBParser.AUTOCOMMIT - 315)) | (1 << (MariaDBParser.AUTOEXTEND_SIZE - 315)) | (1 << (MariaDBParser.AUTO_INCREMENT - 315)) | (1 << (MariaDBParser.AVG_ROW_LENGTH - 315)) | (1 << (MariaDBParser.BEGIN - 315)) | (1 << (MariaDBParser.BINLOG - 315)) | (1 << (MariaDBParser.BIT - 315)))) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & ((1 << (MariaDBParser.BLOCK - 347)) | (1 << (MariaDBParser.BOOL - 347)) | (1 << (MariaDBParser.BOOLEAN - 347)) | (1 << (MariaDBParser.BTREE - 347)) | (1 << (MariaDBParser.CACHE - 347)) | (1 << (MariaDBParser.CASCADED - 347)) | (1 << (MariaDBParser.CHAIN - 347)) | (1 << (MariaDBParser.CHANGED - 347)) | (1 << (MariaDBParser.CHANNEL - 347)) | (1 << (MariaDBParser.CHECKSUM - 347)) | (1 << (MariaDBParser.PAGE_CHECKSUM - 347)) | (1 << (MariaDBParser.CIPHER - 347)) | (1 << (MariaDBParser.CLASS_ORIGIN - 347)) | (1 << (MariaDBParser.CLIENT - 347)) | (1 << (MariaDBParser.CLOSE - 347)) | (1 << (MariaDBParser.CLUSTERING - 347)) | (1 << (MariaDBParser.COALESCE - 347)) | (1 << (MariaDBParser.CODE - 347)) | (1 << (MariaDBParser.COLUMNS - 347)) | (1 << (MariaDBParser.COLUMN_FORMAT - 347)) | (1 << (MariaDBParser.COLUMN_NAME - 347)) | (1 << (MariaDBParser.COMMENT - 347)) | (1 << (MariaDBParser.COMMIT - 347)) | (1 << (MariaDBParser.COMPACT - 347)) | (1 << (MariaDBParser.COMPLETION - 347)) | (1 << (MariaDBParser.COMPRESSED - 347)) | (1 << (MariaDBParser.COMPRESSION - 347)) | (1 << (MariaDBParser.CONCURRENT - 347)) | (1 << (MariaDBParser.CONNECT - 347)) | (1 << (MariaDBParser.CONNECTION - 347)) | (1 << (MariaDBParser.CONSISTENT - 347)) | (1 << (MariaDBParser.CONSTRAINT_CATALOG - 347)))) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & ((1 << (MariaDBParser.CONSTRAINT_SCHEMA - 379)) | (1 << (MariaDBParser.CONSTRAINT_NAME - 379)) | (1 << (MariaDBParser.CONTAINS - 379)) | (1 << (MariaDBParser.CONTEXT - 379)) | (1 << (MariaDBParser.CONTRIBUTORS - 379)) | (1 << (MariaDBParser.COPY - 379)) | (1 << (MariaDBParser.CPU - 379)) | (1 << (MariaDBParser.CYCLE - 379)) | (1 << (MariaDBParser.CURSOR_NAME - 379)) | (1 << (MariaDBParser.DATA - 379)) | (1 << (MariaDBParser.DATAFILE - 379)) | (1 << (MariaDBParser.DEALLOCATE - 379)) | (1 << (MariaDBParser.DEFAULT_AUTH - 379)) | (1 << (MariaDBParser.DEFINER - 379)) | (1 << (MariaDBParser.DELAY_KEY_WRITE - 379)) | (1 << (MariaDBParser.DES_KEY_FILE - 379)) | (1 << (MariaDBParser.DIRECTORY - 379)) | (1 << (MariaDBParser.DISABLE - 379)) | (1 << (MariaDBParser.DISCARD - 379)) | (1 << (MariaDBParser.DISK - 379)) | (1 << (MariaDBParser.DO - 379)) | (1 << (MariaDBParser.DUMPFILE - 379)) | (1 << (MariaDBParser.DUPLICATE - 379)) | (1 << (MariaDBParser.DYNAMIC - 379)) | (1 << (MariaDBParser.ENABLE - 379)) | (1 << (MariaDBParser.ENCRYPTED - 379)) | (1 << (MariaDBParser.ENCRYPTION - 379)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ID - 379)) | (1 << (MariaDBParser.END - 379)) | (1 << (MariaDBParser.ENDS - 379)) | (1 << (MariaDBParser.ENGINE - 379)) | (1 << (MariaDBParser.ENGINES - 379)))) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & ((1 << (MariaDBParser.ERROR - 411)) | (1 << (MariaDBParser.ERRORS - 411)) | (1 << (MariaDBParser.ESCAPE - 411)) | (1 << (MariaDBParser.EVEN - 411)) | (1 << (MariaDBParser.EVENT - 411)) | (1 << (MariaDBParser.EVENTS - 411)) | (1 << (MariaDBParser.EVERY - 411)) | (1 << (MariaDBParser.EXCHANGE - 411)) | (1 << (MariaDBParser.EXCLUSIVE - 411)) | (1 << (MariaDBParser.EXPIRE - 411)) | (1 << (MariaDBParser.EXPORT - 411)) | (1 << (MariaDBParser.EXTENDED - 411)) | (1 << (MariaDBParser.EXTENT_SIZE - 411)) | (1 << (MariaDBParser.FAILED_LOGIN_ATTEMPTS - 411)) | (1 << (MariaDBParser.FAST - 411)) | (1 << (MariaDBParser.FAULTS - 411)) | (1 << (MariaDBParser.FIELDS - 411)) | (1 << (MariaDBParser.FILE_BLOCK_SIZE - 411)) | (1 << (MariaDBParser.FILTER - 411)) | (1 << (MariaDBParser.FIRST - 411)) | (1 << (MariaDBParser.FIXED - 411)) | (1 << (MariaDBParser.FLUSH - 411)) | (1 << (MariaDBParser.FOLLOWS - 411)) | (1 << (MariaDBParser.FOUND - 411)) | (1 << (MariaDBParser.FULL - 411)) | (1 << (MariaDBParser.FUNCTION - 411)) | (1 << (MariaDBParser.GENERAL - 411)) | (1 << (MariaDBParser.GLOBAL - 411)) | (1 << (MariaDBParser.GRANTS - 411)) | (1 << (MariaDBParser.GROUP_REPLICATION - 411)) | (1 << (MariaDBParser.HANDLER - 411)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (MariaDBParser.HASH - 443)) | (1 << (MariaDBParser.HELP - 443)) | (1 << (MariaDBParser.HISTORY - 443)) | (1 << (MariaDBParser.HOST - 443)) | (1 << (MariaDBParser.HOSTS - 443)) | (1 << (MariaDBParser.IDENTIFIED - 443)) | (1 << (MariaDBParser.IGNORE_SERVER_IDS - 443)) | (1 << (MariaDBParser.IMPORT - 443)) | (1 << (MariaDBParser.INCREMENT - 443)) | (1 << (MariaDBParser.INDEXES - 443)) | (1 << (MariaDBParser.INITIAL_SIZE - 443)) | (1 << (MariaDBParser.INPLACE - 443)) | (1 << (MariaDBParser.INSERT_METHOD - 443)) | (1 << (MariaDBParser.INSTALL - 443)) | (1 << (MariaDBParser.INSTANCE - 443)) | (1 << (MariaDBParser.INSTANT - 443)) | (1 << (MariaDBParser.INVISIBLE - 443)) | (1 << (MariaDBParser.INVOKER - 443)) | (1 << (MariaDBParser.IO - 443)) | (1 << (MariaDBParser.IO_THREAD - 443)) | (1 << (MariaDBParser.IPC - 443)) | (1 << (MariaDBParser.ISOLATION - 443)) | (1 << (MariaDBParser.ISSUER - 443)) | (1 << (MariaDBParser.JSON - 443)) | (1 << (MariaDBParser.KEY_BLOCK_SIZE - 443)) | (1 << (MariaDBParser.LANGUAGE - 443)) | (1 << (MariaDBParser.LAST - 443)) | (1 << (MariaDBParser.LEAVES - 443)) | (1 << (MariaDBParser.LESS - 443)) | (1 << (MariaDBParser.LEVEL - 443)) | (1 << (MariaDBParser.LIST - 443)) | (1 << (MariaDBParser.LOCAL - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (MariaDBParser.LOCALES - 475)) | (1 << (MariaDBParser.LOGFILE - 475)) | (1 << (MariaDBParser.LOGS - 475)) | (1 << (MariaDBParser.MASTER - 475)) | (1 << (MariaDBParser.MASTER_AUTO_POSITION - 475)) | (1 << (MariaDBParser.MASTER_CONNECT_RETRY - 475)) | (1 << (MariaDBParser.MASTER_DELAY - 475)) | (1 << (MariaDBParser.MASTER_HEARTBEAT_PERIOD - 475)) | (1 << (MariaDBParser.MASTER_HOST - 475)) | (1 << (MariaDBParser.MASTER_LOG_FILE - 475)) | (1 << (MariaDBParser.MASTER_LOG_POS - 475)) | (1 << (MariaDBParser.MASTER_PASSWORD - 475)) | (1 << (MariaDBParser.MASTER_PORT - 475)) | (1 << (MariaDBParser.MASTER_RETRY_COUNT - 475)) | (1 << (MariaDBParser.MASTER_SSL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CA - 475)) | (1 << (MariaDBParser.MASTER_SSL_CAPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_CERT - 475)) | (1 << (MariaDBParser.MASTER_SSL_CIPHER - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRLPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_KEY - 475)) | (1 << (MariaDBParser.MASTER_TLS_VERSION - 475)) | (1 << (MariaDBParser.MASTER_USER - 475)) | (1 << (MariaDBParser.MAX_CONNECTIONS_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_QUERIES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_ROWS - 475)) | (1 << (MariaDBParser.MAX_SIZE - 475)) | (1 << (MariaDBParser.MAX_UPDATES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_USER_CONNECTIONS - 475)) | (1 << (MariaDBParser.MEDIUM - 475)) | (1 << (MariaDBParser.MEMBER - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (MariaDBParser.MERGE - 507)) | (1 << (MariaDBParser.MESSAGE_TEXT - 507)) | (1 << (MariaDBParser.MID - 507)) | (1 << (MariaDBParser.MIGRATE - 507)) | (1 << (MariaDBParser.MIN_ROWS - 507)) | (1 << (MariaDBParser.MODE - 507)) | (1 << (MariaDBParser.MODIFY - 507)) | (1 << (MariaDBParser.MUTEX - 507)) | (1 << (MariaDBParser.MYSQL - 507)) | (1 << (MariaDBParser.MYSQL_ERRNO - 507)) | (1 << (MariaDBParser.NAME - 507)) | (1 << (MariaDBParser.NAMES - 507)) | (1 << (MariaDBParser.NCHAR - 507)) | (1 << (MariaDBParser.NEVER - 507)) | (1 << (MariaDBParser.NEXT - 507)) | (1 << (MariaDBParser.NO - 507)) | (1 << (MariaDBParser.NOCACHE - 507)) | (1 << (MariaDBParser.NOCOPY - 507)) | (1 << (MariaDBParser.NOCYCLE - 507)) | (1 << (MariaDBParser.NOMAXVALUE - 507)) | (1 << (MariaDBParser.NOMINVALUE - 507)) | (1 << (MariaDBParser.NOWAIT - 507)) | (1 << (MariaDBParser.NODEGROUP - 507)) | (1 << (MariaDBParser.NONE - 507)) | (1 << (MariaDBParser.ODBC - 507)) | (1 << (MariaDBParser.OFFLINE - 507)) | (1 << (MariaDBParser.OFFSET - 507)) | (1 << (MariaDBParser.OF - 507)) | (1 << (MariaDBParser.OJ - 507)) | (1 << (MariaDBParser.OLD_PASSWORD - 507)) | (1 << (MariaDBParser.ONE - 507)) | (1 << (MariaDBParser.ONLINE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (MariaDBParser.ONLY - 539)) | (1 << (MariaDBParser.OPEN - 539)) | (1 << (MariaDBParser.OPTIMIZER_COSTS - 539)) | (1 << (MariaDBParser.OPTIONS - 539)) | (1 << (MariaDBParser.OWNER - 539)) | (1 << (MariaDBParser.PACK_KEYS - 539)) | (1 << (MariaDBParser.PAGE - 539)) | (1 << (MariaDBParser.PARSER - 539)) | (1 << (MariaDBParser.PARTIAL - 539)) | (1 << (MariaDBParser.PARTITIONING - 539)) | (1 << (MariaDBParser.PARTITIONS - 539)) | (1 << (MariaDBParser.PASSWORD - 539)) | (1 << (MariaDBParser.PASSWORD_LOCK_TIME - 539)) | (1 << (MariaDBParser.PHASE - 539)) | (1 << (MariaDBParser.PLUGIN - 539)) | (1 << (MariaDBParser.PLUGIN_DIR - 539)) | (1 << (MariaDBParser.PLUGINS - 539)) | (1 << (MariaDBParser.PORT - 539)) | (1 << (MariaDBParser.PRECEDES - 539)) | (1 << (MariaDBParser.PREPARE - 539)) | (1 << (MariaDBParser.PRESERVE - 539)) | (1 << (MariaDBParser.PREV - 539)) | (1 << (MariaDBParser.PROCESSLIST - 539)) | (1 << (MariaDBParser.PROFILE - 539)) | (1 << (MariaDBParser.PROFILES - 539)) | (1 << (MariaDBParser.PROXY - 539)) | (1 << (MariaDBParser.QUERY - 539)) | (1 << (MariaDBParser.QUERY_RESPONSE_TIME - 539)) | (1 << (MariaDBParser.QUICK - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (MariaDBParser.REBUILD - 571)) | (1 << (MariaDBParser.RECOVER - 571)) | (1 << (MariaDBParser.RECURSIVE - 571)) | (1 << (MariaDBParser.REDO_BUFFER_SIZE - 571)) | (1 << (MariaDBParser.REDUNDANT - 571)) | (1 << (MariaDBParser.RELAY - 571)) | (1 << (MariaDBParser.RELAY_LOG_FILE - 571)) | (1 << (MariaDBParser.RELAY_LOG_POS - 571)) | (1 << (MariaDBParser.RELAYLOG - 571)) | (1 << (MariaDBParser.REMOVE - 571)) | (1 << (MariaDBParser.REORGANIZE - 571)) | (1 << (MariaDBParser.REPAIR - 571)) | (1 << (MariaDBParser.REPLICATE_DO_DB - 571)) | (1 << (MariaDBParser.REPLICATE_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_REWRITE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATION - 571)) | (1 << (MariaDBParser.RESET - 571)) | (1 << (MariaDBParser.RESTART - 571)) | (1 << (MariaDBParser.RESUME - 571)) | (1 << (MariaDBParser.RETURNED_SQLSTATE - 571)) | (1 << (MariaDBParser.RETURNS - 571)) | (1 << (MariaDBParser.REUSE - 571)) | (1 << (MariaDBParser.ROLE - 571)) | (1 << (MariaDBParser.ROLLBACK - 571)) | (1 << (MariaDBParser.ROLLUP - 571)) | (1 << (MariaDBParser.ROTATE - 571)) | (1 << (MariaDBParser.ROW - 571)))) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & ((1 << (MariaDBParser.ROWS - 603)) | (1 << (MariaDBParser.ROW_FORMAT - 603)) | (1 << (MariaDBParser.RTREE - 603)) | (1 << (MariaDBParser.SAVEPOINT - 603)) | (1 << (MariaDBParser.SCHEDULE - 603)) | (1 << (MariaDBParser.SECURITY - 603)) | (1 << (MariaDBParser.SEQUENCE - 603)) | (1 << (MariaDBParser.SERVER - 603)) | (1 << (MariaDBParser.SESSION - 603)) | (1 << (MariaDBParser.SHARE - 603)) | (1 << (MariaDBParser.SHARED - 603)) | (1 << (MariaDBParser.SIGNED - 603)) | (1 << (MariaDBParser.SIMPLE - 603)) | (1 << (MariaDBParser.SLAVE - 603)) | (1 << (MariaDBParser.SLAVES - 603)) | (1 << (MariaDBParser.SLOW - 603)) | (1 << (MariaDBParser.SNAPSHOT - 603)) | (1 << (MariaDBParser.SOCKET - 603)) | (1 << (MariaDBParser.SOME - 603)) | (1 << (MariaDBParser.SONAME - 603)) | (1 << (MariaDBParser.SOUNDS - 603)) | (1 << (MariaDBParser.SOURCE - 603)) | (1 << (MariaDBParser.SQL_AFTER_GTIDS - 603)) | (1 << (MariaDBParser.SQL_AFTER_MTS_GAPS - 603)) | (1 << (MariaDBParser.SQL_BEFORE_GTIDS - 603)) | (1 << (MariaDBParser.SQL_BUFFER_RESULT - 603)) | (1 << (MariaDBParser.SQL_CACHE - 603)) | (1 << (MariaDBParser.SQL_NO_CACHE - 603)) | (1 << (MariaDBParser.SQL_THREAD - 603)) | (1 << (MariaDBParser.START - 603)) | (1 << (MariaDBParser.STARTS - 603)) | (1 << (MariaDBParser.STATS_AUTO_RECALC - 603)))) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & ((1 << (MariaDBParser.STATS_PERSISTENT - 635)) | (1 << (MariaDBParser.STATS_SAMPLE_PAGES - 635)) | (1 << (MariaDBParser.STATUS - 635)) | (1 << (MariaDBParser.STOP - 635)) | (1 << (MariaDBParser.STORAGE - 635)) | (1 << (MariaDBParser.STRING - 635)) | (1 << (MariaDBParser.SUBCLASS_ORIGIN - 635)) | (1 << (MariaDBParser.SUBJECT - 635)) | (1 << (MariaDBParser.SUBPARTITION - 635)) | (1 << (MariaDBParser.SUBPARTITIONS - 635)) | (1 << (MariaDBParser.SUSPEND - 635)) | (1 << (MariaDBParser.SWAPS - 635)) | (1 << (MariaDBParser.SWITCHES - 635)) | (1 << (MariaDBParser.TABLE_NAME - 635)) | (1 << (MariaDBParser.TABLESPACE - 635)) | (1 << (MariaDBParser.TABLE_TYPE - 635)) | (1 << (MariaDBParser.TEMPORARY - 635)) | (1 << (MariaDBParser.TEMPTABLE - 635)) | (1 << (MariaDBParser.THAN - 635)) | (1 << (MariaDBParser.TRADITIONAL - 635)) | (1 << (MariaDBParser.TRANSACTION - 635)) | (1 << (MariaDBParser.TRANSACTIONAL - 635)) | (1 << (MariaDBParser.TRIGGERS - 635)) | (1 << (MariaDBParser.TRUNCATE - 635)) | (1 << (MariaDBParser.TYPES - 635)) | (1 << (MariaDBParser.UNBOUNDED - 635)) | (1 << (MariaDBParser.UNDEFINED - 635)) | (1 << (MariaDBParser.UNDOFILE - 635)) | (1 << (MariaDBParser.UNDO_BUFFER_SIZE - 635)) | (1 << (MariaDBParser.UNINSTALL - 635)) | (1 << (MariaDBParser.UNKNOWN - 635)))) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & ((1 << (MariaDBParser.UNTIL - 667)) | (1 << (MariaDBParser.UPGRADE - 667)) | (1 << (MariaDBParser.USER - 667)) | (1 << (MariaDBParser.USE_FRM - 667)) | (1 << (MariaDBParser.USER_RESOURCES - 667)) | (1 << (MariaDBParser.VALIDATION - 667)) | (1 << (MariaDBParser.VALUE - 667)) | (1 << (MariaDBParser.VARIABLES - 667)) | (1 << (MariaDBParser.VIEW - 667)) | (1 << (MariaDBParser.VIRTUAL - 667)) | (1 << (MariaDBParser.VISIBLE - 667)) | (1 << (MariaDBParser.WAIT - 667)) | (1 << (MariaDBParser.WARNINGS - 667)) | (1 << (MariaDBParser.WITHOUT - 667)) | (1 << (MariaDBParser.WORK - 667)) | (1 << (MariaDBParser.WRAPPER - 667)) | (1 << (MariaDBParser.WSREP_MEMBERSHIP - 667)) | (1 << (MariaDBParser.WSREP_STATUS - 667)) | (1 << (MariaDBParser.X509 - 667)) | (1 << (MariaDBParser.XA - 667)) | (1 << (MariaDBParser.XML - 667)) | (1 << (MariaDBParser.EUR - 667)) | (1 << (MariaDBParser.USA - 667)) | (1 << (MariaDBParser.JIS - 667)) | (1 << (MariaDBParser.ISO - 667)) | (1 << (MariaDBParser.INTERNAL - 667)) | (1 << (MariaDBParser.QUARTER - 667)) | (1 << (MariaDBParser.MONTH - 667)) | (1 << (MariaDBParser.DAY - 667)) | (1 << (MariaDBParser.HOUR - 667)))) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & ((1 << (MariaDBParser.MINUTE - 699)) | (1 << (MariaDBParser.WEEK - 699)) | (1 << (MariaDBParser.SECOND - 699)) | (1 << (MariaDBParser.MICROSECOND - 699)) | (1 << (MariaDBParser.USER_STATISTICS - 699)) | (1 << (MariaDBParser.CLIENT_STATISTICS - 699)) | (1 << (MariaDBParser.INDEX_STATISTICS - 699)) | (1 << (MariaDBParser.TABLE_STATISTICS - 699)) | (1 << (MariaDBParser.ADMIN - 699)) | (1 << (MariaDBParser.AUDIT_ADMIN - 699)) | (1 << (MariaDBParser.BACKUP_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ENCRYPTION_ADMIN - 699)) | (1 << (MariaDBParser.CLONE_ADMIN - 699)) | (1 << (MariaDBParser.CONNECTION_ADMIN - 699)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ADMIN - 699)) | (1 << (MariaDBParser.EXECUTE - 699)) | (1 << (MariaDBParser.FILE - 699)) | (1 << (MariaDBParser.FIREWALL_ADMIN - 699)) | (1 << (MariaDBParser.FIREWALL_USER - 699)) | (1 << (MariaDBParser.GROUP_REPLICATION_ADMIN - 699)) | (1 << (MariaDBParser.INNODB_REDO_LOG_ARCHIVE - 699)) | (1 << (MariaDBParser.INVOKE - 699)) | (1 << (MariaDBParser.LAMBDA - 699)) | (1 << (MariaDBParser.NDB_STORED_USER - 699)) | (1 << (MariaDBParser.PASSWORDLESS_USER_ADMIN - 699)))) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & ((1 << (MariaDBParser.PERSIST_RO_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.PRIVILEGES - 731)) | (1 << (MariaDBParser.PROCESS - 731)) | (1 << (MariaDBParser.RELOAD - 731)) | (1 << (MariaDBParser.REPLICATION_APPLIER - 731)) | (1 << (MariaDBParser.REPLICATION_SLAVE_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_USER - 731)) | (1 << (MariaDBParser.ROLE_ADMIN - 731)) | (1 << (MariaDBParser.ROUTINE - 731)) | (1 << (MariaDBParser.S3 - 731)) | (1 << (MariaDBParser.SESSION_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.SET_USER_ID - 731)) | (1 << (MariaDBParser.SHOW_ROUTINE - 731)) | (1 << (MariaDBParser.SHUTDOWN - 731)) | (1 << (MariaDBParser.SUPER - 731)) | (1 << (MariaDBParser.SYSTEM_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.TABLES - 731)) | (1 << (MariaDBParser.TABLE_ENCRYPTION_ADMIN - 731)) | (1 << (MariaDBParser.VERSION_TOKEN_ADMIN - 731)) | (1 << (MariaDBParser.XA_RECOVER_ADMIN - 731)) | (1 << (MariaDBParser.ARMSCII8 - 731)) | (1 << (MariaDBParser.ASCII - 731)) | (1 << (MariaDBParser.BIG5 - 731)) | (1 << (MariaDBParser.CP1250 - 731)) | (1 << (MariaDBParser.CP1251 - 731)) | (1 << (MariaDBParser.CP1256 - 731)) | (1 << (MariaDBParser.CP1257 - 731)) | (1 << (MariaDBParser.CP850 - 731)) | (1 << (MariaDBParser.CP852 - 731)) | (1 << (MariaDBParser.CP866 - 731)))) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & ((1 << (MariaDBParser.CP932 - 763)) | (1 << (MariaDBParser.DEC8 - 763)) | (1 << (MariaDBParser.EUCJPMS - 763)) | (1 << (MariaDBParser.EUCKR - 763)) | (1 << (MariaDBParser.GB18030 - 763)) | (1 << (MariaDBParser.GB2312 - 763)) | (1 << (MariaDBParser.GBK - 763)) | (1 << (MariaDBParser.GEOSTD8 - 763)) | (1 << (MariaDBParser.GREEK - 763)) | (1 << (MariaDBParser.HEBREW - 763)) | (1 << (MariaDBParser.HP8 - 763)) | (1 << (MariaDBParser.KEYBCS2 - 763)) | (1 << (MariaDBParser.KOI8R - 763)) | (1 << (MariaDBParser.KOI8U - 763)) | (1 << (MariaDBParser.LATIN1 - 763)) | (1 << (MariaDBParser.LATIN2 - 763)) | (1 << (MariaDBParser.LATIN5 - 763)) | (1 << (MariaDBParser.LATIN7 - 763)) | (1 << (MariaDBParser.MACCE - 763)) | (1 << (MariaDBParser.MACROMAN - 763)) | (1 << (MariaDBParser.SJIS - 763)) | (1 << (MariaDBParser.SWE7 - 763)) | (1 << (MariaDBParser.TIS620 - 763)) | (1 << (MariaDBParser.UCS2 - 763)) | (1 << (MariaDBParser.UJIS - 763)) | (1 << (MariaDBParser.UTF16 - 763)) | (1 << (MariaDBParser.UTF16LE - 763)) | (1 << (MariaDBParser.UTF32 - 763)) | (1 << (MariaDBParser.UTF8 - 763)) | (1 << (MariaDBParser.UTF8MB3 - 763)) | (1 << (MariaDBParser.UTF8MB4 - 763)) | (1 << (MariaDBParser.ARCHIVE - 763)))) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & ((1 << (MariaDBParser.BLACKHOLE - 795)) | (1 << (MariaDBParser.CSV - 795)) | (1 << (MariaDBParser.FEDERATED - 795)) | (1 << (MariaDBParser.INNODB - 795)) | (1 << (MariaDBParser.MEMORY - 795)) | (1 << (MariaDBParser.MRG_MYISAM - 795)) | (1 << (MariaDBParser.MYISAM - 795)) | (1 << (MariaDBParser.NDB - 795)) | (1 << (MariaDBParser.NDBCLUSTER - 795)) | (1 << (MariaDBParser.PERFORMANCE_SCHEMA - 795)) | (1 << (MariaDBParser.TOKUDB - 795)) | (1 << (MariaDBParser.REPEATABLE - 795)) | (1 << (MariaDBParser.COMMITTED - 795)) | (1 << (MariaDBParser.UNCOMMITTED - 795)) | (1 << (MariaDBParser.SERIALIZABLE - 795)) | (1 << (MariaDBParser.GEOMETRYCOLLECTION - 795)) | (1 << (MariaDBParser.LINESTRING - 795)) | (1 << (MariaDBParser.MULTILINESTRING - 795)) | (1 << (MariaDBParser.MULTIPOINT - 795)) | (1 << (MariaDBParser.MULTIPOLYGON - 795)) | (1 << (MariaDBParser.POINT - 795)) | (1 << (MariaDBParser.POLYGON - 795)) | (1 << (MariaDBParser.ABS - 795)) | (1 << (MariaDBParser.ACOS - 795)) | (1 << (MariaDBParser.ADDDATE - 795)) | (1 << (MariaDBParser.ADDTIME - 795)) | (1 << (MariaDBParser.AES_DECRYPT - 795)) | (1 << (MariaDBParser.AES_ENCRYPT - 795)) | (1 << (MariaDBParser.AREA - 795)) | (1 << (MariaDBParser.ASBINARY - 795)))) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & ((1 << (MariaDBParser.ASIN - 827)) | (1 << (MariaDBParser.ASTEXT - 827)) | (1 << (MariaDBParser.ASWKB - 827)) | (1 << (MariaDBParser.ASWKT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DECRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DERIVE - 827)) | (1 << (MariaDBParser.ASYMMETRIC_ENCRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_SIGN - 827)) | (1 << (MariaDBParser.ASYMMETRIC_VERIFY - 827)) | (1 << (MariaDBParser.ATAN - 827)) | (1 << (MariaDBParser.ATAN2 - 827)) | (1 << (MariaDBParser.BENCHMARK - 827)) | (1 << (MariaDBParser.BIN - 827)) | (1 << (MariaDBParser.BIT_COUNT - 827)) | (1 << (MariaDBParser.BIT_LENGTH - 827)) | (1 << (MariaDBParser.BUFFER - 827)) | (1 << (MariaDBParser.CATALOG_NAME - 827)) | (1 << (MariaDBParser.CEIL - 827)) | (1 << (MariaDBParser.CEILING - 827)) | (1 << (MariaDBParser.CENTROID - 827)) | (1 << (MariaDBParser.CHARACTER_LENGTH - 827)) | (1 << (MariaDBParser.CHARSET - 827)) | (1 << (MariaDBParser.CHAR_LENGTH - 827)) | (1 << (MariaDBParser.COERCIBILITY - 827)) | (1 << (MariaDBParser.COLLATION - 827)) | (1 << (MariaDBParser.COMPRESS - 827)) | (1 << (MariaDBParser.CONCAT - 827)) | (1 << (MariaDBParser.CONCAT_WS - 827)) | (1 << (MariaDBParser.CONNECTION_ID - 827)) | (1 << (MariaDBParser.CONV - 827)) | (1 << (MariaDBParser.CONVERT_TZ - 827)) | (1 << (MariaDBParser.COS - 827)))) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & ((1 << (MariaDBParser.COT - 859)) | (1 << (MariaDBParser.CRC32 - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY - 859)) | (1 << (MariaDBParser.CREATE_DH_PARAMETERS - 859)) | (1 << (MariaDBParser.CREATE_DIGEST - 859)) | (1 << (MariaDBParser.CROSSES - 859)) | (1 << (MariaDBParser.DATEDIFF - 859)) | (1 << (MariaDBParser.DATE_FORMAT - 859)) | (1 << (MariaDBParser.DAYNAME - 859)) | (1 << (MariaDBParser.DAYOFMONTH - 859)) | (1 << (MariaDBParser.DAYOFWEEK - 859)) | (1 << (MariaDBParser.DAYOFYEAR - 859)) | (1 << (MariaDBParser.DECODE - 859)) | (1 << (MariaDBParser.DEGREES - 859)) | (1 << (MariaDBParser.DES_DECRYPT - 859)) | (1 << (MariaDBParser.DES_ENCRYPT - 859)) | (1 << (MariaDBParser.DIMENSION - 859)) | (1 << (MariaDBParser.DISJOINT - 859)) | (1 << (MariaDBParser.ELT - 859)) | (1 << (MariaDBParser.ENCODE - 859)) | (1 << (MariaDBParser.ENCRYPT - 859)) | (1 << (MariaDBParser.ENDPOINT - 859)) | (1 << (MariaDBParser.ENGINE_ATTRIBUTE - 859)) | (1 << (MariaDBParser.ENVELOPE - 859)) | (1 << (MariaDBParser.EQUALS - 859)) | (1 << (MariaDBParser.EXP - 859)) | (1 << (MariaDBParser.EXPORT_SET - 859)) | (1 << (MariaDBParser.EXTERIORRING - 859)) | (1 << (MariaDBParser.EXTRACTVALUE - 859)) | (1 << (MariaDBParser.FIELD - 859)) | (1 << (MariaDBParser.FIND_IN_SET - 859)))) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & ((1 << (MariaDBParser.FLOOR - 891)) | (1 << (MariaDBParser.FORMAT - 891)) | (1 << (MariaDBParser.FOUND_ROWS - 891)) | (1 << (MariaDBParser.FROM_BASE64 - 891)) | (1 << (MariaDBParser.FROM_DAYS - 891)) | (1 << (MariaDBParser.FROM_UNIXTIME - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYN - 891)) | (1 << (MariaDBParser.GEOMETRYTYPE - 891)) | (1 << (MariaDBParser.GEOMFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMFROMWKB - 891)) | (1 << (MariaDBParser.GET_FORMAT - 891)) | (1 << (MariaDBParser.GET_LOCK - 891)) | (1 << (MariaDBParser.GLENGTH - 891)) | (1 << (MariaDBParser.GREATEST - 891)) | (1 << (MariaDBParser.GTID_SUBSET - 891)) | (1 << (MariaDBParser.GTID_SUBTRACT - 891)) | (1 << (MariaDBParser.HEX - 891)) | (1 << (MariaDBParser.IFNULL - 891)) | (1 << (MariaDBParser.INET6_ATON - 891)) | (1 << (MariaDBParser.INET6_NTOA - 891)) | (1 << (MariaDBParser.INET_ATON - 891)) | (1 << (MariaDBParser.INET_NTOA - 891)) | (1 << (MariaDBParser.INSTR - 891)) | (1 << (MariaDBParser.INTERIORRINGN - 891)) | (1 << (MariaDBParser.INTERSECTS - 891)) | (1 << (MariaDBParser.ISCLOSED - 891)))) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & ((1 << (MariaDBParser.ISEMPTY - 923)) | (1 << (MariaDBParser.ISNULL - 923)) | (1 << (MariaDBParser.ISSIMPLE - 923)) | (1 << (MariaDBParser.IS_FREE_LOCK - 923)) | (1 << (MariaDBParser.IS_IPV4 - 923)) | (1 << (MariaDBParser.IS_IPV4_COMPAT - 923)) | (1 << (MariaDBParser.IS_IPV4_MAPPED - 923)) | (1 << (MariaDBParser.IS_IPV6 - 923)) | (1 << (MariaDBParser.IS_USED_LOCK - 923)) | (1 << (MariaDBParser.LAST_INSERT_ID - 923)) | (1 << (MariaDBParser.LCASE - 923)) | (1 << (MariaDBParser.LEAST - 923)) | (1 << (MariaDBParser.LENGTH - 923)) | (1 << (MariaDBParser.LINEFROMTEXT - 923)) | (1 << (MariaDBParser.LINEFROMWKB - 923)) | (1 << (MariaDBParser.LINESTRINGFROMTEXT - 923)) | (1 << (MariaDBParser.LINESTRINGFROMWKB - 923)) | (1 << (MariaDBParser.LN - 923)) | (1 << (MariaDBParser.LOAD_FILE - 923)) | (1 << (MariaDBParser.LOCATE - 923)) | (1 << (MariaDBParser.LOG - 923)) | (1 << (MariaDBParser.LOG10 - 923)) | (1 << (MariaDBParser.LOG2 - 923)) | (1 << (MariaDBParser.LOWER - 923)) | (1 << (MariaDBParser.LPAD - 923)) | (1 << (MariaDBParser.LTRIM - 923)) | (1 << (MariaDBParser.MAKEDATE - 923)) | (1 << (MariaDBParser.MAKETIME - 923)) | (1 << (MariaDBParser.MAKE_SET - 923)) | (1 << (MariaDBParser.MASTER_POS_WAIT - 923)) | (1 << (MariaDBParser.MBRCONTAINS - 923)) | (1 << (MariaDBParser.MBRDISJOINT - 923)))) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & ((1 << (MariaDBParser.MBREQUAL - 955)) | (1 << (MariaDBParser.MBRINTERSECTS - 955)) | (1 << (MariaDBParser.MBROVERLAPS - 955)) | (1 << (MariaDBParser.MBRTOUCHES - 955)) | (1 << (MariaDBParser.MBRWITHIN - 955)) | (1 << (MariaDBParser.MD5 - 955)) | (1 << (MariaDBParser.MLINEFROMTEXT - 955)) | (1 << (MariaDBParser.MLINEFROMWKB - 955)) | (1 << (MariaDBParser.MONTHNAME - 955)) | (1 << (MariaDBParser.MPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MPOLYFROMTEXT - 955)) | (1 << (MariaDBParser.MPOLYFROMWKB - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMTEXT - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMWKB - 955)) | (1 << (MariaDBParser.NAME_CONST - 955)) | (1 << (MariaDBParser.NULLIF - 955)) | (1 << (MariaDBParser.NUMGEOMETRIES - 955)) | (1 << (MariaDBParser.NUMINTERIORRINGS - 955)) | (1 << (MariaDBParser.NUMPOINTS - 955)) | (1 << (MariaDBParser.OCT - 955)) | (1 << (MariaDBParser.OCTET_LENGTH - 955)) | (1 << (MariaDBParser.ORD - 955)) | (1 << (MariaDBParser.OVERLAPS - 955)) | (1 << (MariaDBParser.PERIOD_ADD - 955)) | (1 << (MariaDBParser.PERIOD_DIFF - 955)) | (1 << (MariaDBParser.PI - 955)) | (1 << (MariaDBParser.POINTFROMTEXT - 955)))) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & ((1 << (MariaDBParser.POINTFROMWKB - 987)) | (1 << (MariaDBParser.POINTN - 987)) | (1 << (MariaDBParser.POLYFROMTEXT - 987)) | (1 << (MariaDBParser.POLYFROMWKB - 987)) | (1 << (MariaDBParser.POLYGONFROMTEXT - 987)) | (1 << (MariaDBParser.POLYGONFROMWKB - 987)) | (1 << (MariaDBParser.POW - 987)) | (1 << (MariaDBParser.POWER - 987)) | (1 << (MariaDBParser.QUOTE - 987)) | (1 << (MariaDBParser.RADIANS - 987)) | (1 << (MariaDBParser.RAND - 987)) | (1 << (MariaDBParser.RANDOM_BYTES - 987)) | (1 << (MariaDBParser.RELEASE_LOCK - 987)) | (1 << (MariaDBParser.REVERSE - 987)) | (1 << (MariaDBParser.ROUND - 987)) | (1 << (MariaDBParser.ROW_COUNT - 987)) | (1 << (MariaDBParser.RPAD - 987)) | (1 << (MariaDBParser.RTRIM - 987)) | (1 << (MariaDBParser.SEC_TO_TIME - 987)) | (1 << (MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE - 987)) | (1 << (MariaDBParser.SESSION_USER - 987)) | (1 << (MariaDBParser.SHA - 987)) | (1 << (MariaDBParser.SHA1 - 987)) | (1 << (MariaDBParser.SHA2 - 987)) | (1 << (MariaDBParser.SCHEMA_NAME - 987)) | (1 << (MariaDBParser.SIGN - 987)) | (1 << (MariaDBParser.SIN - 987)) | (1 << (MariaDBParser.SLEEP - 987)) | (1 << (MariaDBParser.SOUNDEX - 987)) | (1 << (MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS - 987)) | (1 << (MariaDBParser.SQRT - 987)) | (1 << (MariaDBParser.SRID - 987)))) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & ((1 << (MariaDBParser.STARTPOINT - 1019)) | (1 << (MariaDBParser.STRCMP - 1019)) | (1 << (MariaDBParser.STR_TO_DATE - 1019)) | (1 << (MariaDBParser.ST_AREA - 1019)) | (1 << (MariaDBParser.ST_ASBINARY - 1019)) | (1 << (MariaDBParser.ST_ASTEXT - 1019)) | (1 << (MariaDBParser.ST_ASWKB - 1019)) | (1 << (MariaDBParser.ST_ASWKT - 1019)) | (1 << (MariaDBParser.ST_BUFFER - 1019)) | (1 << (MariaDBParser.ST_CENTROID - 1019)) | (1 << (MariaDBParser.ST_CONTAINS - 1019)) | (1 << (MariaDBParser.ST_CROSSES - 1019)) | (1 << (MariaDBParser.ST_DIFFERENCE - 1019)) | (1 << (MariaDBParser.ST_DIMENSION - 1019)) | (1 << (MariaDBParser.ST_DISJOINT - 1019)) | (1 << (MariaDBParser.ST_DISTANCE - 1019)) | (1 << (MariaDBParser.ST_ENDPOINT - 1019)) | (1 << (MariaDBParser.ST_ENVELOPE - 1019)) | (1 << (MariaDBParser.ST_EQUALS - 1019)) | (1 << (MariaDBParser.ST_EXTERIORRING - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYN - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYTYPE - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMWKB - 1019)) | (1 << (MariaDBParser.ST_INTERIORRINGN - 1019)))) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & ((1 << (MariaDBParser.ST_INTERSECTION - 1051)) | (1 << (MariaDBParser.ST_INTERSECTS - 1051)) | (1 << (MariaDBParser.ST_ISCLOSED - 1051)) | (1 << (MariaDBParser.ST_ISEMPTY - 1051)) | (1 << (MariaDBParser.ST_ISSIMPLE - 1051)) | (1 << (MariaDBParser.ST_LINEFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINEFROMWKB - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMWKB - 1051)) | (1 << (MariaDBParser.ST_NUMGEOMETRIES - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRING - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRINGS - 1051)) | (1 << (MariaDBParser.ST_NUMPOINTS - 1051)) | (1 << (MariaDBParser.ST_OVERLAPS - 1051)) | (1 << (MariaDBParser.ST_POINTFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POINTFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POINTN - 1051)) | (1 << (MariaDBParser.ST_POLYFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMWKB - 1051)) | (1 << (MariaDBParser.ST_SRID - 1051)) | (1 << (MariaDBParser.ST_STARTPOINT - 1051)) | (1 << (MariaDBParser.ST_SYMDIFFERENCE - 1051)) | (1 << (MariaDBParser.ST_TOUCHES - 1051)) | (1 << (MariaDBParser.ST_UNION - 1051)) | (1 << (MariaDBParser.ST_WITHIN - 1051)) | (1 << (MariaDBParser.ST_X - 1051)) | (1 << (MariaDBParser.ST_Y - 1051)) | (1 << (MariaDBParser.SUBDATE - 1051)) | (1 << (MariaDBParser.SUBSTRING_INDEX - 1051)) | (1 << (MariaDBParser.SUBTIME - 1051)))) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & ((1 << (MariaDBParser.SYSTEM_USER - 1083)) | (1 << (MariaDBParser.TAN - 1083)) | (1 << (MariaDBParser.TIMEDIFF - 1083)) | (1 << (MariaDBParser.TIMESTAMPADD - 1083)) | (1 << (MariaDBParser.TIMESTAMPDIFF - 1083)) | (1 << (MariaDBParser.TIME_FORMAT - 1083)) | (1 << (MariaDBParser.TIME_TO_SEC - 1083)) | (1 << (MariaDBParser.TOUCHES - 1083)) | (1 << (MariaDBParser.TO_BASE64 - 1083)) | (1 << (MariaDBParser.TO_DAYS - 1083)) | (1 << (MariaDBParser.TO_SECONDS - 1083)) | (1 << (MariaDBParser.UCASE - 1083)) | (1 << (MariaDBParser.UNCOMPRESS - 1083)) | (1 << (MariaDBParser.UNCOMPRESSED_LENGTH - 1083)) | (1 << (MariaDBParser.UNHEX - 1083)) | (1 << (MariaDBParser.UNIX_TIMESTAMP - 1083)) | (1 << (MariaDBParser.UPDATEXML - 1083)) | (1 << (MariaDBParser.UPPER - 1083)) | (1 << (MariaDBParser.UUID - 1083)) | (1 << (MariaDBParser.UUID_SHORT - 1083)) | (1 << (MariaDBParser.VALIDATE_PASSWORD_STRENGTH - 1083)) | (1 << (MariaDBParser.VERSION - 1083)) | (1 << (MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1083)) | (1 << (MariaDBParser.WEEKDAY - 1083)) | (1 << (MariaDBParser.WEEKOFYEAR - 1083)) | (1 << (MariaDBParser.WEIGHT_STRING - 1083)) | (1 << (MariaDBParser.WITHIN - 1083)) | (1 << (MariaDBParser.YEARWEEK - 1083)) | (1 << (MariaDBParser.Y_FUNCTION - 1083)) | (1 << (MariaDBParser.X_FUNCTION - 1083)) | (1 << (MariaDBParser.VIA - 1083)) | (1 << (MariaDBParser.LASTVAL - 1083)))) !== 0) || ((((_la - 1115)) & ~0x1F) === 0 && ((1 << (_la - 1115)) & ((1 << (MariaDBParser.NEXTVAL - 1115)) | (1 << (MariaDBParser.SETVAL - 1115)) | (1 << (MariaDBParser.PREVIOUS - 1115)) | (1 << (MariaDBParser.PERSISTENT - 1115)) | (1 << (MariaDBParser.BINLOG_MONITOR - 1115)) | (1 << (MariaDBParser.BINLOG_REPLAY - 1115)) | (1 << (MariaDBParser.FEDERATED_ADMIN - 1115)) | (1 << (MariaDBParser.READ_ONLY_ADMIN - 1115)) | (1 << (MariaDBParser.REPLICA - 1115)) | (1 << (MariaDBParser.REPLICAS - 1115)) | (1 << (MariaDBParser.REPLICATION_MASTER_ADMIN - 1115)) | (1 << (MariaDBParser.MONITOR - 1115)) | (1 << (MariaDBParser.READ_ONLY - 1115)) | (1 << (MariaDBParser.REPLAY - 1115)) | (1 << (MariaDBParser.MOD - 1115)))) !== 0) || ((((_la - 1166)) & ~0x1F) === 0 && ((1 << (_la - 1166)) & ((1 << (MariaDBParser.CHARSET_REVERSE_QOUTE_STRING - 1166)) | (1 << (MariaDBParser.STRING_LITERAL - 1166)) | (1 << (MariaDBParser.ID - 1166)))) !== 0)) {
						{
						this.state = 2734;
						(_localctx as AlterByAddUniqueKeyContext)._name = this.uid();
						}
					}

					}
				}

				this.state = 2739;
				this.match(MariaDBParser.UNIQUE);
				this.state = 2741;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 351, this._ctx) ) {
				case 1:
					{
					this.state = 2740;
					this.ifNotExists();
					}
					break;
				}
				this.state = 2744;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.INDEX || _la === MariaDBParser.KEY) {
					{
					this.state = 2743;
					(_localctx as AlterByAddUniqueKeyContext)._indexFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MariaDBParser.INDEX || _la === MariaDBParser.KEY)) {
						(_localctx as AlterByAddUniqueKeyContext)._indexFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 2747;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MariaDBParser.ATTRIBUTE) | (1 << MariaDBParser.BODY) | (1 << MariaDBParser.BUCKETS) | (1 << MariaDBParser.CONDITION))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (MariaDBParser.CURRENT - 36)) | (1 << (MariaDBParser.CURRENT_ROLE - 36)) | (1 << (MariaDBParser.CURRENT_USER - 36)) | (1 << (MariaDBParser.DATABASE - 36)) | (1 << (MariaDBParser.DEFAULT - 36)) | (1 << (MariaDBParser.DIAGNOSTICS - 36)) | (1 << (MariaDBParser.EMPTY - 36)) | (1 << (MariaDBParser.EXCEPT - 36)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (MariaDBParser.GROUP - 73)) | (1 << (MariaDBParser.IF - 73)) | (1 << (MariaDBParser.IGNORED - 73)) | (1 << (MariaDBParser.INSERT - 73)) | (1 << (MariaDBParser.LATERAL - 73)) | (1 << (MariaDBParser.LEFT - 73)) | (1 << (MariaDBParser.LOCKED - 73)))) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & ((1 << (MariaDBParser.MAXVALUE - 110)) | (1 << (MariaDBParser.MINVALUE - 110)) | (1 << (MariaDBParser.NUMBER - 110)) | (1 << (MariaDBParser.OPTIONAL - 110)) | (1 << (MariaDBParser.ORDER - 110)) | (1 << (MariaDBParser.PRIMARY - 110)) | (1 << (MariaDBParser.PACKAGE - 110)))) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (MariaDBParser.REPLACE - 142)) | (1 << (MariaDBParser.RIGHT - 142)) | (1 << (MariaDBParser.SCHEMA - 142)) | (1 << (MariaDBParser.SKIP_ - 142)) | (1 << (MariaDBParser.STACKED - 142)) | (1 << (MariaDBParser.STATEMENT - 142)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MariaDBParser.DATE - 217)) | (1 << (MariaDBParser.TIME - 217)) | (1 << (MariaDBParser.TIMESTAMP - 217)) | (1 << (MariaDBParser.DATETIME - 217)) | (1 << (MariaDBParser.YEAR - 217)) | (1 << (MariaDBParser.BINARY - 217)) | (1 << (MariaDBParser.TEXT - 217)) | (1 << (MariaDBParser.ENUM - 217)) | (1 << (MariaDBParser.SERIAL - 217)))) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & ((1 << (MariaDBParser.JSON_ARRAY - 251)) | (1 << (MariaDBParser.JSON_ARRAYAGG - 251)) | (1 << (MariaDBParser.JSON_ARRAY_APPEND - 251)) | (1 << (MariaDBParser.JSON_ARRAY_INSERT - 251)) | (1 << (MariaDBParser.JSON_CONTAINS - 251)) | (1 << (MariaDBParser.JSON_CONTAINS_PATH - 251)) | (1 << (MariaDBParser.JSON_DEPTH - 251)) | (1 << (MariaDBParser.JSON_EXTRACT - 251)) | (1 << (MariaDBParser.JSON_INSERT - 251)) | (1 << (MariaDBParser.JSON_KEYS - 251)) | (1 << (MariaDBParser.JSON_LENGTH - 251)) | (1 << (MariaDBParser.JSON_MERGE - 251)) | (1 << (MariaDBParser.JSON_MERGE_PATCH - 251)) | (1 << (MariaDBParser.JSON_MERGE_PRESERVE - 251)) | (1 << (MariaDBParser.JSON_OBJECT - 251)) | (1 << (MariaDBParser.JSON_OBJECTAGG - 251)) | (1 << (MariaDBParser.JSON_OVERLAPS - 251)) | (1 << (MariaDBParser.JSON_PRETTY - 251)) | (1 << (MariaDBParser.JSON_QUOTE - 251)) | (1 << (MariaDBParser.JSON_REMOVE - 251)) | (1 << (MariaDBParser.JSON_REPLACE - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALID - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT - 251)) | (1 << (MariaDBParser.JSON_SEARCH - 251)) | (1 << (MariaDBParser.JSON_SET - 251)) | (1 << (MariaDBParser.JSON_STORAGE_FREE - 251)) | (1 << (MariaDBParser.JSON_STORAGE_SIZE - 251)) | (1 << (MariaDBParser.JSON_TABLE - 251)) | (1 << (MariaDBParser.JSON_TYPE - 251)) | (1 << (MariaDBParser.JSON_UNQUOTE - 251)) | (1 << (MariaDBParser.JSON_VALID - 251)) | (1 << (MariaDBParser.JSON_VALUE - 251)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (MariaDBParser.NESTED - 283)) | (1 << (MariaDBParser.ORDINALITY - 283)) | (1 << (MariaDBParser.PATH - 283)) | (1 << (MariaDBParser.AVG - 283)) | (1 << (MariaDBParser.BIT_AND - 283)) | (1 << (MariaDBParser.BIT_OR - 283)) | (1 << (MariaDBParser.BIT_XOR - 283)) | (1 << (MariaDBParser.COUNT - 283)) | (1 << (MariaDBParser.CUME_DIST - 283)) | (1 << (MariaDBParser.DENSE_RANK - 283)) | (1 << (MariaDBParser.FIRST_VALUE - 283)) | (1 << (MariaDBParser.GROUP_CONCAT - 283)) | (1 << (MariaDBParser.LAG - 283)) | (1 << (MariaDBParser.LAST_VALUE - 283)) | (1 << (MariaDBParser.LEAD - 283)) | (1 << (MariaDBParser.MAX - 283)) | (1 << (MariaDBParser.MIN - 283)) | (1 << (MariaDBParser.NTILE - 283)) | (1 << (MariaDBParser.NTH_VALUE - 283)) | (1 << (MariaDBParser.PERCENT_RANK - 283)) | (1 << (MariaDBParser.RANK - 283)) | (1 << (MariaDBParser.ROW_NUMBER - 283)) | (1 << (MariaDBParser.STD - 283)) | (1 << (MariaDBParser.STDDEV - 283)) | (1 << (MariaDBParser.STDDEV_POP - 283)) | (1 << (MariaDBParser.STDDEV_SAMP - 283)) | (1 << (MariaDBParser.SUM - 283)) | (1 << (MariaDBParser.VAR_POP - 283)) | (1 << (MariaDBParser.VAR_SAMP - 283)) | (1 << (MariaDBParser.VARIANCE - 283)) | (1 << (MariaDBParser.CURRENT_DATE - 283)) | (1 << (MariaDBParser.CURRENT_TIME - 283)))) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & ((1 << (MariaDBParser.CURRENT_TIMESTAMP - 315)) | (1 << (MariaDBParser.LOCALTIME - 315)) | (1 << (MariaDBParser.CURDATE - 315)) | (1 << (MariaDBParser.CURTIME - 315)) | (1 << (MariaDBParser.DATE_ADD - 315)) | (1 << (MariaDBParser.DATE_SUB - 315)) | (1 << (MariaDBParser.LOCALTIMESTAMP - 315)) | (1 << (MariaDBParser.NOW - 315)) | (1 << (MariaDBParser.POSITION - 315)) | (1 << (MariaDBParser.SUBSTR - 315)) | (1 << (MariaDBParser.SUBSTRING - 315)) | (1 << (MariaDBParser.SYSDATE - 315)) | (1 << (MariaDBParser.TRIM - 315)) | (1 << (MariaDBParser.UTC_DATE - 315)) | (1 << (MariaDBParser.UTC_TIME - 315)) | (1 << (MariaDBParser.UTC_TIMESTAMP - 315)) | (1 << (MariaDBParser.ACCOUNT - 315)) | (1 << (MariaDBParser.ACTION - 315)) | (1 << (MariaDBParser.AFTER - 315)) | (1 << (MariaDBParser.AGGREGATE - 315)) | (1 << (MariaDBParser.ALGORITHM - 315)) | (1 << (MariaDBParser.ANY - 315)) | (1 << (MariaDBParser.AT - 315)) | (1 << (MariaDBParser.AUTHORS - 315)) | (1 << (MariaDBParser.AUTOCOMMIT - 315)) | (1 << (MariaDBParser.AUTOEXTEND_SIZE - 315)) | (1 << (MariaDBParser.AUTO_INCREMENT - 315)) | (1 << (MariaDBParser.AVG_ROW_LENGTH - 315)) | (1 << (MariaDBParser.BEGIN - 315)) | (1 << (MariaDBParser.BINLOG - 315)) | (1 << (MariaDBParser.BIT - 315)))) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & ((1 << (MariaDBParser.BLOCK - 347)) | (1 << (MariaDBParser.BOOL - 347)) | (1 << (MariaDBParser.BOOLEAN - 347)) | (1 << (MariaDBParser.BTREE - 347)) | (1 << (MariaDBParser.CACHE - 347)) | (1 << (MariaDBParser.CASCADED - 347)) | (1 << (MariaDBParser.CHAIN - 347)) | (1 << (MariaDBParser.CHANGED - 347)) | (1 << (MariaDBParser.CHANNEL - 347)) | (1 << (MariaDBParser.CHECKSUM - 347)) | (1 << (MariaDBParser.PAGE_CHECKSUM - 347)) | (1 << (MariaDBParser.CIPHER - 347)) | (1 << (MariaDBParser.CLASS_ORIGIN - 347)) | (1 << (MariaDBParser.CLIENT - 347)) | (1 << (MariaDBParser.CLOSE - 347)) | (1 << (MariaDBParser.CLUSTERING - 347)) | (1 << (MariaDBParser.COALESCE - 347)) | (1 << (MariaDBParser.CODE - 347)) | (1 << (MariaDBParser.COLUMNS - 347)) | (1 << (MariaDBParser.COLUMN_FORMAT - 347)) | (1 << (MariaDBParser.COLUMN_NAME - 347)) | (1 << (MariaDBParser.COMMENT - 347)) | (1 << (MariaDBParser.COMMIT - 347)) | (1 << (MariaDBParser.COMPACT - 347)) | (1 << (MariaDBParser.COMPLETION - 347)) | (1 << (MariaDBParser.COMPRESSED - 347)) | (1 << (MariaDBParser.COMPRESSION - 347)) | (1 << (MariaDBParser.CONCURRENT - 347)) | (1 << (MariaDBParser.CONNECT - 347)) | (1 << (MariaDBParser.CONNECTION - 347)) | (1 << (MariaDBParser.CONSISTENT - 347)) | (1 << (MariaDBParser.CONSTRAINT_CATALOG - 347)))) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & ((1 << (MariaDBParser.CONSTRAINT_SCHEMA - 379)) | (1 << (MariaDBParser.CONSTRAINT_NAME - 379)) | (1 << (MariaDBParser.CONTAINS - 379)) | (1 << (MariaDBParser.CONTEXT - 379)) | (1 << (MariaDBParser.CONTRIBUTORS - 379)) | (1 << (MariaDBParser.COPY - 379)) | (1 << (MariaDBParser.CPU - 379)) | (1 << (MariaDBParser.CYCLE - 379)) | (1 << (MariaDBParser.CURSOR_NAME - 379)) | (1 << (MariaDBParser.DATA - 379)) | (1 << (MariaDBParser.DATAFILE - 379)) | (1 << (MariaDBParser.DEALLOCATE - 379)) | (1 << (MariaDBParser.DEFAULT_AUTH - 379)) | (1 << (MariaDBParser.DEFINER - 379)) | (1 << (MariaDBParser.DELAY_KEY_WRITE - 379)) | (1 << (MariaDBParser.DES_KEY_FILE - 379)) | (1 << (MariaDBParser.DIRECTORY - 379)) | (1 << (MariaDBParser.DISABLE - 379)) | (1 << (MariaDBParser.DISCARD - 379)) | (1 << (MariaDBParser.DISK - 379)) | (1 << (MariaDBParser.DO - 379)) | (1 << (MariaDBParser.DUMPFILE - 379)) | (1 << (MariaDBParser.DUPLICATE - 379)) | (1 << (MariaDBParser.DYNAMIC - 379)) | (1 << (MariaDBParser.ENABLE - 379)) | (1 << (MariaDBParser.ENCRYPTED - 379)) | (1 << (MariaDBParser.ENCRYPTION - 379)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ID - 379)) | (1 << (MariaDBParser.END - 379)) | (1 << (MariaDBParser.ENDS - 379)) | (1 << (MariaDBParser.ENGINE - 379)) | (1 << (MariaDBParser.ENGINES - 379)))) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & ((1 << (MariaDBParser.ERROR - 411)) | (1 << (MariaDBParser.ERRORS - 411)) | (1 << (MariaDBParser.ESCAPE - 411)) | (1 << (MariaDBParser.EVEN - 411)) | (1 << (MariaDBParser.EVENT - 411)) | (1 << (MariaDBParser.EVENTS - 411)) | (1 << (MariaDBParser.EVERY - 411)) | (1 << (MariaDBParser.EXCHANGE - 411)) | (1 << (MariaDBParser.EXCLUSIVE - 411)) | (1 << (MariaDBParser.EXPIRE - 411)) | (1 << (MariaDBParser.EXPORT - 411)) | (1 << (MariaDBParser.EXTENDED - 411)) | (1 << (MariaDBParser.EXTENT_SIZE - 411)) | (1 << (MariaDBParser.FAILED_LOGIN_ATTEMPTS - 411)) | (1 << (MariaDBParser.FAST - 411)) | (1 << (MariaDBParser.FAULTS - 411)) | (1 << (MariaDBParser.FIELDS - 411)) | (1 << (MariaDBParser.FILE_BLOCK_SIZE - 411)) | (1 << (MariaDBParser.FILTER - 411)) | (1 << (MariaDBParser.FIRST - 411)) | (1 << (MariaDBParser.FIXED - 411)) | (1 << (MariaDBParser.FLUSH - 411)) | (1 << (MariaDBParser.FOLLOWS - 411)) | (1 << (MariaDBParser.FOUND - 411)) | (1 << (MariaDBParser.FULL - 411)) | (1 << (MariaDBParser.FUNCTION - 411)) | (1 << (MariaDBParser.GENERAL - 411)) | (1 << (MariaDBParser.GLOBAL - 411)) | (1 << (MariaDBParser.GRANTS - 411)) | (1 << (MariaDBParser.GROUP_REPLICATION - 411)) | (1 << (MariaDBParser.HANDLER - 411)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (MariaDBParser.HASH - 443)) | (1 << (MariaDBParser.HELP - 443)) | (1 << (MariaDBParser.HISTORY - 443)) | (1 << (MariaDBParser.HOST - 443)) | (1 << (MariaDBParser.HOSTS - 443)) | (1 << (MariaDBParser.IDENTIFIED - 443)) | (1 << (MariaDBParser.IGNORE_SERVER_IDS - 443)) | (1 << (MariaDBParser.IMPORT - 443)) | (1 << (MariaDBParser.INCREMENT - 443)) | (1 << (MariaDBParser.INDEXES - 443)) | (1 << (MariaDBParser.INITIAL_SIZE - 443)) | (1 << (MariaDBParser.INPLACE - 443)) | (1 << (MariaDBParser.INSERT_METHOD - 443)) | (1 << (MariaDBParser.INSTALL - 443)) | (1 << (MariaDBParser.INSTANCE - 443)) | (1 << (MariaDBParser.INSTANT - 443)) | (1 << (MariaDBParser.INVISIBLE - 443)) | (1 << (MariaDBParser.INVOKER - 443)) | (1 << (MariaDBParser.IO - 443)) | (1 << (MariaDBParser.IO_THREAD - 443)) | (1 << (MariaDBParser.IPC - 443)) | (1 << (MariaDBParser.ISOLATION - 443)) | (1 << (MariaDBParser.ISSUER - 443)) | (1 << (MariaDBParser.JSON - 443)) | (1 << (MariaDBParser.KEY_BLOCK_SIZE - 443)) | (1 << (MariaDBParser.LANGUAGE - 443)) | (1 << (MariaDBParser.LAST - 443)) | (1 << (MariaDBParser.LEAVES - 443)) | (1 << (MariaDBParser.LESS - 443)) | (1 << (MariaDBParser.LEVEL - 443)) | (1 << (MariaDBParser.LIST - 443)) | (1 << (MariaDBParser.LOCAL - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (MariaDBParser.LOCALES - 475)) | (1 << (MariaDBParser.LOGFILE - 475)) | (1 << (MariaDBParser.LOGS - 475)) | (1 << (MariaDBParser.MASTER - 475)) | (1 << (MariaDBParser.MASTER_AUTO_POSITION - 475)) | (1 << (MariaDBParser.MASTER_CONNECT_RETRY - 475)) | (1 << (MariaDBParser.MASTER_DELAY - 475)) | (1 << (MariaDBParser.MASTER_HEARTBEAT_PERIOD - 475)) | (1 << (MariaDBParser.MASTER_HOST - 475)) | (1 << (MariaDBParser.MASTER_LOG_FILE - 475)) | (1 << (MariaDBParser.MASTER_LOG_POS - 475)) | (1 << (MariaDBParser.MASTER_PASSWORD - 475)) | (1 << (MariaDBParser.MASTER_PORT - 475)) | (1 << (MariaDBParser.MASTER_RETRY_COUNT - 475)) | (1 << (MariaDBParser.MASTER_SSL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CA - 475)) | (1 << (MariaDBParser.MASTER_SSL_CAPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_CERT - 475)) | (1 << (MariaDBParser.MASTER_SSL_CIPHER - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRLPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_KEY - 475)) | (1 << (MariaDBParser.MASTER_TLS_VERSION - 475)) | (1 << (MariaDBParser.MASTER_USER - 475)) | (1 << (MariaDBParser.MAX_CONNECTIONS_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_QUERIES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_ROWS - 475)) | (1 << (MariaDBParser.MAX_SIZE - 475)) | (1 << (MariaDBParser.MAX_UPDATES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_USER_CONNECTIONS - 475)) | (1 << (MariaDBParser.MEDIUM - 475)) | (1 << (MariaDBParser.MEMBER - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (MariaDBParser.MERGE - 507)) | (1 << (MariaDBParser.MESSAGE_TEXT - 507)) | (1 << (MariaDBParser.MID - 507)) | (1 << (MariaDBParser.MIGRATE - 507)) | (1 << (MariaDBParser.MIN_ROWS - 507)) | (1 << (MariaDBParser.MODE - 507)) | (1 << (MariaDBParser.MODIFY - 507)) | (1 << (MariaDBParser.MUTEX - 507)) | (1 << (MariaDBParser.MYSQL - 507)) | (1 << (MariaDBParser.MYSQL_ERRNO - 507)) | (1 << (MariaDBParser.NAME - 507)) | (1 << (MariaDBParser.NAMES - 507)) | (1 << (MariaDBParser.NCHAR - 507)) | (1 << (MariaDBParser.NEVER - 507)) | (1 << (MariaDBParser.NEXT - 507)) | (1 << (MariaDBParser.NO - 507)) | (1 << (MariaDBParser.NOCACHE - 507)) | (1 << (MariaDBParser.NOCOPY - 507)) | (1 << (MariaDBParser.NOCYCLE - 507)) | (1 << (MariaDBParser.NOMAXVALUE - 507)) | (1 << (MariaDBParser.NOMINVALUE - 507)) | (1 << (MariaDBParser.NOWAIT - 507)) | (1 << (MariaDBParser.NODEGROUP - 507)) | (1 << (MariaDBParser.NONE - 507)) | (1 << (MariaDBParser.ODBC - 507)) | (1 << (MariaDBParser.OFFLINE - 507)) | (1 << (MariaDBParser.OFFSET - 507)) | (1 << (MariaDBParser.OF - 507)) | (1 << (MariaDBParser.OJ - 507)) | (1 << (MariaDBParser.OLD_PASSWORD - 507)) | (1 << (MariaDBParser.ONE - 507)) | (1 << (MariaDBParser.ONLINE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (MariaDBParser.ONLY - 539)) | (1 << (MariaDBParser.OPEN - 539)) | (1 << (MariaDBParser.OPTIMIZER_COSTS - 539)) | (1 << (MariaDBParser.OPTIONS - 539)) | (1 << (MariaDBParser.OWNER - 539)) | (1 << (MariaDBParser.PACK_KEYS - 539)) | (1 << (MariaDBParser.PAGE - 539)) | (1 << (MariaDBParser.PARSER - 539)) | (1 << (MariaDBParser.PARTIAL - 539)) | (1 << (MariaDBParser.PARTITIONING - 539)) | (1 << (MariaDBParser.PARTITIONS - 539)) | (1 << (MariaDBParser.PASSWORD - 539)) | (1 << (MariaDBParser.PASSWORD_LOCK_TIME - 539)) | (1 << (MariaDBParser.PHASE - 539)) | (1 << (MariaDBParser.PLUGIN - 539)) | (1 << (MariaDBParser.PLUGIN_DIR - 539)) | (1 << (MariaDBParser.PLUGINS - 539)) | (1 << (MariaDBParser.PORT - 539)) | (1 << (MariaDBParser.PRECEDES - 539)) | (1 << (MariaDBParser.PREPARE - 539)) | (1 << (MariaDBParser.PRESERVE - 539)) | (1 << (MariaDBParser.PREV - 539)) | (1 << (MariaDBParser.PROCESSLIST - 539)) | (1 << (MariaDBParser.PROFILE - 539)) | (1 << (MariaDBParser.PROFILES - 539)) | (1 << (MariaDBParser.PROXY - 539)) | (1 << (MariaDBParser.QUERY - 539)) | (1 << (MariaDBParser.QUERY_RESPONSE_TIME - 539)) | (1 << (MariaDBParser.QUICK - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (MariaDBParser.REBUILD - 571)) | (1 << (MariaDBParser.RECOVER - 571)) | (1 << (MariaDBParser.RECURSIVE - 571)) | (1 << (MariaDBParser.REDO_BUFFER_SIZE - 571)) | (1 << (MariaDBParser.REDUNDANT - 571)) | (1 << (MariaDBParser.RELAY - 571)) | (1 << (MariaDBParser.RELAY_LOG_FILE - 571)) | (1 << (MariaDBParser.RELAY_LOG_POS - 571)) | (1 << (MariaDBParser.RELAYLOG - 571)) | (1 << (MariaDBParser.REMOVE - 571)) | (1 << (MariaDBParser.REORGANIZE - 571)) | (1 << (MariaDBParser.REPAIR - 571)) | (1 << (MariaDBParser.REPLICATE_DO_DB - 571)) | (1 << (MariaDBParser.REPLICATE_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_REWRITE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATION - 571)) | (1 << (MariaDBParser.RESET - 571)) | (1 << (MariaDBParser.RESTART - 571)) | (1 << (MariaDBParser.RESUME - 571)) | (1 << (MariaDBParser.RETURNED_SQLSTATE - 571)) | (1 << (MariaDBParser.RETURNS - 571)) | (1 << (MariaDBParser.REUSE - 571)) | (1 << (MariaDBParser.ROLE - 571)) | (1 << (MariaDBParser.ROLLBACK - 571)) | (1 << (MariaDBParser.ROLLUP - 571)) | (1 << (MariaDBParser.ROTATE - 571)) | (1 << (MariaDBParser.ROW - 571)))) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & ((1 << (MariaDBParser.ROWS - 603)) | (1 << (MariaDBParser.ROW_FORMAT - 603)) | (1 << (MariaDBParser.RTREE - 603)) | (1 << (MariaDBParser.SAVEPOINT - 603)) | (1 << (MariaDBParser.SCHEDULE - 603)) | (1 << (MariaDBParser.SECURITY - 603)) | (1 << (MariaDBParser.SEQUENCE - 603)) | (1 << (MariaDBParser.SERVER - 603)) | (1 << (MariaDBParser.SESSION - 603)) | (1 << (MariaDBParser.SHARE - 603)) | (1 << (MariaDBParser.SHARED - 603)) | (1 << (MariaDBParser.SIGNED - 603)) | (1 << (MariaDBParser.SIMPLE - 603)) | (1 << (MariaDBParser.SLAVE - 603)) | (1 << (MariaDBParser.SLAVES - 603)) | (1 << (MariaDBParser.SLOW - 603)) | (1 << (MariaDBParser.SNAPSHOT - 603)) | (1 << (MariaDBParser.SOCKET - 603)) | (1 << (MariaDBParser.SOME - 603)) | (1 << (MariaDBParser.SONAME - 603)) | (1 << (MariaDBParser.SOUNDS - 603)) | (1 << (MariaDBParser.SOURCE - 603)) | (1 << (MariaDBParser.SQL_AFTER_GTIDS - 603)) | (1 << (MariaDBParser.SQL_AFTER_MTS_GAPS - 603)) | (1 << (MariaDBParser.SQL_BEFORE_GTIDS - 603)) | (1 << (MariaDBParser.SQL_BUFFER_RESULT - 603)) | (1 << (MariaDBParser.SQL_CACHE - 603)) | (1 << (MariaDBParser.SQL_NO_CACHE - 603)) | (1 << (MariaDBParser.SQL_THREAD - 603)) | (1 << (MariaDBParser.START - 603)) | (1 << (MariaDBParser.STARTS - 603)) | (1 << (MariaDBParser.STATS_AUTO_RECALC - 603)))) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & ((1 << (MariaDBParser.STATS_PERSISTENT - 635)) | (1 << (MariaDBParser.STATS_SAMPLE_PAGES - 635)) | (1 << (MariaDBParser.STATUS - 635)) | (1 << (MariaDBParser.STOP - 635)) | (1 << (MariaDBParser.STORAGE - 635)) | (1 << (MariaDBParser.STRING - 635)) | (1 << (MariaDBParser.SUBCLASS_ORIGIN - 635)) | (1 << (MariaDBParser.SUBJECT - 635)) | (1 << (MariaDBParser.SUBPARTITION - 635)) | (1 << (MariaDBParser.SUBPARTITIONS - 635)) | (1 << (MariaDBParser.SUSPEND - 635)) | (1 << (MariaDBParser.SWAPS - 635)) | (1 << (MariaDBParser.SWITCHES - 635)) | (1 << (MariaDBParser.TABLE_NAME - 635)) | (1 << (MariaDBParser.TABLESPACE - 635)) | (1 << (MariaDBParser.TABLE_TYPE - 635)) | (1 << (MariaDBParser.TEMPORARY - 635)) | (1 << (MariaDBParser.TEMPTABLE - 635)) | (1 << (MariaDBParser.THAN - 635)) | (1 << (MariaDBParser.TRADITIONAL - 635)) | (1 << (MariaDBParser.TRANSACTION - 635)) | (1 << (MariaDBParser.TRANSACTIONAL - 635)) | (1 << (MariaDBParser.TRIGGERS - 635)) | (1 << (MariaDBParser.TRUNCATE - 635)) | (1 << (MariaDBParser.TYPES - 635)) | (1 << (MariaDBParser.UNBOUNDED - 635)) | (1 << (MariaDBParser.UNDEFINED - 635)) | (1 << (MariaDBParser.UNDOFILE - 635)) | (1 << (MariaDBParser.UNDO_BUFFER_SIZE - 635)) | (1 << (MariaDBParser.UNINSTALL - 635)) | (1 << (MariaDBParser.UNKNOWN - 635)))) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & ((1 << (MariaDBParser.UNTIL - 667)) | (1 << (MariaDBParser.UPGRADE - 667)) | (1 << (MariaDBParser.USER - 667)) | (1 << (MariaDBParser.USE_FRM - 667)) | (1 << (MariaDBParser.USER_RESOURCES - 667)) | (1 << (MariaDBParser.VALIDATION - 667)) | (1 << (MariaDBParser.VALUE - 667)) | (1 << (MariaDBParser.VARIABLES - 667)) | (1 << (MariaDBParser.VIEW - 667)) | (1 << (MariaDBParser.VIRTUAL - 667)) | (1 << (MariaDBParser.VISIBLE - 667)) | (1 << (MariaDBParser.WAIT - 667)) | (1 << (MariaDBParser.WARNINGS - 667)) | (1 << (MariaDBParser.WITHOUT - 667)) | (1 << (MariaDBParser.WORK - 667)) | (1 << (MariaDBParser.WRAPPER - 667)) | (1 << (MariaDBParser.WSREP_MEMBERSHIP - 667)) | (1 << (MariaDBParser.WSREP_STATUS - 667)) | (1 << (MariaDBParser.X509 - 667)) | (1 << (MariaDBParser.XA - 667)) | (1 << (MariaDBParser.XML - 667)) | (1 << (MariaDBParser.EUR - 667)) | (1 << (MariaDBParser.USA - 667)) | (1 << (MariaDBParser.JIS - 667)) | (1 << (MariaDBParser.ISO - 667)) | (1 << (MariaDBParser.INTERNAL - 667)) | (1 << (MariaDBParser.QUARTER - 667)) | (1 << (MariaDBParser.MONTH - 667)) | (1 << (MariaDBParser.DAY - 667)) | (1 << (MariaDBParser.HOUR - 667)))) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & ((1 << (MariaDBParser.MINUTE - 699)) | (1 << (MariaDBParser.WEEK - 699)) | (1 << (MariaDBParser.SECOND - 699)) | (1 << (MariaDBParser.MICROSECOND - 699)) | (1 << (MariaDBParser.USER_STATISTICS - 699)) | (1 << (MariaDBParser.CLIENT_STATISTICS - 699)) | (1 << (MariaDBParser.INDEX_STATISTICS - 699)) | (1 << (MariaDBParser.TABLE_STATISTICS - 699)) | (1 << (MariaDBParser.ADMIN - 699)) | (1 << (MariaDBParser.AUDIT_ADMIN - 699)) | (1 << (MariaDBParser.BACKUP_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ENCRYPTION_ADMIN - 699)) | (1 << (MariaDBParser.CLONE_ADMIN - 699)) | (1 << (MariaDBParser.CONNECTION_ADMIN - 699)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ADMIN - 699)) | (1 << (MariaDBParser.EXECUTE - 699)) | (1 << (MariaDBParser.FILE - 699)) | (1 << (MariaDBParser.FIREWALL_ADMIN - 699)) | (1 << (MariaDBParser.FIREWALL_USER - 699)) | (1 << (MariaDBParser.GROUP_REPLICATION_ADMIN - 699)) | (1 << (MariaDBParser.INNODB_REDO_LOG_ARCHIVE - 699)) | (1 << (MariaDBParser.INVOKE - 699)) | (1 << (MariaDBParser.LAMBDA - 699)) | (1 << (MariaDBParser.NDB_STORED_USER - 699)) | (1 << (MariaDBParser.PASSWORDLESS_USER_ADMIN - 699)))) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & ((1 << (MariaDBParser.PERSIST_RO_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.PRIVILEGES - 731)) | (1 << (MariaDBParser.PROCESS - 731)) | (1 << (MariaDBParser.RELOAD - 731)) | (1 << (MariaDBParser.REPLICATION_APPLIER - 731)) | (1 << (MariaDBParser.REPLICATION_SLAVE_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_USER - 731)) | (1 << (MariaDBParser.ROLE_ADMIN - 731)) | (1 << (MariaDBParser.ROUTINE - 731)) | (1 << (MariaDBParser.S3 - 731)) | (1 << (MariaDBParser.SESSION_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.SET_USER_ID - 731)) | (1 << (MariaDBParser.SHOW_ROUTINE - 731)) | (1 << (MariaDBParser.SHUTDOWN - 731)) | (1 << (MariaDBParser.SUPER - 731)) | (1 << (MariaDBParser.SYSTEM_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.TABLES - 731)) | (1 << (MariaDBParser.TABLE_ENCRYPTION_ADMIN - 731)) | (1 << (MariaDBParser.VERSION_TOKEN_ADMIN - 731)) | (1 << (MariaDBParser.XA_RECOVER_ADMIN - 731)) | (1 << (MariaDBParser.ARMSCII8 - 731)) | (1 << (MariaDBParser.ASCII - 731)) | (1 << (MariaDBParser.BIG5 - 731)) | (1 << (MariaDBParser.CP1250 - 731)) | (1 << (MariaDBParser.CP1251 - 731)) | (1 << (MariaDBParser.CP1256 - 731)) | (1 << (MariaDBParser.CP1257 - 731)) | (1 << (MariaDBParser.CP850 - 731)) | (1 << (MariaDBParser.CP852 - 731)) | (1 << (MariaDBParser.CP866 - 731)))) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & ((1 << (MariaDBParser.CP932 - 763)) | (1 << (MariaDBParser.DEC8 - 763)) | (1 << (MariaDBParser.EUCJPMS - 763)) | (1 << (MariaDBParser.EUCKR - 763)) | (1 << (MariaDBParser.GB18030 - 763)) | (1 << (MariaDBParser.GB2312 - 763)) | (1 << (MariaDBParser.GBK - 763)) | (1 << (MariaDBParser.GEOSTD8 - 763)) | (1 << (MariaDBParser.GREEK - 763)) | (1 << (MariaDBParser.HEBREW - 763)) | (1 << (MariaDBParser.HP8 - 763)) | (1 << (MariaDBParser.KEYBCS2 - 763)) | (1 << (MariaDBParser.KOI8R - 763)) | (1 << (MariaDBParser.KOI8U - 763)) | (1 << (MariaDBParser.LATIN1 - 763)) | (1 << (MariaDBParser.LATIN2 - 763)) | (1 << (MariaDBParser.LATIN5 - 763)) | (1 << (MariaDBParser.LATIN7 - 763)) | (1 << (MariaDBParser.MACCE - 763)) | (1 << (MariaDBParser.MACROMAN - 763)) | (1 << (MariaDBParser.SJIS - 763)) | (1 << (MariaDBParser.SWE7 - 763)) | (1 << (MariaDBParser.TIS620 - 763)) | (1 << (MariaDBParser.UCS2 - 763)) | (1 << (MariaDBParser.UJIS - 763)) | (1 << (MariaDBParser.UTF16 - 763)) | (1 << (MariaDBParser.UTF16LE - 763)) | (1 << (MariaDBParser.UTF32 - 763)) | (1 << (MariaDBParser.UTF8 - 763)) | (1 << (MariaDBParser.UTF8MB3 - 763)) | (1 << (MariaDBParser.UTF8MB4 - 763)) | (1 << (MariaDBParser.ARCHIVE - 763)))) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & ((1 << (MariaDBParser.BLACKHOLE - 795)) | (1 << (MariaDBParser.CSV - 795)) | (1 << (MariaDBParser.FEDERATED - 795)) | (1 << (MariaDBParser.INNODB - 795)) | (1 << (MariaDBParser.MEMORY - 795)) | (1 << (MariaDBParser.MRG_MYISAM - 795)) | (1 << (MariaDBParser.MYISAM - 795)) | (1 << (MariaDBParser.NDB - 795)) | (1 << (MariaDBParser.NDBCLUSTER - 795)) | (1 << (MariaDBParser.PERFORMANCE_SCHEMA - 795)) | (1 << (MariaDBParser.TOKUDB - 795)) | (1 << (MariaDBParser.REPEATABLE - 795)) | (1 << (MariaDBParser.COMMITTED - 795)) | (1 << (MariaDBParser.UNCOMMITTED - 795)) | (1 << (MariaDBParser.SERIALIZABLE - 795)) | (1 << (MariaDBParser.GEOMETRYCOLLECTION - 795)) | (1 << (MariaDBParser.LINESTRING - 795)) | (1 << (MariaDBParser.MULTILINESTRING - 795)) | (1 << (MariaDBParser.MULTIPOINT - 795)) | (1 << (MariaDBParser.MULTIPOLYGON - 795)) | (1 << (MariaDBParser.POINT - 795)) | (1 << (MariaDBParser.POLYGON - 795)) | (1 << (MariaDBParser.ABS - 795)) | (1 << (MariaDBParser.ACOS - 795)) | (1 << (MariaDBParser.ADDDATE - 795)) | (1 << (MariaDBParser.ADDTIME - 795)) | (1 << (MariaDBParser.AES_DECRYPT - 795)) | (1 << (MariaDBParser.AES_ENCRYPT - 795)) | (1 << (MariaDBParser.AREA - 795)) | (1 << (MariaDBParser.ASBINARY - 795)))) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & ((1 << (MariaDBParser.ASIN - 827)) | (1 << (MariaDBParser.ASTEXT - 827)) | (1 << (MariaDBParser.ASWKB - 827)) | (1 << (MariaDBParser.ASWKT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DECRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DERIVE - 827)) | (1 << (MariaDBParser.ASYMMETRIC_ENCRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_SIGN - 827)) | (1 << (MariaDBParser.ASYMMETRIC_VERIFY - 827)) | (1 << (MariaDBParser.ATAN - 827)) | (1 << (MariaDBParser.ATAN2 - 827)) | (1 << (MariaDBParser.BENCHMARK - 827)) | (1 << (MariaDBParser.BIN - 827)) | (1 << (MariaDBParser.BIT_COUNT - 827)) | (1 << (MariaDBParser.BIT_LENGTH - 827)) | (1 << (MariaDBParser.BUFFER - 827)) | (1 << (MariaDBParser.CATALOG_NAME - 827)) | (1 << (MariaDBParser.CEIL - 827)) | (1 << (MariaDBParser.CEILING - 827)) | (1 << (MariaDBParser.CENTROID - 827)) | (1 << (MariaDBParser.CHARACTER_LENGTH - 827)) | (1 << (MariaDBParser.CHARSET - 827)) | (1 << (MariaDBParser.CHAR_LENGTH - 827)) | (1 << (MariaDBParser.COERCIBILITY - 827)) | (1 << (MariaDBParser.COLLATION - 827)) | (1 << (MariaDBParser.COMPRESS - 827)) | (1 << (MariaDBParser.CONCAT - 827)) | (1 << (MariaDBParser.CONCAT_WS - 827)) | (1 << (MariaDBParser.CONNECTION_ID - 827)) | (1 << (MariaDBParser.CONV - 827)) | (1 << (MariaDBParser.CONVERT_TZ - 827)) | (1 << (MariaDBParser.COS - 827)))) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & ((1 << (MariaDBParser.COT - 859)) | (1 << (MariaDBParser.CRC32 - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY - 859)) | (1 << (MariaDBParser.CREATE_DH_PARAMETERS - 859)) | (1 << (MariaDBParser.CREATE_DIGEST - 859)) | (1 << (MariaDBParser.CROSSES - 859)) | (1 << (MariaDBParser.DATEDIFF - 859)) | (1 << (MariaDBParser.DATE_FORMAT - 859)) | (1 << (MariaDBParser.DAYNAME - 859)) | (1 << (MariaDBParser.DAYOFMONTH - 859)) | (1 << (MariaDBParser.DAYOFWEEK - 859)) | (1 << (MariaDBParser.DAYOFYEAR - 859)) | (1 << (MariaDBParser.DECODE - 859)) | (1 << (MariaDBParser.DEGREES - 859)) | (1 << (MariaDBParser.DES_DECRYPT - 859)) | (1 << (MariaDBParser.DES_ENCRYPT - 859)) | (1 << (MariaDBParser.DIMENSION - 859)) | (1 << (MariaDBParser.DISJOINT - 859)) | (1 << (MariaDBParser.ELT - 859)) | (1 << (MariaDBParser.ENCODE - 859)) | (1 << (MariaDBParser.ENCRYPT - 859)) | (1 << (MariaDBParser.ENDPOINT - 859)) | (1 << (MariaDBParser.ENGINE_ATTRIBUTE - 859)) | (1 << (MariaDBParser.ENVELOPE - 859)) | (1 << (MariaDBParser.EQUALS - 859)) | (1 << (MariaDBParser.EXP - 859)) | (1 << (MariaDBParser.EXPORT_SET - 859)) | (1 << (MariaDBParser.EXTERIORRING - 859)) | (1 << (MariaDBParser.EXTRACTVALUE - 859)) | (1 << (MariaDBParser.FIELD - 859)) | (1 << (MariaDBParser.FIND_IN_SET - 859)))) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & ((1 << (MariaDBParser.FLOOR - 891)) | (1 << (MariaDBParser.FORMAT - 891)) | (1 << (MariaDBParser.FOUND_ROWS - 891)) | (1 << (MariaDBParser.FROM_BASE64 - 891)) | (1 << (MariaDBParser.FROM_DAYS - 891)) | (1 << (MariaDBParser.FROM_UNIXTIME - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYN - 891)) | (1 << (MariaDBParser.GEOMETRYTYPE - 891)) | (1 << (MariaDBParser.GEOMFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMFROMWKB - 891)) | (1 << (MariaDBParser.GET_FORMAT - 891)) | (1 << (MariaDBParser.GET_LOCK - 891)) | (1 << (MariaDBParser.GLENGTH - 891)) | (1 << (MariaDBParser.GREATEST - 891)) | (1 << (MariaDBParser.GTID_SUBSET - 891)) | (1 << (MariaDBParser.GTID_SUBTRACT - 891)) | (1 << (MariaDBParser.HEX - 891)) | (1 << (MariaDBParser.IFNULL - 891)) | (1 << (MariaDBParser.INET6_ATON - 891)) | (1 << (MariaDBParser.INET6_NTOA - 891)) | (1 << (MariaDBParser.INET_ATON - 891)) | (1 << (MariaDBParser.INET_NTOA - 891)) | (1 << (MariaDBParser.INSTR - 891)) | (1 << (MariaDBParser.INTERIORRINGN - 891)) | (1 << (MariaDBParser.INTERSECTS - 891)) | (1 << (MariaDBParser.ISCLOSED - 891)))) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & ((1 << (MariaDBParser.ISEMPTY - 923)) | (1 << (MariaDBParser.ISNULL - 923)) | (1 << (MariaDBParser.ISSIMPLE - 923)) | (1 << (MariaDBParser.IS_FREE_LOCK - 923)) | (1 << (MariaDBParser.IS_IPV4 - 923)) | (1 << (MariaDBParser.IS_IPV4_COMPAT - 923)) | (1 << (MariaDBParser.IS_IPV4_MAPPED - 923)) | (1 << (MariaDBParser.IS_IPV6 - 923)) | (1 << (MariaDBParser.IS_USED_LOCK - 923)) | (1 << (MariaDBParser.LAST_INSERT_ID - 923)) | (1 << (MariaDBParser.LCASE - 923)) | (1 << (MariaDBParser.LEAST - 923)) | (1 << (MariaDBParser.LENGTH - 923)) | (1 << (MariaDBParser.LINEFROMTEXT - 923)) | (1 << (MariaDBParser.LINEFROMWKB - 923)) | (1 << (MariaDBParser.LINESTRINGFROMTEXT - 923)) | (1 << (MariaDBParser.LINESTRINGFROMWKB - 923)) | (1 << (MariaDBParser.LN - 923)) | (1 << (MariaDBParser.LOAD_FILE - 923)) | (1 << (MariaDBParser.LOCATE - 923)) | (1 << (MariaDBParser.LOG - 923)) | (1 << (MariaDBParser.LOG10 - 923)) | (1 << (MariaDBParser.LOG2 - 923)) | (1 << (MariaDBParser.LOWER - 923)) | (1 << (MariaDBParser.LPAD - 923)) | (1 << (MariaDBParser.LTRIM - 923)) | (1 << (MariaDBParser.MAKEDATE - 923)) | (1 << (MariaDBParser.MAKETIME - 923)) | (1 << (MariaDBParser.MAKE_SET - 923)) | (1 << (MariaDBParser.MASTER_POS_WAIT - 923)) | (1 << (MariaDBParser.MBRCONTAINS - 923)) | (1 << (MariaDBParser.MBRDISJOINT - 923)))) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & ((1 << (MariaDBParser.MBREQUAL - 955)) | (1 << (MariaDBParser.MBRINTERSECTS - 955)) | (1 << (MariaDBParser.MBROVERLAPS - 955)) | (1 << (MariaDBParser.MBRTOUCHES - 955)) | (1 << (MariaDBParser.MBRWITHIN - 955)) | (1 << (MariaDBParser.MD5 - 955)) | (1 << (MariaDBParser.MLINEFROMTEXT - 955)) | (1 << (MariaDBParser.MLINEFROMWKB - 955)) | (1 << (MariaDBParser.MONTHNAME - 955)) | (1 << (MariaDBParser.MPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MPOLYFROMTEXT - 955)) | (1 << (MariaDBParser.MPOLYFROMWKB - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMTEXT - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMWKB - 955)) | (1 << (MariaDBParser.NAME_CONST - 955)) | (1 << (MariaDBParser.NULLIF - 955)) | (1 << (MariaDBParser.NUMGEOMETRIES - 955)) | (1 << (MariaDBParser.NUMINTERIORRINGS - 955)) | (1 << (MariaDBParser.NUMPOINTS - 955)) | (1 << (MariaDBParser.OCT - 955)) | (1 << (MariaDBParser.OCTET_LENGTH - 955)) | (1 << (MariaDBParser.ORD - 955)) | (1 << (MariaDBParser.OVERLAPS - 955)) | (1 << (MariaDBParser.PERIOD_ADD - 955)) | (1 << (MariaDBParser.PERIOD_DIFF - 955)) | (1 << (MariaDBParser.PI - 955)) | (1 << (MariaDBParser.POINTFROMTEXT - 955)))) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & ((1 << (MariaDBParser.POINTFROMWKB - 987)) | (1 << (MariaDBParser.POINTN - 987)) | (1 << (MariaDBParser.POLYFROMTEXT - 987)) | (1 << (MariaDBParser.POLYFROMWKB - 987)) | (1 << (MariaDBParser.POLYGONFROMTEXT - 987)) | (1 << (MariaDBParser.POLYGONFROMWKB - 987)) | (1 << (MariaDBParser.POW - 987)) | (1 << (MariaDBParser.POWER - 987)) | (1 << (MariaDBParser.QUOTE - 987)) | (1 << (MariaDBParser.RADIANS - 987)) | (1 << (MariaDBParser.RAND - 987)) | (1 << (MariaDBParser.RANDOM_BYTES - 987)) | (1 << (MariaDBParser.RELEASE_LOCK - 987)) | (1 << (MariaDBParser.REVERSE - 987)) | (1 << (MariaDBParser.ROUND - 987)) | (1 << (MariaDBParser.ROW_COUNT - 987)) | (1 << (MariaDBParser.RPAD - 987)) | (1 << (MariaDBParser.RTRIM - 987)) | (1 << (MariaDBParser.SEC_TO_TIME - 987)) | (1 << (MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE - 987)) | (1 << (MariaDBParser.SESSION_USER - 987)) | (1 << (MariaDBParser.SHA - 987)) | (1 << (MariaDBParser.SHA1 - 987)) | (1 << (MariaDBParser.SHA2 - 987)) | (1 << (MariaDBParser.SCHEMA_NAME - 987)) | (1 << (MariaDBParser.SIGN - 987)) | (1 << (MariaDBParser.SIN - 987)) | (1 << (MariaDBParser.SLEEP - 987)) | (1 << (MariaDBParser.SOUNDEX - 987)) | (1 << (MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS - 987)) | (1 << (MariaDBParser.SQRT - 987)) | (1 << (MariaDBParser.SRID - 987)))) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & ((1 << (MariaDBParser.STARTPOINT - 1019)) | (1 << (MariaDBParser.STRCMP - 1019)) | (1 << (MariaDBParser.STR_TO_DATE - 1019)) | (1 << (MariaDBParser.ST_AREA - 1019)) | (1 << (MariaDBParser.ST_ASBINARY - 1019)) | (1 << (MariaDBParser.ST_ASTEXT - 1019)) | (1 << (MariaDBParser.ST_ASWKB - 1019)) | (1 << (MariaDBParser.ST_ASWKT - 1019)) | (1 << (MariaDBParser.ST_BUFFER - 1019)) | (1 << (MariaDBParser.ST_CENTROID - 1019)) | (1 << (MariaDBParser.ST_CONTAINS - 1019)) | (1 << (MariaDBParser.ST_CROSSES - 1019)) | (1 << (MariaDBParser.ST_DIFFERENCE - 1019)) | (1 << (MariaDBParser.ST_DIMENSION - 1019)) | (1 << (MariaDBParser.ST_DISJOINT - 1019)) | (1 << (MariaDBParser.ST_DISTANCE - 1019)) | (1 << (MariaDBParser.ST_ENDPOINT - 1019)) | (1 << (MariaDBParser.ST_ENVELOPE - 1019)) | (1 << (MariaDBParser.ST_EQUALS - 1019)) | (1 << (MariaDBParser.ST_EXTERIORRING - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYN - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYTYPE - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMWKB - 1019)) | (1 << (MariaDBParser.ST_INTERIORRINGN - 1019)))) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & ((1 << (MariaDBParser.ST_INTERSECTION - 1051)) | (1 << (MariaDBParser.ST_INTERSECTS - 1051)) | (1 << (MariaDBParser.ST_ISCLOSED - 1051)) | (1 << (MariaDBParser.ST_ISEMPTY - 1051)) | (1 << (MariaDBParser.ST_ISSIMPLE - 1051)) | (1 << (MariaDBParser.ST_LINEFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINEFROMWKB - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMWKB - 1051)) | (1 << (MariaDBParser.ST_NUMGEOMETRIES - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRING - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRINGS - 1051)) | (1 << (MariaDBParser.ST_NUMPOINTS - 1051)) | (1 << (MariaDBParser.ST_OVERLAPS - 1051)) | (1 << (MariaDBParser.ST_POINTFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POINTFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POINTN - 1051)) | (1 << (MariaDBParser.ST_POLYFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMWKB - 1051)) | (1 << (MariaDBParser.ST_SRID - 1051)) | (1 << (MariaDBParser.ST_STARTPOINT - 1051)) | (1 << (MariaDBParser.ST_SYMDIFFERENCE - 1051)) | (1 << (MariaDBParser.ST_TOUCHES - 1051)) | (1 << (MariaDBParser.ST_UNION - 1051)) | (1 << (MariaDBParser.ST_WITHIN - 1051)) | (1 << (MariaDBParser.ST_X - 1051)) | (1 << (MariaDBParser.ST_Y - 1051)) | (1 << (MariaDBParser.SUBDATE - 1051)) | (1 << (MariaDBParser.SUBSTRING_INDEX - 1051)) | (1 << (MariaDBParser.SUBTIME - 1051)))) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & ((1 << (MariaDBParser.SYSTEM_USER - 1083)) | (1 << (MariaDBParser.TAN - 1083)) | (1 << (MariaDBParser.TIMEDIFF - 1083)) | (1 << (MariaDBParser.TIMESTAMPADD - 1083)) | (1 << (MariaDBParser.TIMESTAMPDIFF - 1083)) | (1 << (MariaDBParser.TIME_FORMAT - 1083)) | (1 << (MariaDBParser.TIME_TO_SEC - 1083)) | (1 << (MariaDBParser.TOUCHES - 1083)) | (1 << (MariaDBParser.TO_BASE64 - 1083)) | (1 << (MariaDBParser.TO_DAYS - 1083)) | (1 << (MariaDBParser.TO_SECONDS - 1083)) | (1 << (MariaDBParser.UCASE - 1083)) | (1 << (MariaDBParser.UNCOMPRESS - 1083)) | (1 << (MariaDBParser.UNCOMPRESSED_LENGTH - 1083)) | (1 << (MariaDBParser.UNHEX - 1083)) | (1 << (MariaDBParser.UNIX_TIMESTAMP - 1083)) | (1 << (MariaDBParser.UPDATEXML - 1083)) | (1 << (MariaDBParser.UPPER - 1083)) | (1 << (MariaDBParser.UUID - 1083)) | (1 << (MariaDBParser.UUID_SHORT - 1083)) | (1 << (MariaDBParser.VALIDATE_PASSWORD_STRENGTH - 1083)) | (1 << (MariaDBParser.VERSION - 1083)) | (1 << (MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1083)) | (1 << (MariaDBParser.WEEKDAY - 1083)) | (1 << (MariaDBParser.WEEKOFYEAR - 1083)) | (1 << (MariaDBParser.WEIGHT_STRING - 1083)) | (1 << (MariaDBParser.WITHIN - 1083)) | (1 << (MariaDBParser.YEARWEEK - 1083)) | (1 << (MariaDBParser.Y_FUNCTION - 1083)) | (1 << (MariaDBParser.X_FUNCTION - 1083)) | (1 << (MariaDBParser.VIA - 1083)) | (1 << (MariaDBParser.LASTVAL - 1083)))) !== 0) || ((((_la - 1115)) & ~0x1F) === 0 && ((1 << (_la - 1115)) & ((1 << (MariaDBParser.NEXTVAL - 1115)) | (1 << (MariaDBParser.SETVAL - 1115)) | (1 << (MariaDBParser.PREVIOUS - 1115)) | (1 << (MariaDBParser.PERSISTENT - 1115)) | (1 << (MariaDBParser.BINLOG_MONITOR - 1115)) | (1 << (MariaDBParser.BINLOG_REPLAY - 1115)) | (1 << (MariaDBParser.FEDERATED_ADMIN - 1115)) | (1 << (MariaDBParser.READ_ONLY_ADMIN - 1115)) | (1 << (MariaDBParser.REPLICA - 1115)) | (1 << (MariaDBParser.REPLICAS - 1115)) | (1 << (MariaDBParser.REPLICATION_MASTER_ADMIN - 1115)) | (1 << (MariaDBParser.MONITOR - 1115)) | (1 << (MariaDBParser.READ_ONLY - 1115)) | (1 << (MariaDBParser.REPLAY - 1115)) | (1 << (MariaDBParser.MOD - 1115)))) !== 0) || ((((_la - 1166)) & ~0x1F) === 0 && ((1 << (_la - 1166)) & ((1 << (MariaDBParser.CHARSET_REVERSE_QOUTE_STRING - 1166)) | (1 << (MariaDBParser.STRING_LITERAL - 1166)) | (1 << (MariaDBParser.ID - 1166)))) !== 0)) {
					{
					this.state = 2746;
					(_localctx as AlterByAddUniqueKeyContext)._indexName = this.uid();
					}
				}

				this.state = 2750;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.USING) {
					{
					this.state = 2749;
					this.indexType();
					}
				}

				this.state = 2752;
				this.indexColumnNames();
				this.state = 2756;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.IGNORED || _la === MariaDBParser.NOT || _la === MariaDBParser.USING || _la === MariaDBParser.WITH || _la === MariaDBParser.CLUSTERING || _la === MariaDBParser.COMMENT || _la === MariaDBParser.INVISIBLE || _la === MariaDBParser.KEY_BLOCK_SIZE || _la === MariaDBParser.VISIBLE || _la === MariaDBParser.ENGINE_ATTRIBUTE || _la === MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					this.state = 2753;
					this.indexOption();
					}
					}
					this.state = 2758;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 7:
				_localctx = new AlterByAddSpecialIndexContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 2759;
				this.match(MariaDBParser.ADD);
				this.state = 2760;
				(_localctx as AlterByAddSpecialIndexContext)._keyType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.FULLTEXT || _la === MariaDBParser.SPATIAL)) {
					(_localctx as AlterByAddSpecialIndexContext)._keyType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2762;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.INDEX || _la === MariaDBParser.KEY) {
					{
					this.state = 2761;
					(_localctx as AlterByAddSpecialIndexContext)._indexFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MariaDBParser.INDEX || _la === MariaDBParser.KEY)) {
						(_localctx as AlterByAddSpecialIndexContext)._indexFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 2765;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MariaDBParser.ATTRIBUTE) | (1 << MariaDBParser.BODY) | (1 << MariaDBParser.BUCKETS) | (1 << MariaDBParser.CONDITION))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (MariaDBParser.CURRENT - 36)) | (1 << (MariaDBParser.CURRENT_ROLE - 36)) | (1 << (MariaDBParser.CURRENT_USER - 36)) | (1 << (MariaDBParser.DATABASE - 36)) | (1 << (MariaDBParser.DEFAULT - 36)) | (1 << (MariaDBParser.DIAGNOSTICS - 36)) | (1 << (MariaDBParser.EMPTY - 36)) | (1 << (MariaDBParser.EXCEPT - 36)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (MariaDBParser.GROUP - 73)) | (1 << (MariaDBParser.IF - 73)) | (1 << (MariaDBParser.IGNORED - 73)) | (1 << (MariaDBParser.INSERT - 73)) | (1 << (MariaDBParser.LATERAL - 73)) | (1 << (MariaDBParser.LEFT - 73)) | (1 << (MariaDBParser.LOCKED - 73)))) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & ((1 << (MariaDBParser.MAXVALUE - 110)) | (1 << (MariaDBParser.MINVALUE - 110)) | (1 << (MariaDBParser.NUMBER - 110)) | (1 << (MariaDBParser.OPTIONAL - 110)) | (1 << (MariaDBParser.ORDER - 110)) | (1 << (MariaDBParser.PRIMARY - 110)) | (1 << (MariaDBParser.PACKAGE - 110)))) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (MariaDBParser.REPLACE - 142)) | (1 << (MariaDBParser.RIGHT - 142)) | (1 << (MariaDBParser.SCHEMA - 142)) | (1 << (MariaDBParser.SKIP_ - 142)) | (1 << (MariaDBParser.STACKED - 142)) | (1 << (MariaDBParser.STATEMENT - 142)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MariaDBParser.DATE - 217)) | (1 << (MariaDBParser.TIME - 217)) | (1 << (MariaDBParser.TIMESTAMP - 217)) | (1 << (MariaDBParser.DATETIME - 217)) | (1 << (MariaDBParser.YEAR - 217)) | (1 << (MariaDBParser.BINARY - 217)) | (1 << (MariaDBParser.TEXT - 217)) | (1 << (MariaDBParser.ENUM - 217)) | (1 << (MariaDBParser.SERIAL - 217)))) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & ((1 << (MariaDBParser.JSON_ARRAY - 251)) | (1 << (MariaDBParser.JSON_ARRAYAGG - 251)) | (1 << (MariaDBParser.JSON_ARRAY_APPEND - 251)) | (1 << (MariaDBParser.JSON_ARRAY_INSERT - 251)) | (1 << (MariaDBParser.JSON_CONTAINS - 251)) | (1 << (MariaDBParser.JSON_CONTAINS_PATH - 251)) | (1 << (MariaDBParser.JSON_DEPTH - 251)) | (1 << (MariaDBParser.JSON_EXTRACT - 251)) | (1 << (MariaDBParser.JSON_INSERT - 251)) | (1 << (MariaDBParser.JSON_KEYS - 251)) | (1 << (MariaDBParser.JSON_LENGTH - 251)) | (1 << (MariaDBParser.JSON_MERGE - 251)) | (1 << (MariaDBParser.JSON_MERGE_PATCH - 251)) | (1 << (MariaDBParser.JSON_MERGE_PRESERVE - 251)) | (1 << (MariaDBParser.JSON_OBJECT - 251)) | (1 << (MariaDBParser.JSON_OBJECTAGG - 251)) | (1 << (MariaDBParser.JSON_OVERLAPS - 251)) | (1 << (MariaDBParser.JSON_PRETTY - 251)) | (1 << (MariaDBParser.JSON_QUOTE - 251)) | (1 << (MariaDBParser.JSON_REMOVE - 251)) | (1 << (MariaDBParser.JSON_REPLACE - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALID - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT - 251)) | (1 << (MariaDBParser.JSON_SEARCH - 251)) | (1 << (MariaDBParser.JSON_SET - 251)) | (1 << (MariaDBParser.JSON_STORAGE_FREE - 251)) | (1 << (MariaDBParser.JSON_STORAGE_SIZE - 251)) | (1 << (MariaDBParser.JSON_TABLE - 251)) | (1 << (MariaDBParser.JSON_TYPE - 251)) | (1 << (MariaDBParser.JSON_UNQUOTE - 251)) | (1 << (MariaDBParser.JSON_VALID - 251)) | (1 << (MariaDBParser.JSON_VALUE - 251)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (MariaDBParser.NESTED - 283)) | (1 << (MariaDBParser.ORDINALITY - 283)) | (1 << (MariaDBParser.PATH - 283)) | (1 << (MariaDBParser.AVG - 283)) | (1 << (MariaDBParser.BIT_AND - 283)) | (1 << (MariaDBParser.BIT_OR - 283)) | (1 << (MariaDBParser.BIT_XOR - 283)) | (1 << (MariaDBParser.COUNT - 283)) | (1 << (MariaDBParser.CUME_DIST - 283)) | (1 << (MariaDBParser.DENSE_RANK - 283)) | (1 << (MariaDBParser.FIRST_VALUE - 283)) | (1 << (MariaDBParser.GROUP_CONCAT - 283)) | (1 << (MariaDBParser.LAG - 283)) | (1 << (MariaDBParser.LAST_VALUE - 283)) | (1 << (MariaDBParser.LEAD - 283)) | (1 << (MariaDBParser.MAX - 283)) | (1 << (MariaDBParser.MIN - 283)) | (1 << (MariaDBParser.NTILE - 283)) | (1 << (MariaDBParser.NTH_VALUE - 283)) | (1 << (MariaDBParser.PERCENT_RANK - 283)) | (1 << (MariaDBParser.RANK - 283)) | (1 << (MariaDBParser.ROW_NUMBER - 283)) | (1 << (MariaDBParser.STD - 283)) | (1 << (MariaDBParser.STDDEV - 283)) | (1 << (MariaDBParser.STDDEV_POP - 283)) | (1 << (MariaDBParser.STDDEV_SAMP - 283)) | (1 << (MariaDBParser.SUM - 283)) | (1 << (MariaDBParser.VAR_POP - 283)) | (1 << (MariaDBParser.VAR_SAMP - 283)) | (1 << (MariaDBParser.VARIANCE - 283)) | (1 << (MariaDBParser.CURRENT_DATE - 283)) | (1 << (MariaDBParser.CURRENT_TIME - 283)))) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & ((1 << (MariaDBParser.CURRENT_TIMESTAMP - 315)) | (1 << (MariaDBParser.LOCALTIME - 315)) | (1 << (MariaDBParser.CURDATE - 315)) | (1 << (MariaDBParser.CURTIME - 315)) | (1 << (MariaDBParser.DATE_ADD - 315)) | (1 << (MariaDBParser.DATE_SUB - 315)) | (1 << (MariaDBParser.LOCALTIMESTAMP - 315)) | (1 << (MariaDBParser.NOW - 315)) | (1 << (MariaDBParser.POSITION - 315)) | (1 << (MariaDBParser.SUBSTR - 315)) | (1 << (MariaDBParser.SUBSTRING - 315)) | (1 << (MariaDBParser.SYSDATE - 315)) | (1 << (MariaDBParser.TRIM - 315)) | (1 << (MariaDBParser.UTC_DATE - 315)) | (1 << (MariaDBParser.UTC_TIME - 315)) | (1 << (MariaDBParser.UTC_TIMESTAMP - 315)) | (1 << (MariaDBParser.ACCOUNT - 315)) | (1 << (MariaDBParser.ACTION - 315)) | (1 << (MariaDBParser.AFTER - 315)) | (1 << (MariaDBParser.AGGREGATE - 315)) | (1 << (MariaDBParser.ALGORITHM - 315)) | (1 << (MariaDBParser.ANY - 315)) | (1 << (MariaDBParser.AT - 315)) | (1 << (MariaDBParser.AUTHORS - 315)) | (1 << (MariaDBParser.AUTOCOMMIT - 315)) | (1 << (MariaDBParser.AUTOEXTEND_SIZE - 315)) | (1 << (MariaDBParser.AUTO_INCREMENT - 315)) | (1 << (MariaDBParser.AVG_ROW_LENGTH - 315)) | (1 << (MariaDBParser.BEGIN - 315)) | (1 << (MariaDBParser.BINLOG - 315)) | (1 << (MariaDBParser.BIT - 315)))) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & ((1 << (MariaDBParser.BLOCK - 347)) | (1 << (MariaDBParser.BOOL - 347)) | (1 << (MariaDBParser.BOOLEAN - 347)) | (1 << (MariaDBParser.BTREE - 347)) | (1 << (MariaDBParser.CACHE - 347)) | (1 << (MariaDBParser.CASCADED - 347)) | (1 << (MariaDBParser.CHAIN - 347)) | (1 << (MariaDBParser.CHANGED - 347)) | (1 << (MariaDBParser.CHANNEL - 347)) | (1 << (MariaDBParser.CHECKSUM - 347)) | (1 << (MariaDBParser.PAGE_CHECKSUM - 347)) | (1 << (MariaDBParser.CIPHER - 347)) | (1 << (MariaDBParser.CLASS_ORIGIN - 347)) | (1 << (MariaDBParser.CLIENT - 347)) | (1 << (MariaDBParser.CLOSE - 347)) | (1 << (MariaDBParser.CLUSTERING - 347)) | (1 << (MariaDBParser.COALESCE - 347)) | (1 << (MariaDBParser.CODE - 347)) | (1 << (MariaDBParser.COLUMNS - 347)) | (1 << (MariaDBParser.COLUMN_FORMAT - 347)) | (1 << (MariaDBParser.COLUMN_NAME - 347)) | (1 << (MariaDBParser.COMMENT - 347)) | (1 << (MariaDBParser.COMMIT - 347)) | (1 << (MariaDBParser.COMPACT - 347)) | (1 << (MariaDBParser.COMPLETION - 347)) | (1 << (MariaDBParser.COMPRESSED - 347)) | (1 << (MariaDBParser.COMPRESSION - 347)) | (1 << (MariaDBParser.CONCURRENT - 347)) | (1 << (MariaDBParser.CONNECT - 347)) | (1 << (MariaDBParser.CONNECTION - 347)) | (1 << (MariaDBParser.CONSISTENT - 347)) | (1 << (MariaDBParser.CONSTRAINT_CATALOG - 347)))) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & ((1 << (MariaDBParser.CONSTRAINT_SCHEMA - 379)) | (1 << (MariaDBParser.CONSTRAINT_NAME - 379)) | (1 << (MariaDBParser.CONTAINS - 379)) | (1 << (MariaDBParser.CONTEXT - 379)) | (1 << (MariaDBParser.CONTRIBUTORS - 379)) | (1 << (MariaDBParser.COPY - 379)) | (1 << (MariaDBParser.CPU - 379)) | (1 << (MariaDBParser.CYCLE - 379)) | (1 << (MariaDBParser.CURSOR_NAME - 379)) | (1 << (MariaDBParser.DATA - 379)) | (1 << (MariaDBParser.DATAFILE - 379)) | (1 << (MariaDBParser.DEALLOCATE - 379)) | (1 << (MariaDBParser.DEFAULT_AUTH - 379)) | (1 << (MariaDBParser.DEFINER - 379)) | (1 << (MariaDBParser.DELAY_KEY_WRITE - 379)) | (1 << (MariaDBParser.DES_KEY_FILE - 379)) | (1 << (MariaDBParser.DIRECTORY - 379)) | (1 << (MariaDBParser.DISABLE - 379)) | (1 << (MariaDBParser.DISCARD - 379)) | (1 << (MariaDBParser.DISK - 379)) | (1 << (MariaDBParser.DO - 379)) | (1 << (MariaDBParser.DUMPFILE - 379)) | (1 << (MariaDBParser.DUPLICATE - 379)) | (1 << (MariaDBParser.DYNAMIC - 379)) | (1 << (MariaDBParser.ENABLE - 379)) | (1 << (MariaDBParser.ENCRYPTED - 379)) | (1 << (MariaDBParser.ENCRYPTION - 379)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ID - 379)) | (1 << (MariaDBParser.END - 379)) | (1 << (MariaDBParser.ENDS - 379)) | (1 << (MariaDBParser.ENGINE - 379)) | (1 << (MariaDBParser.ENGINES - 379)))) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & ((1 << (MariaDBParser.ERROR - 411)) | (1 << (MariaDBParser.ERRORS - 411)) | (1 << (MariaDBParser.ESCAPE - 411)) | (1 << (MariaDBParser.EVEN - 411)) | (1 << (MariaDBParser.EVENT - 411)) | (1 << (MariaDBParser.EVENTS - 411)) | (1 << (MariaDBParser.EVERY - 411)) | (1 << (MariaDBParser.EXCHANGE - 411)) | (1 << (MariaDBParser.EXCLUSIVE - 411)) | (1 << (MariaDBParser.EXPIRE - 411)) | (1 << (MariaDBParser.EXPORT - 411)) | (1 << (MariaDBParser.EXTENDED - 411)) | (1 << (MariaDBParser.EXTENT_SIZE - 411)) | (1 << (MariaDBParser.FAILED_LOGIN_ATTEMPTS - 411)) | (1 << (MariaDBParser.FAST - 411)) | (1 << (MariaDBParser.FAULTS - 411)) | (1 << (MariaDBParser.FIELDS - 411)) | (1 << (MariaDBParser.FILE_BLOCK_SIZE - 411)) | (1 << (MariaDBParser.FILTER - 411)) | (1 << (MariaDBParser.FIRST - 411)) | (1 << (MariaDBParser.FIXED - 411)) | (1 << (MariaDBParser.FLUSH - 411)) | (1 << (MariaDBParser.FOLLOWS - 411)) | (1 << (MariaDBParser.FOUND - 411)) | (1 << (MariaDBParser.FULL - 411)) | (1 << (MariaDBParser.FUNCTION - 411)) | (1 << (MariaDBParser.GENERAL - 411)) | (1 << (MariaDBParser.GLOBAL - 411)) | (1 << (MariaDBParser.GRANTS - 411)) | (1 << (MariaDBParser.GROUP_REPLICATION - 411)) | (1 << (MariaDBParser.HANDLER - 411)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (MariaDBParser.HASH - 443)) | (1 << (MariaDBParser.HELP - 443)) | (1 << (MariaDBParser.HISTORY - 443)) | (1 << (MariaDBParser.HOST - 443)) | (1 << (MariaDBParser.HOSTS - 443)) | (1 << (MariaDBParser.IDENTIFIED - 443)) | (1 << (MariaDBParser.IGNORE_SERVER_IDS - 443)) | (1 << (MariaDBParser.IMPORT - 443)) | (1 << (MariaDBParser.INCREMENT - 443)) | (1 << (MariaDBParser.INDEXES - 443)) | (1 << (MariaDBParser.INITIAL_SIZE - 443)) | (1 << (MariaDBParser.INPLACE - 443)) | (1 << (MariaDBParser.INSERT_METHOD - 443)) | (1 << (MariaDBParser.INSTALL - 443)) | (1 << (MariaDBParser.INSTANCE - 443)) | (1 << (MariaDBParser.INSTANT - 443)) | (1 << (MariaDBParser.INVISIBLE - 443)) | (1 << (MariaDBParser.INVOKER - 443)) | (1 << (MariaDBParser.IO - 443)) | (1 << (MariaDBParser.IO_THREAD - 443)) | (1 << (MariaDBParser.IPC - 443)) | (1 << (MariaDBParser.ISOLATION - 443)) | (1 << (MariaDBParser.ISSUER - 443)) | (1 << (MariaDBParser.JSON - 443)) | (1 << (MariaDBParser.KEY_BLOCK_SIZE - 443)) | (1 << (MariaDBParser.LANGUAGE - 443)) | (1 << (MariaDBParser.LAST - 443)) | (1 << (MariaDBParser.LEAVES - 443)) | (1 << (MariaDBParser.LESS - 443)) | (1 << (MariaDBParser.LEVEL - 443)) | (1 << (MariaDBParser.LIST - 443)) | (1 << (MariaDBParser.LOCAL - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (MariaDBParser.LOCALES - 475)) | (1 << (MariaDBParser.LOGFILE - 475)) | (1 << (MariaDBParser.LOGS - 475)) | (1 << (MariaDBParser.MASTER - 475)) | (1 << (MariaDBParser.MASTER_AUTO_POSITION - 475)) | (1 << (MariaDBParser.MASTER_CONNECT_RETRY - 475)) | (1 << (MariaDBParser.MASTER_DELAY - 475)) | (1 << (MariaDBParser.MASTER_HEARTBEAT_PERIOD - 475)) | (1 << (MariaDBParser.MASTER_HOST - 475)) | (1 << (MariaDBParser.MASTER_LOG_FILE - 475)) | (1 << (MariaDBParser.MASTER_LOG_POS - 475)) | (1 << (MariaDBParser.MASTER_PASSWORD - 475)) | (1 << (MariaDBParser.MASTER_PORT - 475)) | (1 << (MariaDBParser.MASTER_RETRY_COUNT - 475)) | (1 << (MariaDBParser.MASTER_SSL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CA - 475)) | (1 << (MariaDBParser.MASTER_SSL_CAPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_CERT - 475)) | (1 << (MariaDBParser.MASTER_SSL_CIPHER - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRLPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_KEY - 475)) | (1 << (MariaDBParser.MASTER_TLS_VERSION - 475)) | (1 << (MariaDBParser.MASTER_USER - 475)) | (1 << (MariaDBParser.MAX_CONNECTIONS_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_QUERIES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_ROWS - 475)) | (1 << (MariaDBParser.MAX_SIZE - 475)) | (1 << (MariaDBParser.MAX_UPDATES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_USER_CONNECTIONS - 475)) | (1 << (MariaDBParser.MEDIUM - 475)) | (1 << (MariaDBParser.MEMBER - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (MariaDBParser.MERGE - 507)) | (1 << (MariaDBParser.MESSAGE_TEXT - 507)) | (1 << (MariaDBParser.MID - 507)) | (1 << (MariaDBParser.MIGRATE - 507)) | (1 << (MariaDBParser.MIN_ROWS - 507)) | (1 << (MariaDBParser.MODE - 507)) | (1 << (MariaDBParser.MODIFY - 507)) | (1 << (MariaDBParser.MUTEX - 507)) | (1 << (MariaDBParser.MYSQL - 507)) | (1 << (MariaDBParser.MYSQL_ERRNO - 507)) | (1 << (MariaDBParser.NAME - 507)) | (1 << (MariaDBParser.NAMES - 507)) | (1 << (MariaDBParser.NCHAR - 507)) | (1 << (MariaDBParser.NEVER - 507)) | (1 << (MariaDBParser.NEXT - 507)) | (1 << (MariaDBParser.NO - 507)) | (1 << (MariaDBParser.NOCACHE - 507)) | (1 << (MariaDBParser.NOCOPY - 507)) | (1 << (MariaDBParser.NOCYCLE - 507)) | (1 << (MariaDBParser.NOMAXVALUE - 507)) | (1 << (MariaDBParser.NOMINVALUE - 507)) | (1 << (MariaDBParser.NOWAIT - 507)) | (1 << (MariaDBParser.NODEGROUP - 507)) | (1 << (MariaDBParser.NONE - 507)) | (1 << (MariaDBParser.ODBC - 507)) | (1 << (MariaDBParser.OFFLINE - 507)) | (1 << (MariaDBParser.OFFSET - 507)) | (1 << (MariaDBParser.OF - 507)) | (1 << (MariaDBParser.OJ - 507)) | (1 << (MariaDBParser.OLD_PASSWORD - 507)) | (1 << (MariaDBParser.ONE - 507)) | (1 << (MariaDBParser.ONLINE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (MariaDBParser.ONLY - 539)) | (1 << (MariaDBParser.OPEN - 539)) | (1 << (MariaDBParser.OPTIMIZER_COSTS - 539)) | (1 << (MariaDBParser.OPTIONS - 539)) | (1 << (MariaDBParser.OWNER - 539)) | (1 << (MariaDBParser.PACK_KEYS - 539)) | (1 << (MariaDBParser.PAGE - 539)) | (1 << (MariaDBParser.PARSER - 539)) | (1 << (MariaDBParser.PARTIAL - 539)) | (1 << (MariaDBParser.PARTITIONING - 539)) | (1 << (MariaDBParser.PARTITIONS - 539)) | (1 << (MariaDBParser.PASSWORD - 539)) | (1 << (MariaDBParser.PASSWORD_LOCK_TIME - 539)) | (1 << (MariaDBParser.PHASE - 539)) | (1 << (MariaDBParser.PLUGIN - 539)) | (1 << (MariaDBParser.PLUGIN_DIR - 539)) | (1 << (MariaDBParser.PLUGINS - 539)) | (1 << (MariaDBParser.PORT - 539)) | (1 << (MariaDBParser.PRECEDES - 539)) | (1 << (MariaDBParser.PREPARE - 539)) | (1 << (MariaDBParser.PRESERVE - 539)) | (1 << (MariaDBParser.PREV - 539)) | (1 << (MariaDBParser.PROCESSLIST - 539)) | (1 << (MariaDBParser.PROFILE - 539)) | (1 << (MariaDBParser.PROFILES - 539)) | (1 << (MariaDBParser.PROXY - 539)) | (1 << (MariaDBParser.QUERY - 539)) | (1 << (MariaDBParser.QUERY_RESPONSE_TIME - 539)) | (1 << (MariaDBParser.QUICK - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (MariaDBParser.REBUILD - 571)) | (1 << (MariaDBParser.RECOVER - 571)) | (1 << (MariaDBParser.RECURSIVE - 571)) | (1 << (MariaDBParser.REDO_BUFFER_SIZE - 571)) | (1 << (MariaDBParser.REDUNDANT - 571)) | (1 << (MariaDBParser.RELAY - 571)) | (1 << (MariaDBParser.RELAY_LOG_FILE - 571)) | (1 << (MariaDBParser.RELAY_LOG_POS - 571)) | (1 << (MariaDBParser.RELAYLOG - 571)) | (1 << (MariaDBParser.REMOVE - 571)) | (1 << (MariaDBParser.REORGANIZE - 571)) | (1 << (MariaDBParser.REPAIR - 571)) | (1 << (MariaDBParser.REPLICATE_DO_DB - 571)) | (1 << (MariaDBParser.REPLICATE_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_REWRITE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATION - 571)) | (1 << (MariaDBParser.RESET - 571)) | (1 << (MariaDBParser.RESTART - 571)) | (1 << (MariaDBParser.RESUME - 571)) | (1 << (MariaDBParser.RETURNED_SQLSTATE - 571)) | (1 << (MariaDBParser.RETURNS - 571)) | (1 << (MariaDBParser.REUSE - 571)) | (1 << (MariaDBParser.ROLE - 571)) | (1 << (MariaDBParser.ROLLBACK - 571)) | (1 << (MariaDBParser.ROLLUP - 571)) | (1 << (MariaDBParser.ROTATE - 571)) | (1 << (MariaDBParser.ROW - 571)))) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & ((1 << (MariaDBParser.ROWS - 603)) | (1 << (MariaDBParser.ROW_FORMAT - 603)) | (1 << (MariaDBParser.RTREE - 603)) | (1 << (MariaDBParser.SAVEPOINT - 603)) | (1 << (MariaDBParser.SCHEDULE - 603)) | (1 << (MariaDBParser.SECURITY - 603)) | (1 << (MariaDBParser.SEQUENCE - 603)) | (1 << (MariaDBParser.SERVER - 603)) | (1 << (MariaDBParser.SESSION - 603)) | (1 << (MariaDBParser.SHARE - 603)) | (1 << (MariaDBParser.SHARED - 603)) | (1 << (MariaDBParser.SIGNED - 603)) | (1 << (MariaDBParser.SIMPLE - 603)) | (1 << (MariaDBParser.SLAVE - 603)) | (1 << (MariaDBParser.SLAVES - 603)) | (1 << (MariaDBParser.SLOW - 603)) | (1 << (MariaDBParser.SNAPSHOT - 603)) | (1 << (MariaDBParser.SOCKET - 603)) | (1 << (MariaDBParser.SOME - 603)) | (1 << (MariaDBParser.SONAME - 603)) | (1 << (MariaDBParser.SOUNDS - 603)) | (1 << (MariaDBParser.SOURCE - 603)) | (1 << (MariaDBParser.SQL_AFTER_GTIDS - 603)) | (1 << (MariaDBParser.SQL_AFTER_MTS_GAPS - 603)) | (1 << (MariaDBParser.SQL_BEFORE_GTIDS - 603)) | (1 << (MariaDBParser.SQL_BUFFER_RESULT - 603)) | (1 << (MariaDBParser.SQL_CACHE - 603)) | (1 << (MariaDBParser.SQL_NO_CACHE - 603)) | (1 << (MariaDBParser.SQL_THREAD - 603)) | (1 << (MariaDBParser.START - 603)) | (1 << (MariaDBParser.STARTS - 603)) | (1 << (MariaDBParser.STATS_AUTO_RECALC - 603)))) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & ((1 << (MariaDBParser.STATS_PERSISTENT - 635)) | (1 << (MariaDBParser.STATS_SAMPLE_PAGES - 635)) | (1 << (MariaDBParser.STATUS - 635)) | (1 << (MariaDBParser.STOP - 635)) | (1 << (MariaDBParser.STORAGE - 635)) | (1 << (MariaDBParser.STRING - 635)) | (1 << (MariaDBParser.SUBCLASS_ORIGIN - 635)) | (1 << (MariaDBParser.SUBJECT - 635)) | (1 << (MariaDBParser.SUBPARTITION - 635)) | (1 << (MariaDBParser.SUBPARTITIONS - 635)) | (1 << (MariaDBParser.SUSPEND - 635)) | (1 << (MariaDBParser.SWAPS - 635)) | (1 << (MariaDBParser.SWITCHES - 635)) | (1 << (MariaDBParser.TABLE_NAME - 635)) | (1 << (MariaDBParser.TABLESPACE - 635)) | (1 << (MariaDBParser.TABLE_TYPE - 635)) | (1 << (MariaDBParser.TEMPORARY - 635)) | (1 << (MariaDBParser.TEMPTABLE - 635)) | (1 << (MariaDBParser.THAN - 635)) | (1 << (MariaDBParser.TRADITIONAL - 635)) | (1 << (MariaDBParser.TRANSACTION - 635)) | (1 << (MariaDBParser.TRANSACTIONAL - 635)) | (1 << (MariaDBParser.TRIGGERS - 635)) | (1 << (MariaDBParser.TRUNCATE - 635)) | (1 << (MariaDBParser.TYPES - 635)) | (1 << (MariaDBParser.UNBOUNDED - 635)) | (1 << (MariaDBParser.UNDEFINED - 635)) | (1 << (MariaDBParser.UNDOFILE - 635)) | (1 << (MariaDBParser.UNDO_BUFFER_SIZE - 635)) | (1 << (MariaDBParser.UNINSTALL - 635)) | (1 << (MariaDBParser.UNKNOWN - 635)))) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & ((1 << (MariaDBParser.UNTIL - 667)) | (1 << (MariaDBParser.UPGRADE - 667)) | (1 << (MariaDBParser.USER - 667)) | (1 << (MariaDBParser.USE_FRM - 667)) | (1 << (MariaDBParser.USER_RESOURCES - 667)) | (1 << (MariaDBParser.VALIDATION - 667)) | (1 << (MariaDBParser.VALUE - 667)) | (1 << (MariaDBParser.VARIABLES - 667)) | (1 << (MariaDBParser.VIEW - 667)) | (1 << (MariaDBParser.VIRTUAL - 667)) | (1 << (MariaDBParser.VISIBLE - 667)) | (1 << (MariaDBParser.WAIT - 667)) | (1 << (MariaDBParser.WARNINGS - 667)) | (1 << (MariaDBParser.WITHOUT - 667)) | (1 << (MariaDBParser.WORK - 667)) | (1 << (MariaDBParser.WRAPPER - 667)) | (1 << (MariaDBParser.WSREP_MEMBERSHIP - 667)) | (1 << (MariaDBParser.WSREP_STATUS - 667)) | (1 << (MariaDBParser.X509 - 667)) | (1 << (MariaDBParser.XA - 667)) | (1 << (MariaDBParser.XML - 667)) | (1 << (MariaDBParser.EUR - 667)) | (1 << (MariaDBParser.USA - 667)) | (1 << (MariaDBParser.JIS - 667)) | (1 << (MariaDBParser.ISO - 667)) | (1 << (MariaDBParser.INTERNAL - 667)) | (1 << (MariaDBParser.QUARTER - 667)) | (1 << (MariaDBParser.MONTH - 667)) | (1 << (MariaDBParser.DAY - 667)) | (1 << (MariaDBParser.HOUR - 667)))) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & ((1 << (MariaDBParser.MINUTE - 699)) | (1 << (MariaDBParser.WEEK - 699)) | (1 << (MariaDBParser.SECOND - 699)) | (1 << (MariaDBParser.MICROSECOND - 699)) | (1 << (MariaDBParser.USER_STATISTICS - 699)) | (1 << (MariaDBParser.CLIENT_STATISTICS - 699)) | (1 << (MariaDBParser.INDEX_STATISTICS - 699)) | (1 << (MariaDBParser.TABLE_STATISTICS - 699)) | (1 << (MariaDBParser.ADMIN - 699)) | (1 << (MariaDBParser.AUDIT_ADMIN - 699)) | (1 << (MariaDBParser.BACKUP_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ENCRYPTION_ADMIN - 699)) | (1 << (MariaDBParser.CLONE_ADMIN - 699)) | (1 << (MariaDBParser.CONNECTION_ADMIN - 699)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ADMIN - 699)) | (1 << (MariaDBParser.EXECUTE - 699)) | (1 << (MariaDBParser.FILE - 699)) | (1 << (MariaDBParser.FIREWALL_ADMIN - 699)) | (1 << (MariaDBParser.FIREWALL_USER - 699)) | (1 << (MariaDBParser.GROUP_REPLICATION_ADMIN - 699)) | (1 << (MariaDBParser.INNODB_REDO_LOG_ARCHIVE - 699)) | (1 << (MariaDBParser.INVOKE - 699)) | (1 << (MariaDBParser.LAMBDA - 699)) | (1 << (MariaDBParser.NDB_STORED_USER - 699)) | (1 << (MariaDBParser.PASSWORDLESS_USER_ADMIN - 699)))) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & ((1 << (MariaDBParser.PERSIST_RO_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.PRIVILEGES - 731)) | (1 << (MariaDBParser.PROCESS - 731)) | (1 << (MariaDBParser.RELOAD - 731)) | (1 << (MariaDBParser.REPLICATION_APPLIER - 731)) | (1 << (MariaDBParser.REPLICATION_SLAVE_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_USER - 731)) | (1 << (MariaDBParser.ROLE_ADMIN - 731)) | (1 << (MariaDBParser.ROUTINE - 731)) | (1 << (MariaDBParser.S3 - 731)) | (1 << (MariaDBParser.SESSION_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.SET_USER_ID - 731)) | (1 << (MariaDBParser.SHOW_ROUTINE - 731)) | (1 << (MariaDBParser.SHUTDOWN - 731)) | (1 << (MariaDBParser.SUPER - 731)) | (1 << (MariaDBParser.SYSTEM_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.TABLES - 731)) | (1 << (MariaDBParser.TABLE_ENCRYPTION_ADMIN - 731)) | (1 << (MariaDBParser.VERSION_TOKEN_ADMIN - 731)) | (1 << (MariaDBParser.XA_RECOVER_ADMIN - 731)) | (1 << (MariaDBParser.ARMSCII8 - 731)) | (1 << (MariaDBParser.ASCII - 731)) | (1 << (MariaDBParser.BIG5 - 731)) | (1 << (MariaDBParser.CP1250 - 731)) | (1 << (MariaDBParser.CP1251 - 731)) | (1 << (MariaDBParser.CP1256 - 731)) | (1 << (MariaDBParser.CP1257 - 731)) | (1 << (MariaDBParser.CP850 - 731)) | (1 << (MariaDBParser.CP852 - 731)) | (1 << (MariaDBParser.CP866 - 731)))) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & ((1 << (MariaDBParser.CP932 - 763)) | (1 << (MariaDBParser.DEC8 - 763)) | (1 << (MariaDBParser.EUCJPMS - 763)) | (1 << (MariaDBParser.EUCKR - 763)) | (1 << (MariaDBParser.GB18030 - 763)) | (1 << (MariaDBParser.GB2312 - 763)) | (1 << (MariaDBParser.GBK - 763)) | (1 << (MariaDBParser.GEOSTD8 - 763)) | (1 << (MariaDBParser.GREEK - 763)) | (1 << (MariaDBParser.HEBREW - 763)) | (1 << (MariaDBParser.HP8 - 763)) | (1 << (MariaDBParser.KEYBCS2 - 763)) | (1 << (MariaDBParser.KOI8R - 763)) | (1 << (MariaDBParser.KOI8U - 763)) | (1 << (MariaDBParser.LATIN1 - 763)) | (1 << (MariaDBParser.LATIN2 - 763)) | (1 << (MariaDBParser.LATIN5 - 763)) | (1 << (MariaDBParser.LATIN7 - 763)) | (1 << (MariaDBParser.MACCE - 763)) | (1 << (MariaDBParser.MACROMAN - 763)) | (1 << (MariaDBParser.SJIS - 763)) | (1 << (MariaDBParser.SWE7 - 763)) | (1 << (MariaDBParser.TIS620 - 763)) | (1 << (MariaDBParser.UCS2 - 763)) | (1 << (MariaDBParser.UJIS - 763)) | (1 << (MariaDBParser.UTF16 - 763)) | (1 << (MariaDBParser.UTF16LE - 763)) | (1 << (MariaDBParser.UTF32 - 763)) | (1 << (MariaDBParser.UTF8 - 763)) | (1 << (MariaDBParser.UTF8MB3 - 763)) | (1 << (MariaDBParser.UTF8MB4 - 763)) | (1 << (MariaDBParser.ARCHIVE - 763)))) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & ((1 << (MariaDBParser.BLACKHOLE - 795)) | (1 << (MariaDBParser.CSV - 795)) | (1 << (MariaDBParser.FEDERATED - 795)) | (1 << (MariaDBParser.INNODB - 795)) | (1 << (MariaDBParser.MEMORY - 795)) | (1 << (MariaDBParser.MRG_MYISAM - 795)) | (1 << (MariaDBParser.MYISAM - 795)) | (1 << (MariaDBParser.NDB - 795)) | (1 << (MariaDBParser.NDBCLUSTER - 795)) | (1 << (MariaDBParser.PERFORMANCE_SCHEMA - 795)) | (1 << (MariaDBParser.TOKUDB - 795)) | (1 << (MariaDBParser.REPEATABLE - 795)) | (1 << (MariaDBParser.COMMITTED - 795)) | (1 << (MariaDBParser.UNCOMMITTED - 795)) | (1 << (MariaDBParser.SERIALIZABLE - 795)) | (1 << (MariaDBParser.GEOMETRYCOLLECTION - 795)) | (1 << (MariaDBParser.LINESTRING - 795)) | (1 << (MariaDBParser.MULTILINESTRING - 795)) | (1 << (MariaDBParser.MULTIPOINT - 795)) | (1 << (MariaDBParser.MULTIPOLYGON - 795)) | (1 << (MariaDBParser.POINT - 795)) | (1 << (MariaDBParser.POLYGON - 795)) | (1 << (MariaDBParser.ABS - 795)) | (1 << (MariaDBParser.ACOS - 795)) | (1 << (MariaDBParser.ADDDATE - 795)) | (1 << (MariaDBParser.ADDTIME - 795)) | (1 << (MariaDBParser.AES_DECRYPT - 795)) | (1 << (MariaDBParser.AES_ENCRYPT - 795)) | (1 << (MariaDBParser.AREA - 795)) | (1 << (MariaDBParser.ASBINARY - 795)))) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & ((1 << (MariaDBParser.ASIN - 827)) | (1 << (MariaDBParser.ASTEXT - 827)) | (1 << (MariaDBParser.ASWKB - 827)) | (1 << (MariaDBParser.ASWKT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DECRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DERIVE - 827)) | (1 << (MariaDBParser.ASYMMETRIC_ENCRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_SIGN - 827)) | (1 << (MariaDBParser.ASYMMETRIC_VERIFY - 827)) | (1 << (MariaDBParser.ATAN - 827)) | (1 << (MariaDBParser.ATAN2 - 827)) | (1 << (MariaDBParser.BENCHMARK - 827)) | (1 << (MariaDBParser.BIN - 827)) | (1 << (MariaDBParser.BIT_COUNT - 827)) | (1 << (MariaDBParser.BIT_LENGTH - 827)) | (1 << (MariaDBParser.BUFFER - 827)) | (1 << (MariaDBParser.CATALOG_NAME - 827)) | (1 << (MariaDBParser.CEIL - 827)) | (1 << (MariaDBParser.CEILING - 827)) | (1 << (MariaDBParser.CENTROID - 827)) | (1 << (MariaDBParser.CHARACTER_LENGTH - 827)) | (1 << (MariaDBParser.CHARSET - 827)) | (1 << (MariaDBParser.CHAR_LENGTH - 827)) | (1 << (MariaDBParser.COERCIBILITY - 827)) | (1 << (MariaDBParser.COLLATION - 827)) | (1 << (MariaDBParser.COMPRESS - 827)) | (1 << (MariaDBParser.CONCAT - 827)) | (1 << (MariaDBParser.CONCAT_WS - 827)) | (1 << (MariaDBParser.CONNECTION_ID - 827)) | (1 << (MariaDBParser.CONV - 827)) | (1 << (MariaDBParser.CONVERT_TZ - 827)) | (1 << (MariaDBParser.COS - 827)))) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & ((1 << (MariaDBParser.COT - 859)) | (1 << (MariaDBParser.CRC32 - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY - 859)) | (1 << (MariaDBParser.CREATE_DH_PARAMETERS - 859)) | (1 << (MariaDBParser.CREATE_DIGEST - 859)) | (1 << (MariaDBParser.CROSSES - 859)) | (1 << (MariaDBParser.DATEDIFF - 859)) | (1 << (MariaDBParser.DATE_FORMAT - 859)) | (1 << (MariaDBParser.DAYNAME - 859)) | (1 << (MariaDBParser.DAYOFMONTH - 859)) | (1 << (MariaDBParser.DAYOFWEEK - 859)) | (1 << (MariaDBParser.DAYOFYEAR - 859)) | (1 << (MariaDBParser.DECODE - 859)) | (1 << (MariaDBParser.DEGREES - 859)) | (1 << (MariaDBParser.DES_DECRYPT - 859)) | (1 << (MariaDBParser.DES_ENCRYPT - 859)) | (1 << (MariaDBParser.DIMENSION - 859)) | (1 << (MariaDBParser.DISJOINT - 859)) | (1 << (MariaDBParser.ELT - 859)) | (1 << (MariaDBParser.ENCODE - 859)) | (1 << (MariaDBParser.ENCRYPT - 859)) | (1 << (MariaDBParser.ENDPOINT - 859)) | (1 << (MariaDBParser.ENGINE_ATTRIBUTE - 859)) | (1 << (MariaDBParser.ENVELOPE - 859)) | (1 << (MariaDBParser.EQUALS - 859)) | (1 << (MariaDBParser.EXP - 859)) | (1 << (MariaDBParser.EXPORT_SET - 859)) | (1 << (MariaDBParser.EXTERIORRING - 859)) | (1 << (MariaDBParser.EXTRACTVALUE - 859)) | (1 << (MariaDBParser.FIELD - 859)) | (1 << (MariaDBParser.FIND_IN_SET - 859)))) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & ((1 << (MariaDBParser.FLOOR - 891)) | (1 << (MariaDBParser.FORMAT - 891)) | (1 << (MariaDBParser.FOUND_ROWS - 891)) | (1 << (MariaDBParser.FROM_BASE64 - 891)) | (1 << (MariaDBParser.FROM_DAYS - 891)) | (1 << (MariaDBParser.FROM_UNIXTIME - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYN - 891)) | (1 << (MariaDBParser.GEOMETRYTYPE - 891)) | (1 << (MariaDBParser.GEOMFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMFROMWKB - 891)) | (1 << (MariaDBParser.GET_FORMAT - 891)) | (1 << (MariaDBParser.GET_LOCK - 891)) | (1 << (MariaDBParser.GLENGTH - 891)) | (1 << (MariaDBParser.GREATEST - 891)) | (1 << (MariaDBParser.GTID_SUBSET - 891)) | (1 << (MariaDBParser.GTID_SUBTRACT - 891)) | (1 << (MariaDBParser.HEX - 891)) | (1 << (MariaDBParser.IFNULL - 891)) | (1 << (MariaDBParser.INET6_ATON - 891)) | (1 << (MariaDBParser.INET6_NTOA - 891)) | (1 << (MariaDBParser.INET_ATON - 891)) | (1 << (MariaDBParser.INET_NTOA - 891)) | (1 << (MariaDBParser.INSTR - 891)) | (1 << (MariaDBParser.INTERIORRINGN - 891)) | (1 << (MariaDBParser.INTERSECTS - 891)) | (1 << (MariaDBParser.ISCLOSED - 891)))) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & ((1 << (MariaDBParser.ISEMPTY - 923)) | (1 << (MariaDBParser.ISNULL - 923)) | (1 << (MariaDBParser.ISSIMPLE - 923)) | (1 << (MariaDBParser.IS_FREE_LOCK - 923)) | (1 << (MariaDBParser.IS_IPV4 - 923)) | (1 << (MariaDBParser.IS_IPV4_COMPAT - 923)) | (1 << (MariaDBParser.IS_IPV4_MAPPED - 923)) | (1 << (MariaDBParser.IS_IPV6 - 923)) | (1 << (MariaDBParser.IS_USED_LOCK - 923)) | (1 << (MariaDBParser.LAST_INSERT_ID - 923)) | (1 << (MariaDBParser.LCASE - 923)) | (1 << (MariaDBParser.LEAST - 923)) | (1 << (MariaDBParser.LENGTH - 923)) | (1 << (MariaDBParser.LINEFROMTEXT - 923)) | (1 << (MariaDBParser.LINEFROMWKB - 923)) | (1 << (MariaDBParser.LINESTRINGFROMTEXT - 923)) | (1 << (MariaDBParser.LINESTRINGFROMWKB - 923)) | (1 << (MariaDBParser.LN - 923)) | (1 << (MariaDBParser.LOAD_FILE - 923)) | (1 << (MariaDBParser.LOCATE - 923)) | (1 << (MariaDBParser.LOG - 923)) | (1 << (MariaDBParser.LOG10 - 923)) | (1 << (MariaDBParser.LOG2 - 923)) | (1 << (MariaDBParser.LOWER - 923)) | (1 << (MariaDBParser.LPAD - 923)) | (1 << (MariaDBParser.LTRIM - 923)) | (1 << (MariaDBParser.MAKEDATE - 923)) | (1 << (MariaDBParser.MAKETIME - 923)) | (1 << (MariaDBParser.MAKE_SET - 923)) | (1 << (MariaDBParser.MASTER_POS_WAIT - 923)) | (1 << (MariaDBParser.MBRCONTAINS - 923)) | (1 << (MariaDBParser.MBRDISJOINT - 923)))) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & ((1 << (MariaDBParser.MBREQUAL - 955)) | (1 << (MariaDBParser.MBRINTERSECTS - 955)) | (1 << (MariaDBParser.MBROVERLAPS - 955)) | (1 << (MariaDBParser.MBRTOUCHES - 955)) | (1 << (MariaDBParser.MBRWITHIN - 955)) | (1 << (MariaDBParser.MD5 - 955)) | (1 << (MariaDBParser.MLINEFROMTEXT - 955)) | (1 << (MariaDBParser.MLINEFROMWKB - 955)) | (1 << (MariaDBParser.MONTHNAME - 955)) | (1 << (MariaDBParser.MPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MPOLYFROMTEXT - 955)) | (1 << (MariaDBParser.MPOLYFROMWKB - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMTEXT - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMWKB - 955)) | (1 << (MariaDBParser.NAME_CONST - 955)) | (1 << (MariaDBParser.NULLIF - 955)) | (1 << (MariaDBParser.NUMGEOMETRIES - 955)) | (1 << (MariaDBParser.NUMINTERIORRINGS - 955)) | (1 << (MariaDBParser.NUMPOINTS - 955)) | (1 << (MariaDBParser.OCT - 955)) | (1 << (MariaDBParser.OCTET_LENGTH - 955)) | (1 << (MariaDBParser.ORD - 955)) | (1 << (MariaDBParser.OVERLAPS - 955)) | (1 << (MariaDBParser.PERIOD_ADD - 955)) | (1 << (MariaDBParser.PERIOD_DIFF - 955)) | (1 << (MariaDBParser.PI - 955)) | (1 << (MariaDBParser.POINTFROMTEXT - 955)))) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & ((1 << (MariaDBParser.POINTFROMWKB - 987)) | (1 << (MariaDBParser.POINTN - 987)) | (1 << (MariaDBParser.POLYFROMTEXT - 987)) | (1 << (MariaDBParser.POLYFROMWKB - 987)) | (1 << (MariaDBParser.POLYGONFROMTEXT - 987)) | (1 << (MariaDBParser.POLYGONFROMWKB - 987)) | (1 << (MariaDBParser.POW - 987)) | (1 << (MariaDBParser.POWER - 987)) | (1 << (MariaDBParser.QUOTE - 987)) | (1 << (MariaDBParser.RADIANS - 987)) | (1 << (MariaDBParser.RAND - 987)) | (1 << (MariaDBParser.RANDOM_BYTES - 987)) | (1 << (MariaDBParser.RELEASE_LOCK - 987)) | (1 << (MariaDBParser.REVERSE - 987)) | (1 << (MariaDBParser.ROUND - 987)) | (1 << (MariaDBParser.ROW_COUNT - 987)) | (1 << (MariaDBParser.RPAD - 987)) | (1 << (MariaDBParser.RTRIM - 987)) | (1 << (MariaDBParser.SEC_TO_TIME - 987)) | (1 << (MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE - 987)) | (1 << (MariaDBParser.SESSION_USER - 987)) | (1 << (MariaDBParser.SHA - 987)) | (1 << (MariaDBParser.SHA1 - 987)) | (1 << (MariaDBParser.SHA2 - 987)) | (1 << (MariaDBParser.SCHEMA_NAME - 987)) | (1 << (MariaDBParser.SIGN - 987)) | (1 << (MariaDBParser.SIN - 987)) | (1 << (MariaDBParser.SLEEP - 987)) | (1 << (MariaDBParser.SOUNDEX - 987)) | (1 << (MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS - 987)) | (1 << (MariaDBParser.SQRT - 987)) | (1 << (MariaDBParser.SRID - 987)))) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & ((1 << (MariaDBParser.STARTPOINT - 1019)) | (1 << (MariaDBParser.STRCMP - 1019)) | (1 << (MariaDBParser.STR_TO_DATE - 1019)) | (1 << (MariaDBParser.ST_AREA - 1019)) | (1 << (MariaDBParser.ST_ASBINARY - 1019)) | (1 << (MariaDBParser.ST_ASTEXT - 1019)) | (1 << (MariaDBParser.ST_ASWKB - 1019)) | (1 << (MariaDBParser.ST_ASWKT - 1019)) | (1 << (MariaDBParser.ST_BUFFER - 1019)) | (1 << (MariaDBParser.ST_CENTROID - 1019)) | (1 << (MariaDBParser.ST_CONTAINS - 1019)) | (1 << (MariaDBParser.ST_CROSSES - 1019)) | (1 << (MariaDBParser.ST_DIFFERENCE - 1019)) | (1 << (MariaDBParser.ST_DIMENSION - 1019)) | (1 << (MariaDBParser.ST_DISJOINT - 1019)) | (1 << (MariaDBParser.ST_DISTANCE - 1019)) | (1 << (MariaDBParser.ST_ENDPOINT - 1019)) | (1 << (MariaDBParser.ST_ENVELOPE - 1019)) | (1 << (MariaDBParser.ST_EQUALS - 1019)) | (1 << (MariaDBParser.ST_EXTERIORRING - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYN - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYTYPE - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMWKB - 1019)) | (1 << (MariaDBParser.ST_INTERIORRINGN - 1019)))) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & ((1 << (MariaDBParser.ST_INTERSECTION - 1051)) | (1 << (MariaDBParser.ST_INTERSECTS - 1051)) | (1 << (MariaDBParser.ST_ISCLOSED - 1051)) | (1 << (MariaDBParser.ST_ISEMPTY - 1051)) | (1 << (MariaDBParser.ST_ISSIMPLE - 1051)) | (1 << (MariaDBParser.ST_LINEFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINEFROMWKB - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMWKB - 1051)) | (1 << (MariaDBParser.ST_NUMGEOMETRIES - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRING - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRINGS - 1051)) | (1 << (MariaDBParser.ST_NUMPOINTS - 1051)) | (1 << (MariaDBParser.ST_OVERLAPS - 1051)) | (1 << (MariaDBParser.ST_POINTFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POINTFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POINTN - 1051)) | (1 << (MariaDBParser.ST_POLYFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMWKB - 1051)) | (1 << (MariaDBParser.ST_SRID - 1051)) | (1 << (MariaDBParser.ST_STARTPOINT - 1051)) | (1 << (MariaDBParser.ST_SYMDIFFERENCE - 1051)) | (1 << (MariaDBParser.ST_TOUCHES - 1051)) | (1 << (MariaDBParser.ST_UNION - 1051)) | (1 << (MariaDBParser.ST_WITHIN - 1051)) | (1 << (MariaDBParser.ST_X - 1051)) | (1 << (MariaDBParser.ST_Y - 1051)) | (1 << (MariaDBParser.SUBDATE - 1051)) | (1 << (MariaDBParser.SUBSTRING_INDEX - 1051)) | (1 << (MariaDBParser.SUBTIME - 1051)))) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & ((1 << (MariaDBParser.SYSTEM_USER - 1083)) | (1 << (MariaDBParser.TAN - 1083)) | (1 << (MariaDBParser.TIMEDIFF - 1083)) | (1 << (MariaDBParser.TIMESTAMPADD - 1083)) | (1 << (MariaDBParser.TIMESTAMPDIFF - 1083)) | (1 << (MariaDBParser.TIME_FORMAT - 1083)) | (1 << (MariaDBParser.TIME_TO_SEC - 1083)) | (1 << (MariaDBParser.TOUCHES - 1083)) | (1 << (MariaDBParser.TO_BASE64 - 1083)) | (1 << (MariaDBParser.TO_DAYS - 1083)) | (1 << (MariaDBParser.TO_SECONDS - 1083)) | (1 << (MariaDBParser.UCASE - 1083)) | (1 << (MariaDBParser.UNCOMPRESS - 1083)) | (1 << (MariaDBParser.UNCOMPRESSED_LENGTH - 1083)) | (1 << (MariaDBParser.UNHEX - 1083)) | (1 << (MariaDBParser.UNIX_TIMESTAMP - 1083)) | (1 << (MariaDBParser.UPDATEXML - 1083)) | (1 << (MariaDBParser.UPPER - 1083)) | (1 << (MariaDBParser.UUID - 1083)) | (1 << (MariaDBParser.UUID_SHORT - 1083)) | (1 << (MariaDBParser.VALIDATE_PASSWORD_STRENGTH - 1083)) | (1 << (MariaDBParser.VERSION - 1083)) | (1 << (MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1083)) | (1 << (MariaDBParser.WEEKDAY - 1083)) | (1 << (MariaDBParser.WEEKOFYEAR - 1083)) | (1 << (MariaDBParser.WEIGHT_STRING - 1083)) | (1 << (MariaDBParser.WITHIN - 1083)) | (1 << (MariaDBParser.YEARWEEK - 1083)) | (1 << (MariaDBParser.Y_FUNCTION - 1083)) | (1 << (MariaDBParser.X_FUNCTION - 1083)) | (1 << (MariaDBParser.VIA - 1083)) | (1 << (MariaDBParser.LASTVAL - 1083)))) !== 0) || ((((_la - 1115)) & ~0x1F) === 0 && ((1 << (_la - 1115)) & ((1 << (MariaDBParser.NEXTVAL - 1115)) | (1 << (MariaDBParser.SETVAL - 1115)) | (1 << (MariaDBParser.PREVIOUS - 1115)) | (1 << (MariaDBParser.PERSISTENT - 1115)) | (1 << (MariaDBParser.BINLOG_MONITOR - 1115)) | (1 << (MariaDBParser.BINLOG_REPLAY - 1115)) | (1 << (MariaDBParser.FEDERATED_ADMIN - 1115)) | (1 << (MariaDBParser.READ_ONLY_ADMIN - 1115)) | (1 << (MariaDBParser.REPLICA - 1115)) | (1 << (MariaDBParser.REPLICAS - 1115)) | (1 << (MariaDBParser.REPLICATION_MASTER_ADMIN - 1115)) | (1 << (MariaDBParser.MONITOR - 1115)) | (1 << (MariaDBParser.READ_ONLY - 1115)) | (1 << (MariaDBParser.REPLAY - 1115)) | (1 << (MariaDBParser.MOD - 1115)))) !== 0) || ((((_la - 1166)) & ~0x1F) === 0 && ((1 << (_la - 1166)) & ((1 << (MariaDBParser.CHARSET_REVERSE_QOUTE_STRING - 1166)) | (1 << (MariaDBParser.STRING_LITERAL - 1166)) | (1 << (MariaDBParser.ID - 1166)))) !== 0)) {
					{
					this.state = 2764;
					this.uid();
					}
				}

				this.state = 2767;
				this.indexColumnNames();
				this.state = 2771;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.IGNORED || _la === MariaDBParser.NOT || _la === MariaDBParser.USING || _la === MariaDBParser.WITH || _la === MariaDBParser.CLUSTERING || _la === MariaDBParser.COMMENT || _la === MariaDBParser.INVISIBLE || _la === MariaDBParser.KEY_BLOCK_SIZE || _la === MariaDBParser.VISIBLE || _la === MariaDBParser.ENGINE_ATTRIBUTE || _la === MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					this.state = 2768;
					this.indexOption();
					}
					}
					this.state = 2773;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 8:
				_localctx = new AlterByAddForeignKeyContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 2774;
				this.match(MariaDBParser.ADD);
				this.state = 2779;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.CONSTRAINT) {
					{
					this.state = 2775;
					this.match(MariaDBParser.CONSTRAINT);
					this.state = 2777;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MariaDBParser.ATTRIBUTE) | (1 << MariaDBParser.BODY) | (1 << MariaDBParser.BUCKETS) | (1 << MariaDBParser.CONDITION))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (MariaDBParser.CURRENT - 36)) | (1 << (MariaDBParser.CURRENT_ROLE - 36)) | (1 << (MariaDBParser.CURRENT_USER - 36)) | (1 << (MariaDBParser.DATABASE - 36)) | (1 << (MariaDBParser.DEFAULT - 36)) | (1 << (MariaDBParser.DIAGNOSTICS - 36)) | (1 << (MariaDBParser.EMPTY - 36)) | (1 << (MariaDBParser.EXCEPT - 36)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (MariaDBParser.GROUP - 73)) | (1 << (MariaDBParser.IF - 73)) | (1 << (MariaDBParser.IGNORED - 73)) | (1 << (MariaDBParser.INSERT - 73)) | (1 << (MariaDBParser.LATERAL - 73)) | (1 << (MariaDBParser.LEFT - 73)) | (1 << (MariaDBParser.LOCKED - 73)))) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & ((1 << (MariaDBParser.MAXVALUE - 110)) | (1 << (MariaDBParser.MINVALUE - 110)) | (1 << (MariaDBParser.NUMBER - 110)) | (1 << (MariaDBParser.OPTIONAL - 110)) | (1 << (MariaDBParser.ORDER - 110)) | (1 << (MariaDBParser.PRIMARY - 110)) | (1 << (MariaDBParser.PACKAGE - 110)))) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (MariaDBParser.REPLACE - 142)) | (1 << (MariaDBParser.RIGHT - 142)) | (1 << (MariaDBParser.SCHEMA - 142)) | (1 << (MariaDBParser.SKIP_ - 142)) | (1 << (MariaDBParser.STACKED - 142)) | (1 << (MariaDBParser.STATEMENT - 142)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MariaDBParser.DATE - 217)) | (1 << (MariaDBParser.TIME - 217)) | (1 << (MariaDBParser.TIMESTAMP - 217)) | (1 << (MariaDBParser.DATETIME - 217)) | (1 << (MariaDBParser.YEAR - 217)) | (1 << (MariaDBParser.BINARY - 217)) | (1 << (MariaDBParser.TEXT - 217)) | (1 << (MariaDBParser.ENUM - 217)) | (1 << (MariaDBParser.SERIAL - 217)))) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & ((1 << (MariaDBParser.JSON_ARRAY - 251)) | (1 << (MariaDBParser.JSON_ARRAYAGG - 251)) | (1 << (MariaDBParser.JSON_ARRAY_APPEND - 251)) | (1 << (MariaDBParser.JSON_ARRAY_INSERT - 251)) | (1 << (MariaDBParser.JSON_CONTAINS - 251)) | (1 << (MariaDBParser.JSON_CONTAINS_PATH - 251)) | (1 << (MariaDBParser.JSON_DEPTH - 251)) | (1 << (MariaDBParser.JSON_EXTRACT - 251)) | (1 << (MariaDBParser.JSON_INSERT - 251)) | (1 << (MariaDBParser.JSON_KEYS - 251)) | (1 << (MariaDBParser.JSON_LENGTH - 251)) | (1 << (MariaDBParser.JSON_MERGE - 251)) | (1 << (MariaDBParser.JSON_MERGE_PATCH - 251)) | (1 << (MariaDBParser.JSON_MERGE_PRESERVE - 251)) | (1 << (MariaDBParser.JSON_OBJECT - 251)) | (1 << (MariaDBParser.JSON_OBJECTAGG - 251)) | (1 << (MariaDBParser.JSON_OVERLAPS - 251)) | (1 << (MariaDBParser.JSON_PRETTY - 251)) | (1 << (MariaDBParser.JSON_QUOTE - 251)) | (1 << (MariaDBParser.JSON_REMOVE - 251)) | (1 << (MariaDBParser.JSON_REPLACE - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALID - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT - 251)) | (1 << (MariaDBParser.JSON_SEARCH - 251)) | (1 << (MariaDBParser.JSON_SET - 251)) | (1 << (MariaDBParser.JSON_STORAGE_FREE - 251)) | (1 << (MariaDBParser.JSON_STORAGE_SIZE - 251)) | (1 << (MariaDBParser.JSON_TABLE - 251)) | (1 << (MariaDBParser.JSON_TYPE - 251)) | (1 << (MariaDBParser.JSON_UNQUOTE - 251)) | (1 << (MariaDBParser.JSON_VALID - 251)) | (1 << (MariaDBParser.JSON_VALUE - 251)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (MariaDBParser.NESTED - 283)) | (1 << (MariaDBParser.ORDINALITY - 283)) | (1 << (MariaDBParser.PATH - 283)) | (1 << (MariaDBParser.AVG - 283)) | (1 << (MariaDBParser.BIT_AND - 283)) | (1 << (MariaDBParser.BIT_OR - 283)) | (1 << (MariaDBParser.BIT_XOR - 283)) | (1 << (MariaDBParser.COUNT - 283)) | (1 << (MariaDBParser.CUME_DIST - 283)) | (1 << (MariaDBParser.DENSE_RANK - 283)) | (1 << (MariaDBParser.FIRST_VALUE - 283)) | (1 << (MariaDBParser.GROUP_CONCAT - 283)) | (1 << (MariaDBParser.LAG - 283)) | (1 << (MariaDBParser.LAST_VALUE - 283)) | (1 << (MariaDBParser.LEAD - 283)) | (1 << (MariaDBParser.MAX - 283)) | (1 << (MariaDBParser.MIN - 283)) | (1 << (MariaDBParser.NTILE - 283)) | (1 << (MariaDBParser.NTH_VALUE - 283)) | (1 << (MariaDBParser.PERCENT_RANK - 283)) | (1 << (MariaDBParser.RANK - 283)) | (1 << (MariaDBParser.ROW_NUMBER - 283)) | (1 << (MariaDBParser.STD - 283)) | (1 << (MariaDBParser.STDDEV - 283)) | (1 << (MariaDBParser.STDDEV_POP - 283)) | (1 << (MariaDBParser.STDDEV_SAMP - 283)) | (1 << (MariaDBParser.SUM - 283)) | (1 << (MariaDBParser.VAR_POP - 283)) | (1 << (MariaDBParser.VAR_SAMP - 283)) | (1 << (MariaDBParser.VARIANCE - 283)) | (1 << (MariaDBParser.CURRENT_DATE - 283)) | (1 << (MariaDBParser.CURRENT_TIME - 283)))) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & ((1 << (MariaDBParser.CURRENT_TIMESTAMP - 315)) | (1 << (MariaDBParser.LOCALTIME - 315)) | (1 << (MariaDBParser.CURDATE - 315)) | (1 << (MariaDBParser.CURTIME - 315)) | (1 << (MariaDBParser.DATE_ADD - 315)) | (1 << (MariaDBParser.DATE_SUB - 315)) | (1 << (MariaDBParser.LOCALTIMESTAMP - 315)) | (1 << (MariaDBParser.NOW - 315)) | (1 << (MariaDBParser.POSITION - 315)) | (1 << (MariaDBParser.SUBSTR - 315)) | (1 << (MariaDBParser.SUBSTRING - 315)) | (1 << (MariaDBParser.SYSDATE - 315)) | (1 << (MariaDBParser.TRIM - 315)) | (1 << (MariaDBParser.UTC_DATE - 315)) | (1 << (MariaDBParser.UTC_TIME - 315)) | (1 << (MariaDBParser.UTC_TIMESTAMP - 315)) | (1 << (MariaDBParser.ACCOUNT - 315)) | (1 << (MariaDBParser.ACTION - 315)) | (1 << (MariaDBParser.AFTER - 315)) | (1 << (MariaDBParser.AGGREGATE - 315)) | (1 << (MariaDBParser.ALGORITHM - 315)) | (1 << (MariaDBParser.ANY - 315)) | (1 << (MariaDBParser.AT - 315)) | (1 << (MariaDBParser.AUTHORS - 315)) | (1 << (MariaDBParser.AUTOCOMMIT - 315)) | (1 << (MariaDBParser.AUTOEXTEND_SIZE - 315)) | (1 << (MariaDBParser.AUTO_INCREMENT - 315)) | (1 << (MariaDBParser.AVG_ROW_LENGTH - 315)) | (1 << (MariaDBParser.BEGIN - 315)) | (1 << (MariaDBParser.BINLOG - 315)) | (1 << (MariaDBParser.BIT - 315)))) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & ((1 << (MariaDBParser.BLOCK - 347)) | (1 << (MariaDBParser.BOOL - 347)) | (1 << (MariaDBParser.BOOLEAN - 347)) | (1 << (MariaDBParser.BTREE - 347)) | (1 << (MariaDBParser.CACHE - 347)) | (1 << (MariaDBParser.CASCADED - 347)) | (1 << (MariaDBParser.CHAIN - 347)) | (1 << (MariaDBParser.CHANGED - 347)) | (1 << (MariaDBParser.CHANNEL - 347)) | (1 << (MariaDBParser.CHECKSUM - 347)) | (1 << (MariaDBParser.PAGE_CHECKSUM - 347)) | (1 << (MariaDBParser.CIPHER - 347)) | (1 << (MariaDBParser.CLASS_ORIGIN - 347)) | (1 << (MariaDBParser.CLIENT - 347)) | (1 << (MariaDBParser.CLOSE - 347)) | (1 << (MariaDBParser.CLUSTERING - 347)) | (1 << (MariaDBParser.COALESCE - 347)) | (1 << (MariaDBParser.CODE - 347)) | (1 << (MariaDBParser.COLUMNS - 347)) | (1 << (MariaDBParser.COLUMN_FORMAT - 347)) | (1 << (MariaDBParser.COLUMN_NAME - 347)) | (1 << (MariaDBParser.COMMENT - 347)) | (1 << (MariaDBParser.COMMIT - 347)) | (1 << (MariaDBParser.COMPACT - 347)) | (1 << (MariaDBParser.COMPLETION - 347)) | (1 << (MariaDBParser.COMPRESSED - 347)) | (1 << (MariaDBParser.COMPRESSION - 347)) | (1 << (MariaDBParser.CONCURRENT - 347)) | (1 << (MariaDBParser.CONNECT - 347)) | (1 << (MariaDBParser.CONNECTION - 347)) | (1 << (MariaDBParser.CONSISTENT - 347)) | (1 << (MariaDBParser.CONSTRAINT_CATALOG - 347)))) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & ((1 << (MariaDBParser.CONSTRAINT_SCHEMA - 379)) | (1 << (MariaDBParser.CONSTRAINT_NAME - 379)) | (1 << (MariaDBParser.CONTAINS - 379)) | (1 << (MariaDBParser.CONTEXT - 379)) | (1 << (MariaDBParser.CONTRIBUTORS - 379)) | (1 << (MariaDBParser.COPY - 379)) | (1 << (MariaDBParser.CPU - 379)) | (1 << (MariaDBParser.CYCLE - 379)) | (1 << (MariaDBParser.CURSOR_NAME - 379)) | (1 << (MariaDBParser.DATA - 379)) | (1 << (MariaDBParser.DATAFILE - 379)) | (1 << (MariaDBParser.DEALLOCATE - 379)) | (1 << (MariaDBParser.DEFAULT_AUTH - 379)) | (1 << (MariaDBParser.DEFINER - 379)) | (1 << (MariaDBParser.DELAY_KEY_WRITE - 379)) | (1 << (MariaDBParser.DES_KEY_FILE - 379)) | (1 << (MariaDBParser.DIRECTORY - 379)) | (1 << (MariaDBParser.DISABLE - 379)) | (1 << (MariaDBParser.DISCARD - 379)) | (1 << (MariaDBParser.DISK - 379)) | (1 << (MariaDBParser.DO - 379)) | (1 << (MariaDBParser.DUMPFILE - 379)) | (1 << (MariaDBParser.DUPLICATE - 379)) | (1 << (MariaDBParser.DYNAMIC - 379)) | (1 << (MariaDBParser.ENABLE - 379)) | (1 << (MariaDBParser.ENCRYPTED - 379)) | (1 << (MariaDBParser.ENCRYPTION - 379)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ID - 379)) | (1 << (MariaDBParser.END - 379)) | (1 << (MariaDBParser.ENDS - 379)) | (1 << (MariaDBParser.ENGINE - 379)) | (1 << (MariaDBParser.ENGINES - 379)))) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & ((1 << (MariaDBParser.ERROR - 411)) | (1 << (MariaDBParser.ERRORS - 411)) | (1 << (MariaDBParser.ESCAPE - 411)) | (1 << (MariaDBParser.EVEN - 411)) | (1 << (MariaDBParser.EVENT - 411)) | (1 << (MariaDBParser.EVENTS - 411)) | (1 << (MariaDBParser.EVERY - 411)) | (1 << (MariaDBParser.EXCHANGE - 411)) | (1 << (MariaDBParser.EXCLUSIVE - 411)) | (1 << (MariaDBParser.EXPIRE - 411)) | (1 << (MariaDBParser.EXPORT - 411)) | (1 << (MariaDBParser.EXTENDED - 411)) | (1 << (MariaDBParser.EXTENT_SIZE - 411)) | (1 << (MariaDBParser.FAILED_LOGIN_ATTEMPTS - 411)) | (1 << (MariaDBParser.FAST - 411)) | (1 << (MariaDBParser.FAULTS - 411)) | (1 << (MariaDBParser.FIELDS - 411)) | (1 << (MariaDBParser.FILE_BLOCK_SIZE - 411)) | (1 << (MariaDBParser.FILTER - 411)) | (1 << (MariaDBParser.FIRST - 411)) | (1 << (MariaDBParser.FIXED - 411)) | (1 << (MariaDBParser.FLUSH - 411)) | (1 << (MariaDBParser.FOLLOWS - 411)) | (1 << (MariaDBParser.FOUND - 411)) | (1 << (MariaDBParser.FULL - 411)) | (1 << (MariaDBParser.FUNCTION - 411)) | (1 << (MariaDBParser.GENERAL - 411)) | (1 << (MariaDBParser.GLOBAL - 411)) | (1 << (MariaDBParser.GRANTS - 411)) | (1 << (MariaDBParser.GROUP_REPLICATION - 411)) | (1 << (MariaDBParser.HANDLER - 411)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (MariaDBParser.HASH - 443)) | (1 << (MariaDBParser.HELP - 443)) | (1 << (MariaDBParser.HISTORY - 443)) | (1 << (MariaDBParser.HOST - 443)) | (1 << (MariaDBParser.HOSTS - 443)) | (1 << (MariaDBParser.IDENTIFIED - 443)) | (1 << (MariaDBParser.IGNORE_SERVER_IDS - 443)) | (1 << (MariaDBParser.IMPORT - 443)) | (1 << (MariaDBParser.INCREMENT - 443)) | (1 << (MariaDBParser.INDEXES - 443)) | (1 << (MariaDBParser.INITIAL_SIZE - 443)) | (1 << (MariaDBParser.INPLACE - 443)) | (1 << (MariaDBParser.INSERT_METHOD - 443)) | (1 << (MariaDBParser.INSTALL - 443)) | (1 << (MariaDBParser.INSTANCE - 443)) | (1 << (MariaDBParser.INSTANT - 443)) | (1 << (MariaDBParser.INVISIBLE - 443)) | (1 << (MariaDBParser.INVOKER - 443)) | (1 << (MariaDBParser.IO - 443)) | (1 << (MariaDBParser.IO_THREAD - 443)) | (1 << (MariaDBParser.IPC - 443)) | (1 << (MariaDBParser.ISOLATION - 443)) | (1 << (MariaDBParser.ISSUER - 443)) | (1 << (MariaDBParser.JSON - 443)) | (1 << (MariaDBParser.KEY_BLOCK_SIZE - 443)) | (1 << (MariaDBParser.LANGUAGE - 443)) | (1 << (MariaDBParser.LAST - 443)) | (1 << (MariaDBParser.LEAVES - 443)) | (1 << (MariaDBParser.LESS - 443)) | (1 << (MariaDBParser.LEVEL - 443)) | (1 << (MariaDBParser.LIST - 443)) | (1 << (MariaDBParser.LOCAL - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (MariaDBParser.LOCALES - 475)) | (1 << (MariaDBParser.LOGFILE - 475)) | (1 << (MariaDBParser.LOGS - 475)) | (1 << (MariaDBParser.MASTER - 475)) | (1 << (MariaDBParser.MASTER_AUTO_POSITION - 475)) | (1 << (MariaDBParser.MASTER_CONNECT_RETRY - 475)) | (1 << (MariaDBParser.MASTER_DELAY - 475)) | (1 << (MariaDBParser.MASTER_HEARTBEAT_PERIOD - 475)) | (1 << (MariaDBParser.MASTER_HOST - 475)) | (1 << (MariaDBParser.MASTER_LOG_FILE - 475)) | (1 << (MariaDBParser.MASTER_LOG_POS - 475)) | (1 << (MariaDBParser.MASTER_PASSWORD - 475)) | (1 << (MariaDBParser.MASTER_PORT - 475)) | (1 << (MariaDBParser.MASTER_RETRY_COUNT - 475)) | (1 << (MariaDBParser.MASTER_SSL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CA - 475)) | (1 << (MariaDBParser.MASTER_SSL_CAPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_CERT - 475)) | (1 << (MariaDBParser.MASTER_SSL_CIPHER - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRLPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_KEY - 475)) | (1 << (MariaDBParser.MASTER_TLS_VERSION - 475)) | (1 << (MariaDBParser.MASTER_USER - 475)) | (1 << (MariaDBParser.MAX_CONNECTIONS_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_QUERIES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_ROWS - 475)) | (1 << (MariaDBParser.MAX_SIZE - 475)) | (1 << (MariaDBParser.MAX_UPDATES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_USER_CONNECTIONS - 475)) | (1 << (MariaDBParser.MEDIUM - 475)) | (1 << (MariaDBParser.MEMBER - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (MariaDBParser.MERGE - 507)) | (1 << (MariaDBParser.MESSAGE_TEXT - 507)) | (1 << (MariaDBParser.MID - 507)) | (1 << (MariaDBParser.MIGRATE - 507)) | (1 << (MariaDBParser.MIN_ROWS - 507)) | (1 << (MariaDBParser.MODE - 507)) | (1 << (MariaDBParser.MODIFY - 507)) | (1 << (MariaDBParser.MUTEX - 507)) | (1 << (MariaDBParser.MYSQL - 507)) | (1 << (MariaDBParser.MYSQL_ERRNO - 507)) | (1 << (MariaDBParser.NAME - 507)) | (1 << (MariaDBParser.NAMES - 507)) | (1 << (MariaDBParser.NCHAR - 507)) | (1 << (MariaDBParser.NEVER - 507)) | (1 << (MariaDBParser.NEXT - 507)) | (1 << (MariaDBParser.NO - 507)) | (1 << (MariaDBParser.NOCACHE - 507)) | (1 << (MariaDBParser.NOCOPY - 507)) | (1 << (MariaDBParser.NOCYCLE - 507)) | (1 << (MariaDBParser.NOMAXVALUE - 507)) | (1 << (MariaDBParser.NOMINVALUE - 507)) | (1 << (MariaDBParser.NOWAIT - 507)) | (1 << (MariaDBParser.NODEGROUP - 507)) | (1 << (MariaDBParser.NONE - 507)) | (1 << (MariaDBParser.ODBC - 507)) | (1 << (MariaDBParser.OFFLINE - 507)) | (1 << (MariaDBParser.OFFSET - 507)) | (1 << (MariaDBParser.OF - 507)) | (1 << (MariaDBParser.OJ - 507)) | (1 << (MariaDBParser.OLD_PASSWORD - 507)) | (1 << (MariaDBParser.ONE - 507)) | (1 << (MariaDBParser.ONLINE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (MariaDBParser.ONLY - 539)) | (1 << (MariaDBParser.OPEN - 539)) | (1 << (MariaDBParser.OPTIMIZER_COSTS - 539)) | (1 << (MariaDBParser.OPTIONS - 539)) | (1 << (MariaDBParser.OWNER - 539)) | (1 << (MariaDBParser.PACK_KEYS - 539)) | (1 << (MariaDBParser.PAGE - 539)) | (1 << (MariaDBParser.PARSER - 539)) | (1 << (MariaDBParser.PARTIAL - 539)) | (1 << (MariaDBParser.PARTITIONING - 539)) | (1 << (MariaDBParser.PARTITIONS - 539)) | (1 << (MariaDBParser.PASSWORD - 539)) | (1 << (MariaDBParser.PASSWORD_LOCK_TIME - 539)) | (1 << (MariaDBParser.PHASE - 539)) | (1 << (MariaDBParser.PLUGIN - 539)) | (1 << (MariaDBParser.PLUGIN_DIR - 539)) | (1 << (MariaDBParser.PLUGINS - 539)) | (1 << (MariaDBParser.PORT - 539)) | (1 << (MariaDBParser.PRECEDES - 539)) | (1 << (MariaDBParser.PREPARE - 539)) | (1 << (MariaDBParser.PRESERVE - 539)) | (1 << (MariaDBParser.PREV - 539)) | (1 << (MariaDBParser.PROCESSLIST - 539)) | (1 << (MariaDBParser.PROFILE - 539)) | (1 << (MariaDBParser.PROFILES - 539)) | (1 << (MariaDBParser.PROXY - 539)) | (1 << (MariaDBParser.QUERY - 539)) | (1 << (MariaDBParser.QUERY_RESPONSE_TIME - 539)) | (1 << (MariaDBParser.QUICK - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (MariaDBParser.REBUILD - 571)) | (1 << (MariaDBParser.RECOVER - 571)) | (1 << (MariaDBParser.RECURSIVE - 571)) | (1 << (MariaDBParser.REDO_BUFFER_SIZE - 571)) | (1 << (MariaDBParser.REDUNDANT - 571)) | (1 << (MariaDBParser.RELAY - 571)) | (1 << (MariaDBParser.RELAY_LOG_FILE - 571)) | (1 << (MariaDBParser.RELAY_LOG_POS - 571)) | (1 << (MariaDBParser.RELAYLOG - 571)) | (1 << (MariaDBParser.REMOVE - 571)) | (1 << (MariaDBParser.REORGANIZE - 571)) | (1 << (MariaDBParser.REPAIR - 571)) | (1 << (MariaDBParser.REPLICATE_DO_DB - 571)) | (1 << (MariaDBParser.REPLICATE_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_REWRITE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATION - 571)) | (1 << (MariaDBParser.RESET - 571)) | (1 << (MariaDBParser.RESTART - 571)) | (1 << (MariaDBParser.RESUME - 571)) | (1 << (MariaDBParser.RETURNED_SQLSTATE - 571)) | (1 << (MariaDBParser.RETURNS - 571)) | (1 << (MariaDBParser.REUSE - 571)) | (1 << (MariaDBParser.ROLE - 571)) | (1 << (MariaDBParser.ROLLBACK - 571)) | (1 << (MariaDBParser.ROLLUP - 571)) | (1 << (MariaDBParser.ROTATE - 571)) | (1 << (MariaDBParser.ROW - 571)))) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & ((1 << (MariaDBParser.ROWS - 603)) | (1 << (MariaDBParser.ROW_FORMAT - 603)) | (1 << (MariaDBParser.RTREE - 603)) | (1 << (MariaDBParser.SAVEPOINT - 603)) | (1 << (MariaDBParser.SCHEDULE - 603)) | (1 << (MariaDBParser.SECURITY - 603)) | (1 << (MariaDBParser.SEQUENCE - 603)) | (1 << (MariaDBParser.SERVER - 603)) | (1 << (MariaDBParser.SESSION - 603)) | (1 << (MariaDBParser.SHARE - 603)) | (1 << (MariaDBParser.SHARED - 603)) | (1 << (MariaDBParser.SIGNED - 603)) | (1 << (MariaDBParser.SIMPLE - 603)) | (1 << (MariaDBParser.SLAVE - 603)) | (1 << (MariaDBParser.SLAVES - 603)) | (1 << (MariaDBParser.SLOW - 603)) | (1 << (MariaDBParser.SNAPSHOT - 603)) | (1 << (MariaDBParser.SOCKET - 603)) | (1 << (MariaDBParser.SOME - 603)) | (1 << (MariaDBParser.SONAME - 603)) | (1 << (MariaDBParser.SOUNDS - 603)) | (1 << (MariaDBParser.SOURCE - 603)) | (1 << (MariaDBParser.SQL_AFTER_GTIDS - 603)) | (1 << (MariaDBParser.SQL_AFTER_MTS_GAPS - 603)) | (1 << (MariaDBParser.SQL_BEFORE_GTIDS - 603)) | (1 << (MariaDBParser.SQL_BUFFER_RESULT - 603)) | (1 << (MariaDBParser.SQL_CACHE - 603)) | (1 << (MariaDBParser.SQL_NO_CACHE - 603)) | (1 << (MariaDBParser.SQL_THREAD - 603)) | (1 << (MariaDBParser.START - 603)) | (1 << (MariaDBParser.STARTS - 603)) | (1 << (MariaDBParser.STATS_AUTO_RECALC - 603)))) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & ((1 << (MariaDBParser.STATS_PERSISTENT - 635)) | (1 << (MariaDBParser.STATS_SAMPLE_PAGES - 635)) | (1 << (MariaDBParser.STATUS - 635)) | (1 << (MariaDBParser.STOP - 635)) | (1 << (MariaDBParser.STORAGE - 635)) | (1 << (MariaDBParser.STRING - 635)) | (1 << (MariaDBParser.SUBCLASS_ORIGIN - 635)) | (1 << (MariaDBParser.SUBJECT - 635)) | (1 << (MariaDBParser.SUBPARTITION - 635)) | (1 << (MariaDBParser.SUBPARTITIONS - 635)) | (1 << (MariaDBParser.SUSPEND - 635)) | (1 << (MariaDBParser.SWAPS - 635)) | (1 << (MariaDBParser.SWITCHES - 635)) | (1 << (MariaDBParser.TABLE_NAME - 635)) | (1 << (MariaDBParser.TABLESPACE - 635)) | (1 << (MariaDBParser.TABLE_TYPE - 635)) | (1 << (MariaDBParser.TEMPORARY - 635)) | (1 << (MariaDBParser.TEMPTABLE - 635)) | (1 << (MariaDBParser.THAN - 635)) | (1 << (MariaDBParser.TRADITIONAL - 635)) | (1 << (MariaDBParser.TRANSACTION - 635)) | (1 << (MariaDBParser.TRANSACTIONAL - 635)) | (1 << (MariaDBParser.TRIGGERS - 635)) | (1 << (MariaDBParser.TRUNCATE - 635)) | (1 << (MariaDBParser.TYPES - 635)) | (1 << (MariaDBParser.UNBOUNDED - 635)) | (1 << (MariaDBParser.UNDEFINED - 635)) | (1 << (MariaDBParser.UNDOFILE - 635)) | (1 << (MariaDBParser.UNDO_BUFFER_SIZE - 635)) | (1 << (MariaDBParser.UNINSTALL - 635)) | (1 << (MariaDBParser.UNKNOWN - 635)))) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & ((1 << (MariaDBParser.UNTIL - 667)) | (1 << (MariaDBParser.UPGRADE - 667)) | (1 << (MariaDBParser.USER - 667)) | (1 << (MariaDBParser.USE_FRM - 667)) | (1 << (MariaDBParser.USER_RESOURCES - 667)) | (1 << (MariaDBParser.VALIDATION - 667)) | (1 << (MariaDBParser.VALUE - 667)) | (1 << (MariaDBParser.VARIABLES - 667)) | (1 << (MariaDBParser.VIEW - 667)) | (1 << (MariaDBParser.VIRTUAL - 667)) | (1 << (MariaDBParser.VISIBLE - 667)) | (1 << (MariaDBParser.WAIT - 667)) | (1 << (MariaDBParser.WARNINGS - 667)) | (1 << (MariaDBParser.WITHOUT - 667)) | (1 << (MariaDBParser.WORK - 667)) | (1 << (MariaDBParser.WRAPPER - 667)) | (1 << (MariaDBParser.WSREP_MEMBERSHIP - 667)) | (1 << (MariaDBParser.WSREP_STATUS - 667)) | (1 << (MariaDBParser.X509 - 667)) | (1 << (MariaDBParser.XA - 667)) | (1 << (MariaDBParser.XML - 667)) | (1 << (MariaDBParser.EUR - 667)) | (1 << (MariaDBParser.USA - 667)) | (1 << (MariaDBParser.JIS - 667)) | (1 << (MariaDBParser.ISO - 667)) | (1 << (MariaDBParser.INTERNAL - 667)) | (1 << (MariaDBParser.QUARTER - 667)) | (1 << (MariaDBParser.MONTH - 667)) | (1 << (MariaDBParser.DAY - 667)) | (1 << (MariaDBParser.HOUR - 667)))) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & ((1 << (MariaDBParser.MINUTE - 699)) | (1 << (MariaDBParser.WEEK - 699)) | (1 << (MariaDBParser.SECOND - 699)) | (1 << (MariaDBParser.MICROSECOND - 699)) | (1 << (MariaDBParser.USER_STATISTICS - 699)) | (1 << (MariaDBParser.CLIENT_STATISTICS - 699)) | (1 << (MariaDBParser.INDEX_STATISTICS - 699)) | (1 << (MariaDBParser.TABLE_STATISTICS - 699)) | (1 << (MariaDBParser.ADMIN - 699)) | (1 << (MariaDBParser.AUDIT_ADMIN - 699)) | (1 << (MariaDBParser.BACKUP_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ENCRYPTION_ADMIN - 699)) | (1 << (MariaDBParser.CLONE_ADMIN - 699)) | (1 << (MariaDBParser.CONNECTION_ADMIN - 699)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ADMIN - 699)) | (1 << (MariaDBParser.EXECUTE - 699)) | (1 << (MariaDBParser.FILE - 699)) | (1 << (MariaDBParser.FIREWALL_ADMIN - 699)) | (1 << (MariaDBParser.FIREWALL_USER - 699)) | (1 << (MariaDBParser.GROUP_REPLICATION_ADMIN - 699)) | (1 << (MariaDBParser.INNODB_REDO_LOG_ARCHIVE - 699)) | (1 << (MariaDBParser.INVOKE - 699)) | (1 << (MariaDBParser.LAMBDA - 699)) | (1 << (MariaDBParser.NDB_STORED_USER - 699)) | (1 << (MariaDBParser.PASSWORDLESS_USER_ADMIN - 699)))) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & ((1 << (MariaDBParser.PERSIST_RO_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.PRIVILEGES - 731)) | (1 << (MariaDBParser.PROCESS - 731)) | (1 << (MariaDBParser.RELOAD - 731)) | (1 << (MariaDBParser.REPLICATION_APPLIER - 731)) | (1 << (MariaDBParser.REPLICATION_SLAVE_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_USER - 731)) | (1 << (MariaDBParser.ROLE_ADMIN - 731)) | (1 << (MariaDBParser.ROUTINE - 731)) | (1 << (MariaDBParser.S3 - 731)) | (1 << (MariaDBParser.SESSION_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.SET_USER_ID - 731)) | (1 << (MariaDBParser.SHOW_ROUTINE - 731)) | (1 << (MariaDBParser.SHUTDOWN - 731)) | (1 << (MariaDBParser.SUPER - 731)) | (1 << (MariaDBParser.SYSTEM_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.TABLES - 731)) | (1 << (MariaDBParser.TABLE_ENCRYPTION_ADMIN - 731)) | (1 << (MariaDBParser.VERSION_TOKEN_ADMIN - 731)) | (1 << (MariaDBParser.XA_RECOVER_ADMIN - 731)) | (1 << (MariaDBParser.ARMSCII8 - 731)) | (1 << (MariaDBParser.ASCII - 731)) | (1 << (MariaDBParser.BIG5 - 731)) | (1 << (MariaDBParser.CP1250 - 731)) | (1 << (MariaDBParser.CP1251 - 731)) | (1 << (MariaDBParser.CP1256 - 731)) | (1 << (MariaDBParser.CP1257 - 731)) | (1 << (MariaDBParser.CP850 - 731)) | (1 << (MariaDBParser.CP852 - 731)) | (1 << (MariaDBParser.CP866 - 731)))) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & ((1 << (MariaDBParser.CP932 - 763)) | (1 << (MariaDBParser.DEC8 - 763)) | (1 << (MariaDBParser.EUCJPMS - 763)) | (1 << (MariaDBParser.EUCKR - 763)) | (1 << (MariaDBParser.GB18030 - 763)) | (1 << (MariaDBParser.GB2312 - 763)) | (1 << (MariaDBParser.GBK - 763)) | (1 << (MariaDBParser.GEOSTD8 - 763)) | (1 << (MariaDBParser.GREEK - 763)) | (1 << (MariaDBParser.HEBREW - 763)) | (1 << (MariaDBParser.HP8 - 763)) | (1 << (MariaDBParser.KEYBCS2 - 763)) | (1 << (MariaDBParser.KOI8R - 763)) | (1 << (MariaDBParser.KOI8U - 763)) | (1 << (MariaDBParser.LATIN1 - 763)) | (1 << (MariaDBParser.LATIN2 - 763)) | (1 << (MariaDBParser.LATIN5 - 763)) | (1 << (MariaDBParser.LATIN7 - 763)) | (1 << (MariaDBParser.MACCE - 763)) | (1 << (MariaDBParser.MACROMAN - 763)) | (1 << (MariaDBParser.SJIS - 763)) | (1 << (MariaDBParser.SWE7 - 763)) | (1 << (MariaDBParser.TIS620 - 763)) | (1 << (MariaDBParser.UCS2 - 763)) | (1 << (MariaDBParser.UJIS - 763)) | (1 << (MariaDBParser.UTF16 - 763)) | (1 << (MariaDBParser.UTF16LE - 763)) | (1 << (MariaDBParser.UTF32 - 763)) | (1 << (MariaDBParser.UTF8 - 763)) | (1 << (MariaDBParser.UTF8MB3 - 763)) | (1 << (MariaDBParser.UTF8MB4 - 763)) | (1 << (MariaDBParser.ARCHIVE - 763)))) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & ((1 << (MariaDBParser.BLACKHOLE - 795)) | (1 << (MariaDBParser.CSV - 795)) | (1 << (MariaDBParser.FEDERATED - 795)) | (1 << (MariaDBParser.INNODB - 795)) | (1 << (MariaDBParser.MEMORY - 795)) | (1 << (MariaDBParser.MRG_MYISAM - 795)) | (1 << (MariaDBParser.MYISAM - 795)) | (1 << (MariaDBParser.NDB - 795)) | (1 << (MariaDBParser.NDBCLUSTER - 795)) | (1 << (MariaDBParser.PERFORMANCE_SCHEMA - 795)) | (1 << (MariaDBParser.TOKUDB - 795)) | (1 << (MariaDBParser.REPEATABLE - 795)) | (1 << (MariaDBParser.COMMITTED - 795)) | (1 << (MariaDBParser.UNCOMMITTED - 795)) | (1 << (MariaDBParser.SERIALIZABLE - 795)) | (1 << (MariaDBParser.GEOMETRYCOLLECTION - 795)) | (1 << (MariaDBParser.LINESTRING - 795)) | (1 << (MariaDBParser.MULTILINESTRING - 795)) | (1 << (MariaDBParser.MULTIPOINT - 795)) | (1 << (MariaDBParser.MULTIPOLYGON - 795)) | (1 << (MariaDBParser.POINT - 795)) | (1 << (MariaDBParser.POLYGON - 795)) | (1 << (MariaDBParser.ABS - 795)) | (1 << (MariaDBParser.ACOS - 795)) | (1 << (MariaDBParser.ADDDATE - 795)) | (1 << (MariaDBParser.ADDTIME - 795)) | (1 << (MariaDBParser.AES_DECRYPT - 795)) | (1 << (MariaDBParser.AES_ENCRYPT - 795)) | (1 << (MariaDBParser.AREA - 795)) | (1 << (MariaDBParser.ASBINARY - 795)))) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & ((1 << (MariaDBParser.ASIN - 827)) | (1 << (MariaDBParser.ASTEXT - 827)) | (1 << (MariaDBParser.ASWKB - 827)) | (1 << (MariaDBParser.ASWKT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DECRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DERIVE - 827)) | (1 << (MariaDBParser.ASYMMETRIC_ENCRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_SIGN - 827)) | (1 << (MariaDBParser.ASYMMETRIC_VERIFY - 827)) | (1 << (MariaDBParser.ATAN - 827)) | (1 << (MariaDBParser.ATAN2 - 827)) | (1 << (MariaDBParser.BENCHMARK - 827)) | (1 << (MariaDBParser.BIN - 827)) | (1 << (MariaDBParser.BIT_COUNT - 827)) | (1 << (MariaDBParser.BIT_LENGTH - 827)) | (1 << (MariaDBParser.BUFFER - 827)) | (1 << (MariaDBParser.CATALOG_NAME - 827)) | (1 << (MariaDBParser.CEIL - 827)) | (1 << (MariaDBParser.CEILING - 827)) | (1 << (MariaDBParser.CENTROID - 827)) | (1 << (MariaDBParser.CHARACTER_LENGTH - 827)) | (1 << (MariaDBParser.CHARSET - 827)) | (1 << (MariaDBParser.CHAR_LENGTH - 827)) | (1 << (MariaDBParser.COERCIBILITY - 827)) | (1 << (MariaDBParser.COLLATION - 827)) | (1 << (MariaDBParser.COMPRESS - 827)) | (1 << (MariaDBParser.CONCAT - 827)) | (1 << (MariaDBParser.CONCAT_WS - 827)) | (1 << (MariaDBParser.CONNECTION_ID - 827)) | (1 << (MariaDBParser.CONV - 827)) | (1 << (MariaDBParser.CONVERT_TZ - 827)) | (1 << (MariaDBParser.COS - 827)))) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & ((1 << (MariaDBParser.COT - 859)) | (1 << (MariaDBParser.CRC32 - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY - 859)) | (1 << (MariaDBParser.CREATE_DH_PARAMETERS - 859)) | (1 << (MariaDBParser.CREATE_DIGEST - 859)) | (1 << (MariaDBParser.CROSSES - 859)) | (1 << (MariaDBParser.DATEDIFF - 859)) | (1 << (MariaDBParser.DATE_FORMAT - 859)) | (1 << (MariaDBParser.DAYNAME - 859)) | (1 << (MariaDBParser.DAYOFMONTH - 859)) | (1 << (MariaDBParser.DAYOFWEEK - 859)) | (1 << (MariaDBParser.DAYOFYEAR - 859)) | (1 << (MariaDBParser.DECODE - 859)) | (1 << (MariaDBParser.DEGREES - 859)) | (1 << (MariaDBParser.DES_DECRYPT - 859)) | (1 << (MariaDBParser.DES_ENCRYPT - 859)) | (1 << (MariaDBParser.DIMENSION - 859)) | (1 << (MariaDBParser.DISJOINT - 859)) | (1 << (MariaDBParser.ELT - 859)) | (1 << (MariaDBParser.ENCODE - 859)) | (1 << (MariaDBParser.ENCRYPT - 859)) | (1 << (MariaDBParser.ENDPOINT - 859)) | (1 << (MariaDBParser.ENGINE_ATTRIBUTE - 859)) | (1 << (MariaDBParser.ENVELOPE - 859)) | (1 << (MariaDBParser.EQUALS - 859)) | (1 << (MariaDBParser.EXP - 859)) | (1 << (MariaDBParser.EXPORT_SET - 859)) | (1 << (MariaDBParser.EXTERIORRING - 859)) | (1 << (MariaDBParser.EXTRACTVALUE - 859)) | (1 << (MariaDBParser.FIELD - 859)) | (1 << (MariaDBParser.FIND_IN_SET - 859)))) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & ((1 << (MariaDBParser.FLOOR - 891)) | (1 << (MariaDBParser.FORMAT - 891)) | (1 << (MariaDBParser.FOUND_ROWS - 891)) | (1 << (MariaDBParser.FROM_BASE64 - 891)) | (1 << (MariaDBParser.FROM_DAYS - 891)) | (1 << (MariaDBParser.FROM_UNIXTIME - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYN - 891)) | (1 << (MariaDBParser.GEOMETRYTYPE - 891)) | (1 << (MariaDBParser.GEOMFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMFROMWKB - 891)) | (1 << (MariaDBParser.GET_FORMAT - 891)) | (1 << (MariaDBParser.GET_LOCK - 891)) | (1 << (MariaDBParser.GLENGTH - 891)) | (1 << (MariaDBParser.GREATEST - 891)) | (1 << (MariaDBParser.GTID_SUBSET - 891)) | (1 << (MariaDBParser.GTID_SUBTRACT - 891)) | (1 << (MariaDBParser.HEX - 891)) | (1 << (MariaDBParser.IFNULL - 891)) | (1 << (MariaDBParser.INET6_ATON - 891)) | (1 << (MariaDBParser.INET6_NTOA - 891)) | (1 << (MariaDBParser.INET_ATON - 891)) | (1 << (MariaDBParser.INET_NTOA - 891)) | (1 << (MariaDBParser.INSTR - 891)) | (1 << (MariaDBParser.INTERIORRINGN - 891)) | (1 << (MariaDBParser.INTERSECTS - 891)) | (1 << (MariaDBParser.ISCLOSED - 891)))) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & ((1 << (MariaDBParser.ISEMPTY - 923)) | (1 << (MariaDBParser.ISNULL - 923)) | (1 << (MariaDBParser.ISSIMPLE - 923)) | (1 << (MariaDBParser.IS_FREE_LOCK - 923)) | (1 << (MariaDBParser.IS_IPV4 - 923)) | (1 << (MariaDBParser.IS_IPV4_COMPAT - 923)) | (1 << (MariaDBParser.IS_IPV4_MAPPED - 923)) | (1 << (MariaDBParser.IS_IPV6 - 923)) | (1 << (MariaDBParser.IS_USED_LOCK - 923)) | (1 << (MariaDBParser.LAST_INSERT_ID - 923)) | (1 << (MariaDBParser.LCASE - 923)) | (1 << (MariaDBParser.LEAST - 923)) | (1 << (MariaDBParser.LENGTH - 923)) | (1 << (MariaDBParser.LINEFROMTEXT - 923)) | (1 << (MariaDBParser.LINEFROMWKB - 923)) | (1 << (MariaDBParser.LINESTRINGFROMTEXT - 923)) | (1 << (MariaDBParser.LINESTRINGFROMWKB - 923)) | (1 << (MariaDBParser.LN - 923)) | (1 << (MariaDBParser.LOAD_FILE - 923)) | (1 << (MariaDBParser.LOCATE - 923)) | (1 << (MariaDBParser.LOG - 923)) | (1 << (MariaDBParser.LOG10 - 923)) | (1 << (MariaDBParser.LOG2 - 923)) | (1 << (MariaDBParser.LOWER - 923)) | (1 << (MariaDBParser.LPAD - 923)) | (1 << (MariaDBParser.LTRIM - 923)) | (1 << (MariaDBParser.MAKEDATE - 923)) | (1 << (MariaDBParser.MAKETIME - 923)) | (1 << (MariaDBParser.MAKE_SET - 923)) | (1 << (MariaDBParser.MASTER_POS_WAIT - 923)) | (1 << (MariaDBParser.MBRCONTAINS - 923)) | (1 << (MariaDBParser.MBRDISJOINT - 923)))) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & ((1 << (MariaDBParser.MBREQUAL - 955)) | (1 << (MariaDBParser.MBRINTERSECTS - 955)) | (1 << (MariaDBParser.MBROVERLAPS - 955)) | (1 << (MariaDBParser.MBRTOUCHES - 955)) | (1 << (MariaDBParser.MBRWITHIN - 955)) | (1 << (MariaDBParser.MD5 - 955)) | (1 << (MariaDBParser.MLINEFROMTEXT - 955)) | (1 << (MariaDBParser.MLINEFROMWKB - 955)) | (1 << (MariaDBParser.MONTHNAME - 955)) | (1 << (MariaDBParser.MPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MPOLYFROMTEXT - 955)) | (1 << (MariaDBParser.MPOLYFROMWKB - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMTEXT - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMWKB - 955)) | (1 << (MariaDBParser.NAME_CONST - 955)) | (1 << (MariaDBParser.NULLIF - 955)) | (1 << (MariaDBParser.NUMGEOMETRIES - 955)) | (1 << (MariaDBParser.NUMINTERIORRINGS - 955)) | (1 << (MariaDBParser.NUMPOINTS - 955)) | (1 << (MariaDBParser.OCT - 955)) | (1 << (MariaDBParser.OCTET_LENGTH - 955)) | (1 << (MariaDBParser.ORD - 955)) | (1 << (MariaDBParser.OVERLAPS - 955)) | (1 << (MariaDBParser.PERIOD_ADD - 955)) | (1 << (MariaDBParser.PERIOD_DIFF - 955)) | (1 << (MariaDBParser.PI - 955)) | (1 << (MariaDBParser.POINTFROMTEXT - 955)))) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & ((1 << (MariaDBParser.POINTFROMWKB - 987)) | (1 << (MariaDBParser.POINTN - 987)) | (1 << (MariaDBParser.POLYFROMTEXT - 987)) | (1 << (MariaDBParser.POLYFROMWKB - 987)) | (1 << (MariaDBParser.POLYGONFROMTEXT - 987)) | (1 << (MariaDBParser.POLYGONFROMWKB - 987)) | (1 << (MariaDBParser.POW - 987)) | (1 << (MariaDBParser.POWER - 987)) | (1 << (MariaDBParser.QUOTE - 987)) | (1 << (MariaDBParser.RADIANS - 987)) | (1 << (MariaDBParser.RAND - 987)) | (1 << (MariaDBParser.RANDOM_BYTES - 987)) | (1 << (MariaDBParser.RELEASE_LOCK - 987)) | (1 << (MariaDBParser.REVERSE - 987)) | (1 << (MariaDBParser.ROUND - 987)) | (1 << (MariaDBParser.ROW_COUNT - 987)) | (1 << (MariaDBParser.RPAD - 987)) | (1 << (MariaDBParser.RTRIM - 987)) | (1 << (MariaDBParser.SEC_TO_TIME - 987)) | (1 << (MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE - 987)) | (1 << (MariaDBParser.SESSION_USER - 987)) | (1 << (MariaDBParser.SHA - 987)) | (1 << (MariaDBParser.SHA1 - 987)) | (1 << (MariaDBParser.SHA2 - 987)) | (1 << (MariaDBParser.SCHEMA_NAME - 987)) | (1 << (MariaDBParser.SIGN - 987)) | (1 << (MariaDBParser.SIN - 987)) | (1 << (MariaDBParser.SLEEP - 987)) | (1 << (MariaDBParser.SOUNDEX - 987)) | (1 << (MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS - 987)) | (1 << (MariaDBParser.SQRT - 987)) | (1 << (MariaDBParser.SRID - 987)))) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & ((1 << (MariaDBParser.STARTPOINT - 1019)) | (1 << (MariaDBParser.STRCMP - 1019)) | (1 << (MariaDBParser.STR_TO_DATE - 1019)) | (1 << (MariaDBParser.ST_AREA - 1019)) | (1 << (MariaDBParser.ST_ASBINARY - 1019)) | (1 << (MariaDBParser.ST_ASTEXT - 1019)) | (1 << (MariaDBParser.ST_ASWKB - 1019)) | (1 << (MariaDBParser.ST_ASWKT - 1019)) | (1 << (MariaDBParser.ST_BUFFER - 1019)) | (1 << (MariaDBParser.ST_CENTROID - 1019)) | (1 << (MariaDBParser.ST_CONTAINS - 1019)) | (1 << (MariaDBParser.ST_CROSSES - 1019)) | (1 << (MariaDBParser.ST_DIFFERENCE - 1019)) | (1 << (MariaDBParser.ST_DIMENSION - 1019)) | (1 << (MariaDBParser.ST_DISJOINT - 1019)) | (1 << (MariaDBParser.ST_DISTANCE - 1019)) | (1 << (MariaDBParser.ST_ENDPOINT - 1019)) | (1 << (MariaDBParser.ST_ENVELOPE - 1019)) | (1 << (MariaDBParser.ST_EQUALS - 1019)) | (1 << (MariaDBParser.ST_EXTERIORRING - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYN - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYTYPE - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMWKB - 1019)) | (1 << (MariaDBParser.ST_INTERIORRINGN - 1019)))) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & ((1 << (MariaDBParser.ST_INTERSECTION - 1051)) | (1 << (MariaDBParser.ST_INTERSECTS - 1051)) | (1 << (MariaDBParser.ST_ISCLOSED - 1051)) | (1 << (MariaDBParser.ST_ISEMPTY - 1051)) | (1 << (MariaDBParser.ST_ISSIMPLE - 1051)) | (1 << (MariaDBParser.ST_LINEFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINEFROMWKB - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMWKB - 1051)) | (1 << (MariaDBParser.ST_NUMGEOMETRIES - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRING - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRINGS - 1051)) | (1 << (MariaDBParser.ST_NUMPOINTS - 1051)) | (1 << (MariaDBParser.ST_OVERLAPS - 1051)) | (1 << (MariaDBParser.ST_POINTFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POINTFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POINTN - 1051)) | (1 << (MariaDBParser.ST_POLYFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMWKB - 1051)) | (1 << (MariaDBParser.ST_SRID - 1051)) | (1 << (MariaDBParser.ST_STARTPOINT - 1051)) | (1 << (MariaDBParser.ST_SYMDIFFERENCE - 1051)) | (1 << (MariaDBParser.ST_TOUCHES - 1051)) | (1 << (MariaDBParser.ST_UNION - 1051)) | (1 << (MariaDBParser.ST_WITHIN - 1051)) | (1 << (MariaDBParser.ST_X - 1051)) | (1 << (MariaDBParser.ST_Y - 1051)) | (1 << (MariaDBParser.SUBDATE - 1051)) | (1 << (MariaDBParser.SUBSTRING_INDEX - 1051)) | (1 << (MariaDBParser.SUBTIME - 1051)))) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & ((1 << (MariaDBParser.SYSTEM_USER - 1083)) | (1 << (MariaDBParser.TAN - 1083)) | (1 << (MariaDBParser.TIMEDIFF - 1083)) | (1 << (MariaDBParser.TIMESTAMPADD - 1083)) | (1 << (MariaDBParser.TIMESTAMPDIFF - 1083)) | (1 << (MariaDBParser.TIME_FORMAT - 1083)) | (1 << (MariaDBParser.TIME_TO_SEC - 1083)) | (1 << (MariaDBParser.TOUCHES - 1083)) | (1 << (MariaDBParser.TO_BASE64 - 1083)) | (1 << (MariaDBParser.TO_DAYS - 1083)) | (1 << (MariaDBParser.TO_SECONDS - 1083)) | (1 << (MariaDBParser.UCASE - 1083)) | (1 << (MariaDBParser.UNCOMPRESS - 1083)) | (1 << (MariaDBParser.UNCOMPRESSED_LENGTH - 1083)) | (1 << (MariaDBParser.UNHEX - 1083)) | (1 << (MariaDBParser.UNIX_TIMESTAMP - 1083)) | (1 << (MariaDBParser.UPDATEXML - 1083)) | (1 << (MariaDBParser.UPPER - 1083)) | (1 << (MariaDBParser.UUID - 1083)) | (1 << (MariaDBParser.UUID_SHORT - 1083)) | (1 << (MariaDBParser.VALIDATE_PASSWORD_STRENGTH - 1083)) | (1 << (MariaDBParser.VERSION - 1083)) | (1 << (MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1083)) | (1 << (MariaDBParser.WEEKDAY - 1083)) | (1 << (MariaDBParser.WEEKOFYEAR - 1083)) | (1 << (MariaDBParser.WEIGHT_STRING - 1083)) | (1 << (MariaDBParser.WITHIN - 1083)) | (1 << (MariaDBParser.YEARWEEK - 1083)) | (1 << (MariaDBParser.Y_FUNCTION - 1083)) | (1 << (MariaDBParser.X_FUNCTION - 1083)) | (1 << (MariaDBParser.VIA - 1083)) | (1 << (MariaDBParser.LASTVAL - 1083)))) !== 0) || ((((_la - 1115)) & ~0x1F) === 0 && ((1 << (_la - 1115)) & ((1 << (MariaDBParser.NEXTVAL - 1115)) | (1 << (MariaDBParser.SETVAL - 1115)) | (1 << (MariaDBParser.PREVIOUS - 1115)) | (1 << (MariaDBParser.PERSISTENT - 1115)) | (1 << (MariaDBParser.BINLOG_MONITOR - 1115)) | (1 << (MariaDBParser.BINLOG_REPLAY - 1115)) | (1 << (MariaDBParser.FEDERATED_ADMIN - 1115)) | (1 << (MariaDBParser.READ_ONLY_ADMIN - 1115)) | (1 << (MariaDBParser.REPLICA - 1115)) | (1 << (MariaDBParser.REPLICAS - 1115)) | (1 << (MariaDBParser.REPLICATION_MASTER_ADMIN - 1115)) | (1 << (MariaDBParser.MONITOR - 1115)) | (1 << (MariaDBParser.READ_ONLY - 1115)) | (1 << (MariaDBParser.REPLAY - 1115)) | (1 << (MariaDBParser.MOD - 1115)))) !== 0) || ((((_la - 1166)) & ~0x1F) === 0 && ((1 << (_la - 1166)) & ((1 << (MariaDBParser.CHARSET_REVERSE_QOUTE_STRING - 1166)) | (1 << (MariaDBParser.STRING_LITERAL - 1166)) | (1 << (MariaDBParser.ID - 1166)))) !== 0)) {
						{
						this.state = 2776;
						(_localctx as AlterByAddForeignKeyContext)._name = this.uid();
						}
					}

					}
				}

				this.state = 2781;
				this.match(MariaDBParser.FOREIGN);
				this.state = 2782;
				this.match(MariaDBParser.KEY);
				this.state = 2784;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 361, this._ctx) ) {
				case 1:
					{
					this.state = 2783;
					this.ifNotExists();
					}
					break;
				}
				this.state = 2787;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MariaDBParser.ATTRIBUTE) | (1 << MariaDBParser.BODY) | (1 << MariaDBParser.BUCKETS) | (1 << MariaDBParser.CONDITION))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (MariaDBParser.CURRENT - 36)) | (1 << (MariaDBParser.CURRENT_ROLE - 36)) | (1 << (MariaDBParser.CURRENT_USER - 36)) | (1 << (MariaDBParser.DATABASE - 36)) | (1 << (MariaDBParser.DEFAULT - 36)) | (1 << (MariaDBParser.DIAGNOSTICS - 36)) | (1 << (MariaDBParser.EMPTY - 36)) | (1 << (MariaDBParser.EXCEPT - 36)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (MariaDBParser.GROUP - 73)) | (1 << (MariaDBParser.IF - 73)) | (1 << (MariaDBParser.IGNORED - 73)) | (1 << (MariaDBParser.INSERT - 73)) | (1 << (MariaDBParser.LATERAL - 73)) | (1 << (MariaDBParser.LEFT - 73)) | (1 << (MariaDBParser.LOCKED - 73)))) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & ((1 << (MariaDBParser.MAXVALUE - 110)) | (1 << (MariaDBParser.MINVALUE - 110)) | (1 << (MariaDBParser.NUMBER - 110)) | (1 << (MariaDBParser.OPTIONAL - 110)) | (1 << (MariaDBParser.ORDER - 110)) | (1 << (MariaDBParser.PRIMARY - 110)) | (1 << (MariaDBParser.PACKAGE - 110)))) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (MariaDBParser.REPLACE - 142)) | (1 << (MariaDBParser.RIGHT - 142)) | (1 << (MariaDBParser.SCHEMA - 142)) | (1 << (MariaDBParser.SKIP_ - 142)) | (1 << (MariaDBParser.STACKED - 142)) | (1 << (MariaDBParser.STATEMENT - 142)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MariaDBParser.DATE - 217)) | (1 << (MariaDBParser.TIME - 217)) | (1 << (MariaDBParser.TIMESTAMP - 217)) | (1 << (MariaDBParser.DATETIME - 217)) | (1 << (MariaDBParser.YEAR - 217)) | (1 << (MariaDBParser.BINARY - 217)) | (1 << (MariaDBParser.TEXT - 217)) | (1 << (MariaDBParser.ENUM - 217)) | (1 << (MariaDBParser.SERIAL - 217)))) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & ((1 << (MariaDBParser.JSON_ARRAY - 251)) | (1 << (MariaDBParser.JSON_ARRAYAGG - 251)) | (1 << (MariaDBParser.JSON_ARRAY_APPEND - 251)) | (1 << (MariaDBParser.JSON_ARRAY_INSERT - 251)) | (1 << (MariaDBParser.JSON_CONTAINS - 251)) | (1 << (MariaDBParser.JSON_CONTAINS_PATH - 251)) | (1 << (MariaDBParser.JSON_DEPTH - 251)) | (1 << (MariaDBParser.JSON_EXTRACT - 251)) | (1 << (MariaDBParser.JSON_INSERT - 251)) | (1 << (MariaDBParser.JSON_KEYS - 251)) | (1 << (MariaDBParser.JSON_LENGTH - 251)) | (1 << (MariaDBParser.JSON_MERGE - 251)) | (1 << (MariaDBParser.JSON_MERGE_PATCH - 251)) | (1 << (MariaDBParser.JSON_MERGE_PRESERVE - 251)) | (1 << (MariaDBParser.JSON_OBJECT - 251)) | (1 << (MariaDBParser.JSON_OBJECTAGG - 251)) | (1 << (MariaDBParser.JSON_OVERLAPS - 251)) | (1 << (MariaDBParser.JSON_PRETTY - 251)) | (1 << (MariaDBParser.JSON_QUOTE - 251)) | (1 << (MariaDBParser.JSON_REMOVE - 251)) | (1 << (MariaDBParser.JSON_REPLACE - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALID - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT - 251)) | (1 << (MariaDBParser.JSON_SEARCH - 251)) | (1 << (MariaDBParser.JSON_SET - 251)) | (1 << (MariaDBParser.JSON_STORAGE_FREE - 251)) | (1 << (MariaDBParser.JSON_STORAGE_SIZE - 251)) | (1 << (MariaDBParser.JSON_TABLE - 251)) | (1 << (MariaDBParser.JSON_TYPE - 251)) | (1 << (MariaDBParser.JSON_UNQUOTE - 251)) | (1 << (MariaDBParser.JSON_VALID - 251)) | (1 << (MariaDBParser.JSON_VALUE - 251)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (MariaDBParser.NESTED - 283)) | (1 << (MariaDBParser.ORDINALITY - 283)) | (1 << (MariaDBParser.PATH - 283)) | (1 << (MariaDBParser.AVG - 283)) | (1 << (MariaDBParser.BIT_AND - 283)) | (1 << (MariaDBParser.BIT_OR - 283)) | (1 << (MariaDBParser.BIT_XOR - 283)) | (1 << (MariaDBParser.COUNT - 283)) | (1 << (MariaDBParser.CUME_DIST - 283)) | (1 << (MariaDBParser.DENSE_RANK - 283)) | (1 << (MariaDBParser.FIRST_VALUE - 283)) | (1 << (MariaDBParser.GROUP_CONCAT - 283)) | (1 << (MariaDBParser.LAG - 283)) | (1 << (MariaDBParser.LAST_VALUE - 283)) | (1 << (MariaDBParser.LEAD - 283)) | (1 << (MariaDBParser.MAX - 283)) | (1 << (MariaDBParser.MIN - 283)) | (1 << (MariaDBParser.NTILE - 283)) | (1 << (MariaDBParser.NTH_VALUE - 283)) | (1 << (MariaDBParser.PERCENT_RANK - 283)) | (1 << (MariaDBParser.RANK - 283)) | (1 << (MariaDBParser.ROW_NUMBER - 283)) | (1 << (MariaDBParser.STD - 283)) | (1 << (MariaDBParser.STDDEV - 283)) | (1 << (MariaDBParser.STDDEV_POP - 283)) | (1 << (MariaDBParser.STDDEV_SAMP - 283)) | (1 << (MariaDBParser.SUM - 283)) | (1 << (MariaDBParser.VAR_POP - 283)) | (1 << (MariaDBParser.VAR_SAMP - 283)) | (1 << (MariaDBParser.VARIANCE - 283)) | (1 << (MariaDBParser.CURRENT_DATE - 283)) | (1 << (MariaDBParser.CURRENT_TIME - 283)))) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & ((1 << (MariaDBParser.CURRENT_TIMESTAMP - 315)) | (1 << (MariaDBParser.LOCALTIME - 315)) | (1 << (MariaDBParser.CURDATE - 315)) | (1 << (MariaDBParser.CURTIME - 315)) | (1 << (MariaDBParser.DATE_ADD - 315)) | (1 << (MariaDBParser.DATE_SUB - 315)) | (1 << (MariaDBParser.LOCALTIMESTAMP - 315)) | (1 << (MariaDBParser.NOW - 315)) | (1 << (MariaDBParser.POSITION - 315)) | (1 << (MariaDBParser.SUBSTR - 315)) | (1 << (MariaDBParser.SUBSTRING - 315)) | (1 << (MariaDBParser.SYSDATE - 315)) | (1 << (MariaDBParser.TRIM - 315)) | (1 << (MariaDBParser.UTC_DATE - 315)) | (1 << (MariaDBParser.UTC_TIME - 315)) | (1 << (MariaDBParser.UTC_TIMESTAMP - 315)) | (1 << (MariaDBParser.ACCOUNT - 315)) | (1 << (MariaDBParser.ACTION - 315)) | (1 << (MariaDBParser.AFTER - 315)) | (1 << (MariaDBParser.AGGREGATE - 315)) | (1 << (MariaDBParser.ALGORITHM - 315)) | (1 << (MariaDBParser.ANY - 315)) | (1 << (MariaDBParser.AT - 315)) | (1 << (MariaDBParser.AUTHORS - 315)) | (1 << (MariaDBParser.AUTOCOMMIT - 315)) | (1 << (MariaDBParser.AUTOEXTEND_SIZE - 315)) | (1 << (MariaDBParser.AUTO_INCREMENT - 315)) | (1 << (MariaDBParser.AVG_ROW_LENGTH - 315)) | (1 << (MariaDBParser.BEGIN - 315)) | (1 << (MariaDBParser.BINLOG - 315)) | (1 << (MariaDBParser.BIT - 315)))) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & ((1 << (MariaDBParser.BLOCK - 347)) | (1 << (MariaDBParser.BOOL - 347)) | (1 << (MariaDBParser.BOOLEAN - 347)) | (1 << (MariaDBParser.BTREE - 347)) | (1 << (MariaDBParser.CACHE - 347)) | (1 << (MariaDBParser.CASCADED - 347)) | (1 << (MariaDBParser.CHAIN - 347)) | (1 << (MariaDBParser.CHANGED - 347)) | (1 << (MariaDBParser.CHANNEL - 347)) | (1 << (MariaDBParser.CHECKSUM - 347)) | (1 << (MariaDBParser.PAGE_CHECKSUM - 347)) | (1 << (MariaDBParser.CIPHER - 347)) | (1 << (MariaDBParser.CLASS_ORIGIN - 347)) | (1 << (MariaDBParser.CLIENT - 347)) | (1 << (MariaDBParser.CLOSE - 347)) | (1 << (MariaDBParser.CLUSTERING - 347)) | (1 << (MariaDBParser.COALESCE - 347)) | (1 << (MariaDBParser.CODE - 347)) | (1 << (MariaDBParser.COLUMNS - 347)) | (1 << (MariaDBParser.COLUMN_FORMAT - 347)) | (1 << (MariaDBParser.COLUMN_NAME - 347)) | (1 << (MariaDBParser.COMMENT - 347)) | (1 << (MariaDBParser.COMMIT - 347)) | (1 << (MariaDBParser.COMPACT - 347)) | (1 << (MariaDBParser.COMPLETION - 347)) | (1 << (MariaDBParser.COMPRESSED - 347)) | (1 << (MariaDBParser.COMPRESSION - 347)) | (1 << (MariaDBParser.CONCURRENT - 347)) | (1 << (MariaDBParser.CONNECT - 347)) | (1 << (MariaDBParser.CONNECTION - 347)) | (1 << (MariaDBParser.CONSISTENT - 347)) | (1 << (MariaDBParser.CONSTRAINT_CATALOG - 347)))) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & ((1 << (MariaDBParser.CONSTRAINT_SCHEMA - 379)) | (1 << (MariaDBParser.CONSTRAINT_NAME - 379)) | (1 << (MariaDBParser.CONTAINS - 379)) | (1 << (MariaDBParser.CONTEXT - 379)) | (1 << (MariaDBParser.CONTRIBUTORS - 379)) | (1 << (MariaDBParser.COPY - 379)) | (1 << (MariaDBParser.CPU - 379)) | (1 << (MariaDBParser.CYCLE - 379)) | (1 << (MariaDBParser.CURSOR_NAME - 379)) | (1 << (MariaDBParser.DATA - 379)) | (1 << (MariaDBParser.DATAFILE - 379)) | (1 << (MariaDBParser.DEALLOCATE - 379)) | (1 << (MariaDBParser.DEFAULT_AUTH - 379)) | (1 << (MariaDBParser.DEFINER - 379)) | (1 << (MariaDBParser.DELAY_KEY_WRITE - 379)) | (1 << (MariaDBParser.DES_KEY_FILE - 379)) | (1 << (MariaDBParser.DIRECTORY - 379)) | (1 << (MariaDBParser.DISABLE - 379)) | (1 << (MariaDBParser.DISCARD - 379)) | (1 << (MariaDBParser.DISK - 379)) | (1 << (MariaDBParser.DO - 379)) | (1 << (MariaDBParser.DUMPFILE - 379)) | (1 << (MariaDBParser.DUPLICATE - 379)) | (1 << (MariaDBParser.DYNAMIC - 379)) | (1 << (MariaDBParser.ENABLE - 379)) | (1 << (MariaDBParser.ENCRYPTED - 379)) | (1 << (MariaDBParser.ENCRYPTION - 379)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ID - 379)) | (1 << (MariaDBParser.END - 379)) | (1 << (MariaDBParser.ENDS - 379)) | (1 << (MariaDBParser.ENGINE - 379)) | (1 << (MariaDBParser.ENGINES - 379)))) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & ((1 << (MariaDBParser.ERROR - 411)) | (1 << (MariaDBParser.ERRORS - 411)) | (1 << (MariaDBParser.ESCAPE - 411)) | (1 << (MariaDBParser.EVEN - 411)) | (1 << (MariaDBParser.EVENT - 411)) | (1 << (MariaDBParser.EVENTS - 411)) | (1 << (MariaDBParser.EVERY - 411)) | (1 << (MariaDBParser.EXCHANGE - 411)) | (1 << (MariaDBParser.EXCLUSIVE - 411)) | (1 << (MariaDBParser.EXPIRE - 411)) | (1 << (MariaDBParser.EXPORT - 411)) | (1 << (MariaDBParser.EXTENDED - 411)) | (1 << (MariaDBParser.EXTENT_SIZE - 411)) | (1 << (MariaDBParser.FAILED_LOGIN_ATTEMPTS - 411)) | (1 << (MariaDBParser.FAST - 411)) | (1 << (MariaDBParser.FAULTS - 411)) | (1 << (MariaDBParser.FIELDS - 411)) | (1 << (MariaDBParser.FILE_BLOCK_SIZE - 411)) | (1 << (MariaDBParser.FILTER - 411)) | (1 << (MariaDBParser.FIRST - 411)) | (1 << (MariaDBParser.FIXED - 411)) | (1 << (MariaDBParser.FLUSH - 411)) | (1 << (MariaDBParser.FOLLOWS - 411)) | (1 << (MariaDBParser.FOUND - 411)) | (1 << (MariaDBParser.FULL - 411)) | (1 << (MariaDBParser.FUNCTION - 411)) | (1 << (MariaDBParser.GENERAL - 411)) | (1 << (MariaDBParser.GLOBAL - 411)) | (1 << (MariaDBParser.GRANTS - 411)) | (1 << (MariaDBParser.GROUP_REPLICATION - 411)) | (1 << (MariaDBParser.HANDLER - 411)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (MariaDBParser.HASH - 443)) | (1 << (MariaDBParser.HELP - 443)) | (1 << (MariaDBParser.HISTORY - 443)) | (1 << (MariaDBParser.HOST - 443)) | (1 << (MariaDBParser.HOSTS - 443)) | (1 << (MariaDBParser.IDENTIFIED - 443)) | (1 << (MariaDBParser.IGNORE_SERVER_IDS - 443)) | (1 << (MariaDBParser.IMPORT - 443)) | (1 << (MariaDBParser.INCREMENT - 443)) | (1 << (MariaDBParser.INDEXES - 443)) | (1 << (MariaDBParser.INITIAL_SIZE - 443)) | (1 << (MariaDBParser.INPLACE - 443)) | (1 << (MariaDBParser.INSERT_METHOD - 443)) | (1 << (MariaDBParser.INSTALL - 443)) | (1 << (MariaDBParser.INSTANCE - 443)) | (1 << (MariaDBParser.INSTANT - 443)) | (1 << (MariaDBParser.INVISIBLE - 443)) | (1 << (MariaDBParser.INVOKER - 443)) | (1 << (MariaDBParser.IO - 443)) | (1 << (MariaDBParser.IO_THREAD - 443)) | (1 << (MariaDBParser.IPC - 443)) | (1 << (MariaDBParser.ISOLATION - 443)) | (1 << (MariaDBParser.ISSUER - 443)) | (1 << (MariaDBParser.JSON - 443)) | (1 << (MariaDBParser.KEY_BLOCK_SIZE - 443)) | (1 << (MariaDBParser.LANGUAGE - 443)) | (1 << (MariaDBParser.LAST - 443)) | (1 << (MariaDBParser.LEAVES - 443)) | (1 << (MariaDBParser.LESS - 443)) | (1 << (MariaDBParser.LEVEL - 443)) | (1 << (MariaDBParser.LIST - 443)) | (1 << (MariaDBParser.LOCAL - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (MariaDBParser.LOCALES - 475)) | (1 << (MariaDBParser.LOGFILE - 475)) | (1 << (MariaDBParser.LOGS - 475)) | (1 << (MariaDBParser.MASTER - 475)) | (1 << (MariaDBParser.MASTER_AUTO_POSITION - 475)) | (1 << (MariaDBParser.MASTER_CONNECT_RETRY - 475)) | (1 << (MariaDBParser.MASTER_DELAY - 475)) | (1 << (MariaDBParser.MASTER_HEARTBEAT_PERIOD - 475)) | (1 << (MariaDBParser.MASTER_HOST - 475)) | (1 << (MariaDBParser.MASTER_LOG_FILE - 475)) | (1 << (MariaDBParser.MASTER_LOG_POS - 475)) | (1 << (MariaDBParser.MASTER_PASSWORD - 475)) | (1 << (MariaDBParser.MASTER_PORT - 475)) | (1 << (MariaDBParser.MASTER_RETRY_COUNT - 475)) | (1 << (MariaDBParser.MASTER_SSL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CA - 475)) | (1 << (MariaDBParser.MASTER_SSL_CAPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_CERT - 475)) | (1 << (MariaDBParser.MASTER_SSL_CIPHER - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRLPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_KEY - 475)) | (1 << (MariaDBParser.MASTER_TLS_VERSION - 475)) | (1 << (MariaDBParser.MASTER_USER - 475)) | (1 << (MariaDBParser.MAX_CONNECTIONS_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_QUERIES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_ROWS - 475)) | (1 << (MariaDBParser.MAX_SIZE - 475)) | (1 << (MariaDBParser.MAX_UPDATES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_USER_CONNECTIONS - 475)) | (1 << (MariaDBParser.MEDIUM - 475)) | (1 << (MariaDBParser.MEMBER - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (MariaDBParser.MERGE - 507)) | (1 << (MariaDBParser.MESSAGE_TEXT - 507)) | (1 << (MariaDBParser.MID - 507)) | (1 << (MariaDBParser.MIGRATE - 507)) | (1 << (MariaDBParser.MIN_ROWS - 507)) | (1 << (MariaDBParser.MODE - 507)) | (1 << (MariaDBParser.MODIFY - 507)) | (1 << (MariaDBParser.MUTEX - 507)) | (1 << (MariaDBParser.MYSQL - 507)) | (1 << (MariaDBParser.MYSQL_ERRNO - 507)) | (1 << (MariaDBParser.NAME - 507)) | (1 << (MariaDBParser.NAMES - 507)) | (1 << (MariaDBParser.NCHAR - 507)) | (1 << (MariaDBParser.NEVER - 507)) | (1 << (MariaDBParser.NEXT - 507)) | (1 << (MariaDBParser.NO - 507)) | (1 << (MariaDBParser.NOCACHE - 507)) | (1 << (MariaDBParser.NOCOPY - 507)) | (1 << (MariaDBParser.NOCYCLE - 507)) | (1 << (MariaDBParser.NOMAXVALUE - 507)) | (1 << (MariaDBParser.NOMINVALUE - 507)) | (1 << (MariaDBParser.NOWAIT - 507)) | (1 << (MariaDBParser.NODEGROUP - 507)) | (1 << (MariaDBParser.NONE - 507)) | (1 << (MariaDBParser.ODBC - 507)) | (1 << (MariaDBParser.OFFLINE - 507)) | (1 << (MariaDBParser.OFFSET - 507)) | (1 << (MariaDBParser.OF - 507)) | (1 << (MariaDBParser.OJ - 507)) | (1 << (MariaDBParser.OLD_PASSWORD - 507)) | (1 << (MariaDBParser.ONE - 507)) | (1 << (MariaDBParser.ONLINE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (MariaDBParser.ONLY - 539)) | (1 << (MariaDBParser.OPEN - 539)) | (1 << (MariaDBParser.OPTIMIZER_COSTS - 539)) | (1 << (MariaDBParser.OPTIONS - 539)) | (1 << (MariaDBParser.OWNER - 539)) | (1 << (MariaDBParser.PACK_KEYS - 539)) | (1 << (MariaDBParser.PAGE - 539)) | (1 << (MariaDBParser.PARSER - 539)) | (1 << (MariaDBParser.PARTIAL - 539)) | (1 << (MariaDBParser.PARTITIONING - 539)) | (1 << (MariaDBParser.PARTITIONS - 539)) | (1 << (MariaDBParser.PASSWORD - 539)) | (1 << (MariaDBParser.PASSWORD_LOCK_TIME - 539)) | (1 << (MariaDBParser.PHASE - 539)) | (1 << (MariaDBParser.PLUGIN - 539)) | (1 << (MariaDBParser.PLUGIN_DIR - 539)) | (1 << (MariaDBParser.PLUGINS - 539)) | (1 << (MariaDBParser.PORT - 539)) | (1 << (MariaDBParser.PRECEDES - 539)) | (1 << (MariaDBParser.PREPARE - 539)) | (1 << (MariaDBParser.PRESERVE - 539)) | (1 << (MariaDBParser.PREV - 539)) | (1 << (MariaDBParser.PROCESSLIST - 539)) | (1 << (MariaDBParser.PROFILE - 539)) | (1 << (MariaDBParser.PROFILES - 539)) | (1 << (MariaDBParser.PROXY - 539)) | (1 << (MariaDBParser.QUERY - 539)) | (1 << (MariaDBParser.QUERY_RESPONSE_TIME - 539)) | (1 << (MariaDBParser.QUICK - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (MariaDBParser.REBUILD - 571)) | (1 << (MariaDBParser.RECOVER - 571)) | (1 << (MariaDBParser.RECURSIVE - 571)) | (1 << (MariaDBParser.REDO_BUFFER_SIZE - 571)) | (1 << (MariaDBParser.REDUNDANT - 571)) | (1 << (MariaDBParser.RELAY - 571)) | (1 << (MariaDBParser.RELAY_LOG_FILE - 571)) | (1 << (MariaDBParser.RELAY_LOG_POS - 571)) | (1 << (MariaDBParser.RELAYLOG - 571)) | (1 << (MariaDBParser.REMOVE - 571)) | (1 << (MariaDBParser.REORGANIZE - 571)) | (1 << (MariaDBParser.REPAIR - 571)) | (1 << (MariaDBParser.REPLICATE_DO_DB - 571)) | (1 << (MariaDBParser.REPLICATE_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_REWRITE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATION - 571)) | (1 << (MariaDBParser.RESET - 571)) | (1 << (MariaDBParser.RESTART - 571)) | (1 << (MariaDBParser.RESUME - 571)) | (1 << (MariaDBParser.RETURNED_SQLSTATE - 571)) | (1 << (MariaDBParser.RETURNS - 571)) | (1 << (MariaDBParser.REUSE - 571)) | (1 << (MariaDBParser.ROLE - 571)) | (1 << (MariaDBParser.ROLLBACK - 571)) | (1 << (MariaDBParser.ROLLUP - 571)) | (1 << (MariaDBParser.ROTATE - 571)) | (1 << (MariaDBParser.ROW - 571)))) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & ((1 << (MariaDBParser.ROWS - 603)) | (1 << (MariaDBParser.ROW_FORMAT - 603)) | (1 << (MariaDBParser.RTREE - 603)) | (1 << (MariaDBParser.SAVEPOINT - 603)) | (1 << (MariaDBParser.SCHEDULE - 603)) | (1 << (MariaDBParser.SECURITY - 603)) | (1 << (MariaDBParser.SEQUENCE - 603)) | (1 << (MariaDBParser.SERVER - 603)) | (1 << (MariaDBParser.SESSION - 603)) | (1 << (MariaDBParser.SHARE - 603)) | (1 << (MariaDBParser.SHARED - 603)) | (1 << (MariaDBParser.SIGNED - 603)) | (1 << (MariaDBParser.SIMPLE - 603)) | (1 << (MariaDBParser.SLAVE - 603)) | (1 << (MariaDBParser.SLAVES - 603)) | (1 << (MariaDBParser.SLOW - 603)) | (1 << (MariaDBParser.SNAPSHOT - 603)) | (1 << (MariaDBParser.SOCKET - 603)) | (1 << (MariaDBParser.SOME - 603)) | (1 << (MariaDBParser.SONAME - 603)) | (1 << (MariaDBParser.SOUNDS - 603)) | (1 << (MariaDBParser.SOURCE - 603)) | (1 << (MariaDBParser.SQL_AFTER_GTIDS - 603)) | (1 << (MariaDBParser.SQL_AFTER_MTS_GAPS - 603)) | (1 << (MariaDBParser.SQL_BEFORE_GTIDS - 603)) | (1 << (MariaDBParser.SQL_BUFFER_RESULT - 603)) | (1 << (MariaDBParser.SQL_CACHE - 603)) | (1 << (MariaDBParser.SQL_NO_CACHE - 603)) | (1 << (MariaDBParser.SQL_THREAD - 603)) | (1 << (MariaDBParser.START - 603)) | (1 << (MariaDBParser.STARTS - 603)) | (1 << (MariaDBParser.STATS_AUTO_RECALC - 603)))) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & ((1 << (MariaDBParser.STATS_PERSISTENT - 635)) | (1 << (MariaDBParser.STATS_SAMPLE_PAGES - 635)) | (1 << (MariaDBParser.STATUS - 635)) | (1 << (MariaDBParser.STOP - 635)) | (1 << (MariaDBParser.STORAGE - 635)) | (1 << (MariaDBParser.STRING - 635)) | (1 << (MariaDBParser.SUBCLASS_ORIGIN - 635)) | (1 << (MariaDBParser.SUBJECT - 635)) | (1 << (MariaDBParser.SUBPARTITION - 635)) | (1 << (MariaDBParser.SUBPARTITIONS - 635)) | (1 << (MariaDBParser.SUSPEND - 635)) | (1 << (MariaDBParser.SWAPS - 635)) | (1 << (MariaDBParser.SWITCHES - 635)) | (1 << (MariaDBParser.TABLE_NAME - 635)) | (1 << (MariaDBParser.TABLESPACE - 635)) | (1 << (MariaDBParser.TABLE_TYPE - 635)) | (1 << (MariaDBParser.TEMPORARY - 635)) | (1 << (MariaDBParser.TEMPTABLE - 635)) | (1 << (MariaDBParser.THAN - 635)) | (1 << (MariaDBParser.TRADITIONAL - 635)) | (1 << (MariaDBParser.TRANSACTION - 635)) | (1 << (MariaDBParser.TRANSACTIONAL - 635)) | (1 << (MariaDBParser.TRIGGERS - 635)) | (1 << (MariaDBParser.TRUNCATE - 635)) | (1 << (MariaDBParser.TYPES - 635)) | (1 << (MariaDBParser.UNBOUNDED - 635)) | (1 << (MariaDBParser.UNDEFINED - 635)) | (1 << (MariaDBParser.UNDOFILE - 635)) | (1 << (MariaDBParser.UNDO_BUFFER_SIZE - 635)) | (1 << (MariaDBParser.UNINSTALL - 635)) | (1 << (MariaDBParser.UNKNOWN - 635)))) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & ((1 << (MariaDBParser.UNTIL - 667)) | (1 << (MariaDBParser.UPGRADE - 667)) | (1 << (MariaDBParser.USER - 667)) | (1 << (MariaDBParser.USE_FRM - 667)) | (1 << (MariaDBParser.USER_RESOURCES - 667)) | (1 << (MariaDBParser.VALIDATION - 667)) | (1 << (MariaDBParser.VALUE - 667)) | (1 << (MariaDBParser.VARIABLES - 667)) | (1 << (MariaDBParser.VIEW - 667)) | (1 << (MariaDBParser.VIRTUAL - 667)) | (1 << (MariaDBParser.VISIBLE - 667)) | (1 << (MariaDBParser.WAIT - 667)) | (1 << (MariaDBParser.WARNINGS - 667)) | (1 << (MariaDBParser.WITHOUT - 667)) | (1 << (MariaDBParser.WORK - 667)) | (1 << (MariaDBParser.WRAPPER - 667)) | (1 << (MariaDBParser.WSREP_MEMBERSHIP - 667)) | (1 << (MariaDBParser.WSREP_STATUS - 667)) | (1 << (MariaDBParser.X509 - 667)) | (1 << (MariaDBParser.XA - 667)) | (1 << (MariaDBParser.XML - 667)) | (1 << (MariaDBParser.EUR - 667)) | (1 << (MariaDBParser.USA - 667)) | (1 << (MariaDBParser.JIS - 667)) | (1 << (MariaDBParser.ISO - 667)) | (1 << (MariaDBParser.INTERNAL - 667)) | (1 << (MariaDBParser.QUARTER - 667)) | (1 << (MariaDBParser.MONTH - 667)) | (1 << (MariaDBParser.DAY - 667)) | (1 << (MariaDBParser.HOUR - 667)))) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & ((1 << (MariaDBParser.MINUTE - 699)) | (1 << (MariaDBParser.WEEK - 699)) | (1 << (MariaDBParser.SECOND - 699)) | (1 << (MariaDBParser.MICROSECOND - 699)) | (1 << (MariaDBParser.USER_STATISTICS - 699)) | (1 << (MariaDBParser.CLIENT_STATISTICS - 699)) | (1 << (MariaDBParser.INDEX_STATISTICS - 699)) | (1 << (MariaDBParser.TABLE_STATISTICS - 699)) | (1 << (MariaDBParser.ADMIN - 699)) | (1 << (MariaDBParser.AUDIT_ADMIN - 699)) | (1 << (MariaDBParser.BACKUP_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ENCRYPTION_ADMIN - 699)) | (1 << (MariaDBParser.CLONE_ADMIN - 699)) | (1 << (MariaDBParser.CONNECTION_ADMIN - 699)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ADMIN - 699)) | (1 << (MariaDBParser.EXECUTE - 699)) | (1 << (MariaDBParser.FILE - 699)) | (1 << (MariaDBParser.FIREWALL_ADMIN - 699)) | (1 << (MariaDBParser.FIREWALL_USER - 699)) | (1 << (MariaDBParser.GROUP_REPLICATION_ADMIN - 699)) | (1 << (MariaDBParser.INNODB_REDO_LOG_ARCHIVE - 699)) | (1 << (MariaDBParser.INVOKE - 699)) | (1 << (MariaDBParser.LAMBDA - 699)) | (1 << (MariaDBParser.NDB_STORED_USER - 699)) | (1 << (MariaDBParser.PASSWORDLESS_USER_ADMIN - 699)))) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & ((1 << (MariaDBParser.PERSIST_RO_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.PRIVILEGES - 731)) | (1 << (MariaDBParser.PROCESS - 731)) | (1 << (MariaDBParser.RELOAD - 731)) | (1 << (MariaDBParser.REPLICATION_APPLIER - 731)) | (1 << (MariaDBParser.REPLICATION_SLAVE_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_USER - 731)) | (1 << (MariaDBParser.ROLE_ADMIN - 731)) | (1 << (MariaDBParser.ROUTINE - 731)) | (1 << (MariaDBParser.S3 - 731)) | (1 << (MariaDBParser.SESSION_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.SET_USER_ID - 731)) | (1 << (MariaDBParser.SHOW_ROUTINE - 731)) | (1 << (MariaDBParser.SHUTDOWN - 731)) | (1 << (MariaDBParser.SUPER - 731)) | (1 << (MariaDBParser.SYSTEM_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.TABLES - 731)) | (1 << (MariaDBParser.TABLE_ENCRYPTION_ADMIN - 731)) | (1 << (MariaDBParser.VERSION_TOKEN_ADMIN - 731)) | (1 << (MariaDBParser.XA_RECOVER_ADMIN - 731)) | (1 << (MariaDBParser.ARMSCII8 - 731)) | (1 << (MariaDBParser.ASCII - 731)) | (1 << (MariaDBParser.BIG5 - 731)) | (1 << (MariaDBParser.CP1250 - 731)) | (1 << (MariaDBParser.CP1251 - 731)) | (1 << (MariaDBParser.CP1256 - 731)) | (1 << (MariaDBParser.CP1257 - 731)) | (1 << (MariaDBParser.CP850 - 731)) | (1 << (MariaDBParser.CP852 - 731)) | (1 << (MariaDBParser.CP866 - 731)))) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & ((1 << (MariaDBParser.CP932 - 763)) | (1 << (MariaDBParser.DEC8 - 763)) | (1 << (MariaDBParser.EUCJPMS - 763)) | (1 << (MariaDBParser.EUCKR - 763)) | (1 << (MariaDBParser.GB18030 - 763)) | (1 << (MariaDBParser.GB2312 - 763)) | (1 << (MariaDBParser.GBK - 763)) | (1 << (MariaDBParser.GEOSTD8 - 763)) | (1 << (MariaDBParser.GREEK - 763)) | (1 << (MariaDBParser.HEBREW - 763)) | (1 << (MariaDBParser.HP8 - 763)) | (1 << (MariaDBParser.KEYBCS2 - 763)) | (1 << (MariaDBParser.KOI8R - 763)) | (1 << (MariaDBParser.KOI8U - 763)) | (1 << (MariaDBParser.LATIN1 - 763)) | (1 << (MariaDBParser.LATIN2 - 763)) | (1 << (MariaDBParser.LATIN5 - 763)) | (1 << (MariaDBParser.LATIN7 - 763)) | (1 << (MariaDBParser.MACCE - 763)) | (1 << (MariaDBParser.MACROMAN - 763)) | (1 << (MariaDBParser.SJIS - 763)) | (1 << (MariaDBParser.SWE7 - 763)) | (1 << (MariaDBParser.TIS620 - 763)) | (1 << (MariaDBParser.UCS2 - 763)) | (1 << (MariaDBParser.UJIS - 763)) | (1 << (MariaDBParser.UTF16 - 763)) | (1 << (MariaDBParser.UTF16LE - 763)) | (1 << (MariaDBParser.UTF32 - 763)) | (1 << (MariaDBParser.UTF8 - 763)) | (1 << (MariaDBParser.UTF8MB3 - 763)) | (1 << (MariaDBParser.UTF8MB4 - 763)) | (1 << (MariaDBParser.ARCHIVE - 763)))) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & ((1 << (MariaDBParser.BLACKHOLE - 795)) | (1 << (MariaDBParser.CSV - 795)) | (1 << (MariaDBParser.FEDERATED - 795)) | (1 << (MariaDBParser.INNODB - 795)) | (1 << (MariaDBParser.MEMORY - 795)) | (1 << (MariaDBParser.MRG_MYISAM - 795)) | (1 << (MariaDBParser.MYISAM - 795)) | (1 << (MariaDBParser.NDB - 795)) | (1 << (MariaDBParser.NDBCLUSTER - 795)) | (1 << (MariaDBParser.PERFORMANCE_SCHEMA - 795)) | (1 << (MariaDBParser.TOKUDB - 795)) | (1 << (MariaDBParser.REPEATABLE - 795)) | (1 << (MariaDBParser.COMMITTED - 795)) | (1 << (MariaDBParser.UNCOMMITTED - 795)) | (1 << (MariaDBParser.SERIALIZABLE - 795)) | (1 << (MariaDBParser.GEOMETRYCOLLECTION - 795)) | (1 << (MariaDBParser.LINESTRING - 795)) | (1 << (MariaDBParser.MULTILINESTRING - 795)) | (1 << (MariaDBParser.MULTIPOINT - 795)) | (1 << (MariaDBParser.MULTIPOLYGON - 795)) | (1 << (MariaDBParser.POINT - 795)) | (1 << (MariaDBParser.POLYGON - 795)) | (1 << (MariaDBParser.ABS - 795)) | (1 << (MariaDBParser.ACOS - 795)) | (1 << (MariaDBParser.ADDDATE - 795)) | (1 << (MariaDBParser.ADDTIME - 795)) | (1 << (MariaDBParser.AES_DECRYPT - 795)) | (1 << (MariaDBParser.AES_ENCRYPT - 795)) | (1 << (MariaDBParser.AREA - 795)) | (1 << (MariaDBParser.ASBINARY - 795)))) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & ((1 << (MariaDBParser.ASIN - 827)) | (1 << (MariaDBParser.ASTEXT - 827)) | (1 << (MariaDBParser.ASWKB - 827)) | (1 << (MariaDBParser.ASWKT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DECRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DERIVE - 827)) | (1 << (MariaDBParser.ASYMMETRIC_ENCRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_SIGN - 827)) | (1 << (MariaDBParser.ASYMMETRIC_VERIFY - 827)) | (1 << (MariaDBParser.ATAN - 827)) | (1 << (MariaDBParser.ATAN2 - 827)) | (1 << (MariaDBParser.BENCHMARK - 827)) | (1 << (MariaDBParser.BIN - 827)) | (1 << (MariaDBParser.BIT_COUNT - 827)) | (1 << (MariaDBParser.BIT_LENGTH - 827)) | (1 << (MariaDBParser.BUFFER - 827)) | (1 << (MariaDBParser.CATALOG_NAME - 827)) | (1 << (MariaDBParser.CEIL - 827)) | (1 << (MariaDBParser.CEILING - 827)) | (1 << (MariaDBParser.CENTROID - 827)) | (1 << (MariaDBParser.CHARACTER_LENGTH - 827)) | (1 << (MariaDBParser.CHARSET - 827)) | (1 << (MariaDBParser.CHAR_LENGTH - 827)) | (1 << (MariaDBParser.COERCIBILITY - 827)) | (1 << (MariaDBParser.COLLATION - 827)) | (1 << (MariaDBParser.COMPRESS - 827)) | (1 << (MariaDBParser.CONCAT - 827)) | (1 << (MariaDBParser.CONCAT_WS - 827)) | (1 << (MariaDBParser.CONNECTION_ID - 827)) | (1 << (MariaDBParser.CONV - 827)) | (1 << (MariaDBParser.CONVERT_TZ - 827)) | (1 << (MariaDBParser.COS - 827)))) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & ((1 << (MariaDBParser.COT - 859)) | (1 << (MariaDBParser.CRC32 - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY - 859)) | (1 << (MariaDBParser.CREATE_DH_PARAMETERS - 859)) | (1 << (MariaDBParser.CREATE_DIGEST - 859)) | (1 << (MariaDBParser.CROSSES - 859)) | (1 << (MariaDBParser.DATEDIFF - 859)) | (1 << (MariaDBParser.DATE_FORMAT - 859)) | (1 << (MariaDBParser.DAYNAME - 859)) | (1 << (MariaDBParser.DAYOFMONTH - 859)) | (1 << (MariaDBParser.DAYOFWEEK - 859)) | (1 << (MariaDBParser.DAYOFYEAR - 859)) | (1 << (MariaDBParser.DECODE - 859)) | (1 << (MariaDBParser.DEGREES - 859)) | (1 << (MariaDBParser.DES_DECRYPT - 859)) | (1 << (MariaDBParser.DES_ENCRYPT - 859)) | (1 << (MariaDBParser.DIMENSION - 859)) | (1 << (MariaDBParser.DISJOINT - 859)) | (1 << (MariaDBParser.ELT - 859)) | (1 << (MariaDBParser.ENCODE - 859)) | (1 << (MariaDBParser.ENCRYPT - 859)) | (1 << (MariaDBParser.ENDPOINT - 859)) | (1 << (MariaDBParser.ENGINE_ATTRIBUTE - 859)) | (1 << (MariaDBParser.ENVELOPE - 859)) | (1 << (MariaDBParser.EQUALS - 859)) | (1 << (MariaDBParser.EXP - 859)) | (1 << (MariaDBParser.EXPORT_SET - 859)) | (1 << (MariaDBParser.EXTERIORRING - 859)) | (1 << (MariaDBParser.EXTRACTVALUE - 859)) | (1 << (MariaDBParser.FIELD - 859)) | (1 << (MariaDBParser.FIND_IN_SET - 859)))) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & ((1 << (MariaDBParser.FLOOR - 891)) | (1 << (MariaDBParser.FORMAT - 891)) | (1 << (MariaDBParser.FOUND_ROWS - 891)) | (1 << (MariaDBParser.FROM_BASE64 - 891)) | (1 << (MariaDBParser.FROM_DAYS - 891)) | (1 << (MariaDBParser.FROM_UNIXTIME - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYN - 891)) | (1 << (MariaDBParser.GEOMETRYTYPE - 891)) | (1 << (MariaDBParser.GEOMFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMFROMWKB - 891)) | (1 << (MariaDBParser.GET_FORMAT - 891)) | (1 << (MariaDBParser.GET_LOCK - 891)) | (1 << (MariaDBParser.GLENGTH - 891)) | (1 << (MariaDBParser.GREATEST - 891)) | (1 << (MariaDBParser.GTID_SUBSET - 891)) | (1 << (MariaDBParser.GTID_SUBTRACT - 891)) | (1 << (MariaDBParser.HEX - 891)) | (1 << (MariaDBParser.IFNULL - 891)) | (1 << (MariaDBParser.INET6_ATON - 891)) | (1 << (MariaDBParser.INET6_NTOA - 891)) | (1 << (MariaDBParser.INET_ATON - 891)) | (1 << (MariaDBParser.INET_NTOA - 891)) | (1 << (MariaDBParser.INSTR - 891)) | (1 << (MariaDBParser.INTERIORRINGN - 891)) | (1 << (MariaDBParser.INTERSECTS - 891)) | (1 << (MariaDBParser.ISCLOSED - 891)))) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & ((1 << (MariaDBParser.ISEMPTY - 923)) | (1 << (MariaDBParser.ISNULL - 923)) | (1 << (MariaDBParser.ISSIMPLE - 923)) | (1 << (MariaDBParser.IS_FREE_LOCK - 923)) | (1 << (MariaDBParser.IS_IPV4 - 923)) | (1 << (MariaDBParser.IS_IPV4_COMPAT - 923)) | (1 << (MariaDBParser.IS_IPV4_MAPPED - 923)) | (1 << (MariaDBParser.IS_IPV6 - 923)) | (1 << (MariaDBParser.IS_USED_LOCK - 923)) | (1 << (MariaDBParser.LAST_INSERT_ID - 923)) | (1 << (MariaDBParser.LCASE - 923)) | (1 << (MariaDBParser.LEAST - 923)) | (1 << (MariaDBParser.LENGTH - 923)) | (1 << (MariaDBParser.LINEFROMTEXT - 923)) | (1 << (MariaDBParser.LINEFROMWKB - 923)) | (1 << (MariaDBParser.LINESTRINGFROMTEXT - 923)) | (1 << (MariaDBParser.LINESTRINGFROMWKB - 923)) | (1 << (MariaDBParser.LN - 923)) | (1 << (MariaDBParser.LOAD_FILE - 923)) | (1 << (MariaDBParser.LOCATE - 923)) | (1 << (MariaDBParser.LOG - 923)) | (1 << (MariaDBParser.LOG10 - 923)) | (1 << (MariaDBParser.LOG2 - 923)) | (1 << (MariaDBParser.LOWER - 923)) | (1 << (MariaDBParser.LPAD - 923)) | (1 << (MariaDBParser.LTRIM - 923)) | (1 << (MariaDBParser.MAKEDATE - 923)) | (1 << (MariaDBParser.MAKETIME - 923)) | (1 << (MariaDBParser.MAKE_SET - 923)) | (1 << (MariaDBParser.MASTER_POS_WAIT - 923)) | (1 << (MariaDBParser.MBRCONTAINS - 923)) | (1 << (MariaDBParser.MBRDISJOINT - 923)))) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & ((1 << (MariaDBParser.MBREQUAL - 955)) | (1 << (MariaDBParser.MBRINTERSECTS - 955)) | (1 << (MariaDBParser.MBROVERLAPS - 955)) | (1 << (MariaDBParser.MBRTOUCHES - 955)) | (1 << (MariaDBParser.MBRWITHIN - 955)) | (1 << (MariaDBParser.MD5 - 955)) | (1 << (MariaDBParser.MLINEFROMTEXT - 955)) | (1 << (MariaDBParser.MLINEFROMWKB - 955)) | (1 << (MariaDBParser.MONTHNAME - 955)) | (1 << (MariaDBParser.MPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MPOLYFROMTEXT - 955)) | (1 << (MariaDBParser.MPOLYFROMWKB - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMTEXT - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMWKB - 955)) | (1 << (MariaDBParser.NAME_CONST - 955)) | (1 << (MariaDBParser.NULLIF - 955)) | (1 << (MariaDBParser.NUMGEOMETRIES - 955)) | (1 << (MariaDBParser.NUMINTERIORRINGS - 955)) | (1 << (MariaDBParser.NUMPOINTS - 955)) | (1 << (MariaDBParser.OCT - 955)) | (1 << (MariaDBParser.OCTET_LENGTH - 955)) | (1 << (MariaDBParser.ORD - 955)) | (1 << (MariaDBParser.OVERLAPS - 955)) | (1 << (MariaDBParser.PERIOD_ADD - 955)) | (1 << (MariaDBParser.PERIOD_DIFF - 955)) | (1 << (MariaDBParser.PI - 955)) | (1 << (MariaDBParser.POINTFROMTEXT - 955)))) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & ((1 << (MariaDBParser.POINTFROMWKB - 987)) | (1 << (MariaDBParser.POINTN - 987)) | (1 << (MariaDBParser.POLYFROMTEXT - 987)) | (1 << (MariaDBParser.POLYFROMWKB - 987)) | (1 << (MariaDBParser.POLYGONFROMTEXT - 987)) | (1 << (MariaDBParser.POLYGONFROMWKB - 987)) | (1 << (MariaDBParser.POW - 987)) | (1 << (MariaDBParser.POWER - 987)) | (1 << (MariaDBParser.QUOTE - 987)) | (1 << (MariaDBParser.RADIANS - 987)) | (1 << (MariaDBParser.RAND - 987)) | (1 << (MariaDBParser.RANDOM_BYTES - 987)) | (1 << (MariaDBParser.RELEASE_LOCK - 987)) | (1 << (MariaDBParser.REVERSE - 987)) | (1 << (MariaDBParser.ROUND - 987)) | (1 << (MariaDBParser.ROW_COUNT - 987)) | (1 << (MariaDBParser.RPAD - 987)) | (1 << (MariaDBParser.RTRIM - 987)) | (1 << (MariaDBParser.SEC_TO_TIME - 987)) | (1 << (MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE - 987)) | (1 << (MariaDBParser.SESSION_USER - 987)) | (1 << (MariaDBParser.SHA - 987)) | (1 << (MariaDBParser.SHA1 - 987)) | (1 << (MariaDBParser.SHA2 - 987)) | (1 << (MariaDBParser.SCHEMA_NAME - 987)) | (1 << (MariaDBParser.SIGN - 987)) | (1 << (MariaDBParser.SIN - 987)) | (1 << (MariaDBParser.SLEEP - 987)) | (1 << (MariaDBParser.SOUNDEX - 987)) | (1 << (MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS - 987)) | (1 << (MariaDBParser.SQRT - 987)) | (1 << (MariaDBParser.SRID - 987)))) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & ((1 << (MariaDBParser.STARTPOINT - 1019)) | (1 << (MariaDBParser.STRCMP - 1019)) | (1 << (MariaDBParser.STR_TO_DATE - 1019)) | (1 << (MariaDBParser.ST_AREA - 1019)) | (1 << (MariaDBParser.ST_ASBINARY - 1019)) | (1 << (MariaDBParser.ST_ASTEXT - 1019)) | (1 << (MariaDBParser.ST_ASWKB - 1019)) | (1 << (MariaDBParser.ST_ASWKT - 1019)) | (1 << (MariaDBParser.ST_BUFFER - 1019)) | (1 << (MariaDBParser.ST_CENTROID - 1019)) | (1 << (MariaDBParser.ST_CONTAINS - 1019)) | (1 << (MariaDBParser.ST_CROSSES - 1019)) | (1 << (MariaDBParser.ST_DIFFERENCE - 1019)) | (1 << (MariaDBParser.ST_DIMENSION - 1019)) | (1 << (MariaDBParser.ST_DISJOINT - 1019)) | (1 << (MariaDBParser.ST_DISTANCE - 1019)) | (1 << (MariaDBParser.ST_ENDPOINT - 1019)) | (1 << (MariaDBParser.ST_ENVELOPE - 1019)) | (1 << (MariaDBParser.ST_EQUALS - 1019)) | (1 << (MariaDBParser.ST_EXTERIORRING - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYN - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYTYPE - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMWKB - 1019)) | (1 << (MariaDBParser.ST_INTERIORRINGN - 1019)))) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & ((1 << (MariaDBParser.ST_INTERSECTION - 1051)) | (1 << (MariaDBParser.ST_INTERSECTS - 1051)) | (1 << (MariaDBParser.ST_ISCLOSED - 1051)) | (1 << (MariaDBParser.ST_ISEMPTY - 1051)) | (1 << (MariaDBParser.ST_ISSIMPLE - 1051)) | (1 << (MariaDBParser.ST_LINEFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINEFROMWKB - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMWKB - 1051)) | (1 << (MariaDBParser.ST_NUMGEOMETRIES - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRING - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRINGS - 1051)) | (1 << (MariaDBParser.ST_NUMPOINTS - 1051)) | (1 << (MariaDBParser.ST_OVERLAPS - 1051)) | (1 << (MariaDBParser.ST_POINTFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POINTFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POINTN - 1051)) | (1 << (MariaDBParser.ST_POLYFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMWKB - 1051)) | (1 << (MariaDBParser.ST_SRID - 1051)) | (1 << (MariaDBParser.ST_STARTPOINT - 1051)) | (1 << (MariaDBParser.ST_SYMDIFFERENCE - 1051)) | (1 << (MariaDBParser.ST_TOUCHES - 1051)) | (1 << (MariaDBParser.ST_UNION - 1051)) | (1 << (MariaDBParser.ST_WITHIN - 1051)) | (1 << (MariaDBParser.ST_X - 1051)) | (1 << (MariaDBParser.ST_Y - 1051)) | (1 << (MariaDBParser.SUBDATE - 1051)) | (1 << (MariaDBParser.SUBSTRING_INDEX - 1051)) | (1 << (MariaDBParser.SUBTIME - 1051)))) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & ((1 << (MariaDBParser.SYSTEM_USER - 1083)) | (1 << (MariaDBParser.TAN - 1083)) | (1 << (MariaDBParser.TIMEDIFF - 1083)) | (1 << (MariaDBParser.TIMESTAMPADD - 1083)) | (1 << (MariaDBParser.TIMESTAMPDIFF - 1083)) | (1 << (MariaDBParser.TIME_FORMAT - 1083)) | (1 << (MariaDBParser.TIME_TO_SEC - 1083)) | (1 << (MariaDBParser.TOUCHES - 1083)) | (1 << (MariaDBParser.TO_BASE64 - 1083)) | (1 << (MariaDBParser.TO_DAYS - 1083)) | (1 << (MariaDBParser.TO_SECONDS - 1083)) | (1 << (MariaDBParser.UCASE - 1083)) | (1 << (MariaDBParser.UNCOMPRESS - 1083)) | (1 << (MariaDBParser.UNCOMPRESSED_LENGTH - 1083)) | (1 << (MariaDBParser.UNHEX - 1083)) | (1 << (MariaDBParser.UNIX_TIMESTAMP - 1083)) | (1 << (MariaDBParser.UPDATEXML - 1083)) | (1 << (MariaDBParser.UPPER - 1083)) | (1 << (MariaDBParser.UUID - 1083)) | (1 << (MariaDBParser.UUID_SHORT - 1083)) | (1 << (MariaDBParser.VALIDATE_PASSWORD_STRENGTH - 1083)) | (1 << (MariaDBParser.VERSION - 1083)) | (1 << (MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1083)) | (1 << (MariaDBParser.WEEKDAY - 1083)) | (1 << (MariaDBParser.WEEKOFYEAR - 1083)) | (1 << (MariaDBParser.WEIGHT_STRING - 1083)) | (1 << (MariaDBParser.WITHIN - 1083)) | (1 << (MariaDBParser.YEARWEEK - 1083)) | (1 << (MariaDBParser.Y_FUNCTION - 1083)) | (1 << (MariaDBParser.X_FUNCTION - 1083)) | (1 << (MariaDBParser.VIA - 1083)) | (1 << (MariaDBParser.LASTVAL - 1083)))) !== 0) || ((((_la - 1115)) & ~0x1F) === 0 && ((1 << (_la - 1115)) & ((1 << (MariaDBParser.NEXTVAL - 1115)) | (1 << (MariaDBParser.SETVAL - 1115)) | (1 << (MariaDBParser.PREVIOUS - 1115)) | (1 << (MariaDBParser.PERSISTENT - 1115)) | (1 << (MariaDBParser.BINLOG_MONITOR - 1115)) | (1 << (MariaDBParser.BINLOG_REPLAY - 1115)) | (1 << (MariaDBParser.FEDERATED_ADMIN - 1115)) | (1 << (MariaDBParser.READ_ONLY_ADMIN - 1115)) | (1 << (MariaDBParser.REPLICA - 1115)) | (1 << (MariaDBParser.REPLICAS - 1115)) | (1 << (MariaDBParser.REPLICATION_MASTER_ADMIN - 1115)) | (1 << (MariaDBParser.MONITOR - 1115)) | (1 << (MariaDBParser.READ_ONLY - 1115)) | (1 << (MariaDBParser.REPLAY - 1115)) | (1 << (MariaDBParser.MOD - 1115)))) !== 0) || ((((_la - 1166)) & ~0x1F) === 0 && ((1 << (_la - 1166)) & ((1 << (MariaDBParser.CHARSET_REVERSE_QOUTE_STRING - 1166)) | (1 << (MariaDBParser.STRING_LITERAL - 1166)) | (1 << (MariaDBParser.ID - 1166)))) !== 0)) {
					{
					this.state = 2786;
					(_localctx as AlterByAddForeignKeyContext)._indexName = this.uid();
					}
				}

				this.state = 2789;
				this.indexColumnNames();
				this.state = 2790;
				this.referenceDefinition();
				}
				break;

			case 9:
				_localctx = new AlterByAddCheckTableConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 2792;
				this.match(MariaDBParser.ADD);
				this.state = 2797;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.CONSTRAINT) {
					{
					this.state = 2793;
					this.match(MariaDBParser.CONSTRAINT);
					this.state = 2795;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MariaDBParser.ATTRIBUTE) | (1 << MariaDBParser.BODY) | (1 << MariaDBParser.BUCKETS) | (1 << MariaDBParser.CONDITION))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (MariaDBParser.CURRENT - 36)) | (1 << (MariaDBParser.CURRENT_ROLE - 36)) | (1 << (MariaDBParser.CURRENT_USER - 36)) | (1 << (MariaDBParser.DATABASE - 36)) | (1 << (MariaDBParser.DEFAULT - 36)) | (1 << (MariaDBParser.DIAGNOSTICS - 36)) | (1 << (MariaDBParser.EMPTY - 36)) | (1 << (MariaDBParser.EXCEPT - 36)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (MariaDBParser.GROUP - 73)) | (1 << (MariaDBParser.IF - 73)) | (1 << (MariaDBParser.IGNORED - 73)) | (1 << (MariaDBParser.INSERT - 73)) | (1 << (MariaDBParser.LATERAL - 73)) | (1 << (MariaDBParser.LEFT - 73)) | (1 << (MariaDBParser.LOCKED - 73)))) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & ((1 << (MariaDBParser.MAXVALUE - 110)) | (1 << (MariaDBParser.MINVALUE - 110)) | (1 << (MariaDBParser.NUMBER - 110)) | (1 << (MariaDBParser.OPTIONAL - 110)) | (1 << (MariaDBParser.ORDER - 110)) | (1 << (MariaDBParser.PRIMARY - 110)) | (1 << (MariaDBParser.PACKAGE - 110)))) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (MariaDBParser.REPLACE - 142)) | (1 << (MariaDBParser.RIGHT - 142)) | (1 << (MariaDBParser.SCHEMA - 142)) | (1 << (MariaDBParser.SKIP_ - 142)) | (1 << (MariaDBParser.STACKED - 142)) | (1 << (MariaDBParser.STATEMENT - 142)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MariaDBParser.DATE - 217)) | (1 << (MariaDBParser.TIME - 217)) | (1 << (MariaDBParser.TIMESTAMP - 217)) | (1 << (MariaDBParser.DATETIME - 217)) | (1 << (MariaDBParser.YEAR - 217)) | (1 << (MariaDBParser.BINARY - 217)) | (1 << (MariaDBParser.TEXT - 217)) | (1 << (MariaDBParser.ENUM - 217)) | (1 << (MariaDBParser.SERIAL - 217)))) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & ((1 << (MariaDBParser.JSON_ARRAY - 251)) | (1 << (MariaDBParser.JSON_ARRAYAGG - 251)) | (1 << (MariaDBParser.JSON_ARRAY_APPEND - 251)) | (1 << (MariaDBParser.JSON_ARRAY_INSERT - 251)) | (1 << (MariaDBParser.JSON_CONTAINS - 251)) | (1 << (MariaDBParser.JSON_CONTAINS_PATH - 251)) | (1 << (MariaDBParser.JSON_DEPTH - 251)) | (1 << (MariaDBParser.JSON_EXTRACT - 251)) | (1 << (MariaDBParser.JSON_INSERT - 251)) | (1 << (MariaDBParser.JSON_KEYS - 251)) | (1 << (MariaDBParser.JSON_LENGTH - 251)) | (1 << (MariaDBParser.JSON_MERGE - 251)) | (1 << (MariaDBParser.JSON_MERGE_PATCH - 251)) | (1 << (MariaDBParser.JSON_MERGE_PRESERVE - 251)) | (1 << (MariaDBParser.JSON_OBJECT - 251)) | (1 << (MariaDBParser.JSON_OBJECTAGG - 251)) | (1 << (MariaDBParser.JSON_OVERLAPS - 251)) | (1 << (MariaDBParser.JSON_PRETTY - 251)) | (1 << (MariaDBParser.JSON_QUOTE - 251)) | (1 << (MariaDBParser.JSON_REMOVE - 251)) | (1 << (MariaDBParser.JSON_REPLACE - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALID - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT - 251)) | (1 << (MariaDBParser.JSON_SEARCH - 251)) | (1 << (MariaDBParser.JSON_SET - 251)) | (1 << (MariaDBParser.JSON_STORAGE_FREE - 251)) | (1 << (MariaDBParser.JSON_STORAGE_SIZE - 251)) | (1 << (MariaDBParser.JSON_TABLE - 251)) | (1 << (MariaDBParser.JSON_TYPE - 251)) | (1 << (MariaDBParser.JSON_UNQUOTE - 251)) | (1 << (MariaDBParser.JSON_VALID - 251)) | (1 << (MariaDBParser.JSON_VALUE - 251)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (MariaDBParser.NESTED - 283)) | (1 << (MariaDBParser.ORDINALITY - 283)) | (1 << (MariaDBParser.PATH - 283)) | (1 << (MariaDBParser.AVG - 283)) | (1 << (MariaDBParser.BIT_AND - 283)) | (1 << (MariaDBParser.BIT_OR - 283)) | (1 << (MariaDBParser.BIT_XOR - 283)) | (1 << (MariaDBParser.COUNT - 283)) | (1 << (MariaDBParser.CUME_DIST - 283)) | (1 << (MariaDBParser.DENSE_RANK - 283)) | (1 << (MariaDBParser.FIRST_VALUE - 283)) | (1 << (MariaDBParser.GROUP_CONCAT - 283)) | (1 << (MariaDBParser.LAG - 283)) | (1 << (MariaDBParser.LAST_VALUE - 283)) | (1 << (MariaDBParser.LEAD - 283)) | (1 << (MariaDBParser.MAX - 283)) | (1 << (MariaDBParser.MIN - 283)) | (1 << (MariaDBParser.NTILE - 283)) | (1 << (MariaDBParser.NTH_VALUE - 283)) | (1 << (MariaDBParser.PERCENT_RANK - 283)) | (1 << (MariaDBParser.RANK - 283)) | (1 << (MariaDBParser.ROW_NUMBER - 283)) | (1 << (MariaDBParser.STD - 283)) | (1 << (MariaDBParser.STDDEV - 283)) | (1 << (MariaDBParser.STDDEV_POP - 283)) | (1 << (MariaDBParser.STDDEV_SAMP - 283)) | (1 << (MariaDBParser.SUM - 283)) | (1 << (MariaDBParser.VAR_POP - 283)) | (1 << (MariaDBParser.VAR_SAMP - 283)) | (1 << (MariaDBParser.VARIANCE - 283)) | (1 << (MariaDBParser.CURRENT_DATE - 283)) | (1 << (MariaDBParser.CURRENT_TIME - 283)))) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & ((1 << (MariaDBParser.CURRENT_TIMESTAMP - 315)) | (1 << (MariaDBParser.LOCALTIME - 315)) | (1 << (MariaDBParser.CURDATE - 315)) | (1 << (MariaDBParser.CURTIME - 315)) | (1 << (MariaDBParser.DATE_ADD - 315)) | (1 << (MariaDBParser.DATE_SUB - 315)) | (1 << (MariaDBParser.LOCALTIMESTAMP - 315)) | (1 << (MariaDBParser.NOW - 315)) | (1 << (MariaDBParser.POSITION - 315)) | (1 << (MariaDBParser.SUBSTR - 315)) | (1 << (MariaDBParser.SUBSTRING - 315)) | (1 << (MariaDBParser.SYSDATE - 315)) | (1 << (MariaDBParser.TRIM - 315)) | (1 << (MariaDBParser.UTC_DATE - 315)) | (1 << (MariaDBParser.UTC_TIME - 315)) | (1 << (MariaDBParser.UTC_TIMESTAMP - 315)) | (1 << (MariaDBParser.ACCOUNT - 315)) | (1 << (MariaDBParser.ACTION - 315)) | (1 << (MariaDBParser.AFTER - 315)) | (1 << (MariaDBParser.AGGREGATE - 315)) | (1 << (MariaDBParser.ALGORITHM - 315)) | (1 << (MariaDBParser.ANY - 315)) | (1 << (MariaDBParser.AT - 315)) | (1 << (MariaDBParser.AUTHORS - 315)) | (1 << (MariaDBParser.AUTOCOMMIT - 315)) | (1 << (MariaDBParser.AUTOEXTEND_SIZE - 315)) | (1 << (MariaDBParser.AUTO_INCREMENT - 315)) | (1 << (MariaDBParser.AVG_ROW_LENGTH - 315)) | (1 << (MariaDBParser.BEGIN - 315)) | (1 << (MariaDBParser.BINLOG - 315)) | (1 << (MariaDBParser.BIT - 315)))) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & ((1 << (MariaDBParser.BLOCK - 347)) | (1 << (MariaDBParser.BOOL - 347)) | (1 << (MariaDBParser.BOOLEAN - 347)) | (1 << (MariaDBParser.BTREE - 347)) | (1 << (MariaDBParser.CACHE - 347)) | (1 << (MariaDBParser.CASCADED - 347)) | (1 << (MariaDBParser.CHAIN - 347)) | (1 << (MariaDBParser.CHANGED - 347)) | (1 << (MariaDBParser.CHANNEL - 347)) | (1 << (MariaDBParser.CHECKSUM - 347)) | (1 << (MariaDBParser.PAGE_CHECKSUM - 347)) | (1 << (MariaDBParser.CIPHER - 347)) | (1 << (MariaDBParser.CLASS_ORIGIN - 347)) | (1 << (MariaDBParser.CLIENT - 347)) | (1 << (MariaDBParser.CLOSE - 347)) | (1 << (MariaDBParser.CLUSTERING - 347)) | (1 << (MariaDBParser.COALESCE - 347)) | (1 << (MariaDBParser.CODE - 347)) | (1 << (MariaDBParser.COLUMNS - 347)) | (1 << (MariaDBParser.COLUMN_FORMAT - 347)) | (1 << (MariaDBParser.COLUMN_NAME - 347)) | (1 << (MariaDBParser.COMMENT - 347)) | (1 << (MariaDBParser.COMMIT - 347)) | (1 << (MariaDBParser.COMPACT - 347)) | (1 << (MariaDBParser.COMPLETION - 347)) | (1 << (MariaDBParser.COMPRESSED - 347)) | (1 << (MariaDBParser.COMPRESSION - 347)) | (1 << (MariaDBParser.CONCURRENT - 347)) | (1 << (MariaDBParser.CONNECT - 347)) | (1 << (MariaDBParser.CONNECTION - 347)) | (1 << (MariaDBParser.CONSISTENT - 347)) | (1 << (MariaDBParser.CONSTRAINT_CATALOG - 347)))) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & ((1 << (MariaDBParser.CONSTRAINT_SCHEMA - 379)) | (1 << (MariaDBParser.CONSTRAINT_NAME - 379)) | (1 << (MariaDBParser.CONTAINS - 379)) | (1 << (MariaDBParser.CONTEXT - 379)) | (1 << (MariaDBParser.CONTRIBUTORS - 379)) | (1 << (MariaDBParser.COPY - 379)) | (1 << (MariaDBParser.CPU - 379)) | (1 << (MariaDBParser.CYCLE - 379)) | (1 << (MariaDBParser.CURSOR_NAME - 379)) | (1 << (MariaDBParser.DATA - 379)) | (1 << (MariaDBParser.DATAFILE - 379)) | (1 << (MariaDBParser.DEALLOCATE - 379)) | (1 << (MariaDBParser.DEFAULT_AUTH - 379)) | (1 << (MariaDBParser.DEFINER - 379)) | (1 << (MariaDBParser.DELAY_KEY_WRITE - 379)) | (1 << (MariaDBParser.DES_KEY_FILE - 379)) | (1 << (MariaDBParser.DIRECTORY - 379)) | (1 << (MariaDBParser.DISABLE - 379)) | (1 << (MariaDBParser.DISCARD - 379)) | (1 << (MariaDBParser.DISK - 379)) | (1 << (MariaDBParser.DO - 379)) | (1 << (MariaDBParser.DUMPFILE - 379)) | (1 << (MariaDBParser.DUPLICATE - 379)) | (1 << (MariaDBParser.DYNAMIC - 379)) | (1 << (MariaDBParser.ENABLE - 379)) | (1 << (MariaDBParser.ENCRYPTED - 379)) | (1 << (MariaDBParser.ENCRYPTION - 379)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ID - 379)) | (1 << (MariaDBParser.END - 379)) | (1 << (MariaDBParser.ENDS - 379)) | (1 << (MariaDBParser.ENGINE - 379)) | (1 << (MariaDBParser.ENGINES - 379)))) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & ((1 << (MariaDBParser.ERROR - 411)) | (1 << (MariaDBParser.ERRORS - 411)) | (1 << (MariaDBParser.ESCAPE - 411)) | (1 << (MariaDBParser.EVEN - 411)) | (1 << (MariaDBParser.EVENT - 411)) | (1 << (MariaDBParser.EVENTS - 411)) | (1 << (MariaDBParser.EVERY - 411)) | (1 << (MariaDBParser.EXCHANGE - 411)) | (1 << (MariaDBParser.EXCLUSIVE - 411)) | (1 << (MariaDBParser.EXPIRE - 411)) | (1 << (MariaDBParser.EXPORT - 411)) | (1 << (MariaDBParser.EXTENDED - 411)) | (1 << (MariaDBParser.EXTENT_SIZE - 411)) | (1 << (MariaDBParser.FAILED_LOGIN_ATTEMPTS - 411)) | (1 << (MariaDBParser.FAST - 411)) | (1 << (MariaDBParser.FAULTS - 411)) | (1 << (MariaDBParser.FIELDS - 411)) | (1 << (MariaDBParser.FILE_BLOCK_SIZE - 411)) | (1 << (MariaDBParser.FILTER - 411)) | (1 << (MariaDBParser.FIRST - 411)) | (1 << (MariaDBParser.FIXED - 411)) | (1 << (MariaDBParser.FLUSH - 411)) | (1 << (MariaDBParser.FOLLOWS - 411)) | (1 << (MariaDBParser.FOUND - 411)) | (1 << (MariaDBParser.FULL - 411)) | (1 << (MariaDBParser.FUNCTION - 411)) | (1 << (MariaDBParser.GENERAL - 411)) | (1 << (MariaDBParser.GLOBAL - 411)) | (1 << (MariaDBParser.GRANTS - 411)) | (1 << (MariaDBParser.GROUP_REPLICATION - 411)) | (1 << (MariaDBParser.HANDLER - 411)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (MariaDBParser.HASH - 443)) | (1 << (MariaDBParser.HELP - 443)) | (1 << (MariaDBParser.HISTORY - 443)) | (1 << (MariaDBParser.HOST - 443)) | (1 << (MariaDBParser.HOSTS - 443)) | (1 << (MariaDBParser.IDENTIFIED - 443)) | (1 << (MariaDBParser.IGNORE_SERVER_IDS - 443)) | (1 << (MariaDBParser.IMPORT - 443)) | (1 << (MariaDBParser.INCREMENT - 443)) | (1 << (MariaDBParser.INDEXES - 443)) | (1 << (MariaDBParser.INITIAL_SIZE - 443)) | (1 << (MariaDBParser.INPLACE - 443)) | (1 << (MariaDBParser.INSERT_METHOD - 443)) | (1 << (MariaDBParser.INSTALL - 443)) | (1 << (MariaDBParser.INSTANCE - 443)) | (1 << (MariaDBParser.INSTANT - 443)) | (1 << (MariaDBParser.INVISIBLE - 443)) | (1 << (MariaDBParser.INVOKER - 443)) | (1 << (MariaDBParser.IO - 443)) | (1 << (MariaDBParser.IO_THREAD - 443)) | (1 << (MariaDBParser.IPC - 443)) | (1 << (MariaDBParser.ISOLATION - 443)) | (1 << (MariaDBParser.ISSUER - 443)) | (1 << (MariaDBParser.JSON - 443)) | (1 << (MariaDBParser.KEY_BLOCK_SIZE - 443)) | (1 << (MariaDBParser.LANGUAGE - 443)) | (1 << (MariaDBParser.LAST - 443)) | (1 << (MariaDBParser.LEAVES - 443)) | (1 << (MariaDBParser.LESS - 443)) | (1 << (MariaDBParser.LEVEL - 443)) | (1 << (MariaDBParser.LIST - 443)) | (1 << (MariaDBParser.LOCAL - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (MariaDBParser.LOCALES - 475)) | (1 << (MariaDBParser.LOGFILE - 475)) | (1 << (MariaDBParser.LOGS - 475)) | (1 << (MariaDBParser.MASTER - 475)) | (1 << (MariaDBParser.MASTER_AUTO_POSITION - 475)) | (1 << (MariaDBParser.MASTER_CONNECT_RETRY - 475)) | (1 << (MariaDBParser.MASTER_DELAY - 475)) | (1 << (MariaDBParser.MASTER_HEARTBEAT_PERIOD - 475)) | (1 << (MariaDBParser.MASTER_HOST - 475)) | (1 << (MariaDBParser.MASTER_LOG_FILE - 475)) | (1 << (MariaDBParser.MASTER_LOG_POS - 475)) | (1 << (MariaDBParser.MASTER_PASSWORD - 475)) | (1 << (MariaDBParser.MASTER_PORT - 475)) | (1 << (MariaDBParser.MASTER_RETRY_COUNT - 475)) | (1 << (MariaDBParser.MASTER_SSL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CA - 475)) | (1 << (MariaDBParser.MASTER_SSL_CAPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_CERT - 475)) | (1 << (MariaDBParser.MASTER_SSL_CIPHER - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRLPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_KEY - 475)) | (1 << (MariaDBParser.MASTER_TLS_VERSION - 475)) | (1 << (MariaDBParser.MASTER_USER - 475)) | (1 << (MariaDBParser.MAX_CONNECTIONS_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_QUERIES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_ROWS - 475)) | (1 << (MariaDBParser.MAX_SIZE - 475)) | (1 << (MariaDBParser.MAX_UPDATES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_USER_CONNECTIONS - 475)) | (1 << (MariaDBParser.MEDIUM - 475)) | (1 << (MariaDBParser.MEMBER - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (MariaDBParser.MERGE - 507)) | (1 << (MariaDBParser.MESSAGE_TEXT - 507)) | (1 << (MariaDBParser.MID - 507)) | (1 << (MariaDBParser.MIGRATE - 507)) | (1 << (MariaDBParser.MIN_ROWS - 507)) | (1 << (MariaDBParser.MODE - 507)) | (1 << (MariaDBParser.MODIFY - 507)) | (1 << (MariaDBParser.MUTEX - 507)) | (1 << (MariaDBParser.MYSQL - 507)) | (1 << (MariaDBParser.MYSQL_ERRNO - 507)) | (1 << (MariaDBParser.NAME - 507)) | (1 << (MariaDBParser.NAMES - 507)) | (1 << (MariaDBParser.NCHAR - 507)) | (1 << (MariaDBParser.NEVER - 507)) | (1 << (MariaDBParser.NEXT - 507)) | (1 << (MariaDBParser.NO - 507)) | (1 << (MariaDBParser.NOCACHE - 507)) | (1 << (MariaDBParser.NOCOPY - 507)) | (1 << (MariaDBParser.NOCYCLE - 507)) | (1 << (MariaDBParser.NOMAXVALUE - 507)) | (1 << (MariaDBParser.NOMINVALUE - 507)) | (1 << (MariaDBParser.NOWAIT - 507)) | (1 << (MariaDBParser.NODEGROUP - 507)) | (1 << (MariaDBParser.NONE - 507)) | (1 << (MariaDBParser.ODBC - 507)) | (1 << (MariaDBParser.OFFLINE - 507)) | (1 << (MariaDBParser.OFFSET - 507)) | (1 << (MariaDBParser.OF - 507)) | (1 << (MariaDBParser.OJ - 507)) | (1 << (MariaDBParser.OLD_PASSWORD - 507)) | (1 << (MariaDBParser.ONE - 507)) | (1 << (MariaDBParser.ONLINE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (MariaDBParser.ONLY - 539)) | (1 << (MariaDBParser.OPEN - 539)) | (1 << (MariaDBParser.OPTIMIZER_COSTS - 539)) | (1 << (MariaDBParser.OPTIONS - 539)) | (1 << (MariaDBParser.OWNER - 539)) | (1 << (MariaDBParser.PACK_KEYS - 539)) | (1 << (MariaDBParser.PAGE - 539)) | (1 << (MariaDBParser.PARSER - 539)) | (1 << (MariaDBParser.PARTIAL - 539)) | (1 << (MariaDBParser.PARTITIONING - 539)) | (1 << (MariaDBParser.PARTITIONS - 539)) | (1 << (MariaDBParser.PASSWORD - 539)) | (1 << (MariaDBParser.PASSWORD_LOCK_TIME - 539)) | (1 << (MariaDBParser.PHASE - 539)) | (1 << (MariaDBParser.PLUGIN - 539)) | (1 << (MariaDBParser.PLUGIN_DIR - 539)) | (1 << (MariaDBParser.PLUGINS - 539)) | (1 << (MariaDBParser.PORT - 539)) | (1 << (MariaDBParser.PRECEDES - 539)) | (1 << (MariaDBParser.PREPARE - 539)) | (1 << (MariaDBParser.PRESERVE - 539)) | (1 << (MariaDBParser.PREV - 539)) | (1 << (MariaDBParser.PROCESSLIST - 539)) | (1 << (MariaDBParser.PROFILE - 539)) | (1 << (MariaDBParser.PROFILES - 539)) | (1 << (MariaDBParser.PROXY - 539)) | (1 << (MariaDBParser.QUERY - 539)) | (1 << (MariaDBParser.QUERY_RESPONSE_TIME - 539)) | (1 << (MariaDBParser.QUICK - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (MariaDBParser.REBUILD - 571)) | (1 << (MariaDBParser.RECOVER - 571)) | (1 << (MariaDBParser.RECURSIVE - 571)) | (1 << (MariaDBParser.REDO_BUFFER_SIZE - 571)) | (1 << (MariaDBParser.REDUNDANT - 571)) | (1 << (MariaDBParser.RELAY - 571)) | (1 << (MariaDBParser.RELAY_LOG_FILE - 571)) | (1 << (MariaDBParser.RELAY_LOG_POS - 571)) | (1 << (MariaDBParser.RELAYLOG - 571)) | (1 << (MariaDBParser.REMOVE - 571)) | (1 << (MariaDBParser.REORGANIZE - 571)) | (1 << (MariaDBParser.REPAIR - 571)) | (1 << (MariaDBParser.REPLICATE_DO_DB - 571)) | (1 << (MariaDBParser.REPLICATE_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_REWRITE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATION - 571)) | (1 << (MariaDBParser.RESET - 571)) | (1 << (MariaDBParser.RESTART - 571)) | (1 << (MariaDBParser.RESUME - 571)) | (1 << (MariaDBParser.RETURNED_SQLSTATE - 571)) | (1 << (MariaDBParser.RETURNS - 571)) | (1 << (MariaDBParser.REUSE - 571)) | (1 << (MariaDBParser.ROLE - 571)) | (1 << (MariaDBParser.ROLLBACK - 571)) | (1 << (MariaDBParser.ROLLUP - 571)) | (1 << (MariaDBParser.ROTATE - 571)) | (1 << (MariaDBParser.ROW - 571)))) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & ((1 << (MariaDBParser.ROWS - 603)) | (1 << (MariaDBParser.ROW_FORMAT - 603)) | (1 << (MariaDBParser.RTREE - 603)) | (1 << (MariaDBParser.SAVEPOINT - 603)) | (1 << (MariaDBParser.SCHEDULE - 603)) | (1 << (MariaDBParser.SECURITY - 603)) | (1 << (MariaDBParser.SEQUENCE - 603)) | (1 << (MariaDBParser.SERVER - 603)) | (1 << (MariaDBParser.SESSION - 603)) | (1 << (MariaDBParser.SHARE - 603)) | (1 << (MariaDBParser.SHARED - 603)) | (1 << (MariaDBParser.SIGNED - 603)) | (1 << (MariaDBParser.SIMPLE - 603)) | (1 << (MariaDBParser.SLAVE - 603)) | (1 << (MariaDBParser.SLAVES - 603)) | (1 << (MariaDBParser.SLOW - 603)) | (1 << (MariaDBParser.SNAPSHOT - 603)) | (1 << (MariaDBParser.SOCKET - 603)) | (1 << (MariaDBParser.SOME - 603)) | (1 << (MariaDBParser.SONAME - 603)) | (1 << (MariaDBParser.SOUNDS - 603)) | (1 << (MariaDBParser.SOURCE - 603)) | (1 << (MariaDBParser.SQL_AFTER_GTIDS - 603)) | (1 << (MariaDBParser.SQL_AFTER_MTS_GAPS - 603)) | (1 << (MariaDBParser.SQL_BEFORE_GTIDS - 603)) | (1 << (MariaDBParser.SQL_BUFFER_RESULT - 603)) | (1 << (MariaDBParser.SQL_CACHE - 603)) | (1 << (MariaDBParser.SQL_NO_CACHE - 603)) | (1 << (MariaDBParser.SQL_THREAD - 603)) | (1 << (MariaDBParser.START - 603)) | (1 << (MariaDBParser.STARTS - 603)) | (1 << (MariaDBParser.STATS_AUTO_RECALC - 603)))) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & ((1 << (MariaDBParser.STATS_PERSISTENT - 635)) | (1 << (MariaDBParser.STATS_SAMPLE_PAGES - 635)) | (1 << (MariaDBParser.STATUS - 635)) | (1 << (MariaDBParser.STOP - 635)) | (1 << (MariaDBParser.STORAGE - 635)) | (1 << (MariaDBParser.STRING - 635)) | (1 << (MariaDBParser.SUBCLASS_ORIGIN - 635)) | (1 << (MariaDBParser.SUBJECT - 635)) | (1 << (MariaDBParser.SUBPARTITION - 635)) | (1 << (MariaDBParser.SUBPARTITIONS - 635)) | (1 << (MariaDBParser.SUSPEND - 635)) | (1 << (MariaDBParser.SWAPS - 635)) | (1 << (MariaDBParser.SWITCHES - 635)) | (1 << (MariaDBParser.TABLE_NAME - 635)) | (1 << (MariaDBParser.TABLESPACE - 635)) | (1 << (MariaDBParser.TABLE_TYPE - 635)) | (1 << (MariaDBParser.TEMPORARY - 635)) | (1 << (MariaDBParser.TEMPTABLE - 635)) | (1 << (MariaDBParser.THAN - 635)) | (1 << (MariaDBParser.TRADITIONAL - 635)) | (1 << (MariaDBParser.TRANSACTION - 635)) | (1 << (MariaDBParser.TRANSACTIONAL - 635)) | (1 << (MariaDBParser.TRIGGERS - 635)) | (1 << (MariaDBParser.TRUNCATE - 635)) | (1 << (MariaDBParser.TYPES - 635)) | (1 << (MariaDBParser.UNBOUNDED - 635)) | (1 << (MariaDBParser.UNDEFINED - 635)) | (1 << (MariaDBParser.UNDOFILE - 635)) | (1 << (MariaDBParser.UNDO_BUFFER_SIZE - 635)) | (1 << (MariaDBParser.UNINSTALL - 635)) | (1 << (MariaDBParser.UNKNOWN - 635)))) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & ((1 << (MariaDBParser.UNTIL - 667)) | (1 << (MariaDBParser.UPGRADE - 667)) | (1 << (MariaDBParser.USER - 667)) | (1 << (MariaDBParser.USE_FRM - 667)) | (1 << (MariaDBParser.USER_RESOURCES - 667)) | (1 << (MariaDBParser.VALIDATION - 667)) | (1 << (MariaDBParser.VALUE - 667)) | (1 << (MariaDBParser.VARIABLES - 667)) | (1 << (MariaDBParser.VIEW - 667)) | (1 << (MariaDBParser.VIRTUAL - 667)) | (1 << (MariaDBParser.VISIBLE - 667)) | (1 << (MariaDBParser.WAIT - 667)) | (1 << (MariaDBParser.WARNINGS - 667)) | (1 << (MariaDBParser.WITHOUT - 667)) | (1 << (MariaDBParser.WORK - 667)) | (1 << (MariaDBParser.WRAPPER - 667)) | (1 << (MariaDBParser.WSREP_MEMBERSHIP - 667)) | (1 << (MariaDBParser.WSREP_STATUS - 667)) | (1 << (MariaDBParser.X509 - 667)) | (1 << (MariaDBParser.XA - 667)) | (1 << (MariaDBParser.XML - 667)) | (1 << (MariaDBParser.EUR - 667)) | (1 << (MariaDBParser.USA - 667)) | (1 << (MariaDBParser.JIS - 667)) | (1 << (MariaDBParser.ISO - 667)) | (1 << (MariaDBParser.INTERNAL - 667)) | (1 << (MariaDBParser.QUARTER - 667)) | (1 << (MariaDBParser.MONTH - 667)) | (1 << (MariaDBParser.DAY - 667)) | (1 << (MariaDBParser.HOUR - 667)))) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & ((1 << (MariaDBParser.MINUTE - 699)) | (1 << (MariaDBParser.WEEK - 699)) | (1 << (MariaDBParser.SECOND - 699)) | (1 << (MariaDBParser.MICROSECOND - 699)) | (1 << (MariaDBParser.USER_STATISTICS - 699)) | (1 << (MariaDBParser.CLIENT_STATISTICS - 699)) | (1 << (MariaDBParser.INDEX_STATISTICS - 699)) | (1 << (MariaDBParser.TABLE_STATISTICS - 699)) | (1 << (MariaDBParser.ADMIN - 699)) | (1 << (MariaDBParser.AUDIT_ADMIN - 699)) | (1 << (MariaDBParser.BACKUP_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ENCRYPTION_ADMIN - 699)) | (1 << (MariaDBParser.CLONE_ADMIN - 699)) | (1 << (MariaDBParser.CONNECTION_ADMIN - 699)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ADMIN - 699)) | (1 << (MariaDBParser.EXECUTE - 699)) | (1 << (MariaDBParser.FILE - 699)) | (1 << (MariaDBParser.FIREWALL_ADMIN - 699)) | (1 << (MariaDBParser.FIREWALL_USER - 699)) | (1 << (MariaDBParser.GROUP_REPLICATION_ADMIN - 699)) | (1 << (MariaDBParser.INNODB_REDO_LOG_ARCHIVE - 699)) | (1 << (MariaDBParser.INVOKE - 699)) | (1 << (MariaDBParser.LAMBDA - 699)) | (1 << (MariaDBParser.NDB_STORED_USER - 699)) | (1 << (MariaDBParser.PASSWORDLESS_USER_ADMIN - 699)))) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & ((1 << (MariaDBParser.PERSIST_RO_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.PRIVILEGES - 731)) | (1 << (MariaDBParser.PROCESS - 731)) | (1 << (MariaDBParser.RELOAD - 731)) | (1 << (MariaDBParser.REPLICATION_APPLIER - 731)) | (1 << (MariaDBParser.REPLICATION_SLAVE_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_USER - 731)) | (1 << (MariaDBParser.ROLE_ADMIN - 731)) | (1 << (MariaDBParser.ROUTINE - 731)) | (1 << (MariaDBParser.S3 - 731)) | (1 << (MariaDBParser.SESSION_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.SET_USER_ID - 731)) | (1 << (MariaDBParser.SHOW_ROUTINE - 731)) | (1 << (MariaDBParser.SHUTDOWN - 731)) | (1 << (MariaDBParser.SUPER - 731)) | (1 << (MariaDBParser.SYSTEM_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.TABLES - 731)) | (1 << (MariaDBParser.TABLE_ENCRYPTION_ADMIN - 731)) | (1 << (MariaDBParser.VERSION_TOKEN_ADMIN - 731)) | (1 << (MariaDBParser.XA_RECOVER_ADMIN - 731)) | (1 << (MariaDBParser.ARMSCII8 - 731)) | (1 << (MariaDBParser.ASCII - 731)) | (1 << (MariaDBParser.BIG5 - 731)) | (1 << (MariaDBParser.CP1250 - 731)) | (1 << (MariaDBParser.CP1251 - 731)) | (1 << (MariaDBParser.CP1256 - 731)) | (1 << (MariaDBParser.CP1257 - 731)) | (1 << (MariaDBParser.CP850 - 731)) | (1 << (MariaDBParser.CP852 - 731)) | (1 << (MariaDBParser.CP866 - 731)))) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & ((1 << (MariaDBParser.CP932 - 763)) | (1 << (MariaDBParser.DEC8 - 763)) | (1 << (MariaDBParser.EUCJPMS - 763)) | (1 << (MariaDBParser.EUCKR - 763)) | (1 << (MariaDBParser.GB18030 - 763)) | (1 << (MariaDBParser.GB2312 - 763)) | (1 << (MariaDBParser.GBK - 763)) | (1 << (MariaDBParser.GEOSTD8 - 763)) | (1 << (MariaDBParser.GREEK - 763)) | (1 << (MariaDBParser.HEBREW - 763)) | (1 << (MariaDBParser.HP8 - 763)) | (1 << (MariaDBParser.KEYBCS2 - 763)) | (1 << (MariaDBParser.KOI8R - 763)) | (1 << (MariaDBParser.KOI8U - 763)) | (1 << (MariaDBParser.LATIN1 - 763)) | (1 << (MariaDBParser.LATIN2 - 763)) | (1 << (MariaDBParser.LATIN5 - 763)) | (1 << (MariaDBParser.LATIN7 - 763)) | (1 << (MariaDBParser.MACCE - 763)) | (1 << (MariaDBParser.MACROMAN - 763)) | (1 << (MariaDBParser.SJIS - 763)) | (1 << (MariaDBParser.SWE7 - 763)) | (1 << (MariaDBParser.TIS620 - 763)) | (1 << (MariaDBParser.UCS2 - 763)) | (1 << (MariaDBParser.UJIS - 763)) | (1 << (MariaDBParser.UTF16 - 763)) | (1 << (MariaDBParser.UTF16LE - 763)) | (1 << (MariaDBParser.UTF32 - 763)) | (1 << (MariaDBParser.UTF8 - 763)) | (1 << (MariaDBParser.UTF8MB3 - 763)) | (1 << (MariaDBParser.UTF8MB4 - 763)) | (1 << (MariaDBParser.ARCHIVE - 763)))) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & ((1 << (MariaDBParser.BLACKHOLE - 795)) | (1 << (MariaDBParser.CSV - 795)) | (1 << (MariaDBParser.FEDERATED - 795)) | (1 << (MariaDBParser.INNODB - 795)) | (1 << (MariaDBParser.MEMORY - 795)) | (1 << (MariaDBParser.MRG_MYISAM - 795)) | (1 << (MariaDBParser.MYISAM - 795)) | (1 << (MariaDBParser.NDB - 795)) | (1 << (MariaDBParser.NDBCLUSTER - 795)) | (1 << (MariaDBParser.PERFORMANCE_SCHEMA - 795)) | (1 << (MariaDBParser.TOKUDB - 795)) | (1 << (MariaDBParser.REPEATABLE - 795)) | (1 << (MariaDBParser.COMMITTED - 795)) | (1 << (MariaDBParser.UNCOMMITTED - 795)) | (1 << (MariaDBParser.SERIALIZABLE - 795)) | (1 << (MariaDBParser.GEOMETRYCOLLECTION - 795)) | (1 << (MariaDBParser.LINESTRING - 795)) | (1 << (MariaDBParser.MULTILINESTRING - 795)) | (1 << (MariaDBParser.MULTIPOINT - 795)) | (1 << (MariaDBParser.MULTIPOLYGON - 795)) | (1 << (MariaDBParser.POINT - 795)) | (1 << (MariaDBParser.POLYGON - 795)) | (1 << (MariaDBParser.ABS - 795)) | (1 << (MariaDBParser.ACOS - 795)) | (1 << (MariaDBParser.ADDDATE - 795)) | (1 << (MariaDBParser.ADDTIME - 795)) | (1 << (MariaDBParser.AES_DECRYPT - 795)) | (1 << (MariaDBParser.AES_ENCRYPT - 795)) | (1 << (MariaDBParser.AREA - 795)) | (1 << (MariaDBParser.ASBINARY - 795)))) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & ((1 << (MariaDBParser.ASIN - 827)) | (1 << (MariaDBParser.ASTEXT - 827)) | (1 << (MariaDBParser.ASWKB - 827)) | (1 << (MariaDBParser.ASWKT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DECRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DERIVE - 827)) | (1 << (MariaDBParser.ASYMMETRIC_ENCRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_SIGN - 827)) | (1 << (MariaDBParser.ASYMMETRIC_VERIFY - 827)) | (1 << (MariaDBParser.ATAN - 827)) | (1 << (MariaDBParser.ATAN2 - 827)) | (1 << (MariaDBParser.BENCHMARK - 827)) | (1 << (MariaDBParser.BIN - 827)) | (1 << (MariaDBParser.BIT_COUNT - 827)) | (1 << (MariaDBParser.BIT_LENGTH - 827)) | (1 << (MariaDBParser.BUFFER - 827)) | (1 << (MariaDBParser.CATALOG_NAME - 827)) | (1 << (MariaDBParser.CEIL - 827)) | (1 << (MariaDBParser.CEILING - 827)) | (1 << (MariaDBParser.CENTROID - 827)) | (1 << (MariaDBParser.CHARACTER_LENGTH - 827)) | (1 << (MariaDBParser.CHARSET - 827)) | (1 << (MariaDBParser.CHAR_LENGTH - 827)) | (1 << (MariaDBParser.COERCIBILITY - 827)) | (1 << (MariaDBParser.COLLATION - 827)) | (1 << (MariaDBParser.COMPRESS - 827)) | (1 << (MariaDBParser.CONCAT - 827)) | (1 << (MariaDBParser.CONCAT_WS - 827)) | (1 << (MariaDBParser.CONNECTION_ID - 827)) | (1 << (MariaDBParser.CONV - 827)) | (1 << (MariaDBParser.CONVERT_TZ - 827)) | (1 << (MariaDBParser.COS - 827)))) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & ((1 << (MariaDBParser.COT - 859)) | (1 << (MariaDBParser.CRC32 - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY - 859)) | (1 << (MariaDBParser.CREATE_DH_PARAMETERS - 859)) | (1 << (MariaDBParser.CREATE_DIGEST - 859)) | (1 << (MariaDBParser.CROSSES - 859)) | (1 << (MariaDBParser.DATEDIFF - 859)) | (1 << (MariaDBParser.DATE_FORMAT - 859)) | (1 << (MariaDBParser.DAYNAME - 859)) | (1 << (MariaDBParser.DAYOFMONTH - 859)) | (1 << (MariaDBParser.DAYOFWEEK - 859)) | (1 << (MariaDBParser.DAYOFYEAR - 859)) | (1 << (MariaDBParser.DECODE - 859)) | (1 << (MariaDBParser.DEGREES - 859)) | (1 << (MariaDBParser.DES_DECRYPT - 859)) | (1 << (MariaDBParser.DES_ENCRYPT - 859)) | (1 << (MariaDBParser.DIMENSION - 859)) | (1 << (MariaDBParser.DISJOINT - 859)) | (1 << (MariaDBParser.ELT - 859)) | (1 << (MariaDBParser.ENCODE - 859)) | (1 << (MariaDBParser.ENCRYPT - 859)) | (1 << (MariaDBParser.ENDPOINT - 859)) | (1 << (MariaDBParser.ENGINE_ATTRIBUTE - 859)) | (1 << (MariaDBParser.ENVELOPE - 859)) | (1 << (MariaDBParser.EQUALS - 859)) | (1 << (MariaDBParser.EXP - 859)) | (1 << (MariaDBParser.EXPORT_SET - 859)) | (1 << (MariaDBParser.EXTERIORRING - 859)) | (1 << (MariaDBParser.EXTRACTVALUE - 859)) | (1 << (MariaDBParser.FIELD - 859)) | (1 << (MariaDBParser.FIND_IN_SET - 859)))) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & ((1 << (MariaDBParser.FLOOR - 891)) | (1 << (MariaDBParser.FORMAT - 891)) | (1 << (MariaDBParser.FOUND_ROWS - 891)) | (1 << (MariaDBParser.FROM_BASE64 - 891)) | (1 << (MariaDBParser.FROM_DAYS - 891)) | (1 << (MariaDBParser.FROM_UNIXTIME - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYN - 891)) | (1 << (MariaDBParser.GEOMETRYTYPE - 891)) | (1 << (MariaDBParser.GEOMFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMFROMWKB - 891)) | (1 << (MariaDBParser.GET_FORMAT - 891)) | (1 << (MariaDBParser.GET_LOCK - 891)) | (1 << (MariaDBParser.GLENGTH - 891)) | (1 << (MariaDBParser.GREATEST - 891)) | (1 << (MariaDBParser.GTID_SUBSET - 891)) | (1 << (MariaDBParser.GTID_SUBTRACT - 891)) | (1 << (MariaDBParser.HEX - 891)) | (1 << (MariaDBParser.IFNULL - 891)) | (1 << (MariaDBParser.INET6_ATON - 891)) | (1 << (MariaDBParser.INET6_NTOA - 891)) | (1 << (MariaDBParser.INET_ATON - 891)) | (1 << (MariaDBParser.INET_NTOA - 891)) | (1 << (MariaDBParser.INSTR - 891)) | (1 << (MariaDBParser.INTERIORRINGN - 891)) | (1 << (MariaDBParser.INTERSECTS - 891)) | (1 << (MariaDBParser.ISCLOSED - 891)))) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & ((1 << (MariaDBParser.ISEMPTY - 923)) | (1 << (MariaDBParser.ISNULL - 923)) | (1 << (MariaDBParser.ISSIMPLE - 923)) | (1 << (MariaDBParser.IS_FREE_LOCK - 923)) | (1 << (MariaDBParser.IS_IPV4 - 923)) | (1 << (MariaDBParser.IS_IPV4_COMPAT - 923)) | (1 << (MariaDBParser.IS_IPV4_MAPPED - 923)) | (1 << (MariaDBParser.IS_IPV6 - 923)) | (1 << (MariaDBParser.IS_USED_LOCK - 923)) | (1 << (MariaDBParser.LAST_INSERT_ID - 923)) | (1 << (MariaDBParser.LCASE - 923)) | (1 << (MariaDBParser.LEAST - 923)) | (1 << (MariaDBParser.LENGTH - 923)) | (1 << (MariaDBParser.LINEFROMTEXT - 923)) | (1 << (MariaDBParser.LINEFROMWKB - 923)) | (1 << (MariaDBParser.LINESTRINGFROMTEXT - 923)) | (1 << (MariaDBParser.LINESTRINGFROMWKB - 923)) | (1 << (MariaDBParser.LN - 923)) | (1 << (MariaDBParser.LOAD_FILE - 923)) | (1 << (MariaDBParser.LOCATE - 923)) | (1 << (MariaDBParser.LOG - 923)) | (1 << (MariaDBParser.LOG10 - 923)) | (1 << (MariaDBParser.LOG2 - 923)) | (1 << (MariaDBParser.LOWER - 923)) | (1 << (MariaDBParser.LPAD - 923)) | (1 << (MariaDBParser.LTRIM - 923)) | (1 << (MariaDBParser.MAKEDATE - 923)) | (1 << (MariaDBParser.MAKETIME - 923)) | (1 << (MariaDBParser.MAKE_SET - 923)) | (1 << (MariaDBParser.MASTER_POS_WAIT - 923)) | (1 << (MariaDBParser.MBRCONTAINS - 923)) | (1 << (MariaDBParser.MBRDISJOINT - 923)))) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & ((1 << (MariaDBParser.MBREQUAL - 955)) | (1 << (MariaDBParser.MBRINTERSECTS - 955)) | (1 << (MariaDBParser.MBROVERLAPS - 955)) | (1 << (MariaDBParser.MBRTOUCHES - 955)) | (1 << (MariaDBParser.MBRWITHIN - 955)) | (1 << (MariaDBParser.MD5 - 955)) | (1 << (MariaDBParser.MLINEFROMTEXT - 955)) | (1 << (MariaDBParser.MLINEFROMWKB - 955)) | (1 << (MariaDBParser.MONTHNAME - 955)) | (1 << (MariaDBParser.MPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MPOLYFROMTEXT - 955)) | (1 << (MariaDBParser.MPOLYFROMWKB - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMTEXT - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMWKB - 955)) | (1 << (MariaDBParser.NAME_CONST - 955)) | (1 << (MariaDBParser.NULLIF - 955)) | (1 << (MariaDBParser.NUMGEOMETRIES - 955)) | (1 << (MariaDBParser.NUMINTERIORRINGS - 955)) | (1 << (MariaDBParser.NUMPOINTS - 955)) | (1 << (MariaDBParser.OCT - 955)) | (1 << (MariaDBParser.OCTET_LENGTH - 955)) | (1 << (MariaDBParser.ORD - 955)) | (1 << (MariaDBParser.OVERLAPS - 955)) | (1 << (MariaDBParser.PERIOD_ADD - 955)) | (1 << (MariaDBParser.PERIOD_DIFF - 955)) | (1 << (MariaDBParser.PI - 955)) | (1 << (MariaDBParser.POINTFROMTEXT - 955)))) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & ((1 << (MariaDBParser.POINTFROMWKB - 987)) | (1 << (MariaDBParser.POINTN - 987)) | (1 << (MariaDBParser.POLYFROMTEXT - 987)) | (1 << (MariaDBParser.POLYFROMWKB - 987)) | (1 << (MariaDBParser.POLYGONFROMTEXT - 987)) | (1 << (MariaDBParser.POLYGONFROMWKB - 987)) | (1 << (MariaDBParser.POW - 987)) | (1 << (MariaDBParser.POWER - 987)) | (1 << (MariaDBParser.QUOTE - 987)) | (1 << (MariaDBParser.RADIANS - 987)) | (1 << (MariaDBParser.RAND - 987)) | (1 << (MariaDBParser.RANDOM_BYTES - 987)) | (1 << (MariaDBParser.RELEASE_LOCK - 987)) | (1 << (MariaDBParser.REVERSE - 987)) | (1 << (MariaDBParser.ROUND - 987)) | (1 << (MariaDBParser.ROW_COUNT - 987)) | (1 << (MariaDBParser.RPAD - 987)) | (1 << (MariaDBParser.RTRIM - 987)) | (1 << (MariaDBParser.SEC_TO_TIME - 987)) | (1 << (MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE - 987)) | (1 << (MariaDBParser.SESSION_USER - 987)) | (1 << (MariaDBParser.SHA - 987)) | (1 << (MariaDBParser.SHA1 - 987)) | (1 << (MariaDBParser.SHA2 - 987)) | (1 << (MariaDBParser.SCHEMA_NAME - 987)) | (1 << (MariaDBParser.SIGN - 987)) | (1 << (MariaDBParser.SIN - 987)) | (1 << (MariaDBParser.SLEEP - 987)) | (1 << (MariaDBParser.SOUNDEX - 987)) | (1 << (MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS - 987)) | (1 << (MariaDBParser.SQRT - 987)) | (1 << (MariaDBParser.SRID - 987)))) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & ((1 << (MariaDBParser.STARTPOINT - 1019)) | (1 << (MariaDBParser.STRCMP - 1019)) | (1 << (MariaDBParser.STR_TO_DATE - 1019)) | (1 << (MariaDBParser.ST_AREA - 1019)) | (1 << (MariaDBParser.ST_ASBINARY - 1019)) | (1 << (MariaDBParser.ST_ASTEXT - 1019)) | (1 << (MariaDBParser.ST_ASWKB - 1019)) | (1 << (MariaDBParser.ST_ASWKT - 1019)) | (1 << (MariaDBParser.ST_BUFFER - 1019)) | (1 << (MariaDBParser.ST_CENTROID - 1019)) | (1 << (MariaDBParser.ST_CONTAINS - 1019)) | (1 << (MariaDBParser.ST_CROSSES - 1019)) | (1 << (MariaDBParser.ST_DIFFERENCE - 1019)) | (1 << (MariaDBParser.ST_DIMENSION - 1019)) | (1 << (MariaDBParser.ST_DISJOINT - 1019)) | (1 << (MariaDBParser.ST_DISTANCE - 1019)) | (1 << (MariaDBParser.ST_ENDPOINT - 1019)) | (1 << (MariaDBParser.ST_ENVELOPE - 1019)) | (1 << (MariaDBParser.ST_EQUALS - 1019)) | (1 << (MariaDBParser.ST_EXTERIORRING - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYN - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYTYPE - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMWKB - 1019)) | (1 << (MariaDBParser.ST_INTERIORRINGN - 1019)))) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & ((1 << (MariaDBParser.ST_INTERSECTION - 1051)) | (1 << (MariaDBParser.ST_INTERSECTS - 1051)) | (1 << (MariaDBParser.ST_ISCLOSED - 1051)) | (1 << (MariaDBParser.ST_ISEMPTY - 1051)) | (1 << (MariaDBParser.ST_ISSIMPLE - 1051)) | (1 << (MariaDBParser.ST_LINEFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINEFROMWKB - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMWKB - 1051)) | (1 << (MariaDBParser.ST_NUMGEOMETRIES - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRING - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRINGS - 1051)) | (1 << (MariaDBParser.ST_NUMPOINTS - 1051)) | (1 << (MariaDBParser.ST_OVERLAPS - 1051)) | (1 << (MariaDBParser.ST_POINTFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POINTFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POINTN - 1051)) | (1 << (MariaDBParser.ST_POLYFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMWKB - 1051)) | (1 << (MariaDBParser.ST_SRID - 1051)) | (1 << (MariaDBParser.ST_STARTPOINT - 1051)) | (1 << (MariaDBParser.ST_SYMDIFFERENCE - 1051)) | (1 << (MariaDBParser.ST_TOUCHES - 1051)) | (1 << (MariaDBParser.ST_UNION - 1051)) | (1 << (MariaDBParser.ST_WITHIN - 1051)) | (1 << (MariaDBParser.ST_X - 1051)) | (1 << (MariaDBParser.ST_Y - 1051)) | (1 << (MariaDBParser.SUBDATE - 1051)) | (1 << (MariaDBParser.SUBSTRING_INDEX - 1051)) | (1 << (MariaDBParser.SUBTIME - 1051)))) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & ((1 << (MariaDBParser.SYSTEM_USER - 1083)) | (1 << (MariaDBParser.TAN - 1083)) | (1 << (MariaDBParser.TIMEDIFF - 1083)) | (1 << (MariaDBParser.TIMESTAMPADD - 1083)) | (1 << (MariaDBParser.TIMESTAMPDIFF - 1083)) | (1 << (MariaDBParser.TIME_FORMAT - 1083)) | (1 << (MariaDBParser.TIME_TO_SEC - 1083)) | (1 << (MariaDBParser.TOUCHES - 1083)) | (1 << (MariaDBParser.TO_BASE64 - 1083)) | (1 << (MariaDBParser.TO_DAYS - 1083)) | (1 << (MariaDBParser.TO_SECONDS - 1083)) | (1 << (MariaDBParser.UCASE - 1083)) | (1 << (MariaDBParser.UNCOMPRESS - 1083)) | (1 << (MariaDBParser.UNCOMPRESSED_LENGTH - 1083)) | (1 << (MariaDBParser.UNHEX - 1083)) | (1 << (MariaDBParser.UNIX_TIMESTAMP - 1083)) | (1 << (MariaDBParser.UPDATEXML - 1083)) | (1 << (MariaDBParser.UPPER - 1083)) | (1 << (MariaDBParser.UUID - 1083)) | (1 << (MariaDBParser.UUID_SHORT - 1083)) | (1 << (MariaDBParser.VALIDATE_PASSWORD_STRENGTH - 1083)) | (1 << (MariaDBParser.VERSION - 1083)) | (1 << (MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1083)) | (1 << (MariaDBParser.WEEKDAY - 1083)) | (1 << (MariaDBParser.WEEKOFYEAR - 1083)) | (1 << (MariaDBParser.WEIGHT_STRING - 1083)) | (1 << (MariaDBParser.WITHIN - 1083)) | (1 << (MariaDBParser.YEARWEEK - 1083)) | (1 << (MariaDBParser.Y_FUNCTION - 1083)) | (1 << (MariaDBParser.X_FUNCTION - 1083)) | (1 << (MariaDBParser.VIA - 1083)) | (1 << (MariaDBParser.LASTVAL - 1083)))) !== 0) || ((((_la - 1115)) & ~0x1F) === 0 && ((1 << (_la - 1115)) & ((1 << (MariaDBParser.NEXTVAL - 1115)) | (1 << (MariaDBParser.SETVAL - 1115)) | (1 << (MariaDBParser.PREVIOUS - 1115)) | (1 << (MariaDBParser.PERSISTENT - 1115)) | (1 << (MariaDBParser.BINLOG_MONITOR - 1115)) | (1 << (MariaDBParser.BINLOG_REPLAY - 1115)) | (1 << (MariaDBParser.FEDERATED_ADMIN - 1115)) | (1 << (MariaDBParser.READ_ONLY_ADMIN - 1115)) | (1 << (MariaDBParser.REPLICA - 1115)) | (1 << (MariaDBParser.REPLICAS - 1115)) | (1 << (MariaDBParser.REPLICATION_MASTER_ADMIN - 1115)) | (1 << (MariaDBParser.MONITOR - 1115)) | (1 << (MariaDBParser.READ_ONLY - 1115)) | (1 << (MariaDBParser.REPLAY - 1115)) | (1 << (MariaDBParser.MOD - 1115)))) !== 0) || ((((_la - 1166)) & ~0x1F) === 0 && ((1 << (_la - 1166)) & ((1 << (MariaDBParser.CHARSET_REVERSE_QOUTE_STRING - 1166)) | (1 << (MariaDBParser.STRING_LITERAL - 1166)) | (1 << (MariaDBParser.ID - 1166)))) !== 0)) {
						{
						this.state = 2794;
						(_localctx as AlterByAddCheckTableConstraintContext)._name = this.uid();
						}
					}

					}
				}

				this.state = 2799;
				this.match(MariaDBParser.CHECK);
				this.state = 2800;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 2801;
				this.expression(0);
				this.state = 2802;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;

			case 10:
				_localctx = new AlterBySetAlgorithmContext(_localctx);
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 2804;
				this.match(MariaDBParser.ALGORITHM);
				this.state = 2806;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 2805;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2808;
				(_localctx as AlterBySetAlgorithmContext)._algType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.DEFAULT || _la === MariaDBParser.COPY || _la === MariaDBParser.INPLACE || _la === MariaDBParser.INSTANT)) {
					(_localctx as AlterBySetAlgorithmContext)._algType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 11:
				_localctx = new AlterByChangeDefaultContext(_localctx);
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 2809;
				this.match(MariaDBParser.ALTER);
				this.state = 2811;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.COLUMN) {
					{
					this.state = 2810;
					this.match(MariaDBParser.COLUMN);
					}
				}

				this.state = 2813;
				this.uid();
				this.state = 2819;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.SET:
					{
					this.state = 2814;
					this.match(MariaDBParser.SET);
					this.state = 2815;
					this.match(MariaDBParser.DEFAULT);
					this.state = 2816;
					this.defaultValue();
					}
					break;
				case MariaDBParser.DROP:
					{
					this.state = 2817;
					this.match(MariaDBParser.DROP);
					this.state = 2818;
					this.match(MariaDBParser.DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 12:
				_localctx = new AlterByChangeColumnContext(_localctx);
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 2821;
				this.match(MariaDBParser.CHANGE);
				this.state = 2823;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.COLUMN) {
					{
					this.state = 2822;
					this.match(MariaDBParser.COLUMN);
					}
				}

				this.state = 2826;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 369, this._ctx) ) {
				case 1:
					{
					this.state = 2825;
					this.ifExists();
					}
					break;
				}
				this.state = 2828;
				(_localctx as AlterByChangeColumnContext)._oldColumn = this.uid();
				this.state = 2829;
				(_localctx as AlterByChangeColumnContext)._newColumn = this.uid();
				this.state = 2830;
				this.columnDefinition();
				this.state = 2834;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.FIRST:
					{
					this.state = 2831;
					this.match(MariaDBParser.FIRST);
					}
					break;
				case MariaDBParser.AFTER:
					{
					this.state = 2832;
					this.match(MariaDBParser.AFTER);
					this.state = 2833;
					(_localctx as AlterByChangeColumnContext)._afterColumn = this.uid();
					}
					break;
				case MariaDBParser.EOF:
				case MariaDBParser.ALTER:
				case MariaDBParser.ANALYZE:
				case MariaDBParser.CALL:
				case MariaDBParser.CHANGE:
				case MariaDBParser.CHECK:
				case MariaDBParser.CREATE:
				case MariaDBParser.DELETE:
				case MariaDBParser.DESC:
				case MariaDBParser.DESCRIBE:
				case MariaDBParser.DROP:
				case MariaDBParser.EXPLAIN:
				case MariaDBParser.GET:
				case MariaDBParser.GRANT:
				case MariaDBParser.INSERT:
				case MariaDBParser.KILL:
				case MariaDBParser.LOAD:
				case MariaDBParser.LOCK:
				case MariaDBParser.OPTIMIZE:
				case MariaDBParser.PARTITION:
				case MariaDBParser.PURGE:
				case MariaDBParser.RELEASE:
				case MariaDBParser.RENAME:
				case MariaDBParser.REPLACE:
				case MariaDBParser.RESIGNAL:
				case MariaDBParser.REVOKE:
				case MariaDBParser.SELECT:
				case MariaDBParser.SET:
				case MariaDBParser.SHOW:
				case MariaDBParser.SIGNAL:
				case MariaDBParser.UNLOCK:
				case MariaDBParser.UPDATE:
				case MariaDBParser.USE:
				case MariaDBParser.VALUES:
				case MariaDBParser.BEGIN:
				case MariaDBParser.BINLOG:
				case MariaDBParser.CACHE:
				case MariaDBParser.CHECKSUM:
				case MariaDBParser.COMMIT:
				case MariaDBParser.DEALLOCATE:
				case MariaDBParser.DO:
				case MariaDBParser.FLUSH:
				case MariaDBParser.HANDLER:
				case MariaDBParser.HELP:
				case MariaDBParser.INSTALL:
				case MariaDBParser.PREPARE:
				case MariaDBParser.REPAIR:
				case MariaDBParser.RESET:
				case MariaDBParser.ROLLBACK:
				case MariaDBParser.SAVEPOINT:
				case MariaDBParser.START:
				case MariaDBParser.STOP:
				case MariaDBParser.TRUNCATE:
				case MariaDBParser.UNINSTALL:
				case MariaDBParser.XA:
				case MariaDBParser.EXECUTE:
				case MariaDBParser.SHUTDOWN:
				case MariaDBParser.MINUS:
				case MariaDBParser.LR_BRACKET:
				case MariaDBParser.COMMA:
				case MariaDBParser.SEMI:
					break;
				default:
					break;
				}
				}
				break;

			case 13:
				_localctx = new AlterByRenameColumnContext(_localctx);
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 2836;
				this.match(MariaDBParser.RENAME);
				this.state = 2837;
				this.match(MariaDBParser.COLUMN);
				this.state = 2838;
				(_localctx as AlterByRenameColumnContext)._oldColumn = this.uid();
				this.state = 2839;
				this.match(MariaDBParser.TO);
				this.state = 2840;
				(_localctx as AlterByRenameColumnContext)._newColumn = this.uid();
				}
				break;

			case 14:
				_localctx = new AlterByLockContext(_localctx);
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 2842;
				this.match(MariaDBParser.LOCK);
				this.state = 2844;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 2843;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2846;
				(_localctx as AlterByLockContext)._lockType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.DEFAULT || _la === MariaDBParser.EXCLUSIVE || _la === MariaDBParser.NONE || _la === MariaDBParser.SHARED)) {
					(_localctx as AlterByLockContext)._lockType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 15:
				_localctx = new AlterByModifyColumnContext(_localctx);
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 2847;
				this.match(MariaDBParser.MODIFY);
				this.state = 2849;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.COLUMN) {
					{
					this.state = 2848;
					this.match(MariaDBParser.COLUMN);
					}
				}

				this.state = 2852;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 373, this._ctx) ) {
				case 1:
					{
					this.state = 2851;
					this.ifExists();
					}
					break;
				}
				this.state = 2854;
				this.uid();
				this.state = 2855;
				this.columnDefinition();
				this.state = 2859;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.FIRST:
					{
					this.state = 2856;
					this.match(MariaDBParser.FIRST);
					}
					break;
				case MariaDBParser.AFTER:
					{
					this.state = 2857;
					this.match(MariaDBParser.AFTER);
					this.state = 2858;
					this.uid();
					}
					break;
				case MariaDBParser.EOF:
				case MariaDBParser.ALTER:
				case MariaDBParser.ANALYZE:
				case MariaDBParser.CALL:
				case MariaDBParser.CHANGE:
				case MariaDBParser.CHECK:
				case MariaDBParser.CREATE:
				case MariaDBParser.DELETE:
				case MariaDBParser.DESC:
				case MariaDBParser.DESCRIBE:
				case MariaDBParser.DROP:
				case MariaDBParser.EXPLAIN:
				case MariaDBParser.GET:
				case MariaDBParser.GRANT:
				case MariaDBParser.INSERT:
				case MariaDBParser.KILL:
				case MariaDBParser.LOAD:
				case MariaDBParser.LOCK:
				case MariaDBParser.OPTIMIZE:
				case MariaDBParser.PARTITION:
				case MariaDBParser.PURGE:
				case MariaDBParser.RELEASE:
				case MariaDBParser.RENAME:
				case MariaDBParser.REPLACE:
				case MariaDBParser.RESIGNAL:
				case MariaDBParser.REVOKE:
				case MariaDBParser.SELECT:
				case MariaDBParser.SET:
				case MariaDBParser.SHOW:
				case MariaDBParser.SIGNAL:
				case MariaDBParser.UNLOCK:
				case MariaDBParser.UPDATE:
				case MariaDBParser.USE:
				case MariaDBParser.VALUES:
				case MariaDBParser.BEGIN:
				case MariaDBParser.BINLOG:
				case MariaDBParser.CACHE:
				case MariaDBParser.CHECKSUM:
				case MariaDBParser.COMMIT:
				case MariaDBParser.DEALLOCATE:
				case MariaDBParser.DO:
				case MariaDBParser.FLUSH:
				case MariaDBParser.HANDLER:
				case MariaDBParser.HELP:
				case MariaDBParser.INSTALL:
				case MariaDBParser.PREPARE:
				case MariaDBParser.REPAIR:
				case MariaDBParser.RESET:
				case MariaDBParser.ROLLBACK:
				case MariaDBParser.SAVEPOINT:
				case MariaDBParser.START:
				case MariaDBParser.STOP:
				case MariaDBParser.TRUNCATE:
				case MariaDBParser.UNINSTALL:
				case MariaDBParser.XA:
				case MariaDBParser.EXECUTE:
				case MariaDBParser.SHUTDOWN:
				case MariaDBParser.MINUS:
				case MariaDBParser.LR_BRACKET:
				case MariaDBParser.COMMA:
				case MariaDBParser.SEMI:
					break;
				default:
					break;
				}
				}
				break;

			case 16:
				_localctx = new AlterByDropColumnContext(_localctx);
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 2861;
				this.match(MariaDBParser.DROP);
				this.state = 2863;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.COLUMN) {
					{
					this.state = 2862;
					this.match(MariaDBParser.COLUMN);
					}
				}

				this.state = 2866;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 376, this._ctx) ) {
				case 1:
					{
					this.state = 2865;
					this.ifExists();
					}
					break;
				}
				this.state = 2868;
				this.uid();
				this.state = 2870;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.RESTRICT) {
					{
					this.state = 2869;
					this.match(MariaDBParser.RESTRICT);
					}
				}

				}
				break;

			case 17:
				_localctx = new AlterByDropConstraintCheckContext(_localctx);
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 2872;
				this.match(MariaDBParser.DROP);
				this.state = 2873;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.CHECK || _la === MariaDBParser.CONSTRAINT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2875;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 378, this._ctx) ) {
				case 1:
					{
					this.state = 2874;
					this.ifExists();
					}
					break;
				}
				this.state = 2877;
				this.uid();
				}
				break;

			case 18:
				_localctx = new AlterByDropPrimaryKeyContext(_localctx);
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 2878;
				this.match(MariaDBParser.DROP);
				this.state = 2879;
				this.match(MariaDBParser.PRIMARY);
				this.state = 2880;
				this.match(MariaDBParser.KEY);
				}
				break;

			case 19:
				_localctx = new AlterByDropIndexContext(_localctx);
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 2881;
				this.match(MariaDBParser.DROP);
				this.state = 2882;
				(_localctx as AlterByDropIndexContext)._indexFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.INDEX || _la === MariaDBParser.KEY)) {
					(_localctx as AlterByDropIndexContext)._indexFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2884;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 379, this._ctx) ) {
				case 1:
					{
					this.state = 2883;
					this.ifExists();
					}
					break;
				}
				this.state = 2886;
				this.uid();
				}
				break;

			case 20:
				_localctx = new AlterByRenameIndexContext(_localctx);
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 2887;
				this.match(MariaDBParser.RENAME);
				this.state = 2888;
				(_localctx as AlterByRenameIndexContext)._indexFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.INDEX || _la === MariaDBParser.KEY)) {
					(_localctx as AlterByRenameIndexContext)._indexFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2889;
				this.uid();
				this.state = 2890;
				this.match(MariaDBParser.TO);
				this.state = 2891;
				this.uid();
				}
				break;

			case 21:
				_localctx = new AlterByAlterIndexVisibilityContext(_localctx);
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 2893;
				this.match(MariaDBParser.ALTER);
				this.state = 2894;
				this.match(MariaDBParser.INDEX);
				this.state = 2895;
				this.uid();
				this.state = 2896;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.INVISIBLE || _la === MariaDBParser.VISIBLE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 22:
				_localctx = new AlterByDropForeignKeyContext(_localctx);
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 2898;
				this.match(MariaDBParser.DROP);
				this.state = 2899;
				this.match(MariaDBParser.FOREIGN);
				this.state = 2900;
				this.match(MariaDBParser.KEY);
				this.state = 2902;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 380, this._ctx) ) {
				case 1:
					{
					this.state = 2901;
					this.ifExists();
					}
					break;
				}
				this.state = 2904;
				this.uid();
				}
				break;

			case 23:
				_localctx = new AlterByDisableKeysContext(_localctx);
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 2905;
				this.match(MariaDBParser.DISABLE);
				this.state = 2906;
				this.match(MariaDBParser.KEYS);
				}
				break;

			case 24:
				_localctx = new AlterByEnableKeysContext(_localctx);
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 2907;
				this.match(MariaDBParser.ENABLE);
				this.state = 2908;
				this.match(MariaDBParser.KEYS);
				}
				break;

			case 25:
				_localctx = new AlterByRenameContext(_localctx);
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 2909;
				this.match(MariaDBParser.RENAME);
				this.state = 2911;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.AS || _la === MariaDBParser.TO) {
					{
					this.state = 2910;
					(_localctx as AlterByRenameContext)._renameFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MariaDBParser.AS || _la === MariaDBParser.TO)) {
						(_localctx as AlterByRenameContext)._renameFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 2915;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 382, this._ctx) ) {
				case 1:
					{
					this.state = 2913;
					this.uid();
					}
					break;

				case 2:
					{
					this.state = 2914;
					this.fullId();
					}
					break;
				}
				}
				break;

			case 26:
				_localctx = new AlterByOrderContext(_localctx);
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 2917;
				this.match(MariaDBParser.ORDER);
				this.state = 2918;
				this.match(MariaDBParser.BY);
				this.state = 2919;
				this.uidList();
				}
				break;

			case 27:
				_localctx = new AlterByConvertCharsetContext(_localctx);
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 2920;
				this.match(MariaDBParser.CONVERT);
				this.state = 2921;
				this.match(MariaDBParser.TO);
				this.state = 2922;
				this.match(MariaDBParser.CHARACTER);
				this.state = 2923;
				this.match(MariaDBParser.SET);
				this.state = 2924;
				this.charsetName();
				this.state = 2927;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.COLLATE) {
					{
					this.state = 2925;
					this.match(MariaDBParser.COLLATE);
					this.state = 2926;
					this.collationName();
					}
				}

				}
				break;

			case 28:
				_localctx = new AlterByDefaultCharsetContext(_localctx);
				this.enterOuterAlt(_localctx, 28);
				{
				this.state = 2930;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.DEFAULT) {
					{
					this.state = 2929;
					this.match(MariaDBParser.DEFAULT);
					}
				}

				this.state = 2932;
				this.match(MariaDBParser.CHARACTER);
				this.state = 2933;
				this.match(MariaDBParser.SET);
				this.state = 2934;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				this.state = 2935;
				this.charsetName();
				this.state = 2939;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.COLLATE) {
					{
					this.state = 2936;
					this.match(MariaDBParser.COLLATE);
					this.state = 2937;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					this.state = 2938;
					this.collationName();
					}
				}

				}
				break;

			case 29:
				_localctx = new AlterByDiscardTablespaceContext(_localctx);
				this.enterOuterAlt(_localctx, 29);
				{
				this.state = 2941;
				this.match(MariaDBParser.DISCARD);
				this.state = 2942;
				this.match(MariaDBParser.TABLESPACE);
				}
				break;

			case 30:
				_localctx = new AlterByImportTablespaceContext(_localctx);
				this.enterOuterAlt(_localctx, 30);
				{
				this.state = 2943;
				this.match(MariaDBParser.IMPORT);
				this.state = 2944;
				this.match(MariaDBParser.TABLESPACE);
				}
				break;

			case 31:
				_localctx = new AlterByForceContext(_localctx);
				this.enterOuterAlt(_localctx, 31);
				{
				this.state = 2945;
				this.match(MariaDBParser.FORCE);
				}
				break;

			case 32:
				_localctx = new AlterByValidateContext(_localctx);
				this.enterOuterAlt(_localctx, 32);
				{
				this.state = 2946;
				(_localctx as AlterByValidateContext)._validationFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.WITH || _la === MariaDBParser.WITHOUT)) {
					(_localctx as AlterByValidateContext)._validationFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2947;
				this.match(MariaDBParser.VALIDATION);
				}
				break;

			case 33:
				_localctx = new AlterByAddDefinitionsContext(_localctx);
				this.enterOuterAlt(_localctx, 33);
				{
				this.state = 2948;
				this.match(MariaDBParser.ADD);
				this.state = 2950;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.COLUMN) {
					{
					this.state = 2949;
					this.match(MariaDBParser.COLUMN);
					}
				}

				this.state = 2953;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.IF) {
					{
					this.state = 2952;
					this.ifNotExists();
					}
				}

				this.state = 2955;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 2956;
				this.createDefinition();
				this.state = 2961;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 2957;
					this.match(MariaDBParser.COMMA);
					this.state = 2958;
					this.createDefinition();
					}
					}
					this.state = 2963;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2964;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;

			case 34:
				_localctx = new AlterPartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 34);
				{
				this.state = 2966;
				this.alterPartitionSpecification();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterPartitionSpecification(): AlterPartitionSpecificationContext {
		let _localctx: AlterPartitionSpecificationContext = new AlterPartitionSpecificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 158, MariaDBParser.RULE_alterPartitionSpecification);
		let _la: number;
		try {
			this.state = 3073;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.ADD:
				_localctx = new AlterByAddPartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2969;
				this.match(MariaDBParser.ADD);
				this.state = 2970;
				this.match(MariaDBParser.PARTITION);
				this.state = 2972;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.IF) {
					{
					this.state = 2971;
					this.ifNotExists();
					}
				}

				this.state = 2974;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 2975;
				this.partitionDefinition();
				this.state = 2980;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 2976;
					this.match(MariaDBParser.COMMA);
					this.state = 2977;
					this.partitionDefinition();
					}
					}
					this.state = 2982;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2983;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;
			case MariaDBParser.DROP:
				_localctx = new AlterByDropPartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2985;
				this.match(MariaDBParser.DROP);
				this.state = 2986;
				this.match(MariaDBParser.PARTITION);
				this.state = 2988;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 392, this._ctx) ) {
				case 1:
					{
					this.state = 2987;
					this.ifExists();
					}
					break;
				}
				this.state = 2990;
				this.uidList();
				}
				break;
			case MariaDBParser.DISCARD:
				_localctx = new AlterByDiscardPartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2991;
				this.match(MariaDBParser.DISCARD);
				this.state = 2992;
				this.match(MariaDBParser.PARTITION);
				this.state = 2995;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.ATTRIBUTE:
				case MariaDBParser.BODY:
				case MariaDBParser.BUCKETS:
				case MariaDBParser.CONDITION:
				case MariaDBParser.CURRENT:
				case MariaDBParser.CURRENT_ROLE:
				case MariaDBParser.CURRENT_USER:
				case MariaDBParser.DATABASE:
				case MariaDBParser.DEFAULT:
				case MariaDBParser.DIAGNOSTICS:
				case MariaDBParser.EMPTY:
				case MariaDBParser.EXCEPT:
				case MariaDBParser.GROUP:
				case MariaDBParser.IF:
				case MariaDBParser.IGNORED:
				case MariaDBParser.INSERT:
				case MariaDBParser.LATERAL:
				case MariaDBParser.LEFT:
				case MariaDBParser.LOCKED:
				case MariaDBParser.MAXVALUE:
				case MariaDBParser.MINVALUE:
				case MariaDBParser.NUMBER:
				case MariaDBParser.OPTIONAL:
				case MariaDBParser.ORDER:
				case MariaDBParser.PRIMARY:
				case MariaDBParser.PACKAGE:
				case MariaDBParser.REPLACE:
				case MariaDBParser.RIGHT:
				case MariaDBParser.SCHEMA:
				case MariaDBParser.SKIP_:
				case MariaDBParser.STACKED:
				case MariaDBParser.STATEMENT:
				case MariaDBParser.DATE:
				case MariaDBParser.TIME:
				case MariaDBParser.TIMESTAMP:
				case MariaDBParser.DATETIME:
				case MariaDBParser.YEAR:
				case MariaDBParser.BINARY:
				case MariaDBParser.TEXT:
				case MariaDBParser.ENUM:
				case MariaDBParser.SERIAL:
				case MariaDBParser.JSON_ARRAY:
				case MariaDBParser.JSON_ARRAYAGG:
				case MariaDBParser.JSON_ARRAY_APPEND:
				case MariaDBParser.JSON_ARRAY_INSERT:
				case MariaDBParser.JSON_CONTAINS:
				case MariaDBParser.JSON_CONTAINS_PATH:
				case MariaDBParser.JSON_DEPTH:
				case MariaDBParser.JSON_EXTRACT:
				case MariaDBParser.JSON_INSERT:
				case MariaDBParser.JSON_KEYS:
				case MariaDBParser.JSON_LENGTH:
				case MariaDBParser.JSON_MERGE:
				case MariaDBParser.JSON_MERGE_PATCH:
				case MariaDBParser.JSON_MERGE_PRESERVE:
				case MariaDBParser.JSON_OBJECT:
				case MariaDBParser.JSON_OBJECTAGG:
				case MariaDBParser.JSON_OVERLAPS:
				case MariaDBParser.JSON_PRETTY:
				case MariaDBParser.JSON_QUOTE:
				case MariaDBParser.JSON_REMOVE:
				case MariaDBParser.JSON_REPLACE:
				case MariaDBParser.JSON_SCHEMA_VALID:
				case MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT:
				case MariaDBParser.JSON_SEARCH:
				case MariaDBParser.JSON_SET:
				case MariaDBParser.JSON_STORAGE_FREE:
				case MariaDBParser.JSON_STORAGE_SIZE:
				case MariaDBParser.JSON_TABLE:
				case MariaDBParser.JSON_TYPE:
				case MariaDBParser.JSON_UNQUOTE:
				case MariaDBParser.JSON_VALID:
				case MariaDBParser.JSON_VALUE:
				case MariaDBParser.NESTED:
				case MariaDBParser.ORDINALITY:
				case MariaDBParser.PATH:
				case MariaDBParser.AVG:
				case MariaDBParser.BIT_AND:
				case MariaDBParser.BIT_OR:
				case MariaDBParser.BIT_XOR:
				case MariaDBParser.COUNT:
				case MariaDBParser.CUME_DIST:
				case MariaDBParser.DENSE_RANK:
				case MariaDBParser.FIRST_VALUE:
				case MariaDBParser.GROUP_CONCAT:
				case MariaDBParser.LAG:
				case MariaDBParser.LAST_VALUE:
				case MariaDBParser.LEAD:
				case MariaDBParser.MAX:
				case MariaDBParser.MIN:
				case MariaDBParser.NTILE:
				case MariaDBParser.NTH_VALUE:
				case MariaDBParser.PERCENT_RANK:
				case MariaDBParser.RANK:
				case MariaDBParser.ROW_NUMBER:
				case MariaDBParser.STD:
				case MariaDBParser.STDDEV:
				case MariaDBParser.STDDEV_POP:
				case MariaDBParser.STDDEV_SAMP:
				case MariaDBParser.SUM:
				case MariaDBParser.VAR_POP:
				case MariaDBParser.VAR_SAMP:
				case MariaDBParser.VARIANCE:
				case MariaDBParser.CURRENT_DATE:
				case MariaDBParser.CURRENT_TIME:
				case MariaDBParser.CURRENT_TIMESTAMP:
				case MariaDBParser.LOCALTIME:
				case MariaDBParser.CURDATE:
				case MariaDBParser.CURTIME:
				case MariaDBParser.DATE_ADD:
				case MariaDBParser.DATE_SUB:
				case MariaDBParser.LOCALTIMESTAMP:
				case MariaDBParser.NOW:
				case MariaDBParser.POSITION:
				case MariaDBParser.SUBSTR:
				case MariaDBParser.SUBSTRING:
				case MariaDBParser.SYSDATE:
				case MariaDBParser.TRIM:
				case MariaDBParser.UTC_DATE:
				case MariaDBParser.UTC_TIME:
				case MariaDBParser.UTC_TIMESTAMP:
				case MariaDBParser.ACCOUNT:
				case MariaDBParser.ACTION:
				case MariaDBParser.AFTER:
				case MariaDBParser.AGGREGATE:
				case MariaDBParser.ALGORITHM:
				case MariaDBParser.ANY:
				case MariaDBParser.AT:
				case MariaDBParser.AUTHORS:
				case MariaDBParser.AUTOCOMMIT:
				case MariaDBParser.AUTOEXTEND_SIZE:
				case MariaDBParser.AUTO_INCREMENT:
				case MariaDBParser.AVG_ROW_LENGTH:
				case MariaDBParser.BEGIN:
				case MariaDBParser.BINLOG:
				case MariaDBParser.BIT:
				case MariaDBParser.BLOCK:
				case MariaDBParser.BOOL:
				case MariaDBParser.BOOLEAN:
				case MariaDBParser.BTREE:
				case MariaDBParser.CACHE:
				case MariaDBParser.CASCADED:
				case MariaDBParser.CHAIN:
				case MariaDBParser.CHANGED:
				case MariaDBParser.CHANNEL:
				case MariaDBParser.CHECKSUM:
				case MariaDBParser.PAGE_CHECKSUM:
				case MariaDBParser.CIPHER:
				case MariaDBParser.CLASS_ORIGIN:
				case MariaDBParser.CLIENT:
				case MariaDBParser.CLOSE:
				case MariaDBParser.CLUSTERING:
				case MariaDBParser.COALESCE:
				case MariaDBParser.CODE:
				case MariaDBParser.COLUMNS:
				case MariaDBParser.COLUMN_FORMAT:
				case MariaDBParser.COLUMN_NAME:
				case MariaDBParser.COMMENT:
				case MariaDBParser.COMMIT:
				case MariaDBParser.COMPACT:
				case MariaDBParser.COMPLETION:
				case MariaDBParser.COMPRESSED:
				case MariaDBParser.COMPRESSION:
				case MariaDBParser.CONCURRENT:
				case MariaDBParser.CONNECT:
				case MariaDBParser.CONNECTION:
				case MariaDBParser.CONSISTENT:
				case MariaDBParser.CONSTRAINT_CATALOG:
				case MariaDBParser.CONSTRAINT_SCHEMA:
				case MariaDBParser.CONSTRAINT_NAME:
				case MariaDBParser.CONTAINS:
				case MariaDBParser.CONTEXT:
				case MariaDBParser.CONTRIBUTORS:
				case MariaDBParser.COPY:
				case MariaDBParser.CPU:
				case MariaDBParser.CYCLE:
				case MariaDBParser.CURSOR_NAME:
				case MariaDBParser.DATA:
				case MariaDBParser.DATAFILE:
				case MariaDBParser.DEALLOCATE:
				case MariaDBParser.DEFAULT_AUTH:
				case MariaDBParser.DEFINER:
				case MariaDBParser.DELAY_KEY_WRITE:
				case MariaDBParser.DES_KEY_FILE:
				case MariaDBParser.DIRECTORY:
				case MariaDBParser.DISABLE:
				case MariaDBParser.DISCARD:
				case MariaDBParser.DISK:
				case MariaDBParser.DO:
				case MariaDBParser.DUMPFILE:
				case MariaDBParser.DUPLICATE:
				case MariaDBParser.DYNAMIC:
				case MariaDBParser.ENABLE:
				case MariaDBParser.ENCRYPTED:
				case MariaDBParser.ENCRYPTION:
				case MariaDBParser.ENCRYPTION_KEY_ID:
				case MariaDBParser.END:
				case MariaDBParser.ENDS:
				case MariaDBParser.ENGINE:
				case MariaDBParser.ENGINES:
				case MariaDBParser.ERROR:
				case MariaDBParser.ERRORS:
				case MariaDBParser.ESCAPE:
				case MariaDBParser.EVEN:
				case MariaDBParser.EVENT:
				case MariaDBParser.EVENTS:
				case MariaDBParser.EVERY:
				case MariaDBParser.EXCHANGE:
				case MariaDBParser.EXCLUSIVE:
				case MariaDBParser.EXPIRE:
				case MariaDBParser.EXPORT:
				case MariaDBParser.EXTENDED:
				case MariaDBParser.EXTENT_SIZE:
				case MariaDBParser.FAILED_LOGIN_ATTEMPTS:
				case MariaDBParser.FAST:
				case MariaDBParser.FAULTS:
				case MariaDBParser.FIELDS:
				case MariaDBParser.FILE_BLOCK_SIZE:
				case MariaDBParser.FILTER:
				case MariaDBParser.FIRST:
				case MariaDBParser.FIXED:
				case MariaDBParser.FLUSH:
				case MariaDBParser.FOLLOWS:
				case MariaDBParser.FOUND:
				case MariaDBParser.FULL:
				case MariaDBParser.FUNCTION:
				case MariaDBParser.GENERAL:
				case MariaDBParser.GLOBAL:
				case MariaDBParser.GRANTS:
				case MariaDBParser.GROUP_REPLICATION:
				case MariaDBParser.HANDLER:
				case MariaDBParser.HASH:
				case MariaDBParser.HELP:
				case MariaDBParser.HISTORY:
				case MariaDBParser.HOST:
				case MariaDBParser.HOSTS:
				case MariaDBParser.IDENTIFIED:
				case MariaDBParser.IGNORE_SERVER_IDS:
				case MariaDBParser.IMPORT:
				case MariaDBParser.INCREMENT:
				case MariaDBParser.INDEXES:
				case MariaDBParser.INITIAL_SIZE:
				case MariaDBParser.INPLACE:
				case MariaDBParser.INSERT_METHOD:
				case MariaDBParser.INSTALL:
				case MariaDBParser.INSTANCE:
				case MariaDBParser.INSTANT:
				case MariaDBParser.INVISIBLE:
				case MariaDBParser.INVOKER:
				case MariaDBParser.IO:
				case MariaDBParser.IO_THREAD:
				case MariaDBParser.IPC:
				case MariaDBParser.ISOLATION:
				case MariaDBParser.ISSUER:
				case MariaDBParser.JSON:
				case MariaDBParser.KEY_BLOCK_SIZE:
				case MariaDBParser.LANGUAGE:
				case MariaDBParser.LAST:
				case MariaDBParser.LEAVES:
				case MariaDBParser.LESS:
				case MariaDBParser.LEVEL:
				case MariaDBParser.LIST:
				case MariaDBParser.LOCAL:
				case MariaDBParser.LOCALES:
				case MariaDBParser.LOGFILE:
				case MariaDBParser.LOGS:
				case MariaDBParser.MASTER:
				case MariaDBParser.MASTER_AUTO_POSITION:
				case MariaDBParser.MASTER_CONNECT_RETRY:
				case MariaDBParser.MASTER_DELAY:
				case MariaDBParser.MASTER_HEARTBEAT_PERIOD:
				case MariaDBParser.MASTER_HOST:
				case MariaDBParser.MASTER_LOG_FILE:
				case MariaDBParser.MASTER_LOG_POS:
				case MariaDBParser.MASTER_PASSWORD:
				case MariaDBParser.MASTER_PORT:
				case MariaDBParser.MASTER_RETRY_COUNT:
				case MariaDBParser.MASTER_SSL:
				case MariaDBParser.MASTER_SSL_CA:
				case MariaDBParser.MASTER_SSL_CAPATH:
				case MariaDBParser.MASTER_SSL_CERT:
				case MariaDBParser.MASTER_SSL_CIPHER:
				case MariaDBParser.MASTER_SSL_CRL:
				case MariaDBParser.MASTER_SSL_CRLPATH:
				case MariaDBParser.MASTER_SSL_KEY:
				case MariaDBParser.MASTER_TLS_VERSION:
				case MariaDBParser.MASTER_USER:
				case MariaDBParser.MAX_CONNECTIONS_PER_HOUR:
				case MariaDBParser.MAX_QUERIES_PER_HOUR:
				case MariaDBParser.MAX_ROWS:
				case MariaDBParser.MAX_SIZE:
				case MariaDBParser.MAX_UPDATES_PER_HOUR:
				case MariaDBParser.MAX_USER_CONNECTIONS:
				case MariaDBParser.MEDIUM:
				case MariaDBParser.MEMBER:
				case MariaDBParser.MERGE:
				case MariaDBParser.MESSAGE_TEXT:
				case MariaDBParser.MID:
				case MariaDBParser.MIGRATE:
				case MariaDBParser.MIN_ROWS:
				case MariaDBParser.MODE:
				case MariaDBParser.MODIFY:
				case MariaDBParser.MUTEX:
				case MariaDBParser.MYSQL:
				case MariaDBParser.MYSQL_ERRNO:
				case MariaDBParser.NAME:
				case MariaDBParser.NAMES:
				case MariaDBParser.NCHAR:
				case MariaDBParser.NEVER:
				case MariaDBParser.NEXT:
				case MariaDBParser.NO:
				case MariaDBParser.NOCACHE:
				case MariaDBParser.NOCOPY:
				case MariaDBParser.NOCYCLE:
				case MariaDBParser.NOMAXVALUE:
				case MariaDBParser.NOMINVALUE:
				case MariaDBParser.NOWAIT:
				case MariaDBParser.NODEGROUP:
				case MariaDBParser.NONE:
				case MariaDBParser.ODBC:
				case MariaDBParser.OFFLINE:
				case MariaDBParser.OFFSET:
				case MariaDBParser.OF:
				case MariaDBParser.OJ:
				case MariaDBParser.OLD_PASSWORD:
				case MariaDBParser.ONE:
				case MariaDBParser.ONLINE:
				case MariaDBParser.ONLY:
				case MariaDBParser.OPEN:
				case MariaDBParser.OPTIMIZER_COSTS:
				case MariaDBParser.OPTIONS:
				case MariaDBParser.OWNER:
				case MariaDBParser.PACK_KEYS:
				case MariaDBParser.PAGE:
				case MariaDBParser.PARSER:
				case MariaDBParser.PARTIAL:
				case MariaDBParser.PARTITIONING:
				case MariaDBParser.PARTITIONS:
				case MariaDBParser.PASSWORD:
				case MariaDBParser.PASSWORD_LOCK_TIME:
				case MariaDBParser.PHASE:
				case MariaDBParser.PLUGIN:
				case MariaDBParser.PLUGIN_DIR:
				case MariaDBParser.PLUGINS:
				case MariaDBParser.PORT:
				case MariaDBParser.PRECEDES:
				case MariaDBParser.PREPARE:
				case MariaDBParser.PRESERVE:
				case MariaDBParser.PREV:
				case MariaDBParser.PROCESSLIST:
				case MariaDBParser.PROFILE:
				case MariaDBParser.PROFILES:
				case MariaDBParser.PROXY:
				case MariaDBParser.QUERY:
				case MariaDBParser.QUERY_RESPONSE_TIME:
				case MariaDBParser.QUICK:
				case MariaDBParser.REBUILD:
				case MariaDBParser.RECOVER:
				case MariaDBParser.RECURSIVE:
				case MariaDBParser.REDO_BUFFER_SIZE:
				case MariaDBParser.REDUNDANT:
				case MariaDBParser.RELAY:
				case MariaDBParser.RELAY_LOG_FILE:
				case MariaDBParser.RELAY_LOG_POS:
				case MariaDBParser.RELAYLOG:
				case MariaDBParser.REMOVE:
				case MariaDBParser.REORGANIZE:
				case MariaDBParser.REPAIR:
				case MariaDBParser.REPLICATE_DO_DB:
				case MariaDBParser.REPLICATE_DO_TABLE:
				case MariaDBParser.REPLICATE_IGNORE_DB:
				case MariaDBParser.REPLICATE_IGNORE_TABLE:
				case MariaDBParser.REPLICATE_REWRITE_DB:
				case MariaDBParser.REPLICATE_WILD_DO_TABLE:
				case MariaDBParser.REPLICATE_WILD_IGNORE_TABLE:
				case MariaDBParser.REPLICATION:
				case MariaDBParser.RESET:
				case MariaDBParser.RESTART:
				case MariaDBParser.RESUME:
				case MariaDBParser.RETURNED_SQLSTATE:
				case MariaDBParser.RETURNS:
				case MariaDBParser.REUSE:
				case MariaDBParser.ROLE:
				case MariaDBParser.ROLLBACK:
				case MariaDBParser.ROLLUP:
				case MariaDBParser.ROTATE:
				case MariaDBParser.ROW:
				case MariaDBParser.ROWS:
				case MariaDBParser.ROW_FORMAT:
				case MariaDBParser.RTREE:
				case MariaDBParser.SAVEPOINT:
				case MariaDBParser.SCHEDULE:
				case MariaDBParser.SECURITY:
				case MariaDBParser.SEQUENCE:
				case MariaDBParser.SERVER:
				case MariaDBParser.SESSION:
				case MariaDBParser.SHARE:
				case MariaDBParser.SHARED:
				case MariaDBParser.SIGNED:
				case MariaDBParser.SIMPLE:
				case MariaDBParser.SLAVE:
				case MariaDBParser.SLAVES:
				case MariaDBParser.SLOW:
				case MariaDBParser.SNAPSHOT:
				case MariaDBParser.SOCKET:
				case MariaDBParser.SOME:
				case MariaDBParser.SONAME:
				case MariaDBParser.SOUNDS:
				case MariaDBParser.SOURCE:
				case MariaDBParser.SQL_AFTER_GTIDS:
				case MariaDBParser.SQL_AFTER_MTS_GAPS:
				case MariaDBParser.SQL_BEFORE_GTIDS:
				case MariaDBParser.SQL_BUFFER_RESULT:
				case MariaDBParser.SQL_CACHE:
				case MariaDBParser.SQL_NO_CACHE:
				case MariaDBParser.SQL_THREAD:
				case MariaDBParser.START:
				case MariaDBParser.STARTS:
				case MariaDBParser.STATS_AUTO_RECALC:
				case MariaDBParser.STATS_PERSISTENT:
				case MariaDBParser.STATS_SAMPLE_PAGES:
				case MariaDBParser.STATUS:
				case MariaDBParser.STOP:
				case MariaDBParser.STORAGE:
				case MariaDBParser.STRING:
				case MariaDBParser.SUBCLASS_ORIGIN:
				case MariaDBParser.SUBJECT:
				case MariaDBParser.SUBPARTITION:
				case MariaDBParser.SUBPARTITIONS:
				case MariaDBParser.SUSPEND:
				case MariaDBParser.SWAPS:
				case MariaDBParser.SWITCHES:
				case MariaDBParser.TABLE_NAME:
				case MariaDBParser.TABLESPACE:
				case MariaDBParser.TABLE_TYPE:
				case MariaDBParser.TEMPORARY:
				case MariaDBParser.TEMPTABLE:
				case MariaDBParser.THAN:
				case MariaDBParser.TRADITIONAL:
				case MariaDBParser.TRANSACTION:
				case MariaDBParser.TRANSACTIONAL:
				case MariaDBParser.TRIGGERS:
				case MariaDBParser.TRUNCATE:
				case MariaDBParser.TYPES:
				case MariaDBParser.UNBOUNDED:
				case MariaDBParser.UNDEFINED:
				case MariaDBParser.UNDOFILE:
				case MariaDBParser.UNDO_BUFFER_SIZE:
				case MariaDBParser.UNINSTALL:
				case MariaDBParser.UNKNOWN:
				case MariaDBParser.UNTIL:
				case MariaDBParser.UPGRADE:
				case MariaDBParser.USER:
				case MariaDBParser.USE_FRM:
				case MariaDBParser.USER_RESOURCES:
				case MariaDBParser.VALIDATION:
				case MariaDBParser.VALUE:
				case MariaDBParser.VARIABLES:
				case MariaDBParser.VIEW:
				case MariaDBParser.VIRTUAL:
				case MariaDBParser.VISIBLE:
				case MariaDBParser.WAIT:
				case MariaDBParser.WARNINGS:
				case MariaDBParser.WITHOUT:
				case MariaDBParser.WORK:
				case MariaDBParser.WRAPPER:
				case MariaDBParser.WSREP_MEMBERSHIP:
				case MariaDBParser.WSREP_STATUS:
				case MariaDBParser.X509:
				case MariaDBParser.XA:
				case MariaDBParser.XML:
				case MariaDBParser.EUR:
				case MariaDBParser.USA:
				case MariaDBParser.JIS:
				case MariaDBParser.ISO:
				case MariaDBParser.INTERNAL:
				case MariaDBParser.QUARTER:
				case MariaDBParser.MONTH:
				case MariaDBParser.DAY:
				case MariaDBParser.HOUR:
				case MariaDBParser.MINUTE:
				case MariaDBParser.WEEK:
				case MariaDBParser.SECOND:
				case MariaDBParser.MICROSECOND:
				case MariaDBParser.USER_STATISTICS:
				case MariaDBParser.CLIENT_STATISTICS:
				case MariaDBParser.INDEX_STATISTICS:
				case MariaDBParser.TABLE_STATISTICS:
				case MariaDBParser.ADMIN:
				case MariaDBParser.AUDIT_ADMIN:
				case MariaDBParser.BACKUP_ADMIN:
				case MariaDBParser.BINLOG_ADMIN:
				case MariaDBParser.BINLOG_ENCRYPTION_ADMIN:
				case MariaDBParser.CLONE_ADMIN:
				case MariaDBParser.CONNECTION_ADMIN:
				case MariaDBParser.ENCRYPTION_KEY_ADMIN:
				case MariaDBParser.EXECUTE:
				case MariaDBParser.FILE:
				case MariaDBParser.FIREWALL_ADMIN:
				case MariaDBParser.FIREWALL_USER:
				case MariaDBParser.GROUP_REPLICATION_ADMIN:
				case MariaDBParser.INNODB_REDO_LOG_ARCHIVE:
				case MariaDBParser.INVOKE:
				case MariaDBParser.LAMBDA:
				case MariaDBParser.NDB_STORED_USER:
				case MariaDBParser.PASSWORDLESS_USER_ADMIN:
				case MariaDBParser.PERSIST_RO_VARIABLES_ADMIN:
				case MariaDBParser.PRIVILEGES:
				case MariaDBParser.PROCESS:
				case MariaDBParser.RELOAD:
				case MariaDBParser.REPLICATION_APPLIER:
				case MariaDBParser.REPLICATION_SLAVE_ADMIN:
				case MariaDBParser.RESOURCE_GROUP_ADMIN:
				case MariaDBParser.RESOURCE_GROUP_USER:
				case MariaDBParser.ROLE_ADMIN:
				case MariaDBParser.ROUTINE:
				case MariaDBParser.S3:
				case MariaDBParser.SESSION_VARIABLES_ADMIN:
				case MariaDBParser.SET_USER_ID:
				case MariaDBParser.SHOW_ROUTINE:
				case MariaDBParser.SHUTDOWN:
				case MariaDBParser.SUPER:
				case MariaDBParser.SYSTEM_VARIABLES_ADMIN:
				case MariaDBParser.TABLES:
				case MariaDBParser.TABLE_ENCRYPTION_ADMIN:
				case MariaDBParser.VERSION_TOKEN_ADMIN:
				case MariaDBParser.XA_RECOVER_ADMIN:
				case MariaDBParser.ARMSCII8:
				case MariaDBParser.ASCII:
				case MariaDBParser.BIG5:
				case MariaDBParser.CP1250:
				case MariaDBParser.CP1251:
				case MariaDBParser.CP1256:
				case MariaDBParser.CP1257:
				case MariaDBParser.CP850:
				case MariaDBParser.CP852:
				case MariaDBParser.CP866:
				case MariaDBParser.CP932:
				case MariaDBParser.DEC8:
				case MariaDBParser.EUCJPMS:
				case MariaDBParser.EUCKR:
				case MariaDBParser.GB18030:
				case MariaDBParser.GB2312:
				case MariaDBParser.GBK:
				case MariaDBParser.GEOSTD8:
				case MariaDBParser.GREEK:
				case MariaDBParser.HEBREW:
				case MariaDBParser.HP8:
				case MariaDBParser.KEYBCS2:
				case MariaDBParser.KOI8R:
				case MariaDBParser.KOI8U:
				case MariaDBParser.LATIN1:
				case MariaDBParser.LATIN2:
				case MariaDBParser.LATIN5:
				case MariaDBParser.LATIN7:
				case MariaDBParser.MACCE:
				case MariaDBParser.MACROMAN:
				case MariaDBParser.SJIS:
				case MariaDBParser.SWE7:
				case MariaDBParser.TIS620:
				case MariaDBParser.UCS2:
				case MariaDBParser.UJIS:
				case MariaDBParser.UTF16:
				case MariaDBParser.UTF16LE:
				case MariaDBParser.UTF32:
				case MariaDBParser.UTF8:
				case MariaDBParser.UTF8MB3:
				case MariaDBParser.UTF8MB4:
				case MariaDBParser.ARCHIVE:
				case MariaDBParser.BLACKHOLE:
				case MariaDBParser.CSV:
				case MariaDBParser.FEDERATED:
				case MariaDBParser.INNODB:
				case MariaDBParser.MEMORY:
				case MariaDBParser.MRG_MYISAM:
				case MariaDBParser.MYISAM:
				case MariaDBParser.NDB:
				case MariaDBParser.NDBCLUSTER:
				case MariaDBParser.PERFORMANCE_SCHEMA:
				case MariaDBParser.TOKUDB:
				case MariaDBParser.REPEATABLE:
				case MariaDBParser.COMMITTED:
				case MariaDBParser.UNCOMMITTED:
				case MariaDBParser.SERIALIZABLE:
				case MariaDBParser.GEOMETRYCOLLECTION:
				case MariaDBParser.LINESTRING:
				case MariaDBParser.MULTILINESTRING:
				case MariaDBParser.MULTIPOINT:
				case MariaDBParser.MULTIPOLYGON:
				case MariaDBParser.POINT:
				case MariaDBParser.POLYGON:
				case MariaDBParser.ABS:
				case MariaDBParser.ACOS:
				case MariaDBParser.ADDDATE:
				case MariaDBParser.ADDTIME:
				case MariaDBParser.AES_DECRYPT:
				case MariaDBParser.AES_ENCRYPT:
				case MariaDBParser.AREA:
				case MariaDBParser.ASBINARY:
				case MariaDBParser.ASIN:
				case MariaDBParser.ASTEXT:
				case MariaDBParser.ASWKB:
				case MariaDBParser.ASWKT:
				case MariaDBParser.ASYMMETRIC_DECRYPT:
				case MariaDBParser.ASYMMETRIC_DERIVE:
				case MariaDBParser.ASYMMETRIC_ENCRYPT:
				case MariaDBParser.ASYMMETRIC_SIGN:
				case MariaDBParser.ASYMMETRIC_VERIFY:
				case MariaDBParser.ATAN:
				case MariaDBParser.ATAN2:
				case MariaDBParser.BENCHMARK:
				case MariaDBParser.BIN:
				case MariaDBParser.BIT_COUNT:
				case MariaDBParser.BIT_LENGTH:
				case MariaDBParser.BUFFER:
				case MariaDBParser.CATALOG_NAME:
				case MariaDBParser.CEIL:
				case MariaDBParser.CEILING:
				case MariaDBParser.CENTROID:
				case MariaDBParser.CHARACTER_LENGTH:
				case MariaDBParser.CHARSET:
				case MariaDBParser.CHAR_LENGTH:
				case MariaDBParser.COERCIBILITY:
				case MariaDBParser.COLLATION:
				case MariaDBParser.COMPRESS:
				case MariaDBParser.CONCAT:
				case MariaDBParser.CONCAT_WS:
				case MariaDBParser.CONNECTION_ID:
				case MariaDBParser.CONV:
				case MariaDBParser.CONVERT_TZ:
				case MariaDBParser.COS:
				case MariaDBParser.COT:
				case MariaDBParser.CRC32:
				case MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY:
				case MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY:
				case MariaDBParser.CREATE_DH_PARAMETERS:
				case MariaDBParser.CREATE_DIGEST:
				case MariaDBParser.CROSSES:
				case MariaDBParser.DATEDIFF:
				case MariaDBParser.DATE_FORMAT:
				case MariaDBParser.DAYNAME:
				case MariaDBParser.DAYOFMONTH:
				case MariaDBParser.DAYOFWEEK:
				case MariaDBParser.DAYOFYEAR:
				case MariaDBParser.DECODE:
				case MariaDBParser.DEGREES:
				case MariaDBParser.DES_DECRYPT:
				case MariaDBParser.DES_ENCRYPT:
				case MariaDBParser.DIMENSION:
				case MariaDBParser.DISJOINT:
				case MariaDBParser.ELT:
				case MariaDBParser.ENCODE:
				case MariaDBParser.ENCRYPT:
				case MariaDBParser.ENDPOINT:
				case MariaDBParser.ENGINE_ATTRIBUTE:
				case MariaDBParser.ENVELOPE:
				case MariaDBParser.EQUALS:
				case MariaDBParser.EXP:
				case MariaDBParser.EXPORT_SET:
				case MariaDBParser.EXTERIORRING:
				case MariaDBParser.EXTRACTVALUE:
				case MariaDBParser.FIELD:
				case MariaDBParser.FIND_IN_SET:
				case MariaDBParser.FLOOR:
				case MariaDBParser.FORMAT:
				case MariaDBParser.FOUND_ROWS:
				case MariaDBParser.FROM_BASE64:
				case MariaDBParser.FROM_DAYS:
				case MariaDBParser.FROM_UNIXTIME:
				case MariaDBParser.GEOMCOLLFROMTEXT:
				case MariaDBParser.GEOMCOLLFROMWKB:
				case MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT:
				case MariaDBParser.GEOMETRYCOLLECTIONFROMWKB:
				case MariaDBParser.GEOMETRYFROMTEXT:
				case MariaDBParser.GEOMETRYFROMWKB:
				case MariaDBParser.GEOMETRYN:
				case MariaDBParser.GEOMETRYTYPE:
				case MariaDBParser.GEOMFROMTEXT:
				case MariaDBParser.GEOMFROMWKB:
				case MariaDBParser.GET_FORMAT:
				case MariaDBParser.GET_LOCK:
				case MariaDBParser.GLENGTH:
				case MariaDBParser.GREATEST:
				case MariaDBParser.GTID_SUBSET:
				case MariaDBParser.GTID_SUBTRACT:
				case MariaDBParser.HEX:
				case MariaDBParser.IFNULL:
				case MariaDBParser.INET6_ATON:
				case MariaDBParser.INET6_NTOA:
				case MariaDBParser.INET_ATON:
				case MariaDBParser.INET_NTOA:
				case MariaDBParser.INSTR:
				case MariaDBParser.INTERIORRINGN:
				case MariaDBParser.INTERSECTS:
				case MariaDBParser.ISCLOSED:
				case MariaDBParser.ISEMPTY:
				case MariaDBParser.ISNULL:
				case MariaDBParser.ISSIMPLE:
				case MariaDBParser.IS_FREE_LOCK:
				case MariaDBParser.IS_IPV4:
				case MariaDBParser.IS_IPV4_COMPAT:
				case MariaDBParser.IS_IPV4_MAPPED:
				case MariaDBParser.IS_IPV6:
				case MariaDBParser.IS_USED_LOCK:
				case MariaDBParser.LAST_INSERT_ID:
				case MariaDBParser.LCASE:
				case MariaDBParser.LEAST:
				case MariaDBParser.LENGTH:
				case MariaDBParser.LINEFROMTEXT:
				case MariaDBParser.LINEFROMWKB:
				case MariaDBParser.LINESTRINGFROMTEXT:
				case MariaDBParser.LINESTRINGFROMWKB:
				case MariaDBParser.LN:
				case MariaDBParser.LOAD_FILE:
				case MariaDBParser.LOCATE:
				case MariaDBParser.LOG:
				case MariaDBParser.LOG10:
				case MariaDBParser.LOG2:
				case MariaDBParser.LOWER:
				case MariaDBParser.LPAD:
				case MariaDBParser.LTRIM:
				case MariaDBParser.MAKEDATE:
				case MariaDBParser.MAKETIME:
				case MariaDBParser.MAKE_SET:
				case MariaDBParser.MASTER_POS_WAIT:
				case MariaDBParser.MBRCONTAINS:
				case MariaDBParser.MBRDISJOINT:
				case MariaDBParser.MBREQUAL:
				case MariaDBParser.MBRINTERSECTS:
				case MariaDBParser.MBROVERLAPS:
				case MariaDBParser.MBRTOUCHES:
				case MariaDBParser.MBRWITHIN:
				case MariaDBParser.MD5:
				case MariaDBParser.MLINEFROMTEXT:
				case MariaDBParser.MLINEFROMWKB:
				case MariaDBParser.MONTHNAME:
				case MariaDBParser.MPOINTFROMTEXT:
				case MariaDBParser.MPOINTFROMWKB:
				case MariaDBParser.MPOLYFROMTEXT:
				case MariaDBParser.MPOLYFROMWKB:
				case MariaDBParser.MULTILINESTRINGFROMTEXT:
				case MariaDBParser.MULTILINESTRINGFROMWKB:
				case MariaDBParser.MULTIPOINTFROMTEXT:
				case MariaDBParser.MULTIPOINTFROMWKB:
				case MariaDBParser.MULTIPOLYGONFROMTEXT:
				case MariaDBParser.MULTIPOLYGONFROMWKB:
				case MariaDBParser.NAME_CONST:
				case MariaDBParser.NULLIF:
				case MariaDBParser.NUMGEOMETRIES:
				case MariaDBParser.NUMINTERIORRINGS:
				case MariaDBParser.NUMPOINTS:
				case MariaDBParser.OCT:
				case MariaDBParser.OCTET_LENGTH:
				case MariaDBParser.ORD:
				case MariaDBParser.OVERLAPS:
				case MariaDBParser.PERIOD_ADD:
				case MariaDBParser.PERIOD_DIFF:
				case MariaDBParser.PI:
				case MariaDBParser.POINTFROMTEXT:
				case MariaDBParser.POINTFROMWKB:
				case MariaDBParser.POINTN:
				case MariaDBParser.POLYFROMTEXT:
				case MariaDBParser.POLYFROMWKB:
				case MariaDBParser.POLYGONFROMTEXT:
				case MariaDBParser.POLYGONFROMWKB:
				case MariaDBParser.POW:
				case MariaDBParser.POWER:
				case MariaDBParser.QUOTE:
				case MariaDBParser.RADIANS:
				case MariaDBParser.RAND:
				case MariaDBParser.RANDOM_BYTES:
				case MariaDBParser.RELEASE_LOCK:
				case MariaDBParser.REVERSE:
				case MariaDBParser.ROUND:
				case MariaDBParser.ROW_COUNT:
				case MariaDBParser.RPAD:
				case MariaDBParser.RTRIM:
				case MariaDBParser.SEC_TO_TIME:
				case MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE:
				case MariaDBParser.SESSION_USER:
				case MariaDBParser.SHA:
				case MariaDBParser.SHA1:
				case MariaDBParser.SHA2:
				case MariaDBParser.SCHEMA_NAME:
				case MariaDBParser.SIGN:
				case MariaDBParser.SIN:
				case MariaDBParser.SLEEP:
				case MariaDBParser.SOUNDEX:
				case MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS:
				case MariaDBParser.SQRT:
				case MariaDBParser.SRID:
				case MariaDBParser.STARTPOINT:
				case MariaDBParser.STRCMP:
				case MariaDBParser.STR_TO_DATE:
				case MariaDBParser.ST_AREA:
				case MariaDBParser.ST_ASBINARY:
				case MariaDBParser.ST_ASTEXT:
				case MariaDBParser.ST_ASWKB:
				case MariaDBParser.ST_ASWKT:
				case MariaDBParser.ST_BUFFER:
				case MariaDBParser.ST_CENTROID:
				case MariaDBParser.ST_CONTAINS:
				case MariaDBParser.ST_CROSSES:
				case MariaDBParser.ST_DIFFERENCE:
				case MariaDBParser.ST_DIMENSION:
				case MariaDBParser.ST_DISJOINT:
				case MariaDBParser.ST_DISTANCE:
				case MariaDBParser.ST_ENDPOINT:
				case MariaDBParser.ST_ENVELOPE:
				case MariaDBParser.ST_EQUALS:
				case MariaDBParser.ST_EXTERIORRING:
				case MariaDBParser.ST_GEOMCOLLFROMTEXT:
				case MariaDBParser.ST_GEOMCOLLFROMTXT:
				case MariaDBParser.ST_GEOMCOLLFROMWKB:
				case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
				case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB:
				case MariaDBParser.ST_GEOMETRYFROMTEXT:
				case MariaDBParser.ST_GEOMETRYFROMWKB:
				case MariaDBParser.ST_GEOMETRYN:
				case MariaDBParser.ST_GEOMETRYTYPE:
				case MariaDBParser.ST_GEOMFROMTEXT:
				case MariaDBParser.ST_GEOMFROMWKB:
				case MariaDBParser.ST_INTERIORRINGN:
				case MariaDBParser.ST_INTERSECTION:
				case MariaDBParser.ST_INTERSECTS:
				case MariaDBParser.ST_ISCLOSED:
				case MariaDBParser.ST_ISEMPTY:
				case MariaDBParser.ST_ISSIMPLE:
				case MariaDBParser.ST_LINEFROMTEXT:
				case MariaDBParser.ST_LINEFROMWKB:
				case MariaDBParser.ST_LINESTRINGFROMTEXT:
				case MariaDBParser.ST_LINESTRINGFROMWKB:
				case MariaDBParser.ST_NUMGEOMETRIES:
				case MariaDBParser.ST_NUMINTERIORRING:
				case MariaDBParser.ST_NUMINTERIORRINGS:
				case MariaDBParser.ST_NUMPOINTS:
				case MariaDBParser.ST_OVERLAPS:
				case MariaDBParser.ST_POINTFROMTEXT:
				case MariaDBParser.ST_POINTFROMWKB:
				case MariaDBParser.ST_POINTN:
				case MariaDBParser.ST_POLYFROMTEXT:
				case MariaDBParser.ST_POLYFROMWKB:
				case MariaDBParser.ST_POLYGONFROMTEXT:
				case MariaDBParser.ST_POLYGONFROMWKB:
				case MariaDBParser.ST_SRID:
				case MariaDBParser.ST_STARTPOINT:
				case MariaDBParser.ST_SYMDIFFERENCE:
				case MariaDBParser.ST_TOUCHES:
				case MariaDBParser.ST_UNION:
				case MariaDBParser.ST_WITHIN:
				case MariaDBParser.ST_X:
				case MariaDBParser.ST_Y:
				case MariaDBParser.SUBDATE:
				case MariaDBParser.SUBSTRING_INDEX:
				case MariaDBParser.SUBTIME:
				case MariaDBParser.SYSTEM_USER:
				case MariaDBParser.TAN:
				case MariaDBParser.TIMEDIFF:
				case MariaDBParser.TIMESTAMPADD:
				case MariaDBParser.TIMESTAMPDIFF:
				case MariaDBParser.TIME_FORMAT:
				case MariaDBParser.TIME_TO_SEC:
				case MariaDBParser.TOUCHES:
				case MariaDBParser.TO_BASE64:
				case MariaDBParser.TO_DAYS:
				case MariaDBParser.TO_SECONDS:
				case MariaDBParser.UCASE:
				case MariaDBParser.UNCOMPRESS:
				case MariaDBParser.UNCOMPRESSED_LENGTH:
				case MariaDBParser.UNHEX:
				case MariaDBParser.UNIX_TIMESTAMP:
				case MariaDBParser.UPDATEXML:
				case MariaDBParser.UPPER:
				case MariaDBParser.UUID:
				case MariaDBParser.UUID_SHORT:
				case MariaDBParser.VALIDATE_PASSWORD_STRENGTH:
				case MariaDBParser.VERSION:
				case MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case MariaDBParser.WEEKDAY:
				case MariaDBParser.WEEKOFYEAR:
				case MariaDBParser.WEIGHT_STRING:
				case MariaDBParser.WITHIN:
				case MariaDBParser.YEARWEEK:
				case MariaDBParser.Y_FUNCTION:
				case MariaDBParser.X_FUNCTION:
				case MariaDBParser.VIA:
				case MariaDBParser.LASTVAL:
				case MariaDBParser.NEXTVAL:
				case MariaDBParser.SETVAL:
				case MariaDBParser.PREVIOUS:
				case MariaDBParser.PERSISTENT:
				case MariaDBParser.BINLOG_MONITOR:
				case MariaDBParser.BINLOG_REPLAY:
				case MariaDBParser.FEDERATED_ADMIN:
				case MariaDBParser.READ_ONLY_ADMIN:
				case MariaDBParser.REPLICA:
				case MariaDBParser.REPLICAS:
				case MariaDBParser.REPLICATION_MASTER_ADMIN:
				case MariaDBParser.MONITOR:
				case MariaDBParser.READ_ONLY:
				case MariaDBParser.REPLAY:
				case MariaDBParser.MOD:
				case MariaDBParser.CHARSET_REVERSE_QOUTE_STRING:
				case MariaDBParser.STRING_LITERAL:
				case MariaDBParser.ID:
					{
					this.state = 2993;
					this.uidList();
					}
					break;
				case MariaDBParser.ALL:
					{
					this.state = 2994;
					this.match(MariaDBParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2997;
				this.match(MariaDBParser.TABLESPACE);
				}
				break;
			case MariaDBParser.IMPORT:
				_localctx = new AlterByImportPartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2998;
				this.match(MariaDBParser.IMPORT);
				this.state = 2999;
				this.match(MariaDBParser.PARTITION);
				this.state = 3002;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.ATTRIBUTE:
				case MariaDBParser.BODY:
				case MariaDBParser.BUCKETS:
				case MariaDBParser.CONDITION:
				case MariaDBParser.CURRENT:
				case MariaDBParser.CURRENT_ROLE:
				case MariaDBParser.CURRENT_USER:
				case MariaDBParser.DATABASE:
				case MariaDBParser.DEFAULT:
				case MariaDBParser.DIAGNOSTICS:
				case MariaDBParser.EMPTY:
				case MariaDBParser.EXCEPT:
				case MariaDBParser.GROUP:
				case MariaDBParser.IF:
				case MariaDBParser.IGNORED:
				case MariaDBParser.INSERT:
				case MariaDBParser.LATERAL:
				case MariaDBParser.LEFT:
				case MariaDBParser.LOCKED:
				case MariaDBParser.MAXVALUE:
				case MariaDBParser.MINVALUE:
				case MariaDBParser.NUMBER:
				case MariaDBParser.OPTIONAL:
				case MariaDBParser.ORDER:
				case MariaDBParser.PRIMARY:
				case MariaDBParser.PACKAGE:
				case MariaDBParser.REPLACE:
				case MariaDBParser.RIGHT:
				case MariaDBParser.SCHEMA:
				case MariaDBParser.SKIP_:
				case MariaDBParser.STACKED:
				case MariaDBParser.STATEMENT:
				case MariaDBParser.DATE:
				case MariaDBParser.TIME:
				case MariaDBParser.TIMESTAMP:
				case MariaDBParser.DATETIME:
				case MariaDBParser.YEAR:
				case MariaDBParser.BINARY:
				case MariaDBParser.TEXT:
				case MariaDBParser.ENUM:
				case MariaDBParser.SERIAL:
				case MariaDBParser.JSON_ARRAY:
				case MariaDBParser.JSON_ARRAYAGG:
				case MariaDBParser.JSON_ARRAY_APPEND:
				case MariaDBParser.JSON_ARRAY_INSERT:
				case MariaDBParser.JSON_CONTAINS:
				case MariaDBParser.JSON_CONTAINS_PATH:
				case MariaDBParser.JSON_DEPTH:
				case MariaDBParser.JSON_EXTRACT:
				case MariaDBParser.JSON_INSERT:
				case MariaDBParser.JSON_KEYS:
				case MariaDBParser.JSON_LENGTH:
				case MariaDBParser.JSON_MERGE:
				case MariaDBParser.JSON_MERGE_PATCH:
				case MariaDBParser.JSON_MERGE_PRESERVE:
				case MariaDBParser.JSON_OBJECT:
				case MariaDBParser.JSON_OBJECTAGG:
				case MariaDBParser.JSON_OVERLAPS:
				case MariaDBParser.JSON_PRETTY:
				case MariaDBParser.JSON_QUOTE:
				case MariaDBParser.JSON_REMOVE:
				case MariaDBParser.JSON_REPLACE:
				case MariaDBParser.JSON_SCHEMA_VALID:
				case MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT:
				case MariaDBParser.JSON_SEARCH:
				case MariaDBParser.JSON_SET:
				case MariaDBParser.JSON_STORAGE_FREE:
				case MariaDBParser.JSON_STORAGE_SIZE:
				case MariaDBParser.JSON_TABLE:
				case MariaDBParser.JSON_TYPE:
				case MariaDBParser.JSON_UNQUOTE:
				case MariaDBParser.JSON_VALID:
				case MariaDBParser.JSON_VALUE:
				case MariaDBParser.NESTED:
				case MariaDBParser.ORDINALITY:
				case MariaDBParser.PATH:
				case MariaDBParser.AVG:
				case MariaDBParser.BIT_AND:
				case MariaDBParser.BIT_OR:
				case MariaDBParser.BIT_XOR:
				case MariaDBParser.COUNT:
				case MariaDBParser.CUME_DIST:
				case MariaDBParser.DENSE_RANK:
				case MariaDBParser.FIRST_VALUE:
				case MariaDBParser.GROUP_CONCAT:
				case MariaDBParser.LAG:
				case MariaDBParser.LAST_VALUE:
				case MariaDBParser.LEAD:
				case MariaDBParser.MAX:
				case MariaDBParser.MIN:
				case MariaDBParser.NTILE:
				case MariaDBParser.NTH_VALUE:
				case MariaDBParser.PERCENT_RANK:
				case MariaDBParser.RANK:
				case MariaDBParser.ROW_NUMBER:
				case MariaDBParser.STD:
				case MariaDBParser.STDDEV:
				case MariaDBParser.STDDEV_POP:
				case MariaDBParser.STDDEV_SAMP:
				case MariaDBParser.SUM:
				case MariaDBParser.VAR_POP:
				case MariaDBParser.VAR_SAMP:
				case MariaDBParser.VARIANCE:
				case MariaDBParser.CURRENT_DATE:
				case MariaDBParser.CURRENT_TIME:
				case MariaDBParser.CURRENT_TIMESTAMP:
				case MariaDBParser.LOCALTIME:
				case MariaDBParser.CURDATE:
				case MariaDBParser.CURTIME:
				case MariaDBParser.DATE_ADD:
				case MariaDBParser.DATE_SUB:
				case MariaDBParser.LOCALTIMESTAMP:
				case MariaDBParser.NOW:
				case MariaDBParser.POSITION:
				case MariaDBParser.SUBSTR:
				case MariaDBParser.SUBSTRING:
				case MariaDBParser.SYSDATE:
				case MariaDBParser.TRIM:
				case MariaDBParser.UTC_DATE:
				case MariaDBParser.UTC_TIME:
				case MariaDBParser.UTC_TIMESTAMP:
				case MariaDBParser.ACCOUNT:
				case MariaDBParser.ACTION:
				case MariaDBParser.AFTER:
				case MariaDBParser.AGGREGATE:
				case MariaDBParser.ALGORITHM:
				case MariaDBParser.ANY:
				case MariaDBParser.AT:
				case MariaDBParser.AUTHORS:
				case MariaDBParser.AUTOCOMMIT:
				case MariaDBParser.AUTOEXTEND_SIZE:
				case MariaDBParser.AUTO_INCREMENT:
				case MariaDBParser.AVG_ROW_LENGTH:
				case MariaDBParser.BEGIN:
				case MariaDBParser.BINLOG:
				case MariaDBParser.BIT:
				case MariaDBParser.BLOCK:
				case MariaDBParser.BOOL:
				case MariaDBParser.BOOLEAN:
				case MariaDBParser.BTREE:
				case MariaDBParser.CACHE:
				case MariaDBParser.CASCADED:
				case MariaDBParser.CHAIN:
				case MariaDBParser.CHANGED:
				case MariaDBParser.CHANNEL:
				case MariaDBParser.CHECKSUM:
				case MariaDBParser.PAGE_CHECKSUM:
				case MariaDBParser.CIPHER:
				case MariaDBParser.CLASS_ORIGIN:
				case MariaDBParser.CLIENT:
				case MariaDBParser.CLOSE:
				case MariaDBParser.CLUSTERING:
				case MariaDBParser.COALESCE:
				case MariaDBParser.CODE:
				case MariaDBParser.COLUMNS:
				case MariaDBParser.COLUMN_FORMAT:
				case MariaDBParser.COLUMN_NAME:
				case MariaDBParser.COMMENT:
				case MariaDBParser.COMMIT:
				case MariaDBParser.COMPACT:
				case MariaDBParser.COMPLETION:
				case MariaDBParser.COMPRESSED:
				case MariaDBParser.COMPRESSION:
				case MariaDBParser.CONCURRENT:
				case MariaDBParser.CONNECT:
				case MariaDBParser.CONNECTION:
				case MariaDBParser.CONSISTENT:
				case MariaDBParser.CONSTRAINT_CATALOG:
				case MariaDBParser.CONSTRAINT_SCHEMA:
				case MariaDBParser.CONSTRAINT_NAME:
				case MariaDBParser.CONTAINS:
				case MariaDBParser.CONTEXT:
				case MariaDBParser.CONTRIBUTORS:
				case MariaDBParser.COPY:
				case MariaDBParser.CPU:
				case MariaDBParser.CYCLE:
				case MariaDBParser.CURSOR_NAME:
				case MariaDBParser.DATA:
				case MariaDBParser.DATAFILE:
				case MariaDBParser.DEALLOCATE:
				case MariaDBParser.DEFAULT_AUTH:
				case MariaDBParser.DEFINER:
				case MariaDBParser.DELAY_KEY_WRITE:
				case MariaDBParser.DES_KEY_FILE:
				case MariaDBParser.DIRECTORY:
				case MariaDBParser.DISABLE:
				case MariaDBParser.DISCARD:
				case MariaDBParser.DISK:
				case MariaDBParser.DO:
				case MariaDBParser.DUMPFILE:
				case MariaDBParser.DUPLICATE:
				case MariaDBParser.DYNAMIC:
				case MariaDBParser.ENABLE:
				case MariaDBParser.ENCRYPTED:
				case MariaDBParser.ENCRYPTION:
				case MariaDBParser.ENCRYPTION_KEY_ID:
				case MariaDBParser.END:
				case MariaDBParser.ENDS:
				case MariaDBParser.ENGINE:
				case MariaDBParser.ENGINES:
				case MariaDBParser.ERROR:
				case MariaDBParser.ERRORS:
				case MariaDBParser.ESCAPE:
				case MariaDBParser.EVEN:
				case MariaDBParser.EVENT:
				case MariaDBParser.EVENTS:
				case MariaDBParser.EVERY:
				case MariaDBParser.EXCHANGE:
				case MariaDBParser.EXCLUSIVE:
				case MariaDBParser.EXPIRE:
				case MariaDBParser.EXPORT:
				case MariaDBParser.EXTENDED:
				case MariaDBParser.EXTENT_SIZE:
				case MariaDBParser.FAILED_LOGIN_ATTEMPTS:
				case MariaDBParser.FAST:
				case MariaDBParser.FAULTS:
				case MariaDBParser.FIELDS:
				case MariaDBParser.FILE_BLOCK_SIZE:
				case MariaDBParser.FILTER:
				case MariaDBParser.FIRST:
				case MariaDBParser.FIXED:
				case MariaDBParser.FLUSH:
				case MariaDBParser.FOLLOWS:
				case MariaDBParser.FOUND:
				case MariaDBParser.FULL:
				case MariaDBParser.FUNCTION:
				case MariaDBParser.GENERAL:
				case MariaDBParser.GLOBAL:
				case MariaDBParser.GRANTS:
				case MariaDBParser.GROUP_REPLICATION:
				case MariaDBParser.HANDLER:
				case MariaDBParser.HASH:
				case MariaDBParser.HELP:
				case MariaDBParser.HISTORY:
				case MariaDBParser.HOST:
				case MariaDBParser.HOSTS:
				case MariaDBParser.IDENTIFIED:
				case MariaDBParser.IGNORE_SERVER_IDS:
				case MariaDBParser.IMPORT:
				case MariaDBParser.INCREMENT:
				case MariaDBParser.INDEXES:
				case MariaDBParser.INITIAL_SIZE:
				case MariaDBParser.INPLACE:
				case MariaDBParser.INSERT_METHOD:
				case MariaDBParser.INSTALL:
				case MariaDBParser.INSTANCE:
				case MariaDBParser.INSTANT:
				case MariaDBParser.INVISIBLE:
				case MariaDBParser.INVOKER:
				case MariaDBParser.IO:
				case MariaDBParser.IO_THREAD:
				case MariaDBParser.IPC:
				case MariaDBParser.ISOLATION:
				case MariaDBParser.ISSUER:
				case MariaDBParser.JSON:
				case MariaDBParser.KEY_BLOCK_SIZE:
				case MariaDBParser.LANGUAGE:
				case MariaDBParser.LAST:
				case MariaDBParser.LEAVES:
				case MariaDBParser.LESS:
				case MariaDBParser.LEVEL:
				case MariaDBParser.LIST:
				case MariaDBParser.LOCAL:
				case MariaDBParser.LOCALES:
				case MariaDBParser.LOGFILE:
				case MariaDBParser.LOGS:
				case MariaDBParser.MASTER:
				case MariaDBParser.MASTER_AUTO_POSITION:
				case MariaDBParser.MASTER_CONNECT_RETRY:
				case MariaDBParser.MASTER_DELAY:
				case MariaDBParser.MASTER_HEARTBEAT_PERIOD:
				case MariaDBParser.MASTER_HOST:
				case MariaDBParser.MASTER_LOG_FILE:
				case MariaDBParser.MASTER_LOG_POS:
				case MariaDBParser.MASTER_PASSWORD:
				case MariaDBParser.MASTER_PORT:
				case MariaDBParser.MASTER_RETRY_COUNT:
				case MariaDBParser.MASTER_SSL:
				case MariaDBParser.MASTER_SSL_CA:
				case MariaDBParser.MASTER_SSL_CAPATH:
				case MariaDBParser.MASTER_SSL_CERT:
				case MariaDBParser.MASTER_SSL_CIPHER:
				case MariaDBParser.MASTER_SSL_CRL:
				case MariaDBParser.MASTER_SSL_CRLPATH:
				case MariaDBParser.MASTER_SSL_KEY:
				case MariaDBParser.MASTER_TLS_VERSION:
				case MariaDBParser.MASTER_USER:
				case MariaDBParser.MAX_CONNECTIONS_PER_HOUR:
				case MariaDBParser.MAX_QUERIES_PER_HOUR:
				case MariaDBParser.MAX_ROWS:
				case MariaDBParser.MAX_SIZE:
				case MariaDBParser.MAX_UPDATES_PER_HOUR:
				case MariaDBParser.MAX_USER_CONNECTIONS:
				case MariaDBParser.MEDIUM:
				case MariaDBParser.MEMBER:
				case MariaDBParser.MERGE:
				case MariaDBParser.MESSAGE_TEXT:
				case MariaDBParser.MID:
				case MariaDBParser.MIGRATE:
				case MariaDBParser.MIN_ROWS:
				case MariaDBParser.MODE:
				case MariaDBParser.MODIFY:
				case MariaDBParser.MUTEX:
				case MariaDBParser.MYSQL:
				case MariaDBParser.MYSQL_ERRNO:
				case MariaDBParser.NAME:
				case MariaDBParser.NAMES:
				case MariaDBParser.NCHAR:
				case MariaDBParser.NEVER:
				case MariaDBParser.NEXT:
				case MariaDBParser.NO:
				case MariaDBParser.NOCACHE:
				case MariaDBParser.NOCOPY:
				case MariaDBParser.NOCYCLE:
				case MariaDBParser.NOMAXVALUE:
				case MariaDBParser.NOMINVALUE:
				case MariaDBParser.NOWAIT:
				case MariaDBParser.NODEGROUP:
				case MariaDBParser.NONE:
				case MariaDBParser.ODBC:
				case MariaDBParser.OFFLINE:
				case MariaDBParser.OFFSET:
				case MariaDBParser.OF:
				case MariaDBParser.OJ:
				case MariaDBParser.OLD_PASSWORD:
				case MariaDBParser.ONE:
				case MariaDBParser.ONLINE:
				case MariaDBParser.ONLY:
				case MariaDBParser.OPEN:
				case MariaDBParser.OPTIMIZER_COSTS:
				case MariaDBParser.OPTIONS:
				case MariaDBParser.OWNER:
				case MariaDBParser.PACK_KEYS:
				case MariaDBParser.PAGE:
				case MariaDBParser.PARSER:
				case MariaDBParser.PARTIAL:
				case MariaDBParser.PARTITIONING:
				case MariaDBParser.PARTITIONS:
				case MariaDBParser.PASSWORD:
				case MariaDBParser.PASSWORD_LOCK_TIME:
				case MariaDBParser.PHASE:
				case MariaDBParser.PLUGIN:
				case MariaDBParser.PLUGIN_DIR:
				case MariaDBParser.PLUGINS:
				case MariaDBParser.PORT:
				case MariaDBParser.PRECEDES:
				case MariaDBParser.PREPARE:
				case MariaDBParser.PRESERVE:
				case MariaDBParser.PREV:
				case MariaDBParser.PROCESSLIST:
				case MariaDBParser.PROFILE:
				case MariaDBParser.PROFILES:
				case MariaDBParser.PROXY:
				case MariaDBParser.QUERY:
				case MariaDBParser.QUERY_RESPONSE_TIME:
				case MariaDBParser.QUICK:
				case MariaDBParser.REBUILD:
				case MariaDBParser.RECOVER:
				case MariaDBParser.RECURSIVE:
				case MariaDBParser.REDO_BUFFER_SIZE:
				case MariaDBParser.REDUNDANT:
				case MariaDBParser.RELAY:
				case MariaDBParser.RELAY_LOG_FILE:
				case MariaDBParser.RELAY_LOG_POS:
				case MariaDBParser.RELAYLOG:
				case MariaDBParser.REMOVE:
				case MariaDBParser.REORGANIZE:
				case MariaDBParser.REPAIR:
				case MariaDBParser.REPLICATE_DO_DB:
				case MariaDBParser.REPLICATE_DO_TABLE:
				case MariaDBParser.REPLICATE_IGNORE_DB:
				case MariaDBParser.REPLICATE_IGNORE_TABLE:
				case MariaDBParser.REPLICATE_REWRITE_DB:
				case MariaDBParser.REPLICATE_WILD_DO_TABLE:
				case MariaDBParser.REPLICATE_WILD_IGNORE_TABLE:
				case MariaDBParser.REPLICATION:
				case MariaDBParser.RESET:
				case MariaDBParser.RESTART:
				case MariaDBParser.RESUME:
				case MariaDBParser.RETURNED_SQLSTATE:
				case MariaDBParser.RETURNS:
				case MariaDBParser.REUSE:
				case MariaDBParser.ROLE:
				case MariaDBParser.ROLLBACK:
				case MariaDBParser.ROLLUP:
				case MariaDBParser.ROTATE:
				case MariaDBParser.ROW:
				case MariaDBParser.ROWS:
				case MariaDBParser.ROW_FORMAT:
				case MariaDBParser.RTREE:
				case MariaDBParser.SAVEPOINT:
				case MariaDBParser.SCHEDULE:
				case MariaDBParser.SECURITY:
				case MariaDBParser.SEQUENCE:
				case MariaDBParser.SERVER:
				case MariaDBParser.SESSION:
				case MariaDBParser.SHARE:
				case MariaDBParser.SHARED:
				case MariaDBParser.SIGNED:
				case MariaDBParser.SIMPLE:
				case MariaDBParser.SLAVE:
				case MariaDBParser.SLAVES:
				case MariaDBParser.SLOW:
				case MariaDBParser.SNAPSHOT:
				case MariaDBParser.SOCKET:
				case MariaDBParser.SOME:
				case MariaDBParser.SONAME:
				case MariaDBParser.SOUNDS:
				case MariaDBParser.SOURCE:
				case MariaDBParser.SQL_AFTER_GTIDS:
				case MariaDBParser.SQL_AFTER_MTS_GAPS:
				case MariaDBParser.SQL_BEFORE_GTIDS:
				case MariaDBParser.SQL_BUFFER_RESULT:
				case MariaDBParser.SQL_CACHE:
				case MariaDBParser.SQL_NO_CACHE:
				case MariaDBParser.SQL_THREAD:
				case MariaDBParser.START:
				case MariaDBParser.STARTS:
				case MariaDBParser.STATS_AUTO_RECALC:
				case MariaDBParser.STATS_PERSISTENT:
				case MariaDBParser.STATS_SAMPLE_PAGES:
				case MariaDBParser.STATUS:
				case MariaDBParser.STOP:
				case MariaDBParser.STORAGE:
				case MariaDBParser.STRING:
				case MariaDBParser.SUBCLASS_ORIGIN:
				case MariaDBParser.SUBJECT:
				case MariaDBParser.SUBPARTITION:
				case MariaDBParser.SUBPARTITIONS:
				case MariaDBParser.SUSPEND:
				case MariaDBParser.SWAPS:
				case MariaDBParser.SWITCHES:
				case MariaDBParser.TABLE_NAME:
				case MariaDBParser.TABLESPACE:
				case MariaDBParser.TABLE_TYPE:
				case MariaDBParser.TEMPORARY:
				case MariaDBParser.TEMPTABLE:
				case MariaDBParser.THAN:
				case MariaDBParser.TRADITIONAL:
				case MariaDBParser.TRANSACTION:
				case MariaDBParser.TRANSACTIONAL:
				case MariaDBParser.TRIGGERS:
				case MariaDBParser.TRUNCATE:
				case MariaDBParser.TYPES:
				case MariaDBParser.UNBOUNDED:
				case MariaDBParser.UNDEFINED:
				case MariaDBParser.UNDOFILE:
				case MariaDBParser.UNDO_BUFFER_SIZE:
				case MariaDBParser.UNINSTALL:
				case MariaDBParser.UNKNOWN:
				case MariaDBParser.UNTIL:
				case MariaDBParser.UPGRADE:
				case MariaDBParser.USER:
				case MariaDBParser.USE_FRM:
				case MariaDBParser.USER_RESOURCES:
				case MariaDBParser.VALIDATION:
				case MariaDBParser.VALUE:
				case MariaDBParser.VARIABLES:
				case MariaDBParser.VIEW:
				case MariaDBParser.VIRTUAL:
				case MariaDBParser.VISIBLE:
				case MariaDBParser.WAIT:
				case MariaDBParser.WARNINGS:
				case MariaDBParser.WITHOUT:
				case MariaDBParser.WORK:
				case MariaDBParser.WRAPPER:
				case MariaDBParser.WSREP_MEMBERSHIP:
				case MariaDBParser.WSREP_STATUS:
				case MariaDBParser.X509:
				case MariaDBParser.XA:
				case MariaDBParser.XML:
				case MariaDBParser.EUR:
				case MariaDBParser.USA:
				case MariaDBParser.JIS:
				case MariaDBParser.ISO:
				case MariaDBParser.INTERNAL:
				case MariaDBParser.QUARTER:
				case MariaDBParser.MONTH:
				case MariaDBParser.DAY:
				case MariaDBParser.HOUR:
				case MariaDBParser.MINUTE:
				case MariaDBParser.WEEK:
				case MariaDBParser.SECOND:
				case MariaDBParser.MICROSECOND:
				case MariaDBParser.USER_STATISTICS:
				case MariaDBParser.CLIENT_STATISTICS:
				case MariaDBParser.INDEX_STATISTICS:
				case MariaDBParser.TABLE_STATISTICS:
				case MariaDBParser.ADMIN:
				case MariaDBParser.AUDIT_ADMIN:
				case MariaDBParser.BACKUP_ADMIN:
				case MariaDBParser.BINLOG_ADMIN:
				case MariaDBParser.BINLOG_ENCRYPTION_ADMIN:
				case MariaDBParser.CLONE_ADMIN:
				case MariaDBParser.CONNECTION_ADMIN:
				case MariaDBParser.ENCRYPTION_KEY_ADMIN:
				case MariaDBParser.EXECUTE:
				case MariaDBParser.FILE:
				case MariaDBParser.FIREWALL_ADMIN:
				case MariaDBParser.FIREWALL_USER:
				case MariaDBParser.GROUP_REPLICATION_ADMIN:
				case MariaDBParser.INNODB_REDO_LOG_ARCHIVE:
				case MariaDBParser.INVOKE:
				case MariaDBParser.LAMBDA:
				case MariaDBParser.NDB_STORED_USER:
				case MariaDBParser.PASSWORDLESS_USER_ADMIN:
				case MariaDBParser.PERSIST_RO_VARIABLES_ADMIN:
				case MariaDBParser.PRIVILEGES:
				case MariaDBParser.PROCESS:
				case MariaDBParser.RELOAD:
				case MariaDBParser.REPLICATION_APPLIER:
				case MariaDBParser.REPLICATION_SLAVE_ADMIN:
				case MariaDBParser.RESOURCE_GROUP_ADMIN:
				case MariaDBParser.RESOURCE_GROUP_USER:
				case MariaDBParser.ROLE_ADMIN:
				case MariaDBParser.ROUTINE:
				case MariaDBParser.S3:
				case MariaDBParser.SESSION_VARIABLES_ADMIN:
				case MariaDBParser.SET_USER_ID:
				case MariaDBParser.SHOW_ROUTINE:
				case MariaDBParser.SHUTDOWN:
				case MariaDBParser.SUPER:
				case MariaDBParser.SYSTEM_VARIABLES_ADMIN:
				case MariaDBParser.TABLES:
				case MariaDBParser.TABLE_ENCRYPTION_ADMIN:
				case MariaDBParser.VERSION_TOKEN_ADMIN:
				case MariaDBParser.XA_RECOVER_ADMIN:
				case MariaDBParser.ARMSCII8:
				case MariaDBParser.ASCII:
				case MariaDBParser.BIG5:
				case MariaDBParser.CP1250:
				case MariaDBParser.CP1251:
				case MariaDBParser.CP1256:
				case MariaDBParser.CP1257:
				case MariaDBParser.CP850:
				case MariaDBParser.CP852:
				case MariaDBParser.CP866:
				case MariaDBParser.CP932:
				case MariaDBParser.DEC8:
				case MariaDBParser.EUCJPMS:
				case MariaDBParser.EUCKR:
				case MariaDBParser.GB18030:
				case MariaDBParser.GB2312:
				case MariaDBParser.GBK:
				case MariaDBParser.GEOSTD8:
				case MariaDBParser.GREEK:
				case MariaDBParser.HEBREW:
				case MariaDBParser.HP8:
				case MariaDBParser.KEYBCS2:
				case MariaDBParser.KOI8R:
				case MariaDBParser.KOI8U:
				case MariaDBParser.LATIN1:
				case MariaDBParser.LATIN2:
				case MariaDBParser.LATIN5:
				case MariaDBParser.LATIN7:
				case MariaDBParser.MACCE:
				case MariaDBParser.MACROMAN:
				case MariaDBParser.SJIS:
				case MariaDBParser.SWE7:
				case MariaDBParser.TIS620:
				case MariaDBParser.UCS2:
				case MariaDBParser.UJIS:
				case MariaDBParser.UTF16:
				case MariaDBParser.UTF16LE:
				case MariaDBParser.UTF32:
				case MariaDBParser.UTF8:
				case MariaDBParser.UTF8MB3:
				case MariaDBParser.UTF8MB4:
				case MariaDBParser.ARCHIVE:
				case MariaDBParser.BLACKHOLE:
				case MariaDBParser.CSV:
				case MariaDBParser.FEDERATED:
				case MariaDBParser.INNODB:
				case MariaDBParser.MEMORY:
				case MariaDBParser.MRG_MYISAM:
				case MariaDBParser.MYISAM:
				case MariaDBParser.NDB:
				case MariaDBParser.NDBCLUSTER:
				case MariaDBParser.PERFORMANCE_SCHEMA:
				case MariaDBParser.TOKUDB:
				case MariaDBParser.REPEATABLE:
				case MariaDBParser.COMMITTED:
				case MariaDBParser.UNCOMMITTED:
				case MariaDBParser.SERIALIZABLE:
				case MariaDBParser.GEOMETRYCOLLECTION:
				case MariaDBParser.LINESTRING:
				case MariaDBParser.MULTILINESTRING:
				case MariaDBParser.MULTIPOINT:
				case MariaDBParser.MULTIPOLYGON:
				case MariaDBParser.POINT:
				case MariaDBParser.POLYGON:
				case MariaDBParser.ABS:
				case MariaDBParser.ACOS:
				case MariaDBParser.ADDDATE:
				case MariaDBParser.ADDTIME:
				case MariaDBParser.AES_DECRYPT:
				case MariaDBParser.AES_ENCRYPT:
				case MariaDBParser.AREA:
				case MariaDBParser.ASBINARY:
				case MariaDBParser.ASIN:
				case MariaDBParser.ASTEXT:
				case MariaDBParser.ASWKB:
				case MariaDBParser.ASWKT:
				case MariaDBParser.ASYMMETRIC_DECRYPT:
				case MariaDBParser.ASYMMETRIC_DERIVE:
				case MariaDBParser.ASYMMETRIC_ENCRYPT:
				case MariaDBParser.ASYMMETRIC_SIGN:
				case MariaDBParser.ASYMMETRIC_VERIFY:
				case MariaDBParser.ATAN:
				case MariaDBParser.ATAN2:
				case MariaDBParser.BENCHMARK:
				case MariaDBParser.BIN:
				case MariaDBParser.BIT_COUNT:
				case MariaDBParser.BIT_LENGTH:
				case MariaDBParser.BUFFER:
				case MariaDBParser.CATALOG_NAME:
				case MariaDBParser.CEIL:
				case MariaDBParser.CEILING:
				case MariaDBParser.CENTROID:
				case MariaDBParser.CHARACTER_LENGTH:
				case MariaDBParser.CHARSET:
				case MariaDBParser.CHAR_LENGTH:
				case MariaDBParser.COERCIBILITY:
				case MariaDBParser.COLLATION:
				case MariaDBParser.COMPRESS:
				case MariaDBParser.CONCAT:
				case MariaDBParser.CONCAT_WS:
				case MariaDBParser.CONNECTION_ID:
				case MariaDBParser.CONV:
				case MariaDBParser.CONVERT_TZ:
				case MariaDBParser.COS:
				case MariaDBParser.COT:
				case MariaDBParser.CRC32:
				case MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY:
				case MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY:
				case MariaDBParser.CREATE_DH_PARAMETERS:
				case MariaDBParser.CREATE_DIGEST:
				case MariaDBParser.CROSSES:
				case MariaDBParser.DATEDIFF:
				case MariaDBParser.DATE_FORMAT:
				case MariaDBParser.DAYNAME:
				case MariaDBParser.DAYOFMONTH:
				case MariaDBParser.DAYOFWEEK:
				case MariaDBParser.DAYOFYEAR:
				case MariaDBParser.DECODE:
				case MariaDBParser.DEGREES:
				case MariaDBParser.DES_DECRYPT:
				case MariaDBParser.DES_ENCRYPT:
				case MariaDBParser.DIMENSION:
				case MariaDBParser.DISJOINT:
				case MariaDBParser.ELT:
				case MariaDBParser.ENCODE:
				case MariaDBParser.ENCRYPT:
				case MariaDBParser.ENDPOINT:
				case MariaDBParser.ENGINE_ATTRIBUTE:
				case MariaDBParser.ENVELOPE:
				case MariaDBParser.EQUALS:
				case MariaDBParser.EXP:
				case MariaDBParser.EXPORT_SET:
				case MariaDBParser.EXTERIORRING:
				case MariaDBParser.EXTRACTVALUE:
				case MariaDBParser.FIELD:
				case MariaDBParser.FIND_IN_SET:
				case MariaDBParser.FLOOR:
				case MariaDBParser.FORMAT:
				case MariaDBParser.FOUND_ROWS:
				case MariaDBParser.FROM_BASE64:
				case MariaDBParser.FROM_DAYS:
				case MariaDBParser.FROM_UNIXTIME:
				case MariaDBParser.GEOMCOLLFROMTEXT:
				case MariaDBParser.GEOMCOLLFROMWKB:
				case MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT:
				case MariaDBParser.GEOMETRYCOLLECTIONFROMWKB:
				case MariaDBParser.GEOMETRYFROMTEXT:
				case MariaDBParser.GEOMETRYFROMWKB:
				case MariaDBParser.GEOMETRYN:
				case MariaDBParser.GEOMETRYTYPE:
				case MariaDBParser.GEOMFROMTEXT:
				case MariaDBParser.GEOMFROMWKB:
				case MariaDBParser.GET_FORMAT:
				case MariaDBParser.GET_LOCK:
				case MariaDBParser.GLENGTH:
				case MariaDBParser.GREATEST:
				case MariaDBParser.GTID_SUBSET:
				case MariaDBParser.GTID_SUBTRACT:
				case MariaDBParser.HEX:
				case MariaDBParser.IFNULL:
				case MariaDBParser.INET6_ATON:
				case MariaDBParser.INET6_NTOA:
				case MariaDBParser.INET_ATON:
				case MariaDBParser.INET_NTOA:
				case MariaDBParser.INSTR:
				case MariaDBParser.INTERIORRINGN:
				case MariaDBParser.INTERSECTS:
				case MariaDBParser.ISCLOSED:
				case MariaDBParser.ISEMPTY:
				case MariaDBParser.ISNULL:
				case MariaDBParser.ISSIMPLE:
				case MariaDBParser.IS_FREE_LOCK:
				case MariaDBParser.IS_IPV4:
				case MariaDBParser.IS_IPV4_COMPAT:
				case MariaDBParser.IS_IPV4_MAPPED:
				case MariaDBParser.IS_IPV6:
				case MariaDBParser.IS_USED_LOCK:
				case MariaDBParser.LAST_INSERT_ID:
				case MariaDBParser.LCASE:
				case MariaDBParser.LEAST:
				case MariaDBParser.LENGTH:
				case MariaDBParser.LINEFROMTEXT:
				case MariaDBParser.LINEFROMWKB:
				case MariaDBParser.LINESTRINGFROMTEXT:
				case MariaDBParser.LINESTRINGFROMWKB:
				case MariaDBParser.LN:
				case MariaDBParser.LOAD_FILE:
				case MariaDBParser.LOCATE:
				case MariaDBParser.LOG:
				case MariaDBParser.LOG10:
				case MariaDBParser.LOG2:
				case MariaDBParser.LOWER:
				case MariaDBParser.LPAD:
				case MariaDBParser.LTRIM:
				case MariaDBParser.MAKEDATE:
				case MariaDBParser.MAKETIME:
				case MariaDBParser.MAKE_SET:
				case MariaDBParser.MASTER_POS_WAIT:
				case MariaDBParser.MBRCONTAINS:
				case MariaDBParser.MBRDISJOINT:
				case MariaDBParser.MBREQUAL:
				case MariaDBParser.MBRINTERSECTS:
				case MariaDBParser.MBROVERLAPS:
				case MariaDBParser.MBRTOUCHES:
				case MariaDBParser.MBRWITHIN:
				case MariaDBParser.MD5:
				case MariaDBParser.MLINEFROMTEXT:
				case MariaDBParser.MLINEFROMWKB:
				case MariaDBParser.MONTHNAME:
				case MariaDBParser.MPOINTFROMTEXT:
				case MariaDBParser.MPOINTFROMWKB:
				case MariaDBParser.MPOLYFROMTEXT:
				case MariaDBParser.MPOLYFROMWKB:
				case MariaDBParser.MULTILINESTRINGFROMTEXT:
				case MariaDBParser.MULTILINESTRINGFROMWKB:
				case MariaDBParser.MULTIPOINTFROMTEXT:
				case MariaDBParser.MULTIPOINTFROMWKB:
				case MariaDBParser.MULTIPOLYGONFROMTEXT:
				case MariaDBParser.MULTIPOLYGONFROMWKB:
				case MariaDBParser.NAME_CONST:
				case MariaDBParser.NULLIF:
				case MariaDBParser.NUMGEOMETRIES:
				case MariaDBParser.NUMINTERIORRINGS:
				case MariaDBParser.NUMPOINTS:
				case MariaDBParser.OCT:
				case MariaDBParser.OCTET_LENGTH:
				case MariaDBParser.ORD:
				case MariaDBParser.OVERLAPS:
				case MariaDBParser.PERIOD_ADD:
				case MariaDBParser.PERIOD_DIFF:
				case MariaDBParser.PI:
				case MariaDBParser.POINTFROMTEXT:
				case MariaDBParser.POINTFROMWKB:
				case MariaDBParser.POINTN:
				case MariaDBParser.POLYFROMTEXT:
				case MariaDBParser.POLYFROMWKB:
				case MariaDBParser.POLYGONFROMTEXT:
				case MariaDBParser.POLYGONFROMWKB:
				case MariaDBParser.POW:
				case MariaDBParser.POWER:
				case MariaDBParser.QUOTE:
				case MariaDBParser.RADIANS:
				case MariaDBParser.RAND:
				case MariaDBParser.RANDOM_BYTES:
				case MariaDBParser.RELEASE_LOCK:
				case MariaDBParser.REVERSE:
				case MariaDBParser.ROUND:
				case MariaDBParser.ROW_COUNT:
				case MariaDBParser.RPAD:
				case MariaDBParser.RTRIM:
				case MariaDBParser.SEC_TO_TIME:
				case MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE:
				case MariaDBParser.SESSION_USER:
				case MariaDBParser.SHA:
				case MariaDBParser.SHA1:
				case MariaDBParser.SHA2:
				case MariaDBParser.SCHEMA_NAME:
				case MariaDBParser.SIGN:
				case MariaDBParser.SIN:
				case MariaDBParser.SLEEP:
				case MariaDBParser.SOUNDEX:
				case MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS:
				case MariaDBParser.SQRT:
				case MariaDBParser.SRID:
				case MariaDBParser.STARTPOINT:
				case MariaDBParser.STRCMP:
				case MariaDBParser.STR_TO_DATE:
				case MariaDBParser.ST_AREA:
				case MariaDBParser.ST_ASBINARY:
				case MariaDBParser.ST_ASTEXT:
				case MariaDBParser.ST_ASWKB:
				case MariaDBParser.ST_ASWKT:
				case MariaDBParser.ST_BUFFER:
				case MariaDBParser.ST_CENTROID:
				case MariaDBParser.ST_CONTAINS:
				case MariaDBParser.ST_CROSSES:
				case MariaDBParser.ST_DIFFERENCE:
				case MariaDBParser.ST_DIMENSION:
				case MariaDBParser.ST_DISJOINT:
				case MariaDBParser.ST_DISTANCE:
				case MariaDBParser.ST_ENDPOINT:
				case MariaDBParser.ST_ENVELOPE:
				case MariaDBParser.ST_EQUALS:
				case MariaDBParser.ST_EXTERIORRING:
				case MariaDBParser.ST_GEOMCOLLFROMTEXT:
				case MariaDBParser.ST_GEOMCOLLFROMTXT:
				case MariaDBParser.ST_GEOMCOLLFROMWKB:
				case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
				case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB:
				case MariaDBParser.ST_GEOMETRYFROMTEXT:
				case MariaDBParser.ST_GEOMETRYFROMWKB:
				case MariaDBParser.ST_GEOMETRYN:
				case MariaDBParser.ST_GEOMETRYTYPE:
				case MariaDBParser.ST_GEOMFROMTEXT:
				case MariaDBParser.ST_GEOMFROMWKB:
				case MariaDBParser.ST_INTERIORRINGN:
				case MariaDBParser.ST_INTERSECTION:
				case MariaDBParser.ST_INTERSECTS:
				case MariaDBParser.ST_ISCLOSED:
				case MariaDBParser.ST_ISEMPTY:
				case MariaDBParser.ST_ISSIMPLE:
				case MariaDBParser.ST_LINEFROMTEXT:
				case MariaDBParser.ST_LINEFROMWKB:
				case MariaDBParser.ST_LINESTRINGFROMTEXT:
				case MariaDBParser.ST_LINESTRINGFROMWKB:
				case MariaDBParser.ST_NUMGEOMETRIES:
				case MariaDBParser.ST_NUMINTERIORRING:
				case MariaDBParser.ST_NUMINTERIORRINGS:
				case MariaDBParser.ST_NUMPOINTS:
				case MariaDBParser.ST_OVERLAPS:
				case MariaDBParser.ST_POINTFROMTEXT:
				case MariaDBParser.ST_POINTFROMWKB:
				case MariaDBParser.ST_POINTN:
				case MariaDBParser.ST_POLYFROMTEXT:
				case MariaDBParser.ST_POLYFROMWKB:
				case MariaDBParser.ST_POLYGONFROMTEXT:
				case MariaDBParser.ST_POLYGONFROMWKB:
				case MariaDBParser.ST_SRID:
				case MariaDBParser.ST_STARTPOINT:
				case MariaDBParser.ST_SYMDIFFERENCE:
				case MariaDBParser.ST_TOUCHES:
				case MariaDBParser.ST_UNION:
				case MariaDBParser.ST_WITHIN:
				case MariaDBParser.ST_X:
				case MariaDBParser.ST_Y:
				case MariaDBParser.SUBDATE:
				case MariaDBParser.SUBSTRING_INDEX:
				case MariaDBParser.SUBTIME:
				case MariaDBParser.SYSTEM_USER:
				case MariaDBParser.TAN:
				case MariaDBParser.TIMEDIFF:
				case MariaDBParser.TIMESTAMPADD:
				case MariaDBParser.TIMESTAMPDIFF:
				case MariaDBParser.TIME_FORMAT:
				case MariaDBParser.TIME_TO_SEC:
				case MariaDBParser.TOUCHES:
				case MariaDBParser.TO_BASE64:
				case MariaDBParser.TO_DAYS:
				case MariaDBParser.TO_SECONDS:
				case MariaDBParser.UCASE:
				case MariaDBParser.UNCOMPRESS:
				case MariaDBParser.UNCOMPRESSED_LENGTH:
				case MariaDBParser.UNHEX:
				case MariaDBParser.UNIX_TIMESTAMP:
				case MariaDBParser.UPDATEXML:
				case MariaDBParser.UPPER:
				case MariaDBParser.UUID:
				case MariaDBParser.UUID_SHORT:
				case MariaDBParser.VALIDATE_PASSWORD_STRENGTH:
				case MariaDBParser.VERSION:
				case MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case MariaDBParser.WEEKDAY:
				case MariaDBParser.WEEKOFYEAR:
				case MariaDBParser.WEIGHT_STRING:
				case MariaDBParser.WITHIN:
				case MariaDBParser.YEARWEEK:
				case MariaDBParser.Y_FUNCTION:
				case MariaDBParser.X_FUNCTION:
				case MariaDBParser.VIA:
				case MariaDBParser.LASTVAL:
				case MariaDBParser.NEXTVAL:
				case MariaDBParser.SETVAL:
				case MariaDBParser.PREVIOUS:
				case MariaDBParser.PERSISTENT:
				case MariaDBParser.BINLOG_MONITOR:
				case MariaDBParser.BINLOG_REPLAY:
				case MariaDBParser.FEDERATED_ADMIN:
				case MariaDBParser.READ_ONLY_ADMIN:
				case MariaDBParser.REPLICA:
				case MariaDBParser.REPLICAS:
				case MariaDBParser.REPLICATION_MASTER_ADMIN:
				case MariaDBParser.MONITOR:
				case MariaDBParser.READ_ONLY:
				case MariaDBParser.REPLAY:
				case MariaDBParser.MOD:
				case MariaDBParser.CHARSET_REVERSE_QOUTE_STRING:
				case MariaDBParser.STRING_LITERAL:
				case MariaDBParser.ID:
					{
					this.state = 3000;
					this.uidList();
					}
					break;
				case MariaDBParser.ALL:
					{
					this.state = 3001;
					this.match(MariaDBParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3004;
				this.match(MariaDBParser.TABLESPACE);
				}
				break;
			case MariaDBParser.TRUNCATE:
				_localctx = new AlterByTruncatePartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3005;
				this.match(MariaDBParser.TRUNCATE);
				this.state = 3006;
				this.match(MariaDBParser.PARTITION);
				this.state = 3009;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.ATTRIBUTE:
				case MariaDBParser.BODY:
				case MariaDBParser.BUCKETS:
				case MariaDBParser.CONDITION:
				case MariaDBParser.CURRENT:
				case MariaDBParser.CURRENT_ROLE:
				case MariaDBParser.CURRENT_USER:
				case MariaDBParser.DATABASE:
				case MariaDBParser.DEFAULT:
				case MariaDBParser.DIAGNOSTICS:
				case MariaDBParser.EMPTY:
				case MariaDBParser.EXCEPT:
				case MariaDBParser.GROUP:
				case MariaDBParser.IF:
				case MariaDBParser.IGNORED:
				case MariaDBParser.INSERT:
				case MariaDBParser.LATERAL:
				case MariaDBParser.LEFT:
				case MariaDBParser.LOCKED:
				case MariaDBParser.MAXVALUE:
				case MariaDBParser.MINVALUE:
				case MariaDBParser.NUMBER:
				case MariaDBParser.OPTIONAL:
				case MariaDBParser.ORDER:
				case MariaDBParser.PRIMARY:
				case MariaDBParser.PACKAGE:
				case MariaDBParser.REPLACE:
				case MariaDBParser.RIGHT:
				case MariaDBParser.SCHEMA:
				case MariaDBParser.SKIP_:
				case MariaDBParser.STACKED:
				case MariaDBParser.STATEMENT:
				case MariaDBParser.DATE:
				case MariaDBParser.TIME:
				case MariaDBParser.TIMESTAMP:
				case MariaDBParser.DATETIME:
				case MariaDBParser.YEAR:
				case MariaDBParser.BINARY:
				case MariaDBParser.TEXT:
				case MariaDBParser.ENUM:
				case MariaDBParser.SERIAL:
				case MariaDBParser.JSON_ARRAY:
				case MariaDBParser.JSON_ARRAYAGG:
				case MariaDBParser.JSON_ARRAY_APPEND:
				case MariaDBParser.JSON_ARRAY_INSERT:
				case MariaDBParser.JSON_CONTAINS:
				case MariaDBParser.JSON_CONTAINS_PATH:
				case MariaDBParser.JSON_DEPTH:
				case MariaDBParser.JSON_EXTRACT:
				case MariaDBParser.JSON_INSERT:
				case MariaDBParser.JSON_KEYS:
				case MariaDBParser.JSON_LENGTH:
				case MariaDBParser.JSON_MERGE:
				case MariaDBParser.JSON_MERGE_PATCH:
				case MariaDBParser.JSON_MERGE_PRESERVE:
				case MariaDBParser.JSON_OBJECT:
				case MariaDBParser.JSON_OBJECTAGG:
				case MariaDBParser.JSON_OVERLAPS:
				case MariaDBParser.JSON_PRETTY:
				case MariaDBParser.JSON_QUOTE:
				case MariaDBParser.JSON_REMOVE:
				case MariaDBParser.JSON_REPLACE:
				case MariaDBParser.JSON_SCHEMA_VALID:
				case MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT:
				case MariaDBParser.JSON_SEARCH:
				case MariaDBParser.JSON_SET:
				case MariaDBParser.JSON_STORAGE_FREE:
				case MariaDBParser.JSON_STORAGE_SIZE:
				case MariaDBParser.JSON_TABLE:
				case MariaDBParser.JSON_TYPE:
				case MariaDBParser.JSON_UNQUOTE:
				case MariaDBParser.JSON_VALID:
				case MariaDBParser.JSON_VALUE:
				case MariaDBParser.NESTED:
				case MariaDBParser.ORDINALITY:
				case MariaDBParser.PATH:
				case MariaDBParser.AVG:
				case MariaDBParser.BIT_AND:
				case MariaDBParser.BIT_OR:
				case MariaDBParser.BIT_XOR:
				case MariaDBParser.COUNT:
				case MariaDBParser.CUME_DIST:
				case MariaDBParser.DENSE_RANK:
				case MariaDBParser.FIRST_VALUE:
				case MariaDBParser.GROUP_CONCAT:
				case MariaDBParser.LAG:
				case MariaDBParser.LAST_VALUE:
				case MariaDBParser.LEAD:
				case MariaDBParser.MAX:
				case MariaDBParser.MIN:
				case MariaDBParser.NTILE:
				case MariaDBParser.NTH_VALUE:
				case MariaDBParser.PERCENT_RANK:
				case MariaDBParser.RANK:
				case MariaDBParser.ROW_NUMBER:
				case MariaDBParser.STD:
				case MariaDBParser.STDDEV:
				case MariaDBParser.STDDEV_POP:
				case MariaDBParser.STDDEV_SAMP:
				case MariaDBParser.SUM:
				case MariaDBParser.VAR_POP:
				case MariaDBParser.VAR_SAMP:
				case MariaDBParser.VARIANCE:
				case MariaDBParser.CURRENT_DATE:
				case MariaDBParser.CURRENT_TIME:
				case MariaDBParser.CURRENT_TIMESTAMP:
				case MariaDBParser.LOCALTIME:
				case MariaDBParser.CURDATE:
				case MariaDBParser.CURTIME:
				case MariaDBParser.DATE_ADD:
				case MariaDBParser.DATE_SUB:
				case MariaDBParser.LOCALTIMESTAMP:
				case MariaDBParser.NOW:
				case MariaDBParser.POSITION:
				case MariaDBParser.SUBSTR:
				case MariaDBParser.SUBSTRING:
				case MariaDBParser.SYSDATE:
				case MariaDBParser.TRIM:
				case MariaDBParser.UTC_DATE:
				case MariaDBParser.UTC_TIME:
				case MariaDBParser.UTC_TIMESTAMP:
				case MariaDBParser.ACCOUNT:
				case MariaDBParser.ACTION:
				case MariaDBParser.AFTER:
				case MariaDBParser.AGGREGATE:
				case MariaDBParser.ALGORITHM:
				case MariaDBParser.ANY:
				case MariaDBParser.AT:
				case MariaDBParser.AUTHORS:
				case MariaDBParser.AUTOCOMMIT:
				case MariaDBParser.AUTOEXTEND_SIZE:
				case MariaDBParser.AUTO_INCREMENT:
				case MariaDBParser.AVG_ROW_LENGTH:
				case MariaDBParser.BEGIN:
				case MariaDBParser.BINLOG:
				case MariaDBParser.BIT:
				case MariaDBParser.BLOCK:
				case MariaDBParser.BOOL:
				case MariaDBParser.BOOLEAN:
				case MariaDBParser.BTREE:
				case MariaDBParser.CACHE:
				case MariaDBParser.CASCADED:
				case MariaDBParser.CHAIN:
				case MariaDBParser.CHANGED:
				case MariaDBParser.CHANNEL:
				case MariaDBParser.CHECKSUM:
				case MariaDBParser.PAGE_CHECKSUM:
				case MariaDBParser.CIPHER:
				case MariaDBParser.CLASS_ORIGIN:
				case MariaDBParser.CLIENT:
				case MariaDBParser.CLOSE:
				case MariaDBParser.CLUSTERING:
				case MariaDBParser.COALESCE:
				case MariaDBParser.CODE:
				case MariaDBParser.COLUMNS:
				case MariaDBParser.COLUMN_FORMAT:
				case MariaDBParser.COLUMN_NAME:
				case MariaDBParser.COMMENT:
				case MariaDBParser.COMMIT:
				case MariaDBParser.COMPACT:
				case MariaDBParser.COMPLETION:
				case MariaDBParser.COMPRESSED:
				case MariaDBParser.COMPRESSION:
				case MariaDBParser.CONCURRENT:
				case MariaDBParser.CONNECT:
				case MariaDBParser.CONNECTION:
				case MariaDBParser.CONSISTENT:
				case MariaDBParser.CONSTRAINT_CATALOG:
				case MariaDBParser.CONSTRAINT_SCHEMA:
				case MariaDBParser.CONSTRAINT_NAME:
				case MariaDBParser.CONTAINS:
				case MariaDBParser.CONTEXT:
				case MariaDBParser.CONTRIBUTORS:
				case MariaDBParser.COPY:
				case MariaDBParser.CPU:
				case MariaDBParser.CYCLE:
				case MariaDBParser.CURSOR_NAME:
				case MariaDBParser.DATA:
				case MariaDBParser.DATAFILE:
				case MariaDBParser.DEALLOCATE:
				case MariaDBParser.DEFAULT_AUTH:
				case MariaDBParser.DEFINER:
				case MariaDBParser.DELAY_KEY_WRITE:
				case MariaDBParser.DES_KEY_FILE:
				case MariaDBParser.DIRECTORY:
				case MariaDBParser.DISABLE:
				case MariaDBParser.DISCARD:
				case MariaDBParser.DISK:
				case MariaDBParser.DO:
				case MariaDBParser.DUMPFILE:
				case MariaDBParser.DUPLICATE:
				case MariaDBParser.DYNAMIC:
				case MariaDBParser.ENABLE:
				case MariaDBParser.ENCRYPTED:
				case MariaDBParser.ENCRYPTION:
				case MariaDBParser.ENCRYPTION_KEY_ID:
				case MariaDBParser.END:
				case MariaDBParser.ENDS:
				case MariaDBParser.ENGINE:
				case MariaDBParser.ENGINES:
				case MariaDBParser.ERROR:
				case MariaDBParser.ERRORS:
				case MariaDBParser.ESCAPE:
				case MariaDBParser.EVEN:
				case MariaDBParser.EVENT:
				case MariaDBParser.EVENTS:
				case MariaDBParser.EVERY:
				case MariaDBParser.EXCHANGE:
				case MariaDBParser.EXCLUSIVE:
				case MariaDBParser.EXPIRE:
				case MariaDBParser.EXPORT:
				case MariaDBParser.EXTENDED:
				case MariaDBParser.EXTENT_SIZE:
				case MariaDBParser.FAILED_LOGIN_ATTEMPTS:
				case MariaDBParser.FAST:
				case MariaDBParser.FAULTS:
				case MariaDBParser.FIELDS:
				case MariaDBParser.FILE_BLOCK_SIZE:
				case MariaDBParser.FILTER:
				case MariaDBParser.FIRST:
				case MariaDBParser.FIXED:
				case MariaDBParser.FLUSH:
				case MariaDBParser.FOLLOWS:
				case MariaDBParser.FOUND:
				case MariaDBParser.FULL:
				case MariaDBParser.FUNCTION:
				case MariaDBParser.GENERAL:
				case MariaDBParser.GLOBAL:
				case MariaDBParser.GRANTS:
				case MariaDBParser.GROUP_REPLICATION:
				case MariaDBParser.HANDLER:
				case MariaDBParser.HASH:
				case MariaDBParser.HELP:
				case MariaDBParser.HISTORY:
				case MariaDBParser.HOST:
				case MariaDBParser.HOSTS:
				case MariaDBParser.IDENTIFIED:
				case MariaDBParser.IGNORE_SERVER_IDS:
				case MariaDBParser.IMPORT:
				case MariaDBParser.INCREMENT:
				case MariaDBParser.INDEXES:
				case MariaDBParser.INITIAL_SIZE:
				case MariaDBParser.INPLACE:
				case MariaDBParser.INSERT_METHOD:
				case MariaDBParser.INSTALL:
				case MariaDBParser.INSTANCE:
				case MariaDBParser.INSTANT:
				case MariaDBParser.INVISIBLE:
				case MariaDBParser.INVOKER:
				case MariaDBParser.IO:
				case MariaDBParser.IO_THREAD:
				case MariaDBParser.IPC:
				case MariaDBParser.ISOLATION:
				case MariaDBParser.ISSUER:
				case MariaDBParser.JSON:
				case MariaDBParser.KEY_BLOCK_SIZE:
				case MariaDBParser.LANGUAGE:
				case MariaDBParser.LAST:
				case MariaDBParser.LEAVES:
				case MariaDBParser.LESS:
				case MariaDBParser.LEVEL:
				case MariaDBParser.LIST:
				case MariaDBParser.LOCAL:
				case MariaDBParser.LOCALES:
				case MariaDBParser.LOGFILE:
				case MariaDBParser.LOGS:
				case MariaDBParser.MASTER:
				case MariaDBParser.MASTER_AUTO_POSITION:
				case MariaDBParser.MASTER_CONNECT_RETRY:
				case MariaDBParser.MASTER_DELAY:
				case MariaDBParser.MASTER_HEARTBEAT_PERIOD:
				case MariaDBParser.MASTER_HOST:
				case MariaDBParser.MASTER_LOG_FILE:
				case MariaDBParser.MASTER_LOG_POS:
				case MariaDBParser.MASTER_PASSWORD:
				case MariaDBParser.MASTER_PORT:
				case MariaDBParser.MASTER_RETRY_COUNT:
				case MariaDBParser.MASTER_SSL:
				case MariaDBParser.MASTER_SSL_CA:
				case MariaDBParser.MASTER_SSL_CAPATH:
				case MariaDBParser.MASTER_SSL_CERT:
				case MariaDBParser.MASTER_SSL_CIPHER:
				case MariaDBParser.MASTER_SSL_CRL:
				case MariaDBParser.MASTER_SSL_CRLPATH:
				case MariaDBParser.MASTER_SSL_KEY:
				case MariaDBParser.MASTER_TLS_VERSION:
				case MariaDBParser.MASTER_USER:
				case MariaDBParser.MAX_CONNECTIONS_PER_HOUR:
				case MariaDBParser.MAX_QUERIES_PER_HOUR:
				case MariaDBParser.MAX_ROWS:
				case MariaDBParser.MAX_SIZE:
				case MariaDBParser.MAX_UPDATES_PER_HOUR:
				case MariaDBParser.MAX_USER_CONNECTIONS:
				case MariaDBParser.MEDIUM:
				case MariaDBParser.MEMBER:
				case MariaDBParser.MERGE:
				case MariaDBParser.MESSAGE_TEXT:
				case MariaDBParser.MID:
				case MariaDBParser.MIGRATE:
				case MariaDBParser.MIN_ROWS:
				case MariaDBParser.MODE:
				case MariaDBParser.MODIFY:
				case MariaDBParser.MUTEX:
				case MariaDBParser.MYSQL:
				case MariaDBParser.MYSQL_ERRNO:
				case MariaDBParser.NAME:
				case MariaDBParser.NAMES:
				case MariaDBParser.NCHAR:
				case MariaDBParser.NEVER:
				case MariaDBParser.NEXT:
				case MariaDBParser.NO:
				case MariaDBParser.NOCACHE:
				case MariaDBParser.NOCOPY:
				case MariaDBParser.NOCYCLE:
				case MariaDBParser.NOMAXVALUE:
				case MariaDBParser.NOMINVALUE:
				case MariaDBParser.NOWAIT:
				case MariaDBParser.NODEGROUP:
				case MariaDBParser.NONE:
				case MariaDBParser.ODBC:
				case MariaDBParser.OFFLINE:
				case MariaDBParser.OFFSET:
				case MariaDBParser.OF:
				case MariaDBParser.OJ:
				case MariaDBParser.OLD_PASSWORD:
				case MariaDBParser.ONE:
				case MariaDBParser.ONLINE:
				case MariaDBParser.ONLY:
				case MariaDBParser.OPEN:
				case MariaDBParser.OPTIMIZER_COSTS:
				case MariaDBParser.OPTIONS:
				case MariaDBParser.OWNER:
				case MariaDBParser.PACK_KEYS:
				case MariaDBParser.PAGE:
				case MariaDBParser.PARSER:
				case MariaDBParser.PARTIAL:
				case MariaDBParser.PARTITIONING:
				case MariaDBParser.PARTITIONS:
				case MariaDBParser.PASSWORD:
				case MariaDBParser.PASSWORD_LOCK_TIME:
				case MariaDBParser.PHASE:
				case MariaDBParser.PLUGIN:
				case MariaDBParser.PLUGIN_DIR:
				case MariaDBParser.PLUGINS:
				case MariaDBParser.PORT:
				case MariaDBParser.PRECEDES:
				case MariaDBParser.PREPARE:
				case MariaDBParser.PRESERVE:
				case MariaDBParser.PREV:
				case MariaDBParser.PROCESSLIST:
				case MariaDBParser.PROFILE:
				case MariaDBParser.PROFILES:
				case MariaDBParser.PROXY:
				case MariaDBParser.QUERY:
				case MariaDBParser.QUERY_RESPONSE_TIME:
				case MariaDBParser.QUICK:
				case MariaDBParser.REBUILD:
				case MariaDBParser.RECOVER:
				case MariaDBParser.RECURSIVE:
				case MariaDBParser.REDO_BUFFER_SIZE:
				case MariaDBParser.REDUNDANT:
				case MariaDBParser.RELAY:
				case MariaDBParser.RELAY_LOG_FILE:
				case MariaDBParser.RELAY_LOG_POS:
				case MariaDBParser.RELAYLOG:
				case MariaDBParser.REMOVE:
				case MariaDBParser.REORGANIZE:
				case MariaDBParser.REPAIR:
				case MariaDBParser.REPLICATE_DO_DB:
				case MariaDBParser.REPLICATE_DO_TABLE:
				case MariaDBParser.REPLICATE_IGNORE_DB:
				case MariaDBParser.REPLICATE_IGNORE_TABLE:
				case MariaDBParser.REPLICATE_REWRITE_DB:
				case MariaDBParser.REPLICATE_WILD_DO_TABLE:
				case MariaDBParser.REPLICATE_WILD_IGNORE_TABLE:
				case MariaDBParser.REPLICATION:
				case MariaDBParser.RESET:
				case MariaDBParser.RESTART:
				case MariaDBParser.RESUME:
				case MariaDBParser.RETURNED_SQLSTATE:
				case MariaDBParser.RETURNS:
				case MariaDBParser.REUSE:
				case MariaDBParser.ROLE:
				case MariaDBParser.ROLLBACK:
				case MariaDBParser.ROLLUP:
				case MariaDBParser.ROTATE:
				case MariaDBParser.ROW:
				case MariaDBParser.ROWS:
				case MariaDBParser.ROW_FORMAT:
				case MariaDBParser.RTREE:
				case MariaDBParser.SAVEPOINT:
				case MariaDBParser.SCHEDULE:
				case MariaDBParser.SECURITY:
				case MariaDBParser.SEQUENCE:
				case MariaDBParser.SERVER:
				case MariaDBParser.SESSION:
				case MariaDBParser.SHARE:
				case MariaDBParser.SHARED:
				case MariaDBParser.SIGNED:
				case MariaDBParser.SIMPLE:
				case MariaDBParser.SLAVE:
				case MariaDBParser.SLAVES:
				case MariaDBParser.SLOW:
				case MariaDBParser.SNAPSHOT:
				case MariaDBParser.SOCKET:
				case MariaDBParser.SOME:
				case MariaDBParser.SONAME:
				case MariaDBParser.SOUNDS:
				case MariaDBParser.SOURCE:
				case MariaDBParser.SQL_AFTER_GTIDS:
				case MariaDBParser.SQL_AFTER_MTS_GAPS:
				case MariaDBParser.SQL_BEFORE_GTIDS:
				case MariaDBParser.SQL_BUFFER_RESULT:
				case MariaDBParser.SQL_CACHE:
				case MariaDBParser.SQL_NO_CACHE:
				case MariaDBParser.SQL_THREAD:
				case MariaDBParser.START:
				case MariaDBParser.STARTS:
				case MariaDBParser.STATS_AUTO_RECALC:
				case MariaDBParser.STATS_PERSISTENT:
				case MariaDBParser.STATS_SAMPLE_PAGES:
				case MariaDBParser.STATUS:
				case MariaDBParser.STOP:
				case MariaDBParser.STORAGE:
				case MariaDBParser.STRING:
				case MariaDBParser.SUBCLASS_ORIGIN:
				case MariaDBParser.SUBJECT:
				case MariaDBParser.SUBPARTITION:
				case MariaDBParser.SUBPARTITIONS:
				case MariaDBParser.SUSPEND:
				case MariaDBParser.SWAPS:
				case MariaDBParser.SWITCHES:
				case MariaDBParser.TABLE_NAME:
				case MariaDBParser.TABLESPACE:
				case MariaDBParser.TABLE_TYPE:
				case MariaDBParser.TEMPORARY:
				case MariaDBParser.TEMPTABLE:
				case MariaDBParser.THAN:
				case MariaDBParser.TRADITIONAL:
				case MariaDBParser.TRANSACTION:
				case MariaDBParser.TRANSACTIONAL:
				case MariaDBParser.TRIGGERS:
				case MariaDBParser.TRUNCATE:
				case MariaDBParser.TYPES:
				case MariaDBParser.UNBOUNDED:
				case MariaDBParser.UNDEFINED:
				case MariaDBParser.UNDOFILE:
				case MariaDBParser.UNDO_BUFFER_SIZE:
				case MariaDBParser.UNINSTALL:
				case MariaDBParser.UNKNOWN:
				case MariaDBParser.UNTIL:
				case MariaDBParser.UPGRADE:
				case MariaDBParser.USER:
				case MariaDBParser.USE_FRM:
				case MariaDBParser.USER_RESOURCES:
				case MariaDBParser.VALIDATION:
				case MariaDBParser.VALUE:
				case MariaDBParser.VARIABLES:
				case MariaDBParser.VIEW:
				case MariaDBParser.VIRTUAL:
				case MariaDBParser.VISIBLE:
				case MariaDBParser.WAIT:
				case MariaDBParser.WARNINGS:
				case MariaDBParser.WITHOUT:
				case MariaDBParser.WORK:
				case MariaDBParser.WRAPPER:
				case MariaDBParser.WSREP_MEMBERSHIP:
				case MariaDBParser.WSREP_STATUS:
				case MariaDBParser.X509:
				case MariaDBParser.XA:
				case MariaDBParser.XML:
				case MariaDBParser.EUR:
				case MariaDBParser.USA:
				case MariaDBParser.JIS:
				case MariaDBParser.ISO:
				case MariaDBParser.INTERNAL:
				case MariaDBParser.QUARTER:
				case MariaDBParser.MONTH:
				case MariaDBParser.DAY:
				case MariaDBParser.HOUR:
				case MariaDBParser.MINUTE:
				case MariaDBParser.WEEK:
				case MariaDBParser.SECOND:
				case MariaDBParser.MICROSECOND:
				case MariaDBParser.USER_STATISTICS:
				case MariaDBParser.CLIENT_STATISTICS:
				case MariaDBParser.INDEX_STATISTICS:
				case MariaDBParser.TABLE_STATISTICS:
				case MariaDBParser.ADMIN:
				case MariaDBParser.AUDIT_ADMIN:
				case MariaDBParser.BACKUP_ADMIN:
				case MariaDBParser.BINLOG_ADMIN:
				case MariaDBParser.BINLOG_ENCRYPTION_ADMIN:
				case MariaDBParser.CLONE_ADMIN:
				case MariaDBParser.CONNECTION_ADMIN:
				case MariaDBParser.ENCRYPTION_KEY_ADMIN:
				case MariaDBParser.EXECUTE:
				case MariaDBParser.FILE:
				case MariaDBParser.FIREWALL_ADMIN:
				case MariaDBParser.FIREWALL_USER:
				case MariaDBParser.GROUP_REPLICATION_ADMIN:
				case MariaDBParser.INNODB_REDO_LOG_ARCHIVE:
				case MariaDBParser.INVOKE:
				case MariaDBParser.LAMBDA:
				case MariaDBParser.NDB_STORED_USER:
				case MariaDBParser.PASSWORDLESS_USER_ADMIN:
				case MariaDBParser.PERSIST_RO_VARIABLES_ADMIN:
				case MariaDBParser.PRIVILEGES:
				case MariaDBParser.PROCESS:
				case MariaDBParser.RELOAD:
				case MariaDBParser.REPLICATION_APPLIER:
				case MariaDBParser.REPLICATION_SLAVE_ADMIN:
				case MariaDBParser.RESOURCE_GROUP_ADMIN:
				case MariaDBParser.RESOURCE_GROUP_USER:
				case MariaDBParser.ROLE_ADMIN:
				case MariaDBParser.ROUTINE:
				case MariaDBParser.S3:
				case MariaDBParser.SESSION_VARIABLES_ADMIN:
				case MariaDBParser.SET_USER_ID:
				case MariaDBParser.SHOW_ROUTINE:
				case MariaDBParser.SHUTDOWN:
				case MariaDBParser.SUPER:
				case MariaDBParser.SYSTEM_VARIABLES_ADMIN:
				case MariaDBParser.TABLES:
				case MariaDBParser.TABLE_ENCRYPTION_ADMIN:
				case MariaDBParser.VERSION_TOKEN_ADMIN:
				case MariaDBParser.XA_RECOVER_ADMIN:
				case MariaDBParser.ARMSCII8:
				case MariaDBParser.ASCII:
				case MariaDBParser.BIG5:
				case MariaDBParser.CP1250:
				case MariaDBParser.CP1251:
				case MariaDBParser.CP1256:
				case MariaDBParser.CP1257:
				case MariaDBParser.CP850:
				case MariaDBParser.CP852:
				case MariaDBParser.CP866:
				case MariaDBParser.CP932:
				case MariaDBParser.DEC8:
				case MariaDBParser.EUCJPMS:
				case MariaDBParser.EUCKR:
				case MariaDBParser.GB18030:
				case MariaDBParser.GB2312:
				case MariaDBParser.GBK:
				case MariaDBParser.GEOSTD8:
				case MariaDBParser.GREEK:
				case MariaDBParser.HEBREW:
				case MariaDBParser.HP8:
				case MariaDBParser.KEYBCS2:
				case MariaDBParser.KOI8R:
				case MariaDBParser.KOI8U:
				case MariaDBParser.LATIN1:
				case MariaDBParser.LATIN2:
				case MariaDBParser.LATIN5:
				case MariaDBParser.LATIN7:
				case MariaDBParser.MACCE:
				case MariaDBParser.MACROMAN:
				case MariaDBParser.SJIS:
				case MariaDBParser.SWE7:
				case MariaDBParser.TIS620:
				case MariaDBParser.UCS2:
				case MariaDBParser.UJIS:
				case MariaDBParser.UTF16:
				case MariaDBParser.UTF16LE:
				case MariaDBParser.UTF32:
				case MariaDBParser.UTF8:
				case MariaDBParser.UTF8MB3:
				case MariaDBParser.UTF8MB4:
				case MariaDBParser.ARCHIVE:
				case MariaDBParser.BLACKHOLE:
				case MariaDBParser.CSV:
				case MariaDBParser.FEDERATED:
				case MariaDBParser.INNODB:
				case MariaDBParser.MEMORY:
				case MariaDBParser.MRG_MYISAM:
				case MariaDBParser.MYISAM:
				case MariaDBParser.NDB:
				case MariaDBParser.NDBCLUSTER:
				case MariaDBParser.PERFORMANCE_SCHEMA:
				case MariaDBParser.TOKUDB:
				case MariaDBParser.REPEATABLE:
				case MariaDBParser.COMMITTED:
				case MariaDBParser.UNCOMMITTED:
				case MariaDBParser.SERIALIZABLE:
				case MariaDBParser.GEOMETRYCOLLECTION:
				case MariaDBParser.LINESTRING:
				case MariaDBParser.MULTILINESTRING:
				case MariaDBParser.MULTIPOINT:
				case MariaDBParser.MULTIPOLYGON:
				case MariaDBParser.POINT:
				case MariaDBParser.POLYGON:
				case MariaDBParser.ABS:
				case MariaDBParser.ACOS:
				case MariaDBParser.ADDDATE:
				case MariaDBParser.ADDTIME:
				case MariaDBParser.AES_DECRYPT:
				case MariaDBParser.AES_ENCRYPT:
				case MariaDBParser.AREA:
				case MariaDBParser.ASBINARY:
				case MariaDBParser.ASIN:
				case MariaDBParser.ASTEXT:
				case MariaDBParser.ASWKB:
				case MariaDBParser.ASWKT:
				case MariaDBParser.ASYMMETRIC_DECRYPT:
				case MariaDBParser.ASYMMETRIC_DERIVE:
				case MariaDBParser.ASYMMETRIC_ENCRYPT:
				case MariaDBParser.ASYMMETRIC_SIGN:
				case MariaDBParser.ASYMMETRIC_VERIFY:
				case MariaDBParser.ATAN:
				case MariaDBParser.ATAN2:
				case MariaDBParser.BENCHMARK:
				case MariaDBParser.BIN:
				case MariaDBParser.BIT_COUNT:
				case MariaDBParser.BIT_LENGTH:
				case MariaDBParser.BUFFER:
				case MariaDBParser.CATALOG_NAME:
				case MariaDBParser.CEIL:
				case MariaDBParser.CEILING:
				case MariaDBParser.CENTROID:
				case MariaDBParser.CHARACTER_LENGTH:
				case MariaDBParser.CHARSET:
				case MariaDBParser.CHAR_LENGTH:
				case MariaDBParser.COERCIBILITY:
				case MariaDBParser.COLLATION:
				case MariaDBParser.COMPRESS:
				case MariaDBParser.CONCAT:
				case MariaDBParser.CONCAT_WS:
				case MariaDBParser.CONNECTION_ID:
				case MariaDBParser.CONV:
				case MariaDBParser.CONVERT_TZ:
				case MariaDBParser.COS:
				case MariaDBParser.COT:
				case MariaDBParser.CRC32:
				case MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY:
				case MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY:
				case MariaDBParser.CREATE_DH_PARAMETERS:
				case MariaDBParser.CREATE_DIGEST:
				case MariaDBParser.CROSSES:
				case MariaDBParser.DATEDIFF:
				case MariaDBParser.DATE_FORMAT:
				case MariaDBParser.DAYNAME:
				case MariaDBParser.DAYOFMONTH:
				case MariaDBParser.DAYOFWEEK:
				case MariaDBParser.DAYOFYEAR:
				case MariaDBParser.DECODE:
				case MariaDBParser.DEGREES:
				case MariaDBParser.DES_DECRYPT:
				case MariaDBParser.DES_ENCRYPT:
				case MariaDBParser.DIMENSION:
				case MariaDBParser.DISJOINT:
				case MariaDBParser.ELT:
				case MariaDBParser.ENCODE:
				case MariaDBParser.ENCRYPT:
				case MariaDBParser.ENDPOINT:
				case MariaDBParser.ENGINE_ATTRIBUTE:
				case MariaDBParser.ENVELOPE:
				case MariaDBParser.EQUALS:
				case MariaDBParser.EXP:
				case MariaDBParser.EXPORT_SET:
				case MariaDBParser.EXTERIORRING:
				case MariaDBParser.EXTRACTVALUE:
				case MariaDBParser.FIELD:
				case MariaDBParser.FIND_IN_SET:
				case MariaDBParser.FLOOR:
				case MariaDBParser.FORMAT:
				case MariaDBParser.FOUND_ROWS:
				case MariaDBParser.FROM_BASE64:
				case MariaDBParser.FROM_DAYS:
				case MariaDBParser.FROM_UNIXTIME:
				case MariaDBParser.GEOMCOLLFROMTEXT:
				case MariaDBParser.GEOMCOLLFROMWKB:
				case MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT:
				case MariaDBParser.GEOMETRYCOLLECTIONFROMWKB:
				case MariaDBParser.GEOMETRYFROMTEXT:
				case MariaDBParser.GEOMETRYFROMWKB:
				case MariaDBParser.GEOMETRYN:
				case MariaDBParser.GEOMETRYTYPE:
				case MariaDBParser.GEOMFROMTEXT:
				case MariaDBParser.GEOMFROMWKB:
				case MariaDBParser.GET_FORMAT:
				case MariaDBParser.GET_LOCK:
				case MariaDBParser.GLENGTH:
				case MariaDBParser.GREATEST:
				case MariaDBParser.GTID_SUBSET:
				case MariaDBParser.GTID_SUBTRACT:
				case MariaDBParser.HEX:
				case MariaDBParser.IFNULL:
				case MariaDBParser.INET6_ATON:
				case MariaDBParser.INET6_NTOA:
				case MariaDBParser.INET_ATON:
				case MariaDBParser.INET_NTOA:
				case MariaDBParser.INSTR:
				case MariaDBParser.INTERIORRINGN:
				case MariaDBParser.INTERSECTS:
				case MariaDBParser.ISCLOSED:
				case MariaDBParser.ISEMPTY:
				case MariaDBParser.ISNULL:
				case MariaDBParser.ISSIMPLE:
				case MariaDBParser.IS_FREE_LOCK:
				case MariaDBParser.IS_IPV4:
				case MariaDBParser.IS_IPV4_COMPAT:
				case MariaDBParser.IS_IPV4_MAPPED:
				case MariaDBParser.IS_IPV6:
				case MariaDBParser.IS_USED_LOCK:
				case MariaDBParser.LAST_INSERT_ID:
				case MariaDBParser.LCASE:
				case MariaDBParser.LEAST:
				case MariaDBParser.LENGTH:
				case MariaDBParser.LINEFROMTEXT:
				case MariaDBParser.LINEFROMWKB:
				case MariaDBParser.LINESTRINGFROMTEXT:
				case MariaDBParser.LINESTRINGFROMWKB:
				case MariaDBParser.LN:
				case MariaDBParser.LOAD_FILE:
				case MariaDBParser.LOCATE:
				case MariaDBParser.LOG:
				case MariaDBParser.LOG10:
				case MariaDBParser.LOG2:
				case MariaDBParser.LOWER:
				case MariaDBParser.LPAD:
				case MariaDBParser.LTRIM:
				case MariaDBParser.MAKEDATE:
				case MariaDBParser.MAKETIME:
				case MariaDBParser.MAKE_SET:
				case MariaDBParser.MASTER_POS_WAIT:
				case MariaDBParser.MBRCONTAINS:
				case MariaDBParser.MBRDISJOINT:
				case MariaDBParser.MBREQUAL:
				case MariaDBParser.MBRINTERSECTS:
				case MariaDBParser.MBROVERLAPS:
				case MariaDBParser.MBRTOUCHES:
				case MariaDBParser.MBRWITHIN:
				case MariaDBParser.MD5:
				case MariaDBParser.MLINEFROMTEXT:
				case MariaDBParser.MLINEFROMWKB:
				case MariaDBParser.MONTHNAME:
				case MariaDBParser.MPOINTFROMTEXT:
				case MariaDBParser.MPOINTFROMWKB:
				case MariaDBParser.MPOLYFROMTEXT:
				case MariaDBParser.MPOLYFROMWKB:
				case MariaDBParser.MULTILINESTRINGFROMTEXT:
				case MariaDBParser.MULTILINESTRINGFROMWKB:
				case MariaDBParser.MULTIPOINTFROMTEXT:
				case MariaDBParser.MULTIPOINTFROMWKB:
				case MariaDBParser.MULTIPOLYGONFROMTEXT:
				case MariaDBParser.MULTIPOLYGONFROMWKB:
				case MariaDBParser.NAME_CONST:
				case MariaDBParser.NULLIF:
				case MariaDBParser.NUMGEOMETRIES:
				case MariaDBParser.NUMINTERIORRINGS:
				case MariaDBParser.NUMPOINTS:
				case MariaDBParser.OCT:
				case MariaDBParser.OCTET_LENGTH:
				case MariaDBParser.ORD:
				case MariaDBParser.OVERLAPS:
				case MariaDBParser.PERIOD_ADD:
				case MariaDBParser.PERIOD_DIFF:
				case MariaDBParser.PI:
				case MariaDBParser.POINTFROMTEXT:
				case MariaDBParser.POINTFROMWKB:
				case MariaDBParser.POINTN:
				case MariaDBParser.POLYFROMTEXT:
				case MariaDBParser.POLYFROMWKB:
				case MariaDBParser.POLYGONFROMTEXT:
				case MariaDBParser.POLYGONFROMWKB:
				case MariaDBParser.POW:
				case MariaDBParser.POWER:
				case MariaDBParser.QUOTE:
				case MariaDBParser.RADIANS:
				case MariaDBParser.RAND:
				case MariaDBParser.RANDOM_BYTES:
				case MariaDBParser.RELEASE_LOCK:
				case MariaDBParser.REVERSE:
				case MariaDBParser.ROUND:
				case MariaDBParser.ROW_COUNT:
				case MariaDBParser.RPAD:
				case MariaDBParser.RTRIM:
				case MariaDBParser.SEC_TO_TIME:
				case MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE:
				case MariaDBParser.SESSION_USER:
				case MariaDBParser.SHA:
				case MariaDBParser.SHA1:
				case MariaDBParser.SHA2:
				case MariaDBParser.SCHEMA_NAME:
				case MariaDBParser.SIGN:
				case MariaDBParser.SIN:
				case MariaDBParser.SLEEP:
				case MariaDBParser.SOUNDEX:
				case MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS:
				case MariaDBParser.SQRT:
				case MariaDBParser.SRID:
				case MariaDBParser.STARTPOINT:
				case MariaDBParser.STRCMP:
				case MariaDBParser.STR_TO_DATE:
				case MariaDBParser.ST_AREA:
				case MariaDBParser.ST_ASBINARY:
				case MariaDBParser.ST_ASTEXT:
				case MariaDBParser.ST_ASWKB:
				case MariaDBParser.ST_ASWKT:
				case MariaDBParser.ST_BUFFER:
				case MariaDBParser.ST_CENTROID:
				case MariaDBParser.ST_CONTAINS:
				case MariaDBParser.ST_CROSSES:
				case MariaDBParser.ST_DIFFERENCE:
				case MariaDBParser.ST_DIMENSION:
				case MariaDBParser.ST_DISJOINT:
				case MariaDBParser.ST_DISTANCE:
				case MariaDBParser.ST_ENDPOINT:
				case MariaDBParser.ST_ENVELOPE:
				case MariaDBParser.ST_EQUALS:
				case MariaDBParser.ST_EXTERIORRING:
				case MariaDBParser.ST_GEOMCOLLFROMTEXT:
				case MariaDBParser.ST_GEOMCOLLFROMTXT:
				case MariaDBParser.ST_GEOMCOLLFROMWKB:
				case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
				case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB:
				case MariaDBParser.ST_GEOMETRYFROMTEXT:
				case MariaDBParser.ST_GEOMETRYFROMWKB:
				case MariaDBParser.ST_GEOMETRYN:
				case MariaDBParser.ST_GEOMETRYTYPE:
				case MariaDBParser.ST_GEOMFROMTEXT:
				case MariaDBParser.ST_GEOMFROMWKB:
				case MariaDBParser.ST_INTERIORRINGN:
				case MariaDBParser.ST_INTERSECTION:
				case MariaDBParser.ST_INTERSECTS:
				case MariaDBParser.ST_ISCLOSED:
				case MariaDBParser.ST_ISEMPTY:
				case MariaDBParser.ST_ISSIMPLE:
				case MariaDBParser.ST_LINEFROMTEXT:
				case MariaDBParser.ST_LINEFROMWKB:
				case MariaDBParser.ST_LINESTRINGFROMTEXT:
				case MariaDBParser.ST_LINESTRINGFROMWKB:
				case MariaDBParser.ST_NUMGEOMETRIES:
				case MariaDBParser.ST_NUMINTERIORRING:
				case MariaDBParser.ST_NUMINTERIORRINGS:
				case MariaDBParser.ST_NUMPOINTS:
				case MariaDBParser.ST_OVERLAPS:
				case MariaDBParser.ST_POINTFROMTEXT:
				case MariaDBParser.ST_POINTFROMWKB:
				case MariaDBParser.ST_POINTN:
				case MariaDBParser.ST_POLYFROMTEXT:
				case MariaDBParser.ST_POLYFROMWKB:
				case MariaDBParser.ST_POLYGONFROMTEXT:
				case MariaDBParser.ST_POLYGONFROMWKB:
				case MariaDBParser.ST_SRID:
				case MariaDBParser.ST_STARTPOINT:
				case MariaDBParser.ST_SYMDIFFERENCE:
				case MariaDBParser.ST_TOUCHES:
				case MariaDBParser.ST_UNION:
				case MariaDBParser.ST_WITHIN:
				case MariaDBParser.ST_X:
				case MariaDBParser.ST_Y:
				case MariaDBParser.SUBDATE:
				case MariaDBParser.SUBSTRING_INDEX:
				case MariaDBParser.SUBTIME:
				case MariaDBParser.SYSTEM_USER:
				case MariaDBParser.TAN:
				case MariaDBParser.TIMEDIFF:
				case MariaDBParser.TIMESTAMPADD:
				case MariaDBParser.TIMESTAMPDIFF:
				case MariaDBParser.TIME_FORMAT:
				case MariaDBParser.TIME_TO_SEC:
				case MariaDBParser.TOUCHES:
				case MariaDBParser.TO_BASE64:
				case MariaDBParser.TO_DAYS:
				case MariaDBParser.TO_SECONDS:
				case MariaDBParser.UCASE:
				case MariaDBParser.UNCOMPRESS:
				case MariaDBParser.UNCOMPRESSED_LENGTH:
				case MariaDBParser.UNHEX:
				case MariaDBParser.UNIX_TIMESTAMP:
				case MariaDBParser.UPDATEXML:
				case MariaDBParser.UPPER:
				case MariaDBParser.UUID:
				case MariaDBParser.UUID_SHORT:
				case MariaDBParser.VALIDATE_PASSWORD_STRENGTH:
				case MariaDBParser.VERSION:
				case MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case MariaDBParser.WEEKDAY:
				case MariaDBParser.WEEKOFYEAR:
				case MariaDBParser.WEIGHT_STRING:
				case MariaDBParser.WITHIN:
				case MariaDBParser.YEARWEEK:
				case MariaDBParser.Y_FUNCTION:
				case MariaDBParser.X_FUNCTION:
				case MariaDBParser.VIA:
				case MariaDBParser.LASTVAL:
				case MariaDBParser.NEXTVAL:
				case MariaDBParser.SETVAL:
				case MariaDBParser.PREVIOUS:
				case MariaDBParser.PERSISTENT:
				case MariaDBParser.BINLOG_MONITOR:
				case MariaDBParser.BINLOG_REPLAY:
				case MariaDBParser.FEDERATED_ADMIN:
				case MariaDBParser.READ_ONLY_ADMIN:
				case MariaDBParser.REPLICA:
				case MariaDBParser.REPLICAS:
				case MariaDBParser.REPLICATION_MASTER_ADMIN:
				case MariaDBParser.MONITOR:
				case MariaDBParser.READ_ONLY:
				case MariaDBParser.REPLAY:
				case MariaDBParser.MOD:
				case MariaDBParser.CHARSET_REVERSE_QOUTE_STRING:
				case MariaDBParser.STRING_LITERAL:
				case MariaDBParser.ID:
					{
					this.state = 3007;
					this.uidList();
					}
					break;
				case MariaDBParser.ALL:
					{
					this.state = 3008;
					this.match(MariaDBParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case MariaDBParser.COALESCE:
				_localctx = new AlterByCoalescePartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3011;
				this.match(MariaDBParser.COALESCE);
				this.state = 3012;
				this.match(MariaDBParser.PARTITION);
				this.state = 3013;
				this.decimalLiteral();
				}
				break;
			case MariaDBParser.REORGANIZE:
				_localctx = new AlterByReorganizePartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3014;
				this.match(MariaDBParser.REORGANIZE);
				this.state = 3015;
				this.match(MariaDBParser.PARTITION);
				this.state = 3016;
				this.uidList();
				this.state = 3017;
				this.match(MariaDBParser.INTO);
				this.state = 3018;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 3019;
				this.partitionDefinition();
				this.state = 3024;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 3020;
					this.match(MariaDBParser.COMMA);
					this.state = 3021;
					this.partitionDefinition();
					}
					}
					this.state = 3026;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3027;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;
			case MariaDBParser.EXCHANGE:
				_localctx = new AlterByExchangePartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3029;
				this.match(MariaDBParser.EXCHANGE);
				this.state = 3030;
				this.match(MariaDBParser.PARTITION);
				this.state = 3031;
				this.uid();
				this.state = 3032;
				this.match(MariaDBParser.WITH);
				this.state = 3033;
				this.match(MariaDBParser.TABLE);
				this.state = 3034;
				this.tableName();
				this.state = 3037;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.WITH || _la === MariaDBParser.WITHOUT) {
					{
					this.state = 3035;
					(_localctx as AlterByExchangePartitionContext)._validationFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MariaDBParser.WITH || _la === MariaDBParser.WITHOUT)) {
						(_localctx as AlterByExchangePartitionContext)._validationFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 3036;
					this.match(MariaDBParser.VALIDATION);
					}
				}

				}
				break;
			case MariaDBParser.ANALYZE:
				_localctx = new AlterByAnalyzePartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 3039;
				this.match(MariaDBParser.ANALYZE);
				this.state = 3040;
				this.match(MariaDBParser.PARTITION);
				this.state = 3043;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.ATTRIBUTE:
				case MariaDBParser.BODY:
				case MariaDBParser.BUCKETS:
				case MariaDBParser.CONDITION:
				case MariaDBParser.CURRENT:
				case MariaDBParser.CURRENT_ROLE:
				case MariaDBParser.CURRENT_USER:
				case MariaDBParser.DATABASE:
				case MariaDBParser.DEFAULT:
				case MariaDBParser.DIAGNOSTICS:
				case MariaDBParser.EMPTY:
				case MariaDBParser.EXCEPT:
				case MariaDBParser.GROUP:
				case MariaDBParser.IF:
				case MariaDBParser.IGNORED:
				case MariaDBParser.INSERT:
				case MariaDBParser.LATERAL:
				case MariaDBParser.LEFT:
				case MariaDBParser.LOCKED:
				case MariaDBParser.MAXVALUE:
				case MariaDBParser.MINVALUE:
				case MariaDBParser.NUMBER:
				case MariaDBParser.OPTIONAL:
				case MariaDBParser.ORDER:
				case MariaDBParser.PRIMARY:
				case MariaDBParser.PACKAGE:
				case MariaDBParser.REPLACE:
				case MariaDBParser.RIGHT:
				case MariaDBParser.SCHEMA:
				case MariaDBParser.SKIP_:
				case MariaDBParser.STACKED:
				case MariaDBParser.STATEMENT:
				case MariaDBParser.DATE:
				case MariaDBParser.TIME:
				case MariaDBParser.TIMESTAMP:
				case MariaDBParser.DATETIME:
				case MariaDBParser.YEAR:
				case MariaDBParser.BINARY:
				case MariaDBParser.TEXT:
				case MariaDBParser.ENUM:
				case MariaDBParser.SERIAL:
				case MariaDBParser.JSON_ARRAY:
				case MariaDBParser.JSON_ARRAYAGG:
				case MariaDBParser.JSON_ARRAY_APPEND:
				case MariaDBParser.JSON_ARRAY_INSERT:
				case MariaDBParser.JSON_CONTAINS:
				case MariaDBParser.JSON_CONTAINS_PATH:
				case MariaDBParser.JSON_DEPTH:
				case MariaDBParser.JSON_EXTRACT:
				case MariaDBParser.JSON_INSERT:
				case MariaDBParser.JSON_KEYS:
				case MariaDBParser.JSON_LENGTH:
				case MariaDBParser.JSON_MERGE:
				case MariaDBParser.JSON_MERGE_PATCH:
				case MariaDBParser.JSON_MERGE_PRESERVE:
				case MariaDBParser.JSON_OBJECT:
				case MariaDBParser.JSON_OBJECTAGG:
				case MariaDBParser.JSON_OVERLAPS:
				case MariaDBParser.JSON_PRETTY:
				case MariaDBParser.JSON_QUOTE:
				case MariaDBParser.JSON_REMOVE:
				case MariaDBParser.JSON_REPLACE:
				case MariaDBParser.JSON_SCHEMA_VALID:
				case MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT:
				case MariaDBParser.JSON_SEARCH:
				case MariaDBParser.JSON_SET:
				case MariaDBParser.JSON_STORAGE_FREE:
				case MariaDBParser.JSON_STORAGE_SIZE:
				case MariaDBParser.JSON_TABLE:
				case MariaDBParser.JSON_TYPE:
				case MariaDBParser.JSON_UNQUOTE:
				case MariaDBParser.JSON_VALID:
				case MariaDBParser.JSON_VALUE:
				case MariaDBParser.NESTED:
				case MariaDBParser.ORDINALITY:
				case MariaDBParser.PATH:
				case MariaDBParser.AVG:
				case MariaDBParser.BIT_AND:
				case MariaDBParser.BIT_OR:
				case MariaDBParser.BIT_XOR:
				case MariaDBParser.COUNT:
				case MariaDBParser.CUME_DIST:
				case MariaDBParser.DENSE_RANK:
				case MariaDBParser.FIRST_VALUE:
				case MariaDBParser.GROUP_CONCAT:
				case MariaDBParser.LAG:
				case MariaDBParser.LAST_VALUE:
				case MariaDBParser.LEAD:
				case MariaDBParser.MAX:
				case MariaDBParser.MIN:
				case MariaDBParser.NTILE:
				case MariaDBParser.NTH_VALUE:
				case MariaDBParser.PERCENT_RANK:
				case MariaDBParser.RANK:
				case MariaDBParser.ROW_NUMBER:
				case MariaDBParser.STD:
				case MariaDBParser.STDDEV:
				case MariaDBParser.STDDEV_POP:
				case MariaDBParser.STDDEV_SAMP:
				case MariaDBParser.SUM:
				case MariaDBParser.VAR_POP:
				case MariaDBParser.VAR_SAMP:
				case MariaDBParser.VARIANCE:
				case MariaDBParser.CURRENT_DATE:
				case MariaDBParser.CURRENT_TIME:
				case MariaDBParser.CURRENT_TIMESTAMP:
				case MariaDBParser.LOCALTIME:
				case MariaDBParser.CURDATE:
				case MariaDBParser.CURTIME:
				case MariaDBParser.DATE_ADD:
				case MariaDBParser.DATE_SUB:
				case MariaDBParser.LOCALTIMESTAMP:
				case MariaDBParser.NOW:
				case MariaDBParser.POSITION:
				case MariaDBParser.SUBSTR:
				case MariaDBParser.SUBSTRING:
				case MariaDBParser.SYSDATE:
				case MariaDBParser.TRIM:
				case MariaDBParser.UTC_DATE:
				case MariaDBParser.UTC_TIME:
				case MariaDBParser.UTC_TIMESTAMP:
				case MariaDBParser.ACCOUNT:
				case MariaDBParser.ACTION:
				case MariaDBParser.AFTER:
				case MariaDBParser.AGGREGATE:
				case MariaDBParser.ALGORITHM:
				case MariaDBParser.ANY:
				case MariaDBParser.AT:
				case MariaDBParser.AUTHORS:
				case MariaDBParser.AUTOCOMMIT:
				case MariaDBParser.AUTOEXTEND_SIZE:
				case MariaDBParser.AUTO_INCREMENT:
				case MariaDBParser.AVG_ROW_LENGTH:
				case MariaDBParser.BEGIN:
				case MariaDBParser.BINLOG:
				case MariaDBParser.BIT:
				case MariaDBParser.BLOCK:
				case MariaDBParser.BOOL:
				case MariaDBParser.BOOLEAN:
				case MariaDBParser.BTREE:
				case MariaDBParser.CACHE:
				case MariaDBParser.CASCADED:
				case MariaDBParser.CHAIN:
				case MariaDBParser.CHANGED:
				case MariaDBParser.CHANNEL:
				case MariaDBParser.CHECKSUM:
				case MariaDBParser.PAGE_CHECKSUM:
				case MariaDBParser.CIPHER:
				case MariaDBParser.CLASS_ORIGIN:
				case MariaDBParser.CLIENT:
				case MariaDBParser.CLOSE:
				case MariaDBParser.CLUSTERING:
				case MariaDBParser.COALESCE:
				case MariaDBParser.CODE:
				case MariaDBParser.COLUMNS:
				case MariaDBParser.COLUMN_FORMAT:
				case MariaDBParser.COLUMN_NAME:
				case MariaDBParser.COMMENT:
				case MariaDBParser.COMMIT:
				case MariaDBParser.COMPACT:
				case MariaDBParser.COMPLETION:
				case MariaDBParser.COMPRESSED:
				case MariaDBParser.COMPRESSION:
				case MariaDBParser.CONCURRENT:
				case MariaDBParser.CONNECT:
				case MariaDBParser.CONNECTION:
				case MariaDBParser.CONSISTENT:
				case MariaDBParser.CONSTRAINT_CATALOG:
				case MariaDBParser.CONSTRAINT_SCHEMA:
				case MariaDBParser.CONSTRAINT_NAME:
				case MariaDBParser.CONTAINS:
				case MariaDBParser.CONTEXT:
				case MariaDBParser.CONTRIBUTORS:
				case MariaDBParser.COPY:
				case MariaDBParser.CPU:
				case MariaDBParser.CYCLE:
				case MariaDBParser.CURSOR_NAME:
				case MariaDBParser.DATA:
				case MariaDBParser.DATAFILE:
				case MariaDBParser.DEALLOCATE:
				case MariaDBParser.DEFAULT_AUTH:
				case MariaDBParser.DEFINER:
				case MariaDBParser.DELAY_KEY_WRITE:
				case MariaDBParser.DES_KEY_FILE:
				case MariaDBParser.DIRECTORY:
				case MariaDBParser.DISABLE:
				case MariaDBParser.DISCARD:
				case MariaDBParser.DISK:
				case MariaDBParser.DO:
				case MariaDBParser.DUMPFILE:
				case MariaDBParser.DUPLICATE:
				case MariaDBParser.DYNAMIC:
				case MariaDBParser.ENABLE:
				case MariaDBParser.ENCRYPTED:
				case MariaDBParser.ENCRYPTION:
				case MariaDBParser.ENCRYPTION_KEY_ID:
				case MariaDBParser.END:
				case MariaDBParser.ENDS:
				case MariaDBParser.ENGINE:
				case MariaDBParser.ENGINES:
				case MariaDBParser.ERROR:
				case MariaDBParser.ERRORS:
				case MariaDBParser.ESCAPE:
				case MariaDBParser.EVEN:
				case MariaDBParser.EVENT:
				case MariaDBParser.EVENTS:
				case MariaDBParser.EVERY:
				case MariaDBParser.EXCHANGE:
				case MariaDBParser.EXCLUSIVE:
				case MariaDBParser.EXPIRE:
				case MariaDBParser.EXPORT:
				case MariaDBParser.EXTENDED:
				case MariaDBParser.EXTENT_SIZE:
				case MariaDBParser.FAILED_LOGIN_ATTEMPTS:
				case MariaDBParser.FAST:
				case MariaDBParser.FAULTS:
				case MariaDBParser.FIELDS:
				case MariaDBParser.FILE_BLOCK_SIZE:
				case MariaDBParser.FILTER:
				case MariaDBParser.FIRST:
				case MariaDBParser.FIXED:
				case MariaDBParser.FLUSH:
				case MariaDBParser.FOLLOWS:
				case MariaDBParser.FOUND:
				case MariaDBParser.FULL:
				case MariaDBParser.FUNCTION:
				case MariaDBParser.GENERAL:
				case MariaDBParser.GLOBAL:
				case MariaDBParser.GRANTS:
				case MariaDBParser.GROUP_REPLICATION:
				case MariaDBParser.HANDLER:
				case MariaDBParser.HASH:
				case MariaDBParser.HELP:
				case MariaDBParser.HISTORY:
				case MariaDBParser.HOST:
				case MariaDBParser.HOSTS:
				case MariaDBParser.IDENTIFIED:
				case MariaDBParser.IGNORE_SERVER_IDS:
				case MariaDBParser.IMPORT:
				case MariaDBParser.INCREMENT:
				case MariaDBParser.INDEXES:
				case MariaDBParser.INITIAL_SIZE:
				case MariaDBParser.INPLACE:
				case MariaDBParser.INSERT_METHOD:
				case MariaDBParser.INSTALL:
				case MariaDBParser.INSTANCE:
				case MariaDBParser.INSTANT:
				case MariaDBParser.INVISIBLE:
				case MariaDBParser.INVOKER:
				case MariaDBParser.IO:
				case MariaDBParser.IO_THREAD:
				case MariaDBParser.IPC:
				case MariaDBParser.ISOLATION:
				case MariaDBParser.ISSUER:
				case MariaDBParser.JSON:
				case MariaDBParser.KEY_BLOCK_SIZE:
				case MariaDBParser.LANGUAGE:
				case MariaDBParser.LAST:
				case MariaDBParser.LEAVES:
				case MariaDBParser.LESS:
				case MariaDBParser.LEVEL:
				case MariaDBParser.LIST:
				case MariaDBParser.LOCAL:
				case MariaDBParser.LOCALES:
				case MariaDBParser.LOGFILE:
				case MariaDBParser.LOGS:
				case MariaDBParser.MASTER:
				case MariaDBParser.MASTER_AUTO_POSITION:
				case MariaDBParser.MASTER_CONNECT_RETRY:
				case MariaDBParser.MASTER_DELAY:
				case MariaDBParser.MASTER_HEARTBEAT_PERIOD:
				case MariaDBParser.MASTER_HOST:
				case MariaDBParser.MASTER_LOG_FILE:
				case MariaDBParser.MASTER_LOG_POS:
				case MariaDBParser.MASTER_PASSWORD:
				case MariaDBParser.MASTER_PORT:
				case MariaDBParser.MASTER_RETRY_COUNT:
				case MariaDBParser.MASTER_SSL:
				case MariaDBParser.MASTER_SSL_CA:
				case MariaDBParser.MASTER_SSL_CAPATH:
				case MariaDBParser.MASTER_SSL_CERT:
				case MariaDBParser.MASTER_SSL_CIPHER:
				case MariaDBParser.MASTER_SSL_CRL:
				case MariaDBParser.MASTER_SSL_CRLPATH:
				case MariaDBParser.MASTER_SSL_KEY:
				case MariaDBParser.MASTER_TLS_VERSION:
				case MariaDBParser.MASTER_USER:
				case MariaDBParser.MAX_CONNECTIONS_PER_HOUR:
				case MariaDBParser.MAX_QUERIES_PER_HOUR:
				case MariaDBParser.MAX_ROWS:
				case MariaDBParser.MAX_SIZE:
				case MariaDBParser.MAX_UPDATES_PER_HOUR:
				case MariaDBParser.MAX_USER_CONNECTIONS:
				case MariaDBParser.MEDIUM:
				case MariaDBParser.MEMBER:
				case MariaDBParser.MERGE:
				case MariaDBParser.MESSAGE_TEXT:
				case MariaDBParser.MID:
				case MariaDBParser.MIGRATE:
				case MariaDBParser.MIN_ROWS:
				case MariaDBParser.MODE:
				case MariaDBParser.MODIFY:
				case MariaDBParser.MUTEX:
				case MariaDBParser.MYSQL:
				case MariaDBParser.MYSQL_ERRNO:
				case MariaDBParser.NAME:
				case MariaDBParser.NAMES:
				case MariaDBParser.NCHAR:
				case MariaDBParser.NEVER:
				case MariaDBParser.NEXT:
				case MariaDBParser.NO:
				case MariaDBParser.NOCACHE:
				case MariaDBParser.NOCOPY:
				case MariaDBParser.NOCYCLE:
				case MariaDBParser.NOMAXVALUE:
				case MariaDBParser.NOMINVALUE:
				case MariaDBParser.NOWAIT:
				case MariaDBParser.NODEGROUP:
				case MariaDBParser.NONE:
				case MariaDBParser.ODBC:
				case MariaDBParser.OFFLINE:
				case MariaDBParser.OFFSET:
				case MariaDBParser.OF:
				case MariaDBParser.OJ:
				case MariaDBParser.OLD_PASSWORD:
				case MariaDBParser.ONE:
				case MariaDBParser.ONLINE:
				case MariaDBParser.ONLY:
				case MariaDBParser.OPEN:
				case MariaDBParser.OPTIMIZER_COSTS:
				case MariaDBParser.OPTIONS:
				case MariaDBParser.OWNER:
				case MariaDBParser.PACK_KEYS:
				case MariaDBParser.PAGE:
				case MariaDBParser.PARSER:
				case MariaDBParser.PARTIAL:
				case MariaDBParser.PARTITIONING:
				case MariaDBParser.PARTITIONS:
				case MariaDBParser.PASSWORD:
				case MariaDBParser.PASSWORD_LOCK_TIME:
				case MariaDBParser.PHASE:
				case MariaDBParser.PLUGIN:
				case MariaDBParser.PLUGIN_DIR:
				case MariaDBParser.PLUGINS:
				case MariaDBParser.PORT:
				case MariaDBParser.PRECEDES:
				case MariaDBParser.PREPARE:
				case MariaDBParser.PRESERVE:
				case MariaDBParser.PREV:
				case MariaDBParser.PROCESSLIST:
				case MariaDBParser.PROFILE:
				case MariaDBParser.PROFILES:
				case MariaDBParser.PROXY:
				case MariaDBParser.QUERY:
				case MariaDBParser.QUERY_RESPONSE_TIME:
				case MariaDBParser.QUICK:
				case MariaDBParser.REBUILD:
				case MariaDBParser.RECOVER:
				case MariaDBParser.RECURSIVE:
				case MariaDBParser.REDO_BUFFER_SIZE:
				case MariaDBParser.REDUNDANT:
				case MariaDBParser.RELAY:
				case MariaDBParser.RELAY_LOG_FILE:
				case MariaDBParser.RELAY_LOG_POS:
				case MariaDBParser.RELAYLOG:
				case MariaDBParser.REMOVE:
				case MariaDBParser.REORGANIZE:
				case MariaDBParser.REPAIR:
				case MariaDBParser.REPLICATE_DO_DB:
				case MariaDBParser.REPLICATE_DO_TABLE:
				case MariaDBParser.REPLICATE_IGNORE_DB:
				case MariaDBParser.REPLICATE_IGNORE_TABLE:
				case MariaDBParser.REPLICATE_REWRITE_DB:
				case MariaDBParser.REPLICATE_WILD_DO_TABLE:
				case MariaDBParser.REPLICATE_WILD_IGNORE_TABLE:
				case MariaDBParser.REPLICATION:
				case MariaDBParser.RESET:
				case MariaDBParser.RESTART:
				case MariaDBParser.RESUME:
				case MariaDBParser.RETURNED_SQLSTATE:
				case MariaDBParser.RETURNS:
				case MariaDBParser.REUSE:
				case MariaDBParser.ROLE:
				case MariaDBParser.ROLLBACK:
				case MariaDBParser.ROLLUP:
				case MariaDBParser.ROTATE:
				case MariaDBParser.ROW:
				case MariaDBParser.ROWS:
				case MariaDBParser.ROW_FORMAT:
				case MariaDBParser.RTREE:
				case MariaDBParser.SAVEPOINT:
				case MariaDBParser.SCHEDULE:
				case MariaDBParser.SECURITY:
				case MariaDBParser.SEQUENCE:
				case MariaDBParser.SERVER:
				case MariaDBParser.SESSION:
				case MariaDBParser.SHARE:
				case MariaDBParser.SHARED:
				case MariaDBParser.SIGNED:
				case MariaDBParser.SIMPLE:
				case MariaDBParser.SLAVE:
				case MariaDBParser.SLAVES:
				case MariaDBParser.SLOW:
				case MariaDBParser.SNAPSHOT:
				case MariaDBParser.SOCKET:
				case MariaDBParser.SOME:
				case MariaDBParser.SONAME:
				case MariaDBParser.SOUNDS:
				case MariaDBParser.SOURCE:
				case MariaDBParser.SQL_AFTER_GTIDS:
				case MariaDBParser.SQL_AFTER_MTS_GAPS:
				case MariaDBParser.SQL_BEFORE_GTIDS:
				case MariaDBParser.SQL_BUFFER_RESULT:
				case MariaDBParser.SQL_CACHE:
				case MariaDBParser.SQL_NO_CACHE:
				case MariaDBParser.SQL_THREAD:
				case MariaDBParser.START:
				case MariaDBParser.STARTS:
				case MariaDBParser.STATS_AUTO_RECALC:
				case MariaDBParser.STATS_PERSISTENT:
				case MariaDBParser.STATS_SAMPLE_PAGES:
				case MariaDBParser.STATUS:
				case MariaDBParser.STOP:
				case MariaDBParser.STORAGE:
				case MariaDBParser.STRING:
				case MariaDBParser.SUBCLASS_ORIGIN:
				case MariaDBParser.SUBJECT:
				case MariaDBParser.SUBPARTITION:
				case MariaDBParser.SUBPARTITIONS:
				case MariaDBParser.SUSPEND:
				case MariaDBParser.SWAPS:
				case MariaDBParser.SWITCHES:
				case MariaDBParser.TABLE_NAME:
				case MariaDBParser.TABLESPACE:
				case MariaDBParser.TABLE_TYPE:
				case MariaDBParser.TEMPORARY:
				case MariaDBParser.TEMPTABLE:
				case MariaDBParser.THAN:
				case MariaDBParser.TRADITIONAL:
				case MariaDBParser.TRANSACTION:
				case MariaDBParser.TRANSACTIONAL:
				case MariaDBParser.TRIGGERS:
				case MariaDBParser.TRUNCATE:
				case MariaDBParser.TYPES:
				case MariaDBParser.UNBOUNDED:
				case MariaDBParser.UNDEFINED:
				case MariaDBParser.UNDOFILE:
				case MariaDBParser.UNDO_BUFFER_SIZE:
				case MariaDBParser.UNINSTALL:
				case MariaDBParser.UNKNOWN:
				case MariaDBParser.UNTIL:
				case MariaDBParser.UPGRADE:
				case MariaDBParser.USER:
				case MariaDBParser.USE_FRM:
				case MariaDBParser.USER_RESOURCES:
				case MariaDBParser.VALIDATION:
				case MariaDBParser.VALUE:
				case MariaDBParser.VARIABLES:
				case MariaDBParser.VIEW:
				case MariaDBParser.VIRTUAL:
				case MariaDBParser.VISIBLE:
				case MariaDBParser.WAIT:
				case MariaDBParser.WARNINGS:
				case MariaDBParser.WITHOUT:
				case MariaDBParser.WORK:
				case MariaDBParser.WRAPPER:
				case MariaDBParser.WSREP_MEMBERSHIP:
				case MariaDBParser.WSREP_STATUS:
				case MariaDBParser.X509:
				case MariaDBParser.XA:
				case MariaDBParser.XML:
				case MariaDBParser.EUR:
				case MariaDBParser.USA:
				case MariaDBParser.JIS:
				case MariaDBParser.ISO:
				case MariaDBParser.INTERNAL:
				case MariaDBParser.QUARTER:
				case MariaDBParser.MONTH:
				case MariaDBParser.DAY:
				case MariaDBParser.HOUR:
				case MariaDBParser.MINUTE:
				case MariaDBParser.WEEK:
				case MariaDBParser.SECOND:
				case MariaDBParser.MICROSECOND:
				case MariaDBParser.USER_STATISTICS:
				case MariaDBParser.CLIENT_STATISTICS:
				case MariaDBParser.INDEX_STATISTICS:
				case MariaDBParser.TABLE_STATISTICS:
				case MariaDBParser.ADMIN:
				case MariaDBParser.AUDIT_ADMIN:
				case MariaDBParser.BACKUP_ADMIN:
				case MariaDBParser.BINLOG_ADMIN:
				case MariaDBParser.BINLOG_ENCRYPTION_ADMIN:
				case MariaDBParser.CLONE_ADMIN:
				case MariaDBParser.CONNECTION_ADMIN:
				case MariaDBParser.ENCRYPTION_KEY_ADMIN:
				case MariaDBParser.EXECUTE:
				case MariaDBParser.FILE:
				case MariaDBParser.FIREWALL_ADMIN:
				case MariaDBParser.FIREWALL_USER:
				case MariaDBParser.GROUP_REPLICATION_ADMIN:
				case MariaDBParser.INNODB_REDO_LOG_ARCHIVE:
				case MariaDBParser.INVOKE:
				case MariaDBParser.LAMBDA:
				case MariaDBParser.NDB_STORED_USER:
				case MariaDBParser.PASSWORDLESS_USER_ADMIN:
				case MariaDBParser.PERSIST_RO_VARIABLES_ADMIN:
				case MariaDBParser.PRIVILEGES:
				case MariaDBParser.PROCESS:
				case MariaDBParser.RELOAD:
				case MariaDBParser.REPLICATION_APPLIER:
				case MariaDBParser.REPLICATION_SLAVE_ADMIN:
				case MariaDBParser.RESOURCE_GROUP_ADMIN:
				case MariaDBParser.RESOURCE_GROUP_USER:
				case MariaDBParser.ROLE_ADMIN:
				case MariaDBParser.ROUTINE:
				case MariaDBParser.S3:
				case MariaDBParser.SESSION_VARIABLES_ADMIN:
				case MariaDBParser.SET_USER_ID:
				case MariaDBParser.SHOW_ROUTINE:
				case MariaDBParser.SHUTDOWN:
				case MariaDBParser.SUPER:
				case MariaDBParser.SYSTEM_VARIABLES_ADMIN:
				case MariaDBParser.TABLES:
				case MariaDBParser.TABLE_ENCRYPTION_ADMIN:
				case MariaDBParser.VERSION_TOKEN_ADMIN:
				case MariaDBParser.XA_RECOVER_ADMIN:
				case MariaDBParser.ARMSCII8:
				case MariaDBParser.ASCII:
				case MariaDBParser.BIG5:
				case MariaDBParser.CP1250:
				case MariaDBParser.CP1251:
				case MariaDBParser.CP1256:
				case MariaDBParser.CP1257:
				case MariaDBParser.CP850:
				case MariaDBParser.CP852:
				case MariaDBParser.CP866:
				case MariaDBParser.CP932:
				case MariaDBParser.DEC8:
				case MariaDBParser.EUCJPMS:
				case MariaDBParser.EUCKR:
				case MariaDBParser.GB18030:
				case MariaDBParser.GB2312:
				case MariaDBParser.GBK:
				case MariaDBParser.GEOSTD8:
				case MariaDBParser.GREEK:
				case MariaDBParser.HEBREW:
				case MariaDBParser.HP8:
				case MariaDBParser.KEYBCS2:
				case MariaDBParser.KOI8R:
				case MariaDBParser.KOI8U:
				case MariaDBParser.LATIN1:
				case MariaDBParser.LATIN2:
				case MariaDBParser.LATIN5:
				case MariaDBParser.LATIN7:
				case MariaDBParser.MACCE:
				case MariaDBParser.MACROMAN:
				case MariaDBParser.SJIS:
				case MariaDBParser.SWE7:
				case MariaDBParser.TIS620:
				case MariaDBParser.UCS2:
				case MariaDBParser.UJIS:
				case MariaDBParser.UTF16:
				case MariaDBParser.UTF16LE:
				case MariaDBParser.UTF32:
				case MariaDBParser.UTF8:
				case MariaDBParser.UTF8MB3:
				case MariaDBParser.UTF8MB4:
				case MariaDBParser.ARCHIVE:
				case MariaDBParser.BLACKHOLE:
				case MariaDBParser.CSV:
				case MariaDBParser.FEDERATED:
				case MariaDBParser.INNODB:
				case MariaDBParser.MEMORY:
				case MariaDBParser.MRG_MYISAM:
				case MariaDBParser.MYISAM:
				case MariaDBParser.NDB:
				case MariaDBParser.NDBCLUSTER:
				case MariaDBParser.PERFORMANCE_SCHEMA:
				case MariaDBParser.TOKUDB:
				case MariaDBParser.REPEATABLE:
				case MariaDBParser.COMMITTED:
				case MariaDBParser.UNCOMMITTED:
				case MariaDBParser.SERIALIZABLE:
				case MariaDBParser.GEOMETRYCOLLECTION:
				case MariaDBParser.LINESTRING:
				case MariaDBParser.MULTILINESTRING:
				case MariaDBParser.MULTIPOINT:
				case MariaDBParser.MULTIPOLYGON:
				case MariaDBParser.POINT:
				case MariaDBParser.POLYGON:
				case MariaDBParser.ABS:
				case MariaDBParser.ACOS:
				case MariaDBParser.ADDDATE:
				case MariaDBParser.ADDTIME:
				case MariaDBParser.AES_DECRYPT:
				case MariaDBParser.AES_ENCRYPT:
				case MariaDBParser.AREA:
				case MariaDBParser.ASBINARY:
				case MariaDBParser.ASIN:
				case MariaDBParser.ASTEXT:
				case MariaDBParser.ASWKB:
				case MariaDBParser.ASWKT:
				case MariaDBParser.ASYMMETRIC_DECRYPT:
				case MariaDBParser.ASYMMETRIC_DERIVE:
				case MariaDBParser.ASYMMETRIC_ENCRYPT:
				case MariaDBParser.ASYMMETRIC_SIGN:
				case MariaDBParser.ASYMMETRIC_VERIFY:
				case MariaDBParser.ATAN:
				case MariaDBParser.ATAN2:
				case MariaDBParser.BENCHMARK:
				case MariaDBParser.BIN:
				case MariaDBParser.BIT_COUNT:
				case MariaDBParser.BIT_LENGTH:
				case MariaDBParser.BUFFER:
				case MariaDBParser.CATALOG_NAME:
				case MariaDBParser.CEIL:
				case MariaDBParser.CEILING:
				case MariaDBParser.CENTROID:
				case MariaDBParser.CHARACTER_LENGTH:
				case MariaDBParser.CHARSET:
				case MariaDBParser.CHAR_LENGTH:
				case MariaDBParser.COERCIBILITY:
				case MariaDBParser.COLLATION:
				case MariaDBParser.COMPRESS:
				case MariaDBParser.CONCAT:
				case MariaDBParser.CONCAT_WS:
				case MariaDBParser.CONNECTION_ID:
				case MariaDBParser.CONV:
				case MariaDBParser.CONVERT_TZ:
				case MariaDBParser.COS:
				case MariaDBParser.COT:
				case MariaDBParser.CRC32:
				case MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY:
				case MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY:
				case MariaDBParser.CREATE_DH_PARAMETERS:
				case MariaDBParser.CREATE_DIGEST:
				case MariaDBParser.CROSSES:
				case MariaDBParser.DATEDIFF:
				case MariaDBParser.DATE_FORMAT:
				case MariaDBParser.DAYNAME:
				case MariaDBParser.DAYOFMONTH:
				case MariaDBParser.DAYOFWEEK:
				case MariaDBParser.DAYOFYEAR:
				case MariaDBParser.DECODE:
				case MariaDBParser.DEGREES:
				case MariaDBParser.DES_DECRYPT:
				case MariaDBParser.DES_ENCRYPT:
				case MariaDBParser.DIMENSION:
				case MariaDBParser.DISJOINT:
				case MariaDBParser.ELT:
				case MariaDBParser.ENCODE:
				case MariaDBParser.ENCRYPT:
				case MariaDBParser.ENDPOINT:
				case MariaDBParser.ENGINE_ATTRIBUTE:
				case MariaDBParser.ENVELOPE:
				case MariaDBParser.EQUALS:
				case MariaDBParser.EXP:
				case MariaDBParser.EXPORT_SET:
				case MariaDBParser.EXTERIORRING:
				case MariaDBParser.EXTRACTVALUE:
				case MariaDBParser.FIELD:
				case MariaDBParser.FIND_IN_SET:
				case MariaDBParser.FLOOR:
				case MariaDBParser.FORMAT:
				case MariaDBParser.FOUND_ROWS:
				case MariaDBParser.FROM_BASE64:
				case MariaDBParser.FROM_DAYS:
				case MariaDBParser.FROM_UNIXTIME:
				case MariaDBParser.GEOMCOLLFROMTEXT:
				case MariaDBParser.GEOMCOLLFROMWKB:
				case MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT:
				case MariaDBParser.GEOMETRYCOLLECTIONFROMWKB:
				case MariaDBParser.GEOMETRYFROMTEXT:
				case MariaDBParser.GEOMETRYFROMWKB:
				case MariaDBParser.GEOMETRYN:
				case MariaDBParser.GEOMETRYTYPE:
				case MariaDBParser.GEOMFROMTEXT:
				case MariaDBParser.GEOMFROMWKB:
				case MariaDBParser.GET_FORMAT:
				case MariaDBParser.GET_LOCK:
				case MariaDBParser.GLENGTH:
				case MariaDBParser.GREATEST:
				case MariaDBParser.GTID_SUBSET:
				case MariaDBParser.GTID_SUBTRACT:
				case MariaDBParser.HEX:
				case MariaDBParser.IFNULL:
				case MariaDBParser.INET6_ATON:
				case MariaDBParser.INET6_NTOA:
				case MariaDBParser.INET_ATON:
				case MariaDBParser.INET_NTOA:
				case MariaDBParser.INSTR:
				case MariaDBParser.INTERIORRINGN:
				case MariaDBParser.INTERSECTS:
				case MariaDBParser.ISCLOSED:
				case MariaDBParser.ISEMPTY:
				case MariaDBParser.ISNULL:
				case MariaDBParser.ISSIMPLE:
				case MariaDBParser.IS_FREE_LOCK:
				case MariaDBParser.IS_IPV4:
				case MariaDBParser.IS_IPV4_COMPAT:
				case MariaDBParser.IS_IPV4_MAPPED:
				case MariaDBParser.IS_IPV6:
				case MariaDBParser.IS_USED_LOCK:
				case MariaDBParser.LAST_INSERT_ID:
				case MariaDBParser.LCASE:
				case MariaDBParser.LEAST:
				case MariaDBParser.LENGTH:
				case MariaDBParser.LINEFROMTEXT:
				case MariaDBParser.LINEFROMWKB:
				case MariaDBParser.LINESTRINGFROMTEXT:
				case MariaDBParser.LINESTRINGFROMWKB:
				case MariaDBParser.LN:
				case MariaDBParser.LOAD_FILE:
				case MariaDBParser.LOCATE:
				case MariaDBParser.LOG:
				case MariaDBParser.LOG10:
				case MariaDBParser.LOG2:
				case MariaDBParser.LOWER:
				case MariaDBParser.LPAD:
				case MariaDBParser.LTRIM:
				case MariaDBParser.MAKEDATE:
				case MariaDBParser.MAKETIME:
				case MariaDBParser.MAKE_SET:
				case MariaDBParser.MASTER_POS_WAIT:
				case MariaDBParser.MBRCONTAINS:
				case MariaDBParser.MBRDISJOINT:
				case MariaDBParser.MBREQUAL:
				case MariaDBParser.MBRINTERSECTS:
				case MariaDBParser.MBROVERLAPS:
				case MariaDBParser.MBRTOUCHES:
				case MariaDBParser.MBRWITHIN:
				case MariaDBParser.MD5:
				case MariaDBParser.MLINEFROMTEXT:
				case MariaDBParser.MLINEFROMWKB:
				case MariaDBParser.MONTHNAME:
				case MariaDBParser.MPOINTFROMTEXT:
				case MariaDBParser.MPOINTFROMWKB:
				case MariaDBParser.MPOLYFROMTEXT:
				case MariaDBParser.MPOLYFROMWKB:
				case MariaDBParser.MULTILINESTRINGFROMTEXT:
				case MariaDBParser.MULTILINESTRINGFROMWKB:
				case MariaDBParser.MULTIPOINTFROMTEXT:
				case MariaDBParser.MULTIPOINTFROMWKB:
				case MariaDBParser.MULTIPOLYGONFROMTEXT:
				case MariaDBParser.MULTIPOLYGONFROMWKB:
				case MariaDBParser.NAME_CONST:
				case MariaDBParser.NULLIF:
				case MariaDBParser.NUMGEOMETRIES:
				case MariaDBParser.NUMINTERIORRINGS:
				case MariaDBParser.NUMPOINTS:
				case MariaDBParser.OCT:
				case MariaDBParser.OCTET_LENGTH:
				case MariaDBParser.ORD:
				case MariaDBParser.OVERLAPS:
				case MariaDBParser.PERIOD_ADD:
				case MariaDBParser.PERIOD_DIFF:
				case MariaDBParser.PI:
				case MariaDBParser.POINTFROMTEXT:
				case MariaDBParser.POINTFROMWKB:
				case MariaDBParser.POINTN:
				case MariaDBParser.POLYFROMTEXT:
				case MariaDBParser.POLYFROMWKB:
				case MariaDBParser.POLYGONFROMTEXT:
				case MariaDBParser.POLYGONFROMWKB:
				case MariaDBParser.POW:
				case MariaDBParser.POWER:
				case MariaDBParser.QUOTE:
				case MariaDBParser.RADIANS:
				case MariaDBParser.RAND:
				case MariaDBParser.RANDOM_BYTES:
				case MariaDBParser.RELEASE_LOCK:
				case MariaDBParser.REVERSE:
				case MariaDBParser.ROUND:
				case MariaDBParser.ROW_COUNT:
				case MariaDBParser.RPAD:
				case MariaDBParser.RTRIM:
				case MariaDBParser.SEC_TO_TIME:
				case MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE:
				case MariaDBParser.SESSION_USER:
				case MariaDBParser.SHA:
				case MariaDBParser.SHA1:
				case MariaDBParser.SHA2:
				case MariaDBParser.SCHEMA_NAME:
				case MariaDBParser.SIGN:
				case MariaDBParser.SIN:
				case MariaDBParser.SLEEP:
				case MariaDBParser.SOUNDEX:
				case MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS:
				case MariaDBParser.SQRT:
				case MariaDBParser.SRID:
				case MariaDBParser.STARTPOINT:
				case MariaDBParser.STRCMP:
				case MariaDBParser.STR_TO_DATE:
				case MariaDBParser.ST_AREA:
				case MariaDBParser.ST_ASBINARY:
				case MariaDBParser.ST_ASTEXT:
				case MariaDBParser.ST_ASWKB:
				case MariaDBParser.ST_ASWKT:
				case MariaDBParser.ST_BUFFER:
				case MariaDBParser.ST_CENTROID:
				case MariaDBParser.ST_CONTAINS:
				case MariaDBParser.ST_CROSSES:
				case MariaDBParser.ST_DIFFERENCE:
				case MariaDBParser.ST_DIMENSION:
				case MariaDBParser.ST_DISJOINT:
				case MariaDBParser.ST_DISTANCE:
				case MariaDBParser.ST_ENDPOINT:
				case MariaDBParser.ST_ENVELOPE:
				case MariaDBParser.ST_EQUALS:
				case MariaDBParser.ST_EXTERIORRING:
				case MariaDBParser.ST_GEOMCOLLFROMTEXT:
				case MariaDBParser.ST_GEOMCOLLFROMTXT:
				case MariaDBParser.ST_GEOMCOLLFROMWKB:
				case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
				case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB:
				case MariaDBParser.ST_GEOMETRYFROMTEXT:
				case MariaDBParser.ST_GEOMETRYFROMWKB:
				case MariaDBParser.ST_GEOMETRYN:
				case MariaDBParser.ST_GEOMETRYTYPE:
				case MariaDBParser.ST_GEOMFROMTEXT:
				case MariaDBParser.ST_GEOMFROMWKB:
				case MariaDBParser.ST_INTERIORRINGN:
				case MariaDBParser.ST_INTERSECTION:
				case MariaDBParser.ST_INTERSECTS:
				case MariaDBParser.ST_ISCLOSED:
				case MariaDBParser.ST_ISEMPTY:
				case MariaDBParser.ST_ISSIMPLE:
				case MariaDBParser.ST_LINEFROMTEXT:
				case MariaDBParser.ST_LINEFROMWKB:
				case MariaDBParser.ST_LINESTRINGFROMTEXT:
				case MariaDBParser.ST_LINESTRINGFROMWKB:
				case MariaDBParser.ST_NUMGEOMETRIES:
				case MariaDBParser.ST_NUMINTERIORRING:
				case MariaDBParser.ST_NUMINTERIORRINGS:
				case MariaDBParser.ST_NUMPOINTS:
				case MariaDBParser.ST_OVERLAPS:
				case MariaDBParser.ST_POINTFROMTEXT:
				case MariaDBParser.ST_POINTFROMWKB:
				case MariaDBParser.ST_POINTN:
				case MariaDBParser.ST_POLYFROMTEXT:
				case MariaDBParser.ST_POLYFROMWKB:
				case MariaDBParser.ST_POLYGONFROMTEXT:
				case MariaDBParser.ST_POLYGONFROMWKB:
				case MariaDBParser.ST_SRID:
				case MariaDBParser.ST_STARTPOINT:
				case MariaDBParser.ST_SYMDIFFERENCE:
				case MariaDBParser.ST_TOUCHES:
				case MariaDBParser.ST_UNION:
				case MariaDBParser.ST_WITHIN:
				case MariaDBParser.ST_X:
				case MariaDBParser.ST_Y:
				case MariaDBParser.SUBDATE:
				case MariaDBParser.SUBSTRING_INDEX:
				case MariaDBParser.SUBTIME:
				case MariaDBParser.SYSTEM_USER:
				case MariaDBParser.TAN:
				case MariaDBParser.TIMEDIFF:
				case MariaDBParser.TIMESTAMPADD:
				case MariaDBParser.TIMESTAMPDIFF:
				case MariaDBParser.TIME_FORMAT:
				case MariaDBParser.TIME_TO_SEC:
				case MariaDBParser.TOUCHES:
				case MariaDBParser.TO_BASE64:
				case MariaDBParser.TO_DAYS:
				case MariaDBParser.TO_SECONDS:
				case MariaDBParser.UCASE:
				case MariaDBParser.UNCOMPRESS:
				case MariaDBParser.UNCOMPRESSED_LENGTH:
				case MariaDBParser.UNHEX:
				case MariaDBParser.UNIX_TIMESTAMP:
				case MariaDBParser.UPDATEXML:
				case MariaDBParser.UPPER:
				case MariaDBParser.UUID:
				case MariaDBParser.UUID_SHORT:
				case MariaDBParser.VALIDATE_PASSWORD_STRENGTH:
				case MariaDBParser.VERSION:
				case MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case MariaDBParser.WEEKDAY:
				case MariaDBParser.WEEKOFYEAR:
				case MariaDBParser.WEIGHT_STRING:
				case MariaDBParser.WITHIN:
				case MariaDBParser.YEARWEEK:
				case MariaDBParser.Y_FUNCTION:
				case MariaDBParser.X_FUNCTION:
				case MariaDBParser.VIA:
				case MariaDBParser.LASTVAL:
				case MariaDBParser.NEXTVAL:
				case MariaDBParser.SETVAL:
				case MariaDBParser.PREVIOUS:
				case MariaDBParser.PERSISTENT:
				case MariaDBParser.BINLOG_MONITOR:
				case MariaDBParser.BINLOG_REPLAY:
				case MariaDBParser.FEDERATED_ADMIN:
				case MariaDBParser.READ_ONLY_ADMIN:
				case MariaDBParser.REPLICA:
				case MariaDBParser.REPLICAS:
				case MariaDBParser.REPLICATION_MASTER_ADMIN:
				case MariaDBParser.MONITOR:
				case MariaDBParser.READ_ONLY:
				case MariaDBParser.REPLAY:
				case MariaDBParser.MOD:
				case MariaDBParser.CHARSET_REVERSE_QOUTE_STRING:
				case MariaDBParser.STRING_LITERAL:
				case MariaDBParser.ID:
					{
					this.state = 3041;
					this.uidList();
					}
					break;
				case MariaDBParser.ALL:
					{
					this.state = 3042;
					this.match(MariaDBParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case MariaDBParser.CHECK:
				_localctx = new AlterByCheckPartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 3045;
				this.match(MariaDBParser.CHECK);
				this.state = 3046;
				this.match(MariaDBParser.PARTITION);
				this.state = 3049;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.ATTRIBUTE:
				case MariaDBParser.BODY:
				case MariaDBParser.BUCKETS:
				case MariaDBParser.CONDITION:
				case MariaDBParser.CURRENT:
				case MariaDBParser.CURRENT_ROLE:
				case MariaDBParser.CURRENT_USER:
				case MariaDBParser.DATABASE:
				case MariaDBParser.DEFAULT:
				case MariaDBParser.DIAGNOSTICS:
				case MariaDBParser.EMPTY:
				case MariaDBParser.EXCEPT:
				case MariaDBParser.GROUP:
				case MariaDBParser.IF:
				case MariaDBParser.IGNORED:
				case MariaDBParser.INSERT:
				case MariaDBParser.LATERAL:
				case MariaDBParser.LEFT:
				case MariaDBParser.LOCKED:
				case MariaDBParser.MAXVALUE:
				case MariaDBParser.MINVALUE:
				case MariaDBParser.NUMBER:
				case MariaDBParser.OPTIONAL:
				case MariaDBParser.ORDER:
				case MariaDBParser.PRIMARY:
				case MariaDBParser.PACKAGE:
				case MariaDBParser.REPLACE:
				case MariaDBParser.RIGHT:
				case MariaDBParser.SCHEMA:
				case MariaDBParser.SKIP_:
				case MariaDBParser.STACKED:
				case MariaDBParser.STATEMENT:
				case MariaDBParser.DATE:
				case MariaDBParser.TIME:
				case MariaDBParser.TIMESTAMP:
				case MariaDBParser.DATETIME:
				case MariaDBParser.YEAR:
				case MariaDBParser.BINARY:
				case MariaDBParser.TEXT:
				case MariaDBParser.ENUM:
				case MariaDBParser.SERIAL:
				case MariaDBParser.JSON_ARRAY:
				case MariaDBParser.JSON_ARRAYAGG:
				case MariaDBParser.JSON_ARRAY_APPEND:
				case MariaDBParser.JSON_ARRAY_INSERT:
				case MariaDBParser.JSON_CONTAINS:
				case MariaDBParser.JSON_CONTAINS_PATH:
				case MariaDBParser.JSON_DEPTH:
				case MariaDBParser.JSON_EXTRACT:
				case MariaDBParser.JSON_INSERT:
				case MariaDBParser.JSON_KEYS:
				case MariaDBParser.JSON_LENGTH:
				case MariaDBParser.JSON_MERGE:
				case MariaDBParser.JSON_MERGE_PATCH:
				case MariaDBParser.JSON_MERGE_PRESERVE:
				case MariaDBParser.JSON_OBJECT:
				case MariaDBParser.JSON_OBJECTAGG:
				case MariaDBParser.JSON_OVERLAPS:
				case MariaDBParser.JSON_PRETTY:
				case MariaDBParser.JSON_QUOTE:
				case MariaDBParser.JSON_REMOVE:
				case MariaDBParser.JSON_REPLACE:
				case MariaDBParser.JSON_SCHEMA_VALID:
				case MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT:
				case MariaDBParser.JSON_SEARCH:
				case MariaDBParser.JSON_SET:
				case MariaDBParser.JSON_STORAGE_FREE:
				case MariaDBParser.JSON_STORAGE_SIZE:
				case MariaDBParser.JSON_TABLE:
				case MariaDBParser.JSON_TYPE:
				case MariaDBParser.JSON_UNQUOTE:
				case MariaDBParser.JSON_VALID:
				case MariaDBParser.JSON_VALUE:
				case MariaDBParser.NESTED:
				case MariaDBParser.ORDINALITY:
				case MariaDBParser.PATH:
				case MariaDBParser.AVG:
				case MariaDBParser.BIT_AND:
				case MariaDBParser.BIT_OR:
				case MariaDBParser.BIT_XOR:
				case MariaDBParser.COUNT:
				case MariaDBParser.CUME_DIST:
				case MariaDBParser.DENSE_RANK:
				case MariaDBParser.FIRST_VALUE:
				case MariaDBParser.GROUP_CONCAT:
				case MariaDBParser.LAG:
				case MariaDBParser.LAST_VALUE:
				case MariaDBParser.LEAD:
				case MariaDBParser.MAX:
				case MariaDBParser.MIN:
				case MariaDBParser.NTILE:
				case MariaDBParser.NTH_VALUE:
				case MariaDBParser.PERCENT_RANK:
				case MariaDBParser.RANK:
				case MariaDBParser.ROW_NUMBER:
				case MariaDBParser.STD:
				case MariaDBParser.STDDEV:
				case MariaDBParser.STDDEV_POP:
				case MariaDBParser.STDDEV_SAMP:
				case MariaDBParser.SUM:
				case MariaDBParser.VAR_POP:
				case MariaDBParser.VAR_SAMP:
				case MariaDBParser.VARIANCE:
				case MariaDBParser.CURRENT_DATE:
				case MariaDBParser.CURRENT_TIME:
				case MariaDBParser.CURRENT_TIMESTAMP:
				case MariaDBParser.LOCALTIME:
				case MariaDBParser.CURDATE:
				case MariaDBParser.CURTIME:
				case MariaDBParser.DATE_ADD:
				case MariaDBParser.DATE_SUB:
				case MariaDBParser.LOCALTIMESTAMP:
				case MariaDBParser.NOW:
				case MariaDBParser.POSITION:
				case MariaDBParser.SUBSTR:
				case MariaDBParser.SUBSTRING:
				case MariaDBParser.SYSDATE:
				case MariaDBParser.TRIM:
				case MariaDBParser.UTC_DATE:
				case MariaDBParser.UTC_TIME:
				case MariaDBParser.UTC_TIMESTAMP:
				case MariaDBParser.ACCOUNT:
				case MariaDBParser.ACTION:
				case MariaDBParser.AFTER:
				case MariaDBParser.AGGREGATE:
				case MariaDBParser.ALGORITHM:
				case MariaDBParser.ANY:
				case MariaDBParser.AT:
				case MariaDBParser.AUTHORS:
				case MariaDBParser.AUTOCOMMIT:
				case MariaDBParser.AUTOEXTEND_SIZE:
				case MariaDBParser.AUTO_INCREMENT:
				case MariaDBParser.AVG_ROW_LENGTH:
				case MariaDBParser.BEGIN:
				case MariaDBParser.BINLOG:
				case MariaDBParser.BIT:
				case MariaDBParser.BLOCK:
				case MariaDBParser.BOOL:
				case MariaDBParser.BOOLEAN:
				case MariaDBParser.BTREE:
				case MariaDBParser.CACHE:
				case MariaDBParser.CASCADED:
				case MariaDBParser.CHAIN:
				case MariaDBParser.CHANGED:
				case MariaDBParser.CHANNEL:
				case MariaDBParser.CHECKSUM:
				case MariaDBParser.PAGE_CHECKSUM:
				case MariaDBParser.CIPHER:
				case MariaDBParser.CLASS_ORIGIN:
				case MariaDBParser.CLIENT:
				case MariaDBParser.CLOSE:
				case MariaDBParser.CLUSTERING:
				case MariaDBParser.COALESCE:
				case MariaDBParser.CODE:
				case MariaDBParser.COLUMNS:
				case MariaDBParser.COLUMN_FORMAT:
				case MariaDBParser.COLUMN_NAME:
				case MariaDBParser.COMMENT:
				case MariaDBParser.COMMIT:
				case MariaDBParser.COMPACT:
				case MariaDBParser.COMPLETION:
				case MariaDBParser.COMPRESSED:
				case MariaDBParser.COMPRESSION:
				case MariaDBParser.CONCURRENT:
				case MariaDBParser.CONNECT:
				case MariaDBParser.CONNECTION:
				case MariaDBParser.CONSISTENT:
				case MariaDBParser.CONSTRAINT_CATALOG:
				case MariaDBParser.CONSTRAINT_SCHEMA:
				case MariaDBParser.CONSTRAINT_NAME:
				case MariaDBParser.CONTAINS:
				case MariaDBParser.CONTEXT:
				case MariaDBParser.CONTRIBUTORS:
				case MariaDBParser.COPY:
				case MariaDBParser.CPU:
				case MariaDBParser.CYCLE:
				case MariaDBParser.CURSOR_NAME:
				case MariaDBParser.DATA:
				case MariaDBParser.DATAFILE:
				case MariaDBParser.DEALLOCATE:
				case MariaDBParser.DEFAULT_AUTH:
				case MariaDBParser.DEFINER:
				case MariaDBParser.DELAY_KEY_WRITE:
				case MariaDBParser.DES_KEY_FILE:
				case MariaDBParser.DIRECTORY:
				case MariaDBParser.DISABLE:
				case MariaDBParser.DISCARD:
				case MariaDBParser.DISK:
				case MariaDBParser.DO:
				case MariaDBParser.DUMPFILE:
				case MariaDBParser.DUPLICATE:
				case MariaDBParser.DYNAMIC:
				case MariaDBParser.ENABLE:
				case MariaDBParser.ENCRYPTED:
				case MariaDBParser.ENCRYPTION:
				case MariaDBParser.ENCRYPTION_KEY_ID:
				case MariaDBParser.END:
				case MariaDBParser.ENDS:
				case MariaDBParser.ENGINE:
				case MariaDBParser.ENGINES:
				case MariaDBParser.ERROR:
				case MariaDBParser.ERRORS:
				case MariaDBParser.ESCAPE:
				case MariaDBParser.EVEN:
				case MariaDBParser.EVENT:
				case MariaDBParser.EVENTS:
				case MariaDBParser.EVERY:
				case MariaDBParser.EXCHANGE:
				case MariaDBParser.EXCLUSIVE:
				case MariaDBParser.EXPIRE:
				case MariaDBParser.EXPORT:
				case MariaDBParser.EXTENDED:
				case MariaDBParser.EXTENT_SIZE:
				case MariaDBParser.FAILED_LOGIN_ATTEMPTS:
				case MariaDBParser.FAST:
				case MariaDBParser.FAULTS:
				case MariaDBParser.FIELDS:
				case MariaDBParser.FILE_BLOCK_SIZE:
				case MariaDBParser.FILTER:
				case MariaDBParser.FIRST:
				case MariaDBParser.FIXED:
				case MariaDBParser.FLUSH:
				case MariaDBParser.FOLLOWS:
				case MariaDBParser.FOUND:
				case MariaDBParser.FULL:
				case MariaDBParser.FUNCTION:
				case MariaDBParser.GENERAL:
				case MariaDBParser.GLOBAL:
				case MariaDBParser.GRANTS:
				case MariaDBParser.GROUP_REPLICATION:
				case MariaDBParser.HANDLER:
				case MariaDBParser.HASH:
				case MariaDBParser.HELP:
				case MariaDBParser.HISTORY:
				case MariaDBParser.HOST:
				case MariaDBParser.HOSTS:
				case MariaDBParser.IDENTIFIED:
				case MariaDBParser.IGNORE_SERVER_IDS:
				case MariaDBParser.IMPORT:
				case MariaDBParser.INCREMENT:
				case MariaDBParser.INDEXES:
				case MariaDBParser.INITIAL_SIZE:
				case MariaDBParser.INPLACE:
				case MariaDBParser.INSERT_METHOD:
				case MariaDBParser.INSTALL:
				case MariaDBParser.INSTANCE:
				case MariaDBParser.INSTANT:
				case MariaDBParser.INVISIBLE:
				case MariaDBParser.INVOKER:
				case MariaDBParser.IO:
				case MariaDBParser.IO_THREAD:
				case MariaDBParser.IPC:
				case MariaDBParser.ISOLATION:
				case MariaDBParser.ISSUER:
				case MariaDBParser.JSON:
				case MariaDBParser.KEY_BLOCK_SIZE:
				case MariaDBParser.LANGUAGE:
				case MariaDBParser.LAST:
				case MariaDBParser.LEAVES:
				case MariaDBParser.LESS:
				case MariaDBParser.LEVEL:
				case MariaDBParser.LIST:
				case MariaDBParser.LOCAL:
				case MariaDBParser.LOCALES:
				case MariaDBParser.LOGFILE:
				case MariaDBParser.LOGS:
				case MariaDBParser.MASTER:
				case MariaDBParser.MASTER_AUTO_POSITION:
				case MariaDBParser.MASTER_CONNECT_RETRY:
				case MariaDBParser.MASTER_DELAY:
				case MariaDBParser.MASTER_HEARTBEAT_PERIOD:
				case MariaDBParser.MASTER_HOST:
				case MariaDBParser.MASTER_LOG_FILE:
				case MariaDBParser.MASTER_LOG_POS:
				case MariaDBParser.MASTER_PASSWORD:
				case MariaDBParser.MASTER_PORT:
				case MariaDBParser.MASTER_RETRY_COUNT:
				case MariaDBParser.MASTER_SSL:
				case MariaDBParser.MASTER_SSL_CA:
				case MariaDBParser.MASTER_SSL_CAPATH:
				case MariaDBParser.MASTER_SSL_CERT:
				case MariaDBParser.MASTER_SSL_CIPHER:
				case MariaDBParser.MASTER_SSL_CRL:
				case MariaDBParser.MASTER_SSL_CRLPATH:
				case MariaDBParser.MASTER_SSL_KEY:
				case MariaDBParser.MASTER_TLS_VERSION:
				case MariaDBParser.MASTER_USER:
				case MariaDBParser.MAX_CONNECTIONS_PER_HOUR:
				case MariaDBParser.MAX_QUERIES_PER_HOUR:
				case MariaDBParser.MAX_ROWS:
				case MariaDBParser.MAX_SIZE:
				case MariaDBParser.MAX_UPDATES_PER_HOUR:
				case MariaDBParser.MAX_USER_CONNECTIONS:
				case MariaDBParser.MEDIUM:
				case MariaDBParser.MEMBER:
				case MariaDBParser.MERGE:
				case MariaDBParser.MESSAGE_TEXT:
				case MariaDBParser.MID:
				case MariaDBParser.MIGRATE:
				case MariaDBParser.MIN_ROWS:
				case MariaDBParser.MODE:
				case MariaDBParser.MODIFY:
				case MariaDBParser.MUTEX:
				case MariaDBParser.MYSQL:
				case MariaDBParser.MYSQL_ERRNO:
				case MariaDBParser.NAME:
				case MariaDBParser.NAMES:
				case MariaDBParser.NCHAR:
				case MariaDBParser.NEVER:
				case MariaDBParser.NEXT:
				case MariaDBParser.NO:
				case MariaDBParser.NOCACHE:
				case MariaDBParser.NOCOPY:
				case MariaDBParser.NOCYCLE:
				case MariaDBParser.NOMAXVALUE:
				case MariaDBParser.NOMINVALUE:
				case MariaDBParser.NOWAIT:
				case MariaDBParser.NODEGROUP:
				case MariaDBParser.NONE:
				case MariaDBParser.ODBC:
				case MariaDBParser.OFFLINE:
				case MariaDBParser.OFFSET:
				case MariaDBParser.OF:
				case MariaDBParser.OJ:
				case MariaDBParser.OLD_PASSWORD:
				case MariaDBParser.ONE:
				case MariaDBParser.ONLINE:
				case MariaDBParser.ONLY:
				case MariaDBParser.OPEN:
				case MariaDBParser.OPTIMIZER_COSTS:
				case MariaDBParser.OPTIONS:
				case MariaDBParser.OWNER:
				case MariaDBParser.PACK_KEYS:
				case MariaDBParser.PAGE:
				case MariaDBParser.PARSER:
				case MariaDBParser.PARTIAL:
				case MariaDBParser.PARTITIONING:
				case MariaDBParser.PARTITIONS:
				case MariaDBParser.PASSWORD:
				case MariaDBParser.PASSWORD_LOCK_TIME:
				case MariaDBParser.PHASE:
				case MariaDBParser.PLUGIN:
				case MariaDBParser.PLUGIN_DIR:
				case MariaDBParser.PLUGINS:
				case MariaDBParser.PORT:
				case MariaDBParser.PRECEDES:
				case MariaDBParser.PREPARE:
				case MariaDBParser.PRESERVE:
				case MariaDBParser.PREV:
				case MariaDBParser.PROCESSLIST:
				case MariaDBParser.PROFILE:
				case MariaDBParser.PROFILES:
				case MariaDBParser.PROXY:
				case MariaDBParser.QUERY:
				case MariaDBParser.QUERY_RESPONSE_TIME:
				case MariaDBParser.QUICK:
				case MariaDBParser.REBUILD:
				case MariaDBParser.RECOVER:
				case MariaDBParser.RECURSIVE:
				case MariaDBParser.REDO_BUFFER_SIZE:
				case MariaDBParser.REDUNDANT:
				case MariaDBParser.RELAY:
				case MariaDBParser.RELAY_LOG_FILE:
				case MariaDBParser.RELAY_LOG_POS:
				case MariaDBParser.RELAYLOG:
				case MariaDBParser.REMOVE:
				case MariaDBParser.REORGANIZE:
				case MariaDBParser.REPAIR:
				case MariaDBParser.REPLICATE_DO_DB:
				case MariaDBParser.REPLICATE_DO_TABLE:
				case MariaDBParser.REPLICATE_IGNORE_DB:
				case MariaDBParser.REPLICATE_IGNORE_TABLE:
				case MariaDBParser.REPLICATE_REWRITE_DB:
				case MariaDBParser.REPLICATE_WILD_DO_TABLE:
				case MariaDBParser.REPLICATE_WILD_IGNORE_TABLE:
				case MariaDBParser.REPLICATION:
				case MariaDBParser.RESET:
				case MariaDBParser.RESTART:
				case MariaDBParser.RESUME:
				case MariaDBParser.RETURNED_SQLSTATE:
				case MariaDBParser.RETURNS:
				case MariaDBParser.REUSE:
				case MariaDBParser.ROLE:
				case MariaDBParser.ROLLBACK:
				case MariaDBParser.ROLLUP:
				case MariaDBParser.ROTATE:
				case MariaDBParser.ROW:
				case MariaDBParser.ROWS:
				case MariaDBParser.ROW_FORMAT:
				case MariaDBParser.RTREE:
				case MariaDBParser.SAVEPOINT:
				case MariaDBParser.SCHEDULE:
				case MariaDBParser.SECURITY:
				case MariaDBParser.SEQUENCE:
				case MariaDBParser.SERVER:
				case MariaDBParser.SESSION:
				case MariaDBParser.SHARE:
				case MariaDBParser.SHARED:
				case MariaDBParser.SIGNED:
				case MariaDBParser.SIMPLE:
				case MariaDBParser.SLAVE:
				case MariaDBParser.SLAVES:
				case MariaDBParser.SLOW:
				case MariaDBParser.SNAPSHOT:
				case MariaDBParser.SOCKET:
				case MariaDBParser.SOME:
				case MariaDBParser.SONAME:
				case MariaDBParser.SOUNDS:
				case MariaDBParser.SOURCE:
				case MariaDBParser.SQL_AFTER_GTIDS:
				case MariaDBParser.SQL_AFTER_MTS_GAPS:
				case MariaDBParser.SQL_BEFORE_GTIDS:
				case MariaDBParser.SQL_BUFFER_RESULT:
				case MariaDBParser.SQL_CACHE:
				case MariaDBParser.SQL_NO_CACHE:
				case MariaDBParser.SQL_THREAD:
				case MariaDBParser.START:
				case MariaDBParser.STARTS:
				case MariaDBParser.STATS_AUTO_RECALC:
				case MariaDBParser.STATS_PERSISTENT:
				case MariaDBParser.STATS_SAMPLE_PAGES:
				case MariaDBParser.STATUS:
				case MariaDBParser.STOP:
				case MariaDBParser.STORAGE:
				case MariaDBParser.STRING:
				case MariaDBParser.SUBCLASS_ORIGIN:
				case MariaDBParser.SUBJECT:
				case MariaDBParser.SUBPARTITION:
				case MariaDBParser.SUBPARTITIONS:
				case MariaDBParser.SUSPEND:
				case MariaDBParser.SWAPS:
				case MariaDBParser.SWITCHES:
				case MariaDBParser.TABLE_NAME:
				case MariaDBParser.TABLESPACE:
				case MariaDBParser.TABLE_TYPE:
				case MariaDBParser.TEMPORARY:
				case MariaDBParser.TEMPTABLE:
				case MariaDBParser.THAN:
				case MariaDBParser.TRADITIONAL:
				case MariaDBParser.TRANSACTION:
				case MariaDBParser.TRANSACTIONAL:
				case MariaDBParser.TRIGGERS:
				case MariaDBParser.TRUNCATE:
				case MariaDBParser.TYPES:
				case MariaDBParser.UNBOUNDED:
				case MariaDBParser.UNDEFINED:
				case MariaDBParser.UNDOFILE:
				case MariaDBParser.UNDO_BUFFER_SIZE:
				case MariaDBParser.UNINSTALL:
				case MariaDBParser.UNKNOWN:
				case MariaDBParser.UNTIL:
				case MariaDBParser.UPGRADE:
				case MariaDBParser.USER:
				case MariaDBParser.USE_FRM:
				case MariaDBParser.USER_RESOURCES:
				case MariaDBParser.VALIDATION:
				case MariaDBParser.VALUE:
				case MariaDBParser.VARIABLES:
				case MariaDBParser.VIEW:
				case MariaDBParser.VIRTUAL:
				case MariaDBParser.VISIBLE:
				case MariaDBParser.WAIT:
				case MariaDBParser.WARNINGS:
				case MariaDBParser.WITHOUT:
				case MariaDBParser.WORK:
				case MariaDBParser.WRAPPER:
				case MariaDBParser.WSREP_MEMBERSHIP:
				case MariaDBParser.WSREP_STATUS:
				case MariaDBParser.X509:
				case MariaDBParser.XA:
				case MariaDBParser.XML:
				case MariaDBParser.EUR:
				case MariaDBParser.USA:
				case MariaDBParser.JIS:
				case MariaDBParser.ISO:
				case MariaDBParser.INTERNAL:
				case MariaDBParser.QUARTER:
				case MariaDBParser.MONTH:
				case MariaDBParser.DAY:
				case MariaDBParser.HOUR:
				case MariaDBParser.MINUTE:
				case MariaDBParser.WEEK:
				case MariaDBParser.SECOND:
				case MariaDBParser.MICROSECOND:
				case MariaDBParser.USER_STATISTICS:
				case MariaDBParser.CLIENT_STATISTICS:
				case MariaDBParser.INDEX_STATISTICS:
				case MariaDBParser.TABLE_STATISTICS:
				case MariaDBParser.ADMIN:
				case MariaDBParser.AUDIT_ADMIN:
				case MariaDBParser.BACKUP_ADMIN:
				case MariaDBParser.BINLOG_ADMIN:
				case MariaDBParser.BINLOG_ENCRYPTION_ADMIN:
				case MariaDBParser.CLONE_ADMIN:
				case MariaDBParser.CONNECTION_ADMIN:
				case MariaDBParser.ENCRYPTION_KEY_ADMIN:
				case MariaDBParser.EXECUTE:
				case MariaDBParser.FILE:
				case MariaDBParser.FIREWALL_ADMIN:
				case MariaDBParser.FIREWALL_USER:
				case MariaDBParser.GROUP_REPLICATION_ADMIN:
				case MariaDBParser.INNODB_REDO_LOG_ARCHIVE:
				case MariaDBParser.INVOKE:
				case MariaDBParser.LAMBDA:
				case MariaDBParser.NDB_STORED_USER:
				case MariaDBParser.PASSWORDLESS_USER_ADMIN:
				case MariaDBParser.PERSIST_RO_VARIABLES_ADMIN:
				case MariaDBParser.PRIVILEGES:
				case MariaDBParser.PROCESS:
				case MariaDBParser.RELOAD:
				case MariaDBParser.REPLICATION_APPLIER:
				case MariaDBParser.REPLICATION_SLAVE_ADMIN:
				case MariaDBParser.RESOURCE_GROUP_ADMIN:
				case MariaDBParser.RESOURCE_GROUP_USER:
				case MariaDBParser.ROLE_ADMIN:
				case MariaDBParser.ROUTINE:
				case MariaDBParser.S3:
				case MariaDBParser.SESSION_VARIABLES_ADMIN:
				case MariaDBParser.SET_USER_ID:
				case MariaDBParser.SHOW_ROUTINE:
				case MariaDBParser.SHUTDOWN:
				case MariaDBParser.SUPER:
				case MariaDBParser.SYSTEM_VARIABLES_ADMIN:
				case MariaDBParser.TABLES:
				case MariaDBParser.TABLE_ENCRYPTION_ADMIN:
				case MariaDBParser.VERSION_TOKEN_ADMIN:
				case MariaDBParser.XA_RECOVER_ADMIN:
				case MariaDBParser.ARMSCII8:
				case MariaDBParser.ASCII:
				case MariaDBParser.BIG5:
				case MariaDBParser.CP1250:
				case MariaDBParser.CP1251:
				case MariaDBParser.CP1256:
				case MariaDBParser.CP1257:
				case MariaDBParser.CP850:
				case MariaDBParser.CP852:
				case MariaDBParser.CP866:
				case MariaDBParser.CP932:
				case MariaDBParser.DEC8:
				case MariaDBParser.EUCJPMS:
				case MariaDBParser.EUCKR:
				case MariaDBParser.GB18030:
				case MariaDBParser.GB2312:
				case MariaDBParser.GBK:
				case MariaDBParser.GEOSTD8:
				case MariaDBParser.GREEK:
				case MariaDBParser.HEBREW:
				case MariaDBParser.HP8:
				case MariaDBParser.KEYBCS2:
				case MariaDBParser.KOI8R:
				case MariaDBParser.KOI8U:
				case MariaDBParser.LATIN1:
				case MariaDBParser.LATIN2:
				case MariaDBParser.LATIN5:
				case MariaDBParser.LATIN7:
				case MariaDBParser.MACCE:
				case MariaDBParser.MACROMAN:
				case MariaDBParser.SJIS:
				case MariaDBParser.SWE7:
				case MariaDBParser.TIS620:
				case MariaDBParser.UCS2:
				case MariaDBParser.UJIS:
				case MariaDBParser.UTF16:
				case MariaDBParser.UTF16LE:
				case MariaDBParser.UTF32:
				case MariaDBParser.UTF8:
				case MariaDBParser.UTF8MB3:
				case MariaDBParser.UTF8MB4:
				case MariaDBParser.ARCHIVE:
				case MariaDBParser.BLACKHOLE:
				case MariaDBParser.CSV:
				case MariaDBParser.FEDERATED:
				case MariaDBParser.INNODB:
				case MariaDBParser.MEMORY:
				case MariaDBParser.MRG_MYISAM:
				case MariaDBParser.MYISAM:
				case MariaDBParser.NDB:
				case MariaDBParser.NDBCLUSTER:
				case MariaDBParser.PERFORMANCE_SCHEMA:
				case MariaDBParser.TOKUDB:
				case MariaDBParser.REPEATABLE:
				case MariaDBParser.COMMITTED:
				case MariaDBParser.UNCOMMITTED:
				case MariaDBParser.SERIALIZABLE:
				case MariaDBParser.GEOMETRYCOLLECTION:
				case MariaDBParser.LINESTRING:
				case MariaDBParser.MULTILINESTRING:
				case MariaDBParser.MULTIPOINT:
				case MariaDBParser.MULTIPOLYGON:
				case MariaDBParser.POINT:
				case MariaDBParser.POLYGON:
				case MariaDBParser.ABS:
				case MariaDBParser.ACOS:
				case MariaDBParser.ADDDATE:
				case MariaDBParser.ADDTIME:
				case MariaDBParser.AES_DECRYPT:
				case MariaDBParser.AES_ENCRYPT:
				case MariaDBParser.AREA:
				case MariaDBParser.ASBINARY:
				case MariaDBParser.ASIN:
				case MariaDBParser.ASTEXT:
				case MariaDBParser.ASWKB:
				case MariaDBParser.ASWKT:
				case MariaDBParser.ASYMMETRIC_DECRYPT:
				case MariaDBParser.ASYMMETRIC_DERIVE:
				case MariaDBParser.ASYMMETRIC_ENCRYPT:
				case MariaDBParser.ASYMMETRIC_SIGN:
				case MariaDBParser.ASYMMETRIC_VERIFY:
				case MariaDBParser.ATAN:
				case MariaDBParser.ATAN2:
				case MariaDBParser.BENCHMARK:
				case MariaDBParser.BIN:
				case MariaDBParser.BIT_COUNT:
				case MariaDBParser.BIT_LENGTH:
				case MariaDBParser.BUFFER:
				case MariaDBParser.CATALOG_NAME:
				case MariaDBParser.CEIL:
				case MariaDBParser.CEILING:
				case MariaDBParser.CENTROID:
				case MariaDBParser.CHARACTER_LENGTH:
				case MariaDBParser.CHARSET:
				case MariaDBParser.CHAR_LENGTH:
				case MariaDBParser.COERCIBILITY:
				case MariaDBParser.COLLATION:
				case MariaDBParser.COMPRESS:
				case MariaDBParser.CONCAT:
				case MariaDBParser.CONCAT_WS:
				case MariaDBParser.CONNECTION_ID:
				case MariaDBParser.CONV:
				case MariaDBParser.CONVERT_TZ:
				case MariaDBParser.COS:
				case MariaDBParser.COT:
				case MariaDBParser.CRC32:
				case MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY:
				case MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY:
				case MariaDBParser.CREATE_DH_PARAMETERS:
				case MariaDBParser.CREATE_DIGEST:
				case MariaDBParser.CROSSES:
				case MariaDBParser.DATEDIFF:
				case MariaDBParser.DATE_FORMAT:
				case MariaDBParser.DAYNAME:
				case MariaDBParser.DAYOFMONTH:
				case MariaDBParser.DAYOFWEEK:
				case MariaDBParser.DAYOFYEAR:
				case MariaDBParser.DECODE:
				case MariaDBParser.DEGREES:
				case MariaDBParser.DES_DECRYPT:
				case MariaDBParser.DES_ENCRYPT:
				case MariaDBParser.DIMENSION:
				case MariaDBParser.DISJOINT:
				case MariaDBParser.ELT:
				case MariaDBParser.ENCODE:
				case MariaDBParser.ENCRYPT:
				case MariaDBParser.ENDPOINT:
				case MariaDBParser.ENGINE_ATTRIBUTE:
				case MariaDBParser.ENVELOPE:
				case MariaDBParser.EQUALS:
				case MariaDBParser.EXP:
				case MariaDBParser.EXPORT_SET:
				case MariaDBParser.EXTERIORRING:
				case MariaDBParser.EXTRACTVALUE:
				case MariaDBParser.FIELD:
				case MariaDBParser.FIND_IN_SET:
				case MariaDBParser.FLOOR:
				case MariaDBParser.FORMAT:
				case MariaDBParser.FOUND_ROWS:
				case MariaDBParser.FROM_BASE64:
				case MariaDBParser.FROM_DAYS:
				case MariaDBParser.FROM_UNIXTIME:
				case MariaDBParser.GEOMCOLLFROMTEXT:
				case MariaDBParser.GEOMCOLLFROMWKB:
				case MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT:
				case MariaDBParser.GEOMETRYCOLLECTIONFROMWKB:
				case MariaDBParser.GEOMETRYFROMTEXT:
				case MariaDBParser.GEOMETRYFROMWKB:
				case MariaDBParser.GEOMETRYN:
				case MariaDBParser.GEOMETRYTYPE:
				case MariaDBParser.GEOMFROMTEXT:
				case MariaDBParser.GEOMFROMWKB:
				case MariaDBParser.GET_FORMAT:
				case MariaDBParser.GET_LOCK:
				case MariaDBParser.GLENGTH:
				case MariaDBParser.GREATEST:
				case MariaDBParser.GTID_SUBSET:
				case MariaDBParser.GTID_SUBTRACT:
				case MariaDBParser.HEX:
				case MariaDBParser.IFNULL:
				case MariaDBParser.INET6_ATON:
				case MariaDBParser.INET6_NTOA:
				case MariaDBParser.INET_ATON:
				case MariaDBParser.INET_NTOA:
				case MariaDBParser.INSTR:
				case MariaDBParser.INTERIORRINGN:
				case MariaDBParser.INTERSECTS:
				case MariaDBParser.ISCLOSED:
				case MariaDBParser.ISEMPTY:
				case MariaDBParser.ISNULL:
				case MariaDBParser.ISSIMPLE:
				case MariaDBParser.IS_FREE_LOCK:
				case MariaDBParser.IS_IPV4:
				case MariaDBParser.IS_IPV4_COMPAT:
				case MariaDBParser.IS_IPV4_MAPPED:
				case MariaDBParser.IS_IPV6:
				case MariaDBParser.IS_USED_LOCK:
				case MariaDBParser.LAST_INSERT_ID:
				case MariaDBParser.LCASE:
				case MariaDBParser.LEAST:
				case MariaDBParser.LENGTH:
				case MariaDBParser.LINEFROMTEXT:
				case MariaDBParser.LINEFROMWKB:
				case MariaDBParser.LINESTRINGFROMTEXT:
				case MariaDBParser.LINESTRINGFROMWKB:
				case MariaDBParser.LN:
				case MariaDBParser.LOAD_FILE:
				case MariaDBParser.LOCATE:
				case MariaDBParser.LOG:
				case MariaDBParser.LOG10:
				case MariaDBParser.LOG2:
				case MariaDBParser.LOWER:
				case MariaDBParser.LPAD:
				case MariaDBParser.LTRIM:
				case MariaDBParser.MAKEDATE:
				case MariaDBParser.MAKETIME:
				case MariaDBParser.MAKE_SET:
				case MariaDBParser.MASTER_POS_WAIT:
				case MariaDBParser.MBRCONTAINS:
				case MariaDBParser.MBRDISJOINT:
				case MariaDBParser.MBREQUAL:
				case MariaDBParser.MBRINTERSECTS:
				case MariaDBParser.MBROVERLAPS:
				case MariaDBParser.MBRTOUCHES:
				case MariaDBParser.MBRWITHIN:
				case MariaDBParser.MD5:
				case MariaDBParser.MLINEFROMTEXT:
				case MariaDBParser.MLINEFROMWKB:
				case MariaDBParser.MONTHNAME:
				case MariaDBParser.MPOINTFROMTEXT:
				case MariaDBParser.MPOINTFROMWKB:
				case MariaDBParser.MPOLYFROMTEXT:
				case MariaDBParser.MPOLYFROMWKB:
				case MariaDBParser.MULTILINESTRINGFROMTEXT:
				case MariaDBParser.MULTILINESTRINGFROMWKB:
				case MariaDBParser.MULTIPOINTFROMTEXT:
				case MariaDBParser.MULTIPOINTFROMWKB:
				case MariaDBParser.MULTIPOLYGONFROMTEXT:
				case MariaDBParser.MULTIPOLYGONFROMWKB:
				case MariaDBParser.NAME_CONST:
				case MariaDBParser.NULLIF:
				case MariaDBParser.NUMGEOMETRIES:
				case MariaDBParser.NUMINTERIORRINGS:
				case MariaDBParser.NUMPOINTS:
				case MariaDBParser.OCT:
				case MariaDBParser.OCTET_LENGTH:
				case MariaDBParser.ORD:
				case MariaDBParser.OVERLAPS:
				case MariaDBParser.PERIOD_ADD:
				case MariaDBParser.PERIOD_DIFF:
				case MariaDBParser.PI:
				case MariaDBParser.POINTFROMTEXT:
				case MariaDBParser.POINTFROMWKB:
				case MariaDBParser.POINTN:
				case MariaDBParser.POLYFROMTEXT:
				case MariaDBParser.POLYFROMWKB:
				case MariaDBParser.POLYGONFROMTEXT:
				case MariaDBParser.POLYGONFROMWKB:
				case MariaDBParser.POW:
				case MariaDBParser.POWER:
				case MariaDBParser.QUOTE:
				case MariaDBParser.RADIANS:
				case MariaDBParser.RAND:
				case MariaDBParser.RANDOM_BYTES:
				case MariaDBParser.RELEASE_LOCK:
				case MariaDBParser.REVERSE:
				case MariaDBParser.ROUND:
				case MariaDBParser.ROW_COUNT:
				case MariaDBParser.RPAD:
				case MariaDBParser.RTRIM:
				case MariaDBParser.SEC_TO_TIME:
				case MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE:
				case MariaDBParser.SESSION_USER:
				case MariaDBParser.SHA:
				case MariaDBParser.SHA1:
				case MariaDBParser.SHA2:
				case MariaDBParser.SCHEMA_NAME:
				case MariaDBParser.SIGN:
				case MariaDBParser.SIN:
				case MariaDBParser.SLEEP:
				case MariaDBParser.SOUNDEX:
				case MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS:
				case MariaDBParser.SQRT:
				case MariaDBParser.SRID:
				case MariaDBParser.STARTPOINT:
				case MariaDBParser.STRCMP:
				case MariaDBParser.STR_TO_DATE:
				case MariaDBParser.ST_AREA:
				case MariaDBParser.ST_ASBINARY:
				case MariaDBParser.ST_ASTEXT:
				case MariaDBParser.ST_ASWKB:
				case MariaDBParser.ST_ASWKT:
				case MariaDBParser.ST_BUFFER:
				case MariaDBParser.ST_CENTROID:
				case MariaDBParser.ST_CONTAINS:
				case MariaDBParser.ST_CROSSES:
				case MariaDBParser.ST_DIFFERENCE:
				case MariaDBParser.ST_DIMENSION:
				case MariaDBParser.ST_DISJOINT:
				case MariaDBParser.ST_DISTANCE:
				case MariaDBParser.ST_ENDPOINT:
				case MariaDBParser.ST_ENVELOPE:
				case MariaDBParser.ST_EQUALS:
				case MariaDBParser.ST_EXTERIORRING:
				case MariaDBParser.ST_GEOMCOLLFROMTEXT:
				case MariaDBParser.ST_GEOMCOLLFROMTXT:
				case MariaDBParser.ST_GEOMCOLLFROMWKB:
				case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
				case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB:
				case MariaDBParser.ST_GEOMETRYFROMTEXT:
				case MariaDBParser.ST_GEOMETRYFROMWKB:
				case MariaDBParser.ST_GEOMETRYN:
				case MariaDBParser.ST_GEOMETRYTYPE:
				case MariaDBParser.ST_GEOMFROMTEXT:
				case MariaDBParser.ST_GEOMFROMWKB:
				case MariaDBParser.ST_INTERIORRINGN:
				case MariaDBParser.ST_INTERSECTION:
				case MariaDBParser.ST_INTERSECTS:
				case MariaDBParser.ST_ISCLOSED:
				case MariaDBParser.ST_ISEMPTY:
				case MariaDBParser.ST_ISSIMPLE:
				case MariaDBParser.ST_LINEFROMTEXT:
				case MariaDBParser.ST_LINEFROMWKB:
				case MariaDBParser.ST_LINESTRINGFROMTEXT:
				case MariaDBParser.ST_LINESTRINGFROMWKB:
				case MariaDBParser.ST_NUMGEOMETRIES:
				case MariaDBParser.ST_NUMINTERIORRING:
				case MariaDBParser.ST_NUMINTERIORRINGS:
				case MariaDBParser.ST_NUMPOINTS:
				case MariaDBParser.ST_OVERLAPS:
				case MariaDBParser.ST_POINTFROMTEXT:
				case MariaDBParser.ST_POINTFROMWKB:
				case MariaDBParser.ST_POINTN:
				case MariaDBParser.ST_POLYFROMTEXT:
				case MariaDBParser.ST_POLYFROMWKB:
				case MariaDBParser.ST_POLYGONFROMTEXT:
				case MariaDBParser.ST_POLYGONFROMWKB:
				case MariaDBParser.ST_SRID:
				case MariaDBParser.ST_STARTPOINT:
				case MariaDBParser.ST_SYMDIFFERENCE:
				case MariaDBParser.ST_TOUCHES:
				case MariaDBParser.ST_UNION:
				case MariaDBParser.ST_WITHIN:
				case MariaDBParser.ST_X:
				case MariaDBParser.ST_Y:
				case MariaDBParser.SUBDATE:
				case MariaDBParser.SUBSTRING_INDEX:
				case MariaDBParser.SUBTIME:
				case MariaDBParser.SYSTEM_USER:
				case MariaDBParser.TAN:
				case MariaDBParser.TIMEDIFF:
				case MariaDBParser.TIMESTAMPADD:
				case MariaDBParser.TIMESTAMPDIFF:
				case MariaDBParser.TIME_FORMAT:
				case MariaDBParser.TIME_TO_SEC:
				case MariaDBParser.TOUCHES:
				case MariaDBParser.TO_BASE64:
				case MariaDBParser.TO_DAYS:
				case MariaDBParser.TO_SECONDS:
				case MariaDBParser.UCASE:
				case MariaDBParser.UNCOMPRESS:
				case MariaDBParser.UNCOMPRESSED_LENGTH:
				case MariaDBParser.UNHEX:
				case MariaDBParser.UNIX_TIMESTAMP:
				case MariaDBParser.UPDATEXML:
				case MariaDBParser.UPPER:
				case MariaDBParser.UUID:
				case MariaDBParser.UUID_SHORT:
				case MariaDBParser.VALIDATE_PASSWORD_STRENGTH:
				case MariaDBParser.VERSION:
				case MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case MariaDBParser.WEEKDAY:
				case MariaDBParser.WEEKOFYEAR:
				case MariaDBParser.WEIGHT_STRING:
				case MariaDBParser.WITHIN:
				case MariaDBParser.YEARWEEK:
				case MariaDBParser.Y_FUNCTION:
				case MariaDBParser.X_FUNCTION:
				case MariaDBParser.VIA:
				case MariaDBParser.LASTVAL:
				case MariaDBParser.NEXTVAL:
				case MariaDBParser.SETVAL:
				case MariaDBParser.PREVIOUS:
				case MariaDBParser.PERSISTENT:
				case MariaDBParser.BINLOG_MONITOR:
				case MariaDBParser.BINLOG_REPLAY:
				case MariaDBParser.FEDERATED_ADMIN:
				case MariaDBParser.READ_ONLY_ADMIN:
				case MariaDBParser.REPLICA:
				case MariaDBParser.REPLICAS:
				case MariaDBParser.REPLICATION_MASTER_ADMIN:
				case MariaDBParser.MONITOR:
				case MariaDBParser.READ_ONLY:
				case MariaDBParser.REPLAY:
				case MariaDBParser.MOD:
				case MariaDBParser.CHARSET_REVERSE_QOUTE_STRING:
				case MariaDBParser.STRING_LITERAL:
				case MariaDBParser.ID:
					{
					this.state = 3047;
					this.uidList();
					}
					break;
				case MariaDBParser.ALL:
					{
					this.state = 3048;
					this.match(MariaDBParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case MariaDBParser.OPTIMIZE:
				_localctx = new AlterByOptimizePartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 3051;
				this.match(MariaDBParser.OPTIMIZE);
				this.state = 3052;
				this.match(MariaDBParser.PARTITION);
				this.state = 3055;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.ATTRIBUTE:
				case MariaDBParser.BODY:
				case MariaDBParser.BUCKETS:
				case MariaDBParser.CONDITION:
				case MariaDBParser.CURRENT:
				case MariaDBParser.CURRENT_ROLE:
				case MariaDBParser.CURRENT_USER:
				case MariaDBParser.DATABASE:
				case MariaDBParser.DEFAULT:
				case MariaDBParser.DIAGNOSTICS:
				case MariaDBParser.EMPTY:
				case MariaDBParser.EXCEPT:
				case MariaDBParser.GROUP:
				case MariaDBParser.IF:
				case MariaDBParser.IGNORED:
				case MariaDBParser.INSERT:
				case MariaDBParser.LATERAL:
				case MariaDBParser.LEFT:
				case MariaDBParser.LOCKED:
				case MariaDBParser.MAXVALUE:
				case MariaDBParser.MINVALUE:
				case MariaDBParser.NUMBER:
				case MariaDBParser.OPTIONAL:
				case MariaDBParser.ORDER:
				case MariaDBParser.PRIMARY:
				case MariaDBParser.PACKAGE:
				case MariaDBParser.REPLACE:
				case MariaDBParser.RIGHT:
				case MariaDBParser.SCHEMA:
				case MariaDBParser.SKIP_:
				case MariaDBParser.STACKED:
				case MariaDBParser.STATEMENT:
				case MariaDBParser.DATE:
				case MariaDBParser.TIME:
				case MariaDBParser.TIMESTAMP:
				case MariaDBParser.DATETIME:
				case MariaDBParser.YEAR:
				case MariaDBParser.BINARY:
				case MariaDBParser.TEXT:
				case MariaDBParser.ENUM:
				case MariaDBParser.SERIAL:
				case MariaDBParser.JSON_ARRAY:
				case MariaDBParser.JSON_ARRAYAGG:
				case MariaDBParser.JSON_ARRAY_APPEND:
				case MariaDBParser.JSON_ARRAY_INSERT:
				case MariaDBParser.JSON_CONTAINS:
				case MariaDBParser.JSON_CONTAINS_PATH:
				case MariaDBParser.JSON_DEPTH:
				case MariaDBParser.JSON_EXTRACT:
				case MariaDBParser.JSON_INSERT:
				case MariaDBParser.JSON_KEYS:
				case MariaDBParser.JSON_LENGTH:
				case MariaDBParser.JSON_MERGE:
				case MariaDBParser.JSON_MERGE_PATCH:
				case MariaDBParser.JSON_MERGE_PRESERVE:
				case MariaDBParser.JSON_OBJECT:
				case MariaDBParser.JSON_OBJECTAGG:
				case MariaDBParser.JSON_OVERLAPS:
				case MariaDBParser.JSON_PRETTY:
				case MariaDBParser.JSON_QUOTE:
				case MariaDBParser.JSON_REMOVE:
				case MariaDBParser.JSON_REPLACE:
				case MariaDBParser.JSON_SCHEMA_VALID:
				case MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT:
				case MariaDBParser.JSON_SEARCH:
				case MariaDBParser.JSON_SET:
				case MariaDBParser.JSON_STORAGE_FREE:
				case MariaDBParser.JSON_STORAGE_SIZE:
				case MariaDBParser.JSON_TABLE:
				case MariaDBParser.JSON_TYPE:
				case MariaDBParser.JSON_UNQUOTE:
				case MariaDBParser.JSON_VALID:
				case MariaDBParser.JSON_VALUE:
				case MariaDBParser.NESTED:
				case MariaDBParser.ORDINALITY:
				case MariaDBParser.PATH:
				case MariaDBParser.AVG:
				case MariaDBParser.BIT_AND:
				case MariaDBParser.BIT_OR:
				case MariaDBParser.BIT_XOR:
				case MariaDBParser.COUNT:
				case MariaDBParser.CUME_DIST:
				case MariaDBParser.DENSE_RANK:
				case MariaDBParser.FIRST_VALUE:
				case MariaDBParser.GROUP_CONCAT:
				case MariaDBParser.LAG:
				case MariaDBParser.LAST_VALUE:
				case MariaDBParser.LEAD:
				case MariaDBParser.MAX:
				case MariaDBParser.MIN:
				case MariaDBParser.NTILE:
				case MariaDBParser.NTH_VALUE:
				case MariaDBParser.PERCENT_RANK:
				case MariaDBParser.RANK:
				case MariaDBParser.ROW_NUMBER:
				case MariaDBParser.STD:
				case MariaDBParser.STDDEV:
				case MariaDBParser.STDDEV_POP:
				case MariaDBParser.STDDEV_SAMP:
				case MariaDBParser.SUM:
				case MariaDBParser.VAR_POP:
				case MariaDBParser.VAR_SAMP:
				case MariaDBParser.VARIANCE:
				case MariaDBParser.CURRENT_DATE:
				case MariaDBParser.CURRENT_TIME:
				case MariaDBParser.CURRENT_TIMESTAMP:
				case MariaDBParser.LOCALTIME:
				case MariaDBParser.CURDATE:
				case MariaDBParser.CURTIME:
				case MariaDBParser.DATE_ADD:
				case MariaDBParser.DATE_SUB:
				case MariaDBParser.LOCALTIMESTAMP:
				case MariaDBParser.NOW:
				case MariaDBParser.POSITION:
				case MariaDBParser.SUBSTR:
				case MariaDBParser.SUBSTRING:
				case MariaDBParser.SYSDATE:
				case MariaDBParser.TRIM:
				case MariaDBParser.UTC_DATE:
				case MariaDBParser.UTC_TIME:
				case MariaDBParser.UTC_TIMESTAMP:
				case MariaDBParser.ACCOUNT:
				case MariaDBParser.ACTION:
				case MariaDBParser.AFTER:
				case MariaDBParser.AGGREGATE:
				case MariaDBParser.ALGORITHM:
				case MariaDBParser.ANY:
				case MariaDBParser.AT:
				case MariaDBParser.AUTHORS:
				case MariaDBParser.AUTOCOMMIT:
				case MariaDBParser.AUTOEXTEND_SIZE:
				case MariaDBParser.AUTO_INCREMENT:
				case MariaDBParser.AVG_ROW_LENGTH:
				case MariaDBParser.BEGIN:
				case MariaDBParser.BINLOG:
				case MariaDBParser.BIT:
				case MariaDBParser.BLOCK:
				case MariaDBParser.BOOL:
				case MariaDBParser.BOOLEAN:
				case MariaDBParser.BTREE:
				case MariaDBParser.CACHE:
				case MariaDBParser.CASCADED:
				case MariaDBParser.CHAIN:
				case MariaDBParser.CHANGED:
				case MariaDBParser.CHANNEL:
				case MariaDBParser.CHECKSUM:
				case MariaDBParser.PAGE_CHECKSUM:
				case MariaDBParser.CIPHER:
				case MariaDBParser.CLASS_ORIGIN:
				case MariaDBParser.CLIENT:
				case MariaDBParser.CLOSE:
				case MariaDBParser.CLUSTERING:
				case MariaDBParser.COALESCE:
				case MariaDBParser.CODE:
				case MariaDBParser.COLUMNS:
				case MariaDBParser.COLUMN_FORMAT:
				case MariaDBParser.COLUMN_NAME:
				case MariaDBParser.COMMENT:
				case MariaDBParser.COMMIT:
				case MariaDBParser.COMPACT:
				case MariaDBParser.COMPLETION:
				case MariaDBParser.COMPRESSED:
				case MariaDBParser.COMPRESSION:
				case MariaDBParser.CONCURRENT:
				case MariaDBParser.CONNECT:
				case MariaDBParser.CONNECTION:
				case MariaDBParser.CONSISTENT:
				case MariaDBParser.CONSTRAINT_CATALOG:
				case MariaDBParser.CONSTRAINT_SCHEMA:
				case MariaDBParser.CONSTRAINT_NAME:
				case MariaDBParser.CONTAINS:
				case MariaDBParser.CONTEXT:
				case MariaDBParser.CONTRIBUTORS:
				case MariaDBParser.COPY:
				case MariaDBParser.CPU:
				case MariaDBParser.CYCLE:
				case MariaDBParser.CURSOR_NAME:
				case MariaDBParser.DATA:
				case MariaDBParser.DATAFILE:
				case MariaDBParser.DEALLOCATE:
				case MariaDBParser.DEFAULT_AUTH:
				case MariaDBParser.DEFINER:
				case MariaDBParser.DELAY_KEY_WRITE:
				case MariaDBParser.DES_KEY_FILE:
				case MariaDBParser.DIRECTORY:
				case MariaDBParser.DISABLE:
				case MariaDBParser.DISCARD:
				case MariaDBParser.DISK:
				case MariaDBParser.DO:
				case MariaDBParser.DUMPFILE:
				case MariaDBParser.DUPLICATE:
				case MariaDBParser.DYNAMIC:
				case MariaDBParser.ENABLE:
				case MariaDBParser.ENCRYPTED:
				case MariaDBParser.ENCRYPTION:
				case MariaDBParser.ENCRYPTION_KEY_ID:
				case MariaDBParser.END:
				case MariaDBParser.ENDS:
				case MariaDBParser.ENGINE:
				case MariaDBParser.ENGINES:
				case MariaDBParser.ERROR:
				case MariaDBParser.ERRORS:
				case MariaDBParser.ESCAPE:
				case MariaDBParser.EVEN:
				case MariaDBParser.EVENT:
				case MariaDBParser.EVENTS:
				case MariaDBParser.EVERY:
				case MariaDBParser.EXCHANGE:
				case MariaDBParser.EXCLUSIVE:
				case MariaDBParser.EXPIRE:
				case MariaDBParser.EXPORT:
				case MariaDBParser.EXTENDED:
				case MariaDBParser.EXTENT_SIZE:
				case MariaDBParser.FAILED_LOGIN_ATTEMPTS:
				case MariaDBParser.FAST:
				case MariaDBParser.FAULTS:
				case MariaDBParser.FIELDS:
				case MariaDBParser.FILE_BLOCK_SIZE:
				case MariaDBParser.FILTER:
				case MariaDBParser.FIRST:
				case MariaDBParser.FIXED:
				case MariaDBParser.FLUSH:
				case MariaDBParser.FOLLOWS:
				case MariaDBParser.FOUND:
				case MariaDBParser.FULL:
				case MariaDBParser.FUNCTION:
				case MariaDBParser.GENERAL:
				case MariaDBParser.GLOBAL:
				case MariaDBParser.GRANTS:
				case MariaDBParser.GROUP_REPLICATION:
				case MariaDBParser.HANDLER:
				case MariaDBParser.HASH:
				case MariaDBParser.HELP:
				case MariaDBParser.HISTORY:
				case MariaDBParser.HOST:
				case MariaDBParser.HOSTS:
				case MariaDBParser.IDENTIFIED:
				case MariaDBParser.IGNORE_SERVER_IDS:
				case MariaDBParser.IMPORT:
				case MariaDBParser.INCREMENT:
				case MariaDBParser.INDEXES:
				case MariaDBParser.INITIAL_SIZE:
				case MariaDBParser.INPLACE:
				case MariaDBParser.INSERT_METHOD:
				case MariaDBParser.INSTALL:
				case MariaDBParser.INSTANCE:
				case MariaDBParser.INSTANT:
				case MariaDBParser.INVISIBLE:
				case MariaDBParser.INVOKER:
				case MariaDBParser.IO:
				case MariaDBParser.IO_THREAD:
				case MariaDBParser.IPC:
				case MariaDBParser.ISOLATION:
				case MariaDBParser.ISSUER:
				case MariaDBParser.JSON:
				case MariaDBParser.KEY_BLOCK_SIZE:
				case MariaDBParser.LANGUAGE:
				case MariaDBParser.LAST:
				case MariaDBParser.LEAVES:
				case MariaDBParser.LESS:
				case MariaDBParser.LEVEL:
				case MariaDBParser.LIST:
				case MariaDBParser.LOCAL:
				case MariaDBParser.LOCALES:
				case MariaDBParser.LOGFILE:
				case MariaDBParser.LOGS:
				case MariaDBParser.MASTER:
				case MariaDBParser.MASTER_AUTO_POSITION:
				case MariaDBParser.MASTER_CONNECT_RETRY:
				case MariaDBParser.MASTER_DELAY:
				case MariaDBParser.MASTER_HEARTBEAT_PERIOD:
				case MariaDBParser.MASTER_HOST:
				case MariaDBParser.MASTER_LOG_FILE:
				case MariaDBParser.MASTER_LOG_POS:
				case MariaDBParser.MASTER_PASSWORD:
				case MariaDBParser.MASTER_PORT:
				case MariaDBParser.MASTER_RETRY_COUNT:
				case MariaDBParser.MASTER_SSL:
				case MariaDBParser.MASTER_SSL_CA:
				case MariaDBParser.MASTER_SSL_CAPATH:
				case MariaDBParser.MASTER_SSL_CERT:
				case MariaDBParser.MASTER_SSL_CIPHER:
				case MariaDBParser.MASTER_SSL_CRL:
				case MariaDBParser.MASTER_SSL_CRLPATH:
				case MariaDBParser.MASTER_SSL_KEY:
				case MariaDBParser.MASTER_TLS_VERSION:
				case MariaDBParser.MASTER_USER:
				case MariaDBParser.MAX_CONNECTIONS_PER_HOUR:
				case MariaDBParser.MAX_QUERIES_PER_HOUR:
				case MariaDBParser.MAX_ROWS:
				case MariaDBParser.MAX_SIZE:
				case MariaDBParser.MAX_UPDATES_PER_HOUR:
				case MariaDBParser.MAX_USER_CONNECTIONS:
				case MariaDBParser.MEDIUM:
				case MariaDBParser.MEMBER:
				case MariaDBParser.MERGE:
				case MariaDBParser.MESSAGE_TEXT:
				case MariaDBParser.MID:
				case MariaDBParser.MIGRATE:
				case MariaDBParser.MIN_ROWS:
				case MariaDBParser.MODE:
				case MariaDBParser.MODIFY:
				case MariaDBParser.MUTEX:
				case MariaDBParser.MYSQL:
				case MariaDBParser.MYSQL_ERRNO:
				case MariaDBParser.NAME:
				case MariaDBParser.NAMES:
				case MariaDBParser.NCHAR:
				case MariaDBParser.NEVER:
				case MariaDBParser.NEXT:
				case MariaDBParser.NO:
				case MariaDBParser.NOCACHE:
				case MariaDBParser.NOCOPY:
				case MariaDBParser.NOCYCLE:
				case MariaDBParser.NOMAXVALUE:
				case MariaDBParser.NOMINVALUE:
				case MariaDBParser.NOWAIT:
				case MariaDBParser.NODEGROUP:
				case MariaDBParser.NONE:
				case MariaDBParser.ODBC:
				case MariaDBParser.OFFLINE:
				case MariaDBParser.OFFSET:
				case MariaDBParser.OF:
				case MariaDBParser.OJ:
				case MariaDBParser.OLD_PASSWORD:
				case MariaDBParser.ONE:
				case MariaDBParser.ONLINE:
				case MariaDBParser.ONLY:
				case MariaDBParser.OPEN:
				case MariaDBParser.OPTIMIZER_COSTS:
				case MariaDBParser.OPTIONS:
				case MariaDBParser.OWNER:
				case MariaDBParser.PACK_KEYS:
				case MariaDBParser.PAGE:
				case MariaDBParser.PARSER:
				case MariaDBParser.PARTIAL:
				case MariaDBParser.PARTITIONING:
				case MariaDBParser.PARTITIONS:
				case MariaDBParser.PASSWORD:
				case MariaDBParser.PASSWORD_LOCK_TIME:
				case MariaDBParser.PHASE:
				case MariaDBParser.PLUGIN:
				case MariaDBParser.PLUGIN_DIR:
				case MariaDBParser.PLUGINS:
				case MariaDBParser.PORT:
				case MariaDBParser.PRECEDES:
				case MariaDBParser.PREPARE:
				case MariaDBParser.PRESERVE:
				case MariaDBParser.PREV:
				case MariaDBParser.PROCESSLIST:
				case MariaDBParser.PROFILE:
				case MariaDBParser.PROFILES:
				case MariaDBParser.PROXY:
				case MariaDBParser.QUERY:
				case MariaDBParser.QUERY_RESPONSE_TIME:
				case MariaDBParser.QUICK:
				case MariaDBParser.REBUILD:
				case MariaDBParser.RECOVER:
				case MariaDBParser.RECURSIVE:
				case MariaDBParser.REDO_BUFFER_SIZE:
				case MariaDBParser.REDUNDANT:
				case MariaDBParser.RELAY:
				case MariaDBParser.RELAY_LOG_FILE:
				case MariaDBParser.RELAY_LOG_POS:
				case MariaDBParser.RELAYLOG:
				case MariaDBParser.REMOVE:
				case MariaDBParser.REORGANIZE:
				case MariaDBParser.REPAIR:
				case MariaDBParser.REPLICATE_DO_DB:
				case MariaDBParser.REPLICATE_DO_TABLE:
				case MariaDBParser.REPLICATE_IGNORE_DB:
				case MariaDBParser.REPLICATE_IGNORE_TABLE:
				case MariaDBParser.REPLICATE_REWRITE_DB:
				case MariaDBParser.REPLICATE_WILD_DO_TABLE:
				case MariaDBParser.REPLICATE_WILD_IGNORE_TABLE:
				case MariaDBParser.REPLICATION:
				case MariaDBParser.RESET:
				case MariaDBParser.RESTART:
				case MariaDBParser.RESUME:
				case MariaDBParser.RETURNED_SQLSTATE:
				case MariaDBParser.RETURNS:
				case MariaDBParser.REUSE:
				case MariaDBParser.ROLE:
				case MariaDBParser.ROLLBACK:
				case MariaDBParser.ROLLUP:
				case MariaDBParser.ROTATE:
				case MariaDBParser.ROW:
				case MariaDBParser.ROWS:
				case MariaDBParser.ROW_FORMAT:
				case MariaDBParser.RTREE:
				case MariaDBParser.SAVEPOINT:
				case MariaDBParser.SCHEDULE:
				case MariaDBParser.SECURITY:
				case MariaDBParser.SEQUENCE:
				case MariaDBParser.SERVER:
				case MariaDBParser.SESSION:
				case MariaDBParser.SHARE:
				case MariaDBParser.SHARED:
				case MariaDBParser.SIGNED:
				case MariaDBParser.SIMPLE:
				case MariaDBParser.SLAVE:
				case MariaDBParser.SLAVES:
				case MariaDBParser.SLOW:
				case MariaDBParser.SNAPSHOT:
				case MariaDBParser.SOCKET:
				case MariaDBParser.SOME:
				case MariaDBParser.SONAME:
				case MariaDBParser.SOUNDS:
				case MariaDBParser.SOURCE:
				case MariaDBParser.SQL_AFTER_GTIDS:
				case MariaDBParser.SQL_AFTER_MTS_GAPS:
				case MariaDBParser.SQL_BEFORE_GTIDS:
				case MariaDBParser.SQL_BUFFER_RESULT:
				case MariaDBParser.SQL_CACHE:
				case MariaDBParser.SQL_NO_CACHE:
				case MariaDBParser.SQL_THREAD:
				case MariaDBParser.START:
				case MariaDBParser.STARTS:
				case MariaDBParser.STATS_AUTO_RECALC:
				case MariaDBParser.STATS_PERSISTENT:
				case MariaDBParser.STATS_SAMPLE_PAGES:
				case MariaDBParser.STATUS:
				case MariaDBParser.STOP:
				case MariaDBParser.STORAGE:
				case MariaDBParser.STRING:
				case MariaDBParser.SUBCLASS_ORIGIN:
				case MariaDBParser.SUBJECT:
				case MariaDBParser.SUBPARTITION:
				case MariaDBParser.SUBPARTITIONS:
				case MariaDBParser.SUSPEND:
				case MariaDBParser.SWAPS:
				case MariaDBParser.SWITCHES:
				case MariaDBParser.TABLE_NAME:
				case MariaDBParser.TABLESPACE:
				case MariaDBParser.TABLE_TYPE:
				case MariaDBParser.TEMPORARY:
				case MariaDBParser.TEMPTABLE:
				case MariaDBParser.THAN:
				case MariaDBParser.TRADITIONAL:
				case MariaDBParser.TRANSACTION:
				case MariaDBParser.TRANSACTIONAL:
				case MariaDBParser.TRIGGERS:
				case MariaDBParser.TRUNCATE:
				case MariaDBParser.TYPES:
				case MariaDBParser.UNBOUNDED:
				case MariaDBParser.UNDEFINED:
				case MariaDBParser.UNDOFILE:
				case MariaDBParser.UNDO_BUFFER_SIZE:
				case MariaDBParser.UNINSTALL:
				case MariaDBParser.UNKNOWN:
				case MariaDBParser.UNTIL:
				case MariaDBParser.UPGRADE:
				case MariaDBParser.USER:
				case MariaDBParser.USE_FRM:
				case MariaDBParser.USER_RESOURCES:
				case MariaDBParser.VALIDATION:
				case MariaDBParser.VALUE:
				case MariaDBParser.VARIABLES:
				case MariaDBParser.VIEW:
				case MariaDBParser.VIRTUAL:
				case MariaDBParser.VISIBLE:
				case MariaDBParser.WAIT:
				case MariaDBParser.WARNINGS:
				case MariaDBParser.WITHOUT:
				case MariaDBParser.WORK:
				case MariaDBParser.WRAPPER:
				case MariaDBParser.WSREP_MEMBERSHIP:
				case MariaDBParser.WSREP_STATUS:
				case MariaDBParser.X509:
				case MariaDBParser.XA:
				case MariaDBParser.XML:
				case MariaDBParser.EUR:
				case MariaDBParser.USA:
				case MariaDBParser.JIS:
				case MariaDBParser.ISO:
				case MariaDBParser.INTERNAL:
				case MariaDBParser.QUARTER:
				case MariaDBParser.MONTH:
				case MariaDBParser.DAY:
				case MariaDBParser.HOUR:
				case MariaDBParser.MINUTE:
				case MariaDBParser.WEEK:
				case MariaDBParser.SECOND:
				case MariaDBParser.MICROSECOND:
				case MariaDBParser.USER_STATISTICS:
				case MariaDBParser.CLIENT_STATISTICS:
				case MariaDBParser.INDEX_STATISTICS:
				case MariaDBParser.TABLE_STATISTICS:
				case MariaDBParser.ADMIN:
				case MariaDBParser.AUDIT_ADMIN:
				case MariaDBParser.BACKUP_ADMIN:
				case MariaDBParser.BINLOG_ADMIN:
				case MariaDBParser.BINLOG_ENCRYPTION_ADMIN:
				case MariaDBParser.CLONE_ADMIN:
				case MariaDBParser.CONNECTION_ADMIN:
				case MariaDBParser.ENCRYPTION_KEY_ADMIN:
				case MariaDBParser.EXECUTE:
				case MariaDBParser.FILE:
				case MariaDBParser.FIREWALL_ADMIN:
				case MariaDBParser.FIREWALL_USER:
				case MariaDBParser.GROUP_REPLICATION_ADMIN:
				case MariaDBParser.INNODB_REDO_LOG_ARCHIVE:
				case MariaDBParser.INVOKE:
				case MariaDBParser.LAMBDA:
				case MariaDBParser.NDB_STORED_USER:
				case MariaDBParser.PASSWORDLESS_USER_ADMIN:
				case MariaDBParser.PERSIST_RO_VARIABLES_ADMIN:
				case MariaDBParser.PRIVILEGES:
				case MariaDBParser.PROCESS:
				case MariaDBParser.RELOAD:
				case MariaDBParser.REPLICATION_APPLIER:
				case MariaDBParser.REPLICATION_SLAVE_ADMIN:
				case MariaDBParser.RESOURCE_GROUP_ADMIN:
				case MariaDBParser.RESOURCE_GROUP_USER:
				case MariaDBParser.ROLE_ADMIN:
				case MariaDBParser.ROUTINE:
				case MariaDBParser.S3:
				case MariaDBParser.SESSION_VARIABLES_ADMIN:
				case MariaDBParser.SET_USER_ID:
				case MariaDBParser.SHOW_ROUTINE:
				case MariaDBParser.SHUTDOWN:
				case MariaDBParser.SUPER:
				case MariaDBParser.SYSTEM_VARIABLES_ADMIN:
				case MariaDBParser.TABLES:
				case MariaDBParser.TABLE_ENCRYPTION_ADMIN:
				case MariaDBParser.VERSION_TOKEN_ADMIN:
				case MariaDBParser.XA_RECOVER_ADMIN:
				case MariaDBParser.ARMSCII8:
				case MariaDBParser.ASCII:
				case MariaDBParser.BIG5:
				case MariaDBParser.CP1250:
				case MariaDBParser.CP1251:
				case MariaDBParser.CP1256:
				case MariaDBParser.CP1257:
				case MariaDBParser.CP850:
				case MariaDBParser.CP852:
				case MariaDBParser.CP866:
				case MariaDBParser.CP932:
				case MariaDBParser.DEC8:
				case MariaDBParser.EUCJPMS:
				case MariaDBParser.EUCKR:
				case MariaDBParser.GB18030:
				case MariaDBParser.GB2312:
				case MariaDBParser.GBK:
				case MariaDBParser.GEOSTD8:
				case MariaDBParser.GREEK:
				case MariaDBParser.HEBREW:
				case MariaDBParser.HP8:
				case MariaDBParser.KEYBCS2:
				case MariaDBParser.KOI8R:
				case MariaDBParser.KOI8U:
				case MariaDBParser.LATIN1:
				case MariaDBParser.LATIN2:
				case MariaDBParser.LATIN5:
				case MariaDBParser.LATIN7:
				case MariaDBParser.MACCE:
				case MariaDBParser.MACROMAN:
				case MariaDBParser.SJIS:
				case MariaDBParser.SWE7:
				case MariaDBParser.TIS620:
				case MariaDBParser.UCS2:
				case MariaDBParser.UJIS:
				case MariaDBParser.UTF16:
				case MariaDBParser.UTF16LE:
				case MariaDBParser.UTF32:
				case MariaDBParser.UTF8:
				case MariaDBParser.UTF8MB3:
				case MariaDBParser.UTF8MB4:
				case MariaDBParser.ARCHIVE:
				case MariaDBParser.BLACKHOLE:
				case MariaDBParser.CSV:
				case MariaDBParser.FEDERATED:
				case MariaDBParser.INNODB:
				case MariaDBParser.MEMORY:
				case MariaDBParser.MRG_MYISAM:
				case MariaDBParser.MYISAM:
				case MariaDBParser.NDB:
				case MariaDBParser.NDBCLUSTER:
				case MariaDBParser.PERFORMANCE_SCHEMA:
				case MariaDBParser.TOKUDB:
				case MariaDBParser.REPEATABLE:
				case MariaDBParser.COMMITTED:
				case MariaDBParser.UNCOMMITTED:
				case MariaDBParser.SERIALIZABLE:
				case MariaDBParser.GEOMETRYCOLLECTION:
				case MariaDBParser.LINESTRING:
				case MariaDBParser.MULTILINESTRING:
				case MariaDBParser.MULTIPOINT:
				case MariaDBParser.MULTIPOLYGON:
				case MariaDBParser.POINT:
				case MariaDBParser.POLYGON:
				case MariaDBParser.ABS:
				case MariaDBParser.ACOS:
				case MariaDBParser.ADDDATE:
				case MariaDBParser.ADDTIME:
				case MariaDBParser.AES_DECRYPT:
				case MariaDBParser.AES_ENCRYPT:
				case MariaDBParser.AREA:
				case MariaDBParser.ASBINARY:
				case MariaDBParser.ASIN:
				case MariaDBParser.ASTEXT:
				case MariaDBParser.ASWKB:
				case MariaDBParser.ASWKT:
				case MariaDBParser.ASYMMETRIC_DECRYPT:
				case MariaDBParser.ASYMMETRIC_DERIVE:
				case MariaDBParser.ASYMMETRIC_ENCRYPT:
				case MariaDBParser.ASYMMETRIC_SIGN:
				case MariaDBParser.ASYMMETRIC_VERIFY:
				case MariaDBParser.ATAN:
				case MariaDBParser.ATAN2:
				case MariaDBParser.BENCHMARK:
				case MariaDBParser.BIN:
				case MariaDBParser.BIT_COUNT:
				case MariaDBParser.BIT_LENGTH:
				case MariaDBParser.BUFFER:
				case MariaDBParser.CATALOG_NAME:
				case MariaDBParser.CEIL:
				case MariaDBParser.CEILING:
				case MariaDBParser.CENTROID:
				case MariaDBParser.CHARACTER_LENGTH:
				case MariaDBParser.CHARSET:
				case MariaDBParser.CHAR_LENGTH:
				case MariaDBParser.COERCIBILITY:
				case MariaDBParser.COLLATION:
				case MariaDBParser.COMPRESS:
				case MariaDBParser.CONCAT:
				case MariaDBParser.CONCAT_WS:
				case MariaDBParser.CONNECTION_ID:
				case MariaDBParser.CONV:
				case MariaDBParser.CONVERT_TZ:
				case MariaDBParser.COS:
				case MariaDBParser.COT:
				case MariaDBParser.CRC32:
				case MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY:
				case MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY:
				case MariaDBParser.CREATE_DH_PARAMETERS:
				case MariaDBParser.CREATE_DIGEST:
				case MariaDBParser.CROSSES:
				case MariaDBParser.DATEDIFF:
				case MariaDBParser.DATE_FORMAT:
				case MariaDBParser.DAYNAME:
				case MariaDBParser.DAYOFMONTH:
				case MariaDBParser.DAYOFWEEK:
				case MariaDBParser.DAYOFYEAR:
				case MariaDBParser.DECODE:
				case MariaDBParser.DEGREES:
				case MariaDBParser.DES_DECRYPT:
				case MariaDBParser.DES_ENCRYPT:
				case MariaDBParser.DIMENSION:
				case MariaDBParser.DISJOINT:
				case MariaDBParser.ELT:
				case MariaDBParser.ENCODE:
				case MariaDBParser.ENCRYPT:
				case MariaDBParser.ENDPOINT:
				case MariaDBParser.ENGINE_ATTRIBUTE:
				case MariaDBParser.ENVELOPE:
				case MariaDBParser.EQUALS:
				case MariaDBParser.EXP:
				case MariaDBParser.EXPORT_SET:
				case MariaDBParser.EXTERIORRING:
				case MariaDBParser.EXTRACTVALUE:
				case MariaDBParser.FIELD:
				case MariaDBParser.FIND_IN_SET:
				case MariaDBParser.FLOOR:
				case MariaDBParser.FORMAT:
				case MariaDBParser.FOUND_ROWS:
				case MariaDBParser.FROM_BASE64:
				case MariaDBParser.FROM_DAYS:
				case MariaDBParser.FROM_UNIXTIME:
				case MariaDBParser.GEOMCOLLFROMTEXT:
				case MariaDBParser.GEOMCOLLFROMWKB:
				case MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT:
				case MariaDBParser.GEOMETRYCOLLECTIONFROMWKB:
				case MariaDBParser.GEOMETRYFROMTEXT:
				case MariaDBParser.GEOMETRYFROMWKB:
				case MariaDBParser.GEOMETRYN:
				case MariaDBParser.GEOMETRYTYPE:
				case MariaDBParser.GEOMFROMTEXT:
				case MariaDBParser.GEOMFROMWKB:
				case MariaDBParser.GET_FORMAT:
				case MariaDBParser.GET_LOCK:
				case MariaDBParser.GLENGTH:
				case MariaDBParser.GREATEST:
				case MariaDBParser.GTID_SUBSET:
				case MariaDBParser.GTID_SUBTRACT:
				case MariaDBParser.HEX:
				case MariaDBParser.IFNULL:
				case MariaDBParser.INET6_ATON:
				case MariaDBParser.INET6_NTOA:
				case MariaDBParser.INET_ATON:
				case MariaDBParser.INET_NTOA:
				case MariaDBParser.INSTR:
				case MariaDBParser.INTERIORRINGN:
				case MariaDBParser.INTERSECTS:
				case MariaDBParser.ISCLOSED:
				case MariaDBParser.ISEMPTY:
				case MariaDBParser.ISNULL:
				case MariaDBParser.ISSIMPLE:
				case MariaDBParser.IS_FREE_LOCK:
				case MariaDBParser.IS_IPV4:
				case MariaDBParser.IS_IPV4_COMPAT:
				case MariaDBParser.IS_IPV4_MAPPED:
				case MariaDBParser.IS_IPV6:
				case MariaDBParser.IS_USED_LOCK:
				case MariaDBParser.LAST_INSERT_ID:
				case MariaDBParser.LCASE:
				case MariaDBParser.LEAST:
				case MariaDBParser.LENGTH:
				case MariaDBParser.LINEFROMTEXT:
				case MariaDBParser.LINEFROMWKB:
				case MariaDBParser.LINESTRINGFROMTEXT:
				case MariaDBParser.LINESTRINGFROMWKB:
				case MariaDBParser.LN:
				case MariaDBParser.LOAD_FILE:
				case MariaDBParser.LOCATE:
				case MariaDBParser.LOG:
				case MariaDBParser.LOG10:
				case MariaDBParser.LOG2:
				case MariaDBParser.LOWER:
				case MariaDBParser.LPAD:
				case MariaDBParser.LTRIM:
				case MariaDBParser.MAKEDATE:
				case MariaDBParser.MAKETIME:
				case MariaDBParser.MAKE_SET:
				case MariaDBParser.MASTER_POS_WAIT:
				case MariaDBParser.MBRCONTAINS:
				case MariaDBParser.MBRDISJOINT:
				case MariaDBParser.MBREQUAL:
				case MariaDBParser.MBRINTERSECTS:
				case MariaDBParser.MBROVERLAPS:
				case MariaDBParser.MBRTOUCHES:
				case MariaDBParser.MBRWITHIN:
				case MariaDBParser.MD5:
				case MariaDBParser.MLINEFROMTEXT:
				case MariaDBParser.MLINEFROMWKB:
				case MariaDBParser.MONTHNAME:
				case MariaDBParser.MPOINTFROMTEXT:
				case MariaDBParser.MPOINTFROMWKB:
				case MariaDBParser.MPOLYFROMTEXT:
				case MariaDBParser.MPOLYFROMWKB:
				case MariaDBParser.MULTILINESTRINGFROMTEXT:
				case MariaDBParser.MULTILINESTRINGFROMWKB:
				case MariaDBParser.MULTIPOINTFROMTEXT:
				case MariaDBParser.MULTIPOINTFROMWKB:
				case MariaDBParser.MULTIPOLYGONFROMTEXT:
				case MariaDBParser.MULTIPOLYGONFROMWKB:
				case MariaDBParser.NAME_CONST:
				case MariaDBParser.NULLIF:
				case MariaDBParser.NUMGEOMETRIES:
				case MariaDBParser.NUMINTERIORRINGS:
				case MariaDBParser.NUMPOINTS:
				case MariaDBParser.OCT:
				case MariaDBParser.OCTET_LENGTH:
				case MariaDBParser.ORD:
				case MariaDBParser.OVERLAPS:
				case MariaDBParser.PERIOD_ADD:
				case MariaDBParser.PERIOD_DIFF:
				case MariaDBParser.PI:
				case MariaDBParser.POINTFROMTEXT:
				case MariaDBParser.POINTFROMWKB:
				case MariaDBParser.POINTN:
				case MariaDBParser.POLYFROMTEXT:
				case MariaDBParser.POLYFROMWKB:
				case MariaDBParser.POLYGONFROMTEXT:
				case MariaDBParser.POLYGONFROMWKB:
				case MariaDBParser.POW:
				case MariaDBParser.POWER:
				case MariaDBParser.QUOTE:
				case MariaDBParser.RADIANS:
				case MariaDBParser.RAND:
				case MariaDBParser.RANDOM_BYTES:
				case MariaDBParser.RELEASE_LOCK:
				case MariaDBParser.REVERSE:
				case MariaDBParser.ROUND:
				case MariaDBParser.ROW_COUNT:
				case MariaDBParser.RPAD:
				case MariaDBParser.RTRIM:
				case MariaDBParser.SEC_TO_TIME:
				case MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE:
				case MariaDBParser.SESSION_USER:
				case MariaDBParser.SHA:
				case MariaDBParser.SHA1:
				case MariaDBParser.SHA2:
				case MariaDBParser.SCHEMA_NAME:
				case MariaDBParser.SIGN:
				case MariaDBParser.SIN:
				case MariaDBParser.SLEEP:
				case MariaDBParser.SOUNDEX:
				case MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS:
				case MariaDBParser.SQRT:
				case MariaDBParser.SRID:
				case MariaDBParser.STARTPOINT:
				case MariaDBParser.STRCMP:
				case MariaDBParser.STR_TO_DATE:
				case MariaDBParser.ST_AREA:
				case MariaDBParser.ST_ASBINARY:
				case MariaDBParser.ST_ASTEXT:
				case MariaDBParser.ST_ASWKB:
				case MariaDBParser.ST_ASWKT:
				case MariaDBParser.ST_BUFFER:
				case MariaDBParser.ST_CENTROID:
				case MariaDBParser.ST_CONTAINS:
				case MariaDBParser.ST_CROSSES:
				case MariaDBParser.ST_DIFFERENCE:
				case MariaDBParser.ST_DIMENSION:
				case MariaDBParser.ST_DISJOINT:
				case MariaDBParser.ST_DISTANCE:
				case MariaDBParser.ST_ENDPOINT:
				case MariaDBParser.ST_ENVELOPE:
				case MariaDBParser.ST_EQUALS:
				case MariaDBParser.ST_EXTERIORRING:
				case MariaDBParser.ST_GEOMCOLLFROMTEXT:
				case MariaDBParser.ST_GEOMCOLLFROMTXT:
				case MariaDBParser.ST_GEOMCOLLFROMWKB:
				case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
				case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB:
				case MariaDBParser.ST_GEOMETRYFROMTEXT:
				case MariaDBParser.ST_GEOMETRYFROMWKB:
				case MariaDBParser.ST_GEOMETRYN:
				case MariaDBParser.ST_GEOMETRYTYPE:
				case MariaDBParser.ST_GEOMFROMTEXT:
				case MariaDBParser.ST_GEOMFROMWKB:
				case MariaDBParser.ST_INTERIORRINGN:
				case MariaDBParser.ST_INTERSECTION:
				case MariaDBParser.ST_INTERSECTS:
				case MariaDBParser.ST_ISCLOSED:
				case MariaDBParser.ST_ISEMPTY:
				case MariaDBParser.ST_ISSIMPLE:
				case MariaDBParser.ST_LINEFROMTEXT:
				case MariaDBParser.ST_LINEFROMWKB:
				case MariaDBParser.ST_LINESTRINGFROMTEXT:
				case MariaDBParser.ST_LINESTRINGFROMWKB:
				case MariaDBParser.ST_NUMGEOMETRIES:
				case MariaDBParser.ST_NUMINTERIORRING:
				case MariaDBParser.ST_NUMINTERIORRINGS:
				case MariaDBParser.ST_NUMPOINTS:
				case MariaDBParser.ST_OVERLAPS:
				case MariaDBParser.ST_POINTFROMTEXT:
				case MariaDBParser.ST_POINTFROMWKB:
				case MariaDBParser.ST_POINTN:
				case MariaDBParser.ST_POLYFROMTEXT:
				case MariaDBParser.ST_POLYFROMWKB:
				case MariaDBParser.ST_POLYGONFROMTEXT:
				case MariaDBParser.ST_POLYGONFROMWKB:
				case MariaDBParser.ST_SRID:
				case MariaDBParser.ST_STARTPOINT:
				case MariaDBParser.ST_SYMDIFFERENCE:
				case MariaDBParser.ST_TOUCHES:
				case MariaDBParser.ST_UNION:
				case MariaDBParser.ST_WITHIN:
				case MariaDBParser.ST_X:
				case MariaDBParser.ST_Y:
				case MariaDBParser.SUBDATE:
				case MariaDBParser.SUBSTRING_INDEX:
				case MariaDBParser.SUBTIME:
				case MariaDBParser.SYSTEM_USER:
				case MariaDBParser.TAN:
				case MariaDBParser.TIMEDIFF:
				case MariaDBParser.TIMESTAMPADD:
				case MariaDBParser.TIMESTAMPDIFF:
				case MariaDBParser.TIME_FORMAT:
				case MariaDBParser.TIME_TO_SEC:
				case MariaDBParser.TOUCHES:
				case MariaDBParser.TO_BASE64:
				case MariaDBParser.TO_DAYS:
				case MariaDBParser.TO_SECONDS:
				case MariaDBParser.UCASE:
				case MariaDBParser.UNCOMPRESS:
				case MariaDBParser.UNCOMPRESSED_LENGTH:
				case MariaDBParser.UNHEX:
				case MariaDBParser.UNIX_TIMESTAMP:
				case MariaDBParser.UPDATEXML:
				case MariaDBParser.UPPER:
				case MariaDBParser.UUID:
				case MariaDBParser.UUID_SHORT:
				case MariaDBParser.VALIDATE_PASSWORD_STRENGTH:
				case MariaDBParser.VERSION:
				case MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case MariaDBParser.WEEKDAY:
				case MariaDBParser.WEEKOFYEAR:
				case MariaDBParser.WEIGHT_STRING:
				case MariaDBParser.WITHIN:
				case MariaDBParser.YEARWEEK:
				case MariaDBParser.Y_FUNCTION:
				case MariaDBParser.X_FUNCTION:
				case MariaDBParser.VIA:
				case MariaDBParser.LASTVAL:
				case MariaDBParser.NEXTVAL:
				case MariaDBParser.SETVAL:
				case MariaDBParser.PREVIOUS:
				case MariaDBParser.PERSISTENT:
				case MariaDBParser.BINLOG_MONITOR:
				case MariaDBParser.BINLOG_REPLAY:
				case MariaDBParser.FEDERATED_ADMIN:
				case MariaDBParser.READ_ONLY_ADMIN:
				case MariaDBParser.REPLICA:
				case MariaDBParser.REPLICAS:
				case MariaDBParser.REPLICATION_MASTER_ADMIN:
				case MariaDBParser.MONITOR:
				case MariaDBParser.READ_ONLY:
				case MariaDBParser.REPLAY:
				case MariaDBParser.MOD:
				case MariaDBParser.CHARSET_REVERSE_QOUTE_STRING:
				case MariaDBParser.STRING_LITERAL:
				case MariaDBParser.ID:
					{
					this.state = 3053;
					this.uidList();
					}
					break;
				case MariaDBParser.ALL:
					{
					this.state = 3054;
					this.match(MariaDBParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case MariaDBParser.REBUILD:
				_localctx = new AlterByRebuildPartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 3057;
				this.match(MariaDBParser.REBUILD);
				this.state = 3058;
				this.match(MariaDBParser.PARTITION);
				this.state = 3061;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.ATTRIBUTE:
				case MariaDBParser.BODY:
				case MariaDBParser.BUCKETS:
				case MariaDBParser.CONDITION:
				case MariaDBParser.CURRENT:
				case MariaDBParser.CURRENT_ROLE:
				case MariaDBParser.CURRENT_USER:
				case MariaDBParser.DATABASE:
				case MariaDBParser.DEFAULT:
				case MariaDBParser.DIAGNOSTICS:
				case MariaDBParser.EMPTY:
				case MariaDBParser.EXCEPT:
				case MariaDBParser.GROUP:
				case MariaDBParser.IF:
				case MariaDBParser.IGNORED:
				case MariaDBParser.INSERT:
				case MariaDBParser.LATERAL:
				case MariaDBParser.LEFT:
				case MariaDBParser.LOCKED:
				case MariaDBParser.MAXVALUE:
				case MariaDBParser.MINVALUE:
				case MariaDBParser.NUMBER:
				case MariaDBParser.OPTIONAL:
				case MariaDBParser.ORDER:
				case MariaDBParser.PRIMARY:
				case MariaDBParser.PACKAGE:
				case MariaDBParser.REPLACE:
				case MariaDBParser.RIGHT:
				case MariaDBParser.SCHEMA:
				case MariaDBParser.SKIP_:
				case MariaDBParser.STACKED:
				case MariaDBParser.STATEMENT:
				case MariaDBParser.DATE:
				case MariaDBParser.TIME:
				case MariaDBParser.TIMESTAMP:
				case MariaDBParser.DATETIME:
				case MariaDBParser.YEAR:
				case MariaDBParser.BINARY:
				case MariaDBParser.TEXT:
				case MariaDBParser.ENUM:
				case MariaDBParser.SERIAL:
				case MariaDBParser.JSON_ARRAY:
				case MariaDBParser.JSON_ARRAYAGG:
				case MariaDBParser.JSON_ARRAY_APPEND:
				case MariaDBParser.JSON_ARRAY_INSERT:
				case MariaDBParser.JSON_CONTAINS:
				case MariaDBParser.JSON_CONTAINS_PATH:
				case MariaDBParser.JSON_DEPTH:
				case MariaDBParser.JSON_EXTRACT:
				case MariaDBParser.JSON_INSERT:
				case MariaDBParser.JSON_KEYS:
				case MariaDBParser.JSON_LENGTH:
				case MariaDBParser.JSON_MERGE:
				case MariaDBParser.JSON_MERGE_PATCH:
				case MariaDBParser.JSON_MERGE_PRESERVE:
				case MariaDBParser.JSON_OBJECT:
				case MariaDBParser.JSON_OBJECTAGG:
				case MariaDBParser.JSON_OVERLAPS:
				case MariaDBParser.JSON_PRETTY:
				case MariaDBParser.JSON_QUOTE:
				case MariaDBParser.JSON_REMOVE:
				case MariaDBParser.JSON_REPLACE:
				case MariaDBParser.JSON_SCHEMA_VALID:
				case MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT:
				case MariaDBParser.JSON_SEARCH:
				case MariaDBParser.JSON_SET:
				case MariaDBParser.JSON_STORAGE_FREE:
				case MariaDBParser.JSON_STORAGE_SIZE:
				case MariaDBParser.JSON_TABLE:
				case MariaDBParser.JSON_TYPE:
				case MariaDBParser.JSON_UNQUOTE:
				case MariaDBParser.JSON_VALID:
				case MariaDBParser.JSON_VALUE:
				case MariaDBParser.NESTED:
				case MariaDBParser.ORDINALITY:
				case MariaDBParser.PATH:
				case MariaDBParser.AVG:
				case MariaDBParser.BIT_AND:
				case MariaDBParser.BIT_OR:
				case MariaDBParser.BIT_XOR:
				case MariaDBParser.COUNT:
				case MariaDBParser.CUME_DIST:
				case MariaDBParser.DENSE_RANK:
				case MariaDBParser.FIRST_VALUE:
				case MariaDBParser.GROUP_CONCAT:
				case MariaDBParser.LAG:
				case MariaDBParser.LAST_VALUE:
				case MariaDBParser.LEAD:
				case MariaDBParser.MAX:
				case MariaDBParser.MIN:
				case MariaDBParser.NTILE:
				case MariaDBParser.NTH_VALUE:
				case MariaDBParser.PERCENT_RANK:
				case MariaDBParser.RANK:
				case MariaDBParser.ROW_NUMBER:
				case MariaDBParser.STD:
				case MariaDBParser.STDDEV:
				case MariaDBParser.STDDEV_POP:
				case MariaDBParser.STDDEV_SAMP:
				case MariaDBParser.SUM:
				case MariaDBParser.VAR_POP:
				case MariaDBParser.VAR_SAMP:
				case MariaDBParser.VARIANCE:
				case MariaDBParser.CURRENT_DATE:
				case MariaDBParser.CURRENT_TIME:
				case MariaDBParser.CURRENT_TIMESTAMP:
				case MariaDBParser.LOCALTIME:
				case MariaDBParser.CURDATE:
				case MariaDBParser.CURTIME:
				case MariaDBParser.DATE_ADD:
				case MariaDBParser.DATE_SUB:
				case MariaDBParser.LOCALTIMESTAMP:
				case MariaDBParser.NOW:
				case MariaDBParser.POSITION:
				case MariaDBParser.SUBSTR:
				case MariaDBParser.SUBSTRING:
				case MariaDBParser.SYSDATE:
				case MariaDBParser.TRIM:
				case MariaDBParser.UTC_DATE:
				case MariaDBParser.UTC_TIME:
				case MariaDBParser.UTC_TIMESTAMP:
				case MariaDBParser.ACCOUNT:
				case MariaDBParser.ACTION:
				case MariaDBParser.AFTER:
				case MariaDBParser.AGGREGATE:
				case MariaDBParser.ALGORITHM:
				case MariaDBParser.ANY:
				case MariaDBParser.AT:
				case MariaDBParser.AUTHORS:
				case MariaDBParser.AUTOCOMMIT:
				case MariaDBParser.AUTOEXTEND_SIZE:
				case MariaDBParser.AUTO_INCREMENT:
				case MariaDBParser.AVG_ROW_LENGTH:
				case MariaDBParser.BEGIN:
				case MariaDBParser.BINLOG:
				case MariaDBParser.BIT:
				case MariaDBParser.BLOCK:
				case MariaDBParser.BOOL:
				case MariaDBParser.BOOLEAN:
				case MariaDBParser.BTREE:
				case MariaDBParser.CACHE:
				case MariaDBParser.CASCADED:
				case MariaDBParser.CHAIN:
				case MariaDBParser.CHANGED:
				case MariaDBParser.CHANNEL:
				case MariaDBParser.CHECKSUM:
				case MariaDBParser.PAGE_CHECKSUM:
				case MariaDBParser.CIPHER:
				case MariaDBParser.CLASS_ORIGIN:
				case MariaDBParser.CLIENT:
				case MariaDBParser.CLOSE:
				case MariaDBParser.CLUSTERING:
				case MariaDBParser.COALESCE:
				case MariaDBParser.CODE:
				case MariaDBParser.COLUMNS:
				case MariaDBParser.COLUMN_FORMAT:
				case MariaDBParser.COLUMN_NAME:
				case MariaDBParser.COMMENT:
				case MariaDBParser.COMMIT:
				case MariaDBParser.COMPACT:
				case MariaDBParser.COMPLETION:
				case MariaDBParser.COMPRESSED:
				case MariaDBParser.COMPRESSION:
				case MariaDBParser.CONCURRENT:
				case MariaDBParser.CONNECT:
				case MariaDBParser.CONNECTION:
				case MariaDBParser.CONSISTENT:
				case MariaDBParser.CONSTRAINT_CATALOG:
				case MariaDBParser.CONSTRAINT_SCHEMA:
				case MariaDBParser.CONSTRAINT_NAME:
				case MariaDBParser.CONTAINS:
				case MariaDBParser.CONTEXT:
				case MariaDBParser.CONTRIBUTORS:
				case MariaDBParser.COPY:
				case MariaDBParser.CPU:
				case MariaDBParser.CYCLE:
				case MariaDBParser.CURSOR_NAME:
				case MariaDBParser.DATA:
				case MariaDBParser.DATAFILE:
				case MariaDBParser.DEALLOCATE:
				case MariaDBParser.DEFAULT_AUTH:
				case MariaDBParser.DEFINER:
				case MariaDBParser.DELAY_KEY_WRITE:
				case MariaDBParser.DES_KEY_FILE:
				case MariaDBParser.DIRECTORY:
				case MariaDBParser.DISABLE:
				case MariaDBParser.DISCARD:
				case MariaDBParser.DISK:
				case MariaDBParser.DO:
				case MariaDBParser.DUMPFILE:
				case MariaDBParser.DUPLICATE:
				case MariaDBParser.DYNAMIC:
				case MariaDBParser.ENABLE:
				case MariaDBParser.ENCRYPTED:
				case MariaDBParser.ENCRYPTION:
				case MariaDBParser.ENCRYPTION_KEY_ID:
				case MariaDBParser.END:
				case MariaDBParser.ENDS:
				case MariaDBParser.ENGINE:
				case MariaDBParser.ENGINES:
				case MariaDBParser.ERROR:
				case MariaDBParser.ERRORS:
				case MariaDBParser.ESCAPE:
				case MariaDBParser.EVEN:
				case MariaDBParser.EVENT:
				case MariaDBParser.EVENTS:
				case MariaDBParser.EVERY:
				case MariaDBParser.EXCHANGE:
				case MariaDBParser.EXCLUSIVE:
				case MariaDBParser.EXPIRE:
				case MariaDBParser.EXPORT:
				case MariaDBParser.EXTENDED:
				case MariaDBParser.EXTENT_SIZE:
				case MariaDBParser.FAILED_LOGIN_ATTEMPTS:
				case MariaDBParser.FAST:
				case MariaDBParser.FAULTS:
				case MariaDBParser.FIELDS:
				case MariaDBParser.FILE_BLOCK_SIZE:
				case MariaDBParser.FILTER:
				case MariaDBParser.FIRST:
				case MariaDBParser.FIXED:
				case MariaDBParser.FLUSH:
				case MariaDBParser.FOLLOWS:
				case MariaDBParser.FOUND:
				case MariaDBParser.FULL:
				case MariaDBParser.FUNCTION:
				case MariaDBParser.GENERAL:
				case MariaDBParser.GLOBAL:
				case MariaDBParser.GRANTS:
				case MariaDBParser.GROUP_REPLICATION:
				case MariaDBParser.HANDLER:
				case MariaDBParser.HASH:
				case MariaDBParser.HELP:
				case MariaDBParser.HISTORY:
				case MariaDBParser.HOST:
				case MariaDBParser.HOSTS:
				case MariaDBParser.IDENTIFIED:
				case MariaDBParser.IGNORE_SERVER_IDS:
				case MariaDBParser.IMPORT:
				case MariaDBParser.INCREMENT:
				case MariaDBParser.INDEXES:
				case MariaDBParser.INITIAL_SIZE:
				case MariaDBParser.INPLACE:
				case MariaDBParser.INSERT_METHOD:
				case MariaDBParser.INSTALL:
				case MariaDBParser.INSTANCE:
				case MariaDBParser.INSTANT:
				case MariaDBParser.INVISIBLE:
				case MariaDBParser.INVOKER:
				case MariaDBParser.IO:
				case MariaDBParser.IO_THREAD:
				case MariaDBParser.IPC:
				case MariaDBParser.ISOLATION:
				case MariaDBParser.ISSUER:
				case MariaDBParser.JSON:
				case MariaDBParser.KEY_BLOCK_SIZE:
				case MariaDBParser.LANGUAGE:
				case MariaDBParser.LAST:
				case MariaDBParser.LEAVES:
				case MariaDBParser.LESS:
				case MariaDBParser.LEVEL:
				case MariaDBParser.LIST:
				case MariaDBParser.LOCAL:
				case MariaDBParser.LOCALES:
				case MariaDBParser.LOGFILE:
				case MariaDBParser.LOGS:
				case MariaDBParser.MASTER:
				case MariaDBParser.MASTER_AUTO_POSITION:
				case MariaDBParser.MASTER_CONNECT_RETRY:
				case MariaDBParser.MASTER_DELAY:
				case MariaDBParser.MASTER_HEARTBEAT_PERIOD:
				case MariaDBParser.MASTER_HOST:
				case MariaDBParser.MASTER_LOG_FILE:
				case MariaDBParser.MASTER_LOG_POS:
				case MariaDBParser.MASTER_PASSWORD:
				case MariaDBParser.MASTER_PORT:
				case MariaDBParser.MASTER_RETRY_COUNT:
				case MariaDBParser.MASTER_SSL:
				case MariaDBParser.MASTER_SSL_CA:
				case MariaDBParser.MASTER_SSL_CAPATH:
				case MariaDBParser.MASTER_SSL_CERT:
				case MariaDBParser.MASTER_SSL_CIPHER:
				case MariaDBParser.MASTER_SSL_CRL:
				case MariaDBParser.MASTER_SSL_CRLPATH:
				case MariaDBParser.MASTER_SSL_KEY:
				case MariaDBParser.MASTER_TLS_VERSION:
				case MariaDBParser.MASTER_USER:
				case MariaDBParser.MAX_CONNECTIONS_PER_HOUR:
				case MariaDBParser.MAX_QUERIES_PER_HOUR:
				case MariaDBParser.MAX_ROWS:
				case MariaDBParser.MAX_SIZE:
				case MariaDBParser.MAX_UPDATES_PER_HOUR:
				case MariaDBParser.MAX_USER_CONNECTIONS:
				case MariaDBParser.MEDIUM:
				case MariaDBParser.MEMBER:
				case MariaDBParser.MERGE:
				case MariaDBParser.MESSAGE_TEXT:
				case MariaDBParser.MID:
				case MariaDBParser.MIGRATE:
				case MariaDBParser.MIN_ROWS:
				case MariaDBParser.MODE:
				case MariaDBParser.MODIFY:
				case MariaDBParser.MUTEX:
				case MariaDBParser.MYSQL:
				case MariaDBParser.MYSQL_ERRNO:
				case MariaDBParser.NAME:
				case MariaDBParser.NAMES:
				case MariaDBParser.NCHAR:
				case MariaDBParser.NEVER:
				case MariaDBParser.NEXT:
				case MariaDBParser.NO:
				case MariaDBParser.NOCACHE:
				case MariaDBParser.NOCOPY:
				case MariaDBParser.NOCYCLE:
				case MariaDBParser.NOMAXVALUE:
				case MariaDBParser.NOMINVALUE:
				case MariaDBParser.NOWAIT:
				case MariaDBParser.NODEGROUP:
				case MariaDBParser.NONE:
				case MariaDBParser.ODBC:
				case MariaDBParser.OFFLINE:
				case MariaDBParser.OFFSET:
				case MariaDBParser.OF:
				case MariaDBParser.OJ:
				case MariaDBParser.OLD_PASSWORD:
				case MariaDBParser.ONE:
				case MariaDBParser.ONLINE:
				case MariaDBParser.ONLY:
				case MariaDBParser.OPEN:
				case MariaDBParser.OPTIMIZER_COSTS:
				case MariaDBParser.OPTIONS:
				case MariaDBParser.OWNER:
				case MariaDBParser.PACK_KEYS:
				case MariaDBParser.PAGE:
				case MariaDBParser.PARSER:
				case MariaDBParser.PARTIAL:
				case MariaDBParser.PARTITIONING:
				case MariaDBParser.PARTITIONS:
				case MariaDBParser.PASSWORD:
				case MariaDBParser.PASSWORD_LOCK_TIME:
				case MariaDBParser.PHASE:
				case MariaDBParser.PLUGIN:
				case MariaDBParser.PLUGIN_DIR:
				case MariaDBParser.PLUGINS:
				case MariaDBParser.PORT:
				case MariaDBParser.PRECEDES:
				case MariaDBParser.PREPARE:
				case MariaDBParser.PRESERVE:
				case MariaDBParser.PREV:
				case MariaDBParser.PROCESSLIST:
				case MariaDBParser.PROFILE:
				case MariaDBParser.PROFILES:
				case MariaDBParser.PROXY:
				case MariaDBParser.QUERY:
				case MariaDBParser.QUERY_RESPONSE_TIME:
				case MariaDBParser.QUICK:
				case MariaDBParser.REBUILD:
				case MariaDBParser.RECOVER:
				case MariaDBParser.RECURSIVE:
				case MariaDBParser.REDO_BUFFER_SIZE:
				case MariaDBParser.REDUNDANT:
				case MariaDBParser.RELAY:
				case MariaDBParser.RELAY_LOG_FILE:
				case MariaDBParser.RELAY_LOG_POS:
				case MariaDBParser.RELAYLOG:
				case MariaDBParser.REMOVE:
				case MariaDBParser.REORGANIZE:
				case MariaDBParser.REPAIR:
				case MariaDBParser.REPLICATE_DO_DB:
				case MariaDBParser.REPLICATE_DO_TABLE:
				case MariaDBParser.REPLICATE_IGNORE_DB:
				case MariaDBParser.REPLICATE_IGNORE_TABLE:
				case MariaDBParser.REPLICATE_REWRITE_DB:
				case MariaDBParser.REPLICATE_WILD_DO_TABLE:
				case MariaDBParser.REPLICATE_WILD_IGNORE_TABLE:
				case MariaDBParser.REPLICATION:
				case MariaDBParser.RESET:
				case MariaDBParser.RESTART:
				case MariaDBParser.RESUME:
				case MariaDBParser.RETURNED_SQLSTATE:
				case MariaDBParser.RETURNS:
				case MariaDBParser.REUSE:
				case MariaDBParser.ROLE:
				case MariaDBParser.ROLLBACK:
				case MariaDBParser.ROLLUP:
				case MariaDBParser.ROTATE:
				case MariaDBParser.ROW:
				case MariaDBParser.ROWS:
				case MariaDBParser.ROW_FORMAT:
				case MariaDBParser.RTREE:
				case MariaDBParser.SAVEPOINT:
				case MariaDBParser.SCHEDULE:
				case MariaDBParser.SECURITY:
				case MariaDBParser.SEQUENCE:
				case MariaDBParser.SERVER:
				case MariaDBParser.SESSION:
				case MariaDBParser.SHARE:
				case MariaDBParser.SHARED:
				case MariaDBParser.SIGNED:
				case MariaDBParser.SIMPLE:
				case MariaDBParser.SLAVE:
				case MariaDBParser.SLAVES:
				case MariaDBParser.SLOW:
				case MariaDBParser.SNAPSHOT:
				case MariaDBParser.SOCKET:
				case MariaDBParser.SOME:
				case MariaDBParser.SONAME:
				case MariaDBParser.SOUNDS:
				case MariaDBParser.SOURCE:
				case MariaDBParser.SQL_AFTER_GTIDS:
				case MariaDBParser.SQL_AFTER_MTS_GAPS:
				case MariaDBParser.SQL_BEFORE_GTIDS:
				case MariaDBParser.SQL_BUFFER_RESULT:
				case MariaDBParser.SQL_CACHE:
				case MariaDBParser.SQL_NO_CACHE:
				case MariaDBParser.SQL_THREAD:
				case MariaDBParser.START:
				case MariaDBParser.STARTS:
				case MariaDBParser.STATS_AUTO_RECALC:
				case MariaDBParser.STATS_PERSISTENT:
				case MariaDBParser.STATS_SAMPLE_PAGES:
				case MariaDBParser.STATUS:
				case MariaDBParser.STOP:
				case MariaDBParser.STORAGE:
				case MariaDBParser.STRING:
				case MariaDBParser.SUBCLASS_ORIGIN:
				case MariaDBParser.SUBJECT:
				case MariaDBParser.SUBPARTITION:
				case MariaDBParser.SUBPARTITIONS:
				case MariaDBParser.SUSPEND:
				case MariaDBParser.SWAPS:
				case MariaDBParser.SWITCHES:
				case MariaDBParser.TABLE_NAME:
				case MariaDBParser.TABLESPACE:
				case MariaDBParser.TABLE_TYPE:
				case MariaDBParser.TEMPORARY:
				case MariaDBParser.TEMPTABLE:
				case MariaDBParser.THAN:
				case MariaDBParser.TRADITIONAL:
				case MariaDBParser.TRANSACTION:
				case MariaDBParser.TRANSACTIONAL:
				case MariaDBParser.TRIGGERS:
				case MariaDBParser.TRUNCATE:
				case MariaDBParser.TYPES:
				case MariaDBParser.UNBOUNDED:
				case MariaDBParser.UNDEFINED:
				case MariaDBParser.UNDOFILE:
				case MariaDBParser.UNDO_BUFFER_SIZE:
				case MariaDBParser.UNINSTALL:
				case MariaDBParser.UNKNOWN:
				case MariaDBParser.UNTIL:
				case MariaDBParser.UPGRADE:
				case MariaDBParser.USER:
				case MariaDBParser.USE_FRM:
				case MariaDBParser.USER_RESOURCES:
				case MariaDBParser.VALIDATION:
				case MariaDBParser.VALUE:
				case MariaDBParser.VARIABLES:
				case MariaDBParser.VIEW:
				case MariaDBParser.VIRTUAL:
				case MariaDBParser.VISIBLE:
				case MariaDBParser.WAIT:
				case MariaDBParser.WARNINGS:
				case MariaDBParser.WITHOUT:
				case MariaDBParser.WORK:
				case MariaDBParser.WRAPPER:
				case MariaDBParser.WSREP_MEMBERSHIP:
				case MariaDBParser.WSREP_STATUS:
				case MariaDBParser.X509:
				case MariaDBParser.XA:
				case MariaDBParser.XML:
				case MariaDBParser.EUR:
				case MariaDBParser.USA:
				case MariaDBParser.JIS:
				case MariaDBParser.ISO:
				case MariaDBParser.INTERNAL:
				case MariaDBParser.QUARTER:
				case MariaDBParser.MONTH:
				case MariaDBParser.DAY:
				case MariaDBParser.HOUR:
				case MariaDBParser.MINUTE:
				case MariaDBParser.WEEK:
				case MariaDBParser.SECOND:
				case MariaDBParser.MICROSECOND:
				case MariaDBParser.USER_STATISTICS:
				case MariaDBParser.CLIENT_STATISTICS:
				case MariaDBParser.INDEX_STATISTICS:
				case MariaDBParser.TABLE_STATISTICS:
				case MariaDBParser.ADMIN:
				case MariaDBParser.AUDIT_ADMIN:
				case MariaDBParser.BACKUP_ADMIN:
				case MariaDBParser.BINLOG_ADMIN:
				case MariaDBParser.BINLOG_ENCRYPTION_ADMIN:
				case MariaDBParser.CLONE_ADMIN:
				case MariaDBParser.CONNECTION_ADMIN:
				case MariaDBParser.ENCRYPTION_KEY_ADMIN:
				case MariaDBParser.EXECUTE:
				case MariaDBParser.FILE:
				case MariaDBParser.FIREWALL_ADMIN:
				case MariaDBParser.FIREWALL_USER:
				case MariaDBParser.GROUP_REPLICATION_ADMIN:
				case MariaDBParser.INNODB_REDO_LOG_ARCHIVE:
				case MariaDBParser.INVOKE:
				case MariaDBParser.LAMBDA:
				case MariaDBParser.NDB_STORED_USER:
				case MariaDBParser.PASSWORDLESS_USER_ADMIN:
				case MariaDBParser.PERSIST_RO_VARIABLES_ADMIN:
				case MariaDBParser.PRIVILEGES:
				case MariaDBParser.PROCESS:
				case MariaDBParser.RELOAD:
				case MariaDBParser.REPLICATION_APPLIER:
				case MariaDBParser.REPLICATION_SLAVE_ADMIN:
				case MariaDBParser.RESOURCE_GROUP_ADMIN:
				case MariaDBParser.RESOURCE_GROUP_USER:
				case MariaDBParser.ROLE_ADMIN:
				case MariaDBParser.ROUTINE:
				case MariaDBParser.S3:
				case MariaDBParser.SESSION_VARIABLES_ADMIN:
				case MariaDBParser.SET_USER_ID:
				case MariaDBParser.SHOW_ROUTINE:
				case MariaDBParser.SHUTDOWN:
				case MariaDBParser.SUPER:
				case MariaDBParser.SYSTEM_VARIABLES_ADMIN:
				case MariaDBParser.TABLES:
				case MariaDBParser.TABLE_ENCRYPTION_ADMIN:
				case MariaDBParser.VERSION_TOKEN_ADMIN:
				case MariaDBParser.XA_RECOVER_ADMIN:
				case MariaDBParser.ARMSCII8:
				case MariaDBParser.ASCII:
				case MariaDBParser.BIG5:
				case MariaDBParser.CP1250:
				case MariaDBParser.CP1251:
				case MariaDBParser.CP1256:
				case MariaDBParser.CP1257:
				case MariaDBParser.CP850:
				case MariaDBParser.CP852:
				case MariaDBParser.CP866:
				case MariaDBParser.CP932:
				case MariaDBParser.DEC8:
				case MariaDBParser.EUCJPMS:
				case MariaDBParser.EUCKR:
				case MariaDBParser.GB18030:
				case MariaDBParser.GB2312:
				case MariaDBParser.GBK:
				case MariaDBParser.GEOSTD8:
				case MariaDBParser.GREEK:
				case MariaDBParser.HEBREW:
				case MariaDBParser.HP8:
				case MariaDBParser.KEYBCS2:
				case MariaDBParser.KOI8R:
				case MariaDBParser.KOI8U:
				case MariaDBParser.LATIN1:
				case MariaDBParser.LATIN2:
				case MariaDBParser.LATIN5:
				case MariaDBParser.LATIN7:
				case MariaDBParser.MACCE:
				case MariaDBParser.MACROMAN:
				case MariaDBParser.SJIS:
				case MariaDBParser.SWE7:
				case MariaDBParser.TIS620:
				case MariaDBParser.UCS2:
				case MariaDBParser.UJIS:
				case MariaDBParser.UTF16:
				case MariaDBParser.UTF16LE:
				case MariaDBParser.UTF32:
				case MariaDBParser.UTF8:
				case MariaDBParser.UTF8MB3:
				case MariaDBParser.UTF8MB4:
				case MariaDBParser.ARCHIVE:
				case MariaDBParser.BLACKHOLE:
				case MariaDBParser.CSV:
				case MariaDBParser.FEDERATED:
				case MariaDBParser.INNODB:
				case MariaDBParser.MEMORY:
				case MariaDBParser.MRG_MYISAM:
				case MariaDBParser.MYISAM:
				case MariaDBParser.NDB:
				case MariaDBParser.NDBCLUSTER:
				case MariaDBParser.PERFORMANCE_SCHEMA:
				case MariaDBParser.TOKUDB:
				case MariaDBParser.REPEATABLE:
				case MariaDBParser.COMMITTED:
				case MariaDBParser.UNCOMMITTED:
				case MariaDBParser.SERIALIZABLE:
				case MariaDBParser.GEOMETRYCOLLECTION:
				case MariaDBParser.LINESTRING:
				case MariaDBParser.MULTILINESTRING:
				case MariaDBParser.MULTIPOINT:
				case MariaDBParser.MULTIPOLYGON:
				case MariaDBParser.POINT:
				case MariaDBParser.POLYGON:
				case MariaDBParser.ABS:
				case MariaDBParser.ACOS:
				case MariaDBParser.ADDDATE:
				case MariaDBParser.ADDTIME:
				case MariaDBParser.AES_DECRYPT:
				case MariaDBParser.AES_ENCRYPT:
				case MariaDBParser.AREA:
				case MariaDBParser.ASBINARY:
				case MariaDBParser.ASIN:
				case MariaDBParser.ASTEXT:
				case MariaDBParser.ASWKB:
				case MariaDBParser.ASWKT:
				case MariaDBParser.ASYMMETRIC_DECRYPT:
				case MariaDBParser.ASYMMETRIC_DERIVE:
				case MariaDBParser.ASYMMETRIC_ENCRYPT:
				case MariaDBParser.ASYMMETRIC_SIGN:
				case MariaDBParser.ASYMMETRIC_VERIFY:
				case MariaDBParser.ATAN:
				case MariaDBParser.ATAN2:
				case MariaDBParser.BENCHMARK:
				case MariaDBParser.BIN:
				case MariaDBParser.BIT_COUNT:
				case MariaDBParser.BIT_LENGTH:
				case MariaDBParser.BUFFER:
				case MariaDBParser.CATALOG_NAME:
				case MariaDBParser.CEIL:
				case MariaDBParser.CEILING:
				case MariaDBParser.CENTROID:
				case MariaDBParser.CHARACTER_LENGTH:
				case MariaDBParser.CHARSET:
				case MariaDBParser.CHAR_LENGTH:
				case MariaDBParser.COERCIBILITY:
				case MariaDBParser.COLLATION:
				case MariaDBParser.COMPRESS:
				case MariaDBParser.CONCAT:
				case MariaDBParser.CONCAT_WS:
				case MariaDBParser.CONNECTION_ID:
				case MariaDBParser.CONV:
				case MariaDBParser.CONVERT_TZ:
				case MariaDBParser.COS:
				case MariaDBParser.COT:
				case MariaDBParser.CRC32:
				case MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY:
				case MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY:
				case MariaDBParser.CREATE_DH_PARAMETERS:
				case MariaDBParser.CREATE_DIGEST:
				case MariaDBParser.CROSSES:
				case MariaDBParser.DATEDIFF:
				case MariaDBParser.DATE_FORMAT:
				case MariaDBParser.DAYNAME:
				case MariaDBParser.DAYOFMONTH:
				case MariaDBParser.DAYOFWEEK:
				case MariaDBParser.DAYOFYEAR:
				case MariaDBParser.DECODE:
				case MariaDBParser.DEGREES:
				case MariaDBParser.DES_DECRYPT:
				case MariaDBParser.DES_ENCRYPT:
				case MariaDBParser.DIMENSION:
				case MariaDBParser.DISJOINT:
				case MariaDBParser.ELT:
				case MariaDBParser.ENCODE:
				case MariaDBParser.ENCRYPT:
				case MariaDBParser.ENDPOINT:
				case MariaDBParser.ENGINE_ATTRIBUTE:
				case MariaDBParser.ENVELOPE:
				case MariaDBParser.EQUALS:
				case MariaDBParser.EXP:
				case MariaDBParser.EXPORT_SET:
				case MariaDBParser.EXTERIORRING:
				case MariaDBParser.EXTRACTVALUE:
				case MariaDBParser.FIELD:
				case MariaDBParser.FIND_IN_SET:
				case MariaDBParser.FLOOR:
				case MariaDBParser.FORMAT:
				case MariaDBParser.FOUND_ROWS:
				case MariaDBParser.FROM_BASE64:
				case MariaDBParser.FROM_DAYS:
				case MariaDBParser.FROM_UNIXTIME:
				case MariaDBParser.GEOMCOLLFROMTEXT:
				case MariaDBParser.GEOMCOLLFROMWKB:
				case MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT:
				case MariaDBParser.GEOMETRYCOLLECTIONFROMWKB:
				case MariaDBParser.GEOMETRYFROMTEXT:
				case MariaDBParser.GEOMETRYFROMWKB:
				case MariaDBParser.GEOMETRYN:
				case MariaDBParser.GEOMETRYTYPE:
				case MariaDBParser.GEOMFROMTEXT:
				case MariaDBParser.GEOMFROMWKB:
				case MariaDBParser.GET_FORMAT:
				case MariaDBParser.GET_LOCK:
				case MariaDBParser.GLENGTH:
				case MariaDBParser.GREATEST:
				case MariaDBParser.GTID_SUBSET:
				case MariaDBParser.GTID_SUBTRACT:
				case MariaDBParser.HEX:
				case MariaDBParser.IFNULL:
				case MariaDBParser.INET6_ATON:
				case MariaDBParser.INET6_NTOA:
				case MariaDBParser.INET_ATON:
				case MariaDBParser.INET_NTOA:
				case MariaDBParser.INSTR:
				case MariaDBParser.INTERIORRINGN:
				case MariaDBParser.INTERSECTS:
				case MariaDBParser.ISCLOSED:
				case MariaDBParser.ISEMPTY:
				case MariaDBParser.ISNULL:
				case MariaDBParser.ISSIMPLE:
				case MariaDBParser.IS_FREE_LOCK:
				case MariaDBParser.IS_IPV4:
				case MariaDBParser.IS_IPV4_COMPAT:
				case MariaDBParser.IS_IPV4_MAPPED:
				case MariaDBParser.IS_IPV6:
				case MariaDBParser.IS_USED_LOCK:
				case MariaDBParser.LAST_INSERT_ID:
				case MariaDBParser.LCASE:
				case MariaDBParser.LEAST:
				case MariaDBParser.LENGTH:
				case MariaDBParser.LINEFROMTEXT:
				case MariaDBParser.LINEFROMWKB:
				case MariaDBParser.LINESTRINGFROMTEXT:
				case MariaDBParser.LINESTRINGFROMWKB:
				case MariaDBParser.LN:
				case MariaDBParser.LOAD_FILE:
				case MariaDBParser.LOCATE:
				case MariaDBParser.LOG:
				case MariaDBParser.LOG10:
				case MariaDBParser.LOG2:
				case MariaDBParser.LOWER:
				case MariaDBParser.LPAD:
				case MariaDBParser.LTRIM:
				case MariaDBParser.MAKEDATE:
				case MariaDBParser.MAKETIME:
				case MariaDBParser.MAKE_SET:
				case MariaDBParser.MASTER_POS_WAIT:
				case MariaDBParser.MBRCONTAINS:
				case MariaDBParser.MBRDISJOINT:
				case MariaDBParser.MBREQUAL:
				case MariaDBParser.MBRINTERSECTS:
				case MariaDBParser.MBROVERLAPS:
				case MariaDBParser.MBRTOUCHES:
				case MariaDBParser.MBRWITHIN:
				case MariaDBParser.MD5:
				case MariaDBParser.MLINEFROMTEXT:
				case MariaDBParser.MLINEFROMWKB:
				case MariaDBParser.MONTHNAME:
				case MariaDBParser.MPOINTFROMTEXT:
				case MariaDBParser.MPOINTFROMWKB:
				case MariaDBParser.MPOLYFROMTEXT:
				case MariaDBParser.MPOLYFROMWKB:
				case MariaDBParser.MULTILINESTRINGFROMTEXT:
				case MariaDBParser.MULTILINESTRINGFROMWKB:
				case MariaDBParser.MULTIPOINTFROMTEXT:
				case MariaDBParser.MULTIPOINTFROMWKB:
				case MariaDBParser.MULTIPOLYGONFROMTEXT:
				case MariaDBParser.MULTIPOLYGONFROMWKB:
				case MariaDBParser.NAME_CONST:
				case MariaDBParser.NULLIF:
				case MariaDBParser.NUMGEOMETRIES:
				case MariaDBParser.NUMINTERIORRINGS:
				case MariaDBParser.NUMPOINTS:
				case MariaDBParser.OCT:
				case MariaDBParser.OCTET_LENGTH:
				case MariaDBParser.ORD:
				case MariaDBParser.OVERLAPS:
				case MariaDBParser.PERIOD_ADD:
				case MariaDBParser.PERIOD_DIFF:
				case MariaDBParser.PI:
				case MariaDBParser.POINTFROMTEXT:
				case MariaDBParser.POINTFROMWKB:
				case MariaDBParser.POINTN:
				case MariaDBParser.POLYFROMTEXT:
				case MariaDBParser.POLYFROMWKB:
				case MariaDBParser.POLYGONFROMTEXT:
				case MariaDBParser.POLYGONFROMWKB:
				case MariaDBParser.POW:
				case MariaDBParser.POWER:
				case MariaDBParser.QUOTE:
				case MariaDBParser.RADIANS:
				case MariaDBParser.RAND:
				case MariaDBParser.RANDOM_BYTES:
				case MariaDBParser.RELEASE_LOCK:
				case MariaDBParser.REVERSE:
				case MariaDBParser.ROUND:
				case MariaDBParser.ROW_COUNT:
				case MariaDBParser.RPAD:
				case MariaDBParser.RTRIM:
				case MariaDBParser.SEC_TO_TIME:
				case MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE:
				case MariaDBParser.SESSION_USER:
				case MariaDBParser.SHA:
				case MariaDBParser.SHA1:
				case MariaDBParser.SHA2:
				case MariaDBParser.SCHEMA_NAME:
				case MariaDBParser.SIGN:
				case MariaDBParser.SIN:
				case MariaDBParser.SLEEP:
				case MariaDBParser.SOUNDEX:
				case MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS:
				case MariaDBParser.SQRT:
				case MariaDBParser.SRID:
				case MariaDBParser.STARTPOINT:
				case MariaDBParser.STRCMP:
				case MariaDBParser.STR_TO_DATE:
				case MariaDBParser.ST_AREA:
				case MariaDBParser.ST_ASBINARY:
				case MariaDBParser.ST_ASTEXT:
				case MariaDBParser.ST_ASWKB:
				case MariaDBParser.ST_ASWKT:
				case MariaDBParser.ST_BUFFER:
				case MariaDBParser.ST_CENTROID:
				case MariaDBParser.ST_CONTAINS:
				case MariaDBParser.ST_CROSSES:
				case MariaDBParser.ST_DIFFERENCE:
				case MariaDBParser.ST_DIMENSION:
				case MariaDBParser.ST_DISJOINT:
				case MariaDBParser.ST_DISTANCE:
				case MariaDBParser.ST_ENDPOINT:
				case MariaDBParser.ST_ENVELOPE:
				case MariaDBParser.ST_EQUALS:
				case MariaDBParser.ST_EXTERIORRING:
				case MariaDBParser.ST_GEOMCOLLFROMTEXT:
				case MariaDBParser.ST_GEOMCOLLFROMTXT:
				case MariaDBParser.ST_GEOMCOLLFROMWKB:
				case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
				case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB:
				case MariaDBParser.ST_GEOMETRYFROMTEXT:
				case MariaDBParser.ST_GEOMETRYFROMWKB:
				case MariaDBParser.ST_GEOMETRYN:
				case MariaDBParser.ST_GEOMETRYTYPE:
				case MariaDBParser.ST_GEOMFROMTEXT:
				case MariaDBParser.ST_GEOMFROMWKB:
				case MariaDBParser.ST_INTERIORRINGN:
				case MariaDBParser.ST_INTERSECTION:
				case MariaDBParser.ST_INTERSECTS:
				case MariaDBParser.ST_ISCLOSED:
				case MariaDBParser.ST_ISEMPTY:
				case MariaDBParser.ST_ISSIMPLE:
				case MariaDBParser.ST_LINEFROMTEXT:
				case MariaDBParser.ST_LINEFROMWKB:
				case MariaDBParser.ST_LINESTRINGFROMTEXT:
				case MariaDBParser.ST_LINESTRINGFROMWKB:
				case MariaDBParser.ST_NUMGEOMETRIES:
				case MariaDBParser.ST_NUMINTERIORRING:
				case MariaDBParser.ST_NUMINTERIORRINGS:
				case MariaDBParser.ST_NUMPOINTS:
				case MariaDBParser.ST_OVERLAPS:
				case MariaDBParser.ST_POINTFROMTEXT:
				case MariaDBParser.ST_POINTFROMWKB:
				case MariaDBParser.ST_POINTN:
				case MariaDBParser.ST_POLYFROMTEXT:
				case MariaDBParser.ST_POLYFROMWKB:
				case MariaDBParser.ST_POLYGONFROMTEXT:
				case MariaDBParser.ST_POLYGONFROMWKB:
				case MariaDBParser.ST_SRID:
				case MariaDBParser.ST_STARTPOINT:
				case MariaDBParser.ST_SYMDIFFERENCE:
				case MariaDBParser.ST_TOUCHES:
				case MariaDBParser.ST_UNION:
				case MariaDBParser.ST_WITHIN:
				case MariaDBParser.ST_X:
				case MariaDBParser.ST_Y:
				case MariaDBParser.SUBDATE:
				case MariaDBParser.SUBSTRING_INDEX:
				case MariaDBParser.SUBTIME:
				case MariaDBParser.SYSTEM_USER:
				case MariaDBParser.TAN:
				case MariaDBParser.TIMEDIFF:
				case MariaDBParser.TIMESTAMPADD:
				case MariaDBParser.TIMESTAMPDIFF:
				case MariaDBParser.TIME_FORMAT:
				case MariaDBParser.TIME_TO_SEC:
				case MariaDBParser.TOUCHES:
				case MariaDBParser.TO_BASE64:
				case MariaDBParser.TO_DAYS:
				case MariaDBParser.TO_SECONDS:
				case MariaDBParser.UCASE:
				case MariaDBParser.UNCOMPRESS:
				case MariaDBParser.UNCOMPRESSED_LENGTH:
				case MariaDBParser.UNHEX:
				case MariaDBParser.UNIX_TIMESTAMP:
				case MariaDBParser.UPDATEXML:
				case MariaDBParser.UPPER:
				case MariaDBParser.UUID:
				case MariaDBParser.UUID_SHORT:
				case MariaDBParser.VALIDATE_PASSWORD_STRENGTH:
				case MariaDBParser.VERSION:
				case MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case MariaDBParser.WEEKDAY:
				case MariaDBParser.WEEKOFYEAR:
				case MariaDBParser.WEIGHT_STRING:
				case MariaDBParser.WITHIN:
				case MariaDBParser.YEARWEEK:
				case MariaDBParser.Y_FUNCTION:
				case MariaDBParser.X_FUNCTION:
				case MariaDBParser.VIA:
				case MariaDBParser.LASTVAL:
				case MariaDBParser.NEXTVAL:
				case MariaDBParser.SETVAL:
				case MariaDBParser.PREVIOUS:
				case MariaDBParser.PERSISTENT:
				case MariaDBParser.BINLOG_MONITOR:
				case MariaDBParser.BINLOG_REPLAY:
				case MariaDBParser.FEDERATED_ADMIN:
				case MariaDBParser.READ_ONLY_ADMIN:
				case MariaDBParser.REPLICA:
				case MariaDBParser.REPLICAS:
				case MariaDBParser.REPLICATION_MASTER_ADMIN:
				case MariaDBParser.MONITOR:
				case MariaDBParser.READ_ONLY:
				case MariaDBParser.REPLAY:
				case MariaDBParser.MOD:
				case MariaDBParser.CHARSET_REVERSE_QOUTE_STRING:
				case MariaDBParser.STRING_LITERAL:
				case MariaDBParser.ID:
					{
					this.state = 3059;
					this.uidList();
					}
					break;
				case MariaDBParser.ALL:
					{
					this.state = 3060;
					this.match(MariaDBParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case MariaDBParser.REPAIR:
				_localctx = new AlterByRepairPartitionContext(_localctx);
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 3063;
				this.match(MariaDBParser.REPAIR);
				this.state = 3064;
				this.match(MariaDBParser.PARTITION);
				this.state = 3067;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.ATTRIBUTE:
				case MariaDBParser.BODY:
				case MariaDBParser.BUCKETS:
				case MariaDBParser.CONDITION:
				case MariaDBParser.CURRENT:
				case MariaDBParser.CURRENT_ROLE:
				case MariaDBParser.CURRENT_USER:
				case MariaDBParser.DATABASE:
				case MariaDBParser.DEFAULT:
				case MariaDBParser.DIAGNOSTICS:
				case MariaDBParser.EMPTY:
				case MariaDBParser.EXCEPT:
				case MariaDBParser.GROUP:
				case MariaDBParser.IF:
				case MariaDBParser.IGNORED:
				case MariaDBParser.INSERT:
				case MariaDBParser.LATERAL:
				case MariaDBParser.LEFT:
				case MariaDBParser.LOCKED:
				case MariaDBParser.MAXVALUE:
				case MariaDBParser.MINVALUE:
				case MariaDBParser.NUMBER:
				case MariaDBParser.OPTIONAL:
				case MariaDBParser.ORDER:
				case MariaDBParser.PRIMARY:
				case MariaDBParser.PACKAGE:
				case MariaDBParser.REPLACE:
				case MariaDBParser.RIGHT:
				case MariaDBParser.SCHEMA:
				case MariaDBParser.SKIP_:
				case MariaDBParser.STACKED:
				case MariaDBParser.STATEMENT:
				case MariaDBParser.DATE:
				case MariaDBParser.TIME:
				case MariaDBParser.TIMESTAMP:
				case MariaDBParser.DATETIME:
				case MariaDBParser.YEAR:
				case MariaDBParser.BINARY:
				case MariaDBParser.TEXT:
				case MariaDBParser.ENUM:
				case MariaDBParser.SERIAL:
				case MariaDBParser.JSON_ARRAY:
				case MariaDBParser.JSON_ARRAYAGG:
				case MariaDBParser.JSON_ARRAY_APPEND:
				case MariaDBParser.JSON_ARRAY_INSERT:
				case MariaDBParser.JSON_CONTAINS:
				case MariaDBParser.JSON_CONTAINS_PATH:
				case MariaDBParser.JSON_DEPTH:
				case MariaDBParser.JSON_EXTRACT:
				case MariaDBParser.JSON_INSERT:
				case MariaDBParser.JSON_KEYS:
				case MariaDBParser.JSON_LENGTH:
				case MariaDBParser.JSON_MERGE:
				case MariaDBParser.JSON_MERGE_PATCH:
				case MariaDBParser.JSON_MERGE_PRESERVE:
				case MariaDBParser.JSON_OBJECT:
				case MariaDBParser.JSON_OBJECTAGG:
				case MariaDBParser.JSON_OVERLAPS:
				case MariaDBParser.JSON_PRETTY:
				case MariaDBParser.JSON_QUOTE:
				case MariaDBParser.JSON_REMOVE:
				case MariaDBParser.JSON_REPLACE:
				case MariaDBParser.JSON_SCHEMA_VALID:
				case MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT:
				case MariaDBParser.JSON_SEARCH:
				case MariaDBParser.JSON_SET:
				case MariaDBParser.JSON_STORAGE_FREE:
				case MariaDBParser.JSON_STORAGE_SIZE:
				case MariaDBParser.JSON_TABLE:
				case MariaDBParser.JSON_TYPE:
				case MariaDBParser.JSON_UNQUOTE:
				case MariaDBParser.JSON_VALID:
				case MariaDBParser.JSON_VALUE:
				case MariaDBParser.NESTED:
				case MariaDBParser.ORDINALITY:
				case MariaDBParser.PATH:
				case MariaDBParser.AVG:
				case MariaDBParser.BIT_AND:
				case MariaDBParser.BIT_OR:
				case MariaDBParser.BIT_XOR:
				case MariaDBParser.COUNT:
				case MariaDBParser.CUME_DIST:
				case MariaDBParser.DENSE_RANK:
				case MariaDBParser.FIRST_VALUE:
				case MariaDBParser.GROUP_CONCAT:
				case MariaDBParser.LAG:
				case MariaDBParser.LAST_VALUE:
				case MariaDBParser.LEAD:
				case MariaDBParser.MAX:
				case MariaDBParser.MIN:
				case MariaDBParser.NTILE:
				case MariaDBParser.NTH_VALUE:
				case MariaDBParser.PERCENT_RANK:
				case MariaDBParser.RANK:
				case MariaDBParser.ROW_NUMBER:
				case MariaDBParser.STD:
				case MariaDBParser.STDDEV:
				case MariaDBParser.STDDEV_POP:
				case MariaDBParser.STDDEV_SAMP:
				case MariaDBParser.SUM:
				case MariaDBParser.VAR_POP:
				case MariaDBParser.VAR_SAMP:
				case MariaDBParser.VARIANCE:
				case MariaDBParser.CURRENT_DATE:
				case MariaDBParser.CURRENT_TIME:
				case MariaDBParser.CURRENT_TIMESTAMP:
				case MariaDBParser.LOCALTIME:
				case MariaDBParser.CURDATE:
				case MariaDBParser.CURTIME:
				case MariaDBParser.DATE_ADD:
				case MariaDBParser.DATE_SUB:
				case MariaDBParser.LOCALTIMESTAMP:
				case MariaDBParser.NOW:
				case MariaDBParser.POSITION:
				case MariaDBParser.SUBSTR:
				case MariaDBParser.SUBSTRING:
				case MariaDBParser.SYSDATE:
				case MariaDBParser.TRIM:
				case MariaDBParser.UTC_DATE:
				case MariaDBParser.UTC_TIME:
				case MariaDBParser.UTC_TIMESTAMP:
				case MariaDBParser.ACCOUNT:
				case MariaDBParser.ACTION:
				case MariaDBParser.AFTER:
				case MariaDBParser.AGGREGATE:
				case MariaDBParser.ALGORITHM:
				case MariaDBParser.ANY:
				case MariaDBParser.AT:
				case MariaDBParser.AUTHORS:
				case MariaDBParser.AUTOCOMMIT:
				case MariaDBParser.AUTOEXTEND_SIZE:
				case MariaDBParser.AUTO_INCREMENT:
				case MariaDBParser.AVG_ROW_LENGTH:
				case MariaDBParser.BEGIN:
				case MariaDBParser.BINLOG:
				case MariaDBParser.BIT:
				case MariaDBParser.BLOCK:
				case MariaDBParser.BOOL:
				case MariaDBParser.BOOLEAN:
				case MariaDBParser.BTREE:
				case MariaDBParser.CACHE:
				case MariaDBParser.CASCADED:
				case MariaDBParser.CHAIN:
				case MariaDBParser.CHANGED:
				case MariaDBParser.CHANNEL:
				case MariaDBParser.CHECKSUM:
				case MariaDBParser.PAGE_CHECKSUM:
				case MariaDBParser.CIPHER:
				case MariaDBParser.CLASS_ORIGIN:
				case MariaDBParser.CLIENT:
				case MariaDBParser.CLOSE:
				case MariaDBParser.CLUSTERING:
				case MariaDBParser.COALESCE:
				case MariaDBParser.CODE:
				case MariaDBParser.COLUMNS:
				case MariaDBParser.COLUMN_FORMAT:
				case MariaDBParser.COLUMN_NAME:
				case MariaDBParser.COMMENT:
				case MariaDBParser.COMMIT:
				case MariaDBParser.COMPACT:
				case MariaDBParser.COMPLETION:
				case MariaDBParser.COMPRESSED:
				case MariaDBParser.COMPRESSION:
				case MariaDBParser.CONCURRENT:
				case MariaDBParser.CONNECT:
				case MariaDBParser.CONNECTION:
				case MariaDBParser.CONSISTENT:
				case MariaDBParser.CONSTRAINT_CATALOG:
				case MariaDBParser.CONSTRAINT_SCHEMA:
				case MariaDBParser.CONSTRAINT_NAME:
				case MariaDBParser.CONTAINS:
				case MariaDBParser.CONTEXT:
				case MariaDBParser.CONTRIBUTORS:
				case MariaDBParser.COPY:
				case MariaDBParser.CPU:
				case MariaDBParser.CYCLE:
				case MariaDBParser.CURSOR_NAME:
				case MariaDBParser.DATA:
				case MariaDBParser.DATAFILE:
				case MariaDBParser.DEALLOCATE:
				case MariaDBParser.DEFAULT_AUTH:
				case MariaDBParser.DEFINER:
				case MariaDBParser.DELAY_KEY_WRITE:
				case MariaDBParser.DES_KEY_FILE:
				case MariaDBParser.DIRECTORY:
				case MariaDBParser.DISABLE:
				case MariaDBParser.DISCARD:
				case MariaDBParser.DISK:
				case MariaDBParser.DO:
				case MariaDBParser.DUMPFILE:
				case MariaDBParser.DUPLICATE:
				case MariaDBParser.DYNAMIC:
				case MariaDBParser.ENABLE:
				case MariaDBParser.ENCRYPTED:
				case MariaDBParser.ENCRYPTION:
				case MariaDBParser.ENCRYPTION_KEY_ID:
				case MariaDBParser.END:
				case MariaDBParser.ENDS:
				case MariaDBParser.ENGINE:
				case MariaDBParser.ENGINES:
				case MariaDBParser.ERROR:
				case MariaDBParser.ERRORS:
				case MariaDBParser.ESCAPE:
				case MariaDBParser.EVEN:
				case MariaDBParser.EVENT:
				case MariaDBParser.EVENTS:
				case MariaDBParser.EVERY:
				case MariaDBParser.EXCHANGE:
				case MariaDBParser.EXCLUSIVE:
				case MariaDBParser.EXPIRE:
				case MariaDBParser.EXPORT:
				case MariaDBParser.EXTENDED:
				case MariaDBParser.EXTENT_SIZE:
				case MariaDBParser.FAILED_LOGIN_ATTEMPTS:
				case MariaDBParser.FAST:
				case MariaDBParser.FAULTS:
				case MariaDBParser.FIELDS:
				case MariaDBParser.FILE_BLOCK_SIZE:
				case MariaDBParser.FILTER:
				case MariaDBParser.FIRST:
				case MariaDBParser.FIXED:
				case MariaDBParser.FLUSH:
				case MariaDBParser.FOLLOWS:
				case MariaDBParser.FOUND:
				case MariaDBParser.FULL:
				case MariaDBParser.FUNCTION:
				case MariaDBParser.GENERAL:
				case MariaDBParser.GLOBAL:
				case MariaDBParser.GRANTS:
				case MariaDBParser.GROUP_REPLICATION:
				case MariaDBParser.HANDLER:
				case MariaDBParser.HASH:
				case MariaDBParser.HELP:
				case MariaDBParser.HISTORY:
				case MariaDBParser.HOST:
				case MariaDBParser.HOSTS:
				case MariaDBParser.IDENTIFIED:
				case MariaDBParser.IGNORE_SERVER_IDS:
				case MariaDBParser.IMPORT:
				case MariaDBParser.INCREMENT:
				case MariaDBParser.INDEXES:
				case MariaDBParser.INITIAL_SIZE:
				case MariaDBParser.INPLACE:
				case MariaDBParser.INSERT_METHOD:
				case MariaDBParser.INSTALL:
				case MariaDBParser.INSTANCE:
				case MariaDBParser.INSTANT:
				case MariaDBParser.INVISIBLE:
				case MariaDBParser.INVOKER:
				case MariaDBParser.IO:
				case MariaDBParser.IO_THREAD:
				case MariaDBParser.IPC:
				case MariaDBParser.ISOLATION:
				case MariaDBParser.ISSUER:
				case MariaDBParser.JSON:
				case MariaDBParser.KEY_BLOCK_SIZE:
				case MariaDBParser.LANGUAGE:
				case MariaDBParser.LAST:
				case MariaDBParser.LEAVES:
				case MariaDBParser.LESS:
				case MariaDBParser.LEVEL:
				case MariaDBParser.LIST:
				case MariaDBParser.LOCAL:
				case MariaDBParser.LOCALES:
				case MariaDBParser.LOGFILE:
				case MariaDBParser.LOGS:
				case MariaDBParser.MASTER:
				case MariaDBParser.MASTER_AUTO_POSITION:
				case MariaDBParser.MASTER_CONNECT_RETRY:
				case MariaDBParser.MASTER_DELAY:
				case MariaDBParser.MASTER_HEARTBEAT_PERIOD:
				case MariaDBParser.MASTER_HOST:
				case MariaDBParser.MASTER_LOG_FILE:
				case MariaDBParser.MASTER_LOG_POS:
				case MariaDBParser.MASTER_PASSWORD:
				case MariaDBParser.MASTER_PORT:
				case MariaDBParser.MASTER_RETRY_COUNT:
				case MariaDBParser.MASTER_SSL:
				case MariaDBParser.MASTER_SSL_CA:
				case MariaDBParser.MASTER_SSL_CAPATH:
				case MariaDBParser.MASTER_SSL_CERT:
				case MariaDBParser.MASTER_SSL_CIPHER:
				case MariaDBParser.MASTER_SSL_CRL:
				case MariaDBParser.MASTER_SSL_CRLPATH:
				case MariaDBParser.MASTER_SSL_KEY:
				case MariaDBParser.MASTER_TLS_VERSION:
				case MariaDBParser.MASTER_USER:
				case MariaDBParser.MAX_CONNECTIONS_PER_HOUR:
				case MariaDBParser.MAX_QUERIES_PER_HOUR:
				case MariaDBParser.MAX_ROWS:
				case MariaDBParser.MAX_SIZE:
				case MariaDBParser.MAX_UPDATES_PER_HOUR:
				case MariaDBParser.MAX_USER_CONNECTIONS:
				case MariaDBParser.MEDIUM:
				case MariaDBParser.MEMBER:
				case MariaDBParser.MERGE:
				case MariaDBParser.MESSAGE_TEXT:
				case MariaDBParser.MID:
				case MariaDBParser.MIGRATE:
				case MariaDBParser.MIN_ROWS:
				case MariaDBParser.MODE:
				case MariaDBParser.MODIFY:
				case MariaDBParser.MUTEX:
				case MariaDBParser.MYSQL:
				case MariaDBParser.MYSQL_ERRNO:
				case MariaDBParser.NAME:
				case MariaDBParser.NAMES:
				case MariaDBParser.NCHAR:
				case MariaDBParser.NEVER:
				case MariaDBParser.NEXT:
				case MariaDBParser.NO:
				case MariaDBParser.NOCACHE:
				case MariaDBParser.NOCOPY:
				case MariaDBParser.NOCYCLE:
				case MariaDBParser.NOMAXVALUE:
				case MariaDBParser.NOMINVALUE:
				case MariaDBParser.NOWAIT:
				case MariaDBParser.NODEGROUP:
				case MariaDBParser.NONE:
				case MariaDBParser.ODBC:
				case MariaDBParser.OFFLINE:
				case MariaDBParser.OFFSET:
				case MariaDBParser.OF:
				case MariaDBParser.OJ:
				case MariaDBParser.OLD_PASSWORD:
				case MariaDBParser.ONE:
				case MariaDBParser.ONLINE:
				case MariaDBParser.ONLY:
				case MariaDBParser.OPEN:
				case MariaDBParser.OPTIMIZER_COSTS:
				case MariaDBParser.OPTIONS:
				case MariaDBParser.OWNER:
				case MariaDBParser.PACK_KEYS:
				case MariaDBParser.PAGE:
				case MariaDBParser.PARSER:
				case MariaDBParser.PARTIAL:
				case MariaDBParser.PARTITIONING:
				case MariaDBParser.PARTITIONS:
				case MariaDBParser.PASSWORD:
				case MariaDBParser.PASSWORD_LOCK_TIME:
				case MariaDBParser.PHASE:
				case MariaDBParser.PLUGIN:
				case MariaDBParser.PLUGIN_DIR:
				case MariaDBParser.PLUGINS:
				case MariaDBParser.PORT:
				case MariaDBParser.PRECEDES:
				case MariaDBParser.PREPARE:
				case MariaDBParser.PRESERVE:
				case MariaDBParser.PREV:
				case MariaDBParser.PROCESSLIST:
				case MariaDBParser.PROFILE:
				case MariaDBParser.PROFILES:
				case MariaDBParser.PROXY:
				case MariaDBParser.QUERY:
				case MariaDBParser.QUERY_RESPONSE_TIME:
				case MariaDBParser.QUICK:
				case MariaDBParser.REBUILD:
				case MariaDBParser.RECOVER:
				case MariaDBParser.RECURSIVE:
				case MariaDBParser.REDO_BUFFER_SIZE:
				case MariaDBParser.REDUNDANT:
				case MariaDBParser.RELAY:
				case MariaDBParser.RELAY_LOG_FILE:
				case MariaDBParser.RELAY_LOG_POS:
				case MariaDBParser.RELAYLOG:
				case MariaDBParser.REMOVE:
				case MariaDBParser.REORGANIZE:
				case MariaDBParser.REPAIR:
				case MariaDBParser.REPLICATE_DO_DB:
				case MariaDBParser.REPLICATE_DO_TABLE:
				case MariaDBParser.REPLICATE_IGNORE_DB:
				case MariaDBParser.REPLICATE_IGNORE_TABLE:
				case MariaDBParser.REPLICATE_REWRITE_DB:
				case MariaDBParser.REPLICATE_WILD_DO_TABLE:
				case MariaDBParser.REPLICATE_WILD_IGNORE_TABLE:
				case MariaDBParser.REPLICATION:
				case MariaDBParser.RESET:
				case MariaDBParser.RESTART:
				case MariaDBParser.RESUME:
				case MariaDBParser.RETURNED_SQLSTATE:
				case MariaDBParser.RETURNS:
				case MariaDBParser.REUSE:
				case MariaDBParser.ROLE:
				case MariaDBParser.ROLLBACK:
				case MariaDBParser.ROLLUP:
				case MariaDBParser.ROTATE:
				case MariaDBParser.ROW:
				case MariaDBParser.ROWS:
				case MariaDBParser.ROW_FORMAT:
				case MariaDBParser.RTREE:
				case MariaDBParser.SAVEPOINT:
				case MariaDBParser.SCHEDULE:
				case MariaDBParser.SECURITY:
				case MariaDBParser.SEQUENCE:
				case MariaDBParser.SERVER:
				case MariaDBParser.SESSION:
				case MariaDBParser.SHARE:
				case MariaDBParser.SHARED:
				case MariaDBParser.SIGNED:
				case MariaDBParser.SIMPLE:
				case MariaDBParser.SLAVE:
				case MariaDBParser.SLAVES:
				case MariaDBParser.SLOW:
				case MariaDBParser.SNAPSHOT:
				case MariaDBParser.SOCKET:
				case MariaDBParser.SOME:
				case MariaDBParser.SONAME:
				case MariaDBParser.SOUNDS:
				case MariaDBParser.SOURCE:
				case MariaDBParser.SQL_AFTER_GTIDS:
				case MariaDBParser.SQL_AFTER_MTS_GAPS:
				case MariaDBParser.SQL_BEFORE_GTIDS:
				case MariaDBParser.SQL_BUFFER_RESULT:
				case MariaDBParser.SQL_CACHE:
				case MariaDBParser.SQL_NO_CACHE:
				case MariaDBParser.SQL_THREAD:
				case MariaDBParser.START:
				case MariaDBParser.STARTS:
				case MariaDBParser.STATS_AUTO_RECALC:
				case MariaDBParser.STATS_PERSISTENT:
				case MariaDBParser.STATS_SAMPLE_PAGES:
				case MariaDBParser.STATUS:
				case MariaDBParser.STOP:
				case MariaDBParser.STORAGE:
				case MariaDBParser.STRING:
				case MariaDBParser.SUBCLASS_ORIGIN:
				case MariaDBParser.SUBJECT:
				case MariaDBParser.SUBPARTITION:
				case MariaDBParser.SUBPARTITIONS:
				case MariaDBParser.SUSPEND:
				case MariaDBParser.SWAPS:
				case MariaDBParser.SWITCHES:
				case MariaDBParser.TABLE_NAME:
				case MariaDBParser.TABLESPACE:
				case MariaDBParser.TABLE_TYPE:
				case MariaDBParser.TEMPORARY:
				case MariaDBParser.TEMPTABLE:
				case MariaDBParser.THAN:
				case MariaDBParser.TRADITIONAL:
				case MariaDBParser.TRANSACTION:
				case MariaDBParser.TRANSACTIONAL:
				case MariaDBParser.TRIGGERS:
				case MariaDBParser.TRUNCATE:
				case MariaDBParser.TYPES:
				case MariaDBParser.UNBOUNDED:
				case MariaDBParser.UNDEFINED:
				case MariaDBParser.UNDOFILE:
				case MariaDBParser.UNDO_BUFFER_SIZE:
				case MariaDBParser.UNINSTALL:
				case MariaDBParser.UNKNOWN:
				case MariaDBParser.UNTIL:
				case MariaDBParser.UPGRADE:
				case MariaDBParser.USER:
				case MariaDBParser.USE_FRM:
				case MariaDBParser.USER_RESOURCES:
				case MariaDBParser.VALIDATION:
				case MariaDBParser.VALUE:
				case MariaDBParser.VARIABLES:
				case MariaDBParser.VIEW:
				case MariaDBParser.VIRTUAL:
				case MariaDBParser.VISIBLE:
				case MariaDBParser.WAIT:
				case MariaDBParser.WARNINGS:
				case MariaDBParser.WITHOUT:
				case MariaDBParser.WORK:
				case MariaDBParser.WRAPPER:
				case MariaDBParser.WSREP_MEMBERSHIP:
				case MariaDBParser.WSREP_STATUS:
				case MariaDBParser.X509:
				case MariaDBParser.XA:
				case MariaDBParser.XML:
				case MariaDBParser.EUR:
				case MariaDBParser.USA:
				case MariaDBParser.JIS:
				case MariaDBParser.ISO:
				case MariaDBParser.INTERNAL:
				case MariaDBParser.QUARTER:
				case MariaDBParser.MONTH:
				case MariaDBParser.DAY:
				case MariaDBParser.HOUR:
				case MariaDBParser.MINUTE:
				case MariaDBParser.WEEK:
				case MariaDBParser.SECOND:
				case MariaDBParser.MICROSECOND:
				case MariaDBParser.USER_STATISTICS:
				case MariaDBParser.CLIENT_STATISTICS:
				case MariaDBParser.INDEX_STATISTICS:
				case MariaDBParser.TABLE_STATISTICS:
				case MariaDBParser.ADMIN:
				case MariaDBParser.AUDIT_ADMIN:
				case MariaDBParser.BACKUP_ADMIN:
				case MariaDBParser.BINLOG_ADMIN:
				case MariaDBParser.BINLOG_ENCRYPTION_ADMIN:
				case MariaDBParser.CLONE_ADMIN:
				case MariaDBParser.CONNECTION_ADMIN:
				case MariaDBParser.ENCRYPTION_KEY_ADMIN:
				case MariaDBParser.EXECUTE:
				case MariaDBParser.FILE:
				case MariaDBParser.FIREWALL_ADMIN:
				case MariaDBParser.FIREWALL_USER:
				case MariaDBParser.GROUP_REPLICATION_ADMIN:
				case MariaDBParser.INNODB_REDO_LOG_ARCHIVE:
				case MariaDBParser.INVOKE:
				case MariaDBParser.LAMBDA:
				case MariaDBParser.NDB_STORED_USER:
				case MariaDBParser.PASSWORDLESS_USER_ADMIN:
				case MariaDBParser.PERSIST_RO_VARIABLES_ADMIN:
				case MariaDBParser.PRIVILEGES:
				case MariaDBParser.PROCESS:
				case MariaDBParser.RELOAD:
				case MariaDBParser.REPLICATION_APPLIER:
				case MariaDBParser.REPLICATION_SLAVE_ADMIN:
				case MariaDBParser.RESOURCE_GROUP_ADMIN:
				case MariaDBParser.RESOURCE_GROUP_USER:
				case MariaDBParser.ROLE_ADMIN:
				case MariaDBParser.ROUTINE:
				case MariaDBParser.S3:
				case MariaDBParser.SESSION_VARIABLES_ADMIN:
				case MariaDBParser.SET_USER_ID:
				case MariaDBParser.SHOW_ROUTINE:
				case MariaDBParser.SHUTDOWN:
				case MariaDBParser.SUPER:
				case MariaDBParser.SYSTEM_VARIABLES_ADMIN:
				case MariaDBParser.TABLES:
				case MariaDBParser.TABLE_ENCRYPTION_ADMIN:
				case MariaDBParser.VERSION_TOKEN_ADMIN:
				case MariaDBParser.XA_RECOVER_ADMIN:
				case MariaDBParser.ARMSCII8:
				case MariaDBParser.ASCII:
				case MariaDBParser.BIG5:
				case MariaDBParser.CP1250:
				case MariaDBParser.CP1251:
				case MariaDBParser.CP1256:
				case MariaDBParser.CP1257:
				case MariaDBParser.CP850:
				case MariaDBParser.CP852:
				case MariaDBParser.CP866:
				case MariaDBParser.CP932:
				case MariaDBParser.DEC8:
				case MariaDBParser.EUCJPMS:
				case MariaDBParser.EUCKR:
				case MariaDBParser.GB18030:
				case MariaDBParser.GB2312:
				case MariaDBParser.GBK:
				case MariaDBParser.GEOSTD8:
				case MariaDBParser.GREEK:
				case MariaDBParser.HEBREW:
				case MariaDBParser.HP8:
				case MariaDBParser.KEYBCS2:
				case MariaDBParser.KOI8R:
				case MariaDBParser.KOI8U:
				case MariaDBParser.LATIN1:
				case MariaDBParser.LATIN2:
				case MariaDBParser.LATIN5:
				case MariaDBParser.LATIN7:
				case MariaDBParser.MACCE:
				case MariaDBParser.MACROMAN:
				case MariaDBParser.SJIS:
				case MariaDBParser.SWE7:
				case MariaDBParser.TIS620:
				case MariaDBParser.UCS2:
				case MariaDBParser.UJIS:
				case MariaDBParser.UTF16:
				case MariaDBParser.UTF16LE:
				case MariaDBParser.UTF32:
				case MariaDBParser.UTF8:
				case MariaDBParser.UTF8MB3:
				case MariaDBParser.UTF8MB4:
				case MariaDBParser.ARCHIVE:
				case MariaDBParser.BLACKHOLE:
				case MariaDBParser.CSV:
				case MariaDBParser.FEDERATED:
				case MariaDBParser.INNODB:
				case MariaDBParser.MEMORY:
				case MariaDBParser.MRG_MYISAM:
				case MariaDBParser.MYISAM:
				case MariaDBParser.NDB:
				case MariaDBParser.NDBCLUSTER:
				case MariaDBParser.PERFORMANCE_SCHEMA:
				case MariaDBParser.TOKUDB:
				case MariaDBParser.REPEATABLE:
				case MariaDBParser.COMMITTED:
				case MariaDBParser.UNCOMMITTED:
				case MariaDBParser.SERIALIZABLE:
				case MariaDBParser.GEOMETRYCOLLECTION:
				case MariaDBParser.LINESTRING:
				case MariaDBParser.MULTILINESTRING:
				case MariaDBParser.MULTIPOINT:
				case MariaDBParser.MULTIPOLYGON:
				case MariaDBParser.POINT:
				case MariaDBParser.POLYGON:
				case MariaDBParser.ABS:
				case MariaDBParser.ACOS:
				case MariaDBParser.ADDDATE:
				case MariaDBParser.ADDTIME:
				case MariaDBParser.AES_DECRYPT:
				case MariaDBParser.AES_ENCRYPT:
				case MariaDBParser.AREA:
				case MariaDBParser.ASBINARY:
				case MariaDBParser.ASIN:
				case MariaDBParser.ASTEXT:
				case MariaDBParser.ASWKB:
				case MariaDBParser.ASWKT:
				case MariaDBParser.ASYMMETRIC_DECRYPT:
				case MariaDBParser.ASYMMETRIC_DERIVE:
				case MariaDBParser.ASYMMETRIC_ENCRYPT:
				case MariaDBParser.ASYMMETRIC_SIGN:
				case MariaDBParser.ASYMMETRIC_VERIFY:
				case MariaDBParser.ATAN:
				case MariaDBParser.ATAN2:
				case MariaDBParser.BENCHMARK:
				case MariaDBParser.BIN:
				case MariaDBParser.BIT_COUNT:
				case MariaDBParser.BIT_LENGTH:
				case MariaDBParser.BUFFER:
				case MariaDBParser.CATALOG_NAME:
				case MariaDBParser.CEIL:
				case MariaDBParser.CEILING:
				case MariaDBParser.CENTROID:
				case MariaDBParser.CHARACTER_LENGTH:
				case MariaDBParser.CHARSET:
				case MariaDBParser.CHAR_LENGTH:
				case MariaDBParser.COERCIBILITY:
				case MariaDBParser.COLLATION:
				case MariaDBParser.COMPRESS:
				case MariaDBParser.CONCAT:
				case MariaDBParser.CONCAT_WS:
				case MariaDBParser.CONNECTION_ID:
				case MariaDBParser.CONV:
				case MariaDBParser.CONVERT_TZ:
				case MariaDBParser.COS:
				case MariaDBParser.COT:
				case MariaDBParser.CRC32:
				case MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY:
				case MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY:
				case MariaDBParser.CREATE_DH_PARAMETERS:
				case MariaDBParser.CREATE_DIGEST:
				case MariaDBParser.CROSSES:
				case MariaDBParser.DATEDIFF:
				case MariaDBParser.DATE_FORMAT:
				case MariaDBParser.DAYNAME:
				case MariaDBParser.DAYOFMONTH:
				case MariaDBParser.DAYOFWEEK:
				case MariaDBParser.DAYOFYEAR:
				case MariaDBParser.DECODE:
				case MariaDBParser.DEGREES:
				case MariaDBParser.DES_DECRYPT:
				case MariaDBParser.DES_ENCRYPT:
				case MariaDBParser.DIMENSION:
				case MariaDBParser.DISJOINT:
				case MariaDBParser.ELT:
				case MariaDBParser.ENCODE:
				case MariaDBParser.ENCRYPT:
				case MariaDBParser.ENDPOINT:
				case MariaDBParser.ENGINE_ATTRIBUTE:
				case MariaDBParser.ENVELOPE:
				case MariaDBParser.EQUALS:
				case MariaDBParser.EXP:
				case MariaDBParser.EXPORT_SET:
				case MariaDBParser.EXTERIORRING:
				case MariaDBParser.EXTRACTVALUE:
				case MariaDBParser.FIELD:
				case MariaDBParser.FIND_IN_SET:
				case MariaDBParser.FLOOR:
				case MariaDBParser.FORMAT:
				case MariaDBParser.FOUND_ROWS:
				case MariaDBParser.FROM_BASE64:
				case MariaDBParser.FROM_DAYS:
				case MariaDBParser.FROM_UNIXTIME:
				case MariaDBParser.GEOMCOLLFROMTEXT:
				case MariaDBParser.GEOMCOLLFROMWKB:
				case MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT:
				case MariaDBParser.GEOMETRYCOLLECTIONFROMWKB:
				case MariaDBParser.GEOMETRYFROMTEXT:
				case MariaDBParser.GEOMETRYFROMWKB:
				case MariaDBParser.GEOMETRYN:
				case MariaDBParser.GEOMETRYTYPE:
				case MariaDBParser.GEOMFROMTEXT:
				case MariaDBParser.GEOMFROMWKB:
				case MariaDBParser.GET_FORMAT:
				case MariaDBParser.GET_LOCK:
				case MariaDBParser.GLENGTH:
				case MariaDBParser.GREATEST:
				case MariaDBParser.GTID_SUBSET:
				case MariaDBParser.GTID_SUBTRACT:
				case MariaDBParser.HEX:
				case MariaDBParser.IFNULL:
				case MariaDBParser.INET6_ATON:
				case MariaDBParser.INET6_NTOA:
				case MariaDBParser.INET_ATON:
				case MariaDBParser.INET_NTOA:
				case MariaDBParser.INSTR:
				case MariaDBParser.INTERIORRINGN:
				case MariaDBParser.INTERSECTS:
				case MariaDBParser.ISCLOSED:
				case MariaDBParser.ISEMPTY:
				case MariaDBParser.ISNULL:
				case MariaDBParser.ISSIMPLE:
				case MariaDBParser.IS_FREE_LOCK:
				case MariaDBParser.IS_IPV4:
				case MariaDBParser.IS_IPV4_COMPAT:
				case MariaDBParser.IS_IPV4_MAPPED:
				case MariaDBParser.IS_IPV6:
				case MariaDBParser.IS_USED_LOCK:
				case MariaDBParser.LAST_INSERT_ID:
				case MariaDBParser.LCASE:
				case MariaDBParser.LEAST:
				case MariaDBParser.LENGTH:
				case MariaDBParser.LINEFROMTEXT:
				case MariaDBParser.LINEFROMWKB:
				case MariaDBParser.LINESTRINGFROMTEXT:
				case MariaDBParser.LINESTRINGFROMWKB:
				case MariaDBParser.LN:
				case MariaDBParser.LOAD_FILE:
				case MariaDBParser.LOCATE:
				case MariaDBParser.LOG:
				case MariaDBParser.LOG10:
				case MariaDBParser.LOG2:
				case MariaDBParser.LOWER:
				case MariaDBParser.LPAD:
				case MariaDBParser.LTRIM:
				case MariaDBParser.MAKEDATE:
				case MariaDBParser.MAKETIME:
				case MariaDBParser.MAKE_SET:
				case MariaDBParser.MASTER_POS_WAIT:
				case MariaDBParser.MBRCONTAINS:
				case MariaDBParser.MBRDISJOINT:
				case MariaDBParser.MBREQUAL:
				case MariaDBParser.MBRINTERSECTS:
				case MariaDBParser.MBROVERLAPS:
				case MariaDBParser.MBRTOUCHES:
				case MariaDBParser.MBRWITHIN:
				case MariaDBParser.MD5:
				case MariaDBParser.MLINEFROMTEXT:
				case MariaDBParser.MLINEFROMWKB:
				case MariaDBParser.MONTHNAME:
				case MariaDBParser.MPOINTFROMTEXT:
				case MariaDBParser.MPOINTFROMWKB:
				case MariaDBParser.MPOLYFROMTEXT:
				case MariaDBParser.MPOLYFROMWKB:
				case MariaDBParser.MULTILINESTRINGFROMTEXT:
				case MariaDBParser.MULTILINESTRINGFROMWKB:
				case MariaDBParser.MULTIPOINTFROMTEXT:
				case MariaDBParser.MULTIPOINTFROMWKB:
				case MariaDBParser.MULTIPOLYGONFROMTEXT:
				case MariaDBParser.MULTIPOLYGONFROMWKB:
				case MariaDBParser.NAME_CONST:
				case MariaDBParser.NULLIF:
				case MariaDBParser.NUMGEOMETRIES:
				case MariaDBParser.NUMINTERIORRINGS:
				case MariaDBParser.NUMPOINTS:
				case MariaDBParser.OCT:
				case MariaDBParser.OCTET_LENGTH:
				case MariaDBParser.ORD:
				case MariaDBParser.OVERLAPS:
				case MariaDBParser.PERIOD_ADD:
				case MariaDBParser.PERIOD_DIFF:
				case MariaDBParser.PI:
				case MariaDBParser.POINTFROMTEXT:
				case MariaDBParser.POINTFROMWKB:
				case MariaDBParser.POINTN:
				case MariaDBParser.POLYFROMTEXT:
				case MariaDBParser.POLYFROMWKB:
				case MariaDBParser.POLYGONFROMTEXT:
				case MariaDBParser.POLYGONFROMWKB:
				case MariaDBParser.POW:
				case MariaDBParser.POWER:
				case MariaDBParser.QUOTE:
				case MariaDBParser.RADIANS:
				case MariaDBParser.RAND:
				case MariaDBParser.RANDOM_BYTES:
				case MariaDBParser.RELEASE_LOCK:
				case MariaDBParser.REVERSE:
				case MariaDBParser.ROUND:
				case MariaDBParser.ROW_COUNT:
				case MariaDBParser.RPAD:
				case MariaDBParser.RTRIM:
				case MariaDBParser.SEC_TO_TIME:
				case MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE:
				case MariaDBParser.SESSION_USER:
				case MariaDBParser.SHA:
				case MariaDBParser.SHA1:
				case MariaDBParser.SHA2:
				case MariaDBParser.SCHEMA_NAME:
				case MariaDBParser.SIGN:
				case MariaDBParser.SIN:
				case MariaDBParser.SLEEP:
				case MariaDBParser.SOUNDEX:
				case MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS:
				case MariaDBParser.SQRT:
				case MariaDBParser.SRID:
				case MariaDBParser.STARTPOINT:
				case MariaDBParser.STRCMP:
				case MariaDBParser.STR_TO_DATE:
				case MariaDBParser.ST_AREA:
				case MariaDBParser.ST_ASBINARY:
				case MariaDBParser.ST_ASTEXT:
				case MariaDBParser.ST_ASWKB:
				case MariaDBParser.ST_ASWKT:
				case MariaDBParser.ST_BUFFER:
				case MariaDBParser.ST_CENTROID:
				case MariaDBParser.ST_CONTAINS:
				case MariaDBParser.ST_CROSSES:
				case MariaDBParser.ST_DIFFERENCE:
				case MariaDBParser.ST_DIMENSION:
				case MariaDBParser.ST_DISJOINT:
				case MariaDBParser.ST_DISTANCE:
				case MariaDBParser.ST_ENDPOINT:
				case MariaDBParser.ST_ENVELOPE:
				case MariaDBParser.ST_EQUALS:
				case MariaDBParser.ST_EXTERIORRING:
				case MariaDBParser.ST_GEOMCOLLFROMTEXT:
				case MariaDBParser.ST_GEOMCOLLFROMTXT:
				case MariaDBParser.ST_GEOMCOLLFROMWKB:
				case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
				case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB:
				case MariaDBParser.ST_GEOMETRYFROMTEXT:
				case MariaDBParser.ST_GEOMETRYFROMWKB:
				case MariaDBParser.ST_GEOMETRYN:
				case MariaDBParser.ST_GEOMETRYTYPE:
				case MariaDBParser.ST_GEOMFROMTEXT:
				case MariaDBParser.ST_GEOMFROMWKB:
				case MariaDBParser.ST_INTERIORRINGN:
				case MariaDBParser.ST_INTERSECTION:
				case MariaDBParser.ST_INTERSECTS:
				case MariaDBParser.ST_ISCLOSED:
				case MariaDBParser.ST_ISEMPTY:
				case MariaDBParser.ST_ISSIMPLE:
				case MariaDBParser.ST_LINEFROMTEXT:
				case MariaDBParser.ST_LINEFROMWKB:
				case MariaDBParser.ST_LINESTRINGFROMTEXT:
				case MariaDBParser.ST_LINESTRINGFROMWKB:
				case MariaDBParser.ST_NUMGEOMETRIES:
				case MariaDBParser.ST_NUMINTERIORRING:
				case MariaDBParser.ST_NUMINTERIORRINGS:
				case MariaDBParser.ST_NUMPOINTS:
				case MariaDBParser.ST_OVERLAPS:
				case MariaDBParser.ST_POINTFROMTEXT:
				case MariaDBParser.ST_POINTFROMWKB:
				case MariaDBParser.ST_POINTN:
				case MariaDBParser.ST_POLYFROMTEXT:
				case MariaDBParser.ST_POLYFROMWKB:
				case MariaDBParser.ST_POLYGONFROMTEXT:
				case MariaDBParser.ST_POLYGONFROMWKB:
				case MariaDBParser.ST_SRID:
				case MariaDBParser.ST_STARTPOINT:
				case MariaDBParser.ST_SYMDIFFERENCE:
				case MariaDBParser.ST_TOUCHES:
				case MariaDBParser.ST_UNION:
				case MariaDBParser.ST_WITHIN:
				case MariaDBParser.ST_X:
				case MariaDBParser.ST_Y:
				case MariaDBParser.SUBDATE:
				case MariaDBParser.SUBSTRING_INDEX:
				case MariaDBParser.SUBTIME:
				case MariaDBParser.SYSTEM_USER:
				case MariaDBParser.TAN:
				case MariaDBParser.TIMEDIFF:
				case MariaDBParser.TIMESTAMPADD:
				case MariaDBParser.TIMESTAMPDIFF:
				case MariaDBParser.TIME_FORMAT:
				case MariaDBParser.TIME_TO_SEC:
				case MariaDBParser.TOUCHES:
				case MariaDBParser.TO_BASE64:
				case MariaDBParser.TO_DAYS:
				case MariaDBParser.TO_SECONDS:
				case MariaDBParser.UCASE:
				case MariaDBParser.UNCOMPRESS:
				case MariaDBParser.UNCOMPRESSED_LENGTH:
				case MariaDBParser.UNHEX:
				case MariaDBParser.UNIX_TIMESTAMP:
				case MariaDBParser.UPDATEXML:
				case MariaDBParser.UPPER:
				case MariaDBParser.UUID:
				case MariaDBParser.UUID_SHORT:
				case MariaDBParser.VALIDATE_PASSWORD_STRENGTH:
				case MariaDBParser.VERSION:
				case MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case MariaDBParser.WEEKDAY:
				case MariaDBParser.WEEKOFYEAR:
				case MariaDBParser.WEIGHT_STRING:
				case MariaDBParser.WITHIN:
				case MariaDBParser.YEARWEEK:
				case MariaDBParser.Y_FUNCTION:
				case MariaDBParser.X_FUNCTION:
				case MariaDBParser.VIA:
				case MariaDBParser.LASTVAL:
				case MariaDBParser.NEXTVAL:
				case MariaDBParser.SETVAL:
				case MariaDBParser.PREVIOUS:
				case MariaDBParser.PERSISTENT:
				case MariaDBParser.BINLOG_MONITOR:
				case MariaDBParser.BINLOG_REPLAY:
				case MariaDBParser.FEDERATED_ADMIN:
				case MariaDBParser.READ_ONLY_ADMIN:
				case MariaDBParser.REPLICA:
				case MariaDBParser.REPLICAS:
				case MariaDBParser.REPLICATION_MASTER_ADMIN:
				case MariaDBParser.MONITOR:
				case MariaDBParser.READ_ONLY:
				case MariaDBParser.REPLAY:
				case MariaDBParser.MOD:
				case MariaDBParser.CHARSET_REVERSE_QOUTE_STRING:
				case MariaDBParser.STRING_LITERAL:
				case MariaDBParser.ID:
					{
					this.state = 3065;
					this.uidList();
					}
					break;
				case MariaDBParser.ALL:
					{
					this.state = 3066;
					this.match(MariaDBParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case MariaDBParser.REMOVE:
				_localctx = new AlterByRemovePartitioningContext(_localctx);
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 3069;
				this.match(MariaDBParser.REMOVE);
				this.state = 3070;
				this.match(MariaDBParser.PARTITIONING);
				}
				break;
			case MariaDBParser.UPGRADE:
				_localctx = new AlterByUpgradePartitioningContext(_localctx);
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 3071;
				this.match(MariaDBParser.UPGRADE);
				this.state = 3072;
				this.match(MariaDBParser.PARTITIONING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropDatabase(): DropDatabaseContext {
		let _localctx: DropDatabaseContext = new DropDatabaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 160, MariaDBParser.RULE_dropDatabase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3075;
			this.match(MariaDBParser.DROP);
			this.state = 3076;
			_localctx._dbFormat = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MariaDBParser.DATABASE || _la === MariaDBParser.SCHEMA)) {
				_localctx._dbFormat = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3078;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 404, this._ctx) ) {
			case 1:
				{
				this.state = 3077;
				this.ifExists();
				}
				break;
			}
			this.state = 3080;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropEvent(): DropEventContext {
		let _localctx: DropEventContext = new DropEventContext(this._ctx, this.state);
		this.enterRule(_localctx, 162, MariaDBParser.RULE_dropEvent);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3082;
			this.match(MariaDBParser.DROP);
			this.state = 3083;
			this.match(MariaDBParser.EVENT);
			this.state = 3085;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 405, this._ctx) ) {
			case 1:
				{
				this.state = 3084;
				this.ifExists();
				}
				break;
			}
			this.state = 3087;
			this.fullId();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropIndex(): DropIndexContext {
		let _localctx: DropIndexContext = new DropIndexContext(this._ctx, this.state);
		this.enterRule(_localctx, 164, MariaDBParser.RULE_dropIndex);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3089;
			this.match(MariaDBParser.DROP);
			this.state = 3090;
			this.match(MariaDBParser.INDEX);
			this.state = 3092;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 406, this._ctx) ) {
			case 1:
				{
				this.state = 3091;
				this.ifExists();
				}
				break;
			}
			this.state = 3095;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 407, this._ctx) ) {
			case 1:
				{
				this.state = 3094;
				_localctx._intimeAction = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.OFFLINE || _la === MariaDBParser.ONLINE)) {
					_localctx._intimeAction = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			this.state = 3097;
			this.uid();
			this.state = 3098;
			this.match(MariaDBParser.ON);
			this.state = 3099;
			this.tableName();
			this.state = 3112;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 411, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					this.state = 3110;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case MariaDBParser.ALGORITHM:
						{
						this.state = 3100;
						this.match(MariaDBParser.ALGORITHM);
						this.state = 3102;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === MariaDBParser.EQUAL_SYMBOL) {
							{
							this.state = 3101;
							this.match(MariaDBParser.EQUAL_SYMBOL);
							}
						}

						this.state = 3104;
						_localctx._algType = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === MariaDBParser.DEFAULT || _la === MariaDBParser.COPY || _la === MariaDBParser.INPLACE)) {
							_localctx._algType = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;
					case MariaDBParser.LOCK:
						{
						this.state = 3105;
						this.match(MariaDBParser.LOCK);
						this.state = 3107;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === MariaDBParser.EQUAL_SYMBOL) {
							{
							this.state = 3106;
							this.match(MariaDBParser.EQUAL_SYMBOL);
							}
						}

						this.state = 3109;
						_localctx._lockType = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === MariaDBParser.DEFAULT || _la === MariaDBParser.EXCLUSIVE || _la === MariaDBParser.NONE || _la === MariaDBParser.SHARED)) {
							_localctx._lockType = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}
				this.state = 3114;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 411, this._ctx);
			}
			this.state = 3116;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.NOWAIT || _la === MariaDBParser.WAIT) {
				{
				this.state = 3115;
				this.waitNowaitClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropLogfileGroup(): DropLogfileGroupContext {
		let _localctx: DropLogfileGroupContext = new DropLogfileGroupContext(this._ctx, this.state);
		this.enterRule(_localctx, 166, MariaDBParser.RULE_dropLogfileGroup);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3118;
			this.match(MariaDBParser.DROP);
			this.state = 3119;
			this.match(MariaDBParser.LOGFILE);
			this.state = 3120;
			this.match(MariaDBParser.GROUP);
			this.state = 3121;
			this.uid();
			this.state = 3122;
			this.match(MariaDBParser.ENGINE);
			this.state = 3123;
			this.match(MariaDBParser.EQUAL_SYMBOL);
			this.state = 3124;
			this.engineName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropProcedure(): DropProcedureContext {
		let _localctx: DropProcedureContext = new DropProcedureContext(this._ctx, this.state);
		this.enterRule(_localctx, 168, MariaDBParser.RULE_dropProcedure);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3126;
			this.match(MariaDBParser.DROP);
			this.state = 3127;
			this.match(MariaDBParser.PROCEDURE);
			this.state = 3129;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 413, this._ctx) ) {
			case 1:
				{
				this.state = 3128;
				this.ifExists();
				}
				break;
			}
			this.state = 3131;
			this.fullId();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropFunction(): DropFunctionContext {
		let _localctx: DropFunctionContext = new DropFunctionContext(this._ctx, this.state);
		this.enterRule(_localctx, 170, MariaDBParser.RULE_dropFunction);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3133;
			this.match(MariaDBParser.DROP);
			this.state = 3134;
			this.match(MariaDBParser.FUNCTION);
			this.state = 3136;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 414, this._ctx) ) {
			case 1:
				{
				this.state = 3135;
				this.ifExists();
				}
				break;
			}
			this.state = 3138;
			this.fullId();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropServer(): DropServerContext {
		let _localctx: DropServerContext = new DropServerContext(this._ctx, this.state);
		this.enterRule(_localctx, 172, MariaDBParser.RULE_dropServer);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3140;
			this.match(MariaDBParser.DROP);
			this.state = 3141;
			this.match(MariaDBParser.SERVER);
			this.state = 3143;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 415, this._ctx) ) {
			case 1:
				{
				this.state = 3142;
				this.ifExists();
				}
				break;
			}
			this.state = 3145;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropTable(): DropTableContext {
		let _localctx: DropTableContext = new DropTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 174, MariaDBParser.RULE_dropTable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3147;
			this.match(MariaDBParser.DROP);
			this.state = 3149;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.TEMPORARY) {
				{
				this.state = 3148;
				this.match(MariaDBParser.TEMPORARY);
				}
			}

			this.state = 3151;
			this.match(MariaDBParser.TABLE);
			this.state = 3153;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 417, this._ctx) ) {
			case 1:
				{
				this.state = 3152;
				this.ifExists();
				}
				break;
			}
			this.state = 3155;
			this.tables();
			this.state = 3157;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.NOWAIT || _la === MariaDBParser.WAIT) {
				{
				this.state = 3156;
				this.waitNowaitClause();
				}
			}

			this.state = 3160;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.CASCADE || _la === MariaDBParser.RESTRICT) {
				{
				this.state = 3159;
				_localctx._dropType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.CASCADE || _la === MariaDBParser.RESTRICT)) {
					_localctx._dropType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropTablespace(): DropTablespaceContext {
		let _localctx: DropTablespaceContext = new DropTablespaceContext(this._ctx, this.state);
		this.enterRule(_localctx, 176, MariaDBParser.RULE_dropTablespace);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3162;
			this.match(MariaDBParser.DROP);
			this.state = 3163;
			this.match(MariaDBParser.TABLESPACE);
			this.state = 3164;
			this.uid();
			this.state = 3170;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.ENGINE) {
				{
				this.state = 3165;
				this.match(MariaDBParser.ENGINE);
				this.state = 3167;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EQUAL_SYMBOL) {
					{
					this.state = 3166;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					}
				}

				this.state = 3169;
				this.engineName();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropTrigger(): DropTriggerContext {
		let _localctx: DropTriggerContext = new DropTriggerContext(this._ctx, this.state);
		this.enterRule(_localctx, 178, MariaDBParser.RULE_dropTrigger);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3172;
			this.match(MariaDBParser.DROP);
			this.state = 3173;
			this.match(MariaDBParser.TRIGGER);
			this.state = 3175;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 422, this._ctx) ) {
			case 1:
				{
				this.state = 3174;
				this.ifExists();
				}
				break;
			}
			this.state = 3177;
			this.fullId();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropView(): DropViewContext {
		let _localctx: DropViewContext = new DropViewContext(this._ctx, this.state);
		this.enterRule(_localctx, 180, MariaDBParser.RULE_dropView);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3179;
			this.match(MariaDBParser.DROP);
			this.state = 3180;
			this.match(MariaDBParser.VIEW);
			this.state = 3182;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 423, this._ctx) ) {
			case 1:
				{
				this.state = 3181;
				this.ifExists();
				}
				break;
			}
			this.state = 3184;
			this.fullId();
			this.state = 3189;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.COMMA) {
				{
				{
				this.state = 3185;
				this.match(MariaDBParser.COMMA);
				this.state = 3186;
				this.fullId();
				}
				}
				this.state = 3191;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3193;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.CASCADE || _la === MariaDBParser.RESTRICT) {
				{
				this.state = 3192;
				_localctx._dropType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.CASCADE || _la === MariaDBParser.RESTRICT)) {
					_localctx._dropType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropRole(): DropRoleContext {
		let _localctx: DropRoleContext = new DropRoleContext(this._ctx, this.state);
		this.enterRule(_localctx, 182, MariaDBParser.RULE_dropRole);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3195;
			this.match(MariaDBParser.DROP);
			this.state = 3196;
			this.match(MariaDBParser.ROLE);
			this.state = 3198;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 426, this._ctx) ) {
			case 1:
				{
				this.state = 3197;
				this.ifExists();
				}
				break;
			}
			this.state = 3200;
			this.roleName();
			this.state = 3205;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.COMMA) {
				{
				{
				this.state = 3201;
				this.match(MariaDBParser.COMMA);
				this.state = 3202;
				this.roleName();
				}
				}
				this.state = 3207;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setRole(): SetRoleContext {
		let _localctx: SetRoleContext = new SetRoleContext(this._ctx, this.state);
		this.enterRule(_localctx, 184, MariaDBParser.RULE_setRole);
		let _la: number;
		try {
			this.state = 3241;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 433, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3208;
				this.match(MariaDBParser.SET);
				this.state = 3209;
				this.match(MariaDBParser.DEFAULT);
				this.state = 3210;
				this.match(MariaDBParser.ROLE);
				this.state = 3221;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 429, this._ctx) ) {
				case 1:
					{
					this.state = 3211;
					this.match(MariaDBParser.NONE);
					}
					break;

				case 2:
					{
					this.state = 3212;
					this.match(MariaDBParser.ALL);
					}
					break;

				case 3:
					{
					this.state = 3213;
					this.roleName();
					this.state = 3218;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === MariaDBParser.COMMA) {
						{
						{
						this.state = 3214;
						this.match(MariaDBParser.COMMA);
						this.state = 3215;
						this.roleName();
						}
						}
						this.state = 3220;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					break;
				}
				this.state = 3223;
				this.match(MariaDBParser.TO);
				this.state = 3226;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 430, this._ctx) ) {
				case 1:
					{
					this.state = 3224;
					this.userName();
					}
					break;

				case 2:
					{
					this.state = 3225;
					this.uid();
					}
					break;
				}
				this.state = 3235;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 3228;
					this.match(MariaDBParser.COMMA);
					this.state = 3231;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 431, this._ctx) ) {
					case 1:
						{
						this.state = 3229;
						this.userName();
						}
						break;

					case 2:
						{
						this.state = 3230;
						this.uid();
						}
						break;
					}
					}
					}
					this.state = 3237;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3238;
				this.match(MariaDBParser.SET);
				this.state = 3239;
				this.match(MariaDBParser.ROLE);
				this.state = 3240;
				this.roleOption();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropSequence(): DropSequenceContext {
		let _localctx: DropSequenceContext = new DropSequenceContext(this._ctx, this.state);
		this.enterRule(_localctx, 186, MariaDBParser.RULE_dropSequence);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3243;
			this.match(MariaDBParser.DROP);
			this.state = 3245;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.TEMPORARY) {
				{
				this.state = 3244;
				this.match(MariaDBParser.TEMPORARY);
				}
			}

			this.state = 3247;
			this.match(MariaDBParser.SEQUENCE);
			this.state = 3249;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 435, this._ctx) ) {
			case 1:
				{
				this.state = 3248;
				this.ifExists();
				}
				break;
			}
			this.state = 3252;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.COMMENT_INPUT) {
				{
				this.state = 3251;
				this.match(MariaDBParser.COMMENT_INPUT);
				}
			}

			this.state = 3254;
			this.fullId();
			this.state = 3259;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.COMMA) {
				{
				{
				this.state = 3255;
				this.match(MariaDBParser.COMMA);
				this.state = 3256;
				this.fullId();
				}
				}
				this.state = 3261;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public renameTable(): RenameTableContext {
		let _localctx: RenameTableContext = new RenameTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 188, MariaDBParser.RULE_renameTable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3262;
			this.match(MariaDBParser.RENAME);
			this.state = 3263;
			this.match(MariaDBParser.TABLE);
			this.state = 3264;
			this.renameTableClause();
			this.state = 3269;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.COMMA) {
				{
				{
				this.state = 3265;
				this.match(MariaDBParser.COMMA);
				this.state = 3266;
				this.renameTableClause();
				}
				}
				this.state = 3271;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public renameTableClause(): RenameTableClauseContext {
		let _localctx: RenameTableClauseContext = new RenameTableClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 190, MariaDBParser.RULE_renameTableClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3272;
			this.tableName();
			this.state = 3274;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.NOWAIT || _la === MariaDBParser.WAIT) {
				{
				this.state = 3273;
				this.waitNowaitClause();
				}
			}

			this.state = 3276;
			this.match(MariaDBParser.TO);
			this.state = 3277;
			this.tableName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public truncateTable(): TruncateTableContext {
		let _localctx: TruncateTableContext = new TruncateTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 192, MariaDBParser.RULE_truncateTable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3279;
			this.match(MariaDBParser.TRUNCATE);
			this.state = 3281;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.TABLE) {
				{
				this.state = 3280;
				this.match(MariaDBParser.TABLE);
				}
			}

			this.state = 3283;
			this.tableName();
			this.state = 3285;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.NOWAIT || _la === MariaDBParser.WAIT) {
				{
				this.state = 3284;
				this.waitNowaitClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public callStatement(): CallStatementContext {
		let _localctx: CallStatementContext = new CallStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 194, MariaDBParser.RULE_callStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3287;
			this.match(MariaDBParser.CALL);
			this.state = 3288;
			this.fullId();
			this.state = 3295;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 443, this._ctx) ) {
			case 1:
				{
				this.state = 3289;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 3292;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 442, this._ctx) ) {
				case 1:
					{
					this.state = 3290;
					this.constants();
					}
					break;

				case 2:
					{
					this.state = 3291;
					this.expressions();
					}
					break;
				}
				this.state = 3294;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public deleteStatement(): DeleteStatementContext {
		let _localctx: DeleteStatementContext = new DeleteStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 196, MariaDBParser.RULE_deleteStatement);
		try {
			this.state = 3299;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 444, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3297;
				this.singleDeleteStatement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3298;
				this.multipleDeleteStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public doStatement(): DoStatementContext {
		let _localctx: DoStatementContext = new DoStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 198, MariaDBParser.RULE_doStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3301;
			this.match(MariaDBParser.DO);
			this.state = 3302;
			this.expressions();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public handlerStatement(): HandlerStatementContext {
		let _localctx: HandlerStatementContext = new HandlerStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 200, MariaDBParser.RULE_handlerStatement);
		try {
			this.state = 3308;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 445, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3304;
				this.handlerOpenStatement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3305;
				this.handlerReadIndexStatement();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3306;
				this.handlerReadStatement();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3307;
				this.handlerCloseStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public insertStatement(): InsertStatementContext {
		let _localctx: InsertStatementContext = new InsertStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 202, MariaDBParser.RULE_insertStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3310;
			this.match(MariaDBParser.INSERT);
			this.state = 3312;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.DELAYED || _la === MariaDBParser.HIGH_PRIORITY || _la === MariaDBParser.LOW_PRIORITY) {
				{
				this.state = 3311;
				_localctx._priority = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.DELAYED || _la === MariaDBParser.HIGH_PRIORITY || _la === MariaDBParser.LOW_PRIORITY)) {
					_localctx._priority = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 3315;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.IGNORE) {
				{
				this.state = 3314;
				this.match(MariaDBParser.IGNORE);
				}
			}

			this.state = 3318;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.INTO) {
				{
				this.state = 3317;
				this.match(MariaDBParser.INTO);
				}
			}

			this.state = 3320;
			this.tableName();
			this.state = 3327;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.PARTITION) {
				{
				this.state = 3321;
				this.match(MariaDBParser.PARTITION);
				this.state = 3322;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 3324;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MariaDBParser.ATTRIBUTE) | (1 << MariaDBParser.BODY) | (1 << MariaDBParser.BUCKETS) | (1 << MariaDBParser.CONDITION))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (MariaDBParser.CURRENT - 36)) | (1 << (MariaDBParser.CURRENT_ROLE - 36)) | (1 << (MariaDBParser.CURRENT_USER - 36)) | (1 << (MariaDBParser.DATABASE - 36)) | (1 << (MariaDBParser.DEFAULT - 36)) | (1 << (MariaDBParser.DIAGNOSTICS - 36)) | (1 << (MariaDBParser.EMPTY - 36)) | (1 << (MariaDBParser.EXCEPT - 36)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (MariaDBParser.GROUP - 73)) | (1 << (MariaDBParser.IF - 73)) | (1 << (MariaDBParser.IGNORED - 73)) | (1 << (MariaDBParser.INSERT - 73)) | (1 << (MariaDBParser.LATERAL - 73)) | (1 << (MariaDBParser.LEFT - 73)) | (1 << (MariaDBParser.LOCKED - 73)))) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & ((1 << (MariaDBParser.MAXVALUE - 110)) | (1 << (MariaDBParser.MINVALUE - 110)) | (1 << (MariaDBParser.NUMBER - 110)) | (1 << (MariaDBParser.OPTIONAL - 110)) | (1 << (MariaDBParser.ORDER - 110)) | (1 << (MariaDBParser.PRIMARY - 110)) | (1 << (MariaDBParser.PACKAGE - 110)))) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (MariaDBParser.REPLACE - 142)) | (1 << (MariaDBParser.RIGHT - 142)) | (1 << (MariaDBParser.SCHEMA - 142)) | (1 << (MariaDBParser.SKIP_ - 142)) | (1 << (MariaDBParser.STACKED - 142)) | (1 << (MariaDBParser.STATEMENT - 142)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MariaDBParser.DATE - 217)) | (1 << (MariaDBParser.TIME - 217)) | (1 << (MariaDBParser.TIMESTAMP - 217)) | (1 << (MariaDBParser.DATETIME - 217)) | (1 << (MariaDBParser.YEAR - 217)) | (1 << (MariaDBParser.BINARY - 217)) | (1 << (MariaDBParser.TEXT - 217)) | (1 << (MariaDBParser.ENUM - 217)) | (1 << (MariaDBParser.SERIAL - 217)))) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & ((1 << (MariaDBParser.JSON_ARRAY - 251)) | (1 << (MariaDBParser.JSON_ARRAYAGG - 251)) | (1 << (MariaDBParser.JSON_ARRAY_APPEND - 251)) | (1 << (MariaDBParser.JSON_ARRAY_INSERT - 251)) | (1 << (MariaDBParser.JSON_CONTAINS - 251)) | (1 << (MariaDBParser.JSON_CONTAINS_PATH - 251)) | (1 << (MariaDBParser.JSON_DEPTH - 251)) | (1 << (MariaDBParser.JSON_EXTRACT - 251)) | (1 << (MariaDBParser.JSON_INSERT - 251)) | (1 << (MariaDBParser.JSON_KEYS - 251)) | (1 << (MariaDBParser.JSON_LENGTH - 251)) | (1 << (MariaDBParser.JSON_MERGE - 251)) | (1 << (MariaDBParser.JSON_MERGE_PATCH - 251)) | (1 << (MariaDBParser.JSON_MERGE_PRESERVE - 251)) | (1 << (MariaDBParser.JSON_OBJECT - 251)) | (1 << (MariaDBParser.JSON_OBJECTAGG - 251)) | (1 << (MariaDBParser.JSON_OVERLAPS - 251)) | (1 << (MariaDBParser.JSON_PRETTY - 251)) | (1 << (MariaDBParser.JSON_QUOTE - 251)) | (1 << (MariaDBParser.JSON_REMOVE - 251)) | (1 << (MariaDBParser.JSON_REPLACE - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALID - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT - 251)) | (1 << (MariaDBParser.JSON_SEARCH - 251)) | (1 << (MariaDBParser.JSON_SET - 251)) | (1 << (MariaDBParser.JSON_STORAGE_FREE - 251)) | (1 << (MariaDBParser.JSON_STORAGE_SIZE - 251)) | (1 << (MariaDBParser.JSON_TABLE - 251)) | (1 << (MariaDBParser.JSON_TYPE - 251)) | (1 << (MariaDBParser.JSON_UNQUOTE - 251)) | (1 << (MariaDBParser.JSON_VALID - 251)) | (1 << (MariaDBParser.JSON_VALUE - 251)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (MariaDBParser.NESTED - 283)) | (1 << (MariaDBParser.ORDINALITY - 283)) | (1 << (MariaDBParser.PATH - 283)) | (1 << (MariaDBParser.AVG - 283)) | (1 << (MariaDBParser.BIT_AND - 283)) | (1 << (MariaDBParser.BIT_OR - 283)) | (1 << (MariaDBParser.BIT_XOR - 283)) | (1 << (MariaDBParser.COUNT - 283)) | (1 << (MariaDBParser.CUME_DIST - 283)) | (1 << (MariaDBParser.DENSE_RANK - 283)) | (1 << (MariaDBParser.FIRST_VALUE - 283)) | (1 << (MariaDBParser.GROUP_CONCAT - 283)) | (1 << (MariaDBParser.LAG - 283)) | (1 << (MariaDBParser.LAST_VALUE - 283)) | (1 << (MariaDBParser.LEAD - 283)) | (1 << (MariaDBParser.MAX - 283)) | (1 << (MariaDBParser.MIN - 283)) | (1 << (MariaDBParser.NTILE - 283)) | (1 << (MariaDBParser.NTH_VALUE - 283)) | (1 << (MariaDBParser.PERCENT_RANK - 283)) | (1 << (MariaDBParser.RANK - 283)) | (1 << (MariaDBParser.ROW_NUMBER - 283)) | (1 << (MariaDBParser.STD - 283)) | (1 << (MariaDBParser.STDDEV - 283)) | (1 << (MariaDBParser.STDDEV_POP - 283)) | (1 << (MariaDBParser.STDDEV_SAMP - 283)) | (1 << (MariaDBParser.SUM - 283)) | (1 << (MariaDBParser.VAR_POP - 283)) | (1 << (MariaDBParser.VAR_SAMP - 283)) | (1 << (MariaDBParser.VARIANCE - 283)) | (1 << (MariaDBParser.CURRENT_DATE - 283)) | (1 << (MariaDBParser.CURRENT_TIME - 283)))) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & ((1 << (MariaDBParser.CURRENT_TIMESTAMP - 315)) | (1 << (MariaDBParser.LOCALTIME - 315)) | (1 << (MariaDBParser.CURDATE - 315)) | (1 << (MariaDBParser.CURTIME - 315)) | (1 << (MariaDBParser.DATE_ADD - 315)) | (1 << (MariaDBParser.DATE_SUB - 315)) | (1 << (MariaDBParser.LOCALTIMESTAMP - 315)) | (1 << (MariaDBParser.NOW - 315)) | (1 << (MariaDBParser.POSITION - 315)) | (1 << (MariaDBParser.SUBSTR - 315)) | (1 << (MariaDBParser.SUBSTRING - 315)) | (1 << (MariaDBParser.SYSDATE - 315)) | (1 << (MariaDBParser.TRIM - 315)) | (1 << (MariaDBParser.UTC_DATE - 315)) | (1 << (MariaDBParser.UTC_TIME - 315)) | (1 << (MariaDBParser.UTC_TIMESTAMP - 315)) | (1 << (MariaDBParser.ACCOUNT - 315)) | (1 << (MariaDBParser.ACTION - 315)) | (1 << (MariaDBParser.AFTER - 315)) | (1 << (MariaDBParser.AGGREGATE - 315)) | (1 << (MariaDBParser.ALGORITHM - 315)) | (1 << (MariaDBParser.ANY - 315)) | (1 << (MariaDBParser.AT - 315)) | (1 << (MariaDBParser.AUTHORS - 315)) | (1 << (MariaDBParser.AUTOCOMMIT - 315)) | (1 << (MariaDBParser.AUTOEXTEND_SIZE - 315)) | (1 << (MariaDBParser.AUTO_INCREMENT - 315)) | (1 << (MariaDBParser.AVG_ROW_LENGTH - 315)) | (1 << (MariaDBParser.BEGIN - 315)) | (1 << (MariaDBParser.BINLOG - 315)) | (1 << (MariaDBParser.BIT - 315)))) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & ((1 << (MariaDBParser.BLOCK - 347)) | (1 << (MariaDBParser.BOOL - 347)) | (1 << (MariaDBParser.BOOLEAN - 347)) | (1 << (MariaDBParser.BTREE - 347)) | (1 << (MariaDBParser.CACHE - 347)) | (1 << (MariaDBParser.CASCADED - 347)) | (1 << (MariaDBParser.CHAIN - 347)) | (1 << (MariaDBParser.CHANGED - 347)) | (1 << (MariaDBParser.CHANNEL - 347)) | (1 << (MariaDBParser.CHECKSUM - 347)) | (1 << (MariaDBParser.PAGE_CHECKSUM - 347)) | (1 << (MariaDBParser.CIPHER - 347)) | (1 << (MariaDBParser.CLASS_ORIGIN - 347)) | (1 << (MariaDBParser.CLIENT - 347)) | (1 << (MariaDBParser.CLOSE - 347)) | (1 << (MariaDBParser.CLUSTERING - 347)) | (1 << (MariaDBParser.COALESCE - 347)) | (1 << (MariaDBParser.CODE - 347)) | (1 << (MariaDBParser.COLUMNS - 347)) | (1 << (MariaDBParser.COLUMN_FORMAT - 347)) | (1 << (MariaDBParser.COLUMN_NAME - 347)) | (1 << (MariaDBParser.COMMENT - 347)) | (1 << (MariaDBParser.COMMIT - 347)) | (1 << (MariaDBParser.COMPACT - 347)) | (1 << (MariaDBParser.COMPLETION - 347)) | (1 << (MariaDBParser.COMPRESSED - 347)) | (1 << (MariaDBParser.COMPRESSION - 347)) | (1 << (MariaDBParser.CONCURRENT - 347)) | (1 << (MariaDBParser.CONNECT - 347)) | (1 << (MariaDBParser.CONNECTION - 347)) | (1 << (MariaDBParser.CONSISTENT - 347)) | (1 << (MariaDBParser.CONSTRAINT_CATALOG - 347)))) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & ((1 << (MariaDBParser.CONSTRAINT_SCHEMA - 379)) | (1 << (MariaDBParser.CONSTRAINT_NAME - 379)) | (1 << (MariaDBParser.CONTAINS - 379)) | (1 << (MariaDBParser.CONTEXT - 379)) | (1 << (MariaDBParser.CONTRIBUTORS - 379)) | (1 << (MariaDBParser.COPY - 379)) | (1 << (MariaDBParser.CPU - 379)) | (1 << (MariaDBParser.CYCLE - 379)) | (1 << (MariaDBParser.CURSOR_NAME - 379)) | (1 << (MariaDBParser.DATA - 379)) | (1 << (MariaDBParser.DATAFILE - 379)) | (1 << (MariaDBParser.DEALLOCATE - 379)) | (1 << (MariaDBParser.DEFAULT_AUTH - 379)) | (1 << (MariaDBParser.DEFINER - 379)) | (1 << (MariaDBParser.DELAY_KEY_WRITE - 379)) | (1 << (MariaDBParser.DES_KEY_FILE - 379)) | (1 << (MariaDBParser.DIRECTORY - 379)) | (1 << (MariaDBParser.DISABLE - 379)) | (1 << (MariaDBParser.DISCARD - 379)) | (1 << (MariaDBParser.DISK - 379)) | (1 << (MariaDBParser.DO - 379)) | (1 << (MariaDBParser.DUMPFILE - 379)) | (1 << (MariaDBParser.DUPLICATE - 379)) | (1 << (MariaDBParser.DYNAMIC - 379)) | (1 << (MariaDBParser.ENABLE - 379)) | (1 << (MariaDBParser.ENCRYPTED - 379)) | (1 << (MariaDBParser.ENCRYPTION - 379)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ID - 379)) | (1 << (MariaDBParser.END - 379)) | (1 << (MariaDBParser.ENDS - 379)) | (1 << (MariaDBParser.ENGINE - 379)) | (1 << (MariaDBParser.ENGINES - 379)))) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & ((1 << (MariaDBParser.ERROR - 411)) | (1 << (MariaDBParser.ERRORS - 411)) | (1 << (MariaDBParser.ESCAPE - 411)) | (1 << (MariaDBParser.EVEN - 411)) | (1 << (MariaDBParser.EVENT - 411)) | (1 << (MariaDBParser.EVENTS - 411)) | (1 << (MariaDBParser.EVERY - 411)) | (1 << (MariaDBParser.EXCHANGE - 411)) | (1 << (MariaDBParser.EXCLUSIVE - 411)) | (1 << (MariaDBParser.EXPIRE - 411)) | (1 << (MariaDBParser.EXPORT - 411)) | (1 << (MariaDBParser.EXTENDED - 411)) | (1 << (MariaDBParser.EXTENT_SIZE - 411)) | (1 << (MariaDBParser.FAILED_LOGIN_ATTEMPTS - 411)) | (1 << (MariaDBParser.FAST - 411)) | (1 << (MariaDBParser.FAULTS - 411)) | (1 << (MariaDBParser.FIELDS - 411)) | (1 << (MariaDBParser.FILE_BLOCK_SIZE - 411)) | (1 << (MariaDBParser.FILTER - 411)) | (1 << (MariaDBParser.FIRST - 411)) | (1 << (MariaDBParser.FIXED - 411)) | (1 << (MariaDBParser.FLUSH - 411)) | (1 << (MariaDBParser.FOLLOWS - 411)) | (1 << (MariaDBParser.FOUND - 411)) | (1 << (MariaDBParser.FULL - 411)) | (1 << (MariaDBParser.FUNCTION - 411)) | (1 << (MariaDBParser.GENERAL - 411)) | (1 << (MariaDBParser.GLOBAL - 411)) | (1 << (MariaDBParser.GRANTS - 411)) | (1 << (MariaDBParser.GROUP_REPLICATION - 411)) | (1 << (MariaDBParser.HANDLER - 411)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (MariaDBParser.HASH - 443)) | (1 << (MariaDBParser.HELP - 443)) | (1 << (MariaDBParser.HISTORY - 443)) | (1 << (MariaDBParser.HOST - 443)) | (1 << (MariaDBParser.HOSTS - 443)) | (1 << (MariaDBParser.IDENTIFIED - 443)) | (1 << (MariaDBParser.IGNORE_SERVER_IDS - 443)) | (1 << (MariaDBParser.IMPORT - 443)) | (1 << (MariaDBParser.INCREMENT - 443)) | (1 << (MariaDBParser.INDEXES - 443)) | (1 << (MariaDBParser.INITIAL_SIZE - 443)) | (1 << (MariaDBParser.INPLACE - 443)) | (1 << (MariaDBParser.INSERT_METHOD - 443)) | (1 << (MariaDBParser.INSTALL - 443)) | (1 << (MariaDBParser.INSTANCE - 443)) | (1 << (MariaDBParser.INSTANT - 443)) | (1 << (MariaDBParser.INVISIBLE - 443)) | (1 << (MariaDBParser.INVOKER - 443)) | (1 << (MariaDBParser.IO - 443)) | (1 << (MariaDBParser.IO_THREAD - 443)) | (1 << (MariaDBParser.IPC - 443)) | (1 << (MariaDBParser.ISOLATION - 443)) | (1 << (MariaDBParser.ISSUER - 443)) | (1 << (MariaDBParser.JSON - 443)) | (1 << (MariaDBParser.KEY_BLOCK_SIZE - 443)) | (1 << (MariaDBParser.LANGUAGE - 443)) | (1 << (MariaDBParser.LAST - 443)) | (1 << (MariaDBParser.LEAVES - 443)) | (1 << (MariaDBParser.LESS - 443)) | (1 << (MariaDBParser.LEVEL - 443)) | (1 << (MariaDBParser.LIST - 443)) | (1 << (MariaDBParser.LOCAL - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (MariaDBParser.LOCALES - 475)) | (1 << (MariaDBParser.LOGFILE - 475)) | (1 << (MariaDBParser.LOGS - 475)) | (1 << (MariaDBParser.MASTER - 475)) | (1 << (MariaDBParser.MASTER_AUTO_POSITION - 475)) | (1 << (MariaDBParser.MASTER_CONNECT_RETRY - 475)) | (1 << (MariaDBParser.MASTER_DELAY - 475)) | (1 << (MariaDBParser.MASTER_HEARTBEAT_PERIOD - 475)) | (1 << (MariaDBParser.MASTER_HOST - 475)) | (1 << (MariaDBParser.MASTER_LOG_FILE - 475)) | (1 << (MariaDBParser.MASTER_LOG_POS - 475)) | (1 << (MariaDBParser.MASTER_PASSWORD - 475)) | (1 << (MariaDBParser.MASTER_PORT - 475)) | (1 << (MariaDBParser.MASTER_RETRY_COUNT - 475)) | (1 << (MariaDBParser.MASTER_SSL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CA - 475)) | (1 << (MariaDBParser.MASTER_SSL_CAPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_CERT - 475)) | (1 << (MariaDBParser.MASTER_SSL_CIPHER - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRLPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_KEY - 475)) | (1 << (MariaDBParser.MASTER_TLS_VERSION - 475)) | (1 << (MariaDBParser.MASTER_USER - 475)) | (1 << (MariaDBParser.MAX_CONNECTIONS_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_QUERIES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_ROWS - 475)) | (1 << (MariaDBParser.MAX_SIZE - 475)) | (1 << (MariaDBParser.MAX_UPDATES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_USER_CONNECTIONS - 475)) | (1 << (MariaDBParser.MEDIUM - 475)) | (1 << (MariaDBParser.MEMBER - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (MariaDBParser.MERGE - 507)) | (1 << (MariaDBParser.MESSAGE_TEXT - 507)) | (1 << (MariaDBParser.MID - 507)) | (1 << (MariaDBParser.MIGRATE - 507)) | (1 << (MariaDBParser.MIN_ROWS - 507)) | (1 << (MariaDBParser.MODE - 507)) | (1 << (MariaDBParser.MODIFY - 507)) | (1 << (MariaDBParser.MUTEX - 507)) | (1 << (MariaDBParser.MYSQL - 507)) | (1 << (MariaDBParser.MYSQL_ERRNO - 507)) | (1 << (MariaDBParser.NAME - 507)) | (1 << (MariaDBParser.NAMES - 507)) | (1 << (MariaDBParser.NCHAR - 507)) | (1 << (MariaDBParser.NEVER - 507)) | (1 << (MariaDBParser.NEXT - 507)) | (1 << (MariaDBParser.NO - 507)) | (1 << (MariaDBParser.NOCACHE - 507)) | (1 << (MariaDBParser.NOCOPY - 507)) | (1 << (MariaDBParser.NOCYCLE - 507)) | (1 << (MariaDBParser.NOMAXVALUE - 507)) | (1 << (MariaDBParser.NOMINVALUE - 507)) | (1 << (MariaDBParser.NOWAIT - 507)) | (1 << (MariaDBParser.NODEGROUP - 507)) | (1 << (MariaDBParser.NONE - 507)) | (1 << (MariaDBParser.ODBC - 507)) | (1 << (MariaDBParser.OFFLINE - 507)) | (1 << (MariaDBParser.OFFSET - 507)) | (1 << (MariaDBParser.OF - 507)) | (1 << (MariaDBParser.OJ - 507)) | (1 << (MariaDBParser.OLD_PASSWORD - 507)) | (1 << (MariaDBParser.ONE - 507)) | (1 << (MariaDBParser.ONLINE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (MariaDBParser.ONLY - 539)) | (1 << (MariaDBParser.OPEN - 539)) | (1 << (MariaDBParser.OPTIMIZER_COSTS - 539)) | (1 << (MariaDBParser.OPTIONS - 539)) | (1 << (MariaDBParser.OWNER - 539)) | (1 << (MariaDBParser.PACK_KEYS - 539)) | (1 << (MariaDBParser.PAGE - 539)) | (1 << (MariaDBParser.PARSER - 539)) | (1 << (MariaDBParser.PARTIAL - 539)) | (1 << (MariaDBParser.PARTITIONING - 539)) | (1 << (MariaDBParser.PARTITIONS - 539)) | (1 << (MariaDBParser.PASSWORD - 539)) | (1 << (MariaDBParser.PASSWORD_LOCK_TIME - 539)) | (1 << (MariaDBParser.PHASE - 539)) | (1 << (MariaDBParser.PLUGIN - 539)) | (1 << (MariaDBParser.PLUGIN_DIR - 539)) | (1 << (MariaDBParser.PLUGINS - 539)) | (1 << (MariaDBParser.PORT - 539)) | (1 << (MariaDBParser.PRECEDES - 539)) | (1 << (MariaDBParser.PREPARE - 539)) | (1 << (MariaDBParser.PRESERVE - 539)) | (1 << (MariaDBParser.PREV - 539)) | (1 << (MariaDBParser.PROCESSLIST - 539)) | (1 << (MariaDBParser.PROFILE - 539)) | (1 << (MariaDBParser.PROFILES - 539)) | (1 << (MariaDBParser.PROXY - 539)) | (1 << (MariaDBParser.QUERY - 539)) | (1 << (MariaDBParser.QUERY_RESPONSE_TIME - 539)) | (1 << (MariaDBParser.QUICK - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (MariaDBParser.REBUILD - 571)) | (1 << (MariaDBParser.RECOVER - 571)) | (1 << (MariaDBParser.RECURSIVE - 571)) | (1 << (MariaDBParser.REDO_BUFFER_SIZE - 571)) | (1 << (MariaDBParser.REDUNDANT - 571)) | (1 << (MariaDBParser.RELAY - 571)) | (1 << (MariaDBParser.RELAY_LOG_FILE - 571)) | (1 << (MariaDBParser.RELAY_LOG_POS - 571)) | (1 << (MariaDBParser.RELAYLOG - 571)) | (1 << (MariaDBParser.REMOVE - 571)) | (1 << (MariaDBParser.REORGANIZE - 571)) | (1 << (MariaDBParser.REPAIR - 571)) | (1 << (MariaDBParser.REPLICATE_DO_DB - 571)) | (1 << (MariaDBParser.REPLICATE_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_REWRITE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATION - 571)) | (1 << (MariaDBParser.RESET - 571)) | (1 << (MariaDBParser.RESTART - 571)) | (1 << (MariaDBParser.RESUME - 571)) | (1 << (MariaDBParser.RETURNED_SQLSTATE - 571)) | (1 << (MariaDBParser.RETURNS - 571)) | (1 << (MariaDBParser.REUSE - 571)) | (1 << (MariaDBParser.ROLE - 571)) | (1 << (MariaDBParser.ROLLBACK - 571)) | (1 << (MariaDBParser.ROLLUP - 571)) | (1 << (MariaDBParser.ROTATE - 571)) | (1 << (MariaDBParser.ROW - 571)))) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & ((1 << (MariaDBParser.ROWS - 603)) | (1 << (MariaDBParser.ROW_FORMAT - 603)) | (1 << (MariaDBParser.RTREE - 603)) | (1 << (MariaDBParser.SAVEPOINT - 603)) | (1 << (MariaDBParser.SCHEDULE - 603)) | (1 << (MariaDBParser.SECURITY - 603)) | (1 << (MariaDBParser.SEQUENCE - 603)) | (1 << (MariaDBParser.SERVER - 603)) | (1 << (MariaDBParser.SESSION - 603)) | (1 << (MariaDBParser.SHARE - 603)) | (1 << (MariaDBParser.SHARED - 603)) | (1 << (MariaDBParser.SIGNED - 603)) | (1 << (MariaDBParser.SIMPLE - 603)) | (1 << (MariaDBParser.SLAVE - 603)) | (1 << (MariaDBParser.SLAVES - 603)) | (1 << (MariaDBParser.SLOW - 603)) | (1 << (MariaDBParser.SNAPSHOT - 603)) | (1 << (MariaDBParser.SOCKET - 603)) | (1 << (MariaDBParser.SOME - 603)) | (1 << (MariaDBParser.SONAME - 603)) | (1 << (MariaDBParser.SOUNDS - 603)) | (1 << (MariaDBParser.SOURCE - 603)) | (1 << (MariaDBParser.SQL_AFTER_GTIDS - 603)) | (1 << (MariaDBParser.SQL_AFTER_MTS_GAPS - 603)) | (1 << (MariaDBParser.SQL_BEFORE_GTIDS - 603)) | (1 << (MariaDBParser.SQL_BUFFER_RESULT - 603)) | (1 << (MariaDBParser.SQL_CACHE - 603)) | (1 << (MariaDBParser.SQL_NO_CACHE - 603)) | (1 << (MariaDBParser.SQL_THREAD - 603)) | (1 << (MariaDBParser.START - 603)) | (1 << (MariaDBParser.STARTS - 603)) | (1 << (MariaDBParser.STATS_AUTO_RECALC - 603)))) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & ((1 << (MariaDBParser.STATS_PERSISTENT - 635)) | (1 << (MariaDBParser.STATS_SAMPLE_PAGES - 635)) | (1 << (MariaDBParser.STATUS - 635)) | (1 << (MariaDBParser.STOP - 635)) | (1 << (MariaDBParser.STORAGE - 635)) | (1 << (MariaDBParser.STRING - 635)) | (1 << (MariaDBParser.SUBCLASS_ORIGIN - 635)) | (1 << (MariaDBParser.SUBJECT - 635)) | (1 << (MariaDBParser.SUBPARTITION - 635)) | (1 << (MariaDBParser.SUBPARTITIONS - 635)) | (1 << (MariaDBParser.SUSPEND - 635)) | (1 << (MariaDBParser.SWAPS - 635)) | (1 << (MariaDBParser.SWITCHES - 635)) | (1 << (MariaDBParser.TABLE_NAME - 635)) | (1 << (MariaDBParser.TABLESPACE - 635)) | (1 << (MariaDBParser.TABLE_TYPE - 635)) | (1 << (MariaDBParser.TEMPORARY - 635)) | (1 << (MariaDBParser.TEMPTABLE - 635)) | (1 << (MariaDBParser.THAN - 635)) | (1 << (MariaDBParser.TRADITIONAL - 635)) | (1 << (MariaDBParser.TRANSACTION - 635)) | (1 << (MariaDBParser.TRANSACTIONAL - 635)) | (1 << (MariaDBParser.TRIGGERS - 635)) | (1 << (MariaDBParser.TRUNCATE - 635)) | (1 << (MariaDBParser.TYPES - 635)) | (1 << (MariaDBParser.UNBOUNDED - 635)) | (1 << (MariaDBParser.UNDEFINED - 635)) | (1 << (MariaDBParser.UNDOFILE - 635)) | (1 << (MariaDBParser.UNDO_BUFFER_SIZE - 635)) | (1 << (MariaDBParser.UNINSTALL - 635)) | (1 << (MariaDBParser.UNKNOWN - 635)))) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & ((1 << (MariaDBParser.UNTIL - 667)) | (1 << (MariaDBParser.UPGRADE - 667)) | (1 << (MariaDBParser.USER - 667)) | (1 << (MariaDBParser.USE_FRM - 667)) | (1 << (MariaDBParser.USER_RESOURCES - 667)) | (1 << (MariaDBParser.VALIDATION - 667)) | (1 << (MariaDBParser.VALUE - 667)) | (1 << (MariaDBParser.VARIABLES - 667)) | (1 << (MariaDBParser.VIEW - 667)) | (1 << (MariaDBParser.VIRTUAL - 667)) | (1 << (MariaDBParser.VISIBLE - 667)) | (1 << (MariaDBParser.WAIT - 667)) | (1 << (MariaDBParser.WARNINGS - 667)) | (1 << (MariaDBParser.WITHOUT - 667)) | (1 << (MariaDBParser.WORK - 667)) | (1 << (MariaDBParser.WRAPPER - 667)) | (1 << (MariaDBParser.WSREP_MEMBERSHIP - 667)) | (1 << (MariaDBParser.WSREP_STATUS - 667)) | (1 << (MariaDBParser.X509 - 667)) | (1 << (MariaDBParser.XA - 667)) | (1 << (MariaDBParser.XML - 667)) | (1 << (MariaDBParser.EUR - 667)) | (1 << (MariaDBParser.USA - 667)) | (1 << (MariaDBParser.JIS - 667)) | (1 << (MariaDBParser.ISO - 667)) | (1 << (MariaDBParser.INTERNAL - 667)) | (1 << (MariaDBParser.QUARTER - 667)) | (1 << (MariaDBParser.MONTH - 667)) | (1 << (MariaDBParser.DAY - 667)) | (1 << (MariaDBParser.HOUR - 667)))) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & ((1 << (MariaDBParser.MINUTE - 699)) | (1 << (MariaDBParser.WEEK - 699)) | (1 << (MariaDBParser.SECOND - 699)) | (1 << (MariaDBParser.MICROSECOND - 699)) | (1 << (MariaDBParser.USER_STATISTICS - 699)) | (1 << (MariaDBParser.CLIENT_STATISTICS - 699)) | (1 << (MariaDBParser.INDEX_STATISTICS - 699)) | (1 << (MariaDBParser.TABLE_STATISTICS - 699)) | (1 << (MariaDBParser.ADMIN - 699)) | (1 << (MariaDBParser.AUDIT_ADMIN - 699)) | (1 << (MariaDBParser.BACKUP_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ENCRYPTION_ADMIN - 699)) | (1 << (MariaDBParser.CLONE_ADMIN - 699)) | (1 << (MariaDBParser.CONNECTION_ADMIN - 699)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ADMIN - 699)) | (1 << (MariaDBParser.EXECUTE - 699)) | (1 << (MariaDBParser.FILE - 699)) | (1 << (MariaDBParser.FIREWALL_ADMIN - 699)) | (1 << (MariaDBParser.FIREWALL_USER - 699)) | (1 << (MariaDBParser.GROUP_REPLICATION_ADMIN - 699)) | (1 << (MariaDBParser.INNODB_REDO_LOG_ARCHIVE - 699)) | (1 << (MariaDBParser.INVOKE - 699)) | (1 << (MariaDBParser.LAMBDA - 699)) | (1 << (MariaDBParser.NDB_STORED_USER - 699)) | (1 << (MariaDBParser.PASSWORDLESS_USER_ADMIN - 699)))) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & ((1 << (MariaDBParser.PERSIST_RO_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.PRIVILEGES - 731)) | (1 << (MariaDBParser.PROCESS - 731)) | (1 << (MariaDBParser.RELOAD - 731)) | (1 << (MariaDBParser.REPLICATION_APPLIER - 731)) | (1 << (MariaDBParser.REPLICATION_SLAVE_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_USER - 731)) | (1 << (MariaDBParser.ROLE_ADMIN - 731)) | (1 << (MariaDBParser.ROUTINE - 731)) | (1 << (MariaDBParser.S3 - 731)) | (1 << (MariaDBParser.SESSION_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.SET_USER_ID - 731)) | (1 << (MariaDBParser.SHOW_ROUTINE - 731)) | (1 << (MariaDBParser.SHUTDOWN - 731)) | (1 << (MariaDBParser.SUPER - 731)) | (1 << (MariaDBParser.SYSTEM_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.TABLES - 731)) | (1 << (MariaDBParser.TABLE_ENCRYPTION_ADMIN - 731)) | (1 << (MariaDBParser.VERSION_TOKEN_ADMIN - 731)) | (1 << (MariaDBParser.XA_RECOVER_ADMIN - 731)) | (1 << (MariaDBParser.ARMSCII8 - 731)) | (1 << (MariaDBParser.ASCII - 731)) | (1 << (MariaDBParser.BIG5 - 731)) | (1 << (MariaDBParser.CP1250 - 731)) | (1 << (MariaDBParser.CP1251 - 731)) | (1 << (MariaDBParser.CP1256 - 731)) | (1 << (MariaDBParser.CP1257 - 731)) | (1 << (MariaDBParser.CP850 - 731)) | (1 << (MariaDBParser.CP852 - 731)) | (1 << (MariaDBParser.CP866 - 731)))) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & ((1 << (MariaDBParser.CP932 - 763)) | (1 << (MariaDBParser.DEC8 - 763)) | (1 << (MariaDBParser.EUCJPMS - 763)) | (1 << (MariaDBParser.EUCKR - 763)) | (1 << (MariaDBParser.GB18030 - 763)) | (1 << (MariaDBParser.GB2312 - 763)) | (1 << (MariaDBParser.GBK - 763)) | (1 << (MariaDBParser.GEOSTD8 - 763)) | (1 << (MariaDBParser.GREEK - 763)) | (1 << (MariaDBParser.HEBREW - 763)) | (1 << (MariaDBParser.HP8 - 763)) | (1 << (MariaDBParser.KEYBCS2 - 763)) | (1 << (MariaDBParser.KOI8R - 763)) | (1 << (MariaDBParser.KOI8U - 763)) | (1 << (MariaDBParser.LATIN1 - 763)) | (1 << (MariaDBParser.LATIN2 - 763)) | (1 << (MariaDBParser.LATIN5 - 763)) | (1 << (MariaDBParser.LATIN7 - 763)) | (1 << (MariaDBParser.MACCE - 763)) | (1 << (MariaDBParser.MACROMAN - 763)) | (1 << (MariaDBParser.SJIS - 763)) | (1 << (MariaDBParser.SWE7 - 763)) | (1 << (MariaDBParser.TIS620 - 763)) | (1 << (MariaDBParser.UCS2 - 763)) | (1 << (MariaDBParser.UJIS - 763)) | (1 << (MariaDBParser.UTF16 - 763)) | (1 << (MariaDBParser.UTF16LE - 763)) | (1 << (MariaDBParser.UTF32 - 763)) | (1 << (MariaDBParser.UTF8 - 763)) | (1 << (MariaDBParser.UTF8MB3 - 763)) | (1 << (MariaDBParser.UTF8MB4 - 763)) | (1 << (MariaDBParser.ARCHIVE - 763)))) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & ((1 << (MariaDBParser.BLACKHOLE - 795)) | (1 << (MariaDBParser.CSV - 795)) | (1 << (MariaDBParser.FEDERATED - 795)) | (1 << (MariaDBParser.INNODB - 795)) | (1 << (MariaDBParser.MEMORY - 795)) | (1 << (MariaDBParser.MRG_MYISAM - 795)) | (1 << (MariaDBParser.MYISAM - 795)) | (1 << (MariaDBParser.NDB - 795)) | (1 << (MariaDBParser.NDBCLUSTER - 795)) | (1 << (MariaDBParser.PERFORMANCE_SCHEMA - 795)) | (1 << (MariaDBParser.TOKUDB - 795)) | (1 << (MariaDBParser.REPEATABLE - 795)) | (1 << (MariaDBParser.COMMITTED - 795)) | (1 << (MariaDBParser.UNCOMMITTED - 795)) | (1 << (MariaDBParser.SERIALIZABLE - 795)) | (1 << (MariaDBParser.GEOMETRYCOLLECTION - 795)) | (1 << (MariaDBParser.LINESTRING - 795)) | (1 << (MariaDBParser.MULTILINESTRING - 795)) | (1 << (MariaDBParser.MULTIPOINT - 795)) | (1 << (MariaDBParser.MULTIPOLYGON - 795)) | (1 << (MariaDBParser.POINT - 795)) | (1 << (MariaDBParser.POLYGON - 795)) | (1 << (MariaDBParser.ABS - 795)) | (1 << (MariaDBParser.ACOS - 795)) | (1 << (MariaDBParser.ADDDATE - 795)) | (1 << (MariaDBParser.ADDTIME - 795)) | (1 << (MariaDBParser.AES_DECRYPT - 795)) | (1 << (MariaDBParser.AES_ENCRYPT - 795)) | (1 << (MariaDBParser.AREA - 795)) | (1 << (MariaDBParser.ASBINARY - 795)))) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & ((1 << (MariaDBParser.ASIN - 827)) | (1 << (MariaDBParser.ASTEXT - 827)) | (1 << (MariaDBParser.ASWKB - 827)) | (1 << (MariaDBParser.ASWKT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DECRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DERIVE - 827)) | (1 << (MariaDBParser.ASYMMETRIC_ENCRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_SIGN - 827)) | (1 << (MariaDBParser.ASYMMETRIC_VERIFY - 827)) | (1 << (MariaDBParser.ATAN - 827)) | (1 << (MariaDBParser.ATAN2 - 827)) | (1 << (MariaDBParser.BENCHMARK - 827)) | (1 << (MariaDBParser.BIN - 827)) | (1 << (MariaDBParser.BIT_COUNT - 827)) | (1 << (MariaDBParser.BIT_LENGTH - 827)) | (1 << (MariaDBParser.BUFFER - 827)) | (1 << (MariaDBParser.CATALOG_NAME - 827)) | (1 << (MariaDBParser.CEIL - 827)) | (1 << (MariaDBParser.CEILING - 827)) | (1 << (MariaDBParser.CENTROID - 827)) | (1 << (MariaDBParser.CHARACTER_LENGTH - 827)) | (1 << (MariaDBParser.CHARSET - 827)) | (1 << (MariaDBParser.CHAR_LENGTH - 827)) | (1 << (MariaDBParser.COERCIBILITY - 827)) | (1 << (MariaDBParser.COLLATION - 827)) | (1 << (MariaDBParser.COMPRESS - 827)) | (1 << (MariaDBParser.CONCAT - 827)) | (1 << (MariaDBParser.CONCAT_WS - 827)) | (1 << (MariaDBParser.CONNECTION_ID - 827)) | (1 << (MariaDBParser.CONV - 827)) | (1 << (MariaDBParser.CONVERT_TZ - 827)) | (1 << (MariaDBParser.COS - 827)))) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & ((1 << (MariaDBParser.COT - 859)) | (1 << (MariaDBParser.CRC32 - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY - 859)) | (1 << (MariaDBParser.CREATE_DH_PARAMETERS - 859)) | (1 << (MariaDBParser.CREATE_DIGEST - 859)) | (1 << (MariaDBParser.CROSSES - 859)) | (1 << (MariaDBParser.DATEDIFF - 859)) | (1 << (MariaDBParser.DATE_FORMAT - 859)) | (1 << (MariaDBParser.DAYNAME - 859)) | (1 << (MariaDBParser.DAYOFMONTH - 859)) | (1 << (MariaDBParser.DAYOFWEEK - 859)) | (1 << (MariaDBParser.DAYOFYEAR - 859)) | (1 << (MariaDBParser.DECODE - 859)) | (1 << (MariaDBParser.DEGREES - 859)) | (1 << (MariaDBParser.DES_DECRYPT - 859)) | (1 << (MariaDBParser.DES_ENCRYPT - 859)) | (1 << (MariaDBParser.DIMENSION - 859)) | (1 << (MariaDBParser.DISJOINT - 859)) | (1 << (MariaDBParser.ELT - 859)) | (1 << (MariaDBParser.ENCODE - 859)) | (1 << (MariaDBParser.ENCRYPT - 859)) | (1 << (MariaDBParser.ENDPOINT - 859)) | (1 << (MariaDBParser.ENGINE_ATTRIBUTE - 859)) | (1 << (MariaDBParser.ENVELOPE - 859)) | (1 << (MariaDBParser.EQUALS - 859)) | (1 << (MariaDBParser.EXP - 859)) | (1 << (MariaDBParser.EXPORT_SET - 859)) | (1 << (MariaDBParser.EXTERIORRING - 859)) | (1 << (MariaDBParser.EXTRACTVALUE - 859)) | (1 << (MariaDBParser.FIELD - 859)) | (1 << (MariaDBParser.FIND_IN_SET - 859)))) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & ((1 << (MariaDBParser.FLOOR - 891)) | (1 << (MariaDBParser.FORMAT - 891)) | (1 << (MariaDBParser.FOUND_ROWS - 891)) | (1 << (MariaDBParser.FROM_BASE64 - 891)) | (1 << (MariaDBParser.FROM_DAYS - 891)) | (1 << (MariaDBParser.FROM_UNIXTIME - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYN - 891)) | (1 << (MariaDBParser.GEOMETRYTYPE - 891)) | (1 << (MariaDBParser.GEOMFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMFROMWKB - 891)) | (1 << (MariaDBParser.GET_FORMAT - 891)) | (1 << (MariaDBParser.GET_LOCK - 891)) | (1 << (MariaDBParser.GLENGTH - 891)) | (1 << (MariaDBParser.GREATEST - 891)) | (1 << (MariaDBParser.GTID_SUBSET - 891)) | (1 << (MariaDBParser.GTID_SUBTRACT - 891)) | (1 << (MariaDBParser.HEX - 891)) | (1 << (MariaDBParser.IFNULL - 891)) | (1 << (MariaDBParser.INET6_ATON - 891)) | (1 << (MariaDBParser.INET6_NTOA - 891)) | (1 << (MariaDBParser.INET_ATON - 891)) | (1 << (MariaDBParser.INET_NTOA - 891)) | (1 << (MariaDBParser.INSTR - 891)) | (1 << (MariaDBParser.INTERIORRINGN - 891)) | (1 << (MariaDBParser.INTERSECTS - 891)) | (1 << (MariaDBParser.ISCLOSED - 891)))) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & ((1 << (MariaDBParser.ISEMPTY - 923)) | (1 << (MariaDBParser.ISNULL - 923)) | (1 << (MariaDBParser.ISSIMPLE - 923)) | (1 << (MariaDBParser.IS_FREE_LOCK - 923)) | (1 << (MariaDBParser.IS_IPV4 - 923)) | (1 << (MariaDBParser.IS_IPV4_COMPAT - 923)) | (1 << (MariaDBParser.IS_IPV4_MAPPED - 923)) | (1 << (MariaDBParser.IS_IPV6 - 923)) | (1 << (MariaDBParser.IS_USED_LOCK - 923)) | (1 << (MariaDBParser.LAST_INSERT_ID - 923)) | (1 << (MariaDBParser.LCASE - 923)) | (1 << (MariaDBParser.LEAST - 923)) | (1 << (MariaDBParser.LENGTH - 923)) | (1 << (MariaDBParser.LINEFROMTEXT - 923)) | (1 << (MariaDBParser.LINEFROMWKB - 923)) | (1 << (MariaDBParser.LINESTRINGFROMTEXT - 923)) | (1 << (MariaDBParser.LINESTRINGFROMWKB - 923)) | (1 << (MariaDBParser.LN - 923)) | (1 << (MariaDBParser.LOAD_FILE - 923)) | (1 << (MariaDBParser.LOCATE - 923)) | (1 << (MariaDBParser.LOG - 923)) | (1 << (MariaDBParser.LOG10 - 923)) | (1 << (MariaDBParser.LOG2 - 923)) | (1 << (MariaDBParser.LOWER - 923)) | (1 << (MariaDBParser.LPAD - 923)) | (1 << (MariaDBParser.LTRIM - 923)) | (1 << (MariaDBParser.MAKEDATE - 923)) | (1 << (MariaDBParser.MAKETIME - 923)) | (1 << (MariaDBParser.MAKE_SET - 923)) | (1 << (MariaDBParser.MASTER_POS_WAIT - 923)) | (1 << (MariaDBParser.MBRCONTAINS - 923)) | (1 << (MariaDBParser.MBRDISJOINT - 923)))) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & ((1 << (MariaDBParser.MBREQUAL - 955)) | (1 << (MariaDBParser.MBRINTERSECTS - 955)) | (1 << (MariaDBParser.MBROVERLAPS - 955)) | (1 << (MariaDBParser.MBRTOUCHES - 955)) | (1 << (MariaDBParser.MBRWITHIN - 955)) | (1 << (MariaDBParser.MD5 - 955)) | (1 << (MariaDBParser.MLINEFROMTEXT - 955)) | (1 << (MariaDBParser.MLINEFROMWKB - 955)) | (1 << (MariaDBParser.MONTHNAME - 955)) | (1 << (MariaDBParser.MPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MPOLYFROMTEXT - 955)) | (1 << (MariaDBParser.MPOLYFROMWKB - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMTEXT - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMWKB - 955)) | (1 << (MariaDBParser.NAME_CONST - 955)) | (1 << (MariaDBParser.NULLIF - 955)) | (1 << (MariaDBParser.NUMGEOMETRIES - 955)) | (1 << (MariaDBParser.NUMINTERIORRINGS - 955)) | (1 << (MariaDBParser.NUMPOINTS - 955)) | (1 << (MariaDBParser.OCT - 955)) | (1 << (MariaDBParser.OCTET_LENGTH - 955)) | (1 << (MariaDBParser.ORD - 955)) | (1 << (MariaDBParser.OVERLAPS - 955)) | (1 << (MariaDBParser.PERIOD_ADD - 955)) | (1 << (MariaDBParser.PERIOD_DIFF - 955)) | (1 << (MariaDBParser.PI - 955)) | (1 << (MariaDBParser.POINTFROMTEXT - 955)))) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & ((1 << (MariaDBParser.POINTFROMWKB - 987)) | (1 << (MariaDBParser.POINTN - 987)) | (1 << (MariaDBParser.POLYFROMTEXT - 987)) | (1 << (MariaDBParser.POLYFROMWKB - 987)) | (1 << (MariaDBParser.POLYGONFROMTEXT - 987)) | (1 << (MariaDBParser.POLYGONFROMWKB - 987)) | (1 << (MariaDBParser.POW - 987)) | (1 << (MariaDBParser.POWER - 987)) | (1 << (MariaDBParser.QUOTE - 987)) | (1 << (MariaDBParser.RADIANS - 987)) | (1 << (MariaDBParser.RAND - 987)) | (1 << (MariaDBParser.RANDOM_BYTES - 987)) | (1 << (MariaDBParser.RELEASE_LOCK - 987)) | (1 << (MariaDBParser.REVERSE - 987)) | (1 << (MariaDBParser.ROUND - 987)) | (1 << (MariaDBParser.ROW_COUNT - 987)) | (1 << (MariaDBParser.RPAD - 987)) | (1 << (MariaDBParser.RTRIM - 987)) | (1 << (MariaDBParser.SEC_TO_TIME - 987)) | (1 << (MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE - 987)) | (1 << (MariaDBParser.SESSION_USER - 987)) | (1 << (MariaDBParser.SHA - 987)) | (1 << (MariaDBParser.SHA1 - 987)) | (1 << (MariaDBParser.SHA2 - 987)) | (1 << (MariaDBParser.SCHEMA_NAME - 987)) | (1 << (MariaDBParser.SIGN - 987)) | (1 << (MariaDBParser.SIN - 987)) | (1 << (MariaDBParser.SLEEP - 987)) | (1 << (MariaDBParser.SOUNDEX - 987)) | (1 << (MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS - 987)) | (1 << (MariaDBParser.SQRT - 987)) | (1 << (MariaDBParser.SRID - 987)))) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & ((1 << (MariaDBParser.STARTPOINT - 1019)) | (1 << (MariaDBParser.STRCMP - 1019)) | (1 << (MariaDBParser.STR_TO_DATE - 1019)) | (1 << (MariaDBParser.ST_AREA - 1019)) | (1 << (MariaDBParser.ST_ASBINARY - 1019)) | (1 << (MariaDBParser.ST_ASTEXT - 1019)) | (1 << (MariaDBParser.ST_ASWKB - 1019)) | (1 << (MariaDBParser.ST_ASWKT - 1019)) | (1 << (MariaDBParser.ST_BUFFER - 1019)) | (1 << (MariaDBParser.ST_CENTROID - 1019)) | (1 << (MariaDBParser.ST_CONTAINS - 1019)) | (1 << (MariaDBParser.ST_CROSSES - 1019)) | (1 << (MariaDBParser.ST_DIFFERENCE - 1019)) | (1 << (MariaDBParser.ST_DIMENSION - 1019)) | (1 << (MariaDBParser.ST_DISJOINT - 1019)) | (1 << (MariaDBParser.ST_DISTANCE - 1019)) | (1 << (MariaDBParser.ST_ENDPOINT - 1019)) | (1 << (MariaDBParser.ST_ENVELOPE - 1019)) | (1 << (MariaDBParser.ST_EQUALS - 1019)) | (1 << (MariaDBParser.ST_EXTERIORRING - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYN - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYTYPE - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMWKB - 1019)) | (1 << (MariaDBParser.ST_INTERIORRINGN - 1019)))) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & ((1 << (MariaDBParser.ST_INTERSECTION - 1051)) | (1 << (MariaDBParser.ST_INTERSECTS - 1051)) | (1 << (MariaDBParser.ST_ISCLOSED - 1051)) | (1 << (MariaDBParser.ST_ISEMPTY - 1051)) | (1 << (MariaDBParser.ST_ISSIMPLE - 1051)) | (1 << (MariaDBParser.ST_LINEFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINEFROMWKB - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMWKB - 1051)) | (1 << (MariaDBParser.ST_NUMGEOMETRIES - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRING - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRINGS - 1051)) | (1 << (MariaDBParser.ST_NUMPOINTS - 1051)) | (1 << (MariaDBParser.ST_OVERLAPS - 1051)) | (1 << (MariaDBParser.ST_POINTFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POINTFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POINTN - 1051)) | (1 << (MariaDBParser.ST_POLYFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMWKB - 1051)) | (1 << (MariaDBParser.ST_SRID - 1051)) | (1 << (MariaDBParser.ST_STARTPOINT - 1051)) | (1 << (MariaDBParser.ST_SYMDIFFERENCE - 1051)) | (1 << (MariaDBParser.ST_TOUCHES - 1051)) | (1 << (MariaDBParser.ST_UNION - 1051)) | (1 << (MariaDBParser.ST_WITHIN - 1051)) | (1 << (MariaDBParser.ST_X - 1051)) | (1 << (MariaDBParser.ST_Y - 1051)) | (1 << (MariaDBParser.SUBDATE - 1051)) | (1 << (MariaDBParser.SUBSTRING_INDEX - 1051)) | (1 << (MariaDBParser.SUBTIME - 1051)))) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & ((1 << (MariaDBParser.SYSTEM_USER - 1083)) | (1 << (MariaDBParser.TAN - 1083)) | (1 << (MariaDBParser.TIMEDIFF - 1083)) | (1 << (MariaDBParser.TIMESTAMPADD - 1083)) | (1 << (MariaDBParser.TIMESTAMPDIFF - 1083)) | (1 << (MariaDBParser.TIME_FORMAT - 1083)) | (1 << (MariaDBParser.TIME_TO_SEC - 1083)) | (1 << (MariaDBParser.TOUCHES - 1083)) | (1 << (MariaDBParser.TO_BASE64 - 1083)) | (1 << (MariaDBParser.TO_DAYS - 1083)) | (1 << (MariaDBParser.TO_SECONDS - 1083)) | (1 << (MariaDBParser.UCASE - 1083)) | (1 << (MariaDBParser.UNCOMPRESS - 1083)) | (1 << (MariaDBParser.UNCOMPRESSED_LENGTH - 1083)) | (1 << (MariaDBParser.UNHEX - 1083)) | (1 << (MariaDBParser.UNIX_TIMESTAMP - 1083)) | (1 << (MariaDBParser.UPDATEXML - 1083)) | (1 << (MariaDBParser.UPPER - 1083)) | (1 << (MariaDBParser.UUID - 1083)) | (1 << (MariaDBParser.UUID_SHORT - 1083)) | (1 << (MariaDBParser.VALIDATE_PASSWORD_STRENGTH - 1083)) | (1 << (MariaDBParser.VERSION - 1083)) | (1 << (MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1083)) | (1 << (MariaDBParser.WEEKDAY - 1083)) | (1 << (MariaDBParser.WEEKOFYEAR - 1083)) | (1 << (MariaDBParser.WEIGHT_STRING - 1083)) | (1 << (MariaDBParser.WITHIN - 1083)) | (1 << (MariaDBParser.YEARWEEK - 1083)) | (1 << (MariaDBParser.Y_FUNCTION - 1083)) | (1 << (MariaDBParser.X_FUNCTION - 1083)) | (1 << (MariaDBParser.VIA - 1083)) | (1 << (MariaDBParser.LASTVAL - 1083)))) !== 0) || ((((_la - 1115)) & ~0x1F) === 0 && ((1 << (_la - 1115)) & ((1 << (MariaDBParser.NEXTVAL - 1115)) | (1 << (MariaDBParser.SETVAL - 1115)) | (1 << (MariaDBParser.PREVIOUS - 1115)) | (1 << (MariaDBParser.PERSISTENT - 1115)) | (1 << (MariaDBParser.BINLOG_MONITOR - 1115)) | (1 << (MariaDBParser.BINLOG_REPLAY - 1115)) | (1 << (MariaDBParser.FEDERATED_ADMIN - 1115)) | (1 << (MariaDBParser.READ_ONLY_ADMIN - 1115)) | (1 << (MariaDBParser.REPLICA - 1115)) | (1 << (MariaDBParser.REPLICAS - 1115)) | (1 << (MariaDBParser.REPLICATION_MASTER_ADMIN - 1115)) | (1 << (MariaDBParser.MONITOR - 1115)) | (1 << (MariaDBParser.READ_ONLY - 1115)) | (1 << (MariaDBParser.REPLAY - 1115)) | (1 << (MariaDBParser.MOD - 1115)))) !== 0) || ((((_la - 1166)) & ~0x1F) === 0 && ((1 << (_la - 1166)) & ((1 << (MariaDBParser.CHARSET_REVERSE_QOUTE_STRING - 1166)) | (1 << (MariaDBParser.STRING_LITERAL - 1166)) | (1 << (MariaDBParser.ID - 1166)))) !== 0)) {
					{
					this.state = 3323;
					_localctx._partitions = this.uidList();
					}
				}

				this.state = 3326;
				this.match(MariaDBParser.RR_BRACKET);
				}
			}

			this.state = 3345;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.SELECT:
			case MariaDBParser.VALUES:
			case MariaDBParser.VALUE:
			case MariaDBParser.LR_BRACKET:
				{
				this.state = 3333;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 451, this._ctx) ) {
				case 1:
					{
					this.state = 3329;
					this.match(MariaDBParser.LR_BRACKET);
					this.state = 3330;
					_localctx._columns = this.uidList();
					this.state = 3331;
					this.match(MariaDBParser.RR_BRACKET);
					}
					break;
				}
				this.state = 3335;
				this.insertStatementValue();
				}
				break;
			case MariaDBParser.SET:
				{
				this.state = 3336;
				this.match(MariaDBParser.SET);
				this.state = 3337;
				_localctx._setFirst = this.updatedElement();
				this.state = 3342;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 3338;
					this.match(MariaDBParser.COMMA);
					this.state = 3339;
					_localctx._updatedElement = this.updatedElement();
					_localctx._setElements.push(_localctx._updatedElement);
					}
					}
					this.state = 3344;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3359;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.ON) {
				{
				this.state = 3347;
				this.match(MariaDBParser.ON);
				this.state = 3348;
				this.match(MariaDBParser.DUPLICATE);
				this.state = 3349;
				this.match(MariaDBParser.KEY);
				this.state = 3350;
				this.match(MariaDBParser.UPDATE);
				this.state = 3351;
				_localctx._duplicatedFirst = this.updatedElement();
				this.state = 3356;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 3352;
					this.match(MariaDBParser.COMMA);
					this.state = 3353;
					_localctx._updatedElement = this.updatedElement();
					_localctx._duplicatedElements.push(_localctx._updatedElement);
					}
					}
					this.state = 3358;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public loadDataStatement(): LoadDataStatementContext {
		let _localctx: LoadDataStatementContext = new LoadDataStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 204, MariaDBParser.RULE_loadDataStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3361;
			this.match(MariaDBParser.LOAD);
			this.state = 3362;
			this.match(MariaDBParser.DATA);
			this.state = 3364;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.LOW_PRIORITY || _la === MariaDBParser.CONCURRENT) {
				{
				this.state = 3363;
				_localctx._priority = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.LOW_PRIORITY || _la === MariaDBParser.CONCURRENT)) {
					_localctx._priority = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 3367;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.LOCAL) {
				{
				this.state = 3366;
				this.match(MariaDBParser.LOCAL);
				}
			}

			this.state = 3369;
			this.match(MariaDBParser.INFILE);
			this.state = 3370;
			_localctx._filename = this.match(MariaDBParser.STRING_LITERAL);
			this.state = 3372;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.IGNORE || _la === MariaDBParser.REPLACE) {
				{
				this.state = 3371;
				_localctx._violation = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.IGNORE || _la === MariaDBParser.REPLACE)) {
					_localctx._violation = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 3374;
			this.match(MariaDBParser.INTO);
			this.state = 3375;
			this.match(MariaDBParser.TABLE);
			this.state = 3376;
			this.tableName();
			this.state = 3382;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.PARTITION) {
				{
				this.state = 3377;
				this.match(MariaDBParser.PARTITION);
				this.state = 3378;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 3379;
				this.uidList();
				this.state = 3380;
				this.match(MariaDBParser.RR_BRACKET);
				}
			}

			this.state = 3387;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.CHARACTER) {
				{
				this.state = 3384;
				this.match(MariaDBParser.CHARACTER);
				this.state = 3385;
				this.match(MariaDBParser.SET);
				this.state = 3386;
				_localctx._charset = this.charsetName();
				}
			}

			this.state = 3395;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.COLUMNS || _la === MariaDBParser.FIELDS) {
				{
				this.state = 3389;
				_localctx._fieldsFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.COLUMNS || _la === MariaDBParser.FIELDS)) {
					_localctx._fieldsFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3391;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3390;
					this.selectFieldsInto();
					}
					}
					this.state = 3393;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === MariaDBParser.ENCLOSED || _la === MariaDBParser.ESCAPED || _la === MariaDBParser.OPTIONALLY || _la === MariaDBParser.TERMINATED);
				}
			}

			this.state = 3403;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.LINES) {
				{
				this.state = 3397;
				this.match(MariaDBParser.LINES);
				this.state = 3399;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3398;
					this.selectLinesInto();
					}
					}
					this.state = 3401;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === MariaDBParser.STARTING || _la === MariaDBParser.TERMINATED);
				}
			}

			this.state = 3409;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.IGNORE) {
				{
				this.state = 3405;
				this.match(MariaDBParser.IGNORE);
				this.state = 3406;
				this.decimalLiteral();
				this.state = 3407;
				_localctx._linesFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.LINES || _la === MariaDBParser.ROWS)) {
					_localctx._linesFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 3422;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 467, this._ctx) ) {
			case 1:
				{
				this.state = 3411;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 3412;
				this.assignmentField();
				this.state = 3417;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 3413;
					this.match(MariaDBParser.COMMA);
					this.state = 3414;
					this.assignmentField();
					}
					}
					this.state = 3419;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3420;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;
			}
			this.state = 3433;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 469, this._ctx) ) {
			case 1:
				{
				this.state = 3424;
				this.match(MariaDBParser.SET);
				this.state = 3425;
				this.updatedElement();
				this.state = 3430;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 3426;
					this.match(MariaDBParser.COMMA);
					this.state = 3427;
					this.updatedElement();
					}
					}
					this.state = 3432;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public loadXmlStatement(): LoadXmlStatementContext {
		let _localctx: LoadXmlStatementContext = new LoadXmlStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 206, MariaDBParser.RULE_loadXmlStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3435;
			this.match(MariaDBParser.LOAD);
			this.state = 3436;
			this.match(MariaDBParser.XML);
			this.state = 3438;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.LOW_PRIORITY || _la === MariaDBParser.CONCURRENT) {
				{
				this.state = 3437;
				_localctx._priority = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.LOW_PRIORITY || _la === MariaDBParser.CONCURRENT)) {
					_localctx._priority = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 3441;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.LOCAL) {
				{
				this.state = 3440;
				this.match(MariaDBParser.LOCAL);
				}
			}

			this.state = 3443;
			this.match(MariaDBParser.INFILE);
			this.state = 3444;
			_localctx._filename = this.match(MariaDBParser.STRING_LITERAL);
			this.state = 3446;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.IGNORE || _la === MariaDBParser.REPLACE) {
				{
				this.state = 3445;
				_localctx._violation = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.IGNORE || _la === MariaDBParser.REPLACE)) {
					_localctx._violation = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 3448;
			this.match(MariaDBParser.INTO);
			this.state = 3449;
			this.match(MariaDBParser.TABLE);
			this.state = 3450;
			this.tableName();
			this.state = 3454;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.CHARACTER) {
				{
				this.state = 3451;
				this.match(MariaDBParser.CHARACTER);
				this.state = 3452;
				this.match(MariaDBParser.SET);
				this.state = 3453;
				_localctx._charset = this.charsetName();
				}
			}

			this.state = 3462;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.ROWS) {
				{
				this.state = 3456;
				this.match(MariaDBParser.ROWS);
				this.state = 3457;
				this.match(MariaDBParser.IDENTIFIED);
				this.state = 3458;
				this.match(MariaDBParser.BY);
				this.state = 3459;
				this.match(MariaDBParser.LESS_SYMBOL);
				this.state = 3460;
				_localctx._tag = this.match(MariaDBParser.STRING_LITERAL);
				this.state = 3461;
				this.match(MariaDBParser.GREATER_SYMBOL);
				}
			}

			this.state = 3468;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.IGNORE) {
				{
				this.state = 3464;
				this.match(MariaDBParser.IGNORE);
				this.state = 3465;
				this.decimalLiteral();
				this.state = 3466;
				_localctx._linesFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.LINES || _la === MariaDBParser.ROWS)) {
					_localctx._linesFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 3481;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 477, this._ctx) ) {
			case 1:
				{
				this.state = 3470;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 3471;
				this.assignmentField();
				this.state = 3476;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 3472;
					this.match(MariaDBParser.COMMA);
					this.state = 3473;
					this.assignmentField();
					}
					}
					this.state = 3478;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3479;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;
			}
			this.state = 3492;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 479, this._ctx) ) {
			case 1:
				{
				this.state = 3483;
				this.match(MariaDBParser.SET);
				this.state = 3484;
				this.updatedElement();
				this.state = 3489;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 3485;
					this.match(MariaDBParser.COMMA);
					this.state = 3486;
					this.updatedElement();
					}
					}
					this.state = 3491;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public replaceStatement(): ReplaceStatementContext {
		let _localctx: ReplaceStatementContext = new ReplaceStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 208, MariaDBParser.RULE_replaceStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3494;
			this.match(MariaDBParser.REPLACE);
			this.state = 3496;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.DELAYED || _la === MariaDBParser.LOW_PRIORITY) {
				{
				this.state = 3495;
				_localctx._priority = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.DELAYED || _la === MariaDBParser.LOW_PRIORITY)) {
					_localctx._priority = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 3499;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.INTO) {
				{
				this.state = 3498;
				this.match(MariaDBParser.INTO);
				}
			}

			this.state = 3501;
			this.tableName();
			this.state = 3507;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.PARTITION) {
				{
				this.state = 3502;
				this.match(MariaDBParser.PARTITION);
				this.state = 3503;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 3504;
				_localctx._partitions = this.uidList();
				this.state = 3505;
				this.match(MariaDBParser.RR_BRACKET);
				}
			}

			this.state = 3525;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.SELECT:
			case MariaDBParser.VALUES:
			case MariaDBParser.VALUE:
			case MariaDBParser.LR_BRACKET:
				{
				this.state = 3513;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 483, this._ctx) ) {
				case 1:
					{
					this.state = 3509;
					this.match(MariaDBParser.LR_BRACKET);
					this.state = 3510;
					_localctx._columns = this.uidList();
					this.state = 3511;
					this.match(MariaDBParser.RR_BRACKET);
					}
					break;
				}
				this.state = 3515;
				this.insertStatementValue();
				}
				break;
			case MariaDBParser.SET:
				{
				this.state = 3516;
				this.match(MariaDBParser.SET);
				this.state = 3517;
				_localctx._setFirst = this.updatedElement();
				this.state = 3522;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 3518;
					this.match(MariaDBParser.COMMA);
					this.state = 3519;
					_localctx._updatedElement = this.updatedElement();
					_localctx._setElements.push(_localctx._updatedElement);
					}
					}
					this.state = 3524;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectStatement(): SelectStatementContext {
		let _localctx: SelectStatementContext = new SelectStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 210, MariaDBParser.RULE_selectStatement);
		let _la: number;
		try {
			let _alt: number;
			this.state = 3589;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 502, this._ctx) ) {
			case 1:
				_localctx = new SimpleSelectContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3527;
				this.querySpecification();
				this.state = 3529;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 486, this._ctx) ) {
				case 1:
					{
					this.state = 3528;
					this.lockClause();
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new ParenthesisSelectContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3531;
				this.queryExpression();
				this.state = 3533;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 487, this._ctx) ) {
				case 1:
					{
					this.state = 3532;
					this.lockClause();
					}
					break;
				}
				}
				break;

			case 3:
				_localctx = new UnionSelectContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3535;
				this.querySpecificationNointo();
				this.state = 3537;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 3536;
						this.unionStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 3539;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 488, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 3549;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.UNION) {
					{
					this.state = 3541;
					this.match(MariaDBParser.UNION);
					this.state = 3543;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MariaDBParser.ALL || _la === MariaDBParser.DISTINCT) {
						{
						this.state = 3542;
						(_localctx as UnionSelectContext)._unionType = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === MariaDBParser.ALL || _la === MariaDBParser.DISTINCT)) {
							(_localctx as UnionSelectContext)._unionType = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
					}

					this.state = 3547;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case MariaDBParser.SELECT:
						{
						this.state = 3545;
						this.querySpecification();
						}
						break;
					case MariaDBParser.LR_BRACKET:
						{
						this.state = 3546;
						this.queryExpression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				this.state = 3552;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 492, this._ctx) ) {
				case 1:
					{
					this.state = 3551;
					this.orderByClause();
					}
					break;
				}
				this.state = 3555;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.LIMIT) {
					{
					this.state = 3554;
					this.limitClause();
					}
				}

				this.state = 3558;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 494, this._ctx) ) {
				case 1:
					{
					this.state = 3557;
					this.lockClause();
					}
					break;
				}
				}
				break;

			case 4:
				_localctx = new UnionParenthesisSelectContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3560;
				this.queryExpressionNointo();
				this.state = 3562;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 3561;
						this.unionParenthesis();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 3564;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 495, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 3571;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.UNION) {
					{
					this.state = 3566;
					this.match(MariaDBParser.UNION);
					this.state = 3568;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MariaDBParser.ALL || _la === MariaDBParser.DISTINCT) {
						{
						this.state = 3567;
						(_localctx as UnionParenthesisSelectContext)._unionType = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === MariaDBParser.ALL || _la === MariaDBParser.DISTINCT)) {
							(_localctx as UnionParenthesisSelectContext)._unionType = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
					}

					this.state = 3570;
					this.queryExpression();
					}
				}

				this.state = 3574;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 498, this._ctx) ) {
				case 1:
					{
					this.state = 3573;
					this.orderByClause();
					}
					break;
				}
				this.state = 3577;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.LIMIT) {
					{
					this.state = 3576;
					this.limitClause();
					}
				}

				this.state = 3580;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 500, this._ctx) ) {
				case 1:
					{
					this.state = 3579;
					this.lockClause();
					}
					break;
				}
				}
				break;

			case 5:
				_localctx = new WithLateralStatementContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3582;
				this.querySpecificationNointo();
				this.state = 3585;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3583;
					this.match(MariaDBParser.COMMA);
					this.state = 3584;
					this.lateralStatement();
					}
					}
					this.state = 3587;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === MariaDBParser.COMMA);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public updateStatement(): UpdateStatementContext {
		let _localctx: UpdateStatementContext = new UpdateStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 212, MariaDBParser.RULE_updateStatement);
		try {
			this.state = 3593;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 503, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3591;
				this.singleUpdateStatement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3592;
				this.multipleUpdateStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public valuesStatement(): ValuesStatementContext {
		let _localctx: ValuesStatementContext = new ValuesStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 214, MariaDBParser.RULE_valuesStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3595;
			this.match(MariaDBParser.VALUES);
			this.state = 3596;
			this.match(MariaDBParser.LR_BRACKET);
			this.state = 3598;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 504, this._ctx) ) {
			case 1:
				{
				this.state = 3597;
				this.expressionsWithDefaults();
				}
				break;
			}
			this.state = 3600;
			this.match(MariaDBParser.RR_BRACKET);
			this.state = 3609;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.COMMA) {
				{
				{
				this.state = 3601;
				this.match(MariaDBParser.COMMA);
				this.state = 3602;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 3604;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 505, this._ctx) ) {
				case 1:
					{
					this.state = 3603;
					this.expressionsWithDefaults();
					}
					break;
				}
				this.state = 3606;
				this.match(MariaDBParser.RR_BRACKET);
				}
				}
				this.state = 3611;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public insertStatementValue(): InsertStatementValueContext {
		let _localctx: InsertStatementValueContext = new InsertStatementValueContext(this._ctx, this.state);
		this.enterRule(_localctx, 216, MariaDBParser.RULE_insertStatementValue);
		let _la: number;
		try {
			this.state = 3630;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.SELECT:
			case MariaDBParser.LR_BRACKET:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3612;
				this.selectStatement();
				}
				break;
			case MariaDBParser.VALUES:
			case MariaDBParser.VALUE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3613;
				_localctx._insertFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.VALUES || _la === MariaDBParser.VALUE)) {
					_localctx._insertFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3614;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 3616;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 507, this._ctx) ) {
				case 1:
					{
					this.state = 3615;
					this.expressionsWithDefaults();
					}
					break;
				}
				this.state = 3618;
				this.match(MariaDBParser.RR_BRACKET);
				this.state = 3627;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 3619;
					this.match(MariaDBParser.COMMA);
					this.state = 3620;
					this.match(MariaDBParser.LR_BRACKET);
					this.state = 3622;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 508, this._ctx) ) {
					case 1:
						{
						this.state = 3621;
						this.expressionsWithDefaults();
						}
						break;
					}
					this.state = 3624;
					this.match(MariaDBParser.RR_BRACKET);
					}
					}
					this.state = 3629;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public updatedElement(): UpdatedElementContext {
		let _localctx: UpdatedElementContext = new UpdatedElementContext(this._ctx, this.state);
		this.enterRule(_localctx, 218, MariaDBParser.RULE_updatedElement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3632;
			this.fullColumnName();
			this.state = 3633;
			this.match(MariaDBParser.EQUAL_SYMBOL);
			this.state = 3636;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 511, this._ctx) ) {
			case 1:
				{
				this.state = 3634;
				this.expression(0);
				}
				break;

			case 2:
				{
				this.state = 3635;
				this.match(MariaDBParser.DEFAULT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public assignmentField(): AssignmentFieldContext {
		let _localctx: AssignmentFieldContext = new AssignmentFieldContext(this._ctx, this.state);
		this.enterRule(_localctx, 220, MariaDBParser.RULE_assignmentField);
		try {
			this.state = 3640;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.ATTRIBUTE:
			case MariaDBParser.BODY:
			case MariaDBParser.BUCKETS:
			case MariaDBParser.CONDITION:
			case MariaDBParser.CURRENT:
			case MariaDBParser.CURRENT_ROLE:
			case MariaDBParser.CURRENT_USER:
			case MariaDBParser.DATABASE:
			case MariaDBParser.DEFAULT:
			case MariaDBParser.DIAGNOSTICS:
			case MariaDBParser.EMPTY:
			case MariaDBParser.EXCEPT:
			case MariaDBParser.GROUP:
			case MariaDBParser.IF:
			case MariaDBParser.IGNORED:
			case MariaDBParser.INSERT:
			case MariaDBParser.LATERAL:
			case MariaDBParser.LEFT:
			case MariaDBParser.LOCKED:
			case MariaDBParser.MAXVALUE:
			case MariaDBParser.MINVALUE:
			case MariaDBParser.NUMBER:
			case MariaDBParser.OPTIONAL:
			case MariaDBParser.ORDER:
			case MariaDBParser.PRIMARY:
			case MariaDBParser.PACKAGE:
			case MariaDBParser.REPLACE:
			case MariaDBParser.RIGHT:
			case MariaDBParser.SCHEMA:
			case MariaDBParser.SKIP_:
			case MariaDBParser.STACKED:
			case MariaDBParser.STATEMENT:
			case MariaDBParser.DATE:
			case MariaDBParser.TIME:
			case MariaDBParser.TIMESTAMP:
			case MariaDBParser.DATETIME:
			case MariaDBParser.YEAR:
			case MariaDBParser.BINARY:
			case MariaDBParser.TEXT:
			case MariaDBParser.ENUM:
			case MariaDBParser.SERIAL:
			case MariaDBParser.JSON_ARRAY:
			case MariaDBParser.JSON_ARRAYAGG:
			case MariaDBParser.JSON_ARRAY_APPEND:
			case MariaDBParser.JSON_ARRAY_INSERT:
			case MariaDBParser.JSON_CONTAINS:
			case MariaDBParser.JSON_CONTAINS_PATH:
			case MariaDBParser.JSON_DEPTH:
			case MariaDBParser.JSON_EXTRACT:
			case MariaDBParser.JSON_INSERT:
			case MariaDBParser.JSON_KEYS:
			case MariaDBParser.JSON_LENGTH:
			case MariaDBParser.JSON_MERGE:
			case MariaDBParser.JSON_MERGE_PATCH:
			case MariaDBParser.JSON_MERGE_PRESERVE:
			case MariaDBParser.JSON_OBJECT:
			case MariaDBParser.JSON_OBJECTAGG:
			case MariaDBParser.JSON_OVERLAPS:
			case MariaDBParser.JSON_PRETTY:
			case MariaDBParser.JSON_QUOTE:
			case MariaDBParser.JSON_REMOVE:
			case MariaDBParser.JSON_REPLACE:
			case MariaDBParser.JSON_SCHEMA_VALID:
			case MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT:
			case MariaDBParser.JSON_SEARCH:
			case MariaDBParser.JSON_SET:
			case MariaDBParser.JSON_STORAGE_FREE:
			case MariaDBParser.JSON_STORAGE_SIZE:
			case MariaDBParser.JSON_TABLE:
			case MariaDBParser.JSON_TYPE:
			case MariaDBParser.JSON_UNQUOTE:
			case MariaDBParser.JSON_VALID:
			case MariaDBParser.JSON_VALUE:
			case MariaDBParser.NESTED:
			case MariaDBParser.ORDINALITY:
			case MariaDBParser.PATH:
			case MariaDBParser.AVG:
			case MariaDBParser.BIT_AND:
			case MariaDBParser.BIT_OR:
			case MariaDBParser.BIT_XOR:
			case MariaDBParser.COUNT:
			case MariaDBParser.CUME_DIST:
			case MariaDBParser.DENSE_RANK:
			case MariaDBParser.FIRST_VALUE:
			case MariaDBParser.GROUP_CONCAT:
			case MariaDBParser.LAG:
			case MariaDBParser.LAST_VALUE:
			case MariaDBParser.LEAD:
			case MariaDBParser.MAX:
			case MariaDBParser.MIN:
			case MariaDBParser.NTILE:
			case MariaDBParser.NTH_VALUE:
			case MariaDBParser.PERCENT_RANK:
			case MariaDBParser.RANK:
			case MariaDBParser.ROW_NUMBER:
			case MariaDBParser.STD:
			case MariaDBParser.STDDEV:
			case MariaDBParser.STDDEV_POP:
			case MariaDBParser.STDDEV_SAMP:
			case MariaDBParser.SUM:
			case MariaDBParser.VAR_POP:
			case MariaDBParser.VAR_SAMP:
			case MariaDBParser.VARIANCE:
			case MariaDBParser.CURRENT_DATE:
			case MariaDBParser.CURRENT_TIME:
			case MariaDBParser.CURRENT_TIMESTAMP:
			case MariaDBParser.LOCALTIME:
			case MariaDBParser.CURDATE:
			case MariaDBParser.CURTIME:
			case MariaDBParser.DATE_ADD:
			case MariaDBParser.DATE_SUB:
			case MariaDBParser.LOCALTIMESTAMP:
			case MariaDBParser.NOW:
			case MariaDBParser.POSITION:
			case MariaDBParser.SUBSTR:
			case MariaDBParser.SUBSTRING:
			case MariaDBParser.SYSDATE:
			case MariaDBParser.TRIM:
			case MariaDBParser.UTC_DATE:
			case MariaDBParser.UTC_TIME:
			case MariaDBParser.UTC_TIMESTAMP:
			case MariaDBParser.ACCOUNT:
			case MariaDBParser.ACTION:
			case MariaDBParser.AFTER:
			case MariaDBParser.AGGREGATE:
			case MariaDBParser.ALGORITHM:
			case MariaDBParser.ANY:
			case MariaDBParser.AT:
			case MariaDBParser.AUTHORS:
			case MariaDBParser.AUTOCOMMIT:
			case MariaDBParser.AUTOEXTEND_SIZE:
			case MariaDBParser.AUTO_INCREMENT:
			case MariaDBParser.AVG_ROW_LENGTH:
			case MariaDBParser.BEGIN:
			case MariaDBParser.BINLOG:
			case MariaDBParser.BIT:
			case MariaDBParser.BLOCK:
			case MariaDBParser.BOOL:
			case MariaDBParser.BOOLEAN:
			case MariaDBParser.BTREE:
			case MariaDBParser.CACHE:
			case MariaDBParser.CASCADED:
			case MariaDBParser.CHAIN:
			case MariaDBParser.CHANGED:
			case MariaDBParser.CHANNEL:
			case MariaDBParser.CHECKSUM:
			case MariaDBParser.PAGE_CHECKSUM:
			case MariaDBParser.CIPHER:
			case MariaDBParser.CLASS_ORIGIN:
			case MariaDBParser.CLIENT:
			case MariaDBParser.CLOSE:
			case MariaDBParser.CLUSTERING:
			case MariaDBParser.COALESCE:
			case MariaDBParser.CODE:
			case MariaDBParser.COLUMNS:
			case MariaDBParser.COLUMN_FORMAT:
			case MariaDBParser.COLUMN_NAME:
			case MariaDBParser.COMMENT:
			case MariaDBParser.COMMIT:
			case MariaDBParser.COMPACT:
			case MariaDBParser.COMPLETION:
			case MariaDBParser.COMPRESSED:
			case MariaDBParser.COMPRESSION:
			case MariaDBParser.CONCURRENT:
			case MariaDBParser.CONNECT:
			case MariaDBParser.CONNECTION:
			case MariaDBParser.CONSISTENT:
			case MariaDBParser.CONSTRAINT_CATALOG:
			case MariaDBParser.CONSTRAINT_SCHEMA:
			case MariaDBParser.CONSTRAINT_NAME:
			case MariaDBParser.CONTAINS:
			case MariaDBParser.CONTEXT:
			case MariaDBParser.CONTRIBUTORS:
			case MariaDBParser.COPY:
			case MariaDBParser.CPU:
			case MariaDBParser.CYCLE:
			case MariaDBParser.CURSOR_NAME:
			case MariaDBParser.DATA:
			case MariaDBParser.DATAFILE:
			case MariaDBParser.DEALLOCATE:
			case MariaDBParser.DEFAULT_AUTH:
			case MariaDBParser.DEFINER:
			case MariaDBParser.DELAY_KEY_WRITE:
			case MariaDBParser.DES_KEY_FILE:
			case MariaDBParser.DIRECTORY:
			case MariaDBParser.DISABLE:
			case MariaDBParser.DISCARD:
			case MariaDBParser.DISK:
			case MariaDBParser.DO:
			case MariaDBParser.DUMPFILE:
			case MariaDBParser.DUPLICATE:
			case MariaDBParser.DYNAMIC:
			case MariaDBParser.ENABLE:
			case MariaDBParser.ENCRYPTED:
			case MariaDBParser.ENCRYPTION:
			case MariaDBParser.ENCRYPTION_KEY_ID:
			case MariaDBParser.END:
			case MariaDBParser.ENDS:
			case MariaDBParser.ENGINE:
			case MariaDBParser.ENGINES:
			case MariaDBParser.ERROR:
			case MariaDBParser.ERRORS:
			case MariaDBParser.ESCAPE:
			case MariaDBParser.EVEN:
			case MariaDBParser.EVENT:
			case MariaDBParser.EVENTS:
			case MariaDBParser.EVERY:
			case MariaDBParser.EXCHANGE:
			case MariaDBParser.EXCLUSIVE:
			case MariaDBParser.EXPIRE:
			case MariaDBParser.EXPORT:
			case MariaDBParser.EXTENDED:
			case MariaDBParser.EXTENT_SIZE:
			case MariaDBParser.FAILED_LOGIN_ATTEMPTS:
			case MariaDBParser.FAST:
			case MariaDBParser.FAULTS:
			case MariaDBParser.FIELDS:
			case MariaDBParser.FILE_BLOCK_SIZE:
			case MariaDBParser.FILTER:
			case MariaDBParser.FIRST:
			case MariaDBParser.FIXED:
			case MariaDBParser.FLUSH:
			case MariaDBParser.FOLLOWS:
			case MariaDBParser.FOUND:
			case MariaDBParser.FULL:
			case MariaDBParser.FUNCTION:
			case MariaDBParser.GENERAL:
			case MariaDBParser.GLOBAL:
			case MariaDBParser.GRANTS:
			case MariaDBParser.GROUP_REPLICATION:
			case MariaDBParser.HANDLER:
			case MariaDBParser.HASH:
			case MariaDBParser.HELP:
			case MariaDBParser.HISTORY:
			case MariaDBParser.HOST:
			case MariaDBParser.HOSTS:
			case MariaDBParser.IDENTIFIED:
			case MariaDBParser.IGNORE_SERVER_IDS:
			case MariaDBParser.IMPORT:
			case MariaDBParser.INCREMENT:
			case MariaDBParser.INDEXES:
			case MariaDBParser.INITIAL_SIZE:
			case MariaDBParser.INPLACE:
			case MariaDBParser.INSERT_METHOD:
			case MariaDBParser.INSTALL:
			case MariaDBParser.INSTANCE:
			case MariaDBParser.INSTANT:
			case MariaDBParser.INVISIBLE:
			case MariaDBParser.INVOKER:
			case MariaDBParser.IO:
			case MariaDBParser.IO_THREAD:
			case MariaDBParser.IPC:
			case MariaDBParser.ISOLATION:
			case MariaDBParser.ISSUER:
			case MariaDBParser.JSON:
			case MariaDBParser.KEY_BLOCK_SIZE:
			case MariaDBParser.LANGUAGE:
			case MariaDBParser.LAST:
			case MariaDBParser.LEAVES:
			case MariaDBParser.LESS:
			case MariaDBParser.LEVEL:
			case MariaDBParser.LIST:
			case MariaDBParser.LOCAL:
			case MariaDBParser.LOCALES:
			case MariaDBParser.LOGFILE:
			case MariaDBParser.LOGS:
			case MariaDBParser.MASTER:
			case MariaDBParser.MASTER_AUTO_POSITION:
			case MariaDBParser.MASTER_CONNECT_RETRY:
			case MariaDBParser.MASTER_DELAY:
			case MariaDBParser.MASTER_HEARTBEAT_PERIOD:
			case MariaDBParser.MASTER_HOST:
			case MariaDBParser.MASTER_LOG_FILE:
			case MariaDBParser.MASTER_LOG_POS:
			case MariaDBParser.MASTER_PASSWORD:
			case MariaDBParser.MASTER_PORT:
			case MariaDBParser.MASTER_RETRY_COUNT:
			case MariaDBParser.MASTER_SSL:
			case MariaDBParser.MASTER_SSL_CA:
			case MariaDBParser.MASTER_SSL_CAPATH:
			case MariaDBParser.MASTER_SSL_CERT:
			case MariaDBParser.MASTER_SSL_CIPHER:
			case MariaDBParser.MASTER_SSL_CRL:
			case MariaDBParser.MASTER_SSL_CRLPATH:
			case MariaDBParser.MASTER_SSL_KEY:
			case MariaDBParser.MASTER_TLS_VERSION:
			case MariaDBParser.MASTER_USER:
			case MariaDBParser.MAX_CONNECTIONS_PER_HOUR:
			case MariaDBParser.MAX_QUERIES_PER_HOUR:
			case MariaDBParser.MAX_ROWS:
			case MariaDBParser.MAX_SIZE:
			case MariaDBParser.MAX_UPDATES_PER_HOUR:
			case MariaDBParser.MAX_USER_CONNECTIONS:
			case MariaDBParser.MEDIUM:
			case MariaDBParser.MEMBER:
			case MariaDBParser.MERGE:
			case MariaDBParser.MESSAGE_TEXT:
			case MariaDBParser.MID:
			case MariaDBParser.MIGRATE:
			case MariaDBParser.MIN_ROWS:
			case MariaDBParser.MODE:
			case MariaDBParser.MODIFY:
			case MariaDBParser.MUTEX:
			case MariaDBParser.MYSQL:
			case MariaDBParser.MYSQL_ERRNO:
			case MariaDBParser.NAME:
			case MariaDBParser.NAMES:
			case MariaDBParser.NCHAR:
			case MariaDBParser.NEVER:
			case MariaDBParser.NEXT:
			case MariaDBParser.NO:
			case MariaDBParser.NOCACHE:
			case MariaDBParser.NOCOPY:
			case MariaDBParser.NOCYCLE:
			case MariaDBParser.NOMAXVALUE:
			case MariaDBParser.NOMINVALUE:
			case MariaDBParser.NOWAIT:
			case MariaDBParser.NODEGROUP:
			case MariaDBParser.NONE:
			case MariaDBParser.ODBC:
			case MariaDBParser.OFFLINE:
			case MariaDBParser.OFFSET:
			case MariaDBParser.OF:
			case MariaDBParser.OJ:
			case MariaDBParser.OLD_PASSWORD:
			case MariaDBParser.ONE:
			case MariaDBParser.ONLINE:
			case MariaDBParser.ONLY:
			case MariaDBParser.OPEN:
			case MariaDBParser.OPTIMIZER_COSTS:
			case MariaDBParser.OPTIONS:
			case MariaDBParser.OWNER:
			case MariaDBParser.PACK_KEYS:
			case MariaDBParser.PAGE:
			case MariaDBParser.PARSER:
			case MariaDBParser.PARTIAL:
			case MariaDBParser.PARTITIONING:
			case MariaDBParser.PARTITIONS:
			case MariaDBParser.PASSWORD:
			case MariaDBParser.PASSWORD_LOCK_TIME:
			case MariaDBParser.PHASE:
			case MariaDBParser.PLUGIN:
			case MariaDBParser.PLUGIN_DIR:
			case MariaDBParser.PLUGINS:
			case MariaDBParser.PORT:
			case MariaDBParser.PRECEDES:
			case MariaDBParser.PREPARE:
			case MariaDBParser.PRESERVE:
			case MariaDBParser.PREV:
			case MariaDBParser.PROCESSLIST:
			case MariaDBParser.PROFILE:
			case MariaDBParser.PROFILES:
			case MariaDBParser.PROXY:
			case MariaDBParser.QUERY:
			case MariaDBParser.QUERY_RESPONSE_TIME:
			case MariaDBParser.QUICK:
			case MariaDBParser.REBUILD:
			case MariaDBParser.RECOVER:
			case MariaDBParser.RECURSIVE:
			case MariaDBParser.REDO_BUFFER_SIZE:
			case MariaDBParser.REDUNDANT:
			case MariaDBParser.RELAY:
			case MariaDBParser.RELAY_LOG_FILE:
			case MariaDBParser.RELAY_LOG_POS:
			case MariaDBParser.RELAYLOG:
			case MariaDBParser.REMOVE:
			case MariaDBParser.REORGANIZE:
			case MariaDBParser.REPAIR:
			case MariaDBParser.REPLICATE_DO_DB:
			case MariaDBParser.REPLICATE_DO_TABLE:
			case MariaDBParser.REPLICATE_IGNORE_DB:
			case MariaDBParser.REPLICATE_IGNORE_TABLE:
			case MariaDBParser.REPLICATE_REWRITE_DB:
			case MariaDBParser.REPLICATE_WILD_DO_TABLE:
			case MariaDBParser.REPLICATE_WILD_IGNORE_TABLE:
			case MariaDBParser.REPLICATION:
			case MariaDBParser.RESET:
			case MariaDBParser.RESTART:
			case MariaDBParser.RESUME:
			case MariaDBParser.RETURNED_SQLSTATE:
			case MariaDBParser.RETURNS:
			case MariaDBParser.REUSE:
			case MariaDBParser.ROLE:
			case MariaDBParser.ROLLBACK:
			case MariaDBParser.ROLLUP:
			case MariaDBParser.ROTATE:
			case MariaDBParser.ROW:
			case MariaDBParser.ROWS:
			case MariaDBParser.ROW_FORMAT:
			case MariaDBParser.RTREE:
			case MariaDBParser.SAVEPOINT:
			case MariaDBParser.SCHEDULE:
			case MariaDBParser.SECURITY:
			case MariaDBParser.SEQUENCE:
			case MariaDBParser.SERVER:
			case MariaDBParser.SESSION:
			case MariaDBParser.SHARE:
			case MariaDBParser.SHARED:
			case MariaDBParser.SIGNED:
			case MariaDBParser.SIMPLE:
			case MariaDBParser.SLAVE:
			case MariaDBParser.SLAVES:
			case MariaDBParser.SLOW:
			case MariaDBParser.SNAPSHOT:
			case MariaDBParser.SOCKET:
			case MariaDBParser.SOME:
			case MariaDBParser.SONAME:
			case MariaDBParser.SOUNDS:
			case MariaDBParser.SOURCE:
			case MariaDBParser.SQL_AFTER_GTIDS:
			case MariaDBParser.SQL_AFTER_MTS_GAPS:
			case MariaDBParser.SQL_BEFORE_GTIDS:
			case MariaDBParser.SQL_BUFFER_RESULT:
			case MariaDBParser.SQL_CACHE:
			case MariaDBParser.SQL_NO_CACHE:
			case MariaDBParser.SQL_THREAD:
			case MariaDBParser.START:
			case MariaDBParser.STARTS:
			case MariaDBParser.STATS_AUTO_RECALC:
			case MariaDBParser.STATS_PERSISTENT:
			case MariaDBParser.STATS_SAMPLE_PAGES:
			case MariaDBParser.STATUS:
			case MariaDBParser.STOP:
			case MariaDBParser.STORAGE:
			case MariaDBParser.STRING:
			case MariaDBParser.SUBCLASS_ORIGIN:
			case MariaDBParser.SUBJECT:
			case MariaDBParser.SUBPARTITION:
			case MariaDBParser.SUBPARTITIONS:
			case MariaDBParser.SUSPEND:
			case MariaDBParser.SWAPS:
			case MariaDBParser.SWITCHES:
			case MariaDBParser.TABLE_NAME:
			case MariaDBParser.TABLESPACE:
			case MariaDBParser.TABLE_TYPE:
			case MariaDBParser.TEMPORARY:
			case MariaDBParser.TEMPTABLE:
			case MariaDBParser.THAN:
			case MariaDBParser.TRADITIONAL:
			case MariaDBParser.TRANSACTION:
			case MariaDBParser.TRANSACTIONAL:
			case MariaDBParser.TRIGGERS:
			case MariaDBParser.TRUNCATE:
			case MariaDBParser.TYPES:
			case MariaDBParser.UNBOUNDED:
			case MariaDBParser.UNDEFINED:
			case MariaDBParser.UNDOFILE:
			case MariaDBParser.UNDO_BUFFER_SIZE:
			case MariaDBParser.UNINSTALL:
			case MariaDBParser.UNKNOWN:
			case MariaDBParser.UNTIL:
			case MariaDBParser.UPGRADE:
			case MariaDBParser.USER:
			case MariaDBParser.USE_FRM:
			case MariaDBParser.USER_RESOURCES:
			case MariaDBParser.VALIDATION:
			case MariaDBParser.VALUE:
			case MariaDBParser.VARIABLES:
			case MariaDBParser.VIEW:
			case MariaDBParser.VIRTUAL:
			case MariaDBParser.VISIBLE:
			case MariaDBParser.WAIT:
			case MariaDBParser.WARNINGS:
			case MariaDBParser.WITHOUT:
			case MariaDBParser.WORK:
			case MariaDBParser.WRAPPER:
			case MariaDBParser.WSREP_MEMBERSHIP:
			case MariaDBParser.WSREP_STATUS:
			case MariaDBParser.X509:
			case MariaDBParser.XA:
			case MariaDBParser.XML:
			case MariaDBParser.EUR:
			case MariaDBParser.USA:
			case MariaDBParser.JIS:
			case MariaDBParser.ISO:
			case MariaDBParser.INTERNAL:
			case MariaDBParser.QUARTER:
			case MariaDBParser.MONTH:
			case MariaDBParser.DAY:
			case MariaDBParser.HOUR:
			case MariaDBParser.MINUTE:
			case MariaDBParser.WEEK:
			case MariaDBParser.SECOND:
			case MariaDBParser.MICROSECOND:
			case MariaDBParser.USER_STATISTICS:
			case MariaDBParser.CLIENT_STATISTICS:
			case MariaDBParser.INDEX_STATISTICS:
			case MariaDBParser.TABLE_STATISTICS:
			case MariaDBParser.ADMIN:
			case MariaDBParser.AUDIT_ADMIN:
			case MariaDBParser.BACKUP_ADMIN:
			case MariaDBParser.BINLOG_ADMIN:
			case MariaDBParser.BINLOG_ENCRYPTION_ADMIN:
			case MariaDBParser.CLONE_ADMIN:
			case MariaDBParser.CONNECTION_ADMIN:
			case MariaDBParser.ENCRYPTION_KEY_ADMIN:
			case MariaDBParser.EXECUTE:
			case MariaDBParser.FILE:
			case MariaDBParser.FIREWALL_ADMIN:
			case MariaDBParser.FIREWALL_USER:
			case MariaDBParser.GROUP_REPLICATION_ADMIN:
			case MariaDBParser.INNODB_REDO_LOG_ARCHIVE:
			case MariaDBParser.INVOKE:
			case MariaDBParser.LAMBDA:
			case MariaDBParser.NDB_STORED_USER:
			case MariaDBParser.PASSWORDLESS_USER_ADMIN:
			case MariaDBParser.PERSIST_RO_VARIABLES_ADMIN:
			case MariaDBParser.PRIVILEGES:
			case MariaDBParser.PROCESS:
			case MariaDBParser.RELOAD:
			case MariaDBParser.REPLICATION_APPLIER:
			case MariaDBParser.REPLICATION_SLAVE_ADMIN:
			case MariaDBParser.RESOURCE_GROUP_ADMIN:
			case MariaDBParser.RESOURCE_GROUP_USER:
			case MariaDBParser.ROLE_ADMIN:
			case MariaDBParser.ROUTINE:
			case MariaDBParser.S3:
			case MariaDBParser.SESSION_VARIABLES_ADMIN:
			case MariaDBParser.SET_USER_ID:
			case MariaDBParser.SHOW_ROUTINE:
			case MariaDBParser.SHUTDOWN:
			case MariaDBParser.SUPER:
			case MariaDBParser.SYSTEM_VARIABLES_ADMIN:
			case MariaDBParser.TABLES:
			case MariaDBParser.TABLE_ENCRYPTION_ADMIN:
			case MariaDBParser.VERSION_TOKEN_ADMIN:
			case MariaDBParser.XA_RECOVER_ADMIN:
			case MariaDBParser.ARMSCII8:
			case MariaDBParser.ASCII:
			case MariaDBParser.BIG5:
			case MariaDBParser.CP1250:
			case MariaDBParser.CP1251:
			case MariaDBParser.CP1256:
			case MariaDBParser.CP1257:
			case MariaDBParser.CP850:
			case MariaDBParser.CP852:
			case MariaDBParser.CP866:
			case MariaDBParser.CP932:
			case MariaDBParser.DEC8:
			case MariaDBParser.EUCJPMS:
			case MariaDBParser.EUCKR:
			case MariaDBParser.GB18030:
			case MariaDBParser.GB2312:
			case MariaDBParser.GBK:
			case MariaDBParser.GEOSTD8:
			case MariaDBParser.GREEK:
			case MariaDBParser.HEBREW:
			case MariaDBParser.HP8:
			case MariaDBParser.KEYBCS2:
			case MariaDBParser.KOI8R:
			case MariaDBParser.KOI8U:
			case MariaDBParser.LATIN1:
			case MariaDBParser.LATIN2:
			case MariaDBParser.LATIN5:
			case MariaDBParser.LATIN7:
			case MariaDBParser.MACCE:
			case MariaDBParser.MACROMAN:
			case MariaDBParser.SJIS:
			case MariaDBParser.SWE7:
			case MariaDBParser.TIS620:
			case MariaDBParser.UCS2:
			case MariaDBParser.UJIS:
			case MariaDBParser.UTF16:
			case MariaDBParser.UTF16LE:
			case MariaDBParser.UTF32:
			case MariaDBParser.UTF8:
			case MariaDBParser.UTF8MB3:
			case MariaDBParser.UTF8MB4:
			case MariaDBParser.ARCHIVE:
			case MariaDBParser.BLACKHOLE:
			case MariaDBParser.CSV:
			case MariaDBParser.FEDERATED:
			case MariaDBParser.INNODB:
			case MariaDBParser.MEMORY:
			case MariaDBParser.MRG_MYISAM:
			case MariaDBParser.MYISAM:
			case MariaDBParser.NDB:
			case MariaDBParser.NDBCLUSTER:
			case MariaDBParser.PERFORMANCE_SCHEMA:
			case MariaDBParser.TOKUDB:
			case MariaDBParser.REPEATABLE:
			case MariaDBParser.COMMITTED:
			case MariaDBParser.UNCOMMITTED:
			case MariaDBParser.SERIALIZABLE:
			case MariaDBParser.GEOMETRYCOLLECTION:
			case MariaDBParser.LINESTRING:
			case MariaDBParser.MULTILINESTRING:
			case MariaDBParser.MULTIPOINT:
			case MariaDBParser.MULTIPOLYGON:
			case MariaDBParser.POINT:
			case MariaDBParser.POLYGON:
			case MariaDBParser.ABS:
			case MariaDBParser.ACOS:
			case MariaDBParser.ADDDATE:
			case MariaDBParser.ADDTIME:
			case MariaDBParser.AES_DECRYPT:
			case MariaDBParser.AES_ENCRYPT:
			case MariaDBParser.AREA:
			case MariaDBParser.ASBINARY:
			case MariaDBParser.ASIN:
			case MariaDBParser.ASTEXT:
			case MariaDBParser.ASWKB:
			case MariaDBParser.ASWKT:
			case MariaDBParser.ASYMMETRIC_DECRYPT:
			case MariaDBParser.ASYMMETRIC_DERIVE:
			case MariaDBParser.ASYMMETRIC_ENCRYPT:
			case MariaDBParser.ASYMMETRIC_SIGN:
			case MariaDBParser.ASYMMETRIC_VERIFY:
			case MariaDBParser.ATAN:
			case MariaDBParser.ATAN2:
			case MariaDBParser.BENCHMARK:
			case MariaDBParser.BIN:
			case MariaDBParser.BIT_COUNT:
			case MariaDBParser.BIT_LENGTH:
			case MariaDBParser.BUFFER:
			case MariaDBParser.CATALOG_NAME:
			case MariaDBParser.CEIL:
			case MariaDBParser.CEILING:
			case MariaDBParser.CENTROID:
			case MariaDBParser.CHARACTER_LENGTH:
			case MariaDBParser.CHARSET:
			case MariaDBParser.CHAR_LENGTH:
			case MariaDBParser.COERCIBILITY:
			case MariaDBParser.COLLATION:
			case MariaDBParser.COMPRESS:
			case MariaDBParser.CONCAT:
			case MariaDBParser.CONCAT_WS:
			case MariaDBParser.CONNECTION_ID:
			case MariaDBParser.CONV:
			case MariaDBParser.CONVERT_TZ:
			case MariaDBParser.COS:
			case MariaDBParser.COT:
			case MariaDBParser.CRC32:
			case MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY:
			case MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY:
			case MariaDBParser.CREATE_DH_PARAMETERS:
			case MariaDBParser.CREATE_DIGEST:
			case MariaDBParser.CROSSES:
			case MariaDBParser.DATEDIFF:
			case MariaDBParser.DATE_FORMAT:
			case MariaDBParser.DAYNAME:
			case MariaDBParser.DAYOFMONTH:
			case MariaDBParser.DAYOFWEEK:
			case MariaDBParser.DAYOFYEAR:
			case MariaDBParser.DECODE:
			case MariaDBParser.DEGREES:
			case MariaDBParser.DES_DECRYPT:
			case MariaDBParser.DES_ENCRYPT:
			case MariaDBParser.DIMENSION:
			case MariaDBParser.DISJOINT:
			case MariaDBParser.ELT:
			case MariaDBParser.ENCODE:
			case MariaDBParser.ENCRYPT:
			case MariaDBParser.ENDPOINT:
			case MariaDBParser.ENGINE_ATTRIBUTE:
			case MariaDBParser.ENVELOPE:
			case MariaDBParser.EQUALS:
			case MariaDBParser.EXP:
			case MariaDBParser.EXPORT_SET:
			case MariaDBParser.EXTERIORRING:
			case MariaDBParser.EXTRACTVALUE:
			case MariaDBParser.FIELD:
			case MariaDBParser.FIND_IN_SET:
			case MariaDBParser.FLOOR:
			case MariaDBParser.FORMAT:
			case MariaDBParser.FOUND_ROWS:
			case MariaDBParser.FROM_BASE64:
			case MariaDBParser.FROM_DAYS:
			case MariaDBParser.FROM_UNIXTIME:
			case MariaDBParser.GEOMCOLLFROMTEXT:
			case MariaDBParser.GEOMCOLLFROMWKB:
			case MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT:
			case MariaDBParser.GEOMETRYCOLLECTIONFROMWKB:
			case MariaDBParser.GEOMETRYFROMTEXT:
			case MariaDBParser.GEOMETRYFROMWKB:
			case MariaDBParser.GEOMETRYN:
			case MariaDBParser.GEOMETRYTYPE:
			case MariaDBParser.GEOMFROMTEXT:
			case MariaDBParser.GEOMFROMWKB:
			case MariaDBParser.GET_FORMAT:
			case MariaDBParser.GET_LOCK:
			case MariaDBParser.GLENGTH:
			case MariaDBParser.GREATEST:
			case MariaDBParser.GTID_SUBSET:
			case MariaDBParser.GTID_SUBTRACT:
			case MariaDBParser.HEX:
			case MariaDBParser.IFNULL:
			case MariaDBParser.INET6_ATON:
			case MariaDBParser.INET6_NTOA:
			case MariaDBParser.INET_ATON:
			case MariaDBParser.INET_NTOA:
			case MariaDBParser.INSTR:
			case MariaDBParser.INTERIORRINGN:
			case MariaDBParser.INTERSECTS:
			case MariaDBParser.ISCLOSED:
			case MariaDBParser.ISEMPTY:
			case MariaDBParser.ISNULL:
			case MariaDBParser.ISSIMPLE:
			case MariaDBParser.IS_FREE_LOCK:
			case MariaDBParser.IS_IPV4:
			case MariaDBParser.IS_IPV4_COMPAT:
			case MariaDBParser.IS_IPV4_MAPPED:
			case MariaDBParser.IS_IPV6:
			case MariaDBParser.IS_USED_LOCK:
			case MariaDBParser.LAST_INSERT_ID:
			case MariaDBParser.LCASE:
			case MariaDBParser.LEAST:
			case MariaDBParser.LENGTH:
			case MariaDBParser.LINEFROMTEXT:
			case MariaDBParser.LINEFROMWKB:
			case MariaDBParser.LINESTRINGFROMTEXT:
			case MariaDBParser.LINESTRINGFROMWKB:
			case MariaDBParser.LN:
			case MariaDBParser.LOAD_FILE:
			case MariaDBParser.LOCATE:
			case MariaDBParser.LOG:
			case MariaDBParser.LOG10:
			case MariaDBParser.LOG2:
			case MariaDBParser.LOWER:
			case MariaDBParser.LPAD:
			case MariaDBParser.LTRIM:
			case MariaDBParser.MAKEDATE:
			case MariaDBParser.MAKETIME:
			case MariaDBParser.MAKE_SET:
			case MariaDBParser.MASTER_POS_WAIT:
			case MariaDBParser.MBRCONTAINS:
			case MariaDBParser.MBRDISJOINT:
			case MariaDBParser.MBREQUAL:
			case MariaDBParser.MBRINTERSECTS:
			case MariaDBParser.MBROVERLAPS:
			case MariaDBParser.MBRTOUCHES:
			case MariaDBParser.MBRWITHIN:
			case MariaDBParser.MD5:
			case MariaDBParser.MLINEFROMTEXT:
			case MariaDBParser.MLINEFROMWKB:
			case MariaDBParser.MONTHNAME:
			case MariaDBParser.MPOINTFROMTEXT:
			case MariaDBParser.MPOINTFROMWKB:
			case MariaDBParser.MPOLYFROMTEXT:
			case MariaDBParser.MPOLYFROMWKB:
			case MariaDBParser.MULTILINESTRINGFROMTEXT:
			case MariaDBParser.MULTILINESTRINGFROMWKB:
			case MariaDBParser.MULTIPOINTFROMTEXT:
			case MariaDBParser.MULTIPOINTFROMWKB:
			case MariaDBParser.MULTIPOLYGONFROMTEXT:
			case MariaDBParser.MULTIPOLYGONFROMWKB:
			case MariaDBParser.NAME_CONST:
			case MariaDBParser.NULLIF:
			case MariaDBParser.NUMGEOMETRIES:
			case MariaDBParser.NUMINTERIORRINGS:
			case MariaDBParser.NUMPOINTS:
			case MariaDBParser.OCT:
			case MariaDBParser.OCTET_LENGTH:
			case MariaDBParser.ORD:
			case MariaDBParser.OVERLAPS:
			case MariaDBParser.PERIOD_ADD:
			case MariaDBParser.PERIOD_DIFF:
			case MariaDBParser.PI:
			case MariaDBParser.POINTFROMTEXT:
			case MariaDBParser.POINTFROMWKB:
			case MariaDBParser.POINTN:
			case MariaDBParser.POLYFROMTEXT:
			case MariaDBParser.POLYFROMWKB:
			case MariaDBParser.POLYGONFROMTEXT:
			case MariaDBParser.POLYGONFROMWKB:
			case MariaDBParser.POW:
			case MariaDBParser.POWER:
			case MariaDBParser.QUOTE:
			case MariaDBParser.RADIANS:
			case MariaDBParser.RAND:
			case MariaDBParser.RANDOM_BYTES:
			case MariaDBParser.RELEASE_LOCK:
			case MariaDBParser.REVERSE:
			case MariaDBParser.ROUND:
			case MariaDBParser.ROW_COUNT:
			case MariaDBParser.RPAD:
			case MariaDBParser.RTRIM:
			case MariaDBParser.SEC_TO_TIME:
			case MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE:
			case MariaDBParser.SESSION_USER:
			case MariaDBParser.SHA:
			case MariaDBParser.SHA1:
			case MariaDBParser.SHA2:
			case MariaDBParser.SCHEMA_NAME:
			case MariaDBParser.SIGN:
			case MariaDBParser.SIN:
			case MariaDBParser.SLEEP:
			case MariaDBParser.SOUNDEX:
			case MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS:
			case MariaDBParser.SQRT:
			case MariaDBParser.SRID:
			case MariaDBParser.STARTPOINT:
			case MariaDBParser.STRCMP:
			case MariaDBParser.STR_TO_DATE:
			case MariaDBParser.ST_AREA:
			case MariaDBParser.ST_ASBINARY:
			case MariaDBParser.ST_ASTEXT:
			case MariaDBParser.ST_ASWKB:
			case MariaDBParser.ST_ASWKT:
			case MariaDBParser.ST_BUFFER:
			case MariaDBParser.ST_CENTROID:
			case MariaDBParser.ST_CONTAINS:
			case MariaDBParser.ST_CROSSES:
			case MariaDBParser.ST_DIFFERENCE:
			case MariaDBParser.ST_DIMENSION:
			case MariaDBParser.ST_DISJOINT:
			case MariaDBParser.ST_DISTANCE:
			case MariaDBParser.ST_ENDPOINT:
			case MariaDBParser.ST_ENVELOPE:
			case MariaDBParser.ST_EQUALS:
			case MariaDBParser.ST_EXTERIORRING:
			case MariaDBParser.ST_GEOMCOLLFROMTEXT:
			case MariaDBParser.ST_GEOMCOLLFROMTXT:
			case MariaDBParser.ST_GEOMCOLLFROMWKB:
			case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
			case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB:
			case MariaDBParser.ST_GEOMETRYFROMTEXT:
			case MariaDBParser.ST_GEOMETRYFROMWKB:
			case MariaDBParser.ST_GEOMETRYN:
			case MariaDBParser.ST_GEOMETRYTYPE:
			case MariaDBParser.ST_GEOMFROMTEXT:
			case MariaDBParser.ST_GEOMFROMWKB:
			case MariaDBParser.ST_INTERIORRINGN:
			case MariaDBParser.ST_INTERSECTION:
			case MariaDBParser.ST_INTERSECTS:
			case MariaDBParser.ST_ISCLOSED:
			case MariaDBParser.ST_ISEMPTY:
			case MariaDBParser.ST_ISSIMPLE:
			case MariaDBParser.ST_LINEFROMTEXT:
			case MariaDBParser.ST_LINEFROMWKB:
			case MariaDBParser.ST_LINESTRINGFROMTEXT:
			case MariaDBParser.ST_LINESTRINGFROMWKB:
			case MariaDBParser.ST_NUMGEOMETRIES:
			case MariaDBParser.ST_NUMINTERIORRING:
			case MariaDBParser.ST_NUMINTERIORRINGS:
			case MariaDBParser.ST_NUMPOINTS:
			case MariaDBParser.ST_OVERLAPS:
			case MariaDBParser.ST_POINTFROMTEXT:
			case MariaDBParser.ST_POINTFROMWKB:
			case MariaDBParser.ST_POINTN:
			case MariaDBParser.ST_POLYFROMTEXT:
			case MariaDBParser.ST_POLYFROMWKB:
			case MariaDBParser.ST_POLYGONFROMTEXT:
			case MariaDBParser.ST_POLYGONFROMWKB:
			case MariaDBParser.ST_SRID:
			case MariaDBParser.ST_STARTPOINT:
			case MariaDBParser.ST_SYMDIFFERENCE:
			case MariaDBParser.ST_TOUCHES:
			case MariaDBParser.ST_UNION:
			case MariaDBParser.ST_WITHIN:
			case MariaDBParser.ST_X:
			case MariaDBParser.ST_Y:
			case MariaDBParser.SUBDATE:
			case MariaDBParser.SUBSTRING_INDEX:
			case MariaDBParser.SUBTIME:
			case MariaDBParser.SYSTEM_USER:
			case MariaDBParser.TAN:
			case MariaDBParser.TIMEDIFF:
			case MariaDBParser.TIMESTAMPADD:
			case MariaDBParser.TIMESTAMPDIFF:
			case MariaDBParser.TIME_FORMAT:
			case MariaDBParser.TIME_TO_SEC:
			case MariaDBParser.TOUCHES:
			case MariaDBParser.TO_BASE64:
			case MariaDBParser.TO_DAYS:
			case MariaDBParser.TO_SECONDS:
			case MariaDBParser.UCASE:
			case MariaDBParser.UNCOMPRESS:
			case MariaDBParser.UNCOMPRESSED_LENGTH:
			case MariaDBParser.UNHEX:
			case MariaDBParser.UNIX_TIMESTAMP:
			case MariaDBParser.UPDATEXML:
			case MariaDBParser.UPPER:
			case MariaDBParser.UUID:
			case MariaDBParser.UUID_SHORT:
			case MariaDBParser.VALIDATE_PASSWORD_STRENGTH:
			case MariaDBParser.VERSION:
			case MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case MariaDBParser.WEEKDAY:
			case MariaDBParser.WEEKOFYEAR:
			case MariaDBParser.WEIGHT_STRING:
			case MariaDBParser.WITHIN:
			case MariaDBParser.YEARWEEK:
			case MariaDBParser.Y_FUNCTION:
			case MariaDBParser.X_FUNCTION:
			case MariaDBParser.VIA:
			case MariaDBParser.LASTVAL:
			case MariaDBParser.NEXTVAL:
			case MariaDBParser.SETVAL:
			case MariaDBParser.PREVIOUS:
			case MariaDBParser.PERSISTENT:
			case MariaDBParser.BINLOG_MONITOR:
			case MariaDBParser.BINLOG_REPLAY:
			case MariaDBParser.FEDERATED_ADMIN:
			case MariaDBParser.READ_ONLY_ADMIN:
			case MariaDBParser.REPLICA:
			case MariaDBParser.REPLICAS:
			case MariaDBParser.REPLICATION_MASTER_ADMIN:
			case MariaDBParser.MONITOR:
			case MariaDBParser.READ_ONLY:
			case MariaDBParser.REPLAY:
			case MariaDBParser.MOD:
			case MariaDBParser.CHARSET_REVERSE_QOUTE_STRING:
			case MariaDBParser.STRING_LITERAL:
			case MariaDBParser.ID:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3638;
				this.uid();
				}
				break;
			case MariaDBParser.LOCAL_ID:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3639;
				this.match(MariaDBParser.LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lockClause(): LockClauseContext {
		let _localctx: LockClauseContext = new LockClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 222, MariaDBParser.RULE_lockClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3648;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.FOR:
				{
				this.state = 3642;
				this.match(MariaDBParser.FOR);
				this.state = 3643;
				this.match(MariaDBParser.UPDATE);
				}
				break;
			case MariaDBParser.LOCK:
				{
				this.state = 3644;
				this.match(MariaDBParser.LOCK);
				this.state = 3645;
				this.match(MariaDBParser.IN);
				this.state = 3646;
				this.match(MariaDBParser.SHARE);
				this.state = 3647;
				this.match(MariaDBParser.MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3651;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 514, this._ctx) ) {
			case 1:
				{
				this.state = 3650;
				this.lockOption();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public singleDeleteStatement(): SingleDeleteStatementContext {
		let _localctx: SingleDeleteStatementContext = new SingleDeleteStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 224, MariaDBParser.RULE_singleDeleteStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3653;
			this.match(MariaDBParser.DELETE);
			this.state = 3655;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.LOW_PRIORITY) {
				{
				this.state = 3654;
				_localctx._priority = this.match(MariaDBParser.LOW_PRIORITY);
				}
			}

			this.state = 3658;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.QUICK) {
				{
				this.state = 3657;
				this.match(MariaDBParser.QUICK);
				}
			}

			this.state = 3661;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.IGNORE) {
				{
				this.state = 3660;
				this.match(MariaDBParser.IGNORE);
				}
			}

			this.state = 3663;
			this.match(MariaDBParser.FROM);
			this.state = 3664;
			this.tableName();
			this.state = 3670;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.PARTITION) {
				{
				this.state = 3665;
				this.match(MariaDBParser.PARTITION);
				this.state = 3666;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 3667;
				this.uidList();
				this.state = 3668;
				this.match(MariaDBParser.RR_BRACKET);
				}
			}

			this.state = 3674;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.WHERE) {
				{
				this.state = 3672;
				this.match(MariaDBParser.WHERE);
				this.state = 3673;
				this.expression(0);
				}
			}

			this.state = 3677;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.ORDER) {
				{
				this.state = 3676;
				this.orderByClause();
				}
			}

			this.state = 3681;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.LIMIT) {
				{
				this.state = 3679;
				this.match(MariaDBParser.LIMIT);
				this.state = 3680;
				this.limitClauseAtom();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multipleDeleteStatement(): MultipleDeleteStatementContext {
		let _localctx: MultipleDeleteStatementContext = new MultipleDeleteStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 226, MariaDBParser.RULE_multipleDeleteStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3683;
			this.match(MariaDBParser.DELETE);
			this.state = 3685;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.LOW_PRIORITY) {
				{
				this.state = 3684;
				_localctx._priority = this.match(MariaDBParser.LOW_PRIORITY);
				}
			}

			this.state = 3688;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 523, this._ctx) ) {
			case 1:
				{
				this.state = 3687;
				this.match(MariaDBParser.QUICK);
				}
				break;
			}
			this.state = 3691;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.IGNORE) {
				{
				this.state = 3690;
				this.match(MariaDBParser.IGNORE);
				}
			}

			this.state = 3732;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.ATTRIBUTE:
			case MariaDBParser.BODY:
			case MariaDBParser.BUCKETS:
			case MariaDBParser.CONDITION:
			case MariaDBParser.CURRENT:
			case MariaDBParser.CURRENT_ROLE:
			case MariaDBParser.CURRENT_USER:
			case MariaDBParser.DATABASE:
			case MariaDBParser.DEFAULT:
			case MariaDBParser.DIAGNOSTICS:
			case MariaDBParser.EMPTY:
			case MariaDBParser.EXCEPT:
			case MariaDBParser.GROUP:
			case MariaDBParser.IF:
			case MariaDBParser.IGNORED:
			case MariaDBParser.INSERT:
			case MariaDBParser.LATERAL:
			case MariaDBParser.LEFT:
			case MariaDBParser.LOCKED:
			case MariaDBParser.MAXVALUE:
			case MariaDBParser.MINVALUE:
			case MariaDBParser.NUMBER:
			case MariaDBParser.OPTIONAL:
			case MariaDBParser.ORDER:
			case MariaDBParser.PRIMARY:
			case MariaDBParser.PACKAGE:
			case MariaDBParser.REPLACE:
			case MariaDBParser.RIGHT:
			case MariaDBParser.SCHEMA:
			case MariaDBParser.SKIP_:
			case MariaDBParser.STACKED:
			case MariaDBParser.STATEMENT:
			case MariaDBParser.DATE:
			case MariaDBParser.TIME:
			case MariaDBParser.TIMESTAMP:
			case MariaDBParser.DATETIME:
			case MariaDBParser.YEAR:
			case MariaDBParser.BINARY:
			case MariaDBParser.TEXT:
			case MariaDBParser.ENUM:
			case MariaDBParser.SERIAL:
			case MariaDBParser.JSON_ARRAY:
			case MariaDBParser.JSON_ARRAYAGG:
			case MariaDBParser.JSON_ARRAY_APPEND:
			case MariaDBParser.JSON_ARRAY_INSERT:
			case MariaDBParser.JSON_CONTAINS:
			case MariaDBParser.JSON_CONTAINS_PATH:
			case MariaDBParser.JSON_DEPTH:
			case MariaDBParser.JSON_EXTRACT:
			case MariaDBParser.JSON_INSERT:
			case MariaDBParser.JSON_KEYS:
			case MariaDBParser.JSON_LENGTH:
			case MariaDBParser.JSON_MERGE:
			case MariaDBParser.JSON_MERGE_PATCH:
			case MariaDBParser.JSON_MERGE_PRESERVE:
			case MariaDBParser.JSON_OBJECT:
			case MariaDBParser.JSON_OBJECTAGG:
			case MariaDBParser.JSON_OVERLAPS:
			case MariaDBParser.JSON_PRETTY:
			case MariaDBParser.JSON_QUOTE:
			case MariaDBParser.JSON_REMOVE:
			case MariaDBParser.JSON_REPLACE:
			case MariaDBParser.JSON_SCHEMA_VALID:
			case MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT:
			case MariaDBParser.JSON_SEARCH:
			case MariaDBParser.JSON_SET:
			case MariaDBParser.JSON_STORAGE_FREE:
			case MariaDBParser.JSON_STORAGE_SIZE:
			case MariaDBParser.JSON_TABLE:
			case MariaDBParser.JSON_TYPE:
			case MariaDBParser.JSON_UNQUOTE:
			case MariaDBParser.JSON_VALID:
			case MariaDBParser.JSON_VALUE:
			case MariaDBParser.NESTED:
			case MariaDBParser.ORDINALITY:
			case MariaDBParser.PATH:
			case MariaDBParser.AVG:
			case MariaDBParser.BIT_AND:
			case MariaDBParser.BIT_OR:
			case MariaDBParser.BIT_XOR:
			case MariaDBParser.COUNT:
			case MariaDBParser.CUME_DIST:
			case MariaDBParser.DENSE_RANK:
			case MariaDBParser.FIRST_VALUE:
			case MariaDBParser.GROUP_CONCAT:
			case MariaDBParser.LAG:
			case MariaDBParser.LAST_VALUE:
			case MariaDBParser.LEAD:
			case MariaDBParser.MAX:
			case MariaDBParser.MIN:
			case MariaDBParser.NTILE:
			case MariaDBParser.NTH_VALUE:
			case MariaDBParser.PERCENT_RANK:
			case MariaDBParser.RANK:
			case MariaDBParser.ROW_NUMBER:
			case MariaDBParser.STD:
			case MariaDBParser.STDDEV:
			case MariaDBParser.STDDEV_POP:
			case MariaDBParser.STDDEV_SAMP:
			case MariaDBParser.SUM:
			case MariaDBParser.VAR_POP:
			case MariaDBParser.VAR_SAMP:
			case MariaDBParser.VARIANCE:
			case MariaDBParser.CURRENT_DATE:
			case MariaDBParser.CURRENT_TIME:
			case MariaDBParser.CURRENT_TIMESTAMP:
			case MariaDBParser.LOCALTIME:
			case MariaDBParser.CURDATE:
			case MariaDBParser.CURTIME:
			case MariaDBParser.DATE_ADD:
			case MariaDBParser.DATE_SUB:
			case MariaDBParser.LOCALTIMESTAMP:
			case MariaDBParser.NOW:
			case MariaDBParser.POSITION:
			case MariaDBParser.SUBSTR:
			case MariaDBParser.SUBSTRING:
			case MariaDBParser.SYSDATE:
			case MariaDBParser.TRIM:
			case MariaDBParser.UTC_DATE:
			case MariaDBParser.UTC_TIME:
			case MariaDBParser.UTC_TIMESTAMP:
			case MariaDBParser.ACCOUNT:
			case MariaDBParser.ACTION:
			case MariaDBParser.AFTER:
			case MariaDBParser.AGGREGATE:
			case MariaDBParser.ALGORITHM:
			case MariaDBParser.ANY:
			case MariaDBParser.AT:
			case MariaDBParser.AUTHORS:
			case MariaDBParser.AUTOCOMMIT:
			case MariaDBParser.AUTOEXTEND_SIZE:
			case MariaDBParser.AUTO_INCREMENT:
			case MariaDBParser.AVG_ROW_LENGTH:
			case MariaDBParser.BEGIN:
			case MariaDBParser.BINLOG:
			case MariaDBParser.BIT:
			case MariaDBParser.BLOCK:
			case MariaDBParser.BOOL:
			case MariaDBParser.BOOLEAN:
			case MariaDBParser.BTREE:
			case MariaDBParser.CACHE:
			case MariaDBParser.CASCADED:
			case MariaDBParser.CHAIN:
			case MariaDBParser.CHANGED:
			case MariaDBParser.CHANNEL:
			case MariaDBParser.CHECKSUM:
			case MariaDBParser.PAGE_CHECKSUM:
			case MariaDBParser.CIPHER:
			case MariaDBParser.CLASS_ORIGIN:
			case MariaDBParser.CLIENT:
			case MariaDBParser.CLOSE:
			case MariaDBParser.CLUSTERING:
			case MariaDBParser.COALESCE:
			case MariaDBParser.CODE:
			case MariaDBParser.COLUMNS:
			case MariaDBParser.COLUMN_FORMAT:
			case MariaDBParser.COLUMN_NAME:
			case MariaDBParser.COMMENT:
			case MariaDBParser.COMMIT:
			case MariaDBParser.COMPACT:
			case MariaDBParser.COMPLETION:
			case MariaDBParser.COMPRESSED:
			case MariaDBParser.COMPRESSION:
			case MariaDBParser.CONCURRENT:
			case MariaDBParser.CONNECT:
			case MariaDBParser.CONNECTION:
			case MariaDBParser.CONSISTENT:
			case MariaDBParser.CONSTRAINT_CATALOG:
			case MariaDBParser.CONSTRAINT_SCHEMA:
			case MariaDBParser.CONSTRAINT_NAME:
			case MariaDBParser.CONTAINS:
			case MariaDBParser.CONTEXT:
			case MariaDBParser.CONTRIBUTORS:
			case MariaDBParser.COPY:
			case MariaDBParser.CPU:
			case MariaDBParser.CYCLE:
			case MariaDBParser.CURSOR_NAME:
			case MariaDBParser.DATA:
			case MariaDBParser.DATAFILE:
			case MariaDBParser.DEALLOCATE:
			case MariaDBParser.DEFAULT_AUTH:
			case MariaDBParser.DEFINER:
			case MariaDBParser.DELAY_KEY_WRITE:
			case MariaDBParser.DES_KEY_FILE:
			case MariaDBParser.DIRECTORY:
			case MariaDBParser.DISABLE:
			case MariaDBParser.DISCARD:
			case MariaDBParser.DISK:
			case MariaDBParser.DO:
			case MariaDBParser.DUMPFILE:
			case MariaDBParser.DUPLICATE:
			case MariaDBParser.DYNAMIC:
			case MariaDBParser.ENABLE:
			case MariaDBParser.ENCRYPTED:
			case MariaDBParser.ENCRYPTION:
			case MariaDBParser.ENCRYPTION_KEY_ID:
			case MariaDBParser.END:
			case MariaDBParser.ENDS:
			case MariaDBParser.ENGINE:
			case MariaDBParser.ENGINES:
			case MariaDBParser.ERROR:
			case MariaDBParser.ERRORS:
			case MariaDBParser.ESCAPE:
			case MariaDBParser.EVEN:
			case MariaDBParser.EVENT:
			case MariaDBParser.EVENTS:
			case MariaDBParser.EVERY:
			case MariaDBParser.EXCHANGE:
			case MariaDBParser.EXCLUSIVE:
			case MariaDBParser.EXPIRE:
			case MariaDBParser.EXPORT:
			case MariaDBParser.EXTENDED:
			case MariaDBParser.EXTENT_SIZE:
			case MariaDBParser.FAILED_LOGIN_ATTEMPTS:
			case MariaDBParser.FAST:
			case MariaDBParser.FAULTS:
			case MariaDBParser.FIELDS:
			case MariaDBParser.FILE_BLOCK_SIZE:
			case MariaDBParser.FILTER:
			case MariaDBParser.FIRST:
			case MariaDBParser.FIXED:
			case MariaDBParser.FLUSH:
			case MariaDBParser.FOLLOWS:
			case MariaDBParser.FOUND:
			case MariaDBParser.FULL:
			case MariaDBParser.FUNCTION:
			case MariaDBParser.GENERAL:
			case MariaDBParser.GLOBAL:
			case MariaDBParser.GRANTS:
			case MariaDBParser.GROUP_REPLICATION:
			case MariaDBParser.HANDLER:
			case MariaDBParser.HASH:
			case MariaDBParser.HELP:
			case MariaDBParser.HISTORY:
			case MariaDBParser.HOST:
			case MariaDBParser.HOSTS:
			case MariaDBParser.IDENTIFIED:
			case MariaDBParser.IGNORE_SERVER_IDS:
			case MariaDBParser.IMPORT:
			case MariaDBParser.INCREMENT:
			case MariaDBParser.INDEXES:
			case MariaDBParser.INITIAL_SIZE:
			case MariaDBParser.INPLACE:
			case MariaDBParser.INSERT_METHOD:
			case MariaDBParser.INSTALL:
			case MariaDBParser.INSTANCE:
			case MariaDBParser.INSTANT:
			case MariaDBParser.INVISIBLE:
			case MariaDBParser.INVOKER:
			case MariaDBParser.IO:
			case MariaDBParser.IO_THREAD:
			case MariaDBParser.IPC:
			case MariaDBParser.ISOLATION:
			case MariaDBParser.ISSUER:
			case MariaDBParser.JSON:
			case MariaDBParser.KEY_BLOCK_SIZE:
			case MariaDBParser.LANGUAGE:
			case MariaDBParser.LAST:
			case MariaDBParser.LEAVES:
			case MariaDBParser.LESS:
			case MariaDBParser.LEVEL:
			case MariaDBParser.LIST:
			case MariaDBParser.LOCAL:
			case MariaDBParser.LOCALES:
			case MariaDBParser.LOGFILE:
			case MariaDBParser.LOGS:
			case MariaDBParser.MASTER:
			case MariaDBParser.MASTER_AUTO_POSITION:
			case MariaDBParser.MASTER_CONNECT_RETRY:
			case MariaDBParser.MASTER_DELAY:
			case MariaDBParser.MASTER_HEARTBEAT_PERIOD:
			case MariaDBParser.MASTER_HOST:
			case MariaDBParser.MASTER_LOG_FILE:
			case MariaDBParser.MASTER_LOG_POS:
			case MariaDBParser.MASTER_PASSWORD:
			case MariaDBParser.MASTER_PORT:
			case MariaDBParser.MASTER_RETRY_COUNT:
			case MariaDBParser.MASTER_SSL:
			case MariaDBParser.MASTER_SSL_CA:
			case MariaDBParser.MASTER_SSL_CAPATH:
			case MariaDBParser.MASTER_SSL_CERT:
			case MariaDBParser.MASTER_SSL_CIPHER:
			case MariaDBParser.MASTER_SSL_CRL:
			case MariaDBParser.MASTER_SSL_CRLPATH:
			case MariaDBParser.MASTER_SSL_KEY:
			case MariaDBParser.MASTER_TLS_VERSION:
			case MariaDBParser.MASTER_USER:
			case MariaDBParser.MAX_CONNECTIONS_PER_HOUR:
			case MariaDBParser.MAX_QUERIES_PER_HOUR:
			case MariaDBParser.MAX_ROWS:
			case MariaDBParser.MAX_SIZE:
			case MariaDBParser.MAX_UPDATES_PER_HOUR:
			case MariaDBParser.MAX_USER_CONNECTIONS:
			case MariaDBParser.MEDIUM:
			case MariaDBParser.MEMBER:
			case MariaDBParser.MERGE:
			case MariaDBParser.MESSAGE_TEXT:
			case MariaDBParser.MID:
			case MariaDBParser.MIGRATE:
			case MariaDBParser.MIN_ROWS:
			case MariaDBParser.MODE:
			case MariaDBParser.MODIFY:
			case MariaDBParser.MUTEX:
			case MariaDBParser.MYSQL:
			case MariaDBParser.MYSQL_ERRNO:
			case MariaDBParser.NAME:
			case MariaDBParser.NAMES:
			case MariaDBParser.NCHAR:
			case MariaDBParser.NEVER:
			case MariaDBParser.NEXT:
			case MariaDBParser.NO:
			case MariaDBParser.NOCACHE:
			case MariaDBParser.NOCOPY:
			case MariaDBParser.NOCYCLE:
			case MariaDBParser.NOMAXVALUE:
			case MariaDBParser.NOMINVALUE:
			case MariaDBParser.NOWAIT:
			case MariaDBParser.NODEGROUP:
			case MariaDBParser.NONE:
			case MariaDBParser.ODBC:
			case MariaDBParser.OFFLINE:
			case MariaDBParser.OFFSET:
			case MariaDBParser.OF:
			case MariaDBParser.OJ:
			case MariaDBParser.OLD_PASSWORD:
			case MariaDBParser.ONE:
			case MariaDBParser.ONLINE:
			case MariaDBParser.ONLY:
			case MariaDBParser.OPEN:
			case MariaDBParser.OPTIMIZER_COSTS:
			case MariaDBParser.OPTIONS:
			case MariaDBParser.OWNER:
			case MariaDBParser.PACK_KEYS:
			case MariaDBParser.PAGE:
			case MariaDBParser.PARSER:
			case MariaDBParser.PARTIAL:
			case MariaDBParser.PARTITIONING:
			case MariaDBParser.PARTITIONS:
			case MariaDBParser.PASSWORD:
			case MariaDBParser.PASSWORD_LOCK_TIME:
			case MariaDBParser.PHASE:
			case MariaDBParser.PLUGIN:
			case MariaDBParser.PLUGIN_DIR:
			case MariaDBParser.PLUGINS:
			case MariaDBParser.PORT:
			case MariaDBParser.PRECEDES:
			case MariaDBParser.PREPARE:
			case MariaDBParser.PRESERVE:
			case MariaDBParser.PREV:
			case MariaDBParser.PROCESSLIST:
			case MariaDBParser.PROFILE:
			case MariaDBParser.PROFILES:
			case MariaDBParser.PROXY:
			case MariaDBParser.QUERY:
			case MariaDBParser.QUERY_RESPONSE_TIME:
			case MariaDBParser.QUICK:
			case MariaDBParser.REBUILD:
			case MariaDBParser.RECOVER:
			case MariaDBParser.RECURSIVE:
			case MariaDBParser.REDO_BUFFER_SIZE:
			case MariaDBParser.REDUNDANT:
			case MariaDBParser.RELAY:
			case MariaDBParser.RELAY_LOG_FILE:
			case MariaDBParser.RELAY_LOG_POS:
			case MariaDBParser.RELAYLOG:
			case MariaDBParser.REMOVE:
			case MariaDBParser.REORGANIZE:
			case MariaDBParser.REPAIR:
			case MariaDBParser.REPLICATE_DO_DB:
			case MariaDBParser.REPLICATE_DO_TABLE:
			case MariaDBParser.REPLICATE_IGNORE_DB:
			case MariaDBParser.REPLICATE_IGNORE_TABLE:
			case MariaDBParser.REPLICATE_REWRITE_DB:
			case MariaDBParser.REPLICATE_WILD_DO_TABLE:
			case MariaDBParser.REPLICATE_WILD_IGNORE_TABLE:
			case MariaDBParser.REPLICATION:
			case MariaDBParser.RESET:
			case MariaDBParser.RESTART:
			case MariaDBParser.RESUME:
			case MariaDBParser.RETURNED_SQLSTATE:
			case MariaDBParser.RETURNS:
			case MariaDBParser.REUSE:
			case MariaDBParser.ROLE:
			case MariaDBParser.ROLLBACK:
			case MariaDBParser.ROLLUP:
			case MariaDBParser.ROTATE:
			case MariaDBParser.ROW:
			case MariaDBParser.ROWS:
			case MariaDBParser.ROW_FORMAT:
			case MariaDBParser.RTREE:
			case MariaDBParser.SAVEPOINT:
			case MariaDBParser.SCHEDULE:
			case MariaDBParser.SECURITY:
			case MariaDBParser.SEQUENCE:
			case MariaDBParser.SERVER:
			case MariaDBParser.SESSION:
			case MariaDBParser.SHARE:
			case MariaDBParser.SHARED:
			case MariaDBParser.SIGNED:
			case MariaDBParser.SIMPLE:
			case MariaDBParser.SLAVE:
			case MariaDBParser.SLAVES:
			case MariaDBParser.SLOW:
			case MariaDBParser.SNAPSHOT:
			case MariaDBParser.SOCKET:
			case MariaDBParser.SOME:
			case MariaDBParser.SONAME:
			case MariaDBParser.SOUNDS:
			case MariaDBParser.SOURCE:
			case MariaDBParser.SQL_AFTER_GTIDS:
			case MariaDBParser.SQL_AFTER_MTS_GAPS:
			case MariaDBParser.SQL_BEFORE_GTIDS:
			case MariaDBParser.SQL_BUFFER_RESULT:
			case MariaDBParser.SQL_CACHE:
			case MariaDBParser.SQL_NO_CACHE:
			case MariaDBParser.SQL_THREAD:
			case MariaDBParser.START:
			case MariaDBParser.STARTS:
			case MariaDBParser.STATS_AUTO_RECALC:
			case MariaDBParser.STATS_PERSISTENT:
			case MariaDBParser.STATS_SAMPLE_PAGES:
			case MariaDBParser.STATUS:
			case MariaDBParser.STOP:
			case MariaDBParser.STORAGE:
			case MariaDBParser.STRING:
			case MariaDBParser.SUBCLASS_ORIGIN:
			case MariaDBParser.SUBJECT:
			case MariaDBParser.SUBPARTITION:
			case MariaDBParser.SUBPARTITIONS:
			case MariaDBParser.SUSPEND:
			case MariaDBParser.SWAPS:
			case MariaDBParser.SWITCHES:
			case MariaDBParser.TABLE_NAME:
			case MariaDBParser.TABLESPACE:
			case MariaDBParser.TABLE_TYPE:
			case MariaDBParser.TEMPORARY:
			case MariaDBParser.TEMPTABLE:
			case MariaDBParser.THAN:
			case MariaDBParser.TRADITIONAL:
			case MariaDBParser.TRANSACTION:
			case MariaDBParser.TRANSACTIONAL:
			case MariaDBParser.TRIGGERS:
			case MariaDBParser.TRUNCATE:
			case MariaDBParser.TYPES:
			case MariaDBParser.UNBOUNDED:
			case MariaDBParser.UNDEFINED:
			case MariaDBParser.UNDOFILE:
			case MariaDBParser.UNDO_BUFFER_SIZE:
			case MariaDBParser.UNINSTALL:
			case MariaDBParser.UNKNOWN:
			case MariaDBParser.UNTIL:
			case MariaDBParser.UPGRADE:
			case MariaDBParser.USER:
			case MariaDBParser.USE_FRM:
			case MariaDBParser.USER_RESOURCES:
			case MariaDBParser.VALIDATION:
			case MariaDBParser.VALUE:
			case MariaDBParser.VARIABLES:
			case MariaDBParser.VIEW:
			case MariaDBParser.VIRTUAL:
			case MariaDBParser.VISIBLE:
			case MariaDBParser.WAIT:
			case MariaDBParser.WARNINGS:
			case MariaDBParser.WITHOUT:
			case MariaDBParser.WORK:
			case MariaDBParser.WRAPPER:
			case MariaDBParser.WSREP_MEMBERSHIP:
			case MariaDBParser.WSREP_STATUS:
			case MariaDBParser.X509:
			case MariaDBParser.XA:
			case MariaDBParser.XML:
			case MariaDBParser.EUR:
			case MariaDBParser.USA:
			case MariaDBParser.JIS:
			case MariaDBParser.ISO:
			case MariaDBParser.INTERNAL:
			case MariaDBParser.QUARTER:
			case MariaDBParser.MONTH:
			case MariaDBParser.DAY:
			case MariaDBParser.HOUR:
			case MariaDBParser.MINUTE:
			case MariaDBParser.WEEK:
			case MariaDBParser.SECOND:
			case MariaDBParser.MICROSECOND:
			case MariaDBParser.USER_STATISTICS:
			case MariaDBParser.CLIENT_STATISTICS:
			case MariaDBParser.INDEX_STATISTICS:
			case MariaDBParser.TABLE_STATISTICS:
			case MariaDBParser.ADMIN:
			case MariaDBParser.AUDIT_ADMIN:
			case MariaDBParser.BACKUP_ADMIN:
			case MariaDBParser.BINLOG_ADMIN:
			case MariaDBParser.BINLOG_ENCRYPTION_ADMIN:
			case MariaDBParser.CLONE_ADMIN:
			case MariaDBParser.CONNECTION_ADMIN:
			case MariaDBParser.ENCRYPTION_KEY_ADMIN:
			case MariaDBParser.EXECUTE:
			case MariaDBParser.FILE:
			case MariaDBParser.FIREWALL_ADMIN:
			case MariaDBParser.FIREWALL_USER:
			case MariaDBParser.GROUP_REPLICATION_ADMIN:
			case MariaDBParser.INNODB_REDO_LOG_ARCHIVE:
			case MariaDBParser.INVOKE:
			case MariaDBParser.LAMBDA:
			case MariaDBParser.NDB_STORED_USER:
			case MariaDBParser.PASSWORDLESS_USER_ADMIN:
			case MariaDBParser.PERSIST_RO_VARIABLES_ADMIN:
			case MariaDBParser.PRIVILEGES:
			case MariaDBParser.PROCESS:
			case MariaDBParser.RELOAD:
			case MariaDBParser.REPLICATION_APPLIER:
			case MariaDBParser.REPLICATION_SLAVE_ADMIN:
			case MariaDBParser.RESOURCE_GROUP_ADMIN:
			case MariaDBParser.RESOURCE_GROUP_USER:
			case MariaDBParser.ROLE_ADMIN:
			case MariaDBParser.ROUTINE:
			case MariaDBParser.S3:
			case MariaDBParser.SESSION_VARIABLES_ADMIN:
			case MariaDBParser.SET_USER_ID:
			case MariaDBParser.SHOW_ROUTINE:
			case MariaDBParser.SHUTDOWN:
			case MariaDBParser.SUPER:
			case MariaDBParser.SYSTEM_VARIABLES_ADMIN:
			case MariaDBParser.TABLES:
			case MariaDBParser.TABLE_ENCRYPTION_ADMIN:
			case MariaDBParser.VERSION_TOKEN_ADMIN:
			case MariaDBParser.XA_RECOVER_ADMIN:
			case MariaDBParser.ARMSCII8:
			case MariaDBParser.ASCII:
			case MariaDBParser.BIG5:
			case MariaDBParser.CP1250:
			case MariaDBParser.CP1251:
			case MariaDBParser.CP1256:
			case MariaDBParser.CP1257:
			case MariaDBParser.CP850:
			case MariaDBParser.CP852:
			case MariaDBParser.CP866:
			case MariaDBParser.CP932:
			case MariaDBParser.DEC8:
			case MariaDBParser.EUCJPMS:
			case MariaDBParser.EUCKR:
			case MariaDBParser.GB18030:
			case MariaDBParser.GB2312:
			case MariaDBParser.GBK:
			case MariaDBParser.GEOSTD8:
			case MariaDBParser.GREEK:
			case MariaDBParser.HEBREW:
			case MariaDBParser.HP8:
			case MariaDBParser.KEYBCS2:
			case MariaDBParser.KOI8R:
			case MariaDBParser.KOI8U:
			case MariaDBParser.LATIN1:
			case MariaDBParser.LATIN2:
			case MariaDBParser.LATIN5:
			case MariaDBParser.LATIN7:
			case MariaDBParser.MACCE:
			case MariaDBParser.MACROMAN:
			case MariaDBParser.SJIS:
			case MariaDBParser.SWE7:
			case MariaDBParser.TIS620:
			case MariaDBParser.UCS2:
			case MariaDBParser.UJIS:
			case MariaDBParser.UTF16:
			case MariaDBParser.UTF16LE:
			case MariaDBParser.UTF32:
			case MariaDBParser.UTF8:
			case MariaDBParser.UTF8MB3:
			case MariaDBParser.UTF8MB4:
			case MariaDBParser.ARCHIVE:
			case MariaDBParser.BLACKHOLE:
			case MariaDBParser.CSV:
			case MariaDBParser.FEDERATED:
			case MariaDBParser.INNODB:
			case MariaDBParser.MEMORY:
			case MariaDBParser.MRG_MYISAM:
			case MariaDBParser.MYISAM:
			case MariaDBParser.NDB:
			case MariaDBParser.NDBCLUSTER:
			case MariaDBParser.PERFORMANCE_SCHEMA:
			case MariaDBParser.TOKUDB:
			case MariaDBParser.REPEATABLE:
			case MariaDBParser.COMMITTED:
			case MariaDBParser.UNCOMMITTED:
			case MariaDBParser.SERIALIZABLE:
			case MariaDBParser.GEOMETRYCOLLECTION:
			case MariaDBParser.LINESTRING:
			case MariaDBParser.MULTILINESTRING:
			case MariaDBParser.MULTIPOINT:
			case MariaDBParser.MULTIPOLYGON:
			case MariaDBParser.POINT:
			case MariaDBParser.POLYGON:
			case MariaDBParser.ABS:
			case MariaDBParser.ACOS:
			case MariaDBParser.ADDDATE:
			case MariaDBParser.ADDTIME:
			case MariaDBParser.AES_DECRYPT:
			case MariaDBParser.AES_ENCRYPT:
			case MariaDBParser.AREA:
			case MariaDBParser.ASBINARY:
			case MariaDBParser.ASIN:
			case MariaDBParser.ASTEXT:
			case MariaDBParser.ASWKB:
			case MariaDBParser.ASWKT:
			case MariaDBParser.ASYMMETRIC_DECRYPT:
			case MariaDBParser.ASYMMETRIC_DERIVE:
			case MariaDBParser.ASYMMETRIC_ENCRYPT:
			case MariaDBParser.ASYMMETRIC_SIGN:
			case MariaDBParser.ASYMMETRIC_VERIFY:
			case MariaDBParser.ATAN:
			case MariaDBParser.ATAN2:
			case MariaDBParser.BENCHMARK:
			case MariaDBParser.BIN:
			case MariaDBParser.BIT_COUNT:
			case MariaDBParser.BIT_LENGTH:
			case MariaDBParser.BUFFER:
			case MariaDBParser.CATALOG_NAME:
			case MariaDBParser.CEIL:
			case MariaDBParser.CEILING:
			case MariaDBParser.CENTROID:
			case MariaDBParser.CHARACTER_LENGTH:
			case MariaDBParser.CHARSET:
			case MariaDBParser.CHAR_LENGTH:
			case MariaDBParser.COERCIBILITY:
			case MariaDBParser.COLLATION:
			case MariaDBParser.COMPRESS:
			case MariaDBParser.CONCAT:
			case MariaDBParser.CONCAT_WS:
			case MariaDBParser.CONNECTION_ID:
			case MariaDBParser.CONV:
			case MariaDBParser.CONVERT_TZ:
			case MariaDBParser.COS:
			case MariaDBParser.COT:
			case MariaDBParser.CRC32:
			case MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY:
			case MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY:
			case MariaDBParser.CREATE_DH_PARAMETERS:
			case MariaDBParser.CREATE_DIGEST:
			case MariaDBParser.CROSSES:
			case MariaDBParser.DATEDIFF:
			case MariaDBParser.DATE_FORMAT:
			case MariaDBParser.DAYNAME:
			case MariaDBParser.DAYOFMONTH:
			case MariaDBParser.DAYOFWEEK:
			case MariaDBParser.DAYOFYEAR:
			case MariaDBParser.DECODE:
			case MariaDBParser.DEGREES:
			case MariaDBParser.DES_DECRYPT:
			case MariaDBParser.DES_ENCRYPT:
			case MariaDBParser.DIMENSION:
			case MariaDBParser.DISJOINT:
			case MariaDBParser.ELT:
			case MariaDBParser.ENCODE:
			case MariaDBParser.ENCRYPT:
			case MariaDBParser.ENDPOINT:
			case MariaDBParser.ENGINE_ATTRIBUTE:
			case MariaDBParser.ENVELOPE:
			case MariaDBParser.EQUALS:
			case MariaDBParser.EXP:
			case MariaDBParser.EXPORT_SET:
			case MariaDBParser.EXTERIORRING:
			case MariaDBParser.EXTRACTVALUE:
			case MariaDBParser.FIELD:
			case MariaDBParser.FIND_IN_SET:
			case MariaDBParser.FLOOR:
			case MariaDBParser.FORMAT:
			case MariaDBParser.FOUND_ROWS:
			case MariaDBParser.FROM_BASE64:
			case MariaDBParser.FROM_DAYS:
			case MariaDBParser.FROM_UNIXTIME:
			case MariaDBParser.GEOMCOLLFROMTEXT:
			case MariaDBParser.GEOMCOLLFROMWKB:
			case MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT:
			case MariaDBParser.GEOMETRYCOLLECTIONFROMWKB:
			case MariaDBParser.GEOMETRYFROMTEXT:
			case MariaDBParser.GEOMETRYFROMWKB:
			case MariaDBParser.GEOMETRYN:
			case MariaDBParser.GEOMETRYTYPE:
			case MariaDBParser.GEOMFROMTEXT:
			case MariaDBParser.GEOMFROMWKB:
			case MariaDBParser.GET_FORMAT:
			case MariaDBParser.GET_LOCK:
			case MariaDBParser.GLENGTH:
			case MariaDBParser.GREATEST:
			case MariaDBParser.GTID_SUBSET:
			case MariaDBParser.GTID_SUBTRACT:
			case MariaDBParser.HEX:
			case MariaDBParser.IFNULL:
			case MariaDBParser.INET6_ATON:
			case MariaDBParser.INET6_NTOA:
			case MariaDBParser.INET_ATON:
			case MariaDBParser.INET_NTOA:
			case MariaDBParser.INSTR:
			case MariaDBParser.INTERIORRINGN:
			case MariaDBParser.INTERSECTS:
			case MariaDBParser.ISCLOSED:
			case MariaDBParser.ISEMPTY:
			case MariaDBParser.ISNULL:
			case MariaDBParser.ISSIMPLE:
			case MariaDBParser.IS_FREE_LOCK:
			case MariaDBParser.IS_IPV4:
			case MariaDBParser.IS_IPV4_COMPAT:
			case MariaDBParser.IS_IPV4_MAPPED:
			case MariaDBParser.IS_IPV6:
			case MariaDBParser.IS_USED_LOCK:
			case MariaDBParser.LAST_INSERT_ID:
			case MariaDBParser.LCASE:
			case MariaDBParser.LEAST:
			case MariaDBParser.LENGTH:
			case MariaDBParser.LINEFROMTEXT:
			case MariaDBParser.LINEFROMWKB:
			case MariaDBParser.LINESTRINGFROMTEXT:
			case MariaDBParser.LINESTRINGFROMWKB:
			case MariaDBParser.LN:
			case MariaDBParser.LOAD_FILE:
			case MariaDBParser.LOCATE:
			case MariaDBParser.LOG:
			case MariaDBParser.LOG10:
			case MariaDBParser.LOG2:
			case MariaDBParser.LOWER:
			case MariaDBParser.LPAD:
			case MariaDBParser.LTRIM:
			case MariaDBParser.MAKEDATE:
			case MariaDBParser.MAKETIME:
			case MariaDBParser.MAKE_SET:
			case MariaDBParser.MASTER_POS_WAIT:
			case MariaDBParser.MBRCONTAINS:
			case MariaDBParser.MBRDISJOINT:
			case MariaDBParser.MBREQUAL:
			case MariaDBParser.MBRINTERSECTS:
			case MariaDBParser.MBROVERLAPS:
			case MariaDBParser.MBRTOUCHES:
			case MariaDBParser.MBRWITHIN:
			case MariaDBParser.MD5:
			case MariaDBParser.MLINEFROMTEXT:
			case MariaDBParser.MLINEFROMWKB:
			case MariaDBParser.MONTHNAME:
			case MariaDBParser.MPOINTFROMTEXT:
			case MariaDBParser.MPOINTFROMWKB:
			case MariaDBParser.MPOLYFROMTEXT:
			case MariaDBParser.MPOLYFROMWKB:
			case MariaDBParser.MULTILINESTRINGFROMTEXT:
			case MariaDBParser.MULTILINESTRINGFROMWKB:
			case MariaDBParser.MULTIPOINTFROMTEXT:
			case MariaDBParser.MULTIPOINTFROMWKB:
			case MariaDBParser.MULTIPOLYGONFROMTEXT:
			case MariaDBParser.MULTIPOLYGONFROMWKB:
			case MariaDBParser.NAME_CONST:
			case MariaDBParser.NULLIF:
			case MariaDBParser.NUMGEOMETRIES:
			case MariaDBParser.NUMINTERIORRINGS:
			case MariaDBParser.NUMPOINTS:
			case MariaDBParser.OCT:
			case MariaDBParser.OCTET_LENGTH:
			case MariaDBParser.ORD:
			case MariaDBParser.OVERLAPS:
			case MariaDBParser.PERIOD_ADD:
			case MariaDBParser.PERIOD_DIFF:
			case MariaDBParser.PI:
			case MariaDBParser.POINTFROMTEXT:
			case MariaDBParser.POINTFROMWKB:
			case MariaDBParser.POINTN:
			case MariaDBParser.POLYFROMTEXT:
			case MariaDBParser.POLYFROMWKB:
			case MariaDBParser.POLYGONFROMTEXT:
			case MariaDBParser.POLYGONFROMWKB:
			case MariaDBParser.POW:
			case MariaDBParser.POWER:
			case MariaDBParser.QUOTE:
			case MariaDBParser.RADIANS:
			case MariaDBParser.RAND:
			case MariaDBParser.RANDOM_BYTES:
			case MariaDBParser.RELEASE_LOCK:
			case MariaDBParser.REVERSE:
			case MariaDBParser.ROUND:
			case MariaDBParser.ROW_COUNT:
			case MariaDBParser.RPAD:
			case MariaDBParser.RTRIM:
			case MariaDBParser.SEC_TO_TIME:
			case MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE:
			case MariaDBParser.SESSION_USER:
			case MariaDBParser.SHA:
			case MariaDBParser.SHA1:
			case MariaDBParser.SHA2:
			case MariaDBParser.SCHEMA_NAME:
			case MariaDBParser.SIGN:
			case MariaDBParser.SIN:
			case MariaDBParser.SLEEP:
			case MariaDBParser.SOUNDEX:
			case MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS:
			case MariaDBParser.SQRT:
			case MariaDBParser.SRID:
			case MariaDBParser.STARTPOINT:
			case MariaDBParser.STRCMP:
			case MariaDBParser.STR_TO_DATE:
			case MariaDBParser.ST_AREA:
			case MariaDBParser.ST_ASBINARY:
			case MariaDBParser.ST_ASTEXT:
			case MariaDBParser.ST_ASWKB:
			case MariaDBParser.ST_ASWKT:
			case MariaDBParser.ST_BUFFER:
			case MariaDBParser.ST_CENTROID:
			case MariaDBParser.ST_CONTAINS:
			case MariaDBParser.ST_CROSSES:
			case MariaDBParser.ST_DIFFERENCE:
			case MariaDBParser.ST_DIMENSION:
			case MariaDBParser.ST_DISJOINT:
			case MariaDBParser.ST_DISTANCE:
			case MariaDBParser.ST_ENDPOINT:
			case MariaDBParser.ST_ENVELOPE:
			case MariaDBParser.ST_EQUALS:
			case MariaDBParser.ST_EXTERIORRING:
			case MariaDBParser.ST_GEOMCOLLFROMTEXT:
			case MariaDBParser.ST_GEOMCOLLFROMTXT:
			case MariaDBParser.ST_GEOMCOLLFROMWKB:
			case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
			case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB:
			case MariaDBParser.ST_GEOMETRYFROMTEXT:
			case MariaDBParser.ST_GEOMETRYFROMWKB:
			case MariaDBParser.ST_GEOMETRYN:
			case MariaDBParser.ST_GEOMETRYTYPE:
			case MariaDBParser.ST_GEOMFROMTEXT:
			case MariaDBParser.ST_GEOMFROMWKB:
			case MariaDBParser.ST_INTERIORRINGN:
			case MariaDBParser.ST_INTERSECTION:
			case MariaDBParser.ST_INTERSECTS:
			case MariaDBParser.ST_ISCLOSED:
			case MariaDBParser.ST_ISEMPTY:
			case MariaDBParser.ST_ISSIMPLE:
			case MariaDBParser.ST_LINEFROMTEXT:
			case MariaDBParser.ST_LINEFROMWKB:
			case MariaDBParser.ST_LINESTRINGFROMTEXT:
			case MariaDBParser.ST_LINESTRINGFROMWKB:
			case MariaDBParser.ST_NUMGEOMETRIES:
			case MariaDBParser.ST_NUMINTERIORRING:
			case MariaDBParser.ST_NUMINTERIORRINGS:
			case MariaDBParser.ST_NUMPOINTS:
			case MariaDBParser.ST_OVERLAPS:
			case MariaDBParser.ST_POINTFROMTEXT:
			case MariaDBParser.ST_POINTFROMWKB:
			case MariaDBParser.ST_POINTN:
			case MariaDBParser.ST_POLYFROMTEXT:
			case MariaDBParser.ST_POLYFROMWKB:
			case MariaDBParser.ST_POLYGONFROMTEXT:
			case MariaDBParser.ST_POLYGONFROMWKB:
			case MariaDBParser.ST_SRID:
			case MariaDBParser.ST_STARTPOINT:
			case MariaDBParser.ST_SYMDIFFERENCE:
			case MariaDBParser.ST_TOUCHES:
			case MariaDBParser.ST_UNION:
			case MariaDBParser.ST_WITHIN:
			case MariaDBParser.ST_X:
			case MariaDBParser.ST_Y:
			case MariaDBParser.SUBDATE:
			case MariaDBParser.SUBSTRING_INDEX:
			case MariaDBParser.SUBTIME:
			case MariaDBParser.SYSTEM_USER:
			case MariaDBParser.TAN:
			case MariaDBParser.TIMEDIFF:
			case MariaDBParser.TIMESTAMPADD:
			case MariaDBParser.TIMESTAMPDIFF:
			case MariaDBParser.TIME_FORMAT:
			case MariaDBParser.TIME_TO_SEC:
			case MariaDBParser.TOUCHES:
			case MariaDBParser.TO_BASE64:
			case MariaDBParser.TO_DAYS:
			case MariaDBParser.TO_SECONDS:
			case MariaDBParser.UCASE:
			case MariaDBParser.UNCOMPRESS:
			case MariaDBParser.UNCOMPRESSED_LENGTH:
			case MariaDBParser.UNHEX:
			case MariaDBParser.UNIX_TIMESTAMP:
			case MariaDBParser.UPDATEXML:
			case MariaDBParser.UPPER:
			case MariaDBParser.UUID:
			case MariaDBParser.UUID_SHORT:
			case MariaDBParser.VALIDATE_PASSWORD_STRENGTH:
			case MariaDBParser.VERSION:
			case MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case MariaDBParser.WEEKDAY:
			case MariaDBParser.WEEKOFYEAR:
			case MariaDBParser.WEIGHT_STRING:
			case MariaDBParser.WITHIN:
			case MariaDBParser.YEARWEEK:
			case MariaDBParser.Y_FUNCTION:
			case MariaDBParser.X_FUNCTION:
			case MariaDBParser.VIA:
			case MariaDBParser.LASTVAL:
			case MariaDBParser.NEXTVAL:
			case MariaDBParser.SETVAL:
			case MariaDBParser.PREVIOUS:
			case MariaDBParser.PERSISTENT:
			case MariaDBParser.BINLOG_MONITOR:
			case MariaDBParser.BINLOG_REPLAY:
			case MariaDBParser.FEDERATED_ADMIN:
			case MariaDBParser.READ_ONLY_ADMIN:
			case MariaDBParser.REPLICA:
			case MariaDBParser.REPLICAS:
			case MariaDBParser.REPLICATION_MASTER_ADMIN:
			case MariaDBParser.MONITOR:
			case MariaDBParser.READ_ONLY:
			case MariaDBParser.REPLAY:
			case MariaDBParser.MOD:
			case MariaDBParser.CHARSET_REVERSE_QOUTE_STRING:
			case MariaDBParser.STRING_LITERAL:
			case MariaDBParser.ID:
				{
				this.state = 3693;
				this.tableName();
				this.state = 3696;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.DOT) {
					{
					this.state = 3694;
					this.match(MariaDBParser.DOT);
					this.state = 3695;
					this.match(MariaDBParser.STAR);
					}
				}

				this.state = 3706;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 3698;
					this.match(MariaDBParser.COMMA);
					this.state = 3699;
					this.tableName();
					this.state = 3702;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MariaDBParser.DOT) {
						{
						this.state = 3700;
						this.match(MariaDBParser.DOT);
						this.state = 3701;
						this.match(MariaDBParser.STAR);
						}
					}

					}
					}
					this.state = 3708;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3709;
				this.match(MariaDBParser.FROM);
				this.state = 3710;
				this.tableSources();
				}
				break;
			case MariaDBParser.FROM:
				{
				this.state = 3712;
				this.match(MariaDBParser.FROM);
				this.state = 3713;
				this.tableName();
				this.state = 3716;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.DOT) {
					{
					this.state = 3714;
					this.match(MariaDBParser.DOT);
					this.state = 3715;
					this.match(MariaDBParser.STAR);
					}
				}

				this.state = 3726;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 3718;
					this.match(MariaDBParser.COMMA);
					this.state = 3719;
					this.tableName();
					this.state = 3722;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MariaDBParser.DOT) {
						{
						this.state = 3720;
						this.match(MariaDBParser.DOT);
						this.state = 3721;
						this.match(MariaDBParser.STAR);
						}
					}

					}
					}
					this.state = 3728;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3729;
				this.match(MariaDBParser.USING);
				this.state = 3730;
				this.tableSources();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3736;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.WHERE) {
				{
				this.state = 3734;
				this.match(MariaDBParser.WHERE);
				this.state = 3735;
				this.expression(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public handlerOpenStatement(): HandlerOpenStatementContext {
		let _localctx: HandlerOpenStatementContext = new HandlerOpenStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 228, MariaDBParser.RULE_handlerOpenStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3738;
			this.match(MariaDBParser.HANDLER);
			this.state = 3739;
			this.tableName();
			this.state = 3740;
			this.match(MariaDBParser.OPEN);
			this.state = 3745;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 534, this._ctx) ) {
			case 1:
				{
				this.state = 3742;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.AS) {
					{
					this.state = 3741;
					this.match(MariaDBParser.AS);
					}
				}

				this.state = 3744;
				this.uid();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public handlerReadIndexStatement(): HandlerReadIndexStatementContext {
		let _localctx: HandlerReadIndexStatementContext = new HandlerReadIndexStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 230, MariaDBParser.RULE_handlerReadIndexStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3747;
			this.match(MariaDBParser.HANDLER);
			this.state = 3748;
			this.tableName();
			this.state = 3749;
			this.match(MariaDBParser.READ);
			this.state = 3750;
			_localctx._index = this.uid();
			this.state = 3757;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.EQUAL_SYMBOL:
			case MariaDBParser.GREATER_SYMBOL:
			case MariaDBParser.LESS_SYMBOL:
			case MariaDBParser.EXCLAMATION_SYMBOL:
				{
				this.state = 3751;
				this.comparisonOperator();
				this.state = 3752;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 3753;
				this.constants();
				this.state = 3754;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;
			case MariaDBParser.FIRST:
			case MariaDBParser.LAST:
			case MariaDBParser.NEXT:
			case MariaDBParser.PREV:
				{
				this.state = 3756;
				_localctx._moveOrder = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.FIRST || _la === MariaDBParser.LAST || _la === MariaDBParser.NEXT || _la === MariaDBParser.PREV)) {
					_localctx._moveOrder = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3761;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.WHERE) {
				{
				this.state = 3759;
				this.match(MariaDBParser.WHERE);
				this.state = 3760;
				this.expression(0);
				}
			}

			this.state = 3765;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.LIMIT) {
				{
				this.state = 3763;
				this.match(MariaDBParser.LIMIT);
				this.state = 3764;
				this.limitClauseAtom();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public handlerReadStatement(): HandlerReadStatementContext {
		let _localctx: HandlerReadStatementContext = new HandlerReadStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 232, MariaDBParser.RULE_handlerReadStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3767;
			this.match(MariaDBParser.HANDLER);
			this.state = 3768;
			this.tableName();
			this.state = 3769;
			this.match(MariaDBParser.READ);
			this.state = 3770;
			_localctx._moveOrder = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MariaDBParser.FIRST || _la === MariaDBParser.NEXT)) {
				_localctx._moveOrder = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3773;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.WHERE) {
				{
				this.state = 3771;
				this.match(MariaDBParser.WHERE);
				this.state = 3772;
				this.expression(0);
				}
			}

			this.state = 3777;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.LIMIT) {
				{
				this.state = 3775;
				this.match(MariaDBParser.LIMIT);
				this.state = 3776;
				this.limitClauseAtom();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public handlerCloseStatement(): HandlerCloseStatementContext {
		let _localctx: HandlerCloseStatementContext = new HandlerCloseStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 234, MariaDBParser.RULE_handlerCloseStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3779;
			this.match(MariaDBParser.HANDLER);
			this.state = 3780;
			this.tableName();
			this.state = 3781;
			this.match(MariaDBParser.CLOSE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public singleUpdateStatement(): SingleUpdateStatementContext {
		let _localctx: SingleUpdateStatementContext = new SingleUpdateStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 236, MariaDBParser.RULE_singleUpdateStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3783;
			this.match(MariaDBParser.UPDATE);
			this.state = 3785;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.LOW_PRIORITY) {
				{
				this.state = 3784;
				_localctx._priority = this.match(MariaDBParser.LOW_PRIORITY);
				}
			}

			this.state = 3788;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.IGNORE) {
				{
				this.state = 3787;
				this.match(MariaDBParser.IGNORE);
				}
			}

			this.state = 3790;
			this.tableName();
			this.state = 3795;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MariaDBParser.AS) | (1 << MariaDBParser.ATTRIBUTE) | (1 << MariaDBParser.BODY) | (1 << MariaDBParser.BUCKETS) | (1 << MariaDBParser.CONDITION))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (MariaDBParser.CURRENT - 36)) | (1 << (MariaDBParser.CURRENT_ROLE - 36)) | (1 << (MariaDBParser.CURRENT_USER - 36)) | (1 << (MariaDBParser.DATABASE - 36)) | (1 << (MariaDBParser.DEFAULT - 36)) | (1 << (MariaDBParser.DIAGNOSTICS - 36)) | (1 << (MariaDBParser.EMPTY - 36)) | (1 << (MariaDBParser.EXCEPT - 36)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (MariaDBParser.GROUP - 73)) | (1 << (MariaDBParser.IF - 73)) | (1 << (MariaDBParser.IGNORED - 73)) | (1 << (MariaDBParser.INSERT - 73)) | (1 << (MariaDBParser.LATERAL - 73)) | (1 << (MariaDBParser.LEFT - 73)) | (1 << (MariaDBParser.LOCKED - 73)))) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & ((1 << (MariaDBParser.MAXVALUE - 110)) | (1 << (MariaDBParser.MINVALUE - 110)) | (1 << (MariaDBParser.NUMBER - 110)) | (1 << (MariaDBParser.OPTIONAL - 110)) | (1 << (MariaDBParser.ORDER - 110)) | (1 << (MariaDBParser.PRIMARY - 110)) | (1 << (MariaDBParser.PACKAGE - 110)))) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (MariaDBParser.REPLACE - 142)) | (1 << (MariaDBParser.RIGHT - 142)) | (1 << (MariaDBParser.SCHEMA - 142)) | (1 << (MariaDBParser.SKIP_ - 142)) | (1 << (MariaDBParser.STACKED - 142)) | (1 << (MariaDBParser.STATEMENT - 142)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MariaDBParser.DATE - 217)) | (1 << (MariaDBParser.TIME - 217)) | (1 << (MariaDBParser.TIMESTAMP - 217)) | (1 << (MariaDBParser.DATETIME - 217)) | (1 << (MariaDBParser.YEAR - 217)) | (1 << (MariaDBParser.BINARY - 217)) | (1 << (MariaDBParser.TEXT - 217)) | (1 << (MariaDBParser.ENUM - 217)) | (1 << (MariaDBParser.SERIAL - 217)))) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & ((1 << (MariaDBParser.JSON_ARRAY - 251)) | (1 << (MariaDBParser.JSON_ARRAYAGG - 251)) | (1 << (MariaDBParser.JSON_ARRAY_APPEND - 251)) | (1 << (MariaDBParser.JSON_ARRAY_INSERT - 251)) | (1 << (MariaDBParser.JSON_CONTAINS - 251)) | (1 << (MariaDBParser.JSON_CONTAINS_PATH - 251)) | (1 << (MariaDBParser.JSON_DEPTH - 251)) | (1 << (MariaDBParser.JSON_EXTRACT - 251)) | (1 << (MariaDBParser.JSON_INSERT - 251)) | (1 << (MariaDBParser.JSON_KEYS - 251)) | (1 << (MariaDBParser.JSON_LENGTH - 251)) | (1 << (MariaDBParser.JSON_MERGE - 251)) | (1 << (MariaDBParser.JSON_MERGE_PATCH - 251)) | (1 << (MariaDBParser.JSON_MERGE_PRESERVE - 251)) | (1 << (MariaDBParser.JSON_OBJECT - 251)) | (1 << (MariaDBParser.JSON_OBJECTAGG - 251)) | (1 << (MariaDBParser.JSON_OVERLAPS - 251)) | (1 << (MariaDBParser.JSON_PRETTY - 251)) | (1 << (MariaDBParser.JSON_QUOTE - 251)) | (1 << (MariaDBParser.JSON_REMOVE - 251)) | (1 << (MariaDBParser.JSON_REPLACE - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALID - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT - 251)) | (1 << (MariaDBParser.JSON_SEARCH - 251)) | (1 << (MariaDBParser.JSON_SET - 251)) | (1 << (MariaDBParser.JSON_STORAGE_FREE - 251)) | (1 << (MariaDBParser.JSON_STORAGE_SIZE - 251)) | (1 << (MariaDBParser.JSON_TABLE - 251)) | (1 << (MariaDBParser.JSON_TYPE - 251)) | (1 << (MariaDBParser.JSON_UNQUOTE - 251)) | (1 << (MariaDBParser.JSON_VALID - 251)) | (1 << (MariaDBParser.JSON_VALUE - 251)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (MariaDBParser.NESTED - 283)) | (1 << (MariaDBParser.ORDINALITY - 283)) | (1 << (MariaDBParser.PATH - 283)) | (1 << (MariaDBParser.AVG - 283)) | (1 << (MariaDBParser.BIT_AND - 283)) | (1 << (MariaDBParser.BIT_OR - 283)) | (1 << (MariaDBParser.BIT_XOR - 283)) | (1 << (MariaDBParser.COUNT - 283)) | (1 << (MariaDBParser.CUME_DIST - 283)) | (1 << (MariaDBParser.DENSE_RANK - 283)) | (1 << (MariaDBParser.FIRST_VALUE - 283)) | (1 << (MariaDBParser.GROUP_CONCAT - 283)) | (1 << (MariaDBParser.LAG - 283)) | (1 << (MariaDBParser.LAST_VALUE - 283)) | (1 << (MariaDBParser.LEAD - 283)) | (1 << (MariaDBParser.MAX - 283)) | (1 << (MariaDBParser.MIN - 283)) | (1 << (MariaDBParser.NTILE - 283)) | (1 << (MariaDBParser.NTH_VALUE - 283)) | (1 << (MariaDBParser.PERCENT_RANK - 283)) | (1 << (MariaDBParser.RANK - 283)) | (1 << (MariaDBParser.ROW_NUMBER - 283)) | (1 << (MariaDBParser.STD - 283)) | (1 << (MariaDBParser.STDDEV - 283)) | (1 << (MariaDBParser.STDDEV_POP - 283)) | (1 << (MariaDBParser.STDDEV_SAMP - 283)) | (1 << (MariaDBParser.SUM - 283)) | (1 << (MariaDBParser.VAR_POP - 283)) | (1 << (MariaDBParser.VAR_SAMP - 283)) | (1 << (MariaDBParser.VARIANCE - 283)) | (1 << (MariaDBParser.CURRENT_DATE - 283)) | (1 << (MariaDBParser.CURRENT_TIME - 283)))) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & ((1 << (MariaDBParser.CURRENT_TIMESTAMP - 315)) | (1 << (MariaDBParser.LOCALTIME - 315)) | (1 << (MariaDBParser.CURDATE - 315)) | (1 << (MariaDBParser.CURTIME - 315)) | (1 << (MariaDBParser.DATE_ADD - 315)) | (1 << (MariaDBParser.DATE_SUB - 315)) | (1 << (MariaDBParser.LOCALTIMESTAMP - 315)) | (1 << (MariaDBParser.NOW - 315)) | (1 << (MariaDBParser.POSITION - 315)) | (1 << (MariaDBParser.SUBSTR - 315)) | (1 << (MariaDBParser.SUBSTRING - 315)) | (1 << (MariaDBParser.SYSDATE - 315)) | (1 << (MariaDBParser.TRIM - 315)) | (1 << (MariaDBParser.UTC_DATE - 315)) | (1 << (MariaDBParser.UTC_TIME - 315)) | (1 << (MariaDBParser.UTC_TIMESTAMP - 315)) | (1 << (MariaDBParser.ACCOUNT - 315)) | (1 << (MariaDBParser.ACTION - 315)) | (1 << (MariaDBParser.AFTER - 315)) | (1 << (MariaDBParser.AGGREGATE - 315)) | (1 << (MariaDBParser.ALGORITHM - 315)) | (1 << (MariaDBParser.ANY - 315)) | (1 << (MariaDBParser.AT - 315)) | (1 << (MariaDBParser.AUTHORS - 315)) | (1 << (MariaDBParser.AUTOCOMMIT - 315)) | (1 << (MariaDBParser.AUTOEXTEND_SIZE - 315)) | (1 << (MariaDBParser.AUTO_INCREMENT - 315)) | (1 << (MariaDBParser.AVG_ROW_LENGTH - 315)) | (1 << (MariaDBParser.BEGIN - 315)) | (1 << (MariaDBParser.BINLOG - 315)) | (1 << (MariaDBParser.BIT - 315)))) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & ((1 << (MariaDBParser.BLOCK - 347)) | (1 << (MariaDBParser.BOOL - 347)) | (1 << (MariaDBParser.BOOLEAN - 347)) | (1 << (MariaDBParser.BTREE - 347)) | (1 << (MariaDBParser.CACHE - 347)) | (1 << (MariaDBParser.CASCADED - 347)) | (1 << (MariaDBParser.CHAIN - 347)) | (1 << (MariaDBParser.CHANGED - 347)) | (1 << (MariaDBParser.CHANNEL - 347)) | (1 << (MariaDBParser.CHECKSUM - 347)) | (1 << (MariaDBParser.PAGE_CHECKSUM - 347)) | (1 << (MariaDBParser.CIPHER - 347)) | (1 << (MariaDBParser.CLASS_ORIGIN - 347)) | (1 << (MariaDBParser.CLIENT - 347)) | (1 << (MariaDBParser.CLOSE - 347)) | (1 << (MariaDBParser.CLUSTERING - 347)) | (1 << (MariaDBParser.COALESCE - 347)) | (1 << (MariaDBParser.CODE - 347)) | (1 << (MariaDBParser.COLUMNS - 347)) | (1 << (MariaDBParser.COLUMN_FORMAT - 347)) | (1 << (MariaDBParser.COLUMN_NAME - 347)) | (1 << (MariaDBParser.COMMENT - 347)) | (1 << (MariaDBParser.COMMIT - 347)) | (1 << (MariaDBParser.COMPACT - 347)) | (1 << (MariaDBParser.COMPLETION - 347)) | (1 << (MariaDBParser.COMPRESSED - 347)) | (1 << (MariaDBParser.COMPRESSION - 347)) | (1 << (MariaDBParser.CONCURRENT - 347)) | (1 << (MariaDBParser.CONNECT - 347)) | (1 << (MariaDBParser.CONNECTION - 347)) | (1 << (MariaDBParser.CONSISTENT - 347)) | (1 << (MariaDBParser.CONSTRAINT_CATALOG - 347)))) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & ((1 << (MariaDBParser.CONSTRAINT_SCHEMA - 379)) | (1 << (MariaDBParser.CONSTRAINT_NAME - 379)) | (1 << (MariaDBParser.CONTAINS - 379)) | (1 << (MariaDBParser.CONTEXT - 379)) | (1 << (MariaDBParser.CONTRIBUTORS - 379)) | (1 << (MariaDBParser.COPY - 379)) | (1 << (MariaDBParser.CPU - 379)) | (1 << (MariaDBParser.CYCLE - 379)) | (1 << (MariaDBParser.CURSOR_NAME - 379)) | (1 << (MariaDBParser.DATA - 379)) | (1 << (MariaDBParser.DATAFILE - 379)) | (1 << (MariaDBParser.DEALLOCATE - 379)) | (1 << (MariaDBParser.DEFAULT_AUTH - 379)) | (1 << (MariaDBParser.DEFINER - 379)) | (1 << (MariaDBParser.DELAY_KEY_WRITE - 379)) | (1 << (MariaDBParser.DES_KEY_FILE - 379)) | (1 << (MariaDBParser.DIRECTORY - 379)) | (1 << (MariaDBParser.DISABLE - 379)) | (1 << (MariaDBParser.DISCARD - 379)) | (1 << (MariaDBParser.DISK - 379)) | (1 << (MariaDBParser.DO - 379)) | (1 << (MariaDBParser.DUMPFILE - 379)) | (1 << (MariaDBParser.DUPLICATE - 379)) | (1 << (MariaDBParser.DYNAMIC - 379)) | (1 << (MariaDBParser.ENABLE - 379)) | (1 << (MariaDBParser.ENCRYPTED - 379)) | (1 << (MariaDBParser.ENCRYPTION - 379)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ID - 379)) | (1 << (MariaDBParser.END - 379)) | (1 << (MariaDBParser.ENDS - 379)) | (1 << (MariaDBParser.ENGINE - 379)) | (1 << (MariaDBParser.ENGINES - 379)))) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & ((1 << (MariaDBParser.ERROR - 411)) | (1 << (MariaDBParser.ERRORS - 411)) | (1 << (MariaDBParser.ESCAPE - 411)) | (1 << (MariaDBParser.EVEN - 411)) | (1 << (MariaDBParser.EVENT - 411)) | (1 << (MariaDBParser.EVENTS - 411)) | (1 << (MariaDBParser.EVERY - 411)) | (1 << (MariaDBParser.EXCHANGE - 411)) | (1 << (MariaDBParser.EXCLUSIVE - 411)) | (1 << (MariaDBParser.EXPIRE - 411)) | (1 << (MariaDBParser.EXPORT - 411)) | (1 << (MariaDBParser.EXTENDED - 411)) | (1 << (MariaDBParser.EXTENT_SIZE - 411)) | (1 << (MariaDBParser.FAILED_LOGIN_ATTEMPTS - 411)) | (1 << (MariaDBParser.FAST - 411)) | (1 << (MariaDBParser.FAULTS - 411)) | (1 << (MariaDBParser.FIELDS - 411)) | (1 << (MariaDBParser.FILE_BLOCK_SIZE - 411)) | (1 << (MariaDBParser.FILTER - 411)) | (1 << (MariaDBParser.FIRST - 411)) | (1 << (MariaDBParser.FIXED - 411)) | (1 << (MariaDBParser.FLUSH - 411)) | (1 << (MariaDBParser.FOLLOWS - 411)) | (1 << (MariaDBParser.FOUND - 411)) | (1 << (MariaDBParser.FULL - 411)) | (1 << (MariaDBParser.FUNCTION - 411)) | (1 << (MariaDBParser.GENERAL - 411)) | (1 << (MariaDBParser.GLOBAL - 411)) | (1 << (MariaDBParser.GRANTS - 411)) | (1 << (MariaDBParser.GROUP_REPLICATION - 411)) | (1 << (MariaDBParser.HANDLER - 411)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (MariaDBParser.HASH - 443)) | (1 << (MariaDBParser.HELP - 443)) | (1 << (MariaDBParser.HISTORY - 443)) | (1 << (MariaDBParser.HOST - 443)) | (1 << (MariaDBParser.HOSTS - 443)) | (1 << (MariaDBParser.IDENTIFIED - 443)) | (1 << (MariaDBParser.IGNORE_SERVER_IDS - 443)) | (1 << (MariaDBParser.IMPORT - 443)) | (1 << (MariaDBParser.INCREMENT - 443)) | (1 << (MariaDBParser.INDEXES - 443)) | (1 << (MariaDBParser.INITIAL_SIZE - 443)) | (1 << (MariaDBParser.INPLACE - 443)) | (1 << (MariaDBParser.INSERT_METHOD - 443)) | (1 << (MariaDBParser.INSTALL - 443)) | (1 << (MariaDBParser.INSTANCE - 443)) | (1 << (MariaDBParser.INSTANT - 443)) | (1 << (MariaDBParser.INVISIBLE - 443)) | (1 << (MariaDBParser.INVOKER - 443)) | (1 << (MariaDBParser.IO - 443)) | (1 << (MariaDBParser.IO_THREAD - 443)) | (1 << (MariaDBParser.IPC - 443)) | (1 << (MariaDBParser.ISOLATION - 443)) | (1 << (MariaDBParser.ISSUER - 443)) | (1 << (MariaDBParser.JSON - 443)) | (1 << (MariaDBParser.KEY_BLOCK_SIZE - 443)) | (1 << (MariaDBParser.LANGUAGE - 443)) | (1 << (MariaDBParser.LAST - 443)) | (1 << (MariaDBParser.LEAVES - 443)) | (1 << (MariaDBParser.LESS - 443)) | (1 << (MariaDBParser.LEVEL - 443)) | (1 << (MariaDBParser.LIST - 443)) | (1 << (MariaDBParser.LOCAL - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (MariaDBParser.LOCALES - 475)) | (1 << (MariaDBParser.LOGFILE - 475)) | (1 << (MariaDBParser.LOGS - 475)) | (1 << (MariaDBParser.MASTER - 475)) | (1 << (MariaDBParser.MASTER_AUTO_POSITION - 475)) | (1 << (MariaDBParser.MASTER_CONNECT_RETRY - 475)) | (1 << (MariaDBParser.MASTER_DELAY - 475)) | (1 << (MariaDBParser.MASTER_HEARTBEAT_PERIOD - 475)) | (1 << (MariaDBParser.MASTER_HOST - 475)) | (1 << (MariaDBParser.MASTER_LOG_FILE - 475)) | (1 << (MariaDBParser.MASTER_LOG_POS - 475)) | (1 << (MariaDBParser.MASTER_PASSWORD - 475)) | (1 << (MariaDBParser.MASTER_PORT - 475)) | (1 << (MariaDBParser.MASTER_RETRY_COUNT - 475)) | (1 << (MariaDBParser.MASTER_SSL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CA - 475)) | (1 << (MariaDBParser.MASTER_SSL_CAPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_CERT - 475)) | (1 << (MariaDBParser.MASTER_SSL_CIPHER - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRLPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_KEY - 475)) | (1 << (MariaDBParser.MASTER_TLS_VERSION - 475)) | (1 << (MariaDBParser.MASTER_USER - 475)) | (1 << (MariaDBParser.MAX_CONNECTIONS_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_QUERIES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_ROWS - 475)) | (1 << (MariaDBParser.MAX_SIZE - 475)) | (1 << (MariaDBParser.MAX_UPDATES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_USER_CONNECTIONS - 475)) | (1 << (MariaDBParser.MEDIUM - 475)) | (1 << (MariaDBParser.MEMBER - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (MariaDBParser.MERGE - 507)) | (1 << (MariaDBParser.MESSAGE_TEXT - 507)) | (1 << (MariaDBParser.MID - 507)) | (1 << (MariaDBParser.MIGRATE - 507)) | (1 << (MariaDBParser.MIN_ROWS - 507)) | (1 << (MariaDBParser.MODE - 507)) | (1 << (MariaDBParser.MODIFY - 507)) | (1 << (MariaDBParser.MUTEX - 507)) | (1 << (MariaDBParser.MYSQL - 507)) | (1 << (MariaDBParser.MYSQL_ERRNO - 507)) | (1 << (MariaDBParser.NAME - 507)) | (1 << (MariaDBParser.NAMES - 507)) | (1 << (MariaDBParser.NCHAR - 507)) | (1 << (MariaDBParser.NEVER - 507)) | (1 << (MariaDBParser.NEXT - 507)) | (1 << (MariaDBParser.NO - 507)) | (1 << (MariaDBParser.NOCACHE - 507)) | (1 << (MariaDBParser.NOCOPY - 507)) | (1 << (MariaDBParser.NOCYCLE - 507)) | (1 << (MariaDBParser.NOMAXVALUE - 507)) | (1 << (MariaDBParser.NOMINVALUE - 507)) | (1 << (MariaDBParser.NOWAIT - 507)) | (1 << (MariaDBParser.NODEGROUP - 507)) | (1 << (MariaDBParser.NONE - 507)) | (1 << (MariaDBParser.ODBC - 507)) | (1 << (MariaDBParser.OFFLINE - 507)) | (1 << (MariaDBParser.OFFSET - 507)) | (1 << (MariaDBParser.OF - 507)) | (1 << (MariaDBParser.OJ - 507)) | (1 << (MariaDBParser.OLD_PASSWORD - 507)) | (1 << (MariaDBParser.ONE - 507)) | (1 << (MariaDBParser.ONLINE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (MariaDBParser.ONLY - 539)) | (1 << (MariaDBParser.OPEN - 539)) | (1 << (MariaDBParser.OPTIMIZER_COSTS - 539)) | (1 << (MariaDBParser.OPTIONS - 539)) | (1 << (MariaDBParser.OWNER - 539)) | (1 << (MariaDBParser.PACK_KEYS - 539)) | (1 << (MariaDBParser.PAGE - 539)) | (1 << (MariaDBParser.PARSER - 539)) | (1 << (MariaDBParser.PARTIAL - 539)) | (1 << (MariaDBParser.PARTITIONING - 539)) | (1 << (MariaDBParser.PARTITIONS - 539)) | (1 << (MariaDBParser.PASSWORD - 539)) | (1 << (MariaDBParser.PASSWORD_LOCK_TIME - 539)) | (1 << (MariaDBParser.PHASE - 539)) | (1 << (MariaDBParser.PLUGIN - 539)) | (1 << (MariaDBParser.PLUGIN_DIR - 539)) | (1 << (MariaDBParser.PLUGINS - 539)) | (1 << (MariaDBParser.PORT - 539)) | (1 << (MariaDBParser.PRECEDES - 539)) | (1 << (MariaDBParser.PREPARE - 539)) | (1 << (MariaDBParser.PRESERVE - 539)) | (1 << (MariaDBParser.PREV - 539)) | (1 << (MariaDBParser.PROCESSLIST - 539)) | (1 << (MariaDBParser.PROFILE - 539)) | (1 << (MariaDBParser.PROFILES - 539)) | (1 << (MariaDBParser.PROXY - 539)) | (1 << (MariaDBParser.QUERY - 539)) | (1 << (MariaDBParser.QUERY_RESPONSE_TIME - 539)) | (1 << (MariaDBParser.QUICK - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (MariaDBParser.REBUILD - 571)) | (1 << (MariaDBParser.RECOVER - 571)) | (1 << (MariaDBParser.RECURSIVE - 571)) | (1 << (MariaDBParser.REDO_BUFFER_SIZE - 571)) | (1 << (MariaDBParser.REDUNDANT - 571)) | (1 << (MariaDBParser.RELAY - 571)) | (1 << (MariaDBParser.RELAY_LOG_FILE - 571)) | (1 << (MariaDBParser.RELAY_LOG_POS - 571)) | (1 << (MariaDBParser.RELAYLOG - 571)) | (1 << (MariaDBParser.REMOVE - 571)) | (1 << (MariaDBParser.REORGANIZE - 571)) | (1 << (MariaDBParser.REPAIR - 571)) | (1 << (MariaDBParser.REPLICATE_DO_DB - 571)) | (1 << (MariaDBParser.REPLICATE_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_REWRITE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATION - 571)) | (1 << (MariaDBParser.RESET - 571)) | (1 << (MariaDBParser.RESTART - 571)) | (1 << (MariaDBParser.RESUME - 571)) | (1 << (MariaDBParser.RETURNED_SQLSTATE - 571)) | (1 << (MariaDBParser.RETURNS - 571)) | (1 << (MariaDBParser.REUSE - 571)) | (1 << (MariaDBParser.ROLE - 571)) | (1 << (MariaDBParser.ROLLBACK - 571)) | (1 << (MariaDBParser.ROLLUP - 571)) | (1 << (MariaDBParser.ROTATE - 571)) | (1 << (MariaDBParser.ROW - 571)))) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & ((1 << (MariaDBParser.ROWS - 603)) | (1 << (MariaDBParser.ROW_FORMAT - 603)) | (1 << (MariaDBParser.RTREE - 603)) | (1 << (MariaDBParser.SAVEPOINT - 603)) | (1 << (MariaDBParser.SCHEDULE - 603)) | (1 << (MariaDBParser.SECURITY - 603)) | (1 << (MariaDBParser.SEQUENCE - 603)) | (1 << (MariaDBParser.SERVER - 603)) | (1 << (MariaDBParser.SESSION - 603)) | (1 << (MariaDBParser.SHARE - 603)) | (1 << (MariaDBParser.SHARED - 603)) | (1 << (MariaDBParser.SIGNED - 603)) | (1 << (MariaDBParser.SIMPLE - 603)) | (1 << (MariaDBParser.SLAVE - 603)) | (1 << (MariaDBParser.SLAVES - 603)) | (1 << (MariaDBParser.SLOW - 603)) | (1 << (MariaDBParser.SNAPSHOT - 603)) | (1 << (MariaDBParser.SOCKET - 603)) | (1 << (MariaDBParser.SOME - 603)) | (1 << (MariaDBParser.SONAME - 603)) | (1 << (MariaDBParser.SOUNDS - 603)) | (1 << (MariaDBParser.SOURCE - 603)) | (1 << (MariaDBParser.SQL_AFTER_GTIDS - 603)) | (1 << (MariaDBParser.SQL_AFTER_MTS_GAPS - 603)) | (1 << (MariaDBParser.SQL_BEFORE_GTIDS - 603)) | (1 << (MariaDBParser.SQL_BUFFER_RESULT - 603)) | (1 << (MariaDBParser.SQL_CACHE - 603)) | (1 << (MariaDBParser.SQL_NO_CACHE - 603)) | (1 << (MariaDBParser.SQL_THREAD - 603)) | (1 << (MariaDBParser.START - 603)) | (1 << (MariaDBParser.STARTS - 603)) | (1 << (MariaDBParser.STATS_AUTO_RECALC - 603)))) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & ((1 << (MariaDBParser.STATS_PERSISTENT - 635)) | (1 << (MariaDBParser.STATS_SAMPLE_PAGES - 635)) | (1 << (MariaDBParser.STATUS - 635)) | (1 << (MariaDBParser.STOP - 635)) | (1 << (MariaDBParser.STORAGE - 635)) | (1 << (MariaDBParser.STRING - 635)) | (1 << (MariaDBParser.SUBCLASS_ORIGIN - 635)) | (1 << (MariaDBParser.SUBJECT - 635)) | (1 << (MariaDBParser.SUBPARTITION - 635)) | (1 << (MariaDBParser.SUBPARTITIONS - 635)) | (1 << (MariaDBParser.SUSPEND - 635)) | (1 << (MariaDBParser.SWAPS - 635)) | (1 << (MariaDBParser.SWITCHES - 635)) | (1 << (MariaDBParser.TABLE_NAME - 635)) | (1 << (MariaDBParser.TABLESPACE - 635)) | (1 << (MariaDBParser.TABLE_TYPE - 635)) | (1 << (MariaDBParser.TEMPORARY - 635)) | (1 << (MariaDBParser.TEMPTABLE - 635)) | (1 << (MariaDBParser.THAN - 635)) | (1 << (MariaDBParser.TRADITIONAL - 635)) | (1 << (MariaDBParser.TRANSACTION - 635)) | (1 << (MariaDBParser.TRANSACTIONAL - 635)) | (1 << (MariaDBParser.TRIGGERS - 635)) | (1 << (MariaDBParser.TRUNCATE - 635)) | (1 << (MariaDBParser.TYPES - 635)) | (1 << (MariaDBParser.UNBOUNDED - 635)) | (1 << (MariaDBParser.UNDEFINED - 635)) | (1 << (MariaDBParser.UNDOFILE - 635)) | (1 << (MariaDBParser.UNDO_BUFFER_SIZE - 635)) | (1 << (MariaDBParser.UNINSTALL - 635)) | (1 << (MariaDBParser.UNKNOWN - 635)))) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & ((1 << (MariaDBParser.UNTIL - 667)) | (1 << (MariaDBParser.UPGRADE - 667)) | (1 << (MariaDBParser.USER - 667)) | (1 << (MariaDBParser.USE_FRM - 667)) | (1 << (MariaDBParser.USER_RESOURCES - 667)) | (1 << (MariaDBParser.VALIDATION - 667)) | (1 << (MariaDBParser.VALUE - 667)) | (1 << (MariaDBParser.VARIABLES - 667)) | (1 << (MariaDBParser.VIEW - 667)) | (1 << (MariaDBParser.VIRTUAL - 667)) | (1 << (MariaDBParser.VISIBLE - 667)) | (1 << (MariaDBParser.WAIT - 667)) | (1 << (MariaDBParser.WARNINGS - 667)) | (1 << (MariaDBParser.WITHOUT - 667)) | (1 << (MariaDBParser.WORK - 667)) | (1 << (MariaDBParser.WRAPPER - 667)) | (1 << (MariaDBParser.WSREP_MEMBERSHIP - 667)) | (1 << (MariaDBParser.WSREP_STATUS - 667)) | (1 << (MariaDBParser.X509 - 667)) | (1 << (MariaDBParser.XA - 667)) | (1 << (MariaDBParser.XML - 667)) | (1 << (MariaDBParser.EUR - 667)) | (1 << (MariaDBParser.USA - 667)) | (1 << (MariaDBParser.JIS - 667)) | (1 << (MariaDBParser.ISO - 667)) | (1 << (MariaDBParser.INTERNAL - 667)) | (1 << (MariaDBParser.QUARTER - 667)) | (1 << (MariaDBParser.MONTH - 667)) | (1 << (MariaDBParser.DAY - 667)) | (1 << (MariaDBParser.HOUR - 667)))) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & ((1 << (MariaDBParser.MINUTE - 699)) | (1 << (MariaDBParser.WEEK - 699)) | (1 << (MariaDBParser.SECOND - 699)) | (1 << (MariaDBParser.MICROSECOND - 699)) | (1 << (MariaDBParser.USER_STATISTICS - 699)) | (1 << (MariaDBParser.CLIENT_STATISTICS - 699)) | (1 << (MariaDBParser.INDEX_STATISTICS - 699)) | (1 << (MariaDBParser.TABLE_STATISTICS - 699)) | (1 << (MariaDBParser.ADMIN - 699)) | (1 << (MariaDBParser.AUDIT_ADMIN - 699)) | (1 << (MariaDBParser.BACKUP_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ENCRYPTION_ADMIN - 699)) | (1 << (MariaDBParser.CLONE_ADMIN - 699)) | (1 << (MariaDBParser.CONNECTION_ADMIN - 699)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ADMIN - 699)) | (1 << (MariaDBParser.EXECUTE - 699)) | (1 << (MariaDBParser.FILE - 699)) | (1 << (MariaDBParser.FIREWALL_ADMIN - 699)) | (1 << (MariaDBParser.FIREWALL_USER - 699)) | (1 << (MariaDBParser.GROUP_REPLICATION_ADMIN - 699)) | (1 << (MariaDBParser.INNODB_REDO_LOG_ARCHIVE - 699)) | (1 << (MariaDBParser.INVOKE - 699)) | (1 << (MariaDBParser.LAMBDA - 699)) | (1 << (MariaDBParser.NDB_STORED_USER - 699)) | (1 << (MariaDBParser.PASSWORDLESS_USER_ADMIN - 699)))) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & ((1 << (MariaDBParser.PERSIST_RO_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.PRIVILEGES - 731)) | (1 << (MariaDBParser.PROCESS - 731)) | (1 << (MariaDBParser.RELOAD - 731)) | (1 << (MariaDBParser.REPLICATION_APPLIER - 731)) | (1 << (MariaDBParser.REPLICATION_SLAVE_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_USER - 731)) | (1 << (MariaDBParser.ROLE_ADMIN - 731)) | (1 << (MariaDBParser.ROUTINE - 731)) | (1 << (MariaDBParser.S3 - 731)) | (1 << (MariaDBParser.SESSION_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.SET_USER_ID - 731)) | (1 << (MariaDBParser.SHOW_ROUTINE - 731)) | (1 << (MariaDBParser.SHUTDOWN - 731)) | (1 << (MariaDBParser.SUPER - 731)) | (1 << (MariaDBParser.SYSTEM_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.TABLES - 731)) | (1 << (MariaDBParser.TABLE_ENCRYPTION_ADMIN - 731)) | (1 << (MariaDBParser.VERSION_TOKEN_ADMIN - 731)) | (1 << (MariaDBParser.XA_RECOVER_ADMIN - 731)) | (1 << (MariaDBParser.ARMSCII8 - 731)) | (1 << (MariaDBParser.ASCII - 731)) | (1 << (MariaDBParser.BIG5 - 731)) | (1 << (MariaDBParser.CP1250 - 731)) | (1 << (MariaDBParser.CP1251 - 731)) | (1 << (MariaDBParser.CP1256 - 731)) | (1 << (MariaDBParser.CP1257 - 731)) | (1 << (MariaDBParser.CP850 - 731)) | (1 << (MariaDBParser.CP852 - 731)) | (1 << (MariaDBParser.CP866 - 731)))) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & ((1 << (MariaDBParser.CP932 - 763)) | (1 << (MariaDBParser.DEC8 - 763)) | (1 << (MariaDBParser.EUCJPMS - 763)) | (1 << (MariaDBParser.EUCKR - 763)) | (1 << (MariaDBParser.GB18030 - 763)) | (1 << (MariaDBParser.GB2312 - 763)) | (1 << (MariaDBParser.GBK - 763)) | (1 << (MariaDBParser.GEOSTD8 - 763)) | (1 << (MariaDBParser.GREEK - 763)) | (1 << (MariaDBParser.HEBREW - 763)) | (1 << (MariaDBParser.HP8 - 763)) | (1 << (MariaDBParser.KEYBCS2 - 763)) | (1 << (MariaDBParser.KOI8R - 763)) | (1 << (MariaDBParser.KOI8U - 763)) | (1 << (MariaDBParser.LATIN1 - 763)) | (1 << (MariaDBParser.LATIN2 - 763)) | (1 << (MariaDBParser.LATIN5 - 763)) | (1 << (MariaDBParser.LATIN7 - 763)) | (1 << (MariaDBParser.MACCE - 763)) | (1 << (MariaDBParser.MACROMAN - 763)) | (1 << (MariaDBParser.SJIS - 763)) | (1 << (MariaDBParser.SWE7 - 763)) | (1 << (MariaDBParser.TIS620 - 763)) | (1 << (MariaDBParser.UCS2 - 763)) | (1 << (MariaDBParser.UJIS - 763)) | (1 << (MariaDBParser.UTF16 - 763)) | (1 << (MariaDBParser.UTF16LE - 763)) | (1 << (MariaDBParser.UTF32 - 763)) | (1 << (MariaDBParser.UTF8 - 763)) | (1 << (MariaDBParser.UTF8MB3 - 763)) | (1 << (MariaDBParser.UTF8MB4 - 763)) | (1 << (MariaDBParser.ARCHIVE - 763)))) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & ((1 << (MariaDBParser.BLACKHOLE - 795)) | (1 << (MariaDBParser.CSV - 795)) | (1 << (MariaDBParser.FEDERATED - 795)) | (1 << (MariaDBParser.INNODB - 795)) | (1 << (MariaDBParser.MEMORY - 795)) | (1 << (MariaDBParser.MRG_MYISAM - 795)) | (1 << (MariaDBParser.MYISAM - 795)) | (1 << (MariaDBParser.NDB - 795)) | (1 << (MariaDBParser.NDBCLUSTER - 795)) | (1 << (MariaDBParser.PERFORMANCE_SCHEMA - 795)) | (1 << (MariaDBParser.TOKUDB - 795)) | (1 << (MariaDBParser.REPEATABLE - 795)) | (1 << (MariaDBParser.COMMITTED - 795)) | (1 << (MariaDBParser.UNCOMMITTED - 795)) | (1 << (MariaDBParser.SERIALIZABLE - 795)) | (1 << (MariaDBParser.GEOMETRYCOLLECTION - 795)) | (1 << (MariaDBParser.LINESTRING - 795)) | (1 << (MariaDBParser.MULTILINESTRING - 795)) | (1 << (MariaDBParser.MULTIPOINT - 795)) | (1 << (MariaDBParser.MULTIPOLYGON - 795)) | (1 << (MariaDBParser.POINT - 795)) | (1 << (MariaDBParser.POLYGON - 795)) | (1 << (MariaDBParser.ABS - 795)) | (1 << (MariaDBParser.ACOS - 795)) | (1 << (MariaDBParser.ADDDATE - 795)) | (1 << (MariaDBParser.ADDTIME - 795)) | (1 << (MariaDBParser.AES_DECRYPT - 795)) | (1 << (MariaDBParser.AES_ENCRYPT - 795)) | (1 << (MariaDBParser.AREA - 795)) | (1 << (MariaDBParser.ASBINARY - 795)))) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & ((1 << (MariaDBParser.ASIN - 827)) | (1 << (MariaDBParser.ASTEXT - 827)) | (1 << (MariaDBParser.ASWKB - 827)) | (1 << (MariaDBParser.ASWKT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DECRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DERIVE - 827)) | (1 << (MariaDBParser.ASYMMETRIC_ENCRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_SIGN - 827)) | (1 << (MariaDBParser.ASYMMETRIC_VERIFY - 827)) | (1 << (MariaDBParser.ATAN - 827)) | (1 << (MariaDBParser.ATAN2 - 827)) | (1 << (MariaDBParser.BENCHMARK - 827)) | (1 << (MariaDBParser.BIN - 827)) | (1 << (MariaDBParser.BIT_COUNT - 827)) | (1 << (MariaDBParser.BIT_LENGTH - 827)) | (1 << (MariaDBParser.BUFFER - 827)) | (1 << (MariaDBParser.CATALOG_NAME - 827)) | (1 << (MariaDBParser.CEIL - 827)) | (1 << (MariaDBParser.CEILING - 827)) | (1 << (MariaDBParser.CENTROID - 827)) | (1 << (MariaDBParser.CHARACTER_LENGTH - 827)) | (1 << (MariaDBParser.CHARSET - 827)) | (1 << (MariaDBParser.CHAR_LENGTH - 827)) | (1 << (MariaDBParser.COERCIBILITY - 827)) | (1 << (MariaDBParser.COLLATION - 827)) | (1 << (MariaDBParser.COMPRESS - 827)) | (1 << (MariaDBParser.CONCAT - 827)) | (1 << (MariaDBParser.CONCAT_WS - 827)) | (1 << (MariaDBParser.CONNECTION_ID - 827)) | (1 << (MariaDBParser.CONV - 827)) | (1 << (MariaDBParser.CONVERT_TZ - 827)) | (1 << (MariaDBParser.COS - 827)))) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & ((1 << (MariaDBParser.COT - 859)) | (1 << (MariaDBParser.CRC32 - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY - 859)) | (1 << (MariaDBParser.CREATE_DH_PARAMETERS - 859)) | (1 << (MariaDBParser.CREATE_DIGEST - 859)) | (1 << (MariaDBParser.CROSSES - 859)) | (1 << (MariaDBParser.DATEDIFF - 859)) | (1 << (MariaDBParser.DATE_FORMAT - 859)) | (1 << (MariaDBParser.DAYNAME - 859)) | (1 << (MariaDBParser.DAYOFMONTH - 859)) | (1 << (MariaDBParser.DAYOFWEEK - 859)) | (1 << (MariaDBParser.DAYOFYEAR - 859)) | (1 << (MariaDBParser.DECODE - 859)) | (1 << (MariaDBParser.DEGREES - 859)) | (1 << (MariaDBParser.DES_DECRYPT - 859)) | (1 << (MariaDBParser.DES_ENCRYPT - 859)) | (1 << (MariaDBParser.DIMENSION - 859)) | (1 << (MariaDBParser.DISJOINT - 859)) | (1 << (MariaDBParser.ELT - 859)) | (1 << (MariaDBParser.ENCODE - 859)) | (1 << (MariaDBParser.ENCRYPT - 859)) | (1 << (MariaDBParser.ENDPOINT - 859)) | (1 << (MariaDBParser.ENGINE_ATTRIBUTE - 859)) | (1 << (MariaDBParser.ENVELOPE - 859)) | (1 << (MariaDBParser.EQUALS - 859)) | (1 << (MariaDBParser.EXP - 859)) | (1 << (MariaDBParser.EXPORT_SET - 859)) | (1 << (MariaDBParser.EXTERIORRING - 859)) | (1 << (MariaDBParser.EXTRACTVALUE - 859)) | (1 << (MariaDBParser.FIELD - 859)) | (1 << (MariaDBParser.FIND_IN_SET - 859)))) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & ((1 << (MariaDBParser.FLOOR - 891)) | (1 << (MariaDBParser.FORMAT - 891)) | (1 << (MariaDBParser.FOUND_ROWS - 891)) | (1 << (MariaDBParser.FROM_BASE64 - 891)) | (1 << (MariaDBParser.FROM_DAYS - 891)) | (1 << (MariaDBParser.FROM_UNIXTIME - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYN - 891)) | (1 << (MariaDBParser.GEOMETRYTYPE - 891)) | (1 << (MariaDBParser.GEOMFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMFROMWKB - 891)) | (1 << (MariaDBParser.GET_FORMAT - 891)) | (1 << (MariaDBParser.GET_LOCK - 891)) | (1 << (MariaDBParser.GLENGTH - 891)) | (1 << (MariaDBParser.GREATEST - 891)) | (1 << (MariaDBParser.GTID_SUBSET - 891)) | (1 << (MariaDBParser.GTID_SUBTRACT - 891)) | (1 << (MariaDBParser.HEX - 891)) | (1 << (MariaDBParser.IFNULL - 891)) | (1 << (MariaDBParser.INET6_ATON - 891)) | (1 << (MariaDBParser.INET6_NTOA - 891)) | (1 << (MariaDBParser.INET_ATON - 891)) | (1 << (MariaDBParser.INET_NTOA - 891)) | (1 << (MariaDBParser.INSTR - 891)) | (1 << (MariaDBParser.INTERIORRINGN - 891)) | (1 << (MariaDBParser.INTERSECTS - 891)) | (1 << (MariaDBParser.ISCLOSED - 891)))) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & ((1 << (MariaDBParser.ISEMPTY - 923)) | (1 << (MariaDBParser.ISNULL - 923)) | (1 << (MariaDBParser.ISSIMPLE - 923)) | (1 << (MariaDBParser.IS_FREE_LOCK - 923)) | (1 << (MariaDBParser.IS_IPV4 - 923)) | (1 << (MariaDBParser.IS_IPV4_COMPAT - 923)) | (1 << (MariaDBParser.IS_IPV4_MAPPED - 923)) | (1 << (MariaDBParser.IS_IPV6 - 923)) | (1 << (MariaDBParser.IS_USED_LOCK - 923)) | (1 << (MariaDBParser.LAST_INSERT_ID - 923)) | (1 << (MariaDBParser.LCASE - 923)) | (1 << (MariaDBParser.LEAST - 923)) | (1 << (MariaDBParser.LENGTH - 923)) | (1 << (MariaDBParser.LINEFROMTEXT - 923)) | (1 << (MariaDBParser.LINEFROMWKB - 923)) | (1 << (MariaDBParser.LINESTRINGFROMTEXT - 923)) | (1 << (MariaDBParser.LINESTRINGFROMWKB - 923)) | (1 << (MariaDBParser.LN - 923)) | (1 << (MariaDBParser.LOAD_FILE - 923)) | (1 << (MariaDBParser.LOCATE - 923)) | (1 << (MariaDBParser.LOG - 923)) | (1 << (MariaDBParser.LOG10 - 923)) | (1 << (MariaDBParser.LOG2 - 923)) | (1 << (MariaDBParser.LOWER - 923)) | (1 << (MariaDBParser.LPAD - 923)) | (1 << (MariaDBParser.LTRIM - 923)) | (1 << (MariaDBParser.MAKEDATE - 923)) | (1 << (MariaDBParser.MAKETIME - 923)) | (1 << (MariaDBParser.MAKE_SET - 923)) | (1 << (MariaDBParser.MASTER_POS_WAIT - 923)) | (1 << (MariaDBParser.MBRCONTAINS - 923)) | (1 << (MariaDBParser.MBRDISJOINT - 923)))) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & ((1 << (MariaDBParser.MBREQUAL - 955)) | (1 << (MariaDBParser.MBRINTERSECTS - 955)) | (1 << (MariaDBParser.MBROVERLAPS - 955)) | (1 << (MariaDBParser.MBRTOUCHES - 955)) | (1 << (MariaDBParser.MBRWITHIN - 955)) | (1 << (MariaDBParser.MD5 - 955)) | (1 << (MariaDBParser.MLINEFROMTEXT - 955)) | (1 << (MariaDBParser.MLINEFROMWKB - 955)) | (1 << (MariaDBParser.MONTHNAME - 955)) | (1 << (MariaDBParser.MPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MPOLYFROMTEXT - 955)) | (1 << (MariaDBParser.MPOLYFROMWKB - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMTEXT - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMWKB - 955)) | (1 << (MariaDBParser.NAME_CONST - 955)) | (1 << (MariaDBParser.NULLIF - 955)) | (1 << (MariaDBParser.NUMGEOMETRIES - 955)) | (1 << (MariaDBParser.NUMINTERIORRINGS - 955)) | (1 << (MariaDBParser.NUMPOINTS - 955)) | (1 << (MariaDBParser.OCT - 955)) | (1 << (MariaDBParser.OCTET_LENGTH - 955)) | (1 << (MariaDBParser.ORD - 955)) | (1 << (MariaDBParser.OVERLAPS - 955)) | (1 << (MariaDBParser.PERIOD_ADD - 955)) | (1 << (MariaDBParser.PERIOD_DIFF - 955)) | (1 << (MariaDBParser.PI - 955)) | (1 << (MariaDBParser.POINTFROMTEXT - 955)))) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & ((1 << (MariaDBParser.POINTFROMWKB - 987)) | (1 << (MariaDBParser.POINTN - 987)) | (1 << (MariaDBParser.POLYFROMTEXT - 987)) | (1 << (MariaDBParser.POLYFROMWKB - 987)) | (1 << (MariaDBParser.POLYGONFROMTEXT - 987)) | (1 << (MariaDBParser.POLYGONFROMWKB - 987)) | (1 << (MariaDBParser.POW - 987)) | (1 << (MariaDBParser.POWER - 987)) | (1 << (MariaDBParser.QUOTE - 987)) | (1 << (MariaDBParser.RADIANS - 987)) | (1 << (MariaDBParser.RAND - 987)) | (1 << (MariaDBParser.RANDOM_BYTES - 987)) | (1 << (MariaDBParser.RELEASE_LOCK - 987)) | (1 << (MariaDBParser.REVERSE - 987)) | (1 << (MariaDBParser.ROUND - 987)) | (1 << (MariaDBParser.ROW_COUNT - 987)) | (1 << (MariaDBParser.RPAD - 987)) | (1 << (MariaDBParser.RTRIM - 987)) | (1 << (MariaDBParser.SEC_TO_TIME - 987)) | (1 << (MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE - 987)) | (1 << (MariaDBParser.SESSION_USER - 987)) | (1 << (MariaDBParser.SHA - 987)) | (1 << (MariaDBParser.SHA1 - 987)) | (1 << (MariaDBParser.SHA2 - 987)) | (1 << (MariaDBParser.SCHEMA_NAME - 987)) | (1 << (MariaDBParser.SIGN - 987)) | (1 << (MariaDBParser.SIN - 987)) | (1 << (MariaDBParser.SLEEP - 987)) | (1 << (MariaDBParser.SOUNDEX - 987)) | (1 << (MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS - 987)) | (1 << (MariaDBParser.SQRT - 987)) | (1 << (MariaDBParser.SRID - 987)))) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & ((1 << (MariaDBParser.STARTPOINT - 1019)) | (1 << (MariaDBParser.STRCMP - 1019)) | (1 << (MariaDBParser.STR_TO_DATE - 1019)) | (1 << (MariaDBParser.ST_AREA - 1019)) | (1 << (MariaDBParser.ST_ASBINARY - 1019)) | (1 << (MariaDBParser.ST_ASTEXT - 1019)) | (1 << (MariaDBParser.ST_ASWKB - 1019)) | (1 << (MariaDBParser.ST_ASWKT - 1019)) | (1 << (MariaDBParser.ST_BUFFER - 1019)) | (1 << (MariaDBParser.ST_CENTROID - 1019)) | (1 << (MariaDBParser.ST_CONTAINS - 1019)) | (1 << (MariaDBParser.ST_CROSSES - 1019)) | (1 << (MariaDBParser.ST_DIFFERENCE - 1019)) | (1 << (MariaDBParser.ST_DIMENSION - 1019)) | (1 << (MariaDBParser.ST_DISJOINT - 1019)) | (1 << (MariaDBParser.ST_DISTANCE - 1019)) | (1 << (MariaDBParser.ST_ENDPOINT - 1019)) | (1 << (MariaDBParser.ST_ENVELOPE - 1019)) | (1 << (MariaDBParser.ST_EQUALS - 1019)) | (1 << (MariaDBParser.ST_EXTERIORRING - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYN - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYTYPE - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMWKB - 1019)) | (1 << (MariaDBParser.ST_INTERIORRINGN - 1019)))) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & ((1 << (MariaDBParser.ST_INTERSECTION - 1051)) | (1 << (MariaDBParser.ST_INTERSECTS - 1051)) | (1 << (MariaDBParser.ST_ISCLOSED - 1051)) | (1 << (MariaDBParser.ST_ISEMPTY - 1051)) | (1 << (MariaDBParser.ST_ISSIMPLE - 1051)) | (1 << (MariaDBParser.ST_LINEFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINEFROMWKB - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMWKB - 1051)) | (1 << (MariaDBParser.ST_NUMGEOMETRIES - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRING - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRINGS - 1051)) | (1 << (MariaDBParser.ST_NUMPOINTS - 1051)) | (1 << (MariaDBParser.ST_OVERLAPS - 1051)) | (1 << (MariaDBParser.ST_POINTFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POINTFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POINTN - 1051)) | (1 << (MariaDBParser.ST_POLYFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMWKB - 1051)) | (1 << (MariaDBParser.ST_SRID - 1051)) | (1 << (MariaDBParser.ST_STARTPOINT - 1051)) | (1 << (MariaDBParser.ST_SYMDIFFERENCE - 1051)) | (1 << (MariaDBParser.ST_TOUCHES - 1051)) | (1 << (MariaDBParser.ST_UNION - 1051)) | (1 << (MariaDBParser.ST_WITHIN - 1051)) | (1 << (MariaDBParser.ST_X - 1051)) | (1 << (MariaDBParser.ST_Y - 1051)) | (1 << (MariaDBParser.SUBDATE - 1051)) | (1 << (MariaDBParser.SUBSTRING_INDEX - 1051)) | (1 << (MariaDBParser.SUBTIME - 1051)))) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & ((1 << (MariaDBParser.SYSTEM_USER - 1083)) | (1 << (MariaDBParser.TAN - 1083)) | (1 << (MariaDBParser.TIMEDIFF - 1083)) | (1 << (MariaDBParser.TIMESTAMPADD - 1083)) | (1 << (MariaDBParser.TIMESTAMPDIFF - 1083)) | (1 << (MariaDBParser.TIME_FORMAT - 1083)) | (1 << (MariaDBParser.TIME_TO_SEC - 1083)) | (1 << (MariaDBParser.TOUCHES - 1083)) | (1 << (MariaDBParser.TO_BASE64 - 1083)) | (1 << (MariaDBParser.TO_DAYS - 1083)) | (1 << (MariaDBParser.TO_SECONDS - 1083)) | (1 << (MariaDBParser.UCASE - 1083)) | (1 << (MariaDBParser.UNCOMPRESS - 1083)) | (1 << (MariaDBParser.UNCOMPRESSED_LENGTH - 1083)) | (1 << (MariaDBParser.UNHEX - 1083)) | (1 << (MariaDBParser.UNIX_TIMESTAMP - 1083)) | (1 << (MariaDBParser.UPDATEXML - 1083)) | (1 << (MariaDBParser.UPPER - 1083)) | (1 << (MariaDBParser.UUID - 1083)) | (1 << (MariaDBParser.UUID_SHORT - 1083)) | (1 << (MariaDBParser.VALIDATE_PASSWORD_STRENGTH - 1083)) | (1 << (MariaDBParser.VERSION - 1083)) | (1 << (MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1083)) | (1 << (MariaDBParser.WEEKDAY - 1083)) | (1 << (MariaDBParser.WEEKOFYEAR - 1083)) | (1 << (MariaDBParser.WEIGHT_STRING - 1083)) | (1 << (MariaDBParser.WITHIN - 1083)) | (1 << (MariaDBParser.YEARWEEK - 1083)) | (1 << (MariaDBParser.Y_FUNCTION - 1083)) | (1 << (MariaDBParser.X_FUNCTION - 1083)) | (1 << (MariaDBParser.VIA - 1083)) | (1 << (MariaDBParser.LASTVAL - 1083)))) !== 0) || ((((_la - 1115)) & ~0x1F) === 0 && ((1 << (_la - 1115)) & ((1 << (MariaDBParser.NEXTVAL - 1115)) | (1 << (MariaDBParser.SETVAL - 1115)) | (1 << (MariaDBParser.PREVIOUS - 1115)) | (1 << (MariaDBParser.PERSISTENT - 1115)) | (1 << (MariaDBParser.BINLOG_MONITOR - 1115)) | (1 << (MariaDBParser.BINLOG_REPLAY - 1115)) | (1 << (MariaDBParser.FEDERATED_ADMIN - 1115)) | (1 << (MariaDBParser.READ_ONLY_ADMIN - 1115)) | (1 << (MariaDBParser.REPLICA - 1115)) | (1 << (MariaDBParser.REPLICAS - 1115)) | (1 << (MariaDBParser.REPLICATION_MASTER_ADMIN - 1115)) | (1 << (MariaDBParser.MONITOR - 1115)) | (1 << (MariaDBParser.READ_ONLY - 1115)) | (1 << (MariaDBParser.REPLAY - 1115)) | (1 << (MariaDBParser.MOD - 1115)))) !== 0) || ((((_la - 1166)) & ~0x1F) === 0 && ((1 << (_la - 1166)) & ((1 << (MariaDBParser.CHARSET_REVERSE_QOUTE_STRING - 1166)) | (1 << (MariaDBParser.STRING_LITERAL - 1166)) | (1 << (MariaDBParser.ID - 1166)))) !== 0)) {
				{
				this.state = 3792;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.AS) {
					{
					this.state = 3791;
					this.match(MariaDBParser.AS);
					}
				}

				this.state = 3794;
				this.uid();
				}
			}

			this.state = 3797;
			this.match(MariaDBParser.SET);
			this.state = 3798;
			this.updatedElement();
			this.state = 3803;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.COMMA) {
				{
				{
				this.state = 3799;
				this.match(MariaDBParser.COMMA);
				this.state = 3800;
				this.updatedElement();
				}
				}
				this.state = 3805;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3808;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.WHERE) {
				{
				this.state = 3806;
				this.match(MariaDBParser.WHERE);
				this.state = 3807;
				this.expression(0);
				}
			}

			this.state = 3811;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.ORDER) {
				{
				this.state = 3810;
				this.orderByClause();
				}
			}

			this.state = 3814;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.LIMIT) {
				{
				this.state = 3813;
				this.limitClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public multipleUpdateStatement(): MultipleUpdateStatementContext {
		let _localctx: MultipleUpdateStatementContext = new MultipleUpdateStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 238, MariaDBParser.RULE_multipleUpdateStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3816;
			this.match(MariaDBParser.UPDATE);
			this.state = 3818;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.LOW_PRIORITY) {
				{
				this.state = 3817;
				_localctx._priority = this.match(MariaDBParser.LOW_PRIORITY);
				}
			}

			this.state = 3821;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.IGNORE) {
				{
				this.state = 3820;
				this.match(MariaDBParser.IGNORE);
				}
			}

			this.state = 3823;
			this.tableSources();
			this.state = 3824;
			this.match(MariaDBParser.SET);
			this.state = 3825;
			this.updatedElement();
			this.state = 3830;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.COMMA) {
				{
				{
				this.state = 3826;
				this.match(MariaDBParser.COMMA);
				this.state = 3827;
				this.updatedElement();
				}
				}
				this.state = 3832;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3835;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.WHERE) {
				{
				this.state = 3833;
				this.match(MariaDBParser.WHERE);
				this.state = 3834;
				this.expression(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public orderByClause(): OrderByClauseContext {
		let _localctx: OrderByClauseContext = new OrderByClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 240, MariaDBParser.RULE_orderByClause);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3837;
			this.match(MariaDBParser.ORDER);
			this.state = 3838;
			this.match(MariaDBParser.BY);
			this.state = 3839;
			this.orderByExpression();
			this.state = 3844;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 552, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3840;
					this.match(MariaDBParser.COMMA);
					this.state = 3841;
					this.orderByExpression();
					}
					}
				}
				this.state = 3846;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 552, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public orderByExpression(): OrderByExpressionContext {
		let _localctx: OrderByExpressionContext = new OrderByExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 242, MariaDBParser.RULE_orderByExpression);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3847;
			this.expression(0);
			this.state = 3849;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 553, this._ctx) ) {
			case 1:
				{
				this.state = 3848;
				_localctx._order = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.ASC || _la === MariaDBParser.DESC)) {
					_localctx._order = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableSources(): TableSourcesContext {
		let _localctx: TableSourcesContext = new TableSourcesContext(this._ctx, this.state);
		this.enterRule(_localctx, 244, MariaDBParser.RULE_tableSources);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3851;
			this.tableSource();
			this.state = 3856;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 554, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3852;
					this.match(MariaDBParser.COMMA);
					this.state = 3853;
					this.tableSource();
					}
					}
				}
				this.state = 3858;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 554, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableSource(): TableSourceContext {
		let _localctx: TableSourceContext = new TableSourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 246, MariaDBParser.RULE_tableSource);
		let _la: number;
		try {
			let _alt: number;
			this.state = 3877;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 557, this._ctx) ) {
			case 1:
				_localctx = new TableSourceBaseContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3859;
				this.tableSourceItem();
				this.state = 3863;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 555, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3860;
						this.joinPart();
						}
						}
					}
					this.state = 3865;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 555, this._ctx);
				}
				}
				break;

			case 2:
				_localctx = new TableSourceNestedContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3866;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 3867;
				this.tableSourceItem();
				this.state = 3871;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.CROSS || ((((_la - 83)) & ~0x1F) === 0 && ((1 << (_la - 83)) & ((1 << (MariaDBParser.INNER - 83)) | (1 << (MariaDBParser.JOIN - 83)) | (1 << (MariaDBParser.LEFT - 83)) | (1 << (MariaDBParser.NATURAL - 83)))) !== 0) || _la === MariaDBParser.RIGHT || _la === MariaDBParser.STRAIGHT_JOIN) {
					{
					{
					this.state = 3868;
					this.joinPart();
					}
					}
					this.state = 3873;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3874;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;

			case 3:
				_localctx = new TableJsonContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3876;
				this.jsonTable();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableSourceItem(): TableSourceItemContext {
		let _localctx: TableSourceItemContext = new TableSourceItemContext(this._ctx, this.state);
		this.enterRule(_localctx, 248, MariaDBParser.RULE_tableSourceItem);
		let _la: number;
		try {
			let _alt: number;
			this.state = 3919;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 565, this._ctx) ) {
			case 1:
				_localctx = new AtomTableItemContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3879;
				this.tableName();
				this.state = 3885;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.PARTITION) {
					{
					this.state = 3880;
					this.match(MariaDBParser.PARTITION);
					this.state = 3881;
					this.match(MariaDBParser.LR_BRACKET);
					this.state = 3882;
					this.uidList();
					this.state = 3883;
					this.match(MariaDBParser.RR_BRACKET);
					}
				}

				this.state = 3891;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 560, this._ctx) ) {
				case 1:
					{
					this.state = 3888;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MariaDBParser.AS) {
						{
						this.state = 3887;
						this.match(MariaDBParser.AS);
						}
					}

					this.state = 3890;
					(_localctx as AtomTableItemContext)._alias = this.uid();
					}
					break;
				}
				this.state = 3901;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 562, this._ctx) ) {
				case 1:
					{
					this.state = 3893;
					this.indexHint();
					this.state = 3898;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 561, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3894;
							this.match(MariaDBParser.COMMA);
							this.state = 3895;
							this.indexHint();
							}
							}
						}
						this.state = 3900;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 561, this._ctx);
					}
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new SubqueryTableItemContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3908;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 563, this._ctx) ) {
				case 1:
					{
					this.state = 3903;
					this.selectStatement();
					}
					break;

				case 2:
					{
					this.state = 3904;
					this.match(MariaDBParser.LR_BRACKET);
					this.state = 3905;
					(_localctx as SubqueryTableItemContext)._parenthesisSubquery = this.selectStatement();
					this.state = 3906;
					this.match(MariaDBParser.RR_BRACKET);
					}
					break;
				}
				this.state = 3911;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.AS) {
					{
					this.state = 3910;
					this.match(MariaDBParser.AS);
					}
				}

				this.state = 3913;
				(_localctx as SubqueryTableItemContext)._alias = this.uid();
				}
				break;

			case 3:
				_localctx = new TableSourcesItemContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3915;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 3916;
				this.tableSources();
				this.state = 3917;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexHint(): IndexHintContext {
		let _localctx: IndexHintContext = new IndexHintContext(this._ctx, this.state);
		this.enterRule(_localctx, 250, MariaDBParser.RULE_indexHint);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3921;
			_localctx._indexHintAction = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MariaDBParser.FORCE || _la === MariaDBParser.IGNORE || _la === MariaDBParser.USE)) {
				_localctx._indexHintAction = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3922;
			_localctx._keyFormat = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MariaDBParser.INDEX || _la === MariaDBParser.KEY)) {
				_localctx._keyFormat = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3925;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.FOR) {
				{
				this.state = 3923;
				this.match(MariaDBParser.FOR);
				this.state = 3924;
				this.indexHintType();
				}
			}

			this.state = 3927;
			this.match(MariaDBParser.LR_BRACKET);
			this.state = 3928;
			this.uidList();
			this.state = 3929;
			this.match(MariaDBParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexHintType(): IndexHintTypeContext {
		let _localctx: IndexHintTypeContext = new IndexHintTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 252, MariaDBParser.RULE_indexHintType);
		try {
			this.state = 3936;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.JOIN:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3931;
				this.match(MariaDBParser.JOIN);
				}
				break;
			case MariaDBParser.ORDER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3932;
				this.match(MariaDBParser.ORDER);
				this.state = 3933;
				this.match(MariaDBParser.BY);
				}
				break;
			case MariaDBParser.GROUP:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3934;
				this.match(MariaDBParser.GROUP);
				this.state = 3935;
				this.match(MariaDBParser.BY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public joinPart(): JoinPartContext {
		let _localctx: JoinPartContext = new JoinPartContext(this._ctx, this.state);
		this.enterRule(_localctx, 254, MariaDBParser.RULE_joinPart);
		let _la: number;
		try {
			this.state = 3988;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.CROSS:
			case MariaDBParser.INNER:
			case MariaDBParser.JOIN:
				_localctx = new InnerJoinContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3939;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.CROSS || _la === MariaDBParser.INNER) {
					{
					this.state = 3938;
					_la = this._input.LA(1);
					if (!(_la === MariaDBParser.CROSS || _la === MariaDBParser.INNER)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 3941;
				this.match(MariaDBParser.JOIN);
				this.state = 3943;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 569, this._ctx) ) {
				case 1:
					{
					this.state = 3942;
					this.match(MariaDBParser.LATERAL);
					}
					break;
				}
				this.state = 3945;
				this.tableSourceItem();
				this.state = 3953;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 570, this._ctx) ) {
				case 1:
					{
					this.state = 3946;
					this.match(MariaDBParser.ON);
					this.state = 3947;
					this.expression(0);
					}
					break;

				case 2:
					{
					this.state = 3948;
					this.match(MariaDBParser.USING);
					this.state = 3949;
					this.match(MariaDBParser.LR_BRACKET);
					this.state = 3950;
					this.uidList();
					this.state = 3951;
					this.match(MariaDBParser.RR_BRACKET);
					}
					break;
				}
				}
				break;
			case MariaDBParser.STRAIGHT_JOIN:
				_localctx = new StraightJoinContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3955;
				this.match(MariaDBParser.STRAIGHT_JOIN);
				this.state = 3956;
				this.tableSourceItem();
				this.state = 3959;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 571, this._ctx) ) {
				case 1:
					{
					this.state = 3957;
					this.match(MariaDBParser.ON);
					this.state = 3958;
					this.expression(0);
					}
					break;
				}
				}
				break;
			case MariaDBParser.LEFT:
			case MariaDBParser.RIGHT:
				_localctx = new OuterJoinContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3961;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.LEFT || _la === MariaDBParser.RIGHT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3963;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.OUTER) {
					{
					this.state = 3962;
					this.match(MariaDBParser.OUTER);
					}
				}

				this.state = 3965;
				this.match(MariaDBParser.JOIN);
				this.state = 3967;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 573, this._ctx) ) {
				case 1:
					{
					this.state = 3966;
					this.match(MariaDBParser.LATERAL);
					}
					break;
				}
				this.state = 3969;
				this.tableSourceItem();
				this.state = 3977;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.ON:
					{
					this.state = 3970;
					this.match(MariaDBParser.ON);
					this.state = 3971;
					this.expression(0);
					}
					break;
				case MariaDBParser.USING:
					{
					this.state = 3972;
					this.match(MariaDBParser.USING);
					this.state = 3973;
					this.match(MariaDBParser.LR_BRACKET);
					this.state = 3974;
					this.uidList();
					this.state = 3975;
					this.match(MariaDBParser.RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case MariaDBParser.NATURAL:
				_localctx = new NaturalJoinContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3979;
				this.match(MariaDBParser.NATURAL);
				this.state = 3984;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.LEFT || _la === MariaDBParser.RIGHT) {
					{
					this.state = 3980;
					_la = this._input.LA(1);
					if (!(_la === MariaDBParser.LEFT || _la === MariaDBParser.RIGHT)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 3982;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MariaDBParser.OUTER) {
						{
						this.state = 3981;
						this.match(MariaDBParser.OUTER);
						}
					}

					}
				}

				this.state = 3986;
				this.match(MariaDBParser.JOIN);
				this.state = 3987;
				this.tableSourceItem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public queryExpression(): QueryExpressionContext {
		let _localctx: QueryExpressionContext = new QueryExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 256, MariaDBParser.RULE_queryExpression);
		try {
			this.state = 3998;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 578, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3990;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 3991;
				this.querySpecification();
				this.state = 3992;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3994;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 3995;
				this.queryExpression();
				this.state = 3996;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public queryExpressionNointo(): QueryExpressionNointoContext {
		let _localctx: QueryExpressionNointoContext = new QueryExpressionNointoContext(this._ctx, this.state);
		this.enterRule(_localctx, 258, MariaDBParser.RULE_queryExpressionNointo);
		try {
			this.state = 4008;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 579, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4000;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 4001;
				this.querySpecificationNointo();
				this.state = 4002;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4004;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 4005;
				this.queryExpressionNointo();
				this.state = 4006;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public querySpecification(): QuerySpecificationContext {
		let _localctx: QuerySpecificationContext = new QuerySpecificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 260, MariaDBParser.RULE_querySpecification);
		let _la: number;
		try {
			let _alt: number;
			this.state = 4068;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 596, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4010;
				this.match(MariaDBParser.SELECT);
				this.state = 4014;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 580, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4011;
						this.selectSpec();
						}
						}
					}
					this.state = 4016;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 580, this._ctx);
				}
				this.state = 4017;
				this.selectElements();
				this.state = 4019;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 581, this._ctx) ) {
				case 1:
					{
					this.state = 4018;
					this.selectIntoExpression();
					}
					break;
				}
				this.state = 4022;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 582, this._ctx) ) {
				case 1:
					{
					this.state = 4021;
					this.fromClause();
					}
					break;
				}
				this.state = 4025;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 583, this._ctx) ) {
				case 1:
					{
					this.state = 4024;
					this.groupByClause();
					}
					break;
				}
				this.state = 4028;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.HAVING) {
					{
					this.state = 4027;
					this.havingClause();
					}
				}

				this.state = 4031;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.WINDOW) {
					{
					this.state = 4030;
					this.windowClause();
					}
				}

				this.state = 4034;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 586, this._ctx) ) {
				case 1:
					{
					this.state = 4033;
					this.orderByClause();
					}
					break;
				}
				this.state = 4037;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 587, this._ctx) ) {
				case 1:
					{
					this.state = 4036;
					this.limitClause();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4039;
				this.match(MariaDBParser.SELECT);
				this.state = 4043;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 588, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4040;
						this.selectSpec();
						}
						}
					}
					this.state = 4045;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 588, this._ctx);
				}
				this.state = 4046;
				this.selectElements();
				this.state = 4048;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 589, this._ctx) ) {
				case 1:
					{
					this.state = 4047;
					this.fromClause();
					}
					break;
				}
				this.state = 4051;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 590, this._ctx) ) {
				case 1:
					{
					this.state = 4050;
					this.groupByClause();
					}
					break;
				}
				this.state = 4054;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.HAVING) {
					{
					this.state = 4053;
					this.havingClause();
					}
				}

				this.state = 4057;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.WINDOW) {
					{
					this.state = 4056;
					this.windowClause();
					}
				}

				this.state = 4060;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 593, this._ctx) ) {
				case 1:
					{
					this.state = 4059;
					this.orderByClause();
					}
					break;
				}
				this.state = 4063;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 594, this._ctx) ) {
				case 1:
					{
					this.state = 4062;
					this.limitClause();
					}
					break;
				}
				this.state = 4066;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.INTO) {
					{
					this.state = 4065;
					this.selectIntoExpression();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public querySpecificationNointo(): QuerySpecificationNointoContext {
		let _localctx: QuerySpecificationNointoContext = new QuerySpecificationNointoContext(this._ctx, this.state);
		this.enterRule(_localctx, 262, MariaDBParser.RULE_querySpecificationNointo);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4070;
			this.match(MariaDBParser.SELECT);
			this.state = 4074;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 597, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4071;
					this.selectSpec();
					}
					}
				}
				this.state = 4076;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 597, this._ctx);
			}
			this.state = 4077;
			this.selectElements();
			this.state = 4079;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 598, this._ctx) ) {
			case 1:
				{
				this.state = 4078;
				this.fromClause();
				}
				break;
			}
			this.state = 4082;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 599, this._ctx) ) {
			case 1:
				{
				this.state = 4081;
				this.groupByClause();
				}
				break;
			}
			this.state = 4085;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.HAVING) {
				{
				this.state = 4084;
				this.havingClause();
				}
			}

			this.state = 4088;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.WINDOW) {
				{
				this.state = 4087;
				this.windowClause();
				}
			}

			this.state = 4091;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 602, this._ctx) ) {
			case 1:
				{
				this.state = 4090;
				this.orderByClause();
				}
				break;
			}
			this.state = 4094;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 603, this._ctx) ) {
			case 1:
				{
				this.state = 4093;
				this.limitClause();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unionParenthesis(): UnionParenthesisContext {
		let _localctx: UnionParenthesisContext = new UnionParenthesisContext(this._ctx, this.state);
		this.enterRule(_localctx, 264, MariaDBParser.RULE_unionParenthesis);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4096;
			this.match(MariaDBParser.UNION);
			this.state = 4098;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.ALL || _la === MariaDBParser.DISTINCT) {
				{
				this.state = 4097;
				_localctx._unionType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.ALL || _la === MariaDBParser.DISTINCT)) {
					_localctx._unionType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 4100;
			this.queryExpressionNointo();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unionStatement(): UnionStatementContext {
		let _localctx: UnionStatementContext = new UnionStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 266, MariaDBParser.RULE_unionStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4102;
			this.match(MariaDBParser.UNION);
			this.state = 4104;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.ALL || _la === MariaDBParser.DISTINCT) {
				{
				this.state = 4103;
				_localctx._unionType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.ALL || _la === MariaDBParser.DISTINCT)) {
					_localctx._unionType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 4108;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.SELECT:
				{
				this.state = 4106;
				this.querySpecificationNointo();
				}
				break;
			case MariaDBParser.LR_BRACKET:
				{
				this.state = 4107;
				this.queryExpressionNointo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lateralStatement(): LateralStatementContext {
		let _localctx: LateralStatementContext = new LateralStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 268, MariaDBParser.RULE_lateralStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4110;
			this.match(MariaDBParser.LATERAL);
			this.state = 4125;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 610, this._ctx) ) {
			case 1:
				{
				this.state = 4111;
				this.querySpecificationNointo();
				}
				break;

			case 2:
				{
				this.state = 4112;
				this.queryExpressionNointo();
				}
				break;

			case 3:
				{
				{
				this.state = 4113;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 4116;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.SELECT:
					{
					this.state = 4114;
					this.querySpecificationNointo();
					}
					break;
				case MariaDBParser.LR_BRACKET:
					{
					this.state = 4115;
					this.queryExpressionNointo();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4118;
				this.match(MariaDBParser.RR_BRACKET);
				this.state = 4123;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 609, this._ctx) ) {
				case 1:
					{
					this.state = 4120;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MariaDBParser.AS) {
						{
						this.state = 4119;
						this.match(MariaDBParser.AS);
						}
					}

					this.state = 4122;
					this.uid();
					}
					break;
				}
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public jsonTable(): JsonTableContext {
		let _localctx: JsonTableContext = new JsonTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 270, MariaDBParser.RULE_jsonTable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4127;
			this.match(MariaDBParser.JSON_TABLE);
			this.state = 4128;
			this.match(MariaDBParser.LR_BRACKET);
			this.state = 4129;
			this.match(MariaDBParser.STRING_LITERAL);
			this.state = 4130;
			this.match(MariaDBParser.COMMA);
			this.state = 4131;
			this.match(MariaDBParser.STRING_LITERAL);
			this.state = 4132;
			this.match(MariaDBParser.COLUMNS);
			this.state = 4133;
			this.match(MariaDBParser.LR_BRACKET);
			this.state = 4134;
			this.jsonColumnList();
			this.state = 4135;
			this.match(MariaDBParser.RR_BRACKET);
			this.state = 4136;
			this.match(MariaDBParser.RR_BRACKET);
			this.state = 4141;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 612, this._ctx) ) {
			case 1:
				{
				this.state = 4138;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.AS) {
					{
					this.state = 4137;
					this.match(MariaDBParser.AS);
					}
				}

				this.state = 4140;
				this.uid();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public jsonColumnList(): JsonColumnListContext {
		let _localctx: JsonColumnListContext = new JsonColumnListContext(this._ctx, this.state);
		this.enterRule(_localctx, 272, MariaDBParser.RULE_jsonColumnList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4143;
			this.jsonColumn();
			this.state = 4148;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.COMMA) {
				{
				{
				this.state = 4144;
				this.match(MariaDBParser.COMMA);
				this.state = 4145;
				this.jsonColumn();
				}
				}
				this.state = 4150;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public jsonColumn(): JsonColumnContext {
		let _localctx: JsonColumnContext = new JsonColumnContext(this._ctx, this.state);
		this.enterRule(_localctx, 274, MariaDBParser.RULE_jsonColumn);
		let _la: number;
		try {
			this.state = 4180;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 619, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4151;
				this.fullColumnName();
				this.state = 4168;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.FOR:
					{
					this.state = 4152;
					this.match(MariaDBParser.FOR);
					this.state = 4153;
					this.match(MariaDBParser.ORDINALITY);
					}
					break;
				case MariaDBParser.CHARACTER:
				case MariaDBParser.SET:
				case MariaDBParser.TINYINT:
				case MariaDBParser.SMALLINT:
				case MariaDBParser.MEDIUMINT:
				case MariaDBParser.MIDDLEINT:
				case MariaDBParser.INT:
				case MariaDBParser.INT1:
				case MariaDBParser.INT2:
				case MariaDBParser.INT3:
				case MariaDBParser.INT4:
				case MariaDBParser.INT8:
				case MariaDBParser.INTEGER:
				case MariaDBParser.BIGINT:
				case MariaDBParser.REAL:
				case MariaDBParser.DOUBLE:
				case MariaDBParser.FLOAT:
				case MariaDBParser.FLOAT4:
				case MariaDBParser.FLOAT8:
				case MariaDBParser.DECIMAL:
				case MariaDBParser.DEC:
				case MariaDBParser.NUMERIC:
				case MariaDBParser.DATE:
				case MariaDBParser.TIME:
				case MariaDBParser.TIMESTAMP:
				case MariaDBParser.DATETIME:
				case MariaDBParser.YEAR:
				case MariaDBParser.CHAR:
				case MariaDBParser.VARCHAR:
				case MariaDBParser.NVARCHAR:
				case MariaDBParser.NATIONAL:
				case MariaDBParser.BINARY:
				case MariaDBParser.VARBINARY:
				case MariaDBParser.TINYBLOB:
				case MariaDBParser.BLOB:
				case MariaDBParser.MEDIUMBLOB:
				case MariaDBParser.LONG:
				case MariaDBParser.LONGBLOB:
				case MariaDBParser.TINYTEXT:
				case MariaDBParser.TEXT:
				case MariaDBParser.MEDIUMTEXT:
				case MariaDBParser.LONGTEXT:
				case MariaDBParser.ENUM:
				case MariaDBParser.SERIAL:
				case MariaDBParser.BIT:
				case MariaDBParser.BOOL:
				case MariaDBParser.BOOLEAN:
				case MariaDBParser.FIXED:
				case MariaDBParser.JSON:
				case MariaDBParser.NCHAR:
				case MariaDBParser.GEOMETRYCOLLECTION:
				case MariaDBParser.GEOMCOLLECTION:
				case MariaDBParser.GEOMETRY:
				case MariaDBParser.LINESTRING:
				case MariaDBParser.MULTILINESTRING:
				case MariaDBParser.MULTIPOINT:
				case MariaDBParser.MULTIPOLYGON:
				case MariaDBParser.POINT:
				case MariaDBParser.POLYGON:
					{
					this.state = 4154;
					this.dataType();
					this.state = 4166;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case MariaDBParser.PATH:
						{
						this.state = 4155;
						this.match(MariaDBParser.PATH);
						this.state = 4156;
						this.match(MariaDBParser.STRING_LITERAL);
						this.state = 4158;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 614, this._ctx) ) {
						case 1:
							{
							this.state = 4157;
							this.jsonOnEmpty();
							}
							break;
						}
						this.state = 4161;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === MariaDBParser.DEFAULT || _la === MariaDBParser.NULL_LITERAL || _la === MariaDBParser.ERROR) {
							{
							this.state = 4160;
							this.jsonOnError();
							}
						}

						}
						break;
					case MariaDBParser.EXISTS:
						{
						this.state = 4163;
						this.match(MariaDBParser.EXISTS);
						this.state = 4164;
						this.match(MariaDBParser.PATH);
						this.state = 4165;
						this.match(MariaDBParser.STRING_LITERAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4170;
				this.match(MariaDBParser.NESTED);
				this.state = 4172;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.PATH) {
					{
					this.state = 4171;
					this.match(MariaDBParser.PATH);
					}
				}

				this.state = 4174;
				this.match(MariaDBParser.STRING_LITERAL);
				this.state = 4175;
				this.match(MariaDBParser.COLUMNS);
				this.state = 4176;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 4177;
				this.jsonColumnList();
				this.state = 4178;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public jsonOnEmpty(): JsonOnEmptyContext {
		let _localctx: JsonOnEmptyContext = new JsonOnEmptyContext(this._ctx, this.state);
		this.enterRule(_localctx, 276, MariaDBParser.RULE_jsonOnEmpty);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4186;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.NULL_LITERAL:
				{
				this.state = 4182;
				this.match(MariaDBParser.NULL_LITERAL);
				}
				break;
			case MariaDBParser.ERROR:
				{
				this.state = 4183;
				this.match(MariaDBParser.ERROR);
				}
				break;
			case MariaDBParser.DEFAULT:
				{
				this.state = 4184;
				this.match(MariaDBParser.DEFAULT);
				this.state = 4185;
				this.defaultValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 4188;
			this.match(MariaDBParser.ON);
			this.state = 4189;
			this.match(MariaDBParser.EMPTY);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public jsonOnError(): JsonOnErrorContext {
		let _localctx: JsonOnErrorContext = new JsonOnErrorContext(this._ctx, this.state);
		this.enterRule(_localctx, 278, MariaDBParser.RULE_jsonOnError);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4195;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.NULL_LITERAL:
				{
				this.state = 4191;
				this.match(MariaDBParser.NULL_LITERAL);
				}
				break;
			case MariaDBParser.ERROR:
				{
				this.state = 4192;
				this.match(MariaDBParser.ERROR);
				}
				break;
			case MariaDBParser.DEFAULT:
				{
				this.state = 4193;
				this.match(MariaDBParser.DEFAULT);
				this.state = 4194;
				this.defaultValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 4197;
			this.match(MariaDBParser.ON);
			this.state = 4198;
			this.match(MariaDBParser.ERROR);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectSpec(): SelectSpecContext {
		let _localctx: SelectSpecContext = new SelectSpecContext(this._ctx, this.state);
		this.enterRule(_localctx, 280, MariaDBParser.RULE_selectSpec);
		let _la: number;
		try {
			this.state = 4208;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.ALL:
			case MariaDBParser.DISTINCT:
			case MariaDBParser.DISTINCTROW:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4200;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.ALL || _la === MariaDBParser.DISTINCT || _la === MariaDBParser.DISTINCTROW)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case MariaDBParser.HIGH_PRIORITY:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4201;
				this.match(MariaDBParser.HIGH_PRIORITY);
				}
				break;
			case MariaDBParser.STRAIGHT_JOIN:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4202;
				this.match(MariaDBParser.STRAIGHT_JOIN);
				}
				break;
			case MariaDBParser.SQL_SMALL_RESULT:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4203;
				this.match(MariaDBParser.SQL_SMALL_RESULT);
				}
				break;
			case MariaDBParser.SQL_BIG_RESULT:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4204;
				this.match(MariaDBParser.SQL_BIG_RESULT);
				}
				break;
			case MariaDBParser.SQL_BUFFER_RESULT:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4205;
				this.match(MariaDBParser.SQL_BUFFER_RESULT);
				}
				break;
			case MariaDBParser.SQL_CACHE:
			case MariaDBParser.SQL_NO_CACHE:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4206;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.SQL_CACHE || _la === MariaDBParser.SQL_NO_CACHE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case MariaDBParser.SQL_CALC_FOUND_ROWS:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 4207;
				this.match(MariaDBParser.SQL_CALC_FOUND_ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectElements(): SelectElementsContext {
		let _localctx: SelectElementsContext = new SelectElementsContext(this._ctx, this.state);
		this.enterRule(_localctx, 282, MariaDBParser.RULE_selectElements);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4212;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 623, this._ctx) ) {
			case 1:
				{
				this.state = 4210;
				_localctx._star = this.match(MariaDBParser.STAR);
				}
				break;

			case 2:
				{
				this.state = 4211;
				this.selectElement();
				}
				break;
			}
			this.state = 4218;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 624, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4214;
					this.match(MariaDBParser.COMMA);
					this.state = 4215;
					this.selectElement();
					}
					}
				}
				this.state = 4220;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 624, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectElement(): SelectElementContext {
		let _localctx: SelectElementContext = new SelectElementContext(this._ctx, this.state);
		this.enterRule(_localctx, 284, MariaDBParser.RULE_selectElement);
		let _la: number;
		try {
			this.state = 4250;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 632, this._ctx) ) {
			case 1:
				_localctx = new SelectStarElementContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4221;
				this.fullId();
				this.state = 4222;
				this.match(MariaDBParser.DOT);
				this.state = 4223;
				this.match(MariaDBParser.STAR);
				}
				break;

			case 2:
				_localctx = new SelectColumnElementContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4225;
				this.fullColumnName();
				this.state = 4230;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 626, this._ctx) ) {
				case 1:
					{
					this.state = 4227;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MariaDBParser.AS) {
						{
						this.state = 4226;
						this.match(MariaDBParser.AS);
						}
					}

					this.state = 4229;
					this.uid();
					}
					break;
				}
				}
				break;

			case 3:
				_localctx = new SelectFunctionElementContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4232;
				this.functionCall();
				this.state = 4237;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 628, this._ctx) ) {
				case 1:
					{
					this.state = 4234;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MariaDBParser.AS) {
						{
						this.state = 4233;
						this.match(MariaDBParser.AS);
						}
					}

					this.state = 4236;
					this.uid();
					}
					break;
				}
				}
				break;

			case 4:
				_localctx = new SelectExpressionElementContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4241;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 629, this._ctx) ) {
				case 1:
					{
					this.state = 4239;
					this.match(MariaDBParser.LOCAL_ID);
					this.state = 4240;
					this.match(MariaDBParser.VAR_ASSIGN);
					}
					break;
				}
				this.state = 4243;
				this.expression(0);
				this.state = 4248;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 631, this._ctx) ) {
				case 1:
					{
					this.state = 4245;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MariaDBParser.AS) {
						{
						this.state = 4244;
						this.match(MariaDBParser.AS);
						}
					}

					this.state = 4247;
					this.uid();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectIntoExpression(): SelectIntoExpressionContext {
		let _localctx: SelectIntoExpressionContext = new SelectIntoExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 286, MariaDBParser.RULE_selectIntoExpression);
		let _la: number;
		try {
			let _alt: number;
			this.state = 4288;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 639, this._ctx) ) {
			case 1:
				_localctx = new SelectIntoVariablesContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4252;
				this.match(MariaDBParser.INTO);
				this.state = 4253;
				this.assignmentField();
				this.state = 4258;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 633, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4254;
						this.match(MariaDBParser.COMMA);
						this.state = 4255;
						this.assignmentField();
						}
						}
					}
					this.state = 4260;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 633, this._ctx);
				}
				}
				break;

			case 2:
				_localctx = new SelectIntoDumpFileContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4261;
				this.match(MariaDBParser.INTO);
				this.state = 4262;
				this.match(MariaDBParser.DUMPFILE);
				this.state = 4263;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;

			case 3:
				_localctx = new SelectIntoTextFileContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				{
				this.state = 4264;
				this.match(MariaDBParser.INTO);
				this.state = 4265;
				this.match(MariaDBParser.OUTFILE);
				this.state = 4266;
				(_localctx as SelectIntoTextFileContext)._filename = this.match(MariaDBParser.STRING_LITERAL);
				this.state = 4270;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.CHARACTER) {
					{
					this.state = 4267;
					this.match(MariaDBParser.CHARACTER);
					this.state = 4268;
					this.match(MariaDBParser.SET);
					this.state = 4269;
					(_localctx as SelectIntoTextFileContext)._charset = this.charsetName();
					}
				}

				this.state = 4278;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 636, this._ctx) ) {
				case 1:
					{
					this.state = 4272;
					(_localctx as SelectIntoTextFileContext)._fieldsFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MariaDBParser.COLUMNS || _la === MariaDBParser.FIELDS)) {
						(_localctx as SelectIntoTextFileContext)._fieldsFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 4274;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4273;
						this.selectFieldsInto();
						}
						}
						this.state = 4276;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (_la === MariaDBParser.ENCLOSED || _la === MariaDBParser.ESCAPED || _la === MariaDBParser.OPTIONALLY || _la === MariaDBParser.TERMINATED);
					}
					break;
				}
				this.state = 4286;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.LINES) {
					{
					this.state = 4280;
					this.match(MariaDBParser.LINES);
					this.state = 4282;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4281;
						this.selectLinesInto();
						}
						}
						this.state = 4284;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (_la === MariaDBParser.STARTING || _la === MariaDBParser.TERMINATED);
					}
				}

				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectFieldsInto(): SelectFieldsIntoContext {
		let _localctx: SelectFieldsIntoContext = new SelectFieldsIntoContext(this._ctx, this.state);
		this.enterRule(_localctx, 288, MariaDBParser.RULE_selectFieldsInto);
		let _la: number;
		try {
			this.state = 4302;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.TERMINATED:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4290;
				this.match(MariaDBParser.TERMINATED);
				this.state = 4291;
				this.match(MariaDBParser.BY);
				this.state = 4292;
				_localctx._terminationField = this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			case MariaDBParser.ENCLOSED:
			case MariaDBParser.OPTIONALLY:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4294;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.OPTIONALLY) {
					{
					this.state = 4293;
					this.match(MariaDBParser.OPTIONALLY);
					}
				}

				this.state = 4296;
				this.match(MariaDBParser.ENCLOSED);
				this.state = 4297;
				this.match(MariaDBParser.BY);
				this.state = 4298;
				_localctx._enclosion = this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			case MariaDBParser.ESCAPED:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4299;
				this.match(MariaDBParser.ESCAPED);
				this.state = 4300;
				this.match(MariaDBParser.BY);
				this.state = 4301;
				_localctx._escaping = this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectLinesInto(): SelectLinesIntoContext {
		let _localctx: SelectLinesIntoContext = new SelectLinesIntoContext(this._ctx, this.state);
		this.enterRule(_localctx, 290, MariaDBParser.RULE_selectLinesInto);
		try {
			this.state = 4310;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.STARTING:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4304;
				this.match(MariaDBParser.STARTING);
				this.state = 4305;
				this.match(MariaDBParser.BY);
				this.state = 4306;
				_localctx._starting = this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			case MariaDBParser.TERMINATED:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4307;
				this.match(MariaDBParser.TERMINATED);
				this.state = 4308;
				this.match(MariaDBParser.BY);
				this.state = 4309;
				_localctx._terminationLine = this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fromClause(): FromClauseContext {
		let _localctx: FromClauseContext = new FromClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 292, MariaDBParser.RULE_fromClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4314;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.FROM) {
				{
				this.state = 4312;
				this.match(MariaDBParser.FROM);
				this.state = 4313;
				this.tableSources();
				}
			}

			this.state = 4318;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.WHERE) {
				{
				this.state = 4316;
				this.match(MariaDBParser.WHERE);
				this.state = 4317;
				_localctx._whereExpr = this.expression(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public groupByClause(): GroupByClauseContext {
		let _localctx: GroupByClauseContext = new GroupByClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 294, MariaDBParser.RULE_groupByClause);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4320;
			this.match(MariaDBParser.GROUP);
			this.state = 4321;
			this.match(MariaDBParser.BY);
			this.state = 4322;
			this.groupByItem();
			this.state = 4327;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 645, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4323;
					this.match(MariaDBParser.COMMA);
					this.state = 4324;
					this.groupByItem();
					}
					}
				}
				this.state = 4329;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 645, this._ctx);
			}
			this.state = 4332;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 646, this._ctx) ) {
			case 1:
				{
				this.state = 4330;
				this.match(MariaDBParser.WITH);
				this.state = 4331;
				this.match(MariaDBParser.ROLLUP);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public havingClause(): HavingClauseContext {
		let _localctx: HavingClauseContext = new HavingClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 296, MariaDBParser.RULE_havingClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4334;
			this.match(MariaDBParser.HAVING);
			this.state = 4335;
			_localctx._havingExpr = this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public windowClause(): WindowClauseContext {
		let _localctx: WindowClauseContext = new WindowClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 298, MariaDBParser.RULE_windowClause);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4337;
			this.match(MariaDBParser.WINDOW);
			this.state = 4338;
			this.windowName();
			this.state = 4339;
			this.match(MariaDBParser.AS);
			this.state = 4340;
			this.match(MariaDBParser.LR_BRACKET);
			this.state = 4341;
			this.windowSpec();
			this.state = 4342;
			this.match(MariaDBParser.RR_BRACKET);
			this.state = 4352;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 647, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4343;
					this.match(MariaDBParser.COMMA);
					this.state = 4344;
					this.windowName();
					this.state = 4345;
					this.match(MariaDBParser.AS);
					this.state = 4346;
					this.match(MariaDBParser.LR_BRACKET);
					this.state = 4347;
					this.windowSpec();
					this.state = 4348;
					this.match(MariaDBParser.RR_BRACKET);
					}
					}
				}
				this.state = 4354;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 647, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public groupByItem(): GroupByItemContext {
		let _localctx: GroupByItemContext = new GroupByItemContext(this._ctx, this.state);
		this.enterRule(_localctx, 300, MariaDBParser.RULE_groupByItem);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4355;
			this.expression(0);
			this.state = 4357;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 648, this._ctx) ) {
			case 1:
				{
				this.state = 4356;
				_localctx._order = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.ASC || _la === MariaDBParser.DESC)) {
					_localctx._order = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public limitClause(): LimitClauseContext {
		let _localctx: LimitClauseContext = new LimitClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 302, MariaDBParser.RULE_limitClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4359;
			this.match(MariaDBParser.LIMIT);
			this.state = 4370;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 650, this._ctx) ) {
			case 1:
				{
				this.state = 4363;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 649, this._ctx) ) {
				case 1:
					{
					this.state = 4360;
					_localctx._offset = this.limitClauseAtom();
					this.state = 4361;
					this.match(MariaDBParser.COMMA);
					}
					break;
				}
				this.state = 4365;
				_localctx._limit = this.limitClauseAtom();
				}
				break;

			case 2:
				{
				this.state = 4366;
				_localctx._limit = this.limitClauseAtom();
				this.state = 4367;
				this.match(MariaDBParser.OFFSET);
				this.state = 4368;
				_localctx._offset = this.limitClauseAtom();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public limitClauseAtom(): LimitClauseAtomContext {
		let _localctx: LimitClauseAtomContext = new LimitClauseAtomContext(this._ctx, this.state);
		this.enterRule(_localctx, 304, MariaDBParser.RULE_limitClauseAtom);
		try {
			this.state = 4375;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.ZERO_DECIMAL:
			case MariaDBParser.ONE_DECIMAL:
			case MariaDBParser.TWO_DECIMAL:
			case MariaDBParser.DECIMAL_LITERAL:
			case MariaDBParser.REAL_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4372;
				this.decimalLiteral();
				}
				break;
			case MariaDBParser.LOCAL_ID:
			case MariaDBParser.GLOBAL_ID:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4373;
				this.mysqlVariable();
				}
				break;
			case MariaDBParser.ATTRIBUTE:
			case MariaDBParser.BODY:
			case MariaDBParser.BUCKETS:
			case MariaDBParser.CONDITION:
			case MariaDBParser.CURRENT:
			case MariaDBParser.CURRENT_ROLE:
			case MariaDBParser.CURRENT_USER:
			case MariaDBParser.DATABASE:
			case MariaDBParser.DEFAULT:
			case MariaDBParser.DIAGNOSTICS:
			case MariaDBParser.EMPTY:
			case MariaDBParser.EXCEPT:
			case MariaDBParser.GROUP:
			case MariaDBParser.IF:
			case MariaDBParser.IGNORED:
			case MariaDBParser.INSERT:
			case MariaDBParser.LATERAL:
			case MariaDBParser.LEFT:
			case MariaDBParser.LOCKED:
			case MariaDBParser.MAXVALUE:
			case MariaDBParser.MINVALUE:
			case MariaDBParser.NUMBER:
			case MariaDBParser.OPTIONAL:
			case MariaDBParser.ORDER:
			case MariaDBParser.PRIMARY:
			case MariaDBParser.PACKAGE:
			case MariaDBParser.REPLACE:
			case MariaDBParser.RIGHT:
			case MariaDBParser.SCHEMA:
			case MariaDBParser.SKIP_:
			case MariaDBParser.STACKED:
			case MariaDBParser.STATEMENT:
			case MariaDBParser.DATE:
			case MariaDBParser.TIME:
			case MariaDBParser.TIMESTAMP:
			case MariaDBParser.DATETIME:
			case MariaDBParser.YEAR:
			case MariaDBParser.BINARY:
			case MariaDBParser.TEXT:
			case MariaDBParser.ENUM:
			case MariaDBParser.SERIAL:
			case MariaDBParser.JSON_ARRAY:
			case MariaDBParser.JSON_ARRAYAGG:
			case MariaDBParser.JSON_ARRAY_APPEND:
			case MariaDBParser.JSON_ARRAY_INSERT:
			case MariaDBParser.JSON_CONTAINS:
			case MariaDBParser.JSON_CONTAINS_PATH:
			case MariaDBParser.JSON_DEPTH:
			case MariaDBParser.JSON_EXTRACT:
			case MariaDBParser.JSON_INSERT:
			case MariaDBParser.JSON_KEYS:
			case MariaDBParser.JSON_LENGTH:
			case MariaDBParser.JSON_MERGE:
			case MariaDBParser.JSON_MERGE_PATCH:
			case MariaDBParser.JSON_MERGE_PRESERVE:
			case MariaDBParser.JSON_OBJECT:
			case MariaDBParser.JSON_OBJECTAGG:
			case MariaDBParser.JSON_OVERLAPS:
			case MariaDBParser.JSON_PRETTY:
			case MariaDBParser.JSON_QUOTE:
			case MariaDBParser.JSON_REMOVE:
			case MariaDBParser.JSON_REPLACE:
			case MariaDBParser.JSON_SCHEMA_VALID:
			case MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT:
			case MariaDBParser.JSON_SEARCH:
			case MariaDBParser.JSON_SET:
			case MariaDBParser.JSON_STORAGE_FREE:
			case MariaDBParser.JSON_STORAGE_SIZE:
			case MariaDBParser.JSON_TABLE:
			case MariaDBParser.JSON_TYPE:
			case MariaDBParser.JSON_UNQUOTE:
			case MariaDBParser.JSON_VALID:
			case MariaDBParser.JSON_VALUE:
			case MariaDBParser.NESTED:
			case MariaDBParser.ORDINALITY:
			case MariaDBParser.PATH:
			case MariaDBParser.AVG:
			case MariaDBParser.BIT_AND:
			case MariaDBParser.BIT_OR:
			case MariaDBParser.BIT_XOR:
			case MariaDBParser.COUNT:
			case MariaDBParser.CUME_DIST:
			case MariaDBParser.DENSE_RANK:
			case MariaDBParser.FIRST_VALUE:
			case MariaDBParser.GROUP_CONCAT:
			case MariaDBParser.LAG:
			case MariaDBParser.LAST_VALUE:
			case MariaDBParser.LEAD:
			case MariaDBParser.MAX:
			case MariaDBParser.MIN:
			case MariaDBParser.NTILE:
			case MariaDBParser.NTH_VALUE:
			case MariaDBParser.PERCENT_RANK:
			case MariaDBParser.RANK:
			case MariaDBParser.ROW_NUMBER:
			case MariaDBParser.STD:
			case MariaDBParser.STDDEV:
			case MariaDBParser.STDDEV_POP:
			case MariaDBParser.STDDEV_SAMP:
			case MariaDBParser.SUM:
			case MariaDBParser.VAR_POP:
			case MariaDBParser.VAR_SAMP:
			case MariaDBParser.VARIANCE:
			case MariaDBParser.CURRENT_DATE:
			case MariaDBParser.CURRENT_TIME:
			case MariaDBParser.CURRENT_TIMESTAMP:
			case MariaDBParser.LOCALTIME:
			case MariaDBParser.CURDATE:
			case MariaDBParser.CURTIME:
			case MariaDBParser.DATE_ADD:
			case MariaDBParser.DATE_SUB:
			case MariaDBParser.LOCALTIMESTAMP:
			case MariaDBParser.NOW:
			case MariaDBParser.POSITION:
			case MariaDBParser.SUBSTR:
			case MariaDBParser.SUBSTRING:
			case MariaDBParser.SYSDATE:
			case MariaDBParser.TRIM:
			case MariaDBParser.UTC_DATE:
			case MariaDBParser.UTC_TIME:
			case MariaDBParser.UTC_TIMESTAMP:
			case MariaDBParser.ACCOUNT:
			case MariaDBParser.ACTION:
			case MariaDBParser.AFTER:
			case MariaDBParser.AGGREGATE:
			case MariaDBParser.ALGORITHM:
			case MariaDBParser.ANY:
			case MariaDBParser.AT:
			case MariaDBParser.AUTHORS:
			case MariaDBParser.AUTOCOMMIT:
			case MariaDBParser.AUTOEXTEND_SIZE:
			case MariaDBParser.AUTO_INCREMENT:
			case MariaDBParser.AVG_ROW_LENGTH:
			case MariaDBParser.BEGIN:
			case MariaDBParser.BINLOG:
			case MariaDBParser.BIT:
			case MariaDBParser.BLOCK:
			case MariaDBParser.BOOL:
			case MariaDBParser.BOOLEAN:
			case MariaDBParser.BTREE:
			case MariaDBParser.CACHE:
			case MariaDBParser.CASCADED:
			case MariaDBParser.CHAIN:
			case MariaDBParser.CHANGED:
			case MariaDBParser.CHANNEL:
			case MariaDBParser.CHECKSUM:
			case MariaDBParser.PAGE_CHECKSUM:
			case MariaDBParser.CIPHER:
			case MariaDBParser.CLASS_ORIGIN:
			case MariaDBParser.CLIENT:
			case MariaDBParser.CLOSE:
			case MariaDBParser.CLUSTERING:
			case MariaDBParser.COALESCE:
			case MariaDBParser.CODE:
			case MariaDBParser.COLUMNS:
			case MariaDBParser.COLUMN_FORMAT:
			case MariaDBParser.COLUMN_NAME:
			case MariaDBParser.COMMENT:
			case MariaDBParser.COMMIT:
			case MariaDBParser.COMPACT:
			case MariaDBParser.COMPLETION:
			case MariaDBParser.COMPRESSED:
			case MariaDBParser.COMPRESSION:
			case MariaDBParser.CONCURRENT:
			case MariaDBParser.CONNECT:
			case MariaDBParser.CONNECTION:
			case MariaDBParser.CONSISTENT:
			case MariaDBParser.CONSTRAINT_CATALOG:
			case MariaDBParser.CONSTRAINT_SCHEMA:
			case MariaDBParser.CONSTRAINT_NAME:
			case MariaDBParser.CONTAINS:
			case MariaDBParser.CONTEXT:
			case MariaDBParser.CONTRIBUTORS:
			case MariaDBParser.COPY:
			case MariaDBParser.CPU:
			case MariaDBParser.CYCLE:
			case MariaDBParser.CURSOR_NAME:
			case MariaDBParser.DATA:
			case MariaDBParser.DATAFILE:
			case MariaDBParser.DEALLOCATE:
			case MariaDBParser.DEFAULT_AUTH:
			case MariaDBParser.DEFINER:
			case MariaDBParser.DELAY_KEY_WRITE:
			case MariaDBParser.DES_KEY_FILE:
			case MariaDBParser.DIRECTORY:
			case MariaDBParser.DISABLE:
			case MariaDBParser.DISCARD:
			case MariaDBParser.DISK:
			case MariaDBParser.DO:
			case MariaDBParser.DUMPFILE:
			case MariaDBParser.DUPLICATE:
			case MariaDBParser.DYNAMIC:
			case MariaDBParser.ENABLE:
			case MariaDBParser.ENCRYPTED:
			case MariaDBParser.ENCRYPTION:
			case MariaDBParser.ENCRYPTION_KEY_ID:
			case MariaDBParser.END:
			case MariaDBParser.ENDS:
			case MariaDBParser.ENGINE:
			case MariaDBParser.ENGINES:
			case MariaDBParser.ERROR:
			case MariaDBParser.ERRORS:
			case MariaDBParser.ESCAPE:
			case MariaDBParser.EVEN:
			case MariaDBParser.EVENT:
			case MariaDBParser.EVENTS:
			case MariaDBParser.EVERY:
			case MariaDBParser.EXCHANGE:
			case MariaDBParser.EXCLUSIVE:
			case MariaDBParser.EXPIRE:
			case MariaDBParser.EXPORT:
			case MariaDBParser.EXTENDED:
			case MariaDBParser.EXTENT_SIZE:
			case MariaDBParser.FAILED_LOGIN_ATTEMPTS:
			case MariaDBParser.FAST:
			case MariaDBParser.FAULTS:
			case MariaDBParser.FIELDS:
			case MariaDBParser.FILE_BLOCK_SIZE:
			case MariaDBParser.FILTER:
			case MariaDBParser.FIRST:
			case MariaDBParser.FIXED:
			case MariaDBParser.FLUSH:
			case MariaDBParser.FOLLOWS:
			case MariaDBParser.FOUND:
			case MariaDBParser.FULL:
			case MariaDBParser.FUNCTION:
			case MariaDBParser.GENERAL:
			case MariaDBParser.GLOBAL:
			case MariaDBParser.GRANTS:
			case MariaDBParser.GROUP_REPLICATION:
			case MariaDBParser.HANDLER:
			case MariaDBParser.HASH:
			case MariaDBParser.HELP:
			case MariaDBParser.HISTORY:
			case MariaDBParser.HOST:
			case MariaDBParser.HOSTS:
			case MariaDBParser.IDENTIFIED:
			case MariaDBParser.IGNORE_SERVER_IDS:
			case MariaDBParser.IMPORT:
			case MariaDBParser.INCREMENT:
			case MariaDBParser.INDEXES:
			case MariaDBParser.INITIAL_SIZE:
			case MariaDBParser.INPLACE:
			case MariaDBParser.INSERT_METHOD:
			case MariaDBParser.INSTALL:
			case MariaDBParser.INSTANCE:
			case MariaDBParser.INSTANT:
			case MariaDBParser.INVISIBLE:
			case MariaDBParser.INVOKER:
			case MariaDBParser.IO:
			case MariaDBParser.IO_THREAD:
			case MariaDBParser.IPC:
			case MariaDBParser.ISOLATION:
			case MariaDBParser.ISSUER:
			case MariaDBParser.JSON:
			case MariaDBParser.KEY_BLOCK_SIZE:
			case MariaDBParser.LANGUAGE:
			case MariaDBParser.LAST:
			case MariaDBParser.LEAVES:
			case MariaDBParser.LESS:
			case MariaDBParser.LEVEL:
			case MariaDBParser.LIST:
			case MariaDBParser.LOCAL:
			case MariaDBParser.LOCALES:
			case MariaDBParser.LOGFILE:
			case MariaDBParser.LOGS:
			case MariaDBParser.MASTER:
			case MariaDBParser.MASTER_AUTO_POSITION:
			case MariaDBParser.MASTER_CONNECT_RETRY:
			case MariaDBParser.MASTER_DELAY:
			case MariaDBParser.MASTER_HEARTBEAT_PERIOD:
			case MariaDBParser.MASTER_HOST:
			case MariaDBParser.MASTER_LOG_FILE:
			case MariaDBParser.MASTER_LOG_POS:
			case MariaDBParser.MASTER_PASSWORD:
			case MariaDBParser.MASTER_PORT:
			case MariaDBParser.MASTER_RETRY_COUNT:
			case MariaDBParser.MASTER_SSL:
			case MariaDBParser.MASTER_SSL_CA:
			case MariaDBParser.MASTER_SSL_CAPATH:
			case MariaDBParser.MASTER_SSL_CERT:
			case MariaDBParser.MASTER_SSL_CIPHER:
			case MariaDBParser.MASTER_SSL_CRL:
			case MariaDBParser.MASTER_SSL_CRLPATH:
			case MariaDBParser.MASTER_SSL_KEY:
			case MariaDBParser.MASTER_TLS_VERSION:
			case MariaDBParser.MASTER_USER:
			case MariaDBParser.MAX_CONNECTIONS_PER_HOUR:
			case MariaDBParser.MAX_QUERIES_PER_HOUR:
			case MariaDBParser.MAX_ROWS:
			case MariaDBParser.MAX_SIZE:
			case MariaDBParser.MAX_UPDATES_PER_HOUR:
			case MariaDBParser.MAX_USER_CONNECTIONS:
			case MariaDBParser.MEDIUM:
			case MariaDBParser.MEMBER:
			case MariaDBParser.MERGE:
			case MariaDBParser.MESSAGE_TEXT:
			case MariaDBParser.MID:
			case MariaDBParser.MIGRATE:
			case MariaDBParser.MIN_ROWS:
			case MariaDBParser.MODE:
			case MariaDBParser.MODIFY:
			case MariaDBParser.MUTEX:
			case MariaDBParser.MYSQL:
			case MariaDBParser.MYSQL_ERRNO:
			case MariaDBParser.NAME:
			case MariaDBParser.NAMES:
			case MariaDBParser.NCHAR:
			case MariaDBParser.NEVER:
			case MariaDBParser.NEXT:
			case MariaDBParser.NO:
			case MariaDBParser.NOCACHE:
			case MariaDBParser.NOCOPY:
			case MariaDBParser.NOCYCLE:
			case MariaDBParser.NOMAXVALUE:
			case MariaDBParser.NOMINVALUE:
			case MariaDBParser.NOWAIT:
			case MariaDBParser.NODEGROUP:
			case MariaDBParser.NONE:
			case MariaDBParser.ODBC:
			case MariaDBParser.OFFLINE:
			case MariaDBParser.OFFSET:
			case MariaDBParser.OF:
			case MariaDBParser.OJ:
			case MariaDBParser.OLD_PASSWORD:
			case MariaDBParser.ONE:
			case MariaDBParser.ONLINE:
			case MariaDBParser.ONLY:
			case MariaDBParser.OPEN:
			case MariaDBParser.OPTIMIZER_COSTS:
			case MariaDBParser.OPTIONS:
			case MariaDBParser.OWNER:
			case MariaDBParser.PACK_KEYS:
			case MariaDBParser.PAGE:
			case MariaDBParser.PARSER:
			case MariaDBParser.PARTIAL:
			case MariaDBParser.PARTITIONING:
			case MariaDBParser.PARTITIONS:
			case MariaDBParser.PASSWORD:
			case MariaDBParser.PASSWORD_LOCK_TIME:
			case MariaDBParser.PHASE:
			case MariaDBParser.PLUGIN:
			case MariaDBParser.PLUGIN_DIR:
			case MariaDBParser.PLUGINS:
			case MariaDBParser.PORT:
			case MariaDBParser.PRECEDES:
			case MariaDBParser.PREPARE:
			case MariaDBParser.PRESERVE:
			case MariaDBParser.PREV:
			case MariaDBParser.PROCESSLIST:
			case MariaDBParser.PROFILE:
			case MariaDBParser.PROFILES:
			case MariaDBParser.PROXY:
			case MariaDBParser.QUERY:
			case MariaDBParser.QUERY_RESPONSE_TIME:
			case MariaDBParser.QUICK:
			case MariaDBParser.REBUILD:
			case MariaDBParser.RECOVER:
			case MariaDBParser.RECURSIVE:
			case MariaDBParser.REDO_BUFFER_SIZE:
			case MariaDBParser.REDUNDANT:
			case MariaDBParser.RELAY:
			case MariaDBParser.RELAY_LOG_FILE:
			case MariaDBParser.RELAY_LOG_POS:
			case MariaDBParser.RELAYLOG:
			case MariaDBParser.REMOVE:
			case MariaDBParser.REORGANIZE:
			case MariaDBParser.REPAIR:
			case MariaDBParser.REPLICATE_DO_DB:
			case MariaDBParser.REPLICATE_DO_TABLE:
			case MariaDBParser.REPLICATE_IGNORE_DB:
			case MariaDBParser.REPLICATE_IGNORE_TABLE:
			case MariaDBParser.REPLICATE_REWRITE_DB:
			case MariaDBParser.REPLICATE_WILD_DO_TABLE:
			case MariaDBParser.REPLICATE_WILD_IGNORE_TABLE:
			case MariaDBParser.REPLICATION:
			case MariaDBParser.RESET:
			case MariaDBParser.RESTART:
			case MariaDBParser.RESUME:
			case MariaDBParser.RETURNED_SQLSTATE:
			case MariaDBParser.RETURNS:
			case MariaDBParser.REUSE:
			case MariaDBParser.ROLE:
			case MariaDBParser.ROLLBACK:
			case MariaDBParser.ROLLUP:
			case MariaDBParser.ROTATE:
			case MariaDBParser.ROW:
			case MariaDBParser.ROWS:
			case MariaDBParser.ROW_FORMAT:
			case MariaDBParser.RTREE:
			case MariaDBParser.SAVEPOINT:
			case MariaDBParser.SCHEDULE:
			case MariaDBParser.SECURITY:
			case MariaDBParser.SEQUENCE:
			case MariaDBParser.SERVER:
			case MariaDBParser.SESSION:
			case MariaDBParser.SHARE:
			case MariaDBParser.SHARED:
			case MariaDBParser.SIGNED:
			case MariaDBParser.SIMPLE:
			case MariaDBParser.SLAVE:
			case MariaDBParser.SLAVES:
			case MariaDBParser.SLOW:
			case MariaDBParser.SNAPSHOT:
			case MariaDBParser.SOCKET:
			case MariaDBParser.SOME:
			case MariaDBParser.SONAME:
			case MariaDBParser.SOUNDS:
			case MariaDBParser.SOURCE:
			case MariaDBParser.SQL_AFTER_GTIDS:
			case MariaDBParser.SQL_AFTER_MTS_GAPS:
			case MariaDBParser.SQL_BEFORE_GTIDS:
			case MariaDBParser.SQL_BUFFER_RESULT:
			case MariaDBParser.SQL_CACHE:
			case MariaDBParser.SQL_NO_CACHE:
			case MariaDBParser.SQL_THREAD:
			case MariaDBParser.START:
			case MariaDBParser.STARTS:
			case MariaDBParser.STATS_AUTO_RECALC:
			case MariaDBParser.STATS_PERSISTENT:
			case MariaDBParser.STATS_SAMPLE_PAGES:
			case MariaDBParser.STATUS:
			case MariaDBParser.STOP:
			case MariaDBParser.STORAGE:
			case MariaDBParser.STRING:
			case MariaDBParser.SUBCLASS_ORIGIN:
			case MariaDBParser.SUBJECT:
			case MariaDBParser.SUBPARTITION:
			case MariaDBParser.SUBPARTITIONS:
			case MariaDBParser.SUSPEND:
			case MariaDBParser.SWAPS:
			case MariaDBParser.SWITCHES:
			case MariaDBParser.TABLE_NAME:
			case MariaDBParser.TABLESPACE:
			case MariaDBParser.TABLE_TYPE:
			case MariaDBParser.TEMPORARY:
			case MariaDBParser.TEMPTABLE:
			case MariaDBParser.THAN:
			case MariaDBParser.TRADITIONAL:
			case MariaDBParser.TRANSACTION:
			case MariaDBParser.TRANSACTIONAL:
			case MariaDBParser.TRIGGERS:
			case MariaDBParser.TRUNCATE:
			case MariaDBParser.TYPES:
			case MariaDBParser.UNBOUNDED:
			case MariaDBParser.UNDEFINED:
			case MariaDBParser.UNDOFILE:
			case MariaDBParser.UNDO_BUFFER_SIZE:
			case MariaDBParser.UNINSTALL:
			case MariaDBParser.UNKNOWN:
			case MariaDBParser.UNTIL:
			case MariaDBParser.UPGRADE:
			case MariaDBParser.USER:
			case MariaDBParser.USE_FRM:
			case MariaDBParser.USER_RESOURCES:
			case MariaDBParser.VALIDATION:
			case MariaDBParser.VALUE:
			case MariaDBParser.VARIABLES:
			case MariaDBParser.VIEW:
			case MariaDBParser.VIRTUAL:
			case MariaDBParser.VISIBLE:
			case MariaDBParser.WAIT:
			case MariaDBParser.WARNINGS:
			case MariaDBParser.WITHOUT:
			case MariaDBParser.WORK:
			case MariaDBParser.WRAPPER:
			case MariaDBParser.WSREP_MEMBERSHIP:
			case MariaDBParser.WSREP_STATUS:
			case MariaDBParser.X509:
			case MariaDBParser.XA:
			case MariaDBParser.XML:
			case MariaDBParser.EUR:
			case MariaDBParser.USA:
			case MariaDBParser.JIS:
			case MariaDBParser.ISO:
			case MariaDBParser.INTERNAL:
			case MariaDBParser.QUARTER:
			case MariaDBParser.MONTH:
			case MariaDBParser.DAY:
			case MariaDBParser.HOUR:
			case MariaDBParser.MINUTE:
			case MariaDBParser.WEEK:
			case MariaDBParser.SECOND:
			case MariaDBParser.MICROSECOND:
			case MariaDBParser.USER_STATISTICS:
			case MariaDBParser.CLIENT_STATISTICS:
			case MariaDBParser.INDEX_STATISTICS:
			case MariaDBParser.TABLE_STATISTICS:
			case MariaDBParser.ADMIN:
			case MariaDBParser.AUDIT_ADMIN:
			case MariaDBParser.BACKUP_ADMIN:
			case MariaDBParser.BINLOG_ADMIN:
			case MariaDBParser.BINLOG_ENCRYPTION_ADMIN:
			case MariaDBParser.CLONE_ADMIN:
			case MariaDBParser.CONNECTION_ADMIN:
			case MariaDBParser.ENCRYPTION_KEY_ADMIN:
			case MariaDBParser.EXECUTE:
			case MariaDBParser.FILE:
			case MariaDBParser.FIREWALL_ADMIN:
			case MariaDBParser.FIREWALL_USER:
			case MariaDBParser.GROUP_REPLICATION_ADMIN:
			case MariaDBParser.INNODB_REDO_LOG_ARCHIVE:
			case MariaDBParser.INVOKE:
			case MariaDBParser.LAMBDA:
			case MariaDBParser.NDB_STORED_USER:
			case MariaDBParser.PASSWORDLESS_USER_ADMIN:
			case MariaDBParser.PERSIST_RO_VARIABLES_ADMIN:
			case MariaDBParser.PRIVILEGES:
			case MariaDBParser.PROCESS:
			case MariaDBParser.RELOAD:
			case MariaDBParser.REPLICATION_APPLIER:
			case MariaDBParser.REPLICATION_SLAVE_ADMIN:
			case MariaDBParser.RESOURCE_GROUP_ADMIN:
			case MariaDBParser.RESOURCE_GROUP_USER:
			case MariaDBParser.ROLE_ADMIN:
			case MariaDBParser.ROUTINE:
			case MariaDBParser.S3:
			case MariaDBParser.SESSION_VARIABLES_ADMIN:
			case MariaDBParser.SET_USER_ID:
			case MariaDBParser.SHOW_ROUTINE:
			case MariaDBParser.SHUTDOWN:
			case MariaDBParser.SUPER:
			case MariaDBParser.SYSTEM_VARIABLES_ADMIN:
			case MariaDBParser.TABLES:
			case MariaDBParser.TABLE_ENCRYPTION_ADMIN:
			case MariaDBParser.VERSION_TOKEN_ADMIN:
			case MariaDBParser.XA_RECOVER_ADMIN:
			case MariaDBParser.ARMSCII8:
			case MariaDBParser.ASCII:
			case MariaDBParser.BIG5:
			case MariaDBParser.CP1250:
			case MariaDBParser.CP1251:
			case MariaDBParser.CP1256:
			case MariaDBParser.CP1257:
			case MariaDBParser.CP850:
			case MariaDBParser.CP852:
			case MariaDBParser.CP866:
			case MariaDBParser.CP932:
			case MariaDBParser.DEC8:
			case MariaDBParser.EUCJPMS:
			case MariaDBParser.EUCKR:
			case MariaDBParser.GB18030:
			case MariaDBParser.GB2312:
			case MariaDBParser.GBK:
			case MariaDBParser.GEOSTD8:
			case MariaDBParser.GREEK:
			case MariaDBParser.HEBREW:
			case MariaDBParser.HP8:
			case MariaDBParser.KEYBCS2:
			case MariaDBParser.KOI8R:
			case MariaDBParser.KOI8U:
			case MariaDBParser.LATIN1:
			case MariaDBParser.LATIN2:
			case MariaDBParser.LATIN5:
			case MariaDBParser.LATIN7:
			case MariaDBParser.MACCE:
			case MariaDBParser.MACROMAN:
			case MariaDBParser.SJIS:
			case MariaDBParser.SWE7:
			case MariaDBParser.TIS620:
			case MariaDBParser.UCS2:
			case MariaDBParser.UJIS:
			case MariaDBParser.UTF16:
			case MariaDBParser.UTF16LE:
			case MariaDBParser.UTF32:
			case MariaDBParser.UTF8:
			case MariaDBParser.UTF8MB3:
			case MariaDBParser.UTF8MB4:
			case MariaDBParser.ARCHIVE:
			case MariaDBParser.BLACKHOLE:
			case MariaDBParser.CSV:
			case MariaDBParser.FEDERATED:
			case MariaDBParser.INNODB:
			case MariaDBParser.MEMORY:
			case MariaDBParser.MRG_MYISAM:
			case MariaDBParser.MYISAM:
			case MariaDBParser.NDB:
			case MariaDBParser.NDBCLUSTER:
			case MariaDBParser.PERFORMANCE_SCHEMA:
			case MariaDBParser.TOKUDB:
			case MariaDBParser.REPEATABLE:
			case MariaDBParser.COMMITTED:
			case MariaDBParser.UNCOMMITTED:
			case MariaDBParser.SERIALIZABLE:
			case MariaDBParser.GEOMETRYCOLLECTION:
			case MariaDBParser.LINESTRING:
			case MariaDBParser.MULTILINESTRING:
			case MariaDBParser.MULTIPOINT:
			case MariaDBParser.MULTIPOLYGON:
			case MariaDBParser.POINT:
			case MariaDBParser.POLYGON:
			case MariaDBParser.ABS:
			case MariaDBParser.ACOS:
			case MariaDBParser.ADDDATE:
			case MariaDBParser.ADDTIME:
			case MariaDBParser.AES_DECRYPT:
			case MariaDBParser.AES_ENCRYPT:
			case MariaDBParser.AREA:
			case MariaDBParser.ASBINARY:
			case MariaDBParser.ASIN:
			case MariaDBParser.ASTEXT:
			case MariaDBParser.ASWKB:
			case MariaDBParser.ASWKT:
			case MariaDBParser.ASYMMETRIC_DECRYPT:
			case MariaDBParser.ASYMMETRIC_DERIVE:
			case MariaDBParser.ASYMMETRIC_ENCRYPT:
			case MariaDBParser.ASYMMETRIC_SIGN:
			case MariaDBParser.ASYMMETRIC_VERIFY:
			case MariaDBParser.ATAN:
			case MariaDBParser.ATAN2:
			case MariaDBParser.BENCHMARK:
			case MariaDBParser.BIN:
			case MariaDBParser.BIT_COUNT:
			case MariaDBParser.BIT_LENGTH:
			case MariaDBParser.BUFFER:
			case MariaDBParser.CATALOG_NAME:
			case MariaDBParser.CEIL:
			case MariaDBParser.CEILING:
			case MariaDBParser.CENTROID:
			case MariaDBParser.CHARACTER_LENGTH:
			case MariaDBParser.CHARSET:
			case MariaDBParser.CHAR_LENGTH:
			case MariaDBParser.COERCIBILITY:
			case MariaDBParser.COLLATION:
			case MariaDBParser.COMPRESS:
			case MariaDBParser.CONCAT:
			case MariaDBParser.CONCAT_WS:
			case MariaDBParser.CONNECTION_ID:
			case MariaDBParser.CONV:
			case MariaDBParser.CONVERT_TZ:
			case MariaDBParser.COS:
			case MariaDBParser.COT:
			case MariaDBParser.CRC32:
			case MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY:
			case MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY:
			case MariaDBParser.CREATE_DH_PARAMETERS:
			case MariaDBParser.CREATE_DIGEST:
			case MariaDBParser.CROSSES:
			case MariaDBParser.DATEDIFF:
			case MariaDBParser.DATE_FORMAT:
			case MariaDBParser.DAYNAME:
			case MariaDBParser.DAYOFMONTH:
			case MariaDBParser.DAYOFWEEK:
			case MariaDBParser.DAYOFYEAR:
			case MariaDBParser.DECODE:
			case MariaDBParser.DEGREES:
			case MariaDBParser.DES_DECRYPT:
			case MariaDBParser.DES_ENCRYPT:
			case MariaDBParser.DIMENSION:
			case MariaDBParser.DISJOINT:
			case MariaDBParser.ELT:
			case MariaDBParser.ENCODE:
			case MariaDBParser.ENCRYPT:
			case MariaDBParser.ENDPOINT:
			case MariaDBParser.ENGINE_ATTRIBUTE:
			case MariaDBParser.ENVELOPE:
			case MariaDBParser.EQUALS:
			case MariaDBParser.EXP:
			case MariaDBParser.EXPORT_SET:
			case MariaDBParser.EXTERIORRING:
			case MariaDBParser.EXTRACTVALUE:
			case MariaDBParser.FIELD:
			case MariaDBParser.FIND_IN_SET:
			case MariaDBParser.FLOOR:
			case MariaDBParser.FORMAT:
			case MariaDBParser.FOUND_ROWS:
			case MariaDBParser.FROM_BASE64:
			case MariaDBParser.FROM_DAYS:
			case MariaDBParser.FROM_UNIXTIME:
			case MariaDBParser.GEOMCOLLFROMTEXT:
			case MariaDBParser.GEOMCOLLFROMWKB:
			case MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT:
			case MariaDBParser.GEOMETRYCOLLECTIONFROMWKB:
			case MariaDBParser.GEOMETRYFROMTEXT:
			case MariaDBParser.GEOMETRYFROMWKB:
			case MariaDBParser.GEOMETRYN:
			case MariaDBParser.GEOMETRYTYPE:
			case MariaDBParser.GEOMFROMTEXT:
			case MariaDBParser.GEOMFROMWKB:
			case MariaDBParser.GET_FORMAT:
			case MariaDBParser.GET_LOCK:
			case MariaDBParser.GLENGTH:
			case MariaDBParser.GREATEST:
			case MariaDBParser.GTID_SUBSET:
			case MariaDBParser.GTID_SUBTRACT:
			case MariaDBParser.HEX:
			case MariaDBParser.IFNULL:
			case MariaDBParser.INET6_ATON:
			case MariaDBParser.INET6_NTOA:
			case MariaDBParser.INET_ATON:
			case MariaDBParser.INET_NTOA:
			case MariaDBParser.INSTR:
			case MariaDBParser.INTERIORRINGN:
			case MariaDBParser.INTERSECTS:
			case MariaDBParser.ISCLOSED:
			case MariaDBParser.ISEMPTY:
			case MariaDBParser.ISNULL:
			case MariaDBParser.ISSIMPLE:
			case MariaDBParser.IS_FREE_LOCK:
			case MariaDBParser.IS_IPV4:
			case MariaDBParser.IS_IPV4_COMPAT:
			case MariaDBParser.IS_IPV4_MAPPED:
			case MariaDBParser.IS_IPV6:
			case MariaDBParser.IS_USED_LOCK:
			case MariaDBParser.LAST_INSERT_ID:
			case MariaDBParser.LCASE:
			case MariaDBParser.LEAST:
			case MariaDBParser.LENGTH:
			case MariaDBParser.LINEFROMTEXT:
			case MariaDBParser.LINEFROMWKB:
			case MariaDBParser.LINESTRINGFROMTEXT:
			case MariaDBParser.LINESTRINGFROMWKB:
			case MariaDBParser.LN:
			case MariaDBParser.LOAD_FILE:
			case MariaDBParser.LOCATE:
			case MariaDBParser.LOG:
			case MariaDBParser.LOG10:
			case MariaDBParser.LOG2:
			case MariaDBParser.LOWER:
			case MariaDBParser.LPAD:
			case MariaDBParser.LTRIM:
			case MariaDBParser.MAKEDATE:
			case MariaDBParser.MAKETIME:
			case MariaDBParser.MAKE_SET:
			case MariaDBParser.MASTER_POS_WAIT:
			case MariaDBParser.MBRCONTAINS:
			case MariaDBParser.MBRDISJOINT:
			case MariaDBParser.MBREQUAL:
			case MariaDBParser.MBRINTERSECTS:
			case MariaDBParser.MBROVERLAPS:
			case MariaDBParser.MBRTOUCHES:
			case MariaDBParser.MBRWITHIN:
			case MariaDBParser.MD5:
			case MariaDBParser.MLINEFROMTEXT:
			case MariaDBParser.MLINEFROMWKB:
			case MariaDBParser.MONTHNAME:
			case MariaDBParser.MPOINTFROMTEXT:
			case MariaDBParser.MPOINTFROMWKB:
			case MariaDBParser.MPOLYFROMTEXT:
			case MariaDBParser.MPOLYFROMWKB:
			case MariaDBParser.MULTILINESTRINGFROMTEXT:
			case MariaDBParser.MULTILINESTRINGFROMWKB:
			case MariaDBParser.MULTIPOINTFROMTEXT:
			case MariaDBParser.MULTIPOINTFROMWKB:
			case MariaDBParser.MULTIPOLYGONFROMTEXT:
			case MariaDBParser.MULTIPOLYGONFROMWKB:
			case MariaDBParser.NAME_CONST:
			case MariaDBParser.NULLIF:
			case MariaDBParser.NUMGEOMETRIES:
			case MariaDBParser.NUMINTERIORRINGS:
			case MariaDBParser.NUMPOINTS:
			case MariaDBParser.OCT:
			case MariaDBParser.OCTET_LENGTH:
			case MariaDBParser.ORD:
			case MariaDBParser.OVERLAPS:
			case MariaDBParser.PERIOD_ADD:
			case MariaDBParser.PERIOD_DIFF:
			case MariaDBParser.PI:
			case MariaDBParser.POINTFROMTEXT:
			case MariaDBParser.POINTFROMWKB:
			case MariaDBParser.POINTN:
			case MariaDBParser.POLYFROMTEXT:
			case MariaDBParser.POLYFROMWKB:
			case MariaDBParser.POLYGONFROMTEXT:
			case MariaDBParser.POLYGONFROMWKB:
			case MariaDBParser.POW:
			case MariaDBParser.POWER:
			case MariaDBParser.QUOTE:
			case MariaDBParser.RADIANS:
			case MariaDBParser.RAND:
			case MariaDBParser.RANDOM_BYTES:
			case MariaDBParser.RELEASE_LOCK:
			case MariaDBParser.REVERSE:
			case MariaDBParser.ROUND:
			case MariaDBParser.ROW_COUNT:
			case MariaDBParser.RPAD:
			case MariaDBParser.RTRIM:
			case MariaDBParser.SEC_TO_TIME:
			case MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE:
			case MariaDBParser.SESSION_USER:
			case MariaDBParser.SHA:
			case MariaDBParser.SHA1:
			case MariaDBParser.SHA2:
			case MariaDBParser.SCHEMA_NAME:
			case MariaDBParser.SIGN:
			case MariaDBParser.SIN:
			case MariaDBParser.SLEEP:
			case MariaDBParser.SOUNDEX:
			case MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS:
			case MariaDBParser.SQRT:
			case MariaDBParser.SRID:
			case MariaDBParser.STARTPOINT:
			case MariaDBParser.STRCMP:
			case MariaDBParser.STR_TO_DATE:
			case MariaDBParser.ST_AREA:
			case MariaDBParser.ST_ASBINARY:
			case MariaDBParser.ST_ASTEXT:
			case MariaDBParser.ST_ASWKB:
			case MariaDBParser.ST_ASWKT:
			case MariaDBParser.ST_BUFFER:
			case MariaDBParser.ST_CENTROID:
			case MariaDBParser.ST_CONTAINS:
			case MariaDBParser.ST_CROSSES:
			case MariaDBParser.ST_DIFFERENCE:
			case MariaDBParser.ST_DIMENSION:
			case MariaDBParser.ST_DISJOINT:
			case MariaDBParser.ST_DISTANCE:
			case MariaDBParser.ST_ENDPOINT:
			case MariaDBParser.ST_ENVELOPE:
			case MariaDBParser.ST_EQUALS:
			case MariaDBParser.ST_EXTERIORRING:
			case MariaDBParser.ST_GEOMCOLLFROMTEXT:
			case MariaDBParser.ST_GEOMCOLLFROMTXT:
			case MariaDBParser.ST_GEOMCOLLFROMWKB:
			case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
			case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB:
			case MariaDBParser.ST_GEOMETRYFROMTEXT:
			case MariaDBParser.ST_GEOMETRYFROMWKB:
			case MariaDBParser.ST_GEOMETRYN:
			case MariaDBParser.ST_GEOMETRYTYPE:
			case MariaDBParser.ST_GEOMFROMTEXT:
			case MariaDBParser.ST_GEOMFROMWKB:
			case MariaDBParser.ST_INTERIORRINGN:
			case MariaDBParser.ST_INTERSECTION:
			case MariaDBParser.ST_INTERSECTS:
			case MariaDBParser.ST_ISCLOSED:
			case MariaDBParser.ST_ISEMPTY:
			case MariaDBParser.ST_ISSIMPLE:
			case MariaDBParser.ST_LINEFROMTEXT:
			case MariaDBParser.ST_LINEFROMWKB:
			case MariaDBParser.ST_LINESTRINGFROMTEXT:
			case MariaDBParser.ST_LINESTRINGFROMWKB:
			case MariaDBParser.ST_NUMGEOMETRIES:
			case MariaDBParser.ST_NUMINTERIORRING:
			case MariaDBParser.ST_NUMINTERIORRINGS:
			case MariaDBParser.ST_NUMPOINTS:
			case MariaDBParser.ST_OVERLAPS:
			case MariaDBParser.ST_POINTFROMTEXT:
			case MariaDBParser.ST_POINTFROMWKB:
			case MariaDBParser.ST_POINTN:
			case MariaDBParser.ST_POLYFROMTEXT:
			case MariaDBParser.ST_POLYFROMWKB:
			case MariaDBParser.ST_POLYGONFROMTEXT:
			case MariaDBParser.ST_POLYGONFROMWKB:
			case MariaDBParser.ST_SRID:
			case MariaDBParser.ST_STARTPOINT:
			case MariaDBParser.ST_SYMDIFFERENCE:
			case MariaDBParser.ST_TOUCHES:
			case MariaDBParser.ST_UNION:
			case MariaDBParser.ST_WITHIN:
			case MariaDBParser.ST_X:
			case MariaDBParser.ST_Y:
			case MariaDBParser.SUBDATE:
			case MariaDBParser.SUBSTRING_INDEX:
			case MariaDBParser.SUBTIME:
			case MariaDBParser.SYSTEM_USER:
			case MariaDBParser.TAN:
			case MariaDBParser.TIMEDIFF:
			case MariaDBParser.TIMESTAMPADD:
			case MariaDBParser.TIMESTAMPDIFF:
			case MariaDBParser.TIME_FORMAT:
			case MariaDBParser.TIME_TO_SEC:
			case MariaDBParser.TOUCHES:
			case MariaDBParser.TO_BASE64:
			case MariaDBParser.TO_DAYS:
			case MariaDBParser.TO_SECONDS:
			case MariaDBParser.UCASE:
			case MariaDBParser.UNCOMPRESS:
			case MariaDBParser.UNCOMPRESSED_LENGTH:
			case MariaDBParser.UNHEX:
			case MariaDBParser.UNIX_TIMESTAMP:
			case MariaDBParser.UPDATEXML:
			case MariaDBParser.UPPER:
			case MariaDBParser.UUID:
			case MariaDBParser.UUID_SHORT:
			case MariaDBParser.VALIDATE_PASSWORD_STRENGTH:
			case MariaDBParser.VERSION:
			case MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case MariaDBParser.WEEKDAY:
			case MariaDBParser.WEEKOFYEAR:
			case MariaDBParser.WEIGHT_STRING:
			case MariaDBParser.WITHIN:
			case MariaDBParser.YEARWEEK:
			case MariaDBParser.Y_FUNCTION:
			case MariaDBParser.X_FUNCTION:
			case MariaDBParser.VIA:
			case MariaDBParser.LASTVAL:
			case MariaDBParser.NEXTVAL:
			case MariaDBParser.SETVAL:
			case MariaDBParser.PREVIOUS:
			case MariaDBParser.PERSISTENT:
			case MariaDBParser.BINLOG_MONITOR:
			case MariaDBParser.BINLOG_REPLAY:
			case MariaDBParser.FEDERATED_ADMIN:
			case MariaDBParser.READ_ONLY_ADMIN:
			case MariaDBParser.REPLICA:
			case MariaDBParser.REPLICAS:
			case MariaDBParser.REPLICATION_MASTER_ADMIN:
			case MariaDBParser.MONITOR:
			case MariaDBParser.READ_ONLY:
			case MariaDBParser.REPLAY:
			case MariaDBParser.MOD:
			case MariaDBParser.ID:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4374;
				this.simpleId();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public startTransaction(): StartTransactionContext {
		let _localctx: StartTransactionContext = new StartTransactionContext(this._ctx, this.state);
		this.enterRule(_localctx, 306, MariaDBParser.RULE_startTransaction);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4377;
			this.match(MariaDBParser.START);
			this.state = 4378;
			this.match(MariaDBParser.TRANSACTION);
			this.state = 4387;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.READ || _la === MariaDBParser.WITH) {
				{
				this.state = 4379;
				this.transactionMode();
				this.state = 4384;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 4380;
					this.match(MariaDBParser.COMMA);
					this.state = 4381;
					this.transactionMode();
					}
					}
					this.state = 4386;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public beginWork(): BeginWorkContext {
		let _localctx: BeginWorkContext = new BeginWorkContext(this._ctx, this.state);
		this.enterRule(_localctx, 308, MariaDBParser.RULE_beginWork);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4389;
			this.match(MariaDBParser.BEGIN);
			this.state = 4391;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.WORK) {
				{
				this.state = 4390;
				this.match(MariaDBParser.WORK);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public commitWork(): CommitWorkContext {
		let _localctx: CommitWorkContext = new CommitWorkContext(this._ctx, this.state);
		this.enterRule(_localctx, 310, MariaDBParser.RULE_commitWork);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4393;
			this.match(MariaDBParser.COMMIT);
			this.state = 4395;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.WORK) {
				{
				this.state = 4394;
				this.match(MariaDBParser.WORK);
				}
			}

			this.state = 4402;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.AND) {
				{
				this.state = 4397;
				this.match(MariaDBParser.AND);
				this.state = 4399;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.NO) {
					{
					this.state = 4398;
					_localctx._nochain = this.match(MariaDBParser.NO);
					}
				}

				this.state = 4401;
				this.match(MariaDBParser.CHAIN);
				}
			}

			this.state = 4408;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 659, this._ctx) ) {
			case 1:
				{
				this.state = 4405;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.NO) {
					{
					this.state = 4404;
					_localctx._norelease = this.match(MariaDBParser.NO);
					}
				}

				this.state = 4407;
				this.match(MariaDBParser.RELEASE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rollbackWork(): RollbackWorkContext {
		let _localctx: RollbackWorkContext = new RollbackWorkContext(this._ctx, this.state);
		this.enterRule(_localctx, 312, MariaDBParser.RULE_rollbackWork);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4410;
			this.match(MariaDBParser.ROLLBACK);
			this.state = 4412;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.WORK) {
				{
				this.state = 4411;
				this.match(MariaDBParser.WORK);
				}
			}

			this.state = 4419;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.AND) {
				{
				this.state = 4414;
				this.match(MariaDBParser.AND);
				this.state = 4416;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.NO) {
					{
					this.state = 4415;
					_localctx._nochain = this.match(MariaDBParser.NO);
					}
				}

				this.state = 4418;
				this.match(MariaDBParser.CHAIN);
				}
			}

			this.state = 4425;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 664, this._ctx) ) {
			case 1:
				{
				this.state = 4422;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.NO) {
					{
					this.state = 4421;
					_localctx._norelease = this.match(MariaDBParser.NO);
					}
				}

				this.state = 4424;
				this.match(MariaDBParser.RELEASE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public savepointStatement(): SavepointStatementContext {
		let _localctx: SavepointStatementContext = new SavepointStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 314, MariaDBParser.RULE_savepointStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4427;
			this.match(MariaDBParser.SAVEPOINT);
			this.state = 4428;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rollbackStatement(): RollbackStatementContext {
		let _localctx: RollbackStatementContext = new RollbackStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 316, MariaDBParser.RULE_rollbackStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4430;
			this.match(MariaDBParser.ROLLBACK);
			this.state = 4432;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.WORK) {
				{
				this.state = 4431;
				this.match(MariaDBParser.WORK);
				}
			}

			this.state = 4434;
			this.match(MariaDBParser.TO);
			this.state = 4436;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 666, this._ctx) ) {
			case 1:
				{
				this.state = 4435;
				this.match(MariaDBParser.SAVEPOINT);
				}
				break;
			}
			this.state = 4438;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public releaseStatement(): ReleaseStatementContext {
		let _localctx: ReleaseStatementContext = new ReleaseStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 318, MariaDBParser.RULE_releaseStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4440;
			this.match(MariaDBParser.RELEASE);
			this.state = 4441;
			this.match(MariaDBParser.SAVEPOINT);
			this.state = 4442;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lockTables(): LockTablesContext {
		let _localctx: LockTablesContext = new LockTablesContext(this._ctx, this.state);
		this.enterRule(_localctx, 320, MariaDBParser.RULE_lockTables);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4444;
			this.match(MariaDBParser.LOCK);
			this.state = 4445;
			_la = this._input.LA(1);
			if (!(_la === MariaDBParser.TABLE || _la === MariaDBParser.TABLES)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4446;
			this.lockTableElement();
			this.state = 4451;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.COMMA) {
				{
				{
				this.state = 4447;
				this.match(MariaDBParser.COMMA);
				this.state = 4448;
				this.lockTableElement();
				}
				}
				this.state = 4453;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4455;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.NOWAIT || _la === MariaDBParser.WAIT) {
				{
				this.state = 4454;
				this.waitNowaitClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unlockTables(): UnlockTablesContext {
		let _localctx: UnlockTablesContext = new UnlockTablesContext(this._ctx, this.state);
		this.enterRule(_localctx, 322, MariaDBParser.RULE_unlockTables);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4457;
			this.match(MariaDBParser.UNLOCK);
			this.state = 4458;
			this.match(MariaDBParser.TABLES);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setAutocommitStatement(): SetAutocommitStatementContext {
		let _localctx: SetAutocommitStatementContext = new SetAutocommitStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 324, MariaDBParser.RULE_setAutocommitStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4460;
			this.match(MariaDBParser.SET);
			this.state = 4461;
			this.match(MariaDBParser.AUTOCOMMIT);
			this.state = 4462;
			this.match(MariaDBParser.EQUAL_SYMBOL);
			this.state = 4463;
			_localctx._autocommitValue = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MariaDBParser.ZERO_DECIMAL || _la === MariaDBParser.ONE_DECIMAL)) {
				_localctx._autocommitValue = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setTransactionStatement(): SetTransactionStatementContext {
		let _localctx: SetTransactionStatementContext = new SetTransactionStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 326, MariaDBParser.RULE_setTransactionStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4465;
			this.match(MariaDBParser.SET);
			this.state = 4467;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.GLOBAL || _la === MariaDBParser.SESSION) {
				{
				this.state = 4466;
				_localctx._transactionContext = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.GLOBAL || _la === MariaDBParser.SESSION)) {
					_localctx._transactionContext = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 4469;
			this.match(MariaDBParser.TRANSACTION);
			this.state = 4470;
			this.transactionOption();
			this.state = 4475;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.COMMA) {
				{
				{
				this.state = 4471;
				this.match(MariaDBParser.COMMA);
				this.state = 4472;
				this.transactionOption();
				}
				}
				this.state = 4477;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transactionMode(): TransactionModeContext {
		let _localctx: TransactionModeContext = new TransactionModeContext(this._ctx, this.state);
		this.enterRule(_localctx, 328, MariaDBParser.RULE_transactionMode);
		try {
			this.state = 4485;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 671, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4478;
				this.match(MariaDBParser.WITH);
				this.state = 4479;
				this.match(MariaDBParser.CONSISTENT);
				this.state = 4480;
				this.match(MariaDBParser.SNAPSHOT);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4481;
				this.match(MariaDBParser.READ);
				this.state = 4482;
				this.match(MariaDBParser.WRITE);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4483;
				this.match(MariaDBParser.READ);
				this.state = 4484;
				this.match(MariaDBParser.ONLY);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lockTableElement(): LockTableElementContext {
		let _localctx: LockTableElementContext = new LockTableElementContext(this._ctx, this.state);
		this.enterRule(_localctx, 330, MariaDBParser.RULE_lockTableElement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4487;
			this.tableName();
			this.state = 4492;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MariaDBParser.AS) | (1 << MariaDBParser.ATTRIBUTE) | (1 << MariaDBParser.BODY) | (1 << MariaDBParser.BUCKETS) | (1 << MariaDBParser.CONDITION))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (MariaDBParser.CURRENT - 36)) | (1 << (MariaDBParser.CURRENT_ROLE - 36)) | (1 << (MariaDBParser.CURRENT_USER - 36)) | (1 << (MariaDBParser.DATABASE - 36)) | (1 << (MariaDBParser.DEFAULT - 36)) | (1 << (MariaDBParser.DIAGNOSTICS - 36)) | (1 << (MariaDBParser.EMPTY - 36)) | (1 << (MariaDBParser.EXCEPT - 36)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (MariaDBParser.GROUP - 73)) | (1 << (MariaDBParser.IF - 73)) | (1 << (MariaDBParser.IGNORED - 73)) | (1 << (MariaDBParser.INSERT - 73)) | (1 << (MariaDBParser.LATERAL - 73)) | (1 << (MariaDBParser.LEFT - 73)) | (1 << (MariaDBParser.LOCKED - 73)))) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & ((1 << (MariaDBParser.MAXVALUE - 110)) | (1 << (MariaDBParser.MINVALUE - 110)) | (1 << (MariaDBParser.NUMBER - 110)) | (1 << (MariaDBParser.OPTIONAL - 110)) | (1 << (MariaDBParser.ORDER - 110)) | (1 << (MariaDBParser.PRIMARY - 110)) | (1 << (MariaDBParser.PACKAGE - 110)))) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (MariaDBParser.REPLACE - 142)) | (1 << (MariaDBParser.RIGHT - 142)) | (1 << (MariaDBParser.SCHEMA - 142)) | (1 << (MariaDBParser.SKIP_ - 142)) | (1 << (MariaDBParser.STACKED - 142)) | (1 << (MariaDBParser.STATEMENT - 142)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MariaDBParser.DATE - 217)) | (1 << (MariaDBParser.TIME - 217)) | (1 << (MariaDBParser.TIMESTAMP - 217)) | (1 << (MariaDBParser.DATETIME - 217)) | (1 << (MariaDBParser.YEAR - 217)) | (1 << (MariaDBParser.BINARY - 217)) | (1 << (MariaDBParser.TEXT - 217)) | (1 << (MariaDBParser.ENUM - 217)) | (1 << (MariaDBParser.SERIAL - 217)))) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & ((1 << (MariaDBParser.JSON_ARRAY - 251)) | (1 << (MariaDBParser.JSON_ARRAYAGG - 251)) | (1 << (MariaDBParser.JSON_ARRAY_APPEND - 251)) | (1 << (MariaDBParser.JSON_ARRAY_INSERT - 251)) | (1 << (MariaDBParser.JSON_CONTAINS - 251)) | (1 << (MariaDBParser.JSON_CONTAINS_PATH - 251)) | (1 << (MariaDBParser.JSON_DEPTH - 251)) | (1 << (MariaDBParser.JSON_EXTRACT - 251)) | (1 << (MariaDBParser.JSON_INSERT - 251)) | (1 << (MariaDBParser.JSON_KEYS - 251)) | (1 << (MariaDBParser.JSON_LENGTH - 251)) | (1 << (MariaDBParser.JSON_MERGE - 251)) | (1 << (MariaDBParser.JSON_MERGE_PATCH - 251)) | (1 << (MariaDBParser.JSON_MERGE_PRESERVE - 251)) | (1 << (MariaDBParser.JSON_OBJECT - 251)) | (1 << (MariaDBParser.JSON_OBJECTAGG - 251)) | (1 << (MariaDBParser.JSON_OVERLAPS - 251)) | (1 << (MariaDBParser.JSON_PRETTY - 251)) | (1 << (MariaDBParser.JSON_QUOTE - 251)) | (1 << (MariaDBParser.JSON_REMOVE - 251)) | (1 << (MariaDBParser.JSON_REPLACE - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALID - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT - 251)) | (1 << (MariaDBParser.JSON_SEARCH - 251)) | (1 << (MariaDBParser.JSON_SET - 251)) | (1 << (MariaDBParser.JSON_STORAGE_FREE - 251)) | (1 << (MariaDBParser.JSON_STORAGE_SIZE - 251)) | (1 << (MariaDBParser.JSON_TABLE - 251)) | (1 << (MariaDBParser.JSON_TYPE - 251)) | (1 << (MariaDBParser.JSON_UNQUOTE - 251)) | (1 << (MariaDBParser.JSON_VALID - 251)) | (1 << (MariaDBParser.JSON_VALUE - 251)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (MariaDBParser.NESTED - 283)) | (1 << (MariaDBParser.ORDINALITY - 283)) | (1 << (MariaDBParser.PATH - 283)) | (1 << (MariaDBParser.AVG - 283)) | (1 << (MariaDBParser.BIT_AND - 283)) | (1 << (MariaDBParser.BIT_OR - 283)) | (1 << (MariaDBParser.BIT_XOR - 283)) | (1 << (MariaDBParser.COUNT - 283)) | (1 << (MariaDBParser.CUME_DIST - 283)) | (1 << (MariaDBParser.DENSE_RANK - 283)) | (1 << (MariaDBParser.FIRST_VALUE - 283)) | (1 << (MariaDBParser.GROUP_CONCAT - 283)) | (1 << (MariaDBParser.LAG - 283)) | (1 << (MariaDBParser.LAST_VALUE - 283)) | (1 << (MariaDBParser.LEAD - 283)) | (1 << (MariaDBParser.MAX - 283)) | (1 << (MariaDBParser.MIN - 283)) | (1 << (MariaDBParser.NTILE - 283)) | (1 << (MariaDBParser.NTH_VALUE - 283)) | (1 << (MariaDBParser.PERCENT_RANK - 283)) | (1 << (MariaDBParser.RANK - 283)) | (1 << (MariaDBParser.ROW_NUMBER - 283)) | (1 << (MariaDBParser.STD - 283)) | (1 << (MariaDBParser.STDDEV - 283)) | (1 << (MariaDBParser.STDDEV_POP - 283)) | (1 << (MariaDBParser.STDDEV_SAMP - 283)) | (1 << (MariaDBParser.SUM - 283)) | (1 << (MariaDBParser.VAR_POP - 283)) | (1 << (MariaDBParser.VAR_SAMP - 283)) | (1 << (MariaDBParser.VARIANCE - 283)) | (1 << (MariaDBParser.CURRENT_DATE - 283)) | (1 << (MariaDBParser.CURRENT_TIME - 283)))) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & ((1 << (MariaDBParser.CURRENT_TIMESTAMP - 315)) | (1 << (MariaDBParser.LOCALTIME - 315)) | (1 << (MariaDBParser.CURDATE - 315)) | (1 << (MariaDBParser.CURTIME - 315)) | (1 << (MariaDBParser.DATE_ADD - 315)) | (1 << (MariaDBParser.DATE_SUB - 315)) | (1 << (MariaDBParser.LOCALTIMESTAMP - 315)) | (1 << (MariaDBParser.NOW - 315)) | (1 << (MariaDBParser.POSITION - 315)) | (1 << (MariaDBParser.SUBSTR - 315)) | (1 << (MariaDBParser.SUBSTRING - 315)) | (1 << (MariaDBParser.SYSDATE - 315)) | (1 << (MariaDBParser.TRIM - 315)) | (1 << (MariaDBParser.UTC_DATE - 315)) | (1 << (MariaDBParser.UTC_TIME - 315)) | (1 << (MariaDBParser.UTC_TIMESTAMP - 315)) | (1 << (MariaDBParser.ACCOUNT - 315)) | (1 << (MariaDBParser.ACTION - 315)) | (1 << (MariaDBParser.AFTER - 315)) | (1 << (MariaDBParser.AGGREGATE - 315)) | (1 << (MariaDBParser.ALGORITHM - 315)) | (1 << (MariaDBParser.ANY - 315)) | (1 << (MariaDBParser.AT - 315)) | (1 << (MariaDBParser.AUTHORS - 315)) | (1 << (MariaDBParser.AUTOCOMMIT - 315)) | (1 << (MariaDBParser.AUTOEXTEND_SIZE - 315)) | (1 << (MariaDBParser.AUTO_INCREMENT - 315)) | (1 << (MariaDBParser.AVG_ROW_LENGTH - 315)) | (1 << (MariaDBParser.BEGIN - 315)) | (1 << (MariaDBParser.BINLOG - 315)) | (1 << (MariaDBParser.BIT - 315)))) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & ((1 << (MariaDBParser.BLOCK - 347)) | (1 << (MariaDBParser.BOOL - 347)) | (1 << (MariaDBParser.BOOLEAN - 347)) | (1 << (MariaDBParser.BTREE - 347)) | (1 << (MariaDBParser.CACHE - 347)) | (1 << (MariaDBParser.CASCADED - 347)) | (1 << (MariaDBParser.CHAIN - 347)) | (1 << (MariaDBParser.CHANGED - 347)) | (1 << (MariaDBParser.CHANNEL - 347)) | (1 << (MariaDBParser.CHECKSUM - 347)) | (1 << (MariaDBParser.PAGE_CHECKSUM - 347)) | (1 << (MariaDBParser.CIPHER - 347)) | (1 << (MariaDBParser.CLASS_ORIGIN - 347)) | (1 << (MariaDBParser.CLIENT - 347)) | (1 << (MariaDBParser.CLOSE - 347)) | (1 << (MariaDBParser.CLUSTERING - 347)) | (1 << (MariaDBParser.COALESCE - 347)) | (1 << (MariaDBParser.CODE - 347)) | (1 << (MariaDBParser.COLUMNS - 347)) | (1 << (MariaDBParser.COLUMN_FORMAT - 347)) | (1 << (MariaDBParser.COLUMN_NAME - 347)) | (1 << (MariaDBParser.COMMENT - 347)) | (1 << (MariaDBParser.COMMIT - 347)) | (1 << (MariaDBParser.COMPACT - 347)) | (1 << (MariaDBParser.COMPLETION - 347)) | (1 << (MariaDBParser.COMPRESSED - 347)) | (1 << (MariaDBParser.COMPRESSION - 347)) | (1 << (MariaDBParser.CONCURRENT - 347)) | (1 << (MariaDBParser.CONNECT - 347)) | (1 << (MariaDBParser.CONNECTION - 347)) | (1 << (MariaDBParser.CONSISTENT - 347)) | (1 << (MariaDBParser.CONSTRAINT_CATALOG - 347)))) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & ((1 << (MariaDBParser.CONSTRAINT_SCHEMA - 379)) | (1 << (MariaDBParser.CONSTRAINT_NAME - 379)) | (1 << (MariaDBParser.CONTAINS - 379)) | (1 << (MariaDBParser.CONTEXT - 379)) | (1 << (MariaDBParser.CONTRIBUTORS - 379)) | (1 << (MariaDBParser.COPY - 379)) | (1 << (MariaDBParser.CPU - 379)) | (1 << (MariaDBParser.CYCLE - 379)) | (1 << (MariaDBParser.CURSOR_NAME - 379)) | (1 << (MariaDBParser.DATA - 379)) | (1 << (MariaDBParser.DATAFILE - 379)) | (1 << (MariaDBParser.DEALLOCATE - 379)) | (1 << (MariaDBParser.DEFAULT_AUTH - 379)) | (1 << (MariaDBParser.DEFINER - 379)) | (1 << (MariaDBParser.DELAY_KEY_WRITE - 379)) | (1 << (MariaDBParser.DES_KEY_FILE - 379)) | (1 << (MariaDBParser.DIRECTORY - 379)) | (1 << (MariaDBParser.DISABLE - 379)) | (1 << (MariaDBParser.DISCARD - 379)) | (1 << (MariaDBParser.DISK - 379)) | (1 << (MariaDBParser.DO - 379)) | (1 << (MariaDBParser.DUMPFILE - 379)) | (1 << (MariaDBParser.DUPLICATE - 379)) | (1 << (MariaDBParser.DYNAMIC - 379)) | (1 << (MariaDBParser.ENABLE - 379)) | (1 << (MariaDBParser.ENCRYPTED - 379)) | (1 << (MariaDBParser.ENCRYPTION - 379)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ID - 379)) | (1 << (MariaDBParser.END - 379)) | (1 << (MariaDBParser.ENDS - 379)) | (1 << (MariaDBParser.ENGINE - 379)) | (1 << (MariaDBParser.ENGINES - 379)))) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & ((1 << (MariaDBParser.ERROR - 411)) | (1 << (MariaDBParser.ERRORS - 411)) | (1 << (MariaDBParser.ESCAPE - 411)) | (1 << (MariaDBParser.EVEN - 411)) | (1 << (MariaDBParser.EVENT - 411)) | (1 << (MariaDBParser.EVENTS - 411)) | (1 << (MariaDBParser.EVERY - 411)) | (1 << (MariaDBParser.EXCHANGE - 411)) | (1 << (MariaDBParser.EXCLUSIVE - 411)) | (1 << (MariaDBParser.EXPIRE - 411)) | (1 << (MariaDBParser.EXPORT - 411)) | (1 << (MariaDBParser.EXTENDED - 411)) | (1 << (MariaDBParser.EXTENT_SIZE - 411)) | (1 << (MariaDBParser.FAILED_LOGIN_ATTEMPTS - 411)) | (1 << (MariaDBParser.FAST - 411)) | (1 << (MariaDBParser.FAULTS - 411)) | (1 << (MariaDBParser.FIELDS - 411)) | (1 << (MariaDBParser.FILE_BLOCK_SIZE - 411)) | (1 << (MariaDBParser.FILTER - 411)) | (1 << (MariaDBParser.FIRST - 411)) | (1 << (MariaDBParser.FIXED - 411)) | (1 << (MariaDBParser.FLUSH - 411)) | (1 << (MariaDBParser.FOLLOWS - 411)) | (1 << (MariaDBParser.FOUND - 411)) | (1 << (MariaDBParser.FULL - 411)) | (1 << (MariaDBParser.FUNCTION - 411)) | (1 << (MariaDBParser.GENERAL - 411)) | (1 << (MariaDBParser.GLOBAL - 411)) | (1 << (MariaDBParser.GRANTS - 411)) | (1 << (MariaDBParser.GROUP_REPLICATION - 411)) | (1 << (MariaDBParser.HANDLER - 411)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (MariaDBParser.HASH - 443)) | (1 << (MariaDBParser.HELP - 443)) | (1 << (MariaDBParser.HISTORY - 443)) | (1 << (MariaDBParser.HOST - 443)) | (1 << (MariaDBParser.HOSTS - 443)) | (1 << (MariaDBParser.IDENTIFIED - 443)) | (1 << (MariaDBParser.IGNORE_SERVER_IDS - 443)) | (1 << (MariaDBParser.IMPORT - 443)) | (1 << (MariaDBParser.INCREMENT - 443)) | (1 << (MariaDBParser.INDEXES - 443)) | (1 << (MariaDBParser.INITIAL_SIZE - 443)) | (1 << (MariaDBParser.INPLACE - 443)) | (1 << (MariaDBParser.INSERT_METHOD - 443)) | (1 << (MariaDBParser.INSTALL - 443)) | (1 << (MariaDBParser.INSTANCE - 443)) | (1 << (MariaDBParser.INSTANT - 443)) | (1 << (MariaDBParser.INVISIBLE - 443)) | (1 << (MariaDBParser.INVOKER - 443)) | (1 << (MariaDBParser.IO - 443)) | (1 << (MariaDBParser.IO_THREAD - 443)) | (1 << (MariaDBParser.IPC - 443)) | (1 << (MariaDBParser.ISOLATION - 443)) | (1 << (MariaDBParser.ISSUER - 443)) | (1 << (MariaDBParser.JSON - 443)) | (1 << (MariaDBParser.KEY_BLOCK_SIZE - 443)) | (1 << (MariaDBParser.LANGUAGE - 443)) | (1 << (MariaDBParser.LAST - 443)) | (1 << (MariaDBParser.LEAVES - 443)) | (1 << (MariaDBParser.LESS - 443)) | (1 << (MariaDBParser.LEVEL - 443)) | (1 << (MariaDBParser.LIST - 443)) | (1 << (MariaDBParser.LOCAL - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (MariaDBParser.LOCALES - 475)) | (1 << (MariaDBParser.LOGFILE - 475)) | (1 << (MariaDBParser.LOGS - 475)) | (1 << (MariaDBParser.MASTER - 475)) | (1 << (MariaDBParser.MASTER_AUTO_POSITION - 475)) | (1 << (MariaDBParser.MASTER_CONNECT_RETRY - 475)) | (1 << (MariaDBParser.MASTER_DELAY - 475)) | (1 << (MariaDBParser.MASTER_HEARTBEAT_PERIOD - 475)) | (1 << (MariaDBParser.MASTER_HOST - 475)) | (1 << (MariaDBParser.MASTER_LOG_FILE - 475)) | (1 << (MariaDBParser.MASTER_LOG_POS - 475)) | (1 << (MariaDBParser.MASTER_PASSWORD - 475)) | (1 << (MariaDBParser.MASTER_PORT - 475)) | (1 << (MariaDBParser.MASTER_RETRY_COUNT - 475)) | (1 << (MariaDBParser.MASTER_SSL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CA - 475)) | (1 << (MariaDBParser.MASTER_SSL_CAPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_CERT - 475)) | (1 << (MariaDBParser.MASTER_SSL_CIPHER - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRLPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_KEY - 475)) | (1 << (MariaDBParser.MASTER_TLS_VERSION - 475)) | (1 << (MariaDBParser.MASTER_USER - 475)) | (1 << (MariaDBParser.MAX_CONNECTIONS_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_QUERIES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_ROWS - 475)) | (1 << (MariaDBParser.MAX_SIZE - 475)) | (1 << (MariaDBParser.MAX_UPDATES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_USER_CONNECTIONS - 475)) | (1 << (MariaDBParser.MEDIUM - 475)) | (1 << (MariaDBParser.MEMBER - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (MariaDBParser.MERGE - 507)) | (1 << (MariaDBParser.MESSAGE_TEXT - 507)) | (1 << (MariaDBParser.MID - 507)) | (1 << (MariaDBParser.MIGRATE - 507)) | (1 << (MariaDBParser.MIN_ROWS - 507)) | (1 << (MariaDBParser.MODE - 507)) | (1 << (MariaDBParser.MODIFY - 507)) | (1 << (MariaDBParser.MUTEX - 507)) | (1 << (MariaDBParser.MYSQL - 507)) | (1 << (MariaDBParser.MYSQL_ERRNO - 507)) | (1 << (MariaDBParser.NAME - 507)) | (1 << (MariaDBParser.NAMES - 507)) | (1 << (MariaDBParser.NCHAR - 507)) | (1 << (MariaDBParser.NEVER - 507)) | (1 << (MariaDBParser.NEXT - 507)) | (1 << (MariaDBParser.NO - 507)) | (1 << (MariaDBParser.NOCACHE - 507)) | (1 << (MariaDBParser.NOCOPY - 507)) | (1 << (MariaDBParser.NOCYCLE - 507)) | (1 << (MariaDBParser.NOMAXVALUE - 507)) | (1 << (MariaDBParser.NOMINVALUE - 507)) | (1 << (MariaDBParser.NOWAIT - 507)) | (1 << (MariaDBParser.NODEGROUP - 507)) | (1 << (MariaDBParser.NONE - 507)) | (1 << (MariaDBParser.ODBC - 507)) | (1 << (MariaDBParser.OFFLINE - 507)) | (1 << (MariaDBParser.OFFSET - 507)) | (1 << (MariaDBParser.OF - 507)) | (1 << (MariaDBParser.OJ - 507)) | (1 << (MariaDBParser.OLD_PASSWORD - 507)) | (1 << (MariaDBParser.ONE - 507)) | (1 << (MariaDBParser.ONLINE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (MariaDBParser.ONLY - 539)) | (1 << (MariaDBParser.OPEN - 539)) | (1 << (MariaDBParser.OPTIMIZER_COSTS - 539)) | (1 << (MariaDBParser.OPTIONS - 539)) | (1 << (MariaDBParser.OWNER - 539)) | (1 << (MariaDBParser.PACK_KEYS - 539)) | (1 << (MariaDBParser.PAGE - 539)) | (1 << (MariaDBParser.PARSER - 539)) | (1 << (MariaDBParser.PARTIAL - 539)) | (1 << (MariaDBParser.PARTITIONING - 539)) | (1 << (MariaDBParser.PARTITIONS - 539)) | (1 << (MariaDBParser.PASSWORD - 539)) | (1 << (MariaDBParser.PASSWORD_LOCK_TIME - 539)) | (1 << (MariaDBParser.PHASE - 539)) | (1 << (MariaDBParser.PLUGIN - 539)) | (1 << (MariaDBParser.PLUGIN_DIR - 539)) | (1 << (MariaDBParser.PLUGINS - 539)) | (1 << (MariaDBParser.PORT - 539)) | (1 << (MariaDBParser.PRECEDES - 539)) | (1 << (MariaDBParser.PREPARE - 539)) | (1 << (MariaDBParser.PRESERVE - 539)) | (1 << (MariaDBParser.PREV - 539)) | (1 << (MariaDBParser.PROCESSLIST - 539)) | (1 << (MariaDBParser.PROFILE - 539)) | (1 << (MariaDBParser.PROFILES - 539)) | (1 << (MariaDBParser.PROXY - 539)) | (1 << (MariaDBParser.QUERY - 539)) | (1 << (MariaDBParser.QUERY_RESPONSE_TIME - 539)) | (1 << (MariaDBParser.QUICK - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (MariaDBParser.REBUILD - 571)) | (1 << (MariaDBParser.RECOVER - 571)) | (1 << (MariaDBParser.RECURSIVE - 571)) | (1 << (MariaDBParser.REDO_BUFFER_SIZE - 571)) | (1 << (MariaDBParser.REDUNDANT - 571)) | (1 << (MariaDBParser.RELAY - 571)) | (1 << (MariaDBParser.RELAY_LOG_FILE - 571)) | (1 << (MariaDBParser.RELAY_LOG_POS - 571)) | (1 << (MariaDBParser.RELAYLOG - 571)) | (1 << (MariaDBParser.REMOVE - 571)) | (1 << (MariaDBParser.REORGANIZE - 571)) | (1 << (MariaDBParser.REPAIR - 571)) | (1 << (MariaDBParser.REPLICATE_DO_DB - 571)) | (1 << (MariaDBParser.REPLICATE_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_REWRITE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATION - 571)) | (1 << (MariaDBParser.RESET - 571)) | (1 << (MariaDBParser.RESTART - 571)) | (1 << (MariaDBParser.RESUME - 571)) | (1 << (MariaDBParser.RETURNED_SQLSTATE - 571)) | (1 << (MariaDBParser.RETURNS - 571)) | (1 << (MariaDBParser.REUSE - 571)) | (1 << (MariaDBParser.ROLE - 571)) | (1 << (MariaDBParser.ROLLBACK - 571)) | (1 << (MariaDBParser.ROLLUP - 571)) | (1 << (MariaDBParser.ROTATE - 571)) | (1 << (MariaDBParser.ROW - 571)))) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & ((1 << (MariaDBParser.ROWS - 603)) | (1 << (MariaDBParser.ROW_FORMAT - 603)) | (1 << (MariaDBParser.RTREE - 603)) | (1 << (MariaDBParser.SAVEPOINT - 603)) | (1 << (MariaDBParser.SCHEDULE - 603)) | (1 << (MariaDBParser.SECURITY - 603)) | (1 << (MariaDBParser.SEQUENCE - 603)) | (1 << (MariaDBParser.SERVER - 603)) | (1 << (MariaDBParser.SESSION - 603)) | (1 << (MariaDBParser.SHARE - 603)) | (1 << (MariaDBParser.SHARED - 603)) | (1 << (MariaDBParser.SIGNED - 603)) | (1 << (MariaDBParser.SIMPLE - 603)) | (1 << (MariaDBParser.SLAVE - 603)) | (1 << (MariaDBParser.SLAVES - 603)) | (1 << (MariaDBParser.SLOW - 603)) | (1 << (MariaDBParser.SNAPSHOT - 603)) | (1 << (MariaDBParser.SOCKET - 603)) | (1 << (MariaDBParser.SOME - 603)) | (1 << (MariaDBParser.SONAME - 603)) | (1 << (MariaDBParser.SOUNDS - 603)) | (1 << (MariaDBParser.SOURCE - 603)) | (1 << (MariaDBParser.SQL_AFTER_GTIDS - 603)) | (1 << (MariaDBParser.SQL_AFTER_MTS_GAPS - 603)) | (1 << (MariaDBParser.SQL_BEFORE_GTIDS - 603)) | (1 << (MariaDBParser.SQL_BUFFER_RESULT - 603)) | (1 << (MariaDBParser.SQL_CACHE - 603)) | (1 << (MariaDBParser.SQL_NO_CACHE - 603)) | (1 << (MariaDBParser.SQL_THREAD - 603)) | (1 << (MariaDBParser.START - 603)) | (1 << (MariaDBParser.STARTS - 603)) | (1 << (MariaDBParser.STATS_AUTO_RECALC - 603)))) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & ((1 << (MariaDBParser.STATS_PERSISTENT - 635)) | (1 << (MariaDBParser.STATS_SAMPLE_PAGES - 635)) | (1 << (MariaDBParser.STATUS - 635)) | (1 << (MariaDBParser.STOP - 635)) | (1 << (MariaDBParser.STORAGE - 635)) | (1 << (MariaDBParser.STRING - 635)) | (1 << (MariaDBParser.SUBCLASS_ORIGIN - 635)) | (1 << (MariaDBParser.SUBJECT - 635)) | (1 << (MariaDBParser.SUBPARTITION - 635)) | (1 << (MariaDBParser.SUBPARTITIONS - 635)) | (1 << (MariaDBParser.SUSPEND - 635)) | (1 << (MariaDBParser.SWAPS - 635)) | (1 << (MariaDBParser.SWITCHES - 635)) | (1 << (MariaDBParser.TABLE_NAME - 635)) | (1 << (MariaDBParser.TABLESPACE - 635)) | (1 << (MariaDBParser.TABLE_TYPE - 635)) | (1 << (MariaDBParser.TEMPORARY - 635)) | (1 << (MariaDBParser.TEMPTABLE - 635)) | (1 << (MariaDBParser.THAN - 635)) | (1 << (MariaDBParser.TRADITIONAL - 635)) | (1 << (MariaDBParser.TRANSACTION - 635)) | (1 << (MariaDBParser.TRANSACTIONAL - 635)) | (1 << (MariaDBParser.TRIGGERS - 635)) | (1 << (MariaDBParser.TRUNCATE - 635)) | (1 << (MariaDBParser.TYPES - 635)) | (1 << (MariaDBParser.UNBOUNDED - 635)) | (1 << (MariaDBParser.UNDEFINED - 635)) | (1 << (MariaDBParser.UNDOFILE - 635)) | (1 << (MariaDBParser.UNDO_BUFFER_SIZE - 635)) | (1 << (MariaDBParser.UNINSTALL - 635)) | (1 << (MariaDBParser.UNKNOWN - 635)))) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & ((1 << (MariaDBParser.UNTIL - 667)) | (1 << (MariaDBParser.UPGRADE - 667)) | (1 << (MariaDBParser.USER - 667)) | (1 << (MariaDBParser.USE_FRM - 667)) | (1 << (MariaDBParser.USER_RESOURCES - 667)) | (1 << (MariaDBParser.VALIDATION - 667)) | (1 << (MariaDBParser.VALUE - 667)) | (1 << (MariaDBParser.VARIABLES - 667)) | (1 << (MariaDBParser.VIEW - 667)) | (1 << (MariaDBParser.VIRTUAL - 667)) | (1 << (MariaDBParser.VISIBLE - 667)) | (1 << (MariaDBParser.WAIT - 667)) | (1 << (MariaDBParser.WARNINGS - 667)) | (1 << (MariaDBParser.WITHOUT - 667)) | (1 << (MariaDBParser.WORK - 667)) | (1 << (MariaDBParser.WRAPPER - 667)) | (1 << (MariaDBParser.WSREP_MEMBERSHIP - 667)) | (1 << (MariaDBParser.WSREP_STATUS - 667)) | (1 << (MariaDBParser.X509 - 667)) | (1 << (MariaDBParser.XA - 667)) | (1 << (MariaDBParser.XML - 667)) | (1 << (MariaDBParser.EUR - 667)) | (1 << (MariaDBParser.USA - 667)) | (1 << (MariaDBParser.JIS - 667)) | (1 << (MariaDBParser.ISO - 667)) | (1 << (MariaDBParser.INTERNAL - 667)) | (1 << (MariaDBParser.QUARTER - 667)) | (1 << (MariaDBParser.MONTH - 667)) | (1 << (MariaDBParser.DAY - 667)) | (1 << (MariaDBParser.HOUR - 667)))) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & ((1 << (MariaDBParser.MINUTE - 699)) | (1 << (MariaDBParser.WEEK - 699)) | (1 << (MariaDBParser.SECOND - 699)) | (1 << (MariaDBParser.MICROSECOND - 699)) | (1 << (MariaDBParser.USER_STATISTICS - 699)) | (1 << (MariaDBParser.CLIENT_STATISTICS - 699)) | (1 << (MariaDBParser.INDEX_STATISTICS - 699)) | (1 << (MariaDBParser.TABLE_STATISTICS - 699)) | (1 << (MariaDBParser.ADMIN - 699)) | (1 << (MariaDBParser.AUDIT_ADMIN - 699)) | (1 << (MariaDBParser.BACKUP_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ENCRYPTION_ADMIN - 699)) | (1 << (MariaDBParser.CLONE_ADMIN - 699)) | (1 << (MariaDBParser.CONNECTION_ADMIN - 699)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ADMIN - 699)) | (1 << (MariaDBParser.EXECUTE - 699)) | (1 << (MariaDBParser.FILE - 699)) | (1 << (MariaDBParser.FIREWALL_ADMIN - 699)) | (1 << (MariaDBParser.FIREWALL_USER - 699)) | (1 << (MariaDBParser.GROUP_REPLICATION_ADMIN - 699)) | (1 << (MariaDBParser.INNODB_REDO_LOG_ARCHIVE - 699)) | (1 << (MariaDBParser.INVOKE - 699)) | (1 << (MariaDBParser.LAMBDA - 699)) | (1 << (MariaDBParser.NDB_STORED_USER - 699)) | (1 << (MariaDBParser.PASSWORDLESS_USER_ADMIN - 699)))) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & ((1 << (MariaDBParser.PERSIST_RO_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.PRIVILEGES - 731)) | (1 << (MariaDBParser.PROCESS - 731)) | (1 << (MariaDBParser.RELOAD - 731)) | (1 << (MariaDBParser.REPLICATION_APPLIER - 731)) | (1 << (MariaDBParser.REPLICATION_SLAVE_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_USER - 731)) | (1 << (MariaDBParser.ROLE_ADMIN - 731)) | (1 << (MariaDBParser.ROUTINE - 731)) | (1 << (MariaDBParser.S3 - 731)) | (1 << (MariaDBParser.SESSION_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.SET_USER_ID - 731)) | (1 << (MariaDBParser.SHOW_ROUTINE - 731)) | (1 << (MariaDBParser.SHUTDOWN - 731)) | (1 << (MariaDBParser.SUPER - 731)) | (1 << (MariaDBParser.SYSTEM_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.TABLES - 731)) | (1 << (MariaDBParser.TABLE_ENCRYPTION_ADMIN - 731)) | (1 << (MariaDBParser.VERSION_TOKEN_ADMIN - 731)) | (1 << (MariaDBParser.XA_RECOVER_ADMIN - 731)) | (1 << (MariaDBParser.ARMSCII8 - 731)) | (1 << (MariaDBParser.ASCII - 731)) | (1 << (MariaDBParser.BIG5 - 731)) | (1 << (MariaDBParser.CP1250 - 731)) | (1 << (MariaDBParser.CP1251 - 731)) | (1 << (MariaDBParser.CP1256 - 731)) | (1 << (MariaDBParser.CP1257 - 731)) | (1 << (MariaDBParser.CP850 - 731)) | (1 << (MariaDBParser.CP852 - 731)) | (1 << (MariaDBParser.CP866 - 731)))) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & ((1 << (MariaDBParser.CP932 - 763)) | (1 << (MariaDBParser.DEC8 - 763)) | (1 << (MariaDBParser.EUCJPMS - 763)) | (1 << (MariaDBParser.EUCKR - 763)) | (1 << (MariaDBParser.GB18030 - 763)) | (1 << (MariaDBParser.GB2312 - 763)) | (1 << (MariaDBParser.GBK - 763)) | (1 << (MariaDBParser.GEOSTD8 - 763)) | (1 << (MariaDBParser.GREEK - 763)) | (1 << (MariaDBParser.HEBREW - 763)) | (1 << (MariaDBParser.HP8 - 763)) | (1 << (MariaDBParser.KEYBCS2 - 763)) | (1 << (MariaDBParser.KOI8R - 763)) | (1 << (MariaDBParser.KOI8U - 763)) | (1 << (MariaDBParser.LATIN1 - 763)) | (1 << (MariaDBParser.LATIN2 - 763)) | (1 << (MariaDBParser.LATIN5 - 763)) | (1 << (MariaDBParser.LATIN7 - 763)) | (1 << (MariaDBParser.MACCE - 763)) | (1 << (MariaDBParser.MACROMAN - 763)) | (1 << (MariaDBParser.SJIS - 763)) | (1 << (MariaDBParser.SWE7 - 763)) | (1 << (MariaDBParser.TIS620 - 763)) | (1 << (MariaDBParser.UCS2 - 763)) | (1 << (MariaDBParser.UJIS - 763)) | (1 << (MariaDBParser.UTF16 - 763)) | (1 << (MariaDBParser.UTF16LE - 763)) | (1 << (MariaDBParser.UTF32 - 763)) | (1 << (MariaDBParser.UTF8 - 763)) | (1 << (MariaDBParser.UTF8MB3 - 763)) | (1 << (MariaDBParser.UTF8MB4 - 763)) | (1 << (MariaDBParser.ARCHIVE - 763)))) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & ((1 << (MariaDBParser.BLACKHOLE - 795)) | (1 << (MariaDBParser.CSV - 795)) | (1 << (MariaDBParser.FEDERATED - 795)) | (1 << (MariaDBParser.INNODB - 795)) | (1 << (MariaDBParser.MEMORY - 795)) | (1 << (MariaDBParser.MRG_MYISAM - 795)) | (1 << (MariaDBParser.MYISAM - 795)) | (1 << (MariaDBParser.NDB - 795)) | (1 << (MariaDBParser.NDBCLUSTER - 795)) | (1 << (MariaDBParser.PERFORMANCE_SCHEMA - 795)) | (1 << (MariaDBParser.TOKUDB - 795)) | (1 << (MariaDBParser.REPEATABLE - 795)) | (1 << (MariaDBParser.COMMITTED - 795)) | (1 << (MariaDBParser.UNCOMMITTED - 795)) | (1 << (MariaDBParser.SERIALIZABLE - 795)) | (1 << (MariaDBParser.GEOMETRYCOLLECTION - 795)) | (1 << (MariaDBParser.LINESTRING - 795)) | (1 << (MariaDBParser.MULTILINESTRING - 795)) | (1 << (MariaDBParser.MULTIPOINT - 795)) | (1 << (MariaDBParser.MULTIPOLYGON - 795)) | (1 << (MariaDBParser.POINT - 795)) | (1 << (MariaDBParser.POLYGON - 795)) | (1 << (MariaDBParser.ABS - 795)) | (1 << (MariaDBParser.ACOS - 795)) | (1 << (MariaDBParser.ADDDATE - 795)) | (1 << (MariaDBParser.ADDTIME - 795)) | (1 << (MariaDBParser.AES_DECRYPT - 795)) | (1 << (MariaDBParser.AES_ENCRYPT - 795)) | (1 << (MariaDBParser.AREA - 795)) | (1 << (MariaDBParser.ASBINARY - 795)))) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & ((1 << (MariaDBParser.ASIN - 827)) | (1 << (MariaDBParser.ASTEXT - 827)) | (1 << (MariaDBParser.ASWKB - 827)) | (1 << (MariaDBParser.ASWKT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DECRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DERIVE - 827)) | (1 << (MariaDBParser.ASYMMETRIC_ENCRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_SIGN - 827)) | (1 << (MariaDBParser.ASYMMETRIC_VERIFY - 827)) | (1 << (MariaDBParser.ATAN - 827)) | (1 << (MariaDBParser.ATAN2 - 827)) | (1 << (MariaDBParser.BENCHMARK - 827)) | (1 << (MariaDBParser.BIN - 827)) | (1 << (MariaDBParser.BIT_COUNT - 827)) | (1 << (MariaDBParser.BIT_LENGTH - 827)) | (1 << (MariaDBParser.BUFFER - 827)) | (1 << (MariaDBParser.CATALOG_NAME - 827)) | (1 << (MariaDBParser.CEIL - 827)) | (1 << (MariaDBParser.CEILING - 827)) | (1 << (MariaDBParser.CENTROID - 827)) | (1 << (MariaDBParser.CHARACTER_LENGTH - 827)) | (1 << (MariaDBParser.CHARSET - 827)) | (1 << (MariaDBParser.CHAR_LENGTH - 827)) | (1 << (MariaDBParser.COERCIBILITY - 827)) | (1 << (MariaDBParser.COLLATION - 827)) | (1 << (MariaDBParser.COMPRESS - 827)) | (1 << (MariaDBParser.CONCAT - 827)) | (1 << (MariaDBParser.CONCAT_WS - 827)) | (1 << (MariaDBParser.CONNECTION_ID - 827)) | (1 << (MariaDBParser.CONV - 827)) | (1 << (MariaDBParser.CONVERT_TZ - 827)) | (1 << (MariaDBParser.COS - 827)))) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & ((1 << (MariaDBParser.COT - 859)) | (1 << (MariaDBParser.CRC32 - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY - 859)) | (1 << (MariaDBParser.CREATE_DH_PARAMETERS - 859)) | (1 << (MariaDBParser.CREATE_DIGEST - 859)) | (1 << (MariaDBParser.CROSSES - 859)) | (1 << (MariaDBParser.DATEDIFF - 859)) | (1 << (MariaDBParser.DATE_FORMAT - 859)) | (1 << (MariaDBParser.DAYNAME - 859)) | (1 << (MariaDBParser.DAYOFMONTH - 859)) | (1 << (MariaDBParser.DAYOFWEEK - 859)) | (1 << (MariaDBParser.DAYOFYEAR - 859)) | (1 << (MariaDBParser.DECODE - 859)) | (1 << (MariaDBParser.DEGREES - 859)) | (1 << (MariaDBParser.DES_DECRYPT - 859)) | (1 << (MariaDBParser.DES_ENCRYPT - 859)) | (1 << (MariaDBParser.DIMENSION - 859)) | (1 << (MariaDBParser.DISJOINT - 859)) | (1 << (MariaDBParser.ELT - 859)) | (1 << (MariaDBParser.ENCODE - 859)) | (1 << (MariaDBParser.ENCRYPT - 859)) | (1 << (MariaDBParser.ENDPOINT - 859)) | (1 << (MariaDBParser.ENGINE_ATTRIBUTE - 859)) | (1 << (MariaDBParser.ENVELOPE - 859)) | (1 << (MariaDBParser.EQUALS - 859)) | (1 << (MariaDBParser.EXP - 859)) | (1 << (MariaDBParser.EXPORT_SET - 859)) | (1 << (MariaDBParser.EXTERIORRING - 859)) | (1 << (MariaDBParser.EXTRACTVALUE - 859)) | (1 << (MariaDBParser.FIELD - 859)) | (1 << (MariaDBParser.FIND_IN_SET - 859)))) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & ((1 << (MariaDBParser.FLOOR - 891)) | (1 << (MariaDBParser.FORMAT - 891)) | (1 << (MariaDBParser.FOUND_ROWS - 891)) | (1 << (MariaDBParser.FROM_BASE64 - 891)) | (1 << (MariaDBParser.FROM_DAYS - 891)) | (1 << (MariaDBParser.FROM_UNIXTIME - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYN - 891)) | (1 << (MariaDBParser.GEOMETRYTYPE - 891)) | (1 << (MariaDBParser.GEOMFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMFROMWKB - 891)) | (1 << (MariaDBParser.GET_FORMAT - 891)) | (1 << (MariaDBParser.GET_LOCK - 891)) | (1 << (MariaDBParser.GLENGTH - 891)) | (1 << (MariaDBParser.GREATEST - 891)) | (1 << (MariaDBParser.GTID_SUBSET - 891)) | (1 << (MariaDBParser.GTID_SUBTRACT - 891)) | (1 << (MariaDBParser.HEX - 891)) | (1 << (MariaDBParser.IFNULL - 891)) | (1 << (MariaDBParser.INET6_ATON - 891)) | (1 << (MariaDBParser.INET6_NTOA - 891)) | (1 << (MariaDBParser.INET_ATON - 891)) | (1 << (MariaDBParser.INET_NTOA - 891)) | (1 << (MariaDBParser.INSTR - 891)) | (1 << (MariaDBParser.INTERIORRINGN - 891)) | (1 << (MariaDBParser.INTERSECTS - 891)) | (1 << (MariaDBParser.ISCLOSED - 891)))) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & ((1 << (MariaDBParser.ISEMPTY - 923)) | (1 << (MariaDBParser.ISNULL - 923)) | (1 << (MariaDBParser.ISSIMPLE - 923)) | (1 << (MariaDBParser.IS_FREE_LOCK - 923)) | (1 << (MariaDBParser.IS_IPV4 - 923)) | (1 << (MariaDBParser.IS_IPV4_COMPAT - 923)) | (1 << (MariaDBParser.IS_IPV4_MAPPED - 923)) | (1 << (MariaDBParser.IS_IPV6 - 923)) | (1 << (MariaDBParser.IS_USED_LOCK - 923)) | (1 << (MariaDBParser.LAST_INSERT_ID - 923)) | (1 << (MariaDBParser.LCASE - 923)) | (1 << (MariaDBParser.LEAST - 923)) | (1 << (MariaDBParser.LENGTH - 923)) | (1 << (MariaDBParser.LINEFROMTEXT - 923)) | (1 << (MariaDBParser.LINEFROMWKB - 923)) | (1 << (MariaDBParser.LINESTRINGFROMTEXT - 923)) | (1 << (MariaDBParser.LINESTRINGFROMWKB - 923)) | (1 << (MariaDBParser.LN - 923)) | (1 << (MariaDBParser.LOAD_FILE - 923)) | (1 << (MariaDBParser.LOCATE - 923)) | (1 << (MariaDBParser.LOG - 923)) | (1 << (MariaDBParser.LOG10 - 923)) | (1 << (MariaDBParser.LOG2 - 923)) | (1 << (MariaDBParser.LOWER - 923)) | (1 << (MariaDBParser.LPAD - 923)) | (1 << (MariaDBParser.LTRIM - 923)) | (1 << (MariaDBParser.MAKEDATE - 923)) | (1 << (MariaDBParser.MAKETIME - 923)) | (1 << (MariaDBParser.MAKE_SET - 923)) | (1 << (MariaDBParser.MASTER_POS_WAIT - 923)) | (1 << (MariaDBParser.MBRCONTAINS - 923)) | (1 << (MariaDBParser.MBRDISJOINT - 923)))) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & ((1 << (MariaDBParser.MBREQUAL - 955)) | (1 << (MariaDBParser.MBRINTERSECTS - 955)) | (1 << (MariaDBParser.MBROVERLAPS - 955)) | (1 << (MariaDBParser.MBRTOUCHES - 955)) | (1 << (MariaDBParser.MBRWITHIN - 955)) | (1 << (MariaDBParser.MD5 - 955)) | (1 << (MariaDBParser.MLINEFROMTEXT - 955)) | (1 << (MariaDBParser.MLINEFROMWKB - 955)) | (1 << (MariaDBParser.MONTHNAME - 955)) | (1 << (MariaDBParser.MPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MPOLYFROMTEXT - 955)) | (1 << (MariaDBParser.MPOLYFROMWKB - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMTEXT - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMWKB - 955)) | (1 << (MariaDBParser.NAME_CONST - 955)) | (1 << (MariaDBParser.NULLIF - 955)) | (1 << (MariaDBParser.NUMGEOMETRIES - 955)) | (1 << (MariaDBParser.NUMINTERIORRINGS - 955)) | (1 << (MariaDBParser.NUMPOINTS - 955)) | (1 << (MariaDBParser.OCT - 955)) | (1 << (MariaDBParser.OCTET_LENGTH - 955)) | (1 << (MariaDBParser.ORD - 955)) | (1 << (MariaDBParser.OVERLAPS - 955)) | (1 << (MariaDBParser.PERIOD_ADD - 955)) | (1 << (MariaDBParser.PERIOD_DIFF - 955)) | (1 << (MariaDBParser.PI - 955)) | (1 << (MariaDBParser.POINTFROMTEXT - 955)))) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & ((1 << (MariaDBParser.POINTFROMWKB - 987)) | (1 << (MariaDBParser.POINTN - 987)) | (1 << (MariaDBParser.POLYFROMTEXT - 987)) | (1 << (MariaDBParser.POLYFROMWKB - 987)) | (1 << (MariaDBParser.POLYGONFROMTEXT - 987)) | (1 << (MariaDBParser.POLYGONFROMWKB - 987)) | (1 << (MariaDBParser.POW - 987)) | (1 << (MariaDBParser.POWER - 987)) | (1 << (MariaDBParser.QUOTE - 987)) | (1 << (MariaDBParser.RADIANS - 987)) | (1 << (MariaDBParser.RAND - 987)) | (1 << (MariaDBParser.RANDOM_BYTES - 987)) | (1 << (MariaDBParser.RELEASE_LOCK - 987)) | (1 << (MariaDBParser.REVERSE - 987)) | (1 << (MariaDBParser.ROUND - 987)) | (1 << (MariaDBParser.ROW_COUNT - 987)) | (1 << (MariaDBParser.RPAD - 987)) | (1 << (MariaDBParser.RTRIM - 987)) | (1 << (MariaDBParser.SEC_TO_TIME - 987)) | (1 << (MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE - 987)) | (1 << (MariaDBParser.SESSION_USER - 987)) | (1 << (MariaDBParser.SHA - 987)) | (1 << (MariaDBParser.SHA1 - 987)) | (1 << (MariaDBParser.SHA2 - 987)) | (1 << (MariaDBParser.SCHEMA_NAME - 987)) | (1 << (MariaDBParser.SIGN - 987)) | (1 << (MariaDBParser.SIN - 987)) | (1 << (MariaDBParser.SLEEP - 987)) | (1 << (MariaDBParser.SOUNDEX - 987)) | (1 << (MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS - 987)) | (1 << (MariaDBParser.SQRT - 987)) | (1 << (MariaDBParser.SRID - 987)))) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & ((1 << (MariaDBParser.STARTPOINT - 1019)) | (1 << (MariaDBParser.STRCMP - 1019)) | (1 << (MariaDBParser.STR_TO_DATE - 1019)) | (1 << (MariaDBParser.ST_AREA - 1019)) | (1 << (MariaDBParser.ST_ASBINARY - 1019)) | (1 << (MariaDBParser.ST_ASTEXT - 1019)) | (1 << (MariaDBParser.ST_ASWKB - 1019)) | (1 << (MariaDBParser.ST_ASWKT - 1019)) | (1 << (MariaDBParser.ST_BUFFER - 1019)) | (1 << (MariaDBParser.ST_CENTROID - 1019)) | (1 << (MariaDBParser.ST_CONTAINS - 1019)) | (1 << (MariaDBParser.ST_CROSSES - 1019)) | (1 << (MariaDBParser.ST_DIFFERENCE - 1019)) | (1 << (MariaDBParser.ST_DIMENSION - 1019)) | (1 << (MariaDBParser.ST_DISJOINT - 1019)) | (1 << (MariaDBParser.ST_DISTANCE - 1019)) | (1 << (MariaDBParser.ST_ENDPOINT - 1019)) | (1 << (MariaDBParser.ST_ENVELOPE - 1019)) | (1 << (MariaDBParser.ST_EQUALS - 1019)) | (1 << (MariaDBParser.ST_EXTERIORRING - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYN - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYTYPE - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMWKB - 1019)) | (1 << (MariaDBParser.ST_INTERIORRINGN - 1019)))) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & ((1 << (MariaDBParser.ST_INTERSECTION - 1051)) | (1 << (MariaDBParser.ST_INTERSECTS - 1051)) | (1 << (MariaDBParser.ST_ISCLOSED - 1051)) | (1 << (MariaDBParser.ST_ISEMPTY - 1051)) | (1 << (MariaDBParser.ST_ISSIMPLE - 1051)) | (1 << (MariaDBParser.ST_LINEFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINEFROMWKB - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMWKB - 1051)) | (1 << (MariaDBParser.ST_NUMGEOMETRIES - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRING - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRINGS - 1051)) | (1 << (MariaDBParser.ST_NUMPOINTS - 1051)) | (1 << (MariaDBParser.ST_OVERLAPS - 1051)) | (1 << (MariaDBParser.ST_POINTFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POINTFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POINTN - 1051)) | (1 << (MariaDBParser.ST_POLYFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMWKB - 1051)) | (1 << (MariaDBParser.ST_SRID - 1051)) | (1 << (MariaDBParser.ST_STARTPOINT - 1051)) | (1 << (MariaDBParser.ST_SYMDIFFERENCE - 1051)) | (1 << (MariaDBParser.ST_TOUCHES - 1051)) | (1 << (MariaDBParser.ST_UNION - 1051)) | (1 << (MariaDBParser.ST_WITHIN - 1051)) | (1 << (MariaDBParser.ST_X - 1051)) | (1 << (MariaDBParser.ST_Y - 1051)) | (1 << (MariaDBParser.SUBDATE - 1051)) | (1 << (MariaDBParser.SUBSTRING_INDEX - 1051)) | (1 << (MariaDBParser.SUBTIME - 1051)))) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & ((1 << (MariaDBParser.SYSTEM_USER - 1083)) | (1 << (MariaDBParser.TAN - 1083)) | (1 << (MariaDBParser.TIMEDIFF - 1083)) | (1 << (MariaDBParser.TIMESTAMPADD - 1083)) | (1 << (MariaDBParser.TIMESTAMPDIFF - 1083)) | (1 << (MariaDBParser.TIME_FORMAT - 1083)) | (1 << (MariaDBParser.TIME_TO_SEC - 1083)) | (1 << (MariaDBParser.TOUCHES - 1083)) | (1 << (MariaDBParser.TO_BASE64 - 1083)) | (1 << (MariaDBParser.TO_DAYS - 1083)) | (1 << (MariaDBParser.TO_SECONDS - 1083)) | (1 << (MariaDBParser.UCASE - 1083)) | (1 << (MariaDBParser.UNCOMPRESS - 1083)) | (1 << (MariaDBParser.UNCOMPRESSED_LENGTH - 1083)) | (1 << (MariaDBParser.UNHEX - 1083)) | (1 << (MariaDBParser.UNIX_TIMESTAMP - 1083)) | (1 << (MariaDBParser.UPDATEXML - 1083)) | (1 << (MariaDBParser.UPPER - 1083)) | (1 << (MariaDBParser.UUID - 1083)) | (1 << (MariaDBParser.UUID_SHORT - 1083)) | (1 << (MariaDBParser.VALIDATE_PASSWORD_STRENGTH - 1083)) | (1 << (MariaDBParser.VERSION - 1083)) | (1 << (MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1083)) | (1 << (MariaDBParser.WEEKDAY - 1083)) | (1 << (MariaDBParser.WEEKOFYEAR - 1083)) | (1 << (MariaDBParser.WEIGHT_STRING - 1083)) | (1 << (MariaDBParser.WITHIN - 1083)) | (1 << (MariaDBParser.YEARWEEK - 1083)) | (1 << (MariaDBParser.Y_FUNCTION - 1083)) | (1 << (MariaDBParser.X_FUNCTION - 1083)) | (1 << (MariaDBParser.VIA - 1083)) | (1 << (MariaDBParser.LASTVAL - 1083)))) !== 0) || ((((_la - 1115)) & ~0x1F) === 0 && ((1 << (_la - 1115)) & ((1 << (MariaDBParser.NEXTVAL - 1115)) | (1 << (MariaDBParser.SETVAL - 1115)) | (1 << (MariaDBParser.PREVIOUS - 1115)) | (1 << (MariaDBParser.PERSISTENT - 1115)) | (1 << (MariaDBParser.BINLOG_MONITOR - 1115)) | (1 << (MariaDBParser.BINLOG_REPLAY - 1115)) | (1 << (MariaDBParser.FEDERATED_ADMIN - 1115)) | (1 << (MariaDBParser.READ_ONLY_ADMIN - 1115)) | (1 << (MariaDBParser.REPLICA - 1115)) | (1 << (MariaDBParser.REPLICAS - 1115)) | (1 << (MariaDBParser.REPLICATION_MASTER_ADMIN - 1115)) | (1 << (MariaDBParser.MONITOR - 1115)) | (1 << (MariaDBParser.READ_ONLY - 1115)) | (1 << (MariaDBParser.REPLAY - 1115)) | (1 << (MariaDBParser.MOD - 1115)))) !== 0) || ((((_la - 1166)) & ~0x1F) === 0 && ((1 << (_la - 1166)) & ((1 << (MariaDBParser.CHARSET_REVERSE_QOUTE_STRING - 1166)) | (1 << (MariaDBParser.STRING_LITERAL - 1166)) | (1 << (MariaDBParser.ID - 1166)))) !== 0)) {
				{
				this.state = 4489;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.AS) {
					{
					this.state = 4488;
					this.match(MariaDBParser.AS);
					}
				}

				this.state = 4491;
				this.uid();
				}
			}

			this.state = 4494;
			this.lockAction();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lockAction(): LockActionContext {
		let _localctx: LockActionContext = new LockActionContext(this._ctx, this.state);
		this.enterRule(_localctx, 332, MariaDBParser.RULE_lockAction);
		let _la: number;
		try {
			this.state = 4504;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.READ:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4496;
				this.match(MariaDBParser.READ);
				this.state = 4498;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.LOCAL) {
					{
					this.state = 4497;
					this.match(MariaDBParser.LOCAL);
					}
				}

				}
				break;
			case MariaDBParser.LOW_PRIORITY:
			case MariaDBParser.WRITE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4501;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.LOW_PRIORITY) {
					{
					this.state = 4500;
					this.match(MariaDBParser.LOW_PRIORITY);
					}
				}

				this.state = 4503;
				this.match(MariaDBParser.WRITE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transactionOption(): TransactionOptionContext {
		let _localctx: TransactionOptionContext = new TransactionOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 334, MariaDBParser.RULE_transactionOption);
		try {
			this.state = 4513;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 677, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4506;
				this.match(MariaDBParser.ISOLATION);
				this.state = 4507;
				this.match(MariaDBParser.LEVEL);
				this.state = 4508;
				this.transactionLevel();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4509;
				this.match(MariaDBParser.READ);
				this.state = 4510;
				this.match(MariaDBParser.WRITE);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4511;
				this.match(MariaDBParser.READ);
				this.state = 4512;
				this.match(MariaDBParser.ONLY);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transactionLevel(): TransactionLevelContext {
		let _localctx: TransactionLevelContext = new TransactionLevelContext(this._ctx, this.state);
		this.enterRule(_localctx, 336, MariaDBParser.RULE_transactionLevel);
		try {
			this.state = 4522;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 678, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4515;
				this.match(MariaDBParser.REPEATABLE);
				this.state = 4516;
				this.match(MariaDBParser.READ);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4517;
				this.match(MariaDBParser.READ);
				this.state = 4518;
				this.match(MariaDBParser.COMMITTED);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4519;
				this.match(MariaDBParser.READ);
				this.state = 4520;
				this.match(MariaDBParser.UNCOMMITTED);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4521;
				this.match(MariaDBParser.SERIALIZABLE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public changeMaster(): ChangeMasterContext {
		let _localctx: ChangeMasterContext = new ChangeMasterContext(this._ctx, this.state);
		this.enterRule(_localctx, 338, MariaDBParser.RULE_changeMaster);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4524;
			this.match(MariaDBParser.CHANGE);
			this.state = 4525;
			this.match(MariaDBParser.MASTER);
			this.state = 4526;
			this.match(MariaDBParser.TO);
			this.state = 4527;
			this.masterOption();
			this.state = 4532;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.COMMA) {
				{
				{
				this.state = 4528;
				this.match(MariaDBParser.COMMA);
				this.state = 4529;
				this.masterOption();
				}
				}
				this.state = 4534;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4536;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.FOR) {
				{
				this.state = 4535;
				this.channelOption();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public changeReplicationFilter(): ChangeReplicationFilterContext {
		let _localctx: ChangeReplicationFilterContext = new ChangeReplicationFilterContext(this._ctx, this.state);
		this.enterRule(_localctx, 340, MariaDBParser.RULE_changeReplicationFilter);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4538;
			this.match(MariaDBParser.CHANGE);
			this.state = 4539;
			this.match(MariaDBParser.REPLICATION);
			this.state = 4540;
			this.match(MariaDBParser.FILTER);
			this.state = 4541;
			this.replicationFilter();
			this.state = 4546;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.COMMA) {
				{
				{
				this.state = 4542;
				this.match(MariaDBParser.COMMA);
				this.state = 4543;
				this.replicationFilter();
				}
				}
				this.state = 4548;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public purgeBinaryLogs(): PurgeBinaryLogsContext {
		let _localctx: PurgeBinaryLogsContext = new PurgeBinaryLogsContext(this._ctx, this.state);
		this.enterRule(_localctx, 342, MariaDBParser.RULE_purgeBinaryLogs);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4549;
			this.match(MariaDBParser.PURGE);
			this.state = 4550;
			_localctx._purgeFormat = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MariaDBParser.BINARY || _la === MariaDBParser.MASTER)) {
				_localctx._purgeFormat = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4551;
			this.match(MariaDBParser.LOGS);
			this.state = 4556;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.TO:
				{
				this.state = 4552;
				this.match(MariaDBParser.TO);
				this.state = 4553;
				_localctx._fileName = this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			case MariaDBParser.BEFORE:
				{
				this.state = 4554;
				this.match(MariaDBParser.BEFORE);
				this.state = 4555;
				_localctx._timeValue = this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public resetMaster(): ResetMasterContext {
		let _localctx: ResetMasterContext = new ResetMasterContext(this._ctx, this.state);
		this.enterRule(_localctx, 344, MariaDBParser.RULE_resetMaster);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4558;
			this.match(MariaDBParser.RESET);
			this.state = 4559;
			this.match(MariaDBParser.MASTER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public resetSlave(): ResetSlaveContext {
		let _localctx: ResetSlaveContext = new ResetSlaveContext(this._ctx, this.state);
		this.enterRule(_localctx, 346, MariaDBParser.RULE_resetSlave);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4561;
			this.match(MariaDBParser.RESET);
			this.state = 4562;
			this.match(MariaDBParser.SLAVE);
			this.state = 4564;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.ALL) {
				{
				this.state = 4563;
				this.match(MariaDBParser.ALL);
				}
			}

			this.state = 4567;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.FOR) {
				{
				this.state = 4566;
				this.channelOption();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public startSlave(): StartSlaveContext {
		let _localctx: StartSlaveContext = new StartSlaveContext(this._ctx, this.state);
		this.enterRule(_localctx, 348, MariaDBParser.RULE_startSlave);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4569;
			this.match(MariaDBParser.START);
			this.state = 4570;
			this.match(MariaDBParser.SLAVE);
			this.state = 4579;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.IO_THREAD || _la === MariaDBParser.SQL_THREAD) {
				{
				this.state = 4571;
				this.threadType();
				this.state = 4576;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 4572;
					this.match(MariaDBParser.COMMA);
					this.state = 4573;
					this.threadType();
					}
					}
					this.state = 4578;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 4583;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.UNTIL) {
				{
				this.state = 4581;
				this.match(MariaDBParser.UNTIL);
				this.state = 4582;
				this.untilOption();
				}
			}

			this.state = 4588;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.DEFAULT_AUTH || _la === MariaDBParser.PASSWORD || _la === MariaDBParser.PLUGIN_DIR || _la === MariaDBParser.USER) {
				{
				{
				this.state = 4585;
				this.connectionOption();
				}
				}
				this.state = 4590;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4592;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.FOR) {
				{
				this.state = 4591;
				this.channelOption();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stopSlave(): StopSlaveContext {
		let _localctx: StopSlaveContext = new StopSlaveContext(this._ctx, this.state);
		this.enterRule(_localctx, 350, MariaDBParser.RULE_stopSlave);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4594;
			this.match(MariaDBParser.STOP);
			this.state = 4595;
			this.match(MariaDBParser.SLAVE);
			this.state = 4604;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.IO_THREAD || _la === MariaDBParser.SQL_THREAD) {
				{
				this.state = 4596;
				this.threadType();
				this.state = 4601;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 4597;
					this.match(MariaDBParser.COMMA);
					this.state = 4598;
					this.threadType();
					}
					}
					this.state = 4603;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public startGroupReplication(): StartGroupReplicationContext {
		let _localctx: StartGroupReplicationContext = new StartGroupReplicationContext(this._ctx, this.state);
		this.enterRule(_localctx, 352, MariaDBParser.RULE_startGroupReplication);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4606;
			this.match(MariaDBParser.START);
			this.state = 4607;
			this.match(MariaDBParser.GROUP_REPLICATION);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stopGroupReplication(): StopGroupReplicationContext {
		let _localctx: StopGroupReplicationContext = new StopGroupReplicationContext(this._ctx, this.state);
		this.enterRule(_localctx, 354, MariaDBParser.RULE_stopGroupReplication);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4609;
			this.match(MariaDBParser.STOP);
			this.state = 4610;
			this.match(MariaDBParser.GROUP_REPLICATION);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public masterOption(): MasterOptionContext {
		let _localctx: MasterOptionContext = new MasterOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 356, MariaDBParser.RULE_masterOption);
		let _la: number;
		try {
			this.state = 4641;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.MASTER_BIND:
			case MariaDBParser.MASTER_HOST:
			case MariaDBParser.MASTER_LOG_FILE:
			case MariaDBParser.MASTER_PASSWORD:
			case MariaDBParser.MASTER_SSL_CA:
			case MariaDBParser.MASTER_SSL_CAPATH:
			case MariaDBParser.MASTER_SSL_CERT:
			case MariaDBParser.MASTER_SSL_CIPHER:
			case MariaDBParser.MASTER_SSL_CRL:
			case MariaDBParser.MASTER_SSL_CRLPATH:
			case MariaDBParser.MASTER_SSL_KEY:
			case MariaDBParser.MASTER_TLS_VERSION:
			case MariaDBParser.MASTER_USER:
			case MariaDBParser.RELAY_LOG_FILE:
				_localctx = new MasterStringOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4612;
				this.stringMasterOption();
				this.state = 4613;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				this.state = 4614;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			case MariaDBParser.MASTER_CONNECT_RETRY:
			case MariaDBParser.MASTER_DELAY:
			case MariaDBParser.MASTER_LOG_POS:
			case MariaDBParser.MASTER_PORT:
			case MariaDBParser.MASTER_RETRY_COUNT:
			case MariaDBParser.RELAY_LOG_POS:
				_localctx = new MasterDecimalOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4616;
				this.decimalMasterOption();
				this.state = 4617;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				this.state = 4618;
				this.decimalLiteral();
				}
				break;
			case MariaDBParser.MASTER_SSL_VERIFY_SERVER_CERT:
			case MariaDBParser.MASTER_AUTO_POSITION:
			case MariaDBParser.MASTER_SSL:
				_localctx = new MasterBoolOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4620;
				this.boolMasterOption();
				this.state = 4621;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				this.state = 4622;
				(_localctx as MasterBoolOptionContext)._boolVal = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.ZERO_DECIMAL || _la === MariaDBParser.ONE_DECIMAL)) {
					(_localctx as MasterBoolOptionContext)._boolVal = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case MariaDBParser.MASTER_HEARTBEAT_PERIOD:
				_localctx = new MasterRealOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4624;
				this.match(MariaDBParser.MASTER_HEARTBEAT_PERIOD);
				this.state = 4625;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				this.state = 4626;
				this.match(MariaDBParser.REAL_LITERAL);
				}
				break;
			case MariaDBParser.IGNORE_SERVER_IDS:
				_localctx = new MasterUidListOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4627;
				this.match(MariaDBParser.IGNORE_SERVER_IDS);
				this.state = 4628;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				this.state = 4629;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 4638;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MariaDBParser.ATTRIBUTE) | (1 << MariaDBParser.BODY) | (1 << MariaDBParser.BUCKETS) | (1 << MariaDBParser.CONDITION))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (MariaDBParser.CURRENT - 36)) | (1 << (MariaDBParser.CURRENT_ROLE - 36)) | (1 << (MariaDBParser.CURRENT_USER - 36)) | (1 << (MariaDBParser.DATABASE - 36)) | (1 << (MariaDBParser.DEFAULT - 36)) | (1 << (MariaDBParser.DIAGNOSTICS - 36)) | (1 << (MariaDBParser.EMPTY - 36)) | (1 << (MariaDBParser.EXCEPT - 36)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (MariaDBParser.GROUP - 73)) | (1 << (MariaDBParser.IF - 73)) | (1 << (MariaDBParser.IGNORED - 73)) | (1 << (MariaDBParser.INSERT - 73)) | (1 << (MariaDBParser.LATERAL - 73)) | (1 << (MariaDBParser.LEFT - 73)) | (1 << (MariaDBParser.LOCKED - 73)))) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & ((1 << (MariaDBParser.MAXVALUE - 110)) | (1 << (MariaDBParser.MINVALUE - 110)) | (1 << (MariaDBParser.NUMBER - 110)) | (1 << (MariaDBParser.OPTIONAL - 110)) | (1 << (MariaDBParser.ORDER - 110)) | (1 << (MariaDBParser.PRIMARY - 110)) | (1 << (MariaDBParser.PACKAGE - 110)))) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (MariaDBParser.REPLACE - 142)) | (1 << (MariaDBParser.RIGHT - 142)) | (1 << (MariaDBParser.SCHEMA - 142)) | (1 << (MariaDBParser.SKIP_ - 142)) | (1 << (MariaDBParser.STACKED - 142)) | (1 << (MariaDBParser.STATEMENT - 142)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MariaDBParser.DATE - 217)) | (1 << (MariaDBParser.TIME - 217)) | (1 << (MariaDBParser.TIMESTAMP - 217)) | (1 << (MariaDBParser.DATETIME - 217)) | (1 << (MariaDBParser.YEAR - 217)) | (1 << (MariaDBParser.BINARY - 217)) | (1 << (MariaDBParser.TEXT - 217)) | (1 << (MariaDBParser.ENUM - 217)) | (1 << (MariaDBParser.SERIAL - 217)))) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & ((1 << (MariaDBParser.JSON_ARRAY - 251)) | (1 << (MariaDBParser.JSON_ARRAYAGG - 251)) | (1 << (MariaDBParser.JSON_ARRAY_APPEND - 251)) | (1 << (MariaDBParser.JSON_ARRAY_INSERT - 251)) | (1 << (MariaDBParser.JSON_CONTAINS - 251)) | (1 << (MariaDBParser.JSON_CONTAINS_PATH - 251)) | (1 << (MariaDBParser.JSON_DEPTH - 251)) | (1 << (MariaDBParser.JSON_EXTRACT - 251)) | (1 << (MariaDBParser.JSON_INSERT - 251)) | (1 << (MariaDBParser.JSON_KEYS - 251)) | (1 << (MariaDBParser.JSON_LENGTH - 251)) | (1 << (MariaDBParser.JSON_MERGE - 251)) | (1 << (MariaDBParser.JSON_MERGE_PATCH - 251)) | (1 << (MariaDBParser.JSON_MERGE_PRESERVE - 251)) | (1 << (MariaDBParser.JSON_OBJECT - 251)) | (1 << (MariaDBParser.JSON_OBJECTAGG - 251)) | (1 << (MariaDBParser.JSON_OVERLAPS - 251)) | (1 << (MariaDBParser.JSON_PRETTY - 251)) | (1 << (MariaDBParser.JSON_QUOTE - 251)) | (1 << (MariaDBParser.JSON_REMOVE - 251)) | (1 << (MariaDBParser.JSON_REPLACE - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALID - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT - 251)) | (1 << (MariaDBParser.JSON_SEARCH - 251)) | (1 << (MariaDBParser.JSON_SET - 251)) | (1 << (MariaDBParser.JSON_STORAGE_FREE - 251)) | (1 << (MariaDBParser.JSON_STORAGE_SIZE - 251)) | (1 << (MariaDBParser.JSON_TABLE - 251)) | (1 << (MariaDBParser.JSON_TYPE - 251)) | (1 << (MariaDBParser.JSON_UNQUOTE - 251)) | (1 << (MariaDBParser.JSON_VALID - 251)) | (1 << (MariaDBParser.JSON_VALUE - 251)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (MariaDBParser.NESTED - 283)) | (1 << (MariaDBParser.ORDINALITY - 283)) | (1 << (MariaDBParser.PATH - 283)) | (1 << (MariaDBParser.AVG - 283)) | (1 << (MariaDBParser.BIT_AND - 283)) | (1 << (MariaDBParser.BIT_OR - 283)) | (1 << (MariaDBParser.BIT_XOR - 283)) | (1 << (MariaDBParser.COUNT - 283)) | (1 << (MariaDBParser.CUME_DIST - 283)) | (1 << (MariaDBParser.DENSE_RANK - 283)) | (1 << (MariaDBParser.FIRST_VALUE - 283)) | (1 << (MariaDBParser.GROUP_CONCAT - 283)) | (1 << (MariaDBParser.LAG - 283)) | (1 << (MariaDBParser.LAST_VALUE - 283)) | (1 << (MariaDBParser.LEAD - 283)) | (1 << (MariaDBParser.MAX - 283)) | (1 << (MariaDBParser.MIN - 283)) | (1 << (MariaDBParser.NTILE - 283)) | (1 << (MariaDBParser.NTH_VALUE - 283)) | (1 << (MariaDBParser.PERCENT_RANK - 283)) | (1 << (MariaDBParser.RANK - 283)) | (1 << (MariaDBParser.ROW_NUMBER - 283)) | (1 << (MariaDBParser.STD - 283)) | (1 << (MariaDBParser.STDDEV - 283)) | (1 << (MariaDBParser.STDDEV_POP - 283)) | (1 << (MariaDBParser.STDDEV_SAMP - 283)) | (1 << (MariaDBParser.SUM - 283)) | (1 << (MariaDBParser.VAR_POP - 283)) | (1 << (MariaDBParser.VAR_SAMP - 283)) | (1 << (MariaDBParser.VARIANCE - 283)) | (1 << (MariaDBParser.CURRENT_DATE - 283)) | (1 << (MariaDBParser.CURRENT_TIME - 283)))) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & ((1 << (MariaDBParser.CURRENT_TIMESTAMP - 315)) | (1 << (MariaDBParser.LOCALTIME - 315)) | (1 << (MariaDBParser.CURDATE - 315)) | (1 << (MariaDBParser.CURTIME - 315)) | (1 << (MariaDBParser.DATE_ADD - 315)) | (1 << (MariaDBParser.DATE_SUB - 315)) | (1 << (MariaDBParser.LOCALTIMESTAMP - 315)) | (1 << (MariaDBParser.NOW - 315)) | (1 << (MariaDBParser.POSITION - 315)) | (1 << (MariaDBParser.SUBSTR - 315)) | (1 << (MariaDBParser.SUBSTRING - 315)) | (1 << (MariaDBParser.SYSDATE - 315)) | (1 << (MariaDBParser.TRIM - 315)) | (1 << (MariaDBParser.UTC_DATE - 315)) | (1 << (MariaDBParser.UTC_TIME - 315)) | (1 << (MariaDBParser.UTC_TIMESTAMP - 315)) | (1 << (MariaDBParser.ACCOUNT - 315)) | (1 << (MariaDBParser.ACTION - 315)) | (1 << (MariaDBParser.AFTER - 315)) | (1 << (MariaDBParser.AGGREGATE - 315)) | (1 << (MariaDBParser.ALGORITHM - 315)) | (1 << (MariaDBParser.ANY - 315)) | (1 << (MariaDBParser.AT - 315)) | (1 << (MariaDBParser.AUTHORS - 315)) | (1 << (MariaDBParser.AUTOCOMMIT - 315)) | (1 << (MariaDBParser.AUTOEXTEND_SIZE - 315)) | (1 << (MariaDBParser.AUTO_INCREMENT - 315)) | (1 << (MariaDBParser.AVG_ROW_LENGTH - 315)) | (1 << (MariaDBParser.BEGIN - 315)) | (1 << (MariaDBParser.BINLOG - 315)) | (1 << (MariaDBParser.BIT - 315)))) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & ((1 << (MariaDBParser.BLOCK - 347)) | (1 << (MariaDBParser.BOOL - 347)) | (1 << (MariaDBParser.BOOLEAN - 347)) | (1 << (MariaDBParser.BTREE - 347)) | (1 << (MariaDBParser.CACHE - 347)) | (1 << (MariaDBParser.CASCADED - 347)) | (1 << (MariaDBParser.CHAIN - 347)) | (1 << (MariaDBParser.CHANGED - 347)) | (1 << (MariaDBParser.CHANNEL - 347)) | (1 << (MariaDBParser.CHECKSUM - 347)) | (1 << (MariaDBParser.PAGE_CHECKSUM - 347)) | (1 << (MariaDBParser.CIPHER - 347)) | (1 << (MariaDBParser.CLASS_ORIGIN - 347)) | (1 << (MariaDBParser.CLIENT - 347)) | (1 << (MariaDBParser.CLOSE - 347)) | (1 << (MariaDBParser.CLUSTERING - 347)) | (1 << (MariaDBParser.COALESCE - 347)) | (1 << (MariaDBParser.CODE - 347)) | (1 << (MariaDBParser.COLUMNS - 347)) | (1 << (MariaDBParser.COLUMN_FORMAT - 347)) | (1 << (MariaDBParser.COLUMN_NAME - 347)) | (1 << (MariaDBParser.COMMENT - 347)) | (1 << (MariaDBParser.COMMIT - 347)) | (1 << (MariaDBParser.COMPACT - 347)) | (1 << (MariaDBParser.COMPLETION - 347)) | (1 << (MariaDBParser.COMPRESSED - 347)) | (1 << (MariaDBParser.COMPRESSION - 347)) | (1 << (MariaDBParser.CONCURRENT - 347)) | (1 << (MariaDBParser.CONNECT - 347)) | (1 << (MariaDBParser.CONNECTION - 347)) | (1 << (MariaDBParser.CONSISTENT - 347)) | (1 << (MariaDBParser.CONSTRAINT_CATALOG - 347)))) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & ((1 << (MariaDBParser.CONSTRAINT_SCHEMA - 379)) | (1 << (MariaDBParser.CONSTRAINT_NAME - 379)) | (1 << (MariaDBParser.CONTAINS - 379)) | (1 << (MariaDBParser.CONTEXT - 379)) | (1 << (MariaDBParser.CONTRIBUTORS - 379)) | (1 << (MariaDBParser.COPY - 379)) | (1 << (MariaDBParser.CPU - 379)) | (1 << (MariaDBParser.CYCLE - 379)) | (1 << (MariaDBParser.CURSOR_NAME - 379)) | (1 << (MariaDBParser.DATA - 379)) | (1 << (MariaDBParser.DATAFILE - 379)) | (1 << (MariaDBParser.DEALLOCATE - 379)) | (1 << (MariaDBParser.DEFAULT_AUTH - 379)) | (1 << (MariaDBParser.DEFINER - 379)) | (1 << (MariaDBParser.DELAY_KEY_WRITE - 379)) | (1 << (MariaDBParser.DES_KEY_FILE - 379)) | (1 << (MariaDBParser.DIRECTORY - 379)) | (1 << (MariaDBParser.DISABLE - 379)) | (1 << (MariaDBParser.DISCARD - 379)) | (1 << (MariaDBParser.DISK - 379)) | (1 << (MariaDBParser.DO - 379)) | (1 << (MariaDBParser.DUMPFILE - 379)) | (1 << (MariaDBParser.DUPLICATE - 379)) | (1 << (MariaDBParser.DYNAMIC - 379)) | (1 << (MariaDBParser.ENABLE - 379)) | (1 << (MariaDBParser.ENCRYPTED - 379)) | (1 << (MariaDBParser.ENCRYPTION - 379)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ID - 379)) | (1 << (MariaDBParser.END - 379)) | (1 << (MariaDBParser.ENDS - 379)) | (1 << (MariaDBParser.ENGINE - 379)) | (1 << (MariaDBParser.ENGINES - 379)))) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & ((1 << (MariaDBParser.ERROR - 411)) | (1 << (MariaDBParser.ERRORS - 411)) | (1 << (MariaDBParser.ESCAPE - 411)) | (1 << (MariaDBParser.EVEN - 411)) | (1 << (MariaDBParser.EVENT - 411)) | (1 << (MariaDBParser.EVENTS - 411)) | (1 << (MariaDBParser.EVERY - 411)) | (1 << (MariaDBParser.EXCHANGE - 411)) | (1 << (MariaDBParser.EXCLUSIVE - 411)) | (1 << (MariaDBParser.EXPIRE - 411)) | (1 << (MariaDBParser.EXPORT - 411)) | (1 << (MariaDBParser.EXTENDED - 411)) | (1 << (MariaDBParser.EXTENT_SIZE - 411)) | (1 << (MariaDBParser.FAILED_LOGIN_ATTEMPTS - 411)) | (1 << (MariaDBParser.FAST - 411)) | (1 << (MariaDBParser.FAULTS - 411)) | (1 << (MariaDBParser.FIELDS - 411)) | (1 << (MariaDBParser.FILE_BLOCK_SIZE - 411)) | (1 << (MariaDBParser.FILTER - 411)) | (1 << (MariaDBParser.FIRST - 411)) | (1 << (MariaDBParser.FIXED - 411)) | (1 << (MariaDBParser.FLUSH - 411)) | (1 << (MariaDBParser.FOLLOWS - 411)) | (1 << (MariaDBParser.FOUND - 411)) | (1 << (MariaDBParser.FULL - 411)) | (1 << (MariaDBParser.FUNCTION - 411)) | (1 << (MariaDBParser.GENERAL - 411)) | (1 << (MariaDBParser.GLOBAL - 411)) | (1 << (MariaDBParser.GRANTS - 411)) | (1 << (MariaDBParser.GROUP_REPLICATION - 411)) | (1 << (MariaDBParser.HANDLER - 411)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (MariaDBParser.HASH - 443)) | (1 << (MariaDBParser.HELP - 443)) | (1 << (MariaDBParser.HISTORY - 443)) | (1 << (MariaDBParser.HOST - 443)) | (1 << (MariaDBParser.HOSTS - 443)) | (1 << (MariaDBParser.IDENTIFIED - 443)) | (1 << (MariaDBParser.IGNORE_SERVER_IDS - 443)) | (1 << (MariaDBParser.IMPORT - 443)) | (1 << (MariaDBParser.INCREMENT - 443)) | (1 << (MariaDBParser.INDEXES - 443)) | (1 << (MariaDBParser.INITIAL_SIZE - 443)) | (1 << (MariaDBParser.INPLACE - 443)) | (1 << (MariaDBParser.INSERT_METHOD - 443)) | (1 << (MariaDBParser.INSTALL - 443)) | (1 << (MariaDBParser.INSTANCE - 443)) | (1 << (MariaDBParser.INSTANT - 443)) | (1 << (MariaDBParser.INVISIBLE - 443)) | (1 << (MariaDBParser.INVOKER - 443)) | (1 << (MariaDBParser.IO - 443)) | (1 << (MariaDBParser.IO_THREAD - 443)) | (1 << (MariaDBParser.IPC - 443)) | (1 << (MariaDBParser.ISOLATION - 443)) | (1 << (MariaDBParser.ISSUER - 443)) | (1 << (MariaDBParser.JSON - 443)) | (1 << (MariaDBParser.KEY_BLOCK_SIZE - 443)) | (1 << (MariaDBParser.LANGUAGE - 443)) | (1 << (MariaDBParser.LAST - 443)) | (1 << (MariaDBParser.LEAVES - 443)) | (1 << (MariaDBParser.LESS - 443)) | (1 << (MariaDBParser.LEVEL - 443)) | (1 << (MariaDBParser.LIST - 443)) | (1 << (MariaDBParser.LOCAL - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (MariaDBParser.LOCALES - 475)) | (1 << (MariaDBParser.LOGFILE - 475)) | (1 << (MariaDBParser.LOGS - 475)) | (1 << (MariaDBParser.MASTER - 475)) | (1 << (MariaDBParser.MASTER_AUTO_POSITION - 475)) | (1 << (MariaDBParser.MASTER_CONNECT_RETRY - 475)) | (1 << (MariaDBParser.MASTER_DELAY - 475)) | (1 << (MariaDBParser.MASTER_HEARTBEAT_PERIOD - 475)) | (1 << (MariaDBParser.MASTER_HOST - 475)) | (1 << (MariaDBParser.MASTER_LOG_FILE - 475)) | (1 << (MariaDBParser.MASTER_LOG_POS - 475)) | (1 << (MariaDBParser.MASTER_PASSWORD - 475)) | (1 << (MariaDBParser.MASTER_PORT - 475)) | (1 << (MariaDBParser.MASTER_RETRY_COUNT - 475)) | (1 << (MariaDBParser.MASTER_SSL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CA - 475)) | (1 << (MariaDBParser.MASTER_SSL_CAPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_CERT - 475)) | (1 << (MariaDBParser.MASTER_SSL_CIPHER - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRLPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_KEY - 475)) | (1 << (MariaDBParser.MASTER_TLS_VERSION - 475)) | (1 << (MariaDBParser.MASTER_USER - 475)) | (1 << (MariaDBParser.MAX_CONNECTIONS_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_QUERIES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_ROWS - 475)) | (1 << (MariaDBParser.MAX_SIZE - 475)) | (1 << (MariaDBParser.MAX_UPDATES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_USER_CONNECTIONS - 475)) | (1 << (MariaDBParser.MEDIUM - 475)) | (1 << (MariaDBParser.MEMBER - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (MariaDBParser.MERGE - 507)) | (1 << (MariaDBParser.MESSAGE_TEXT - 507)) | (1 << (MariaDBParser.MID - 507)) | (1 << (MariaDBParser.MIGRATE - 507)) | (1 << (MariaDBParser.MIN_ROWS - 507)) | (1 << (MariaDBParser.MODE - 507)) | (1 << (MariaDBParser.MODIFY - 507)) | (1 << (MariaDBParser.MUTEX - 507)) | (1 << (MariaDBParser.MYSQL - 507)) | (1 << (MariaDBParser.MYSQL_ERRNO - 507)) | (1 << (MariaDBParser.NAME - 507)) | (1 << (MariaDBParser.NAMES - 507)) | (1 << (MariaDBParser.NCHAR - 507)) | (1 << (MariaDBParser.NEVER - 507)) | (1 << (MariaDBParser.NEXT - 507)) | (1 << (MariaDBParser.NO - 507)) | (1 << (MariaDBParser.NOCACHE - 507)) | (1 << (MariaDBParser.NOCOPY - 507)) | (1 << (MariaDBParser.NOCYCLE - 507)) | (1 << (MariaDBParser.NOMAXVALUE - 507)) | (1 << (MariaDBParser.NOMINVALUE - 507)) | (1 << (MariaDBParser.NOWAIT - 507)) | (1 << (MariaDBParser.NODEGROUP - 507)) | (1 << (MariaDBParser.NONE - 507)) | (1 << (MariaDBParser.ODBC - 507)) | (1 << (MariaDBParser.OFFLINE - 507)) | (1 << (MariaDBParser.OFFSET - 507)) | (1 << (MariaDBParser.OF - 507)) | (1 << (MariaDBParser.OJ - 507)) | (1 << (MariaDBParser.OLD_PASSWORD - 507)) | (1 << (MariaDBParser.ONE - 507)) | (1 << (MariaDBParser.ONLINE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (MariaDBParser.ONLY - 539)) | (1 << (MariaDBParser.OPEN - 539)) | (1 << (MariaDBParser.OPTIMIZER_COSTS - 539)) | (1 << (MariaDBParser.OPTIONS - 539)) | (1 << (MariaDBParser.OWNER - 539)) | (1 << (MariaDBParser.PACK_KEYS - 539)) | (1 << (MariaDBParser.PAGE - 539)) | (1 << (MariaDBParser.PARSER - 539)) | (1 << (MariaDBParser.PARTIAL - 539)) | (1 << (MariaDBParser.PARTITIONING - 539)) | (1 << (MariaDBParser.PARTITIONS - 539)) | (1 << (MariaDBParser.PASSWORD - 539)) | (1 << (MariaDBParser.PASSWORD_LOCK_TIME - 539)) | (1 << (MariaDBParser.PHASE - 539)) | (1 << (MariaDBParser.PLUGIN - 539)) | (1 << (MariaDBParser.PLUGIN_DIR - 539)) | (1 << (MariaDBParser.PLUGINS - 539)) | (1 << (MariaDBParser.PORT - 539)) | (1 << (MariaDBParser.PRECEDES - 539)) | (1 << (MariaDBParser.PREPARE - 539)) | (1 << (MariaDBParser.PRESERVE - 539)) | (1 << (MariaDBParser.PREV - 539)) | (1 << (MariaDBParser.PROCESSLIST - 539)) | (1 << (MariaDBParser.PROFILE - 539)) | (1 << (MariaDBParser.PROFILES - 539)) | (1 << (MariaDBParser.PROXY - 539)) | (1 << (MariaDBParser.QUERY - 539)) | (1 << (MariaDBParser.QUERY_RESPONSE_TIME - 539)) | (1 << (MariaDBParser.QUICK - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (MariaDBParser.REBUILD - 571)) | (1 << (MariaDBParser.RECOVER - 571)) | (1 << (MariaDBParser.RECURSIVE - 571)) | (1 << (MariaDBParser.REDO_BUFFER_SIZE - 571)) | (1 << (MariaDBParser.REDUNDANT - 571)) | (1 << (MariaDBParser.RELAY - 571)) | (1 << (MariaDBParser.RELAY_LOG_FILE - 571)) | (1 << (MariaDBParser.RELAY_LOG_POS - 571)) | (1 << (MariaDBParser.RELAYLOG - 571)) | (1 << (MariaDBParser.REMOVE - 571)) | (1 << (MariaDBParser.REORGANIZE - 571)) | (1 << (MariaDBParser.REPAIR - 571)) | (1 << (MariaDBParser.REPLICATE_DO_DB - 571)) | (1 << (MariaDBParser.REPLICATE_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_REWRITE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATION - 571)) | (1 << (MariaDBParser.RESET - 571)) | (1 << (MariaDBParser.RESTART - 571)) | (1 << (MariaDBParser.RESUME - 571)) | (1 << (MariaDBParser.RETURNED_SQLSTATE - 571)) | (1 << (MariaDBParser.RETURNS - 571)) | (1 << (MariaDBParser.REUSE - 571)) | (1 << (MariaDBParser.ROLE - 571)) | (1 << (MariaDBParser.ROLLBACK - 571)) | (1 << (MariaDBParser.ROLLUP - 571)) | (1 << (MariaDBParser.ROTATE - 571)) | (1 << (MariaDBParser.ROW - 571)))) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & ((1 << (MariaDBParser.ROWS - 603)) | (1 << (MariaDBParser.ROW_FORMAT - 603)) | (1 << (MariaDBParser.RTREE - 603)) | (1 << (MariaDBParser.SAVEPOINT - 603)) | (1 << (MariaDBParser.SCHEDULE - 603)) | (1 << (MariaDBParser.SECURITY - 603)) | (1 << (MariaDBParser.SEQUENCE - 603)) | (1 << (MariaDBParser.SERVER - 603)) | (1 << (MariaDBParser.SESSION - 603)) | (1 << (MariaDBParser.SHARE - 603)) | (1 << (MariaDBParser.SHARED - 603)) | (1 << (MariaDBParser.SIGNED - 603)) | (1 << (MariaDBParser.SIMPLE - 603)) | (1 << (MariaDBParser.SLAVE - 603)) | (1 << (MariaDBParser.SLAVES - 603)) | (1 << (MariaDBParser.SLOW - 603)) | (1 << (MariaDBParser.SNAPSHOT - 603)) | (1 << (MariaDBParser.SOCKET - 603)) | (1 << (MariaDBParser.SOME - 603)) | (1 << (MariaDBParser.SONAME - 603)) | (1 << (MariaDBParser.SOUNDS - 603)) | (1 << (MariaDBParser.SOURCE - 603)) | (1 << (MariaDBParser.SQL_AFTER_GTIDS - 603)) | (1 << (MariaDBParser.SQL_AFTER_MTS_GAPS - 603)) | (1 << (MariaDBParser.SQL_BEFORE_GTIDS - 603)) | (1 << (MariaDBParser.SQL_BUFFER_RESULT - 603)) | (1 << (MariaDBParser.SQL_CACHE - 603)) | (1 << (MariaDBParser.SQL_NO_CACHE - 603)) | (1 << (MariaDBParser.SQL_THREAD - 603)) | (1 << (MariaDBParser.START - 603)) | (1 << (MariaDBParser.STARTS - 603)) | (1 << (MariaDBParser.STATS_AUTO_RECALC - 603)))) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & ((1 << (MariaDBParser.STATS_PERSISTENT - 635)) | (1 << (MariaDBParser.STATS_SAMPLE_PAGES - 635)) | (1 << (MariaDBParser.STATUS - 635)) | (1 << (MariaDBParser.STOP - 635)) | (1 << (MariaDBParser.STORAGE - 635)) | (1 << (MariaDBParser.STRING - 635)) | (1 << (MariaDBParser.SUBCLASS_ORIGIN - 635)) | (1 << (MariaDBParser.SUBJECT - 635)) | (1 << (MariaDBParser.SUBPARTITION - 635)) | (1 << (MariaDBParser.SUBPARTITIONS - 635)) | (1 << (MariaDBParser.SUSPEND - 635)) | (1 << (MariaDBParser.SWAPS - 635)) | (1 << (MariaDBParser.SWITCHES - 635)) | (1 << (MariaDBParser.TABLE_NAME - 635)) | (1 << (MariaDBParser.TABLESPACE - 635)) | (1 << (MariaDBParser.TABLE_TYPE - 635)) | (1 << (MariaDBParser.TEMPORARY - 635)) | (1 << (MariaDBParser.TEMPTABLE - 635)) | (1 << (MariaDBParser.THAN - 635)) | (1 << (MariaDBParser.TRADITIONAL - 635)) | (1 << (MariaDBParser.TRANSACTION - 635)) | (1 << (MariaDBParser.TRANSACTIONAL - 635)) | (1 << (MariaDBParser.TRIGGERS - 635)) | (1 << (MariaDBParser.TRUNCATE - 635)) | (1 << (MariaDBParser.TYPES - 635)) | (1 << (MariaDBParser.UNBOUNDED - 635)) | (1 << (MariaDBParser.UNDEFINED - 635)) | (1 << (MariaDBParser.UNDOFILE - 635)) | (1 << (MariaDBParser.UNDO_BUFFER_SIZE - 635)) | (1 << (MariaDBParser.UNINSTALL - 635)) | (1 << (MariaDBParser.UNKNOWN - 635)))) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & ((1 << (MariaDBParser.UNTIL - 667)) | (1 << (MariaDBParser.UPGRADE - 667)) | (1 << (MariaDBParser.USER - 667)) | (1 << (MariaDBParser.USE_FRM - 667)) | (1 << (MariaDBParser.USER_RESOURCES - 667)) | (1 << (MariaDBParser.VALIDATION - 667)) | (1 << (MariaDBParser.VALUE - 667)) | (1 << (MariaDBParser.VARIABLES - 667)) | (1 << (MariaDBParser.VIEW - 667)) | (1 << (MariaDBParser.VIRTUAL - 667)) | (1 << (MariaDBParser.VISIBLE - 667)) | (1 << (MariaDBParser.WAIT - 667)) | (1 << (MariaDBParser.WARNINGS - 667)) | (1 << (MariaDBParser.WITHOUT - 667)) | (1 << (MariaDBParser.WORK - 667)) | (1 << (MariaDBParser.WRAPPER - 667)) | (1 << (MariaDBParser.WSREP_MEMBERSHIP - 667)) | (1 << (MariaDBParser.WSREP_STATUS - 667)) | (1 << (MariaDBParser.X509 - 667)) | (1 << (MariaDBParser.XA - 667)) | (1 << (MariaDBParser.XML - 667)) | (1 << (MariaDBParser.EUR - 667)) | (1 << (MariaDBParser.USA - 667)) | (1 << (MariaDBParser.JIS - 667)) | (1 << (MariaDBParser.ISO - 667)) | (1 << (MariaDBParser.INTERNAL - 667)) | (1 << (MariaDBParser.QUARTER - 667)) | (1 << (MariaDBParser.MONTH - 667)) | (1 << (MariaDBParser.DAY - 667)) | (1 << (MariaDBParser.HOUR - 667)))) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & ((1 << (MariaDBParser.MINUTE - 699)) | (1 << (MariaDBParser.WEEK - 699)) | (1 << (MariaDBParser.SECOND - 699)) | (1 << (MariaDBParser.MICROSECOND - 699)) | (1 << (MariaDBParser.USER_STATISTICS - 699)) | (1 << (MariaDBParser.CLIENT_STATISTICS - 699)) | (1 << (MariaDBParser.INDEX_STATISTICS - 699)) | (1 << (MariaDBParser.TABLE_STATISTICS - 699)) | (1 << (MariaDBParser.ADMIN - 699)) | (1 << (MariaDBParser.AUDIT_ADMIN - 699)) | (1 << (MariaDBParser.BACKUP_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ENCRYPTION_ADMIN - 699)) | (1 << (MariaDBParser.CLONE_ADMIN - 699)) | (1 << (MariaDBParser.CONNECTION_ADMIN - 699)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ADMIN - 699)) | (1 << (MariaDBParser.EXECUTE - 699)) | (1 << (MariaDBParser.FILE - 699)) | (1 << (MariaDBParser.FIREWALL_ADMIN - 699)) | (1 << (MariaDBParser.FIREWALL_USER - 699)) | (1 << (MariaDBParser.GROUP_REPLICATION_ADMIN - 699)) | (1 << (MariaDBParser.INNODB_REDO_LOG_ARCHIVE - 699)) | (1 << (MariaDBParser.INVOKE - 699)) | (1 << (MariaDBParser.LAMBDA - 699)) | (1 << (MariaDBParser.NDB_STORED_USER - 699)) | (1 << (MariaDBParser.PASSWORDLESS_USER_ADMIN - 699)))) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & ((1 << (MariaDBParser.PERSIST_RO_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.PRIVILEGES - 731)) | (1 << (MariaDBParser.PROCESS - 731)) | (1 << (MariaDBParser.RELOAD - 731)) | (1 << (MariaDBParser.REPLICATION_APPLIER - 731)) | (1 << (MariaDBParser.REPLICATION_SLAVE_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_USER - 731)) | (1 << (MariaDBParser.ROLE_ADMIN - 731)) | (1 << (MariaDBParser.ROUTINE - 731)) | (1 << (MariaDBParser.S3 - 731)) | (1 << (MariaDBParser.SESSION_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.SET_USER_ID - 731)) | (1 << (MariaDBParser.SHOW_ROUTINE - 731)) | (1 << (MariaDBParser.SHUTDOWN - 731)) | (1 << (MariaDBParser.SUPER - 731)) | (1 << (MariaDBParser.SYSTEM_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.TABLES - 731)) | (1 << (MariaDBParser.TABLE_ENCRYPTION_ADMIN - 731)) | (1 << (MariaDBParser.VERSION_TOKEN_ADMIN - 731)) | (1 << (MariaDBParser.XA_RECOVER_ADMIN - 731)) | (1 << (MariaDBParser.ARMSCII8 - 731)) | (1 << (MariaDBParser.ASCII - 731)) | (1 << (MariaDBParser.BIG5 - 731)) | (1 << (MariaDBParser.CP1250 - 731)) | (1 << (MariaDBParser.CP1251 - 731)) | (1 << (MariaDBParser.CP1256 - 731)) | (1 << (MariaDBParser.CP1257 - 731)) | (1 << (MariaDBParser.CP850 - 731)) | (1 << (MariaDBParser.CP852 - 731)) | (1 << (MariaDBParser.CP866 - 731)))) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & ((1 << (MariaDBParser.CP932 - 763)) | (1 << (MariaDBParser.DEC8 - 763)) | (1 << (MariaDBParser.EUCJPMS - 763)) | (1 << (MariaDBParser.EUCKR - 763)) | (1 << (MariaDBParser.GB18030 - 763)) | (1 << (MariaDBParser.GB2312 - 763)) | (1 << (MariaDBParser.GBK - 763)) | (1 << (MariaDBParser.GEOSTD8 - 763)) | (1 << (MariaDBParser.GREEK - 763)) | (1 << (MariaDBParser.HEBREW - 763)) | (1 << (MariaDBParser.HP8 - 763)) | (1 << (MariaDBParser.KEYBCS2 - 763)) | (1 << (MariaDBParser.KOI8R - 763)) | (1 << (MariaDBParser.KOI8U - 763)) | (1 << (MariaDBParser.LATIN1 - 763)) | (1 << (MariaDBParser.LATIN2 - 763)) | (1 << (MariaDBParser.LATIN5 - 763)) | (1 << (MariaDBParser.LATIN7 - 763)) | (1 << (MariaDBParser.MACCE - 763)) | (1 << (MariaDBParser.MACROMAN - 763)) | (1 << (MariaDBParser.SJIS - 763)) | (1 << (MariaDBParser.SWE7 - 763)) | (1 << (MariaDBParser.TIS620 - 763)) | (1 << (MariaDBParser.UCS2 - 763)) | (1 << (MariaDBParser.UJIS - 763)) | (1 << (MariaDBParser.UTF16 - 763)) | (1 << (MariaDBParser.UTF16LE - 763)) | (1 << (MariaDBParser.UTF32 - 763)) | (1 << (MariaDBParser.UTF8 - 763)) | (1 << (MariaDBParser.UTF8MB3 - 763)) | (1 << (MariaDBParser.UTF8MB4 - 763)) | (1 << (MariaDBParser.ARCHIVE - 763)))) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & ((1 << (MariaDBParser.BLACKHOLE - 795)) | (1 << (MariaDBParser.CSV - 795)) | (1 << (MariaDBParser.FEDERATED - 795)) | (1 << (MariaDBParser.INNODB - 795)) | (1 << (MariaDBParser.MEMORY - 795)) | (1 << (MariaDBParser.MRG_MYISAM - 795)) | (1 << (MariaDBParser.MYISAM - 795)) | (1 << (MariaDBParser.NDB - 795)) | (1 << (MariaDBParser.NDBCLUSTER - 795)) | (1 << (MariaDBParser.PERFORMANCE_SCHEMA - 795)) | (1 << (MariaDBParser.TOKUDB - 795)) | (1 << (MariaDBParser.REPEATABLE - 795)) | (1 << (MariaDBParser.COMMITTED - 795)) | (1 << (MariaDBParser.UNCOMMITTED - 795)) | (1 << (MariaDBParser.SERIALIZABLE - 795)) | (1 << (MariaDBParser.GEOMETRYCOLLECTION - 795)) | (1 << (MariaDBParser.LINESTRING - 795)) | (1 << (MariaDBParser.MULTILINESTRING - 795)) | (1 << (MariaDBParser.MULTIPOINT - 795)) | (1 << (MariaDBParser.MULTIPOLYGON - 795)) | (1 << (MariaDBParser.POINT - 795)) | (1 << (MariaDBParser.POLYGON - 795)) | (1 << (MariaDBParser.ABS - 795)) | (1 << (MariaDBParser.ACOS - 795)) | (1 << (MariaDBParser.ADDDATE - 795)) | (1 << (MariaDBParser.ADDTIME - 795)) | (1 << (MariaDBParser.AES_DECRYPT - 795)) | (1 << (MariaDBParser.AES_ENCRYPT - 795)) | (1 << (MariaDBParser.AREA - 795)) | (1 << (MariaDBParser.ASBINARY - 795)))) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & ((1 << (MariaDBParser.ASIN - 827)) | (1 << (MariaDBParser.ASTEXT - 827)) | (1 << (MariaDBParser.ASWKB - 827)) | (1 << (MariaDBParser.ASWKT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DECRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DERIVE - 827)) | (1 << (MariaDBParser.ASYMMETRIC_ENCRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_SIGN - 827)) | (1 << (MariaDBParser.ASYMMETRIC_VERIFY - 827)) | (1 << (MariaDBParser.ATAN - 827)) | (1 << (MariaDBParser.ATAN2 - 827)) | (1 << (MariaDBParser.BENCHMARK - 827)) | (1 << (MariaDBParser.BIN - 827)) | (1 << (MariaDBParser.BIT_COUNT - 827)) | (1 << (MariaDBParser.BIT_LENGTH - 827)) | (1 << (MariaDBParser.BUFFER - 827)) | (1 << (MariaDBParser.CATALOG_NAME - 827)) | (1 << (MariaDBParser.CEIL - 827)) | (1 << (MariaDBParser.CEILING - 827)) | (1 << (MariaDBParser.CENTROID - 827)) | (1 << (MariaDBParser.CHARACTER_LENGTH - 827)) | (1 << (MariaDBParser.CHARSET - 827)) | (1 << (MariaDBParser.CHAR_LENGTH - 827)) | (1 << (MariaDBParser.COERCIBILITY - 827)) | (1 << (MariaDBParser.COLLATION - 827)) | (1 << (MariaDBParser.COMPRESS - 827)) | (1 << (MariaDBParser.CONCAT - 827)) | (1 << (MariaDBParser.CONCAT_WS - 827)) | (1 << (MariaDBParser.CONNECTION_ID - 827)) | (1 << (MariaDBParser.CONV - 827)) | (1 << (MariaDBParser.CONVERT_TZ - 827)) | (1 << (MariaDBParser.COS - 827)))) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & ((1 << (MariaDBParser.COT - 859)) | (1 << (MariaDBParser.CRC32 - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY - 859)) | (1 << (MariaDBParser.CREATE_DH_PARAMETERS - 859)) | (1 << (MariaDBParser.CREATE_DIGEST - 859)) | (1 << (MariaDBParser.CROSSES - 859)) | (1 << (MariaDBParser.DATEDIFF - 859)) | (1 << (MariaDBParser.DATE_FORMAT - 859)) | (1 << (MariaDBParser.DAYNAME - 859)) | (1 << (MariaDBParser.DAYOFMONTH - 859)) | (1 << (MariaDBParser.DAYOFWEEK - 859)) | (1 << (MariaDBParser.DAYOFYEAR - 859)) | (1 << (MariaDBParser.DECODE - 859)) | (1 << (MariaDBParser.DEGREES - 859)) | (1 << (MariaDBParser.DES_DECRYPT - 859)) | (1 << (MariaDBParser.DES_ENCRYPT - 859)) | (1 << (MariaDBParser.DIMENSION - 859)) | (1 << (MariaDBParser.DISJOINT - 859)) | (1 << (MariaDBParser.ELT - 859)) | (1 << (MariaDBParser.ENCODE - 859)) | (1 << (MariaDBParser.ENCRYPT - 859)) | (1 << (MariaDBParser.ENDPOINT - 859)) | (1 << (MariaDBParser.ENGINE_ATTRIBUTE - 859)) | (1 << (MariaDBParser.ENVELOPE - 859)) | (1 << (MariaDBParser.EQUALS - 859)) | (1 << (MariaDBParser.EXP - 859)) | (1 << (MariaDBParser.EXPORT_SET - 859)) | (1 << (MariaDBParser.EXTERIORRING - 859)) | (1 << (MariaDBParser.EXTRACTVALUE - 859)) | (1 << (MariaDBParser.FIELD - 859)) | (1 << (MariaDBParser.FIND_IN_SET - 859)))) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & ((1 << (MariaDBParser.FLOOR - 891)) | (1 << (MariaDBParser.FORMAT - 891)) | (1 << (MariaDBParser.FOUND_ROWS - 891)) | (1 << (MariaDBParser.FROM_BASE64 - 891)) | (1 << (MariaDBParser.FROM_DAYS - 891)) | (1 << (MariaDBParser.FROM_UNIXTIME - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYN - 891)) | (1 << (MariaDBParser.GEOMETRYTYPE - 891)) | (1 << (MariaDBParser.GEOMFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMFROMWKB - 891)) | (1 << (MariaDBParser.GET_FORMAT - 891)) | (1 << (MariaDBParser.GET_LOCK - 891)) | (1 << (MariaDBParser.GLENGTH - 891)) | (1 << (MariaDBParser.GREATEST - 891)) | (1 << (MariaDBParser.GTID_SUBSET - 891)) | (1 << (MariaDBParser.GTID_SUBTRACT - 891)) | (1 << (MariaDBParser.HEX - 891)) | (1 << (MariaDBParser.IFNULL - 891)) | (1 << (MariaDBParser.INET6_ATON - 891)) | (1 << (MariaDBParser.INET6_NTOA - 891)) | (1 << (MariaDBParser.INET_ATON - 891)) | (1 << (MariaDBParser.INET_NTOA - 891)) | (1 << (MariaDBParser.INSTR - 891)) | (1 << (MariaDBParser.INTERIORRINGN - 891)) | (1 << (MariaDBParser.INTERSECTS - 891)) | (1 << (MariaDBParser.ISCLOSED - 891)))) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & ((1 << (MariaDBParser.ISEMPTY - 923)) | (1 << (MariaDBParser.ISNULL - 923)) | (1 << (MariaDBParser.ISSIMPLE - 923)) | (1 << (MariaDBParser.IS_FREE_LOCK - 923)) | (1 << (MariaDBParser.IS_IPV4 - 923)) | (1 << (MariaDBParser.IS_IPV4_COMPAT - 923)) | (1 << (MariaDBParser.IS_IPV4_MAPPED - 923)) | (1 << (MariaDBParser.IS_IPV6 - 923)) | (1 << (MariaDBParser.IS_USED_LOCK - 923)) | (1 << (MariaDBParser.LAST_INSERT_ID - 923)) | (1 << (MariaDBParser.LCASE - 923)) | (1 << (MariaDBParser.LEAST - 923)) | (1 << (MariaDBParser.LENGTH - 923)) | (1 << (MariaDBParser.LINEFROMTEXT - 923)) | (1 << (MariaDBParser.LINEFROMWKB - 923)) | (1 << (MariaDBParser.LINESTRINGFROMTEXT - 923)) | (1 << (MariaDBParser.LINESTRINGFROMWKB - 923)) | (1 << (MariaDBParser.LN - 923)) | (1 << (MariaDBParser.LOAD_FILE - 923)) | (1 << (MariaDBParser.LOCATE - 923)) | (1 << (MariaDBParser.LOG - 923)) | (1 << (MariaDBParser.LOG10 - 923)) | (1 << (MariaDBParser.LOG2 - 923)) | (1 << (MariaDBParser.LOWER - 923)) | (1 << (MariaDBParser.LPAD - 923)) | (1 << (MariaDBParser.LTRIM - 923)) | (1 << (MariaDBParser.MAKEDATE - 923)) | (1 << (MariaDBParser.MAKETIME - 923)) | (1 << (MariaDBParser.MAKE_SET - 923)) | (1 << (MariaDBParser.MASTER_POS_WAIT - 923)) | (1 << (MariaDBParser.MBRCONTAINS - 923)) | (1 << (MariaDBParser.MBRDISJOINT - 923)))) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & ((1 << (MariaDBParser.MBREQUAL - 955)) | (1 << (MariaDBParser.MBRINTERSECTS - 955)) | (1 << (MariaDBParser.MBROVERLAPS - 955)) | (1 << (MariaDBParser.MBRTOUCHES - 955)) | (1 << (MariaDBParser.MBRWITHIN - 955)) | (1 << (MariaDBParser.MD5 - 955)) | (1 << (MariaDBParser.MLINEFROMTEXT - 955)) | (1 << (MariaDBParser.MLINEFROMWKB - 955)) | (1 << (MariaDBParser.MONTHNAME - 955)) | (1 << (MariaDBParser.MPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MPOLYFROMTEXT - 955)) | (1 << (MariaDBParser.MPOLYFROMWKB - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMTEXT - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMWKB - 955)) | (1 << (MariaDBParser.NAME_CONST - 955)) | (1 << (MariaDBParser.NULLIF - 955)) | (1 << (MariaDBParser.NUMGEOMETRIES - 955)) | (1 << (MariaDBParser.NUMINTERIORRINGS - 955)) | (1 << (MariaDBParser.NUMPOINTS - 955)) | (1 << (MariaDBParser.OCT - 955)) | (1 << (MariaDBParser.OCTET_LENGTH - 955)) | (1 << (MariaDBParser.ORD - 955)) | (1 << (MariaDBParser.OVERLAPS - 955)) | (1 << (MariaDBParser.PERIOD_ADD - 955)) | (1 << (MariaDBParser.PERIOD_DIFF - 955)) | (1 << (MariaDBParser.PI - 955)) | (1 << (MariaDBParser.POINTFROMTEXT - 955)))) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & ((1 << (MariaDBParser.POINTFROMWKB - 987)) | (1 << (MariaDBParser.POINTN - 987)) | (1 << (MariaDBParser.POLYFROMTEXT - 987)) | (1 << (MariaDBParser.POLYFROMWKB - 987)) | (1 << (MariaDBParser.POLYGONFROMTEXT - 987)) | (1 << (MariaDBParser.POLYGONFROMWKB - 987)) | (1 << (MariaDBParser.POW - 987)) | (1 << (MariaDBParser.POWER - 987)) | (1 << (MariaDBParser.QUOTE - 987)) | (1 << (MariaDBParser.RADIANS - 987)) | (1 << (MariaDBParser.RAND - 987)) | (1 << (MariaDBParser.RANDOM_BYTES - 987)) | (1 << (MariaDBParser.RELEASE_LOCK - 987)) | (1 << (MariaDBParser.REVERSE - 987)) | (1 << (MariaDBParser.ROUND - 987)) | (1 << (MariaDBParser.ROW_COUNT - 987)) | (1 << (MariaDBParser.RPAD - 987)) | (1 << (MariaDBParser.RTRIM - 987)) | (1 << (MariaDBParser.SEC_TO_TIME - 987)) | (1 << (MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE - 987)) | (1 << (MariaDBParser.SESSION_USER - 987)) | (1 << (MariaDBParser.SHA - 987)) | (1 << (MariaDBParser.SHA1 - 987)) | (1 << (MariaDBParser.SHA2 - 987)) | (1 << (MariaDBParser.SCHEMA_NAME - 987)) | (1 << (MariaDBParser.SIGN - 987)) | (1 << (MariaDBParser.SIN - 987)) | (1 << (MariaDBParser.SLEEP - 987)) | (1 << (MariaDBParser.SOUNDEX - 987)) | (1 << (MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS - 987)) | (1 << (MariaDBParser.SQRT - 987)) | (1 << (MariaDBParser.SRID - 987)))) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & ((1 << (MariaDBParser.STARTPOINT - 1019)) | (1 << (MariaDBParser.STRCMP - 1019)) | (1 << (MariaDBParser.STR_TO_DATE - 1019)) | (1 << (MariaDBParser.ST_AREA - 1019)) | (1 << (MariaDBParser.ST_ASBINARY - 1019)) | (1 << (MariaDBParser.ST_ASTEXT - 1019)) | (1 << (MariaDBParser.ST_ASWKB - 1019)) | (1 << (MariaDBParser.ST_ASWKT - 1019)) | (1 << (MariaDBParser.ST_BUFFER - 1019)) | (1 << (MariaDBParser.ST_CENTROID - 1019)) | (1 << (MariaDBParser.ST_CONTAINS - 1019)) | (1 << (MariaDBParser.ST_CROSSES - 1019)) | (1 << (MariaDBParser.ST_DIFFERENCE - 1019)) | (1 << (MariaDBParser.ST_DIMENSION - 1019)) | (1 << (MariaDBParser.ST_DISJOINT - 1019)) | (1 << (MariaDBParser.ST_DISTANCE - 1019)) | (1 << (MariaDBParser.ST_ENDPOINT - 1019)) | (1 << (MariaDBParser.ST_ENVELOPE - 1019)) | (1 << (MariaDBParser.ST_EQUALS - 1019)) | (1 << (MariaDBParser.ST_EXTERIORRING - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYN - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYTYPE - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMWKB - 1019)) | (1 << (MariaDBParser.ST_INTERIORRINGN - 1019)))) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & ((1 << (MariaDBParser.ST_INTERSECTION - 1051)) | (1 << (MariaDBParser.ST_INTERSECTS - 1051)) | (1 << (MariaDBParser.ST_ISCLOSED - 1051)) | (1 << (MariaDBParser.ST_ISEMPTY - 1051)) | (1 << (MariaDBParser.ST_ISSIMPLE - 1051)) | (1 << (MariaDBParser.ST_LINEFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINEFROMWKB - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMWKB - 1051)) | (1 << (MariaDBParser.ST_NUMGEOMETRIES - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRING - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRINGS - 1051)) | (1 << (MariaDBParser.ST_NUMPOINTS - 1051)) | (1 << (MariaDBParser.ST_OVERLAPS - 1051)) | (1 << (MariaDBParser.ST_POINTFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POINTFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POINTN - 1051)) | (1 << (MariaDBParser.ST_POLYFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMWKB - 1051)) | (1 << (MariaDBParser.ST_SRID - 1051)) | (1 << (MariaDBParser.ST_STARTPOINT - 1051)) | (1 << (MariaDBParser.ST_SYMDIFFERENCE - 1051)) | (1 << (MariaDBParser.ST_TOUCHES - 1051)) | (1 << (MariaDBParser.ST_UNION - 1051)) | (1 << (MariaDBParser.ST_WITHIN - 1051)) | (1 << (MariaDBParser.ST_X - 1051)) | (1 << (MariaDBParser.ST_Y - 1051)) | (1 << (MariaDBParser.SUBDATE - 1051)) | (1 << (MariaDBParser.SUBSTRING_INDEX - 1051)) | (1 << (MariaDBParser.SUBTIME - 1051)))) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & ((1 << (MariaDBParser.SYSTEM_USER - 1083)) | (1 << (MariaDBParser.TAN - 1083)) | (1 << (MariaDBParser.TIMEDIFF - 1083)) | (1 << (MariaDBParser.TIMESTAMPADD - 1083)) | (1 << (MariaDBParser.TIMESTAMPDIFF - 1083)) | (1 << (MariaDBParser.TIME_FORMAT - 1083)) | (1 << (MariaDBParser.TIME_TO_SEC - 1083)) | (1 << (MariaDBParser.TOUCHES - 1083)) | (1 << (MariaDBParser.TO_BASE64 - 1083)) | (1 << (MariaDBParser.TO_DAYS - 1083)) | (1 << (MariaDBParser.TO_SECONDS - 1083)) | (1 << (MariaDBParser.UCASE - 1083)) | (1 << (MariaDBParser.UNCOMPRESS - 1083)) | (1 << (MariaDBParser.UNCOMPRESSED_LENGTH - 1083)) | (1 << (MariaDBParser.UNHEX - 1083)) | (1 << (MariaDBParser.UNIX_TIMESTAMP - 1083)) | (1 << (MariaDBParser.UPDATEXML - 1083)) | (1 << (MariaDBParser.UPPER - 1083)) | (1 << (MariaDBParser.UUID - 1083)) | (1 << (MariaDBParser.UUID_SHORT - 1083)) | (1 << (MariaDBParser.VALIDATE_PASSWORD_STRENGTH - 1083)) | (1 << (MariaDBParser.VERSION - 1083)) | (1 << (MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1083)) | (1 << (MariaDBParser.WEEKDAY - 1083)) | (1 << (MariaDBParser.WEEKOFYEAR - 1083)) | (1 << (MariaDBParser.WEIGHT_STRING - 1083)) | (1 << (MariaDBParser.WITHIN - 1083)) | (1 << (MariaDBParser.YEARWEEK - 1083)) | (1 << (MariaDBParser.Y_FUNCTION - 1083)) | (1 << (MariaDBParser.X_FUNCTION - 1083)) | (1 << (MariaDBParser.VIA - 1083)) | (1 << (MariaDBParser.LASTVAL - 1083)))) !== 0) || ((((_la - 1115)) & ~0x1F) === 0 && ((1 << (_la - 1115)) & ((1 << (MariaDBParser.NEXTVAL - 1115)) | (1 << (MariaDBParser.SETVAL - 1115)) | (1 << (MariaDBParser.PREVIOUS - 1115)) | (1 << (MariaDBParser.PERSISTENT - 1115)) | (1 << (MariaDBParser.BINLOG_MONITOR - 1115)) | (1 << (MariaDBParser.BINLOG_REPLAY - 1115)) | (1 << (MariaDBParser.FEDERATED_ADMIN - 1115)) | (1 << (MariaDBParser.READ_ONLY_ADMIN - 1115)) | (1 << (MariaDBParser.REPLICA - 1115)) | (1 << (MariaDBParser.REPLICAS - 1115)) | (1 << (MariaDBParser.REPLICATION_MASTER_ADMIN - 1115)) | (1 << (MariaDBParser.MONITOR - 1115)) | (1 << (MariaDBParser.READ_ONLY - 1115)) | (1 << (MariaDBParser.REPLAY - 1115)) | (1 << (MariaDBParser.MOD - 1115)))) !== 0) || ((((_la - 1166)) & ~0x1F) === 0 && ((1 << (_la - 1166)) & ((1 << (MariaDBParser.CHARSET_REVERSE_QOUTE_STRING - 1166)) | (1 << (MariaDBParser.STRING_LITERAL - 1166)) | (1 << (MariaDBParser.ID - 1166)))) !== 0)) {
					{
					this.state = 4630;
					this.uid();
					this.state = 4635;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === MariaDBParser.COMMA) {
						{
						{
						this.state = 4631;
						this.match(MariaDBParser.COMMA);
						this.state = 4632;
						this.uid();
						}
						}
						this.state = 4637;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 4640;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stringMasterOption(): StringMasterOptionContext {
		let _localctx: StringMasterOptionContext = new StringMasterOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 358, MariaDBParser.RULE_stringMasterOption);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4643;
			_la = this._input.LA(1);
			if (!(_la === MariaDBParser.MASTER_BIND || ((((_la - 483)) & ~0x1F) === 0 && ((1 << (_la - 483)) & ((1 << (MariaDBParser.MASTER_HOST - 483)) | (1 << (MariaDBParser.MASTER_LOG_FILE - 483)) | (1 << (MariaDBParser.MASTER_PASSWORD - 483)) | (1 << (MariaDBParser.MASTER_SSL_CA - 483)) | (1 << (MariaDBParser.MASTER_SSL_CAPATH - 483)) | (1 << (MariaDBParser.MASTER_SSL_CERT - 483)) | (1 << (MariaDBParser.MASTER_SSL_CIPHER - 483)) | (1 << (MariaDBParser.MASTER_SSL_CRL - 483)) | (1 << (MariaDBParser.MASTER_SSL_CRLPATH - 483)) | (1 << (MariaDBParser.MASTER_SSL_KEY - 483)) | (1 << (MariaDBParser.MASTER_TLS_VERSION - 483)) | (1 << (MariaDBParser.MASTER_USER - 483)))) !== 0) || _la === MariaDBParser.RELAY_LOG_FILE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public decimalMasterOption(): DecimalMasterOptionContext {
		let _localctx: DecimalMasterOptionContext = new DecimalMasterOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 360, MariaDBParser.RULE_decimalMasterOption);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4645;
			_la = this._input.LA(1);
			if (!(((((_la - 480)) & ~0x1F) === 0 && ((1 << (_la - 480)) & ((1 << (MariaDBParser.MASTER_CONNECT_RETRY - 480)) | (1 << (MariaDBParser.MASTER_DELAY - 480)) | (1 << (MariaDBParser.MASTER_LOG_POS - 480)) | (1 << (MariaDBParser.MASTER_PORT - 480)) | (1 << (MariaDBParser.MASTER_RETRY_COUNT - 480)))) !== 0) || _la === MariaDBParser.RELAY_LOG_POS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public boolMasterOption(): BoolMasterOptionContext {
		let _localctx: BoolMasterOptionContext = new BoolMasterOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 362, MariaDBParser.RULE_boolMasterOption);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4647;
			_la = this._input.LA(1);
			if (!(_la === MariaDBParser.MASTER_SSL_VERIFY_SERVER_CERT || _la === MariaDBParser.MASTER_AUTO_POSITION || _la === MariaDBParser.MASTER_SSL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public channelOption(): ChannelOptionContext {
		let _localctx: ChannelOptionContext = new ChannelOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 364, MariaDBParser.RULE_channelOption);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4649;
			this.match(MariaDBParser.FOR);
			this.state = 4650;
			this.match(MariaDBParser.CHANNEL);
			this.state = 4651;
			this.match(MariaDBParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public replicationFilter(): ReplicationFilterContext {
		let _localctx: ReplicationFilterContext = new ReplicationFilterContext(this._ctx, this.state);
		this.enterRule(_localctx, 366, MariaDBParser.RULE_replicationFilter);
		let _la: number;
		try {
			this.state = 4702;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.REPLICATE_DO_DB:
				_localctx = new DoDbReplicationContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4653;
				this.match(MariaDBParser.REPLICATE_DO_DB);
				this.state = 4654;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				this.state = 4655;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 4656;
				this.uidList();
				this.state = 4657;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;
			case MariaDBParser.REPLICATE_IGNORE_DB:
				_localctx = new IgnoreDbReplicationContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4659;
				this.match(MariaDBParser.REPLICATE_IGNORE_DB);
				this.state = 4660;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				this.state = 4661;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 4662;
				this.uidList();
				this.state = 4663;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;
			case MariaDBParser.REPLICATE_DO_TABLE:
				_localctx = new DoTableReplicationContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4665;
				this.match(MariaDBParser.REPLICATE_DO_TABLE);
				this.state = 4666;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				this.state = 4667;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 4668;
				this.tables();
				this.state = 4669;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;
			case MariaDBParser.REPLICATE_IGNORE_TABLE:
				_localctx = new IgnoreTableReplicationContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4671;
				this.match(MariaDBParser.REPLICATE_IGNORE_TABLE);
				this.state = 4672;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				this.state = 4673;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 4674;
				this.tables();
				this.state = 4675;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;
			case MariaDBParser.REPLICATE_WILD_DO_TABLE:
				_localctx = new WildDoTableReplicationContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4677;
				this.match(MariaDBParser.REPLICATE_WILD_DO_TABLE);
				this.state = 4678;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				this.state = 4679;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 4680;
				this.simpleStrings();
				this.state = 4681;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;
			case MariaDBParser.REPLICATE_WILD_IGNORE_TABLE:
				_localctx = new WildIgnoreTableReplicationContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4683;
				this.match(MariaDBParser.REPLICATE_WILD_IGNORE_TABLE);
				this.state = 4684;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				this.state = 4685;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 4686;
				this.simpleStrings();
				this.state = 4687;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;
			case MariaDBParser.REPLICATE_REWRITE_DB:
				_localctx = new RewriteDbReplicationContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4689;
				this.match(MariaDBParser.REPLICATE_REWRITE_DB);
				this.state = 4690;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				this.state = 4691;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 4692;
				this.tablePair();
				this.state = 4697;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 4693;
					this.match(MariaDBParser.COMMA);
					this.state = 4694;
					this.tablePair();
					}
					}
					this.state = 4699;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4700;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tablePair(): TablePairContext {
		let _localctx: TablePairContext = new TablePairContext(this._ctx, this.state);
		this.enterRule(_localctx, 368, MariaDBParser.RULE_tablePair);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4704;
			this.match(MariaDBParser.LR_BRACKET);
			this.state = 4705;
			_localctx._firstTable = this.tableName();
			this.state = 4706;
			this.match(MariaDBParser.COMMA);
			this.state = 4707;
			_localctx._secondTable = this.tableName();
			this.state = 4708;
			this.match(MariaDBParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public threadType(): ThreadTypeContext {
		let _localctx: ThreadTypeContext = new ThreadTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 370, MariaDBParser.RULE_threadType);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4710;
			_la = this._input.LA(1);
			if (!(_la === MariaDBParser.IO_THREAD || _la === MariaDBParser.SQL_THREAD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public untilOption(): UntilOptionContext {
		let _localctx: UntilOptionContext = new UntilOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 372, MariaDBParser.RULE_untilOption);
		let _la: number;
		try {
			this.state = 4730;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.SQL_AFTER_GTIDS:
			case MariaDBParser.SQL_BEFORE_GTIDS:
				_localctx = new GtidsUntilOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4712;
				(_localctx as GtidsUntilOptionContext)._gtids = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.SQL_AFTER_GTIDS || _la === MariaDBParser.SQL_BEFORE_GTIDS)) {
					(_localctx as GtidsUntilOptionContext)._gtids = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4713;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				this.state = 4714;
				this.gtuidSet();
				}
				break;
			case MariaDBParser.MASTER_LOG_FILE:
				_localctx = new MasterLogUntilOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4715;
				this.match(MariaDBParser.MASTER_LOG_FILE);
				this.state = 4716;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				this.state = 4717;
				this.match(MariaDBParser.STRING_LITERAL);
				this.state = 4718;
				this.match(MariaDBParser.COMMA);
				this.state = 4719;
				this.match(MariaDBParser.MASTER_LOG_POS);
				this.state = 4720;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				this.state = 4721;
				this.decimalLiteral();
				}
				break;
			case MariaDBParser.RELAY_LOG_FILE:
				_localctx = new RelayLogUntilOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4722;
				this.match(MariaDBParser.RELAY_LOG_FILE);
				this.state = 4723;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				this.state = 4724;
				this.match(MariaDBParser.STRING_LITERAL);
				this.state = 4725;
				this.match(MariaDBParser.COMMA);
				this.state = 4726;
				this.match(MariaDBParser.RELAY_LOG_POS);
				this.state = 4727;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				this.state = 4728;
				this.decimalLiteral();
				}
				break;
			case MariaDBParser.SQL_AFTER_MTS_GAPS:
				_localctx = new SqlGapsUntilOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4729;
				this.match(MariaDBParser.SQL_AFTER_MTS_GAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public connectionOption(): ConnectionOptionContext {
		let _localctx: ConnectionOptionContext = new ConnectionOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 374, MariaDBParser.RULE_connectionOption);
		try {
			this.state = 4744;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.USER:
				_localctx = new UserConnectionOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4732;
				this.match(MariaDBParser.USER);
				this.state = 4733;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				this.state = 4734;
				(_localctx as UserConnectionOptionContext)._conOptUser = this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			case MariaDBParser.PASSWORD:
				_localctx = new PasswordConnectionOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4735;
				this.match(MariaDBParser.PASSWORD);
				this.state = 4736;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				this.state = 4737;
				(_localctx as PasswordConnectionOptionContext)._conOptPassword = this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			case MariaDBParser.DEFAULT_AUTH:
				_localctx = new DefaultAuthConnectionOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4738;
				this.match(MariaDBParser.DEFAULT_AUTH);
				this.state = 4739;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				this.state = 4740;
				(_localctx as DefaultAuthConnectionOptionContext)._conOptDefAuth = this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			case MariaDBParser.PLUGIN_DIR:
				_localctx = new PluginDirConnectionOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4741;
				this.match(MariaDBParser.PLUGIN_DIR);
				this.state = 4742;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				this.state = 4743;
				(_localctx as PluginDirConnectionOptionContext)._conOptPluginDir = this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public gtuidSet(): GtuidSetContext {
		let _localctx: GtuidSetContext = new GtuidSetContext(this._ctx, this.state);
		this.enterRule(_localctx, 376, MariaDBParser.RULE_gtuidSet);
		let _la: number;
		try {
			this.state = 4755;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.ZERO_DECIMAL:
			case MariaDBParser.ONE_DECIMAL:
			case MariaDBParser.TWO_DECIMAL:
			case MariaDBParser.DECIMAL_LITERAL:
			case MariaDBParser.REAL_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4746;
				this.uuidSet();
				this.state = 4751;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 4747;
					this.match(MariaDBParser.COMMA);
					this.state = 4748;
					this.uuidSet();
					}
					}
					this.state = 4753;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case MariaDBParser.STRING_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4754;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xaStartTransaction(): XaStartTransactionContext {
		let _localctx: XaStartTransactionContext = new XaStartTransactionContext(this._ctx, this.state);
		this.enterRule(_localctx, 378, MariaDBParser.RULE_xaStartTransaction);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4757;
			this.match(MariaDBParser.XA);
			this.state = 4758;
			_localctx._xaStart = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MariaDBParser.BEGIN || _la === MariaDBParser.START)) {
				_localctx._xaStart = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4759;
			this.xid();
			this.state = 4761;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.JOIN || _la === MariaDBParser.RESUME) {
				{
				this.state = 4760;
				_localctx._xaAction = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.JOIN || _la === MariaDBParser.RESUME)) {
					_localctx._xaAction = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xaEndTransaction(): XaEndTransactionContext {
		let _localctx: XaEndTransactionContext = new XaEndTransactionContext(this._ctx, this.state);
		this.enterRule(_localctx, 380, MariaDBParser.RULE_xaEndTransaction);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4763;
			this.match(MariaDBParser.XA);
			this.state = 4764;
			this.match(MariaDBParser.END);
			this.state = 4765;
			this.xid();
			this.state = 4771;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.SUSPEND) {
				{
				this.state = 4766;
				this.match(MariaDBParser.SUSPEND);
				this.state = 4769;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.FOR) {
					{
					this.state = 4767;
					this.match(MariaDBParser.FOR);
					this.state = 4768;
					this.match(MariaDBParser.MIGRATE);
					}
				}

				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xaPrepareStatement(): XaPrepareStatementContext {
		let _localctx: XaPrepareStatementContext = new XaPrepareStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 382, MariaDBParser.RULE_xaPrepareStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4773;
			this.match(MariaDBParser.XA);
			this.state = 4774;
			this.match(MariaDBParser.PREPARE);
			this.state = 4775;
			this.xid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xaCommitWork(): XaCommitWorkContext {
		let _localctx: XaCommitWorkContext = new XaCommitWorkContext(this._ctx, this.state);
		this.enterRule(_localctx, 384, MariaDBParser.RULE_xaCommitWork);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4777;
			this.match(MariaDBParser.XA);
			this.state = 4778;
			this.match(MariaDBParser.COMMIT);
			this.state = 4779;
			this.xid();
			this.state = 4782;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.ONE) {
				{
				this.state = 4780;
				this.match(MariaDBParser.ONE);
				this.state = 4781;
				this.match(MariaDBParser.PHASE);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xaRollbackWork(): XaRollbackWorkContext {
		let _localctx: XaRollbackWorkContext = new XaRollbackWorkContext(this._ctx, this.state);
		this.enterRule(_localctx, 386, MariaDBParser.RULE_xaRollbackWork);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4784;
			this.match(MariaDBParser.XA);
			this.state = 4785;
			this.match(MariaDBParser.ROLLBACK);
			this.state = 4786;
			this.xid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xaRecoverWork(): XaRecoverWorkContext {
		let _localctx: XaRecoverWorkContext = new XaRecoverWorkContext(this._ctx, this.state);
		this.enterRule(_localctx, 388, MariaDBParser.RULE_xaRecoverWork);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4788;
			this.match(MariaDBParser.XA);
			this.state = 4789;
			this.match(MariaDBParser.RECOVER);
			this.state = 4792;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.CONVERT) {
				{
				this.state = 4790;
				this.match(MariaDBParser.CONVERT);
				this.state = 4791;
				this.xid();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public prepareStatement(): PrepareStatementContext {
		let _localctx: PrepareStatementContext = new PrepareStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 390, MariaDBParser.RULE_prepareStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4794;
			this.match(MariaDBParser.PREPARE);
			this.state = 4795;
			this.uid();
			this.state = 4796;
			this.match(MariaDBParser.FROM);
			this.state = 4799;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.STRING_LITERAL:
				{
				this.state = 4797;
				_localctx._query = this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			case MariaDBParser.LOCAL_ID:
				{
				this.state = 4798;
				_localctx._variable = this.match(MariaDBParser.LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public executeStatement(): ExecuteStatementContext {
		let _localctx: ExecuteStatementContext = new ExecuteStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 392, MariaDBParser.RULE_executeStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4801;
			this.match(MariaDBParser.EXECUTE);
			this.state = 4802;
			this.uid();
			this.state = 4805;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.USING) {
				{
				this.state = 4803;
				this.match(MariaDBParser.USING);
				this.state = 4804;
				this.userVariables();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public deallocatePrepare(): DeallocatePrepareContext {
		let _localctx: DeallocatePrepareContext = new DeallocatePrepareContext(this._ctx, this.state);
		this.enterRule(_localctx, 394, MariaDBParser.RULE_deallocatePrepare);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4807;
			_localctx._dropFormat = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MariaDBParser.DROP || _la === MariaDBParser.DEALLOCATE)) {
				_localctx._dropFormat = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4808;
			this.match(MariaDBParser.PREPARE);
			this.state = 4809;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public routineBody(): RoutineBodyContext {
		let _localctx: RoutineBodyContext = new RoutineBodyContext(this._ctx, this.state);
		this.enterRule(_localctx, 396, MariaDBParser.RULE_routineBody);
		try {
			this.state = 4813;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 708, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4811;
				this.blockStatement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4812;
				this.sqlStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public blockStatement(): BlockStatementContext {
		let _localctx: BlockStatementContext = new BlockStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 398, MariaDBParser.RULE_blockStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4818;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 709, this._ctx) ) {
			case 1:
				{
				this.state = 4815;
				this.uid();
				this.state = 4816;
				this.match(MariaDBParser.COLON_SYMB);
				}
				break;
			}
			this.state = 4820;
			this.match(MariaDBParser.BEGIN);
			this.state = 4859;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 715, this._ctx) ) {
			case 1:
				{
				this.state = 4826;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 710, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4821;
						this.declareVariable();
						this.state = 4822;
						this.match(MariaDBParser.SEMI);
						}
						}
					}
					this.state = 4828;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 710, this._ctx);
				}
				this.state = 4834;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 711, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4829;
						this.declareCondition();
						this.state = 4830;
						this.match(MariaDBParser.SEMI);
						}
						}
					}
					this.state = 4836;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 711, this._ctx);
				}
				this.state = 4842;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 712, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4837;
						this.declareCursor();
						this.state = 4838;
						this.match(MariaDBParser.SEMI);
						}
						}
					}
					this.state = 4844;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 712, this._ctx);
				}
				this.state = 4850;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.DECLARE) {
					{
					{
					this.state = 4845;
					this.declareHandler();
					this.state = 4846;
					this.match(MariaDBParser.SEMI);
					}
					}
					this.state = 4852;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4856;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 714, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4853;
						this.procedureSqlStatement();
						}
						}
					}
					this.state = 4858;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 714, this._ctx);
				}
				}
				break;
			}
			this.state = 4861;
			this.match(MariaDBParser.END);
			this.state = 4863;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 716, this._ctx) ) {
			case 1:
				{
				this.state = 4862;
				this.uid();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public caseStatement(): CaseStatementContext {
		let _localctx: CaseStatementContext = new CaseStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 400, MariaDBParser.RULE_caseStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4865;
			this.match(MariaDBParser.CASE);
			this.state = 4868;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 717, this._ctx) ) {
			case 1:
				{
				this.state = 4866;
				this.uid();
				}
				break;

			case 2:
				{
				this.state = 4867;
				this.expression(0);
				}
				break;
			}
			this.state = 4871;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4870;
				this.caseAlternative();
				}
				}
				this.state = 4873;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === MariaDBParser.WHEN);
			this.state = 4881;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.ELSE) {
				{
				this.state = 4875;
				this.match(MariaDBParser.ELSE);
				this.state = 4877;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 4876;
						this.procedureSqlStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 4879;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 719, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
			}

			this.state = 4883;
			this.match(MariaDBParser.END);
			this.state = 4884;
			this.match(MariaDBParser.CASE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ifStatement(): IfStatementContext {
		let _localctx: IfStatementContext = new IfStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 402, MariaDBParser.RULE_ifStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4886;
			this.match(MariaDBParser.IF);
			this.state = 4887;
			this.expression(0);
			this.state = 4888;
			this.match(MariaDBParser.THEN);
			this.state = 4890;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4889;
					_localctx._procedureSqlStatement = this.procedureSqlStatement();
					_localctx._thenStatements.push(_localctx._procedureSqlStatement);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4892;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 721, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 4897;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.ELSEIF) {
				{
				{
				this.state = 4894;
				this.elifAlternative();
				}
				}
				this.state = 4899;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4906;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.ELSE) {
				{
				this.state = 4900;
				this.match(MariaDBParser.ELSE);
				this.state = 4902;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 4901;
						_localctx._procedureSqlStatement = this.procedureSqlStatement();
						_localctx._elseStatements.push(_localctx._procedureSqlStatement);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 4904;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 723, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
			}

			this.state = 4908;
			this.match(MariaDBParser.END);
			this.state = 4909;
			this.match(MariaDBParser.IF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public iterateStatement(): IterateStatementContext {
		let _localctx: IterateStatementContext = new IterateStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 404, MariaDBParser.RULE_iterateStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4911;
			this.match(MariaDBParser.ITERATE);
			this.state = 4912;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public leaveStatement(): LeaveStatementContext {
		let _localctx: LeaveStatementContext = new LeaveStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 406, MariaDBParser.RULE_leaveStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4914;
			this.match(MariaDBParser.LEAVE);
			this.state = 4915;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public loopStatement(): LoopStatementContext {
		let _localctx: LoopStatementContext = new LoopStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 408, MariaDBParser.RULE_loopStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4920;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MariaDBParser.ATTRIBUTE) | (1 << MariaDBParser.BODY) | (1 << MariaDBParser.BUCKETS) | (1 << MariaDBParser.CONDITION))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (MariaDBParser.CURRENT - 36)) | (1 << (MariaDBParser.CURRENT_ROLE - 36)) | (1 << (MariaDBParser.CURRENT_USER - 36)) | (1 << (MariaDBParser.DATABASE - 36)) | (1 << (MariaDBParser.DEFAULT - 36)) | (1 << (MariaDBParser.DIAGNOSTICS - 36)) | (1 << (MariaDBParser.EMPTY - 36)) | (1 << (MariaDBParser.EXCEPT - 36)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (MariaDBParser.GROUP - 73)) | (1 << (MariaDBParser.IF - 73)) | (1 << (MariaDBParser.IGNORED - 73)) | (1 << (MariaDBParser.INSERT - 73)) | (1 << (MariaDBParser.LATERAL - 73)) | (1 << (MariaDBParser.LEFT - 73)) | (1 << (MariaDBParser.LOCKED - 73)))) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & ((1 << (MariaDBParser.MAXVALUE - 110)) | (1 << (MariaDBParser.MINVALUE - 110)) | (1 << (MariaDBParser.NUMBER - 110)) | (1 << (MariaDBParser.OPTIONAL - 110)) | (1 << (MariaDBParser.ORDER - 110)) | (1 << (MariaDBParser.PRIMARY - 110)) | (1 << (MariaDBParser.PACKAGE - 110)))) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (MariaDBParser.REPLACE - 142)) | (1 << (MariaDBParser.RIGHT - 142)) | (1 << (MariaDBParser.SCHEMA - 142)) | (1 << (MariaDBParser.SKIP_ - 142)) | (1 << (MariaDBParser.STACKED - 142)) | (1 << (MariaDBParser.STATEMENT - 142)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MariaDBParser.DATE - 217)) | (1 << (MariaDBParser.TIME - 217)) | (1 << (MariaDBParser.TIMESTAMP - 217)) | (1 << (MariaDBParser.DATETIME - 217)) | (1 << (MariaDBParser.YEAR - 217)) | (1 << (MariaDBParser.BINARY - 217)) | (1 << (MariaDBParser.TEXT - 217)) | (1 << (MariaDBParser.ENUM - 217)) | (1 << (MariaDBParser.SERIAL - 217)))) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & ((1 << (MariaDBParser.JSON_ARRAY - 251)) | (1 << (MariaDBParser.JSON_ARRAYAGG - 251)) | (1 << (MariaDBParser.JSON_ARRAY_APPEND - 251)) | (1 << (MariaDBParser.JSON_ARRAY_INSERT - 251)) | (1 << (MariaDBParser.JSON_CONTAINS - 251)) | (1 << (MariaDBParser.JSON_CONTAINS_PATH - 251)) | (1 << (MariaDBParser.JSON_DEPTH - 251)) | (1 << (MariaDBParser.JSON_EXTRACT - 251)) | (1 << (MariaDBParser.JSON_INSERT - 251)) | (1 << (MariaDBParser.JSON_KEYS - 251)) | (1 << (MariaDBParser.JSON_LENGTH - 251)) | (1 << (MariaDBParser.JSON_MERGE - 251)) | (1 << (MariaDBParser.JSON_MERGE_PATCH - 251)) | (1 << (MariaDBParser.JSON_MERGE_PRESERVE - 251)) | (1 << (MariaDBParser.JSON_OBJECT - 251)) | (1 << (MariaDBParser.JSON_OBJECTAGG - 251)) | (1 << (MariaDBParser.JSON_OVERLAPS - 251)) | (1 << (MariaDBParser.JSON_PRETTY - 251)) | (1 << (MariaDBParser.JSON_QUOTE - 251)) | (1 << (MariaDBParser.JSON_REMOVE - 251)) | (1 << (MariaDBParser.JSON_REPLACE - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALID - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT - 251)) | (1 << (MariaDBParser.JSON_SEARCH - 251)) | (1 << (MariaDBParser.JSON_SET - 251)) | (1 << (MariaDBParser.JSON_STORAGE_FREE - 251)) | (1 << (MariaDBParser.JSON_STORAGE_SIZE - 251)) | (1 << (MariaDBParser.JSON_TABLE - 251)) | (1 << (MariaDBParser.JSON_TYPE - 251)) | (1 << (MariaDBParser.JSON_UNQUOTE - 251)) | (1 << (MariaDBParser.JSON_VALID - 251)) | (1 << (MariaDBParser.JSON_VALUE - 251)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (MariaDBParser.NESTED - 283)) | (1 << (MariaDBParser.ORDINALITY - 283)) | (1 << (MariaDBParser.PATH - 283)) | (1 << (MariaDBParser.AVG - 283)) | (1 << (MariaDBParser.BIT_AND - 283)) | (1 << (MariaDBParser.BIT_OR - 283)) | (1 << (MariaDBParser.BIT_XOR - 283)) | (1 << (MariaDBParser.COUNT - 283)) | (1 << (MariaDBParser.CUME_DIST - 283)) | (1 << (MariaDBParser.DENSE_RANK - 283)) | (1 << (MariaDBParser.FIRST_VALUE - 283)) | (1 << (MariaDBParser.GROUP_CONCAT - 283)) | (1 << (MariaDBParser.LAG - 283)) | (1 << (MariaDBParser.LAST_VALUE - 283)) | (1 << (MariaDBParser.LEAD - 283)) | (1 << (MariaDBParser.MAX - 283)) | (1 << (MariaDBParser.MIN - 283)) | (1 << (MariaDBParser.NTILE - 283)) | (1 << (MariaDBParser.NTH_VALUE - 283)) | (1 << (MariaDBParser.PERCENT_RANK - 283)) | (1 << (MariaDBParser.RANK - 283)) | (1 << (MariaDBParser.ROW_NUMBER - 283)) | (1 << (MariaDBParser.STD - 283)) | (1 << (MariaDBParser.STDDEV - 283)) | (1 << (MariaDBParser.STDDEV_POP - 283)) | (1 << (MariaDBParser.STDDEV_SAMP - 283)) | (1 << (MariaDBParser.SUM - 283)) | (1 << (MariaDBParser.VAR_POP - 283)) | (1 << (MariaDBParser.VAR_SAMP - 283)) | (1 << (MariaDBParser.VARIANCE - 283)) | (1 << (MariaDBParser.CURRENT_DATE - 283)) | (1 << (MariaDBParser.CURRENT_TIME - 283)))) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & ((1 << (MariaDBParser.CURRENT_TIMESTAMP - 315)) | (1 << (MariaDBParser.LOCALTIME - 315)) | (1 << (MariaDBParser.CURDATE - 315)) | (1 << (MariaDBParser.CURTIME - 315)) | (1 << (MariaDBParser.DATE_ADD - 315)) | (1 << (MariaDBParser.DATE_SUB - 315)) | (1 << (MariaDBParser.LOCALTIMESTAMP - 315)) | (1 << (MariaDBParser.NOW - 315)) | (1 << (MariaDBParser.POSITION - 315)) | (1 << (MariaDBParser.SUBSTR - 315)) | (1 << (MariaDBParser.SUBSTRING - 315)) | (1 << (MariaDBParser.SYSDATE - 315)) | (1 << (MariaDBParser.TRIM - 315)) | (1 << (MariaDBParser.UTC_DATE - 315)) | (1 << (MariaDBParser.UTC_TIME - 315)) | (1 << (MariaDBParser.UTC_TIMESTAMP - 315)) | (1 << (MariaDBParser.ACCOUNT - 315)) | (1 << (MariaDBParser.ACTION - 315)) | (1 << (MariaDBParser.AFTER - 315)) | (1 << (MariaDBParser.AGGREGATE - 315)) | (1 << (MariaDBParser.ALGORITHM - 315)) | (1 << (MariaDBParser.ANY - 315)) | (1 << (MariaDBParser.AT - 315)) | (1 << (MariaDBParser.AUTHORS - 315)) | (1 << (MariaDBParser.AUTOCOMMIT - 315)) | (1 << (MariaDBParser.AUTOEXTEND_SIZE - 315)) | (1 << (MariaDBParser.AUTO_INCREMENT - 315)) | (1 << (MariaDBParser.AVG_ROW_LENGTH - 315)) | (1 << (MariaDBParser.BEGIN - 315)) | (1 << (MariaDBParser.BINLOG - 315)) | (1 << (MariaDBParser.BIT - 315)))) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & ((1 << (MariaDBParser.BLOCK - 347)) | (1 << (MariaDBParser.BOOL - 347)) | (1 << (MariaDBParser.BOOLEAN - 347)) | (1 << (MariaDBParser.BTREE - 347)) | (1 << (MariaDBParser.CACHE - 347)) | (1 << (MariaDBParser.CASCADED - 347)) | (1 << (MariaDBParser.CHAIN - 347)) | (1 << (MariaDBParser.CHANGED - 347)) | (1 << (MariaDBParser.CHANNEL - 347)) | (1 << (MariaDBParser.CHECKSUM - 347)) | (1 << (MariaDBParser.PAGE_CHECKSUM - 347)) | (1 << (MariaDBParser.CIPHER - 347)) | (1 << (MariaDBParser.CLASS_ORIGIN - 347)) | (1 << (MariaDBParser.CLIENT - 347)) | (1 << (MariaDBParser.CLOSE - 347)) | (1 << (MariaDBParser.CLUSTERING - 347)) | (1 << (MariaDBParser.COALESCE - 347)) | (1 << (MariaDBParser.CODE - 347)) | (1 << (MariaDBParser.COLUMNS - 347)) | (1 << (MariaDBParser.COLUMN_FORMAT - 347)) | (1 << (MariaDBParser.COLUMN_NAME - 347)) | (1 << (MariaDBParser.COMMENT - 347)) | (1 << (MariaDBParser.COMMIT - 347)) | (1 << (MariaDBParser.COMPACT - 347)) | (1 << (MariaDBParser.COMPLETION - 347)) | (1 << (MariaDBParser.COMPRESSED - 347)) | (1 << (MariaDBParser.COMPRESSION - 347)) | (1 << (MariaDBParser.CONCURRENT - 347)) | (1 << (MariaDBParser.CONNECT - 347)) | (1 << (MariaDBParser.CONNECTION - 347)) | (1 << (MariaDBParser.CONSISTENT - 347)) | (1 << (MariaDBParser.CONSTRAINT_CATALOG - 347)))) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & ((1 << (MariaDBParser.CONSTRAINT_SCHEMA - 379)) | (1 << (MariaDBParser.CONSTRAINT_NAME - 379)) | (1 << (MariaDBParser.CONTAINS - 379)) | (1 << (MariaDBParser.CONTEXT - 379)) | (1 << (MariaDBParser.CONTRIBUTORS - 379)) | (1 << (MariaDBParser.COPY - 379)) | (1 << (MariaDBParser.CPU - 379)) | (1 << (MariaDBParser.CYCLE - 379)) | (1 << (MariaDBParser.CURSOR_NAME - 379)) | (1 << (MariaDBParser.DATA - 379)) | (1 << (MariaDBParser.DATAFILE - 379)) | (1 << (MariaDBParser.DEALLOCATE - 379)) | (1 << (MariaDBParser.DEFAULT_AUTH - 379)) | (1 << (MariaDBParser.DEFINER - 379)) | (1 << (MariaDBParser.DELAY_KEY_WRITE - 379)) | (1 << (MariaDBParser.DES_KEY_FILE - 379)) | (1 << (MariaDBParser.DIRECTORY - 379)) | (1 << (MariaDBParser.DISABLE - 379)) | (1 << (MariaDBParser.DISCARD - 379)) | (1 << (MariaDBParser.DISK - 379)) | (1 << (MariaDBParser.DO - 379)) | (1 << (MariaDBParser.DUMPFILE - 379)) | (1 << (MariaDBParser.DUPLICATE - 379)) | (1 << (MariaDBParser.DYNAMIC - 379)) | (1 << (MariaDBParser.ENABLE - 379)) | (1 << (MariaDBParser.ENCRYPTED - 379)) | (1 << (MariaDBParser.ENCRYPTION - 379)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ID - 379)) | (1 << (MariaDBParser.END - 379)) | (1 << (MariaDBParser.ENDS - 379)) | (1 << (MariaDBParser.ENGINE - 379)) | (1 << (MariaDBParser.ENGINES - 379)))) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & ((1 << (MariaDBParser.ERROR - 411)) | (1 << (MariaDBParser.ERRORS - 411)) | (1 << (MariaDBParser.ESCAPE - 411)) | (1 << (MariaDBParser.EVEN - 411)) | (1 << (MariaDBParser.EVENT - 411)) | (1 << (MariaDBParser.EVENTS - 411)) | (1 << (MariaDBParser.EVERY - 411)) | (1 << (MariaDBParser.EXCHANGE - 411)) | (1 << (MariaDBParser.EXCLUSIVE - 411)) | (1 << (MariaDBParser.EXPIRE - 411)) | (1 << (MariaDBParser.EXPORT - 411)) | (1 << (MariaDBParser.EXTENDED - 411)) | (1 << (MariaDBParser.EXTENT_SIZE - 411)) | (1 << (MariaDBParser.FAILED_LOGIN_ATTEMPTS - 411)) | (1 << (MariaDBParser.FAST - 411)) | (1 << (MariaDBParser.FAULTS - 411)) | (1 << (MariaDBParser.FIELDS - 411)) | (1 << (MariaDBParser.FILE_BLOCK_SIZE - 411)) | (1 << (MariaDBParser.FILTER - 411)) | (1 << (MariaDBParser.FIRST - 411)) | (1 << (MariaDBParser.FIXED - 411)) | (1 << (MariaDBParser.FLUSH - 411)) | (1 << (MariaDBParser.FOLLOWS - 411)) | (1 << (MariaDBParser.FOUND - 411)) | (1 << (MariaDBParser.FULL - 411)) | (1 << (MariaDBParser.FUNCTION - 411)) | (1 << (MariaDBParser.GENERAL - 411)) | (1 << (MariaDBParser.GLOBAL - 411)) | (1 << (MariaDBParser.GRANTS - 411)) | (1 << (MariaDBParser.GROUP_REPLICATION - 411)) | (1 << (MariaDBParser.HANDLER - 411)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (MariaDBParser.HASH - 443)) | (1 << (MariaDBParser.HELP - 443)) | (1 << (MariaDBParser.HISTORY - 443)) | (1 << (MariaDBParser.HOST - 443)) | (1 << (MariaDBParser.HOSTS - 443)) | (1 << (MariaDBParser.IDENTIFIED - 443)) | (1 << (MariaDBParser.IGNORE_SERVER_IDS - 443)) | (1 << (MariaDBParser.IMPORT - 443)) | (1 << (MariaDBParser.INCREMENT - 443)) | (1 << (MariaDBParser.INDEXES - 443)) | (1 << (MariaDBParser.INITIAL_SIZE - 443)) | (1 << (MariaDBParser.INPLACE - 443)) | (1 << (MariaDBParser.INSERT_METHOD - 443)) | (1 << (MariaDBParser.INSTALL - 443)) | (1 << (MariaDBParser.INSTANCE - 443)) | (1 << (MariaDBParser.INSTANT - 443)) | (1 << (MariaDBParser.INVISIBLE - 443)) | (1 << (MariaDBParser.INVOKER - 443)) | (1 << (MariaDBParser.IO - 443)) | (1 << (MariaDBParser.IO_THREAD - 443)) | (1 << (MariaDBParser.IPC - 443)) | (1 << (MariaDBParser.ISOLATION - 443)) | (1 << (MariaDBParser.ISSUER - 443)) | (1 << (MariaDBParser.JSON - 443)) | (1 << (MariaDBParser.KEY_BLOCK_SIZE - 443)) | (1 << (MariaDBParser.LANGUAGE - 443)) | (1 << (MariaDBParser.LAST - 443)) | (1 << (MariaDBParser.LEAVES - 443)) | (1 << (MariaDBParser.LESS - 443)) | (1 << (MariaDBParser.LEVEL - 443)) | (1 << (MariaDBParser.LIST - 443)) | (1 << (MariaDBParser.LOCAL - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (MariaDBParser.LOCALES - 475)) | (1 << (MariaDBParser.LOGFILE - 475)) | (1 << (MariaDBParser.LOGS - 475)) | (1 << (MariaDBParser.MASTER - 475)) | (1 << (MariaDBParser.MASTER_AUTO_POSITION - 475)) | (1 << (MariaDBParser.MASTER_CONNECT_RETRY - 475)) | (1 << (MariaDBParser.MASTER_DELAY - 475)) | (1 << (MariaDBParser.MASTER_HEARTBEAT_PERIOD - 475)) | (1 << (MariaDBParser.MASTER_HOST - 475)) | (1 << (MariaDBParser.MASTER_LOG_FILE - 475)) | (1 << (MariaDBParser.MASTER_LOG_POS - 475)) | (1 << (MariaDBParser.MASTER_PASSWORD - 475)) | (1 << (MariaDBParser.MASTER_PORT - 475)) | (1 << (MariaDBParser.MASTER_RETRY_COUNT - 475)) | (1 << (MariaDBParser.MASTER_SSL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CA - 475)) | (1 << (MariaDBParser.MASTER_SSL_CAPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_CERT - 475)) | (1 << (MariaDBParser.MASTER_SSL_CIPHER - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRLPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_KEY - 475)) | (1 << (MariaDBParser.MASTER_TLS_VERSION - 475)) | (1 << (MariaDBParser.MASTER_USER - 475)) | (1 << (MariaDBParser.MAX_CONNECTIONS_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_QUERIES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_ROWS - 475)) | (1 << (MariaDBParser.MAX_SIZE - 475)) | (1 << (MariaDBParser.MAX_UPDATES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_USER_CONNECTIONS - 475)) | (1 << (MariaDBParser.MEDIUM - 475)) | (1 << (MariaDBParser.MEMBER - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (MariaDBParser.MERGE - 507)) | (1 << (MariaDBParser.MESSAGE_TEXT - 507)) | (1 << (MariaDBParser.MID - 507)) | (1 << (MariaDBParser.MIGRATE - 507)) | (1 << (MariaDBParser.MIN_ROWS - 507)) | (1 << (MariaDBParser.MODE - 507)) | (1 << (MariaDBParser.MODIFY - 507)) | (1 << (MariaDBParser.MUTEX - 507)) | (1 << (MariaDBParser.MYSQL - 507)) | (1 << (MariaDBParser.MYSQL_ERRNO - 507)) | (1 << (MariaDBParser.NAME - 507)) | (1 << (MariaDBParser.NAMES - 507)) | (1 << (MariaDBParser.NCHAR - 507)) | (1 << (MariaDBParser.NEVER - 507)) | (1 << (MariaDBParser.NEXT - 507)) | (1 << (MariaDBParser.NO - 507)) | (1 << (MariaDBParser.NOCACHE - 507)) | (1 << (MariaDBParser.NOCOPY - 507)) | (1 << (MariaDBParser.NOCYCLE - 507)) | (1 << (MariaDBParser.NOMAXVALUE - 507)) | (1 << (MariaDBParser.NOMINVALUE - 507)) | (1 << (MariaDBParser.NOWAIT - 507)) | (1 << (MariaDBParser.NODEGROUP - 507)) | (1 << (MariaDBParser.NONE - 507)) | (1 << (MariaDBParser.ODBC - 507)) | (1 << (MariaDBParser.OFFLINE - 507)) | (1 << (MariaDBParser.OFFSET - 507)) | (1 << (MariaDBParser.OF - 507)) | (1 << (MariaDBParser.OJ - 507)) | (1 << (MariaDBParser.OLD_PASSWORD - 507)) | (1 << (MariaDBParser.ONE - 507)) | (1 << (MariaDBParser.ONLINE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (MariaDBParser.ONLY - 539)) | (1 << (MariaDBParser.OPEN - 539)) | (1 << (MariaDBParser.OPTIMIZER_COSTS - 539)) | (1 << (MariaDBParser.OPTIONS - 539)) | (1 << (MariaDBParser.OWNER - 539)) | (1 << (MariaDBParser.PACK_KEYS - 539)) | (1 << (MariaDBParser.PAGE - 539)) | (1 << (MariaDBParser.PARSER - 539)) | (1 << (MariaDBParser.PARTIAL - 539)) | (1 << (MariaDBParser.PARTITIONING - 539)) | (1 << (MariaDBParser.PARTITIONS - 539)) | (1 << (MariaDBParser.PASSWORD - 539)) | (1 << (MariaDBParser.PASSWORD_LOCK_TIME - 539)) | (1 << (MariaDBParser.PHASE - 539)) | (1 << (MariaDBParser.PLUGIN - 539)) | (1 << (MariaDBParser.PLUGIN_DIR - 539)) | (1 << (MariaDBParser.PLUGINS - 539)) | (1 << (MariaDBParser.PORT - 539)) | (1 << (MariaDBParser.PRECEDES - 539)) | (1 << (MariaDBParser.PREPARE - 539)) | (1 << (MariaDBParser.PRESERVE - 539)) | (1 << (MariaDBParser.PREV - 539)) | (1 << (MariaDBParser.PROCESSLIST - 539)) | (1 << (MariaDBParser.PROFILE - 539)) | (1 << (MariaDBParser.PROFILES - 539)) | (1 << (MariaDBParser.PROXY - 539)) | (1 << (MariaDBParser.QUERY - 539)) | (1 << (MariaDBParser.QUERY_RESPONSE_TIME - 539)) | (1 << (MariaDBParser.QUICK - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (MariaDBParser.REBUILD - 571)) | (1 << (MariaDBParser.RECOVER - 571)) | (1 << (MariaDBParser.RECURSIVE - 571)) | (1 << (MariaDBParser.REDO_BUFFER_SIZE - 571)) | (1 << (MariaDBParser.REDUNDANT - 571)) | (1 << (MariaDBParser.RELAY - 571)) | (1 << (MariaDBParser.RELAY_LOG_FILE - 571)) | (1 << (MariaDBParser.RELAY_LOG_POS - 571)) | (1 << (MariaDBParser.RELAYLOG - 571)) | (1 << (MariaDBParser.REMOVE - 571)) | (1 << (MariaDBParser.REORGANIZE - 571)) | (1 << (MariaDBParser.REPAIR - 571)) | (1 << (MariaDBParser.REPLICATE_DO_DB - 571)) | (1 << (MariaDBParser.REPLICATE_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_REWRITE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATION - 571)) | (1 << (MariaDBParser.RESET - 571)) | (1 << (MariaDBParser.RESTART - 571)) | (1 << (MariaDBParser.RESUME - 571)) | (1 << (MariaDBParser.RETURNED_SQLSTATE - 571)) | (1 << (MariaDBParser.RETURNS - 571)) | (1 << (MariaDBParser.REUSE - 571)) | (1 << (MariaDBParser.ROLE - 571)) | (1 << (MariaDBParser.ROLLBACK - 571)) | (1 << (MariaDBParser.ROLLUP - 571)) | (1 << (MariaDBParser.ROTATE - 571)) | (1 << (MariaDBParser.ROW - 571)))) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & ((1 << (MariaDBParser.ROWS - 603)) | (1 << (MariaDBParser.ROW_FORMAT - 603)) | (1 << (MariaDBParser.RTREE - 603)) | (1 << (MariaDBParser.SAVEPOINT - 603)) | (1 << (MariaDBParser.SCHEDULE - 603)) | (1 << (MariaDBParser.SECURITY - 603)) | (1 << (MariaDBParser.SEQUENCE - 603)) | (1 << (MariaDBParser.SERVER - 603)) | (1 << (MariaDBParser.SESSION - 603)) | (1 << (MariaDBParser.SHARE - 603)) | (1 << (MariaDBParser.SHARED - 603)) | (1 << (MariaDBParser.SIGNED - 603)) | (1 << (MariaDBParser.SIMPLE - 603)) | (1 << (MariaDBParser.SLAVE - 603)) | (1 << (MariaDBParser.SLAVES - 603)) | (1 << (MariaDBParser.SLOW - 603)) | (1 << (MariaDBParser.SNAPSHOT - 603)) | (1 << (MariaDBParser.SOCKET - 603)) | (1 << (MariaDBParser.SOME - 603)) | (1 << (MariaDBParser.SONAME - 603)) | (1 << (MariaDBParser.SOUNDS - 603)) | (1 << (MariaDBParser.SOURCE - 603)) | (1 << (MariaDBParser.SQL_AFTER_GTIDS - 603)) | (1 << (MariaDBParser.SQL_AFTER_MTS_GAPS - 603)) | (1 << (MariaDBParser.SQL_BEFORE_GTIDS - 603)) | (1 << (MariaDBParser.SQL_BUFFER_RESULT - 603)) | (1 << (MariaDBParser.SQL_CACHE - 603)) | (1 << (MariaDBParser.SQL_NO_CACHE - 603)) | (1 << (MariaDBParser.SQL_THREAD - 603)) | (1 << (MariaDBParser.START - 603)) | (1 << (MariaDBParser.STARTS - 603)) | (1 << (MariaDBParser.STATS_AUTO_RECALC - 603)))) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & ((1 << (MariaDBParser.STATS_PERSISTENT - 635)) | (1 << (MariaDBParser.STATS_SAMPLE_PAGES - 635)) | (1 << (MariaDBParser.STATUS - 635)) | (1 << (MariaDBParser.STOP - 635)) | (1 << (MariaDBParser.STORAGE - 635)) | (1 << (MariaDBParser.STRING - 635)) | (1 << (MariaDBParser.SUBCLASS_ORIGIN - 635)) | (1 << (MariaDBParser.SUBJECT - 635)) | (1 << (MariaDBParser.SUBPARTITION - 635)) | (1 << (MariaDBParser.SUBPARTITIONS - 635)) | (1 << (MariaDBParser.SUSPEND - 635)) | (1 << (MariaDBParser.SWAPS - 635)) | (1 << (MariaDBParser.SWITCHES - 635)) | (1 << (MariaDBParser.TABLE_NAME - 635)) | (1 << (MariaDBParser.TABLESPACE - 635)) | (1 << (MariaDBParser.TABLE_TYPE - 635)) | (1 << (MariaDBParser.TEMPORARY - 635)) | (1 << (MariaDBParser.TEMPTABLE - 635)) | (1 << (MariaDBParser.THAN - 635)) | (1 << (MariaDBParser.TRADITIONAL - 635)) | (1 << (MariaDBParser.TRANSACTION - 635)) | (1 << (MariaDBParser.TRANSACTIONAL - 635)) | (1 << (MariaDBParser.TRIGGERS - 635)) | (1 << (MariaDBParser.TRUNCATE - 635)) | (1 << (MariaDBParser.TYPES - 635)) | (1 << (MariaDBParser.UNBOUNDED - 635)) | (1 << (MariaDBParser.UNDEFINED - 635)) | (1 << (MariaDBParser.UNDOFILE - 635)) | (1 << (MariaDBParser.UNDO_BUFFER_SIZE - 635)) | (1 << (MariaDBParser.UNINSTALL - 635)) | (1 << (MariaDBParser.UNKNOWN - 635)))) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & ((1 << (MariaDBParser.UNTIL - 667)) | (1 << (MariaDBParser.UPGRADE - 667)) | (1 << (MariaDBParser.USER - 667)) | (1 << (MariaDBParser.USE_FRM - 667)) | (1 << (MariaDBParser.USER_RESOURCES - 667)) | (1 << (MariaDBParser.VALIDATION - 667)) | (1 << (MariaDBParser.VALUE - 667)) | (1 << (MariaDBParser.VARIABLES - 667)) | (1 << (MariaDBParser.VIEW - 667)) | (1 << (MariaDBParser.VIRTUAL - 667)) | (1 << (MariaDBParser.VISIBLE - 667)) | (1 << (MariaDBParser.WAIT - 667)) | (1 << (MariaDBParser.WARNINGS - 667)) | (1 << (MariaDBParser.WITHOUT - 667)) | (1 << (MariaDBParser.WORK - 667)) | (1 << (MariaDBParser.WRAPPER - 667)) | (1 << (MariaDBParser.WSREP_MEMBERSHIP - 667)) | (1 << (MariaDBParser.WSREP_STATUS - 667)) | (1 << (MariaDBParser.X509 - 667)) | (1 << (MariaDBParser.XA - 667)) | (1 << (MariaDBParser.XML - 667)) | (1 << (MariaDBParser.EUR - 667)) | (1 << (MariaDBParser.USA - 667)) | (1 << (MariaDBParser.JIS - 667)) | (1 << (MariaDBParser.ISO - 667)) | (1 << (MariaDBParser.INTERNAL - 667)) | (1 << (MariaDBParser.QUARTER - 667)) | (1 << (MariaDBParser.MONTH - 667)) | (1 << (MariaDBParser.DAY - 667)) | (1 << (MariaDBParser.HOUR - 667)))) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & ((1 << (MariaDBParser.MINUTE - 699)) | (1 << (MariaDBParser.WEEK - 699)) | (1 << (MariaDBParser.SECOND - 699)) | (1 << (MariaDBParser.MICROSECOND - 699)) | (1 << (MariaDBParser.USER_STATISTICS - 699)) | (1 << (MariaDBParser.CLIENT_STATISTICS - 699)) | (1 << (MariaDBParser.INDEX_STATISTICS - 699)) | (1 << (MariaDBParser.TABLE_STATISTICS - 699)) | (1 << (MariaDBParser.ADMIN - 699)) | (1 << (MariaDBParser.AUDIT_ADMIN - 699)) | (1 << (MariaDBParser.BACKUP_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ENCRYPTION_ADMIN - 699)) | (1 << (MariaDBParser.CLONE_ADMIN - 699)) | (1 << (MariaDBParser.CONNECTION_ADMIN - 699)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ADMIN - 699)) | (1 << (MariaDBParser.EXECUTE - 699)) | (1 << (MariaDBParser.FILE - 699)) | (1 << (MariaDBParser.FIREWALL_ADMIN - 699)) | (1 << (MariaDBParser.FIREWALL_USER - 699)) | (1 << (MariaDBParser.GROUP_REPLICATION_ADMIN - 699)) | (1 << (MariaDBParser.INNODB_REDO_LOG_ARCHIVE - 699)) | (1 << (MariaDBParser.INVOKE - 699)) | (1 << (MariaDBParser.LAMBDA - 699)) | (1 << (MariaDBParser.NDB_STORED_USER - 699)) | (1 << (MariaDBParser.PASSWORDLESS_USER_ADMIN - 699)))) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & ((1 << (MariaDBParser.PERSIST_RO_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.PRIVILEGES - 731)) | (1 << (MariaDBParser.PROCESS - 731)) | (1 << (MariaDBParser.RELOAD - 731)) | (1 << (MariaDBParser.REPLICATION_APPLIER - 731)) | (1 << (MariaDBParser.REPLICATION_SLAVE_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_USER - 731)) | (1 << (MariaDBParser.ROLE_ADMIN - 731)) | (1 << (MariaDBParser.ROUTINE - 731)) | (1 << (MariaDBParser.S3 - 731)) | (1 << (MariaDBParser.SESSION_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.SET_USER_ID - 731)) | (1 << (MariaDBParser.SHOW_ROUTINE - 731)) | (1 << (MariaDBParser.SHUTDOWN - 731)) | (1 << (MariaDBParser.SUPER - 731)) | (1 << (MariaDBParser.SYSTEM_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.TABLES - 731)) | (1 << (MariaDBParser.TABLE_ENCRYPTION_ADMIN - 731)) | (1 << (MariaDBParser.VERSION_TOKEN_ADMIN - 731)) | (1 << (MariaDBParser.XA_RECOVER_ADMIN - 731)) | (1 << (MariaDBParser.ARMSCII8 - 731)) | (1 << (MariaDBParser.ASCII - 731)) | (1 << (MariaDBParser.BIG5 - 731)) | (1 << (MariaDBParser.CP1250 - 731)) | (1 << (MariaDBParser.CP1251 - 731)) | (1 << (MariaDBParser.CP1256 - 731)) | (1 << (MariaDBParser.CP1257 - 731)) | (1 << (MariaDBParser.CP850 - 731)) | (1 << (MariaDBParser.CP852 - 731)) | (1 << (MariaDBParser.CP866 - 731)))) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & ((1 << (MariaDBParser.CP932 - 763)) | (1 << (MariaDBParser.DEC8 - 763)) | (1 << (MariaDBParser.EUCJPMS - 763)) | (1 << (MariaDBParser.EUCKR - 763)) | (1 << (MariaDBParser.GB18030 - 763)) | (1 << (MariaDBParser.GB2312 - 763)) | (1 << (MariaDBParser.GBK - 763)) | (1 << (MariaDBParser.GEOSTD8 - 763)) | (1 << (MariaDBParser.GREEK - 763)) | (1 << (MariaDBParser.HEBREW - 763)) | (1 << (MariaDBParser.HP8 - 763)) | (1 << (MariaDBParser.KEYBCS2 - 763)) | (1 << (MariaDBParser.KOI8R - 763)) | (1 << (MariaDBParser.KOI8U - 763)) | (1 << (MariaDBParser.LATIN1 - 763)) | (1 << (MariaDBParser.LATIN2 - 763)) | (1 << (MariaDBParser.LATIN5 - 763)) | (1 << (MariaDBParser.LATIN7 - 763)) | (1 << (MariaDBParser.MACCE - 763)) | (1 << (MariaDBParser.MACROMAN - 763)) | (1 << (MariaDBParser.SJIS - 763)) | (1 << (MariaDBParser.SWE7 - 763)) | (1 << (MariaDBParser.TIS620 - 763)) | (1 << (MariaDBParser.UCS2 - 763)) | (1 << (MariaDBParser.UJIS - 763)) | (1 << (MariaDBParser.UTF16 - 763)) | (1 << (MariaDBParser.UTF16LE - 763)) | (1 << (MariaDBParser.UTF32 - 763)) | (1 << (MariaDBParser.UTF8 - 763)) | (1 << (MariaDBParser.UTF8MB3 - 763)) | (1 << (MariaDBParser.UTF8MB4 - 763)) | (1 << (MariaDBParser.ARCHIVE - 763)))) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & ((1 << (MariaDBParser.BLACKHOLE - 795)) | (1 << (MariaDBParser.CSV - 795)) | (1 << (MariaDBParser.FEDERATED - 795)) | (1 << (MariaDBParser.INNODB - 795)) | (1 << (MariaDBParser.MEMORY - 795)) | (1 << (MariaDBParser.MRG_MYISAM - 795)) | (1 << (MariaDBParser.MYISAM - 795)) | (1 << (MariaDBParser.NDB - 795)) | (1 << (MariaDBParser.NDBCLUSTER - 795)) | (1 << (MariaDBParser.PERFORMANCE_SCHEMA - 795)) | (1 << (MariaDBParser.TOKUDB - 795)) | (1 << (MariaDBParser.REPEATABLE - 795)) | (1 << (MariaDBParser.COMMITTED - 795)) | (1 << (MariaDBParser.UNCOMMITTED - 795)) | (1 << (MariaDBParser.SERIALIZABLE - 795)) | (1 << (MariaDBParser.GEOMETRYCOLLECTION - 795)) | (1 << (MariaDBParser.LINESTRING - 795)) | (1 << (MariaDBParser.MULTILINESTRING - 795)) | (1 << (MariaDBParser.MULTIPOINT - 795)) | (1 << (MariaDBParser.MULTIPOLYGON - 795)) | (1 << (MariaDBParser.POINT - 795)) | (1 << (MariaDBParser.POLYGON - 795)) | (1 << (MariaDBParser.ABS - 795)) | (1 << (MariaDBParser.ACOS - 795)) | (1 << (MariaDBParser.ADDDATE - 795)) | (1 << (MariaDBParser.ADDTIME - 795)) | (1 << (MariaDBParser.AES_DECRYPT - 795)) | (1 << (MariaDBParser.AES_ENCRYPT - 795)) | (1 << (MariaDBParser.AREA - 795)) | (1 << (MariaDBParser.ASBINARY - 795)))) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & ((1 << (MariaDBParser.ASIN - 827)) | (1 << (MariaDBParser.ASTEXT - 827)) | (1 << (MariaDBParser.ASWKB - 827)) | (1 << (MariaDBParser.ASWKT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DECRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DERIVE - 827)) | (1 << (MariaDBParser.ASYMMETRIC_ENCRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_SIGN - 827)) | (1 << (MariaDBParser.ASYMMETRIC_VERIFY - 827)) | (1 << (MariaDBParser.ATAN - 827)) | (1 << (MariaDBParser.ATAN2 - 827)) | (1 << (MariaDBParser.BENCHMARK - 827)) | (1 << (MariaDBParser.BIN - 827)) | (1 << (MariaDBParser.BIT_COUNT - 827)) | (1 << (MariaDBParser.BIT_LENGTH - 827)) | (1 << (MariaDBParser.BUFFER - 827)) | (1 << (MariaDBParser.CATALOG_NAME - 827)) | (1 << (MariaDBParser.CEIL - 827)) | (1 << (MariaDBParser.CEILING - 827)) | (1 << (MariaDBParser.CENTROID - 827)) | (1 << (MariaDBParser.CHARACTER_LENGTH - 827)) | (1 << (MariaDBParser.CHARSET - 827)) | (1 << (MariaDBParser.CHAR_LENGTH - 827)) | (1 << (MariaDBParser.COERCIBILITY - 827)) | (1 << (MariaDBParser.COLLATION - 827)) | (1 << (MariaDBParser.COMPRESS - 827)) | (1 << (MariaDBParser.CONCAT - 827)) | (1 << (MariaDBParser.CONCAT_WS - 827)) | (1 << (MariaDBParser.CONNECTION_ID - 827)) | (1 << (MariaDBParser.CONV - 827)) | (1 << (MariaDBParser.CONVERT_TZ - 827)) | (1 << (MariaDBParser.COS - 827)))) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & ((1 << (MariaDBParser.COT - 859)) | (1 << (MariaDBParser.CRC32 - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY - 859)) | (1 << (MariaDBParser.CREATE_DH_PARAMETERS - 859)) | (1 << (MariaDBParser.CREATE_DIGEST - 859)) | (1 << (MariaDBParser.CROSSES - 859)) | (1 << (MariaDBParser.DATEDIFF - 859)) | (1 << (MariaDBParser.DATE_FORMAT - 859)) | (1 << (MariaDBParser.DAYNAME - 859)) | (1 << (MariaDBParser.DAYOFMONTH - 859)) | (1 << (MariaDBParser.DAYOFWEEK - 859)) | (1 << (MariaDBParser.DAYOFYEAR - 859)) | (1 << (MariaDBParser.DECODE - 859)) | (1 << (MariaDBParser.DEGREES - 859)) | (1 << (MariaDBParser.DES_DECRYPT - 859)) | (1 << (MariaDBParser.DES_ENCRYPT - 859)) | (1 << (MariaDBParser.DIMENSION - 859)) | (1 << (MariaDBParser.DISJOINT - 859)) | (1 << (MariaDBParser.ELT - 859)) | (1 << (MariaDBParser.ENCODE - 859)) | (1 << (MariaDBParser.ENCRYPT - 859)) | (1 << (MariaDBParser.ENDPOINT - 859)) | (1 << (MariaDBParser.ENGINE_ATTRIBUTE - 859)) | (1 << (MariaDBParser.ENVELOPE - 859)) | (1 << (MariaDBParser.EQUALS - 859)) | (1 << (MariaDBParser.EXP - 859)) | (1 << (MariaDBParser.EXPORT_SET - 859)) | (1 << (MariaDBParser.EXTERIORRING - 859)) | (1 << (MariaDBParser.EXTRACTVALUE - 859)) | (1 << (MariaDBParser.FIELD - 859)) | (1 << (MariaDBParser.FIND_IN_SET - 859)))) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & ((1 << (MariaDBParser.FLOOR - 891)) | (1 << (MariaDBParser.FORMAT - 891)) | (1 << (MariaDBParser.FOUND_ROWS - 891)) | (1 << (MariaDBParser.FROM_BASE64 - 891)) | (1 << (MariaDBParser.FROM_DAYS - 891)) | (1 << (MariaDBParser.FROM_UNIXTIME - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYN - 891)) | (1 << (MariaDBParser.GEOMETRYTYPE - 891)) | (1 << (MariaDBParser.GEOMFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMFROMWKB - 891)) | (1 << (MariaDBParser.GET_FORMAT - 891)) | (1 << (MariaDBParser.GET_LOCK - 891)) | (1 << (MariaDBParser.GLENGTH - 891)) | (1 << (MariaDBParser.GREATEST - 891)) | (1 << (MariaDBParser.GTID_SUBSET - 891)) | (1 << (MariaDBParser.GTID_SUBTRACT - 891)) | (1 << (MariaDBParser.HEX - 891)) | (1 << (MariaDBParser.IFNULL - 891)) | (1 << (MariaDBParser.INET6_ATON - 891)) | (1 << (MariaDBParser.INET6_NTOA - 891)) | (1 << (MariaDBParser.INET_ATON - 891)) | (1 << (MariaDBParser.INET_NTOA - 891)) | (1 << (MariaDBParser.INSTR - 891)) | (1 << (MariaDBParser.INTERIORRINGN - 891)) | (1 << (MariaDBParser.INTERSECTS - 891)) | (1 << (MariaDBParser.ISCLOSED - 891)))) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & ((1 << (MariaDBParser.ISEMPTY - 923)) | (1 << (MariaDBParser.ISNULL - 923)) | (1 << (MariaDBParser.ISSIMPLE - 923)) | (1 << (MariaDBParser.IS_FREE_LOCK - 923)) | (1 << (MariaDBParser.IS_IPV4 - 923)) | (1 << (MariaDBParser.IS_IPV4_COMPAT - 923)) | (1 << (MariaDBParser.IS_IPV4_MAPPED - 923)) | (1 << (MariaDBParser.IS_IPV6 - 923)) | (1 << (MariaDBParser.IS_USED_LOCK - 923)) | (1 << (MariaDBParser.LAST_INSERT_ID - 923)) | (1 << (MariaDBParser.LCASE - 923)) | (1 << (MariaDBParser.LEAST - 923)) | (1 << (MariaDBParser.LENGTH - 923)) | (1 << (MariaDBParser.LINEFROMTEXT - 923)) | (1 << (MariaDBParser.LINEFROMWKB - 923)) | (1 << (MariaDBParser.LINESTRINGFROMTEXT - 923)) | (1 << (MariaDBParser.LINESTRINGFROMWKB - 923)) | (1 << (MariaDBParser.LN - 923)) | (1 << (MariaDBParser.LOAD_FILE - 923)) | (1 << (MariaDBParser.LOCATE - 923)) | (1 << (MariaDBParser.LOG - 923)) | (1 << (MariaDBParser.LOG10 - 923)) | (1 << (MariaDBParser.LOG2 - 923)) | (1 << (MariaDBParser.LOWER - 923)) | (1 << (MariaDBParser.LPAD - 923)) | (1 << (MariaDBParser.LTRIM - 923)) | (1 << (MariaDBParser.MAKEDATE - 923)) | (1 << (MariaDBParser.MAKETIME - 923)) | (1 << (MariaDBParser.MAKE_SET - 923)) | (1 << (MariaDBParser.MASTER_POS_WAIT - 923)) | (1 << (MariaDBParser.MBRCONTAINS - 923)) | (1 << (MariaDBParser.MBRDISJOINT - 923)))) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & ((1 << (MariaDBParser.MBREQUAL - 955)) | (1 << (MariaDBParser.MBRINTERSECTS - 955)) | (1 << (MariaDBParser.MBROVERLAPS - 955)) | (1 << (MariaDBParser.MBRTOUCHES - 955)) | (1 << (MariaDBParser.MBRWITHIN - 955)) | (1 << (MariaDBParser.MD5 - 955)) | (1 << (MariaDBParser.MLINEFROMTEXT - 955)) | (1 << (MariaDBParser.MLINEFROMWKB - 955)) | (1 << (MariaDBParser.MONTHNAME - 955)) | (1 << (MariaDBParser.MPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MPOLYFROMTEXT - 955)) | (1 << (MariaDBParser.MPOLYFROMWKB - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMTEXT - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMWKB - 955)) | (1 << (MariaDBParser.NAME_CONST - 955)) | (1 << (MariaDBParser.NULLIF - 955)) | (1 << (MariaDBParser.NUMGEOMETRIES - 955)) | (1 << (MariaDBParser.NUMINTERIORRINGS - 955)) | (1 << (MariaDBParser.NUMPOINTS - 955)) | (1 << (MariaDBParser.OCT - 955)) | (1 << (MariaDBParser.OCTET_LENGTH - 955)) | (1 << (MariaDBParser.ORD - 955)) | (1 << (MariaDBParser.OVERLAPS - 955)) | (1 << (MariaDBParser.PERIOD_ADD - 955)) | (1 << (MariaDBParser.PERIOD_DIFF - 955)) | (1 << (MariaDBParser.PI - 955)) | (1 << (MariaDBParser.POINTFROMTEXT - 955)))) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & ((1 << (MariaDBParser.POINTFROMWKB - 987)) | (1 << (MariaDBParser.POINTN - 987)) | (1 << (MariaDBParser.POLYFROMTEXT - 987)) | (1 << (MariaDBParser.POLYFROMWKB - 987)) | (1 << (MariaDBParser.POLYGONFROMTEXT - 987)) | (1 << (MariaDBParser.POLYGONFROMWKB - 987)) | (1 << (MariaDBParser.POW - 987)) | (1 << (MariaDBParser.POWER - 987)) | (1 << (MariaDBParser.QUOTE - 987)) | (1 << (MariaDBParser.RADIANS - 987)) | (1 << (MariaDBParser.RAND - 987)) | (1 << (MariaDBParser.RANDOM_BYTES - 987)) | (1 << (MariaDBParser.RELEASE_LOCK - 987)) | (1 << (MariaDBParser.REVERSE - 987)) | (1 << (MariaDBParser.ROUND - 987)) | (1 << (MariaDBParser.ROW_COUNT - 987)) | (1 << (MariaDBParser.RPAD - 987)) | (1 << (MariaDBParser.RTRIM - 987)) | (1 << (MariaDBParser.SEC_TO_TIME - 987)) | (1 << (MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE - 987)) | (1 << (MariaDBParser.SESSION_USER - 987)) | (1 << (MariaDBParser.SHA - 987)) | (1 << (MariaDBParser.SHA1 - 987)) | (1 << (MariaDBParser.SHA2 - 987)) | (1 << (MariaDBParser.SCHEMA_NAME - 987)) | (1 << (MariaDBParser.SIGN - 987)) | (1 << (MariaDBParser.SIN - 987)) | (1 << (MariaDBParser.SLEEP - 987)) | (1 << (MariaDBParser.SOUNDEX - 987)) | (1 << (MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS - 987)) | (1 << (MariaDBParser.SQRT - 987)) | (1 << (MariaDBParser.SRID - 987)))) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & ((1 << (MariaDBParser.STARTPOINT - 1019)) | (1 << (MariaDBParser.STRCMP - 1019)) | (1 << (MariaDBParser.STR_TO_DATE - 1019)) | (1 << (MariaDBParser.ST_AREA - 1019)) | (1 << (MariaDBParser.ST_ASBINARY - 1019)) | (1 << (MariaDBParser.ST_ASTEXT - 1019)) | (1 << (MariaDBParser.ST_ASWKB - 1019)) | (1 << (MariaDBParser.ST_ASWKT - 1019)) | (1 << (MariaDBParser.ST_BUFFER - 1019)) | (1 << (MariaDBParser.ST_CENTROID - 1019)) | (1 << (MariaDBParser.ST_CONTAINS - 1019)) | (1 << (MariaDBParser.ST_CROSSES - 1019)) | (1 << (MariaDBParser.ST_DIFFERENCE - 1019)) | (1 << (MariaDBParser.ST_DIMENSION - 1019)) | (1 << (MariaDBParser.ST_DISJOINT - 1019)) | (1 << (MariaDBParser.ST_DISTANCE - 1019)) | (1 << (MariaDBParser.ST_ENDPOINT - 1019)) | (1 << (MariaDBParser.ST_ENVELOPE - 1019)) | (1 << (MariaDBParser.ST_EQUALS - 1019)) | (1 << (MariaDBParser.ST_EXTERIORRING - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYN - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYTYPE - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMWKB - 1019)) | (1 << (MariaDBParser.ST_INTERIORRINGN - 1019)))) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & ((1 << (MariaDBParser.ST_INTERSECTION - 1051)) | (1 << (MariaDBParser.ST_INTERSECTS - 1051)) | (1 << (MariaDBParser.ST_ISCLOSED - 1051)) | (1 << (MariaDBParser.ST_ISEMPTY - 1051)) | (1 << (MariaDBParser.ST_ISSIMPLE - 1051)) | (1 << (MariaDBParser.ST_LINEFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINEFROMWKB - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMWKB - 1051)) | (1 << (MariaDBParser.ST_NUMGEOMETRIES - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRING - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRINGS - 1051)) | (1 << (MariaDBParser.ST_NUMPOINTS - 1051)) | (1 << (MariaDBParser.ST_OVERLAPS - 1051)) | (1 << (MariaDBParser.ST_POINTFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POINTFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POINTN - 1051)) | (1 << (MariaDBParser.ST_POLYFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMWKB - 1051)) | (1 << (MariaDBParser.ST_SRID - 1051)) | (1 << (MariaDBParser.ST_STARTPOINT - 1051)) | (1 << (MariaDBParser.ST_SYMDIFFERENCE - 1051)) | (1 << (MariaDBParser.ST_TOUCHES - 1051)) | (1 << (MariaDBParser.ST_UNION - 1051)) | (1 << (MariaDBParser.ST_WITHIN - 1051)) | (1 << (MariaDBParser.ST_X - 1051)) | (1 << (MariaDBParser.ST_Y - 1051)) | (1 << (MariaDBParser.SUBDATE - 1051)) | (1 << (MariaDBParser.SUBSTRING_INDEX - 1051)) | (1 << (MariaDBParser.SUBTIME - 1051)))) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & ((1 << (MariaDBParser.SYSTEM_USER - 1083)) | (1 << (MariaDBParser.TAN - 1083)) | (1 << (MariaDBParser.TIMEDIFF - 1083)) | (1 << (MariaDBParser.TIMESTAMPADD - 1083)) | (1 << (MariaDBParser.TIMESTAMPDIFF - 1083)) | (1 << (MariaDBParser.TIME_FORMAT - 1083)) | (1 << (MariaDBParser.TIME_TO_SEC - 1083)) | (1 << (MariaDBParser.TOUCHES - 1083)) | (1 << (MariaDBParser.TO_BASE64 - 1083)) | (1 << (MariaDBParser.TO_DAYS - 1083)) | (1 << (MariaDBParser.TO_SECONDS - 1083)) | (1 << (MariaDBParser.UCASE - 1083)) | (1 << (MariaDBParser.UNCOMPRESS - 1083)) | (1 << (MariaDBParser.UNCOMPRESSED_LENGTH - 1083)) | (1 << (MariaDBParser.UNHEX - 1083)) | (1 << (MariaDBParser.UNIX_TIMESTAMP - 1083)) | (1 << (MariaDBParser.UPDATEXML - 1083)) | (1 << (MariaDBParser.UPPER - 1083)) | (1 << (MariaDBParser.UUID - 1083)) | (1 << (MariaDBParser.UUID_SHORT - 1083)) | (1 << (MariaDBParser.VALIDATE_PASSWORD_STRENGTH - 1083)) | (1 << (MariaDBParser.VERSION - 1083)) | (1 << (MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1083)) | (1 << (MariaDBParser.WEEKDAY - 1083)) | (1 << (MariaDBParser.WEEKOFYEAR - 1083)) | (1 << (MariaDBParser.WEIGHT_STRING - 1083)) | (1 << (MariaDBParser.WITHIN - 1083)) | (1 << (MariaDBParser.YEARWEEK - 1083)) | (1 << (MariaDBParser.Y_FUNCTION - 1083)) | (1 << (MariaDBParser.X_FUNCTION - 1083)) | (1 << (MariaDBParser.VIA - 1083)) | (1 << (MariaDBParser.LASTVAL - 1083)))) !== 0) || ((((_la - 1115)) & ~0x1F) === 0 && ((1 << (_la - 1115)) & ((1 << (MariaDBParser.NEXTVAL - 1115)) | (1 << (MariaDBParser.SETVAL - 1115)) | (1 << (MariaDBParser.PREVIOUS - 1115)) | (1 << (MariaDBParser.PERSISTENT - 1115)) | (1 << (MariaDBParser.BINLOG_MONITOR - 1115)) | (1 << (MariaDBParser.BINLOG_REPLAY - 1115)) | (1 << (MariaDBParser.FEDERATED_ADMIN - 1115)) | (1 << (MariaDBParser.READ_ONLY_ADMIN - 1115)) | (1 << (MariaDBParser.REPLICA - 1115)) | (1 << (MariaDBParser.REPLICAS - 1115)) | (1 << (MariaDBParser.REPLICATION_MASTER_ADMIN - 1115)) | (1 << (MariaDBParser.MONITOR - 1115)) | (1 << (MariaDBParser.READ_ONLY - 1115)) | (1 << (MariaDBParser.REPLAY - 1115)) | (1 << (MariaDBParser.MOD - 1115)))) !== 0) || ((((_la - 1166)) & ~0x1F) === 0 && ((1 << (_la - 1166)) & ((1 << (MariaDBParser.CHARSET_REVERSE_QOUTE_STRING - 1166)) | (1 << (MariaDBParser.STRING_LITERAL - 1166)) | (1 << (MariaDBParser.ID - 1166)))) !== 0)) {
				{
				this.state = 4917;
				this.uid();
				this.state = 4918;
				this.match(MariaDBParser.COLON_SYMB);
				}
			}

			this.state = 4922;
			this.match(MariaDBParser.LOOP);
			this.state = 4924;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4923;
					this.procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4926;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 726, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 4928;
			this.match(MariaDBParser.END);
			this.state = 4929;
			this.match(MariaDBParser.LOOP);
			this.state = 4931;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MariaDBParser.ATTRIBUTE) | (1 << MariaDBParser.BODY) | (1 << MariaDBParser.BUCKETS) | (1 << MariaDBParser.CONDITION))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (MariaDBParser.CURRENT - 36)) | (1 << (MariaDBParser.CURRENT_ROLE - 36)) | (1 << (MariaDBParser.CURRENT_USER - 36)) | (1 << (MariaDBParser.DATABASE - 36)) | (1 << (MariaDBParser.DEFAULT - 36)) | (1 << (MariaDBParser.DIAGNOSTICS - 36)) | (1 << (MariaDBParser.EMPTY - 36)) | (1 << (MariaDBParser.EXCEPT - 36)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (MariaDBParser.GROUP - 73)) | (1 << (MariaDBParser.IF - 73)) | (1 << (MariaDBParser.IGNORED - 73)) | (1 << (MariaDBParser.INSERT - 73)) | (1 << (MariaDBParser.LATERAL - 73)) | (1 << (MariaDBParser.LEFT - 73)) | (1 << (MariaDBParser.LOCKED - 73)))) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & ((1 << (MariaDBParser.MAXVALUE - 110)) | (1 << (MariaDBParser.MINVALUE - 110)) | (1 << (MariaDBParser.NUMBER - 110)) | (1 << (MariaDBParser.OPTIONAL - 110)) | (1 << (MariaDBParser.ORDER - 110)) | (1 << (MariaDBParser.PRIMARY - 110)) | (1 << (MariaDBParser.PACKAGE - 110)))) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (MariaDBParser.REPLACE - 142)) | (1 << (MariaDBParser.RIGHT - 142)) | (1 << (MariaDBParser.SCHEMA - 142)) | (1 << (MariaDBParser.SKIP_ - 142)) | (1 << (MariaDBParser.STACKED - 142)) | (1 << (MariaDBParser.STATEMENT - 142)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MariaDBParser.DATE - 217)) | (1 << (MariaDBParser.TIME - 217)) | (1 << (MariaDBParser.TIMESTAMP - 217)) | (1 << (MariaDBParser.DATETIME - 217)) | (1 << (MariaDBParser.YEAR - 217)) | (1 << (MariaDBParser.BINARY - 217)) | (1 << (MariaDBParser.TEXT - 217)) | (1 << (MariaDBParser.ENUM - 217)) | (1 << (MariaDBParser.SERIAL - 217)))) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & ((1 << (MariaDBParser.JSON_ARRAY - 251)) | (1 << (MariaDBParser.JSON_ARRAYAGG - 251)) | (1 << (MariaDBParser.JSON_ARRAY_APPEND - 251)) | (1 << (MariaDBParser.JSON_ARRAY_INSERT - 251)) | (1 << (MariaDBParser.JSON_CONTAINS - 251)) | (1 << (MariaDBParser.JSON_CONTAINS_PATH - 251)) | (1 << (MariaDBParser.JSON_DEPTH - 251)) | (1 << (MariaDBParser.JSON_EXTRACT - 251)) | (1 << (MariaDBParser.JSON_INSERT - 251)) | (1 << (MariaDBParser.JSON_KEYS - 251)) | (1 << (MariaDBParser.JSON_LENGTH - 251)) | (1 << (MariaDBParser.JSON_MERGE - 251)) | (1 << (MariaDBParser.JSON_MERGE_PATCH - 251)) | (1 << (MariaDBParser.JSON_MERGE_PRESERVE - 251)) | (1 << (MariaDBParser.JSON_OBJECT - 251)) | (1 << (MariaDBParser.JSON_OBJECTAGG - 251)) | (1 << (MariaDBParser.JSON_OVERLAPS - 251)) | (1 << (MariaDBParser.JSON_PRETTY - 251)) | (1 << (MariaDBParser.JSON_QUOTE - 251)) | (1 << (MariaDBParser.JSON_REMOVE - 251)) | (1 << (MariaDBParser.JSON_REPLACE - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALID - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT - 251)) | (1 << (MariaDBParser.JSON_SEARCH - 251)) | (1 << (MariaDBParser.JSON_SET - 251)) | (1 << (MariaDBParser.JSON_STORAGE_FREE - 251)) | (1 << (MariaDBParser.JSON_STORAGE_SIZE - 251)) | (1 << (MariaDBParser.JSON_TABLE - 251)) | (1 << (MariaDBParser.JSON_TYPE - 251)) | (1 << (MariaDBParser.JSON_UNQUOTE - 251)) | (1 << (MariaDBParser.JSON_VALID - 251)) | (1 << (MariaDBParser.JSON_VALUE - 251)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (MariaDBParser.NESTED - 283)) | (1 << (MariaDBParser.ORDINALITY - 283)) | (1 << (MariaDBParser.PATH - 283)) | (1 << (MariaDBParser.AVG - 283)) | (1 << (MariaDBParser.BIT_AND - 283)) | (1 << (MariaDBParser.BIT_OR - 283)) | (1 << (MariaDBParser.BIT_XOR - 283)) | (1 << (MariaDBParser.COUNT - 283)) | (1 << (MariaDBParser.CUME_DIST - 283)) | (1 << (MariaDBParser.DENSE_RANK - 283)) | (1 << (MariaDBParser.FIRST_VALUE - 283)) | (1 << (MariaDBParser.GROUP_CONCAT - 283)) | (1 << (MariaDBParser.LAG - 283)) | (1 << (MariaDBParser.LAST_VALUE - 283)) | (1 << (MariaDBParser.LEAD - 283)) | (1 << (MariaDBParser.MAX - 283)) | (1 << (MariaDBParser.MIN - 283)) | (1 << (MariaDBParser.NTILE - 283)) | (1 << (MariaDBParser.NTH_VALUE - 283)) | (1 << (MariaDBParser.PERCENT_RANK - 283)) | (1 << (MariaDBParser.RANK - 283)) | (1 << (MariaDBParser.ROW_NUMBER - 283)) | (1 << (MariaDBParser.STD - 283)) | (1 << (MariaDBParser.STDDEV - 283)) | (1 << (MariaDBParser.STDDEV_POP - 283)) | (1 << (MariaDBParser.STDDEV_SAMP - 283)) | (1 << (MariaDBParser.SUM - 283)) | (1 << (MariaDBParser.VAR_POP - 283)) | (1 << (MariaDBParser.VAR_SAMP - 283)) | (1 << (MariaDBParser.VARIANCE - 283)) | (1 << (MariaDBParser.CURRENT_DATE - 283)) | (1 << (MariaDBParser.CURRENT_TIME - 283)))) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & ((1 << (MariaDBParser.CURRENT_TIMESTAMP - 315)) | (1 << (MariaDBParser.LOCALTIME - 315)) | (1 << (MariaDBParser.CURDATE - 315)) | (1 << (MariaDBParser.CURTIME - 315)) | (1 << (MariaDBParser.DATE_ADD - 315)) | (1 << (MariaDBParser.DATE_SUB - 315)) | (1 << (MariaDBParser.LOCALTIMESTAMP - 315)) | (1 << (MariaDBParser.NOW - 315)) | (1 << (MariaDBParser.POSITION - 315)) | (1 << (MariaDBParser.SUBSTR - 315)) | (1 << (MariaDBParser.SUBSTRING - 315)) | (1 << (MariaDBParser.SYSDATE - 315)) | (1 << (MariaDBParser.TRIM - 315)) | (1 << (MariaDBParser.UTC_DATE - 315)) | (1 << (MariaDBParser.UTC_TIME - 315)) | (1 << (MariaDBParser.UTC_TIMESTAMP - 315)) | (1 << (MariaDBParser.ACCOUNT - 315)) | (1 << (MariaDBParser.ACTION - 315)) | (1 << (MariaDBParser.AFTER - 315)) | (1 << (MariaDBParser.AGGREGATE - 315)) | (1 << (MariaDBParser.ALGORITHM - 315)) | (1 << (MariaDBParser.ANY - 315)) | (1 << (MariaDBParser.AT - 315)) | (1 << (MariaDBParser.AUTHORS - 315)) | (1 << (MariaDBParser.AUTOCOMMIT - 315)) | (1 << (MariaDBParser.AUTOEXTEND_SIZE - 315)) | (1 << (MariaDBParser.AUTO_INCREMENT - 315)) | (1 << (MariaDBParser.AVG_ROW_LENGTH - 315)) | (1 << (MariaDBParser.BEGIN - 315)) | (1 << (MariaDBParser.BINLOG - 315)) | (1 << (MariaDBParser.BIT - 315)))) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & ((1 << (MariaDBParser.BLOCK - 347)) | (1 << (MariaDBParser.BOOL - 347)) | (1 << (MariaDBParser.BOOLEAN - 347)) | (1 << (MariaDBParser.BTREE - 347)) | (1 << (MariaDBParser.CACHE - 347)) | (1 << (MariaDBParser.CASCADED - 347)) | (1 << (MariaDBParser.CHAIN - 347)) | (1 << (MariaDBParser.CHANGED - 347)) | (1 << (MariaDBParser.CHANNEL - 347)) | (1 << (MariaDBParser.CHECKSUM - 347)) | (1 << (MariaDBParser.PAGE_CHECKSUM - 347)) | (1 << (MariaDBParser.CIPHER - 347)) | (1 << (MariaDBParser.CLASS_ORIGIN - 347)) | (1 << (MariaDBParser.CLIENT - 347)) | (1 << (MariaDBParser.CLOSE - 347)) | (1 << (MariaDBParser.CLUSTERING - 347)) | (1 << (MariaDBParser.COALESCE - 347)) | (1 << (MariaDBParser.CODE - 347)) | (1 << (MariaDBParser.COLUMNS - 347)) | (1 << (MariaDBParser.COLUMN_FORMAT - 347)) | (1 << (MariaDBParser.COLUMN_NAME - 347)) | (1 << (MariaDBParser.COMMENT - 347)) | (1 << (MariaDBParser.COMMIT - 347)) | (1 << (MariaDBParser.COMPACT - 347)) | (1 << (MariaDBParser.COMPLETION - 347)) | (1 << (MariaDBParser.COMPRESSED - 347)) | (1 << (MariaDBParser.COMPRESSION - 347)) | (1 << (MariaDBParser.CONCURRENT - 347)) | (1 << (MariaDBParser.CONNECT - 347)) | (1 << (MariaDBParser.CONNECTION - 347)) | (1 << (MariaDBParser.CONSISTENT - 347)) | (1 << (MariaDBParser.CONSTRAINT_CATALOG - 347)))) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & ((1 << (MariaDBParser.CONSTRAINT_SCHEMA - 379)) | (1 << (MariaDBParser.CONSTRAINT_NAME - 379)) | (1 << (MariaDBParser.CONTAINS - 379)) | (1 << (MariaDBParser.CONTEXT - 379)) | (1 << (MariaDBParser.CONTRIBUTORS - 379)) | (1 << (MariaDBParser.COPY - 379)) | (1 << (MariaDBParser.CPU - 379)) | (1 << (MariaDBParser.CYCLE - 379)) | (1 << (MariaDBParser.CURSOR_NAME - 379)) | (1 << (MariaDBParser.DATA - 379)) | (1 << (MariaDBParser.DATAFILE - 379)) | (1 << (MariaDBParser.DEALLOCATE - 379)) | (1 << (MariaDBParser.DEFAULT_AUTH - 379)) | (1 << (MariaDBParser.DEFINER - 379)) | (1 << (MariaDBParser.DELAY_KEY_WRITE - 379)) | (1 << (MariaDBParser.DES_KEY_FILE - 379)) | (1 << (MariaDBParser.DIRECTORY - 379)) | (1 << (MariaDBParser.DISABLE - 379)) | (1 << (MariaDBParser.DISCARD - 379)) | (1 << (MariaDBParser.DISK - 379)) | (1 << (MariaDBParser.DO - 379)) | (1 << (MariaDBParser.DUMPFILE - 379)) | (1 << (MariaDBParser.DUPLICATE - 379)) | (1 << (MariaDBParser.DYNAMIC - 379)) | (1 << (MariaDBParser.ENABLE - 379)) | (1 << (MariaDBParser.ENCRYPTED - 379)) | (1 << (MariaDBParser.ENCRYPTION - 379)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ID - 379)) | (1 << (MariaDBParser.END - 379)) | (1 << (MariaDBParser.ENDS - 379)) | (1 << (MariaDBParser.ENGINE - 379)) | (1 << (MariaDBParser.ENGINES - 379)))) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & ((1 << (MariaDBParser.ERROR - 411)) | (1 << (MariaDBParser.ERRORS - 411)) | (1 << (MariaDBParser.ESCAPE - 411)) | (1 << (MariaDBParser.EVEN - 411)) | (1 << (MariaDBParser.EVENT - 411)) | (1 << (MariaDBParser.EVENTS - 411)) | (1 << (MariaDBParser.EVERY - 411)) | (1 << (MariaDBParser.EXCHANGE - 411)) | (1 << (MariaDBParser.EXCLUSIVE - 411)) | (1 << (MariaDBParser.EXPIRE - 411)) | (1 << (MariaDBParser.EXPORT - 411)) | (1 << (MariaDBParser.EXTENDED - 411)) | (1 << (MariaDBParser.EXTENT_SIZE - 411)) | (1 << (MariaDBParser.FAILED_LOGIN_ATTEMPTS - 411)) | (1 << (MariaDBParser.FAST - 411)) | (1 << (MariaDBParser.FAULTS - 411)) | (1 << (MariaDBParser.FIELDS - 411)) | (1 << (MariaDBParser.FILE_BLOCK_SIZE - 411)) | (1 << (MariaDBParser.FILTER - 411)) | (1 << (MariaDBParser.FIRST - 411)) | (1 << (MariaDBParser.FIXED - 411)) | (1 << (MariaDBParser.FLUSH - 411)) | (1 << (MariaDBParser.FOLLOWS - 411)) | (1 << (MariaDBParser.FOUND - 411)) | (1 << (MariaDBParser.FULL - 411)) | (1 << (MariaDBParser.FUNCTION - 411)) | (1 << (MariaDBParser.GENERAL - 411)) | (1 << (MariaDBParser.GLOBAL - 411)) | (1 << (MariaDBParser.GRANTS - 411)) | (1 << (MariaDBParser.GROUP_REPLICATION - 411)) | (1 << (MariaDBParser.HANDLER - 411)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (MariaDBParser.HASH - 443)) | (1 << (MariaDBParser.HELP - 443)) | (1 << (MariaDBParser.HISTORY - 443)) | (1 << (MariaDBParser.HOST - 443)) | (1 << (MariaDBParser.HOSTS - 443)) | (1 << (MariaDBParser.IDENTIFIED - 443)) | (1 << (MariaDBParser.IGNORE_SERVER_IDS - 443)) | (1 << (MariaDBParser.IMPORT - 443)) | (1 << (MariaDBParser.INCREMENT - 443)) | (1 << (MariaDBParser.INDEXES - 443)) | (1 << (MariaDBParser.INITIAL_SIZE - 443)) | (1 << (MariaDBParser.INPLACE - 443)) | (1 << (MariaDBParser.INSERT_METHOD - 443)) | (1 << (MariaDBParser.INSTALL - 443)) | (1 << (MariaDBParser.INSTANCE - 443)) | (1 << (MariaDBParser.INSTANT - 443)) | (1 << (MariaDBParser.INVISIBLE - 443)) | (1 << (MariaDBParser.INVOKER - 443)) | (1 << (MariaDBParser.IO - 443)) | (1 << (MariaDBParser.IO_THREAD - 443)) | (1 << (MariaDBParser.IPC - 443)) | (1 << (MariaDBParser.ISOLATION - 443)) | (1 << (MariaDBParser.ISSUER - 443)) | (1 << (MariaDBParser.JSON - 443)) | (1 << (MariaDBParser.KEY_BLOCK_SIZE - 443)) | (1 << (MariaDBParser.LANGUAGE - 443)) | (1 << (MariaDBParser.LAST - 443)) | (1 << (MariaDBParser.LEAVES - 443)) | (1 << (MariaDBParser.LESS - 443)) | (1 << (MariaDBParser.LEVEL - 443)) | (1 << (MariaDBParser.LIST - 443)) | (1 << (MariaDBParser.LOCAL - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (MariaDBParser.LOCALES - 475)) | (1 << (MariaDBParser.LOGFILE - 475)) | (1 << (MariaDBParser.LOGS - 475)) | (1 << (MariaDBParser.MASTER - 475)) | (1 << (MariaDBParser.MASTER_AUTO_POSITION - 475)) | (1 << (MariaDBParser.MASTER_CONNECT_RETRY - 475)) | (1 << (MariaDBParser.MASTER_DELAY - 475)) | (1 << (MariaDBParser.MASTER_HEARTBEAT_PERIOD - 475)) | (1 << (MariaDBParser.MASTER_HOST - 475)) | (1 << (MariaDBParser.MASTER_LOG_FILE - 475)) | (1 << (MariaDBParser.MASTER_LOG_POS - 475)) | (1 << (MariaDBParser.MASTER_PASSWORD - 475)) | (1 << (MariaDBParser.MASTER_PORT - 475)) | (1 << (MariaDBParser.MASTER_RETRY_COUNT - 475)) | (1 << (MariaDBParser.MASTER_SSL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CA - 475)) | (1 << (MariaDBParser.MASTER_SSL_CAPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_CERT - 475)) | (1 << (MariaDBParser.MASTER_SSL_CIPHER - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRLPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_KEY - 475)) | (1 << (MariaDBParser.MASTER_TLS_VERSION - 475)) | (1 << (MariaDBParser.MASTER_USER - 475)) | (1 << (MariaDBParser.MAX_CONNECTIONS_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_QUERIES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_ROWS - 475)) | (1 << (MariaDBParser.MAX_SIZE - 475)) | (1 << (MariaDBParser.MAX_UPDATES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_USER_CONNECTIONS - 475)) | (1 << (MariaDBParser.MEDIUM - 475)) | (1 << (MariaDBParser.MEMBER - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (MariaDBParser.MERGE - 507)) | (1 << (MariaDBParser.MESSAGE_TEXT - 507)) | (1 << (MariaDBParser.MID - 507)) | (1 << (MariaDBParser.MIGRATE - 507)) | (1 << (MariaDBParser.MIN_ROWS - 507)) | (1 << (MariaDBParser.MODE - 507)) | (1 << (MariaDBParser.MODIFY - 507)) | (1 << (MariaDBParser.MUTEX - 507)) | (1 << (MariaDBParser.MYSQL - 507)) | (1 << (MariaDBParser.MYSQL_ERRNO - 507)) | (1 << (MariaDBParser.NAME - 507)) | (1 << (MariaDBParser.NAMES - 507)) | (1 << (MariaDBParser.NCHAR - 507)) | (1 << (MariaDBParser.NEVER - 507)) | (1 << (MariaDBParser.NEXT - 507)) | (1 << (MariaDBParser.NO - 507)) | (1 << (MariaDBParser.NOCACHE - 507)) | (1 << (MariaDBParser.NOCOPY - 507)) | (1 << (MariaDBParser.NOCYCLE - 507)) | (1 << (MariaDBParser.NOMAXVALUE - 507)) | (1 << (MariaDBParser.NOMINVALUE - 507)) | (1 << (MariaDBParser.NOWAIT - 507)) | (1 << (MariaDBParser.NODEGROUP - 507)) | (1 << (MariaDBParser.NONE - 507)) | (1 << (MariaDBParser.ODBC - 507)) | (1 << (MariaDBParser.OFFLINE - 507)) | (1 << (MariaDBParser.OFFSET - 507)) | (1 << (MariaDBParser.OF - 507)) | (1 << (MariaDBParser.OJ - 507)) | (1 << (MariaDBParser.OLD_PASSWORD - 507)) | (1 << (MariaDBParser.ONE - 507)) | (1 << (MariaDBParser.ONLINE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (MariaDBParser.ONLY - 539)) | (1 << (MariaDBParser.OPEN - 539)) | (1 << (MariaDBParser.OPTIMIZER_COSTS - 539)) | (1 << (MariaDBParser.OPTIONS - 539)) | (1 << (MariaDBParser.OWNER - 539)) | (1 << (MariaDBParser.PACK_KEYS - 539)) | (1 << (MariaDBParser.PAGE - 539)) | (1 << (MariaDBParser.PARSER - 539)) | (1 << (MariaDBParser.PARTIAL - 539)) | (1 << (MariaDBParser.PARTITIONING - 539)) | (1 << (MariaDBParser.PARTITIONS - 539)) | (1 << (MariaDBParser.PASSWORD - 539)) | (1 << (MariaDBParser.PASSWORD_LOCK_TIME - 539)) | (1 << (MariaDBParser.PHASE - 539)) | (1 << (MariaDBParser.PLUGIN - 539)) | (1 << (MariaDBParser.PLUGIN_DIR - 539)) | (1 << (MariaDBParser.PLUGINS - 539)) | (1 << (MariaDBParser.PORT - 539)) | (1 << (MariaDBParser.PRECEDES - 539)) | (1 << (MariaDBParser.PREPARE - 539)) | (1 << (MariaDBParser.PRESERVE - 539)) | (1 << (MariaDBParser.PREV - 539)) | (1 << (MariaDBParser.PROCESSLIST - 539)) | (1 << (MariaDBParser.PROFILE - 539)) | (1 << (MariaDBParser.PROFILES - 539)) | (1 << (MariaDBParser.PROXY - 539)) | (1 << (MariaDBParser.QUERY - 539)) | (1 << (MariaDBParser.QUERY_RESPONSE_TIME - 539)) | (1 << (MariaDBParser.QUICK - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (MariaDBParser.REBUILD - 571)) | (1 << (MariaDBParser.RECOVER - 571)) | (1 << (MariaDBParser.RECURSIVE - 571)) | (1 << (MariaDBParser.REDO_BUFFER_SIZE - 571)) | (1 << (MariaDBParser.REDUNDANT - 571)) | (1 << (MariaDBParser.RELAY - 571)) | (1 << (MariaDBParser.RELAY_LOG_FILE - 571)) | (1 << (MariaDBParser.RELAY_LOG_POS - 571)) | (1 << (MariaDBParser.RELAYLOG - 571)) | (1 << (MariaDBParser.REMOVE - 571)) | (1 << (MariaDBParser.REORGANIZE - 571)) | (1 << (MariaDBParser.REPAIR - 571)) | (1 << (MariaDBParser.REPLICATE_DO_DB - 571)) | (1 << (MariaDBParser.REPLICATE_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_REWRITE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATION - 571)) | (1 << (MariaDBParser.RESET - 571)) | (1 << (MariaDBParser.RESTART - 571)) | (1 << (MariaDBParser.RESUME - 571)) | (1 << (MariaDBParser.RETURNED_SQLSTATE - 571)) | (1 << (MariaDBParser.RETURNS - 571)) | (1 << (MariaDBParser.REUSE - 571)) | (1 << (MariaDBParser.ROLE - 571)) | (1 << (MariaDBParser.ROLLBACK - 571)) | (1 << (MariaDBParser.ROLLUP - 571)) | (1 << (MariaDBParser.ROTATE - 571)) | (1 << (MariaDBParser.ROW - 571)))) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & ((1 << (MariaDBParser.ROWS - 603)) | (1 << (MariaDBParser.ROW_FORMAT - 603)) | (1 << (MariaDBParser.RTREE - 603)) | (1 << (MariaDBParser.SAVEPOINT - 603)) | (1 << (MariaDBParser.SCHEDULE - 603)) | (1 << (MariaDBParser.SECURITY - 603)) | (1 << (MariaDBParser.SEQUENCE - 603)) | (1 << (MariaDBParser.SERVER - 603)) | (1 << (MariaDBParser.SESSION - 603)) | (1 << (MariaDBParser.SHARE - 603)) | (1 << (MariaDBParser.SHARED - 603)) | (1 << (MariaDBParser.SIGNED - 603)) | (1 << (MariaDBParser.SIMPLE - 603)) | (1 << (MariaDBParser.SLAVE - 603)) | (1 << (MariaDBParser.SLAVES - 603)) | (1 << (MariaDBParser.SLOW - 603)) | (1 << (MariaDBParser.SNAPSHOT - 603)) | (1 << (MariaDBParser.SOCKET - 603)) | (1 << (MariaDBParser.SOME - 603)) | (1 << (MariaDBParser.SONAME - 603)) | (1 << (MariaDBParser.SOUNDS - 603)) | (1 << (MariaDBParser.SOURCE - 603)) | (1 << (MariaDBParser.SQL_AFTER_GTIDS - 603)) | (1 << (MariaDBParser.SQL_AFTER_MTS_GAPS - 603)) | (1 << (MariaDBParser.SQL_BEFORE_GTIDS - 603)) | (1 << (MariaDBParser.SQL_BUFFER_RESULT - 603)) | (1 << (MariaDBParser.SQL_CACHE - 603)) | (1 << (MariaDBParser.SQL_NO_CACHE - 603)) | (1 << (MariaDBParser.SQL_THREAD - 603)) | (1 << (MariaDBParser.START - 603)) | (1 << (MariaDBParser.STARTS - 603)) | (1 << (MariaDBParser.STATS_AUTO_RECALC - 603)))) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & ((1 << (MariaDBParser.STATS_PERSISTENT - 635)) | (1 << (MariaDBParser.STATS_SAMPLE_PAGES - 635)) | (1 << (MariaDBParser.STATUS - 635)) | (1 << (MariaDBParser.STOP - 635)) | (1 << (MariaDBParser.STORAGE - 635)) | (1 << (MariaDBParser.STRING - 635)) | (1 << (MariaDBParser.SUBCLASS_ORIGIN - 635)) | (1 << (MariaDBParser.SUBJECT - 635)) | (1 << (MariaDBParser.SUBPARTITION - 635)) | (1 << (MariaDBParser.SUBPARTITIONS - 635)) | (1 << (MariaDBParser.SUSPEND - 635)) | (1 << (MariaDBParser.SWAPS - 635)) | (1 << (MariaDBParser.SWITCHES - 635)) | (1 << (MariaDBParser.TABLE_NAME - 635)) | (1 << (MariaDBParser.TABLESPACE - 635)) | (1 << (MariaDBParser.TABLE_TYPE - 635)) | (1 << (MariaDBParser.TEMPORARY - 635)) | (1 << (MariaDBParser.TEMPTABLE - 635)) | (1 << (MariaDBParser.THAN - 635)) | (1 << (MariaDBParser.TRADITIONAL - 635)) | (1 << (MariaDBParser.TRANSACTION - 635)) | (1 << (MariaDBParser.TRANSACTIONAL - 635)) | (1 << (MariaDBParser.TRIGGERS - 635)) | (1 << (MariaDBParser.TRUNCATE - 635)) | (1 << (MariaDBParser.TYPES - 635)) | (1 << (MariaDBParser.UNBOUNDED - 635)) | (1 << (MariaDBParser.UNDEFINED - 635)) | (1 << (MariaDBParser.UNDOFILE - 635)) | (1 << (MariaDBParser.UNDO_BUFFER_SIZE - 635)) | (1 << (MariaDBParser.UNINSTALL - 635)) | (1 << (MariaDBParser.UNKNOWN - 635)))) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & ((1 << (MariaDBParser.UNTIL - 667)) | (1 << (MariaDBParser.UPGRADE - 667)) | (1 << (MariaDBParser.USER - 667)) | (1 << (MariaDBParser.USE_FRM - 667)) | (1 << (MariaDBParser.USER_RESOURCES - 667)) | (1 << (MariaDBParser.VALIDATION - 667)) | (1 << (MariaDBParser.VALUE - 667)) | (1 << (MariaDBParser.VARIABLES - 667)) | (1 << (MariaDBParser.VIEW - 667)) | (1 << (MariaDBParser.VIRTUAL - 667)) | (1 << (MariaDBParser.VISIBLE - 667)) | (1 << (MariaDBParser.WAIT - 667)) | (1 << (MariaDBParser.WARNINGS - 667)) | (1 << (MariaDBParser.WITHOUT - 667)) | (1 << (MariaDBParser.WORK - 667)) | (1 << (MariaDBParser.WRAPPER - 667)) | (1 << (MariaDBParser.WSREP_MEMBERSHIP - 667)) | (1 << (MariaDBParser.WSREP_STATUS - 667)) | (1 << (MariaDBParser.X509 - 667)) | (1 << (MariaDBParser.XA - 667)) | (1 << (MariaDBParser.XML - 667)) | (1 << (MariaDBParser.EUR - 667)) | (1 << (MariaDBParser.USA - 667)) | (1 << (MariaDBParser.JIS - 667)) | (1 << (MariaDBParser.ISO - 667)) | (1 << (MariaDBParser.INTERNAL - 667)) | (1 << (MariaDBParser.QUARTER - 667)) | (1 << (MariaDBParser.MONTH - 667)) | (1 << (MariaDBParser.DAY - 667)) | (1 << (MariaDBParser.HOUR - 667)))) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & ((1 << (MariaDBParser.MINUTE - 699)) | (1 << (MariaDBParser.WEEK - 699)) | (1 << (MariaDBParser.SECOND - 699)) | (1 << (MariaDBParser.MICROSECOND - 699)) | (1 << (MariaDBParser.USER_STATISTICS - 699)) | (1 << (MariaDBParser.CLIENT_STATISTICS - 699)) | (1 << (MariaDBParser.INDEX_STATISTICS - 699)) | (1 << (MariaDBParser.TABLE_STATISTICS - 699)) | (1 << (MariaDBParser.ADMIN - 699)) | (1 << (MariaDBParser.AUDIT_ADMIN - 699)) | (1 << (MariaDBParser.BACKUP_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ENCRYPTION_ADMIN - 699)) | (1 << (MariaDBParser.CLONE_ADMIN - 699)) | (1 << (MariaDBParser.CONNECTION_ADMIN - 699)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ADMIN - 699)) | (1 << (MariaDBParser.EXECUTE - 699)) | (1 << (MariaDBParser.FILE - 699)) | (1 << (MariaDBParser.FIREWALL_ADMIN - 699)) | (1 << (MariaDBParser.FIREWALL_USER - 699)) | (1 << (MariaDBParser.GROUP_REPLICATION_ADMIN - 699)) | (1 << (MariaDBParser.INNODB_REDO_LOG_ARCHIVE - 699)) | (1 << (MariaDBParser.INVOKE - 699)) | (1 << (MariaDBParser.LAMBDA - 699)) | (1 << (MariaDBParser.NDB_STORED_USER - 699)) | (1 << (MariaDBParser.PASSWORDLESS_USER_ADMIN - 699)))) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & ((1 << (MariaDBParser.PERSIST_RO_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.PRIVILEGES - 731)) | (1 << (MariaDBParser.PROCESS - 731)) | (1 << (MariaDBParser.RELOAD - 731)) | (1 << (MariaDBParser.REPLICATION_APPLIER - 731)) | (1 << (MariaDBParser.REPLICATION_SLAVE_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_USER - 731)) | (1 << (MariaDBParser.ROLE_ADMIN - 731)) | (1 << (MariaDBParser.ROUTINE - 731)) | (1 << (MariaDBParser.S3 - 731)) | (1 << (MariaDBParser.SESSION_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.SET_USER_ID - 731)) | (1 << (MariaDBParser.SHOW_ROUTINE - 731)) | (1 << (MariaDBParser.SHUTDOWN - 731)) | (1 << (MariaDBParser.SUPER - 731)) | (1 << (MariaDBParser.SYSTEM_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.TABLES - 731)) | (1 << (MariaDBParser.TABLE_ENCRYPTION_ADMIN - 731)) | (1 << (MariaDBParser.VERSION_TOKEN_ADMIN - 731)) | (1 << (MariaDBParser.XA_RECOVER_ADMIN - 731)) | (1 << (MariaDBParser.ARMSCII8 - 731)) | (1 << (MariaDBParser.ASCII - 731)) | (1 << (MariaDBParser.BIG5 - 731)) | (1 << (MariaDBParser.CP1250 - 731)) | (1 << (MariaDBParser.CP1251 - 731)) | (1 << (MariaDBParser.CP1256 - 731)) | (1 << (MariaDBParser.CP1257 - 731)) | (1 << (MariaDBParser.CP850 - 731)) | (1 << (MariaDBParser.CP852 - 731)) | (1 << (MariaDBParser.CP866 - 731)))) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & ((1 << (MariaDBParser.CP932 - 763)) | (1 << (MariaDBParser.DEC8 - 763)) | (1 << (MariaDBParser.EUCJPMS - 763)) | (1 << (MariaDBParser.EUCKR - 763)) | (1 << (MariaDBParser.GB18030 - 763)) | (1 << (MariaDBParser.GB2312 - 763)) | (1 << (MariaDBParser.GBK - 763)) | (1 << (MariaDBParser.GEOSTD8 - 763)) | (1 << (MariaDBParser.GREEK - 763)) | (1 << (MariaDBParser.HEBREW - 763)) | (1 << (MariaDBParser.HP8 - 763)) | (1 << (MariaDBParser.KEYBCS2 - 763)) | (1 << (MariaDBParser.KOI8R - 763)) | (1 << (MariaDBParser.KOI8U - 763)) | (1 << (MariaDBParser.LATIN1 - 763)) | (1 << (MariaDBParser.LATIN2 - 763)) | (1 << (MariaDBParser.LATIN5 - 763)) | (1 << (MariaDBParser.LATIN7 - 763)) | (1 << (MariaDBParser.MACCE - 763)) | (1 << (MariaDBParser.MACROMAN - 763)) | (1 << (MariaDBParser.SJIS - 763)) | (1 << (MariaDBParser.SWE7 - 763)) | (1 << (MariaDBParser.TIS620 - 763)) | (1 << (MariaDBParser.UCS2 - 763)) | (1 << (MariaDBParser.UJIS - 763)) | (1 << (MariaDBParser.UTF16 - 763)) | (1 << (MariaDBParser.UTF16LE - 763)) | (1 << (MariaDBParser.UTF32 - 763)) | (1 << (MariaDBParser.UTF8 - 763)) | (1 << (MariaDBParser.UTF8MB3 - 763)) | (1 << (MariaDBParser.UTF8MB4 - 763)) | (1 << (MariaDBParser.ARCHIVE - 763)))) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & ((1 << (MariaDBParser.BLACKHOLE - 795)) | (1 << (MariaDBParser.CSV - 795)) | (1 << (MariaDBParser.FEDERATED - 795)) | (1 << (MariaDBParser.INNODB - 795)) | (1 << (MariaDBParser.MEMORY - 795)) | (1 << (MariaDBParser.MRG_MYISAM - 795)) | (1 << (MariaDBParser.MYISAM - 795)) | (1 << (MariaDBParser.NDB - 795)) | (1 << (MariaDBParser.NDBCLUSTER - 795)) | (1 << (MariaDBParser.PERFORMANCE_SCHEMA - 795)) | (1 << (MariaDBParser.TOKUDB - 795)) | (1 << (MariaDBParser.REPEATABLE - 795)) | (1 << (MariaDBParser.COMMITTED - 795)) | (1 << (MariaDBParser.UNCOMMITTED - 795)) | (1 << (MariaDBParser.SERIALIZABLE - 795)) | (1 << (MariaDBParser.GEOMETRYCOLLECTION - 795)) | (1 << (MariaDBParser.LINESTRING - 795)) | (1 << (MariaDBParser.MULTILINESTRING - 795)) | (1 << (MariaDBParser.MULTIPOINT - 795)) | (1 << (MariaDBParser.MULTIPOLYGON - 795)) | (1 << (MariaDBParser.POINT - 795)) | (1 << (MariaDBParser.POLYGON - 795)) | (1 << (MariaDBParser.ABS - 795)) | (1 << (MariaDBParser.ACOS - 795)) | (1 << (MariaDBParser.ADDDATE - 795)) | (1 << (MariaDBParser.ADDTIME - 795)) | (1 << (MariaDBParser.AES_DECRYPT - 795)) | (1 << (MariaDBParser.AES_ENCRYPT - 795)) | (1 << (MariaDBParser.AREA - 795)) | (1 << (MariaDBParser.ASBINARY - 795)))) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & ((1 << (MariaDBParser.ASIN - 827)) | (1 << (MariaDBParser.ASTEXT - 827)) | (1 << (MariaDBParser.ASWKB - 827)) | (1 << (MariaDBParser.ASWKT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DECRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DERIVE - 827)) | (1 << (MariaDBParser.ASYMMETRIC_ENCRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_SIGN - 827)) | (1 << (MariaDBParser.ASYMMETRIC_VERIFY - 827)) | (1 << (MariaDBParser.ATAN - 827)) | (1 << (MariaDBParser.ATAN2 - 827)) | (1 << (MariaDBParser.BENCHMARK - 827)) | (1 << (MariaDBParser.BIN - 827)) | (1 << (MariaDBParser.BIT_COUNT - 827)) | (1 << (MariaDBParser.BIT_LENGTH - 827)) | (1 << (MariaDBParser.BUFFER - 827)) | (1 << (MariaDBParser.CATALOG_NAME - 827)) | (1 << (MariaDBParser.CEIL - 827)) | (1 << (MariaDBParser.CEILING - 827)) | (1 << (MariaDBParser.CENTROID - 827)) | (1 << (MariaDBParser.CHARACTER_LENGTH - 827)) | (1 << (MariaDBParser.CHARSET - 827)) | (1 << (MariaDBParser.CHAR_LENGTH - 827)) | (1 << (MariaDBParser.COERCIBILITY - 827)) | (1 << (MariaDBParser.COLLATION - 827)) | (1 << (MariaDBParser.COMPRESS - 827)) | (1 << (MariaDBParser.CONCAT - 827)) | (1 << (MariaDBParser.CONCAT_WS - 827)) | (1 << (MariaDBParser.CONNECTION_ID - 827)) | (1 << (MariaDBParser.CONV - 827)) | (1 << (MariaDBParser.CONVERT_TZ - 827)) | (1 << (MariaDBParser.COS - 827)))) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & ((1 << (MariaDBParser.COT - 859)) | (1 << (MariaDBParser.CRC32 - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY - 859)) | (1 << (MariaDBParser.CREATE_DH_PARAMETERS - 859)) | (1 << (MariaDBParser.CREATE_DIGEST - 859)) | (1 << (MariaDBParser.CROSSES - 859)) | (1 << (MariaDBParser.DATEDIFF - 859)) | (1 << (MariaDBParser.DATE_FORMAT - 859)) | (1 << (MariaDBParser.DAYNAME - 859)) | (1 << (MariaDBParser.DAYOFMONTH - 859)) | (1 << (MariaDBParser.DAYOFWEEK - 859)) | (1 << (MariaDBParser.DAYOFYEAR - 859)) | (1 << (MariaDBParser.DECODE - 859)) | (1 << (MariaDBParser.DEGREES - 859)) | (1 << (MariaDBParser.DES_DECRYPT - 859)) | (1 << (MariaDBParser.DES_ENCRYPT - 859)) | (1 << (MariaDBParser.DIMENSION - 859)) | (1 << (MariaDBParser.DISJOINT - 859)) | (1 << (MariaDBParser.ELT - 859)) | (1 << (MariaDBParser.ENCODE - 859)) | (1 << (MariaDBParser.ENCRYPT - 859)) | (1 << (MariaDBParser.ENDPOINT - 859)) | (1 << (MariaDBParser.ENGINE_ATTRIBUTE - 859)) | (1 << (MariaDBParser.ENVELOPE - 859)) | (1 << (MariaDBParser.EQUALS - 859)) | (1 << (MariaDBParser.EXP - 859)) | (1 << (MariaDBParser.EXPORT_SET - 859)) | (1 << (MariaDBParser.EXTERIORRING - 859)) | (1 << (MariaDBParser.EXTRACTVALUE - 859)) | (1 << (MariaDBParser.FIELD - 859)) | (1 << (MariaDBParser.FIND_IN_SET - 859)))) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & ((1 << (MariaDBParser.FLOOR - 891)) | (1 << (MariaDBParser.FORMAT - 891)) | (1 << (MariaDBParser.FOUND_ROWS - 891)) | (1 << (MariaDBParser.FROM_BASE64 - 891)) | (1 << (MariaDBParser.FROM_DAYS - 891)) | (1 << (MariaDBParser.FROM_UNIXTIME - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYN - 891)) | (1 << (MariaDBParser.GEOMETRYTYPE - 891)) | (1 << (MariaDBParser.GEOMFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMFROMWKB - 891)) | (1 << (MariaDBParser.GET_FORMAT - 891)) | (1 << (MariaDBParser.GET_LOCK - 891)) | (1 << (MariaDBParser.GLENGTH - 891)) | (1 << (MariaDBParser.GREATEST - 891)) | (1 << (MariaDBParser.GTID_SUBSET - 891)) | (1 << (MariaDBParser.GTID_SUBTRACT - 891)) | (1 << (MariaDBParser.HEX - 891)) | (1 << (MariaDBParser.IFNULL - 891)) | (1 << (MariaDBParser.INET6_ATON - 891)) | (1 << (MariaDBParser.INET6_NTOA - 891)) | (1 << (MariaDBParser.INET_ATON - 891)) | (1 << (MariaDBParser.INET_NTOA - 891)) | (1 << (MariaDBParser.INSTR - 891)) | (1 << (MariaDBParser.INTERIORRINGN - 891)) | (1 << (MariaDBParser.INTERSECTS - 891)) | (1 << (MariaDBParser.ISCLOSED - 891)))) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & ((1 << (MariaDBParser.ISEMPTY - 923)) | (1 << (MariaDBParser.ISNULL - 923)) | (1 << (MariaDBParser.ISSIMPLE - 923)) | (1 << (MariaDBParser.IS_FREE_LOCK - 923)) | (1 << (MariaDBParser.IS_IPV4 - 923)) | (1 << (MariaDBParser.IS_IPV4_COMPAT - 923)) | (1 << (MariaDBParser.IS_IPV4_MAPPED - 923)) | (1 << (MariaDBParser.IS_IPV6 - 923)) | (1 << (MariaDBParser.IS_USED_LOCK - 923)) | (1 << (MariaDBParser.LAST_INSERT_ID - 923)) | (1 << (MariaDBParser.LCASE - 923)) | (1 << (MariaDBParser.LEAST - 923)) | (1 << (MariaDBParser.LENGTH - 923)) | (1 << (MariaDBParser.LINEFROMTEXT - 923)) | (1 << (MariaDBParser.LINEFROMWKB - 923)) | (1 << (MariaDBParser.LINESTRINGFROMTEXT - 923)) | (1 << (MariaDBParser.LINESTRINGFROMWKB - 923)) | (1 << (MariaDBParser.LN - 923)) | (1 << (MariaDBParser.LOAD_FILE - 923)) | (1 << (MariaDBParser.LOCATE - 923)) | (1 << (MariaDBParser.LOG - 923)) | (1 << (MariaDBParser.LOG10 - 923)) | (1 << (MariaDBParser.LOG2 - 923)) | (1 << (MariaDBParser.LOWER - 923)) | (1 << (MariaDBParser.LPAD - 923)) | (1 << (MariaDBParser.LTRIM - 923)) | (1 << (MariaDBParser.MAKEDATE - 923)) | (1 << (MariaDBParser.MAKETIME - 923)) | (1 << (MariaDBParser.MAKE_SET - 923)) | (1 << (MariaDBParser.MASTER_POS_WAIT - 923)) | (1 << (MariaDBParser.MBRCONTAINS - 923)) | (1 << (MariaDBParser.MBRDISJOINT - 923)))) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & ((1 << (MariaDBParser.MBREQUAL - 955)) | (1 << (MariaDBParser.MBRINTERSECTS - 955)) | (1 << (MariaDBParser.MBROVERLAPS - 955)) | (1 << (MariaDBParser.MBRTOUCHES - 955)) | (1 << (MariaDBParser.MBRWITHIN - 955)) | (1 << (MariaDBParser.MD5 - 955)) | (1 << (MariaDBParser.MLINEFROMTEXT - 955)) | (1 << (MariaDBParser.MLINEFROMWKB - 955)) | (1 << (MariaDBParser.MONTHNAME - 955)) | (1 << (MariaDBParser.MPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MPOLYFROMTEXT - 955)) | (1 << (MariaDBParser.MPOLYFROMWKB - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMTEXT - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMWKB - 955)) | (1 << (MariaDBParser.NAME_CONST - 955)) | (1 << (MariaDBParser.NULLIF - 955)) | (1 << (MariaDBParser.NUMGEOMETRIES - 955)) | (1 << (MariaDBParser.NUMINTERIORRINGS - 955)) | (1 << (MariaDBParser.NUMPOINTS - 955)) | (1 << (MariaDBParser.OCT - 955)) | (1 << (MariaDBParser.OCTET_LENGTH - 955)) | (1 << (MariaDBParser.ORD - 955)) | (1 << (MariaDBParser.OVERLAPS - 955)) | (1 << (MariaDBParser.PERIOD_ADD - 955)) | (1 << (MariaDBParser.PERIOD_DIFF - 955)) | (1 << (MariaDBParser.PI - 955)) | (1 << (MariaDBParser.POINTFROMTEXT - 955)))) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & ((1 << (MariaDBParser.POINTFROMWKB - 987)) | (1 << (MariaDBParser.POINTN - 987)) | (1 << (MariaDBParser.POLYFROMTEXT - 987)) | (1 << (MariaDBParser.POLYFROMWKB - 987)) | (1 << (MariaDBParser.POLYGONFROMTEXT - 987)) | (1 << (MariaDBParser.POLYGONFROMWKB - 987)) | (1 << (MariaDBParser.POW - 987)) | (1 << (MariaDBParser.POWER - 987)) | (1 << (MariaDBParser.QUOTE - 987)) | (1 << (MariaDBParser.RADIANS - 987)) | (1 << (MariaDBParser.RAND - 987)) | (1 << (MariaDBParser.RANDOM_BYTES - 987)) | (1 << (MariaDBParser.RELEASE_LOCK - 987)) | (1 << (MariaDBParser.REVERSE - 987)) | (1 << (MariaDBParser.ROUND - 987)) | (1 << (MariaDBParser.ROW_COUNT - 987)) | (1 << (MariaDBParser.RPAD - 987)) | (1 << (MariaDBParser.RTRIM - 987)) | (1 << (MariaDBParser.SEC_TO_TIME - 987)) | (1 << (MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE - 987)) | (1 << (MariaDBParser.SESSION_USER - 987)) | (1 << (MariaDBParser.SHA - 987)) | (1 << (MariaDBParser.SHA1 - 987)) | (1 << (MariaDBParser.SHA2 - 987)) | (1 << (MariaDBParser.SCHEMA_NAME - 987)) | (1 << (MariaDBParser.SIGN - 987)) | (1 << (MariaDBParser.SIN - 987)) | (1 << (MariaDBParser.SLEEP - 987)) | (1 << (MariaDBParser.SOUNDEX - 987)) | (1 << (MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS - 987)) | (1 << (MariaDBParser.SQRT - 987)) | (1 << (MariaDBParser.SRID - 987)))) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & ((1 << (MariaDBParser.STARTPOINT - 1019)) | (1 << (MariaDBParser.STRCMP - 1019)) | (1 << (MariaDBParser.STR_TO_DATE - 1019)) | (1 << (MariaDBParser.ST_AREA - 1019)) | (1 << (MariaDBParser.ST_ASBINARY - 1019)) | (1 << (MariaDBParser.ST_ASTEXT - 1019)) | (1 << (MariaDBParser.ST_ASWKB - 1019)) | (1 << (MariaDBParser.ST_ASWKT - 1019)) | (1 << (MariaDBParser.ST_BUFFER - 1019)) | (1 << (MariaDBParser.ST_CENTROID - 1019)) | (1 << (MariaDBParser.ST_CONTAINS - 1019)) | (1 << (MariaDBParser.ST_CROSSES - 1019)) | (1 << (MariaDBParser.ST_DIFFERENCE - 1019)) | (1 << (MariaDBParser.ST_DIMENSION - 1019)) | (1 << (MariaDBParser.ST_DISJOINT - 1019)) | (1 << (MariaDBParser.ST_DISTANCE - 1019)) | (1 << (MariaDBParser.ST_ENDPOINT - 1019)) | (1 << (MariaDBParser.ST_ENVELOPE - 1019)) | (1 << (MariaDBParser.ST_EQUALS - 1019)) | (1 << (MariaDBParser.ST_EXTERIORRING - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYN - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYTYPE - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMWKB - 1019)) | (1 << (MariaDBParser.ST_INTERIORRINGN - 1019)))) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & ((1 << (MariaDBParser.ST_INTERSECTION - 1051)) | (1 << (MariaDBParser.ST_INTERSECTS - 1051)) | (1 << (MariaDBParser.ST_ISCLOSED - 1051)) | (1 << (MariaDBParser.ST_ISEMPTY - 1051)) | (1 << (MariaDBParser.ST_ISSIMPLE - 1051)) | (1 << (MariaDBParser.ST_LINEFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINEFROMWKB - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMWKB - 1051)) | (1 << (MariaDBParser.ST_NUMGEOMETRIES - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRING - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRINGS - 1051)) | (1 << (MariaDBParser.ST_NUMPOINTS - 1051)) | (1 << (MariaDBParser.ST_OVERLAPS - 1051)) | (1 << (MariaDBParser.ST_POINTFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POINTFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POINTN - 1051)) | (1 << (MariaDBParser.ST_POLYFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMWKB - 1051)) | (1 << (MariaDBParser.ST_SRID - 1051)) | (1 << (MariaDBParser.ST_STARTPOINT - 1051)) | (1 << (MariaDBParser.ST_SYMDIFFERENCE - 1051)) | (1 << (MariaDBParser.ST_TOUCHES - 1051)) | (1 << (MariaDBParser.ST_UNION - 1051)) | (1 << (MariaDBParser.ST_WITHIN - 1051)) | (1 << (MariaDBParser.ST_X - 1051)) | (1 << (MariaDBParser.ST_Y - 1051)) | (1 << (MariaDBParser.SUBDATE - 1051)) | (1 << (MariaDBParser.SUBSTRING_INDEX - 1051)) | (1 << (MariaDBParser.SUBTIME - 1051)))) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & ((1 << (MariaDBParser.SYSTEM_USER - 1083)) | (1 << (MariaDBParser.TAN - 1083)) | (1 << (MariaDBParser.TIMEDIFF - 1083)) | (1 << (MariaDBParser.TIMESTAMPADD - 1083)) | (1 << (MariaDBParser.TIMESTAMPDIFF - 1083)) | (1 << (MariaDBParser.TIME_FORMAT - 1083)) | (1 << (MariaDBParser.TIME_TO_SEC - 1083)) | (1 << (MariaDBParser.TOUCHES - 1083)) | (1 << (MariaDBParser.TO_BASE64 - 1083)) | (1 << (MariaDBParser.TO_DAYS - 1083)) | (1 << (MariaDBParser.TO_SECONDS - 1083)) | (1 << (MariaDBParser.UCASE - 1083)) | (1 << (MariaDBParser.UNCOMPRESS - 1083)) | (1 << (MariaDBParser.UNCOMPRESSED_LENGTH - 1083)) | (1 << (MariaDBParser.UNHEX - 1083)) | (1 << (MariaDBParser.UNIX_TIMESTAMP - 1083)) | (1 << (MariaDBParser.UPDATEXML - 1083)) | (1 << (MariaDBParser.UPPER - 1083)) | (1 << (MariaDBParser.UUID - 1083)) | (1 << (MariaDBParser.UUID_SHORT - 1083)) | (1 << (MariaDBParser.VALIDATE_PASSWORD_STRENGTH - 1083)) | (1 << (MariaDBParser.VERSION - 1083)) | (1 << (MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1083)) | (1 << (MariaDBParser.WEEKDAY - 1083)) | (1 << (MariaDBParser.WEEKOFYEAR - 1083)) | (1 << (MariaDBParser.WEIGHT_STRING - 1083)) | (1 << (MariaDBParser.WITHIN - 1083)) | (1 << (MariaDBParser.YEARWEEK - 1083)) | (1 << (MariaDBParser.Y_FUNCTION - 1083)) | (1 << (MariaDBParser.X_FUNCTION - 1083)) | (1 << (MariaDBParser.VIA - 1083)) | (1 << (MariaDBParser.LASTVAL - 1083)))) !== 0) || ((((_la - 1115)) & ~0x1F) === 0 && ((1 << (_la - 1115)) & ((1 << (MariaDBParser.NEXTVAL - 1115)) | (1 << (MariaDBParser.SETVAL - 1115)) | (1 << (MariaDBParser.PREVIOUS - 1115)) | (1 << (MariaDBParser.PERSISTENT - 1115)) | (1 << (MariaDBParser.BINLOG_MONITOR - 1115)) | (1 << (MariaDBParser.BINLOG_REPLAY - 1115)) | (1 << (MariaDBParser.FEDERATED_ADMIN - 1115)) | (1 << (MariaDBParser.READ_ONLY_ADMIN - 1115)) | (1 << (MariaDBParser.REPLICA - 1115)) | (1 << (MariaDBParser.REPLICAS - 1115)) | (1 << (MariaDBParser.REPLICATION_MASTER_ADMIN - 1115)) | (1 << (MariaDBParser.MONITOR - 1115)) | (1 << (MariaDBParser.READ_ONLY - 1115)) | (1 << (MariaDBParser.REPLAY - 1115)) | (1 << (MariaDBParser.MOD - 1115)))) !== 0) || ((((_la - 1166)) & ~0x1F) === 0 && ((1 << (_la - 1166)) & ((1 << (MariaDBParser.CHARSET_REVERSE_QOUTE_STRING - 1166)) | (1 << (MariaDBParser.STRING_LITERAL - 1166)) | (1 << (MariaDBParser.ID - 1166)))) !== 0)) {
				{
				this.state = 4930;
				this.uid();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public repeatStatement(): RepeatStatementContext {
		let _localctx: RepeatStatementContext = new RepeatStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 410, MariaDBParser.RULE_repeatStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4936;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MariaDBParser.ATTRIBUTE) | (1 << MariaDBParser.BODY) | (1 << MariaDBParser.BUCKETS) | (1 << MariaDBParser.CONDITION))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (MariaDBParser.CURRENT - 36)) | (1 << (MariaDBParser.CURRENT_ROLE - 36)) | (1 << (MariaDBParser.CURRENT_USER - 36)) | (1 << (MariaDBParser.DATABASE - 36)) | (1 << (MariaDBParser.DEFAULT - 36)) | (1 << (MariaDBParser.DIAGNOSTICS - 36)) | (1 << (MariaDBParser.EMPTY - 36)) | (1 << (MariaDBParser.EXCEPT - 36)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (MariaDBParser.GROUP - 73)) | (1 << (MariaDBParser.IF - 73)) | (1 << (MariaDBParser.IGNORED - 73)) | (1 << (MariaDBParser.INSERT - 73)) | (1 << (MariaDBParser.LATERAL - 73)) | (1 << (MariaDBParser.LEFT - 73)) | (1 << (MariaDBParser.LOCKED - 73)))) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & ((1 << (MariaDBParser.MAXVALUE - 110)) | (1 << (MariaDBParser.MINVALUE - 110)) | (1 << (MariaDBParser.NUMBER - 110)) | (1 << (MariaDBParser.OPTIONAL - 110)) | (1 << (MariaDBParser.ORDER - 110)) | (1 << (MariaDBParser.PRIMARY - 110)) | (1 << (MariaDBParser.PACKAGE - 110)))) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (MariaDBParser.REPLACE - 142)) | (1 << (MariaDBParser.RIGHT - 142)) | (1 << (MariaDBParser.SCHEMA - 142)) | (1 << (MariaDBParser.SKIP_ - 142)) | (1 << (MariaDBParser.STACKED - 142)) | (1 << (MariaDBParser.STATEMENT - 142)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MariaDBParser.DATE - 217)) | (1 << (MariaDBParser.TIME - 217)) | (1 << (MariaDBParser.TIMESTAMP - 217)) | (1 << (MariaDBParser.DATETIME - 217)) | (1 << (MariaDBParser.YEAR - 217)) | (1 << (MariaDBParser.BINARY - 217)) | (1 << (MariaDBParser.TEXT - 217)) | (1 << (MariaDBParser.ENUM - 217)) | (1 << (MariaDBParser.SERIAL - 217)))) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & ((1 << (MariaDBParser.JSON_ARRAY - 251)) | (1 << (MariaDBParser.JSON_ARRAYAGG - 251)) | (1 << (MariaDBParser.JSON_ARRAY_APPEND - 251)) | (1 << (MariaDBParser.JSON_ARRAY_INSERT - 251)) | (1 << (MariaDBParser.JSON_CONTAINS - 251)) | (1 << (MariaDBParser.JSON_CONTAINS_PATH - 251)) | (1 << (MariaDBParser.JSON_DEPTH - 251)) | (1 << (MariaDBParser.JSON_EXTRACT - 251)) | (1 << (MariaDBParser.JSON_INSERT - 251)) | (1 << (MariaDBParser.JSON_KEYS - 251)) | (1 << (MariaDBParser.JSON_LENGTH - 251)) | (1 << (MariaDBParser.JSON_MERGE - 251)) | (1 << (MariaDBParser.JSON_MERGE_PATCH - 251)) | (1 << (MariaDBParser.JSON_MERGE_PRESERVE - 251)) | (1 << (MariaDBParser.JSON_OBJECT - 251)) | (1 << (MariaDBParser.JSON_OBJECTAGG - 251)) | (1 << (MariaDBParser.JSON_OVERLAPS - 251)) | (1 << (MariaDBParser.JSON_PRETTY - 251)) | (1 << (MariaDBParser.JSON_QUOTE - 251)) | (1 << (MariaDBParser.JSON_REMOVE - 251)) | (1 << (MariaDBParser.JSON_REPLACE - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALID - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT - 251)) | (1 << (MariaDBParser.JSON_SEARCH - 251)) | (1 << (MariaDBParser.JSON_SET - 251)) | (1 << (MariaDBParser.JSON_STORAGE_FREE - 251)) | (1 << (MariaDBParser.JSON_STORAGE_SIZE - 251)) | (1 << (MariaDBParser.JSON_TABLE - 251)) | (1 << (MariaDBParser.JSON_TYPE - 251)) | (1 << (MariaDBParser.JSON_UNQUOTE - 251)) | (1 << (MariaDBParser.JSON_VALID - 251)) | (1 << (MariaDBParser.JSON_VALUE - 251)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (MariaDBParser.NESTED - 283)) | (1 << (MariaDBParser.ORDINALITY - 283)) | (1 << (MariaDBParser.PATH - 283)) | (1 << (MariaDBParser.AVG - 283)) | (1 << (MariaDBParser.BIT_AND - 283)) | (1 << (MariaDBParser.BIT_OR - 283)) | (1 << (MariaDBParser.BIT_XOR - 283)) | (1 << (MariaDBParser.COUNT - 283)) | (1 << (MariaDBParser.CUME_DIST - 283)) | (1 << (MariaDBParser.DENSE_RANK - 283)) | (1 << (MariaDBParser.FIRST_VALUE - 283)) | (1 << (MariaDBParser.GROUP_CONCAT - 283)) | (1 << (MariaDBParser.LAG - 283)) | (1 << (MariaDBParser.LAST_VALUE - 283)) | (1 << (MariaDBParser.LEAD - 283)) | (1 << (MariaDBParser.MAX - 283)) | (1 << (MariaDBParser.MIN - 283)) | (1 << (MariaDBParser.NTILE - 283)) | (1 << (MariaDBParser.NTH_VALUE - 283)) | (1 << (MariaDBParser.PERCENT_RANK - 283)) | (1 << (MariaDBParser.RANK - 283)) | (1 << (MariaDBParser.ROW_NUMBER - 283)) | (1 << (MariaDBParser.STD - 283)) | (1 << (MariaDBParser.STDDEV - 283)) | (1 << (MariaDBParser.STDDEV_POP - 283)) | (1 << (MariaDBParser.STDDEV_SAMP - 283)) | (1 << (MariaDBParser.SUM - 283)) | (1 << (MariaDBParser.VAR_POP - 283)) | (1 << (MariaDBParser.VAR_SAMP - 283)) | (1 << (MariaDBParser.VARIANCE - 283)) | (1 << (MariaDBParser.CURRENT_DATE - 283)) | (1 << (MariaDBParser.CURRENT_TIME - 283)))) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & ((1 << (MariaDBParser.CURRENT_TIMESTAMP - 315)) | (1 << (MariaDBParser.LOCALTIME - 315)) | (1 << (MariaDBParser.CURDATE - 315)) | (1 << (MariaDBParser.CURTIME - 315)) | (1 << (MariaDBParser.DATE_ADD - 315)) | (1 << (MariaDBParser.DATE_SUB - 315)) | (1 << (MariaDBParser.LOCALTIMESTAMP - 315)) | (1 << (MariaDBParser.NOW - 315)) | (1 << (MariaDBParser.POSITION - 315)) | (1 << (MariaDBParser.SUBSTR - 315)) | (1 << (MariaDBParser.SUBSTRING - 315)) | (1 << (MariaDBParser.SYSDATE - 315)) | (1 << (MariaDBParser.TRIM - 315)) | (1 << (MariaDBParser.UTC_DATE - 315)) | (1 << (MariaDBParser.UTC_TIME - 315)) | (1 << (MariaDBParser.UTC_TIMESTAMP - 315)) | (1 << (MariaDBParser.ACCOUNT - 315)) | (1 << (MariaDBParser.ACTION - 315)) | (1 << (MariaDBParser.AFTER - 315)) | (1 << (MariaDBParser.AGGREGATE - 315)) | (1 << (MariaDBParser.ALGORITHM - 315)) | (1 << (MariaDBParser.ANY - 315)) | (1 << (MariaDBParser.AT - 315)) | (1 << (MariaDBParser.AUTHORS - 315)) | (1 << (MariaDBParser.AUTOCOMMIT - 315)) | (1 << (MariaDBParser.AUTOEXTEND_SIZE - 315)) | (1 << (MariaDBParser.AUTO_INCREMENT - 315)) | (1 << (MariaDBParser.AVG_ROW_LENGTH - 315)) | (1 << (MariaDBParser.BEGIN - 315)) | (1 << (MariaDBParser.BINLOG - 315)) | (1 << (MariaDBParser.BIT - 315)))) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & ((1 << (MariaDBParser.BLOCK - 347)) | (1 << (MariaDBParser.BOOL - 347)) | (1 << (MariaDBParser.BOOLEAN - 347)) | (1 << (MariaDBParser.BTREE - 347)) | (1 << (MariaDBParser.CACHE - 347)) | (1 << (MariaDBParser.CASCADED - 347)) | (1 << (MariaDBParser.CHAIN - 347)) | (1 << (MariaDBParser.CHANGED - 347)) | (1 << (MariaDBParser.CHANNEL - 347)) | (1 << (MariaDBParser.CHECKSUM - 347)) | (1 << (MariaDBParser.PAGE_CHECKSUM - 347)) | (1 << (MariaDBParser.CIPHER - 347)) | (1 << (MariaDBParser.CLASS_ORIGIN - 347)) | (1 << (MariaDBParser.CLIENT - 347)) | (1 << (MariaDBParser.CLOSE - 347)) | (1 << (MariaDBParser.CLUSTERING - 347)) | (1 << (MariaDBParser.COALESCE - 347)) | (1 << (MariaDBParser.CODE - 347)) | (1 << (MariaDBParser.COLUMNS - 347)) | (1 << (MariaDBParser.COLUMN_FORMAT - 347)) | (1 << (MariaDBParser.COLUMN_NAME - 347)) | (1 << (MariaDBParser.COMMENT - 347)) | (1 << (MariaDBParser.COMMIT - 347)) | (1 << (MariaDBParser.COMPACT - 347)) | (1 << (MariaDBParser.COMPLETION - 347)) | (1 << (MariaDBParser.COMPRESSED - 347)) | (1 << (MariaDBParser.COMPRESSION - 347)) | (1 << (MariaDBParser.CONCURRENT - 347)) | (1 << (MariaDBParser.CONNECT - 347)) | (1 << (MariaDBParser.CONNECTION - 347)) | (1 << (MariaDBParser.CONSISTENT - 347)) | (1 << (MariaDBParser.CONSTRAINT_CATALOG - 347)))) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & ((1 << (MariaDBParser.CONSTRAINT_SCHEMA - 379)) | (1 << (MariaDBParser.CONSTRAINT_NAME - 379)) | (1 << (MariaDBParser.CONTAINS - 379)) | (1 << (MariaDBParser.CONTEXT - 379)) | (1 << (MariaDBParser.CONTRIBUTORS - 379)) | (1 << (MariaDBParser.COPY - 379)) | (1 << (MariaDBParser.CPU - 379)) | (1 << (MariaDBParser.CYCLE - 379)) | (1 << (MariaDBParser.CURSOR_NAME - 379)) | (1 << (MariaDBParser.DATA - 379)) | (1 << (MariaDBParser.DATAFILE - 379)) | (1 << (MariaDBParser.DEALLOCATE - 379)) | (1 << (MariaDBParser.DEFAULT_AUTH - 379)) | (1 << (MariaDBParser.DEFINER - 379)) | (1 << (MariaDBParser.DELAY_KEY_WRITE - 379)) | (1 << (MariaDBParser.DES_KEY_FILE - 379)) | (1 << (MariaDBParser.DIRECTORY - 379)) | (1 << (MariaDBParser.DISABLE - 379)) | (1 << (MariaDBParser.DISCARD - 379)) | (1 << (MariaDBParser.DISK - 379)) | (1 << (MariaDBParser.DO - 379)) | (1 << (MariaDBParser.DUMPFILE - 379)) | (1 << (MariaDBParser.DUPLICATE - 379)) | (1 << (MariaDBParser.DYNAMIC - 379)) | (1 << (MariaDBParser.ENABLE - 379)) | (1 << (MariaDBParser.ENCRYPTED - 379)) | (1 << (MariaDBParser.ENCRYPTION - 379)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ID - 379)) | (1 << (MariaDBParser.END - 379)) | (1 << (MariaDBParser.ENDS - 379)) | (1 << (MariaDBParser.ENGINE - 379)) | (1 << (MariaDBParser.ENGINES - 379)))) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & ((1 << (MariaDBParser.ERROR - 411)) | (1 << (MariaDBParser.ERRORS - 411)) | (1 << (MariaDBParser.ESCAPE - 411)) | (1 << (MariaDBParser.EVEN - 411)) | (1 << (MariaDBParser.EVENT - 411)) | (1 << (MariaDBParser.EVENTS - 411)) | (1 << (MariaDBParser.EVERY - 411)) | (1 << (MariaDBParser.EXCHANGE - 411)) | (1 << (MariaDBParser.EXCLUSIVE - 411)) | (1 << (MariaDBParser.EXPIRE - 411)) | (1 << (MariaDBParser.EXPORT - 411)) | (1 << (MariaDBParser.EXTENDED - 411)) | (1 << (MariaDBParser.EXTENT_SIZE - 411)) | (1 << (MariaDBParser.FAILED_LOGIN_ATTEMPTS - 411)) | (1 << (MariaDBParser.FAST - 411)) | (1 << (MariaDBParser.FAULTS - 411)) | (1 << (MariaDBParser.FIELDS - 411)) | (1 << (MariaDBParser.FILE_BLOCK_SIZE - 411)) | (1 << (MariaDBParser.FILTER - 411)) | (1 << (MariaDBParser.FIRST - 411)) | (1 << (MariaDBParser.FIXED - 411)) | (1 << (MariaDBParser.FLUSH - 411)) | (1 << (MariaDBParser.FOLLOWS - 411)) | (1 << (MariaDBParser.FOUND - 411)) | (1 << (MariaDBParser.FULL - 411)) | (1 << (MariaDBParser.FUNCTION - 411)) | (1 << (MariaDBParser.GENERAL - 411)) | (1 << (MariaDBParser.GLOBAL - 411)) | (1 << (MariaDBParser.GRANTS - 411)) | (1 << (MariaDBParser.GROUP_REPLICATION - 411)) | (1 << (MariaDBParser.HANDLER - 411)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (MariaDBParser.HASH - 443)) | (1 << (MariaDBParser.HELP - 443)) | (1 << (MariaDBParser.HISTORY - 443)) | (1 << (MariaDBParser.HOST - 443)) | (1 << (MariaDBParser.HOSTS - 443)) | (1 << (MariaDBParser.IDENTIFIED - 443)) | (1 << (MariaDBParser.IGNORE_SERVER_IDS - 443)) | (1 << (MariaDBParser.IMPORT - 443)) | (1 << (MariaDBParser.INCREMENT - 443)) | (1 << (MariaDBParser.INDEXES - 443)) | (1 << (MariaDBParser.INITIAL_SIZE - 443)) | (1 << (MariaDBParser.INPLACE - 443)) | (1 << (MariaDBParser.INSERT_METHOD - 443)) | (1 << (MariaDBParser.INSTALL - 443)) | (1 << (MariaDBParser.INSTANCE - 443)) | (1 << (MariaDBParser.INSTANT - 443)) | (1 << (MariaDBParser.INVISIBLE - 443)) | (1 << (MariaDBParser.INVOKER - 443)) | (1 << (MariaDBParser.IO - 443)) | (1 << (MariaDBParser.IO_THREAD - 443)) | (1 << (MariaDBParser.IPC - 443)) | (1 << (MariaDBParser.ISOLATION - 443)) | (1 << (MariaDBParser.ISSUER - 443)) | (1 << (MariaDBParser.JSON - 443)) | (1 << (MariaDBParser.KEY_BLOCK_SIZE - 443)) | (1 << (MariaDBParser.LANGUAGE - 443)) | (1 << (MariaDBParser.LAST - 443)) | (1 << (MariaDBParser.LEAVES - 443)) | (1 << (MariaDBParser.LESS - 443)) | (1 << (MariaDBParser.LEVEL - 443)) | (1 << (MariaDBParser.LIST - 443)) | (1 << (MariaDBParser.LOCAL - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (MariaDBParser.LOCALES - 475)) | (1 << (MariaDBParser.LOGFILE - 475)) | (1 << (MariaDBParser.LOGS - 475)) | (1 << (MariaDBParser.MASTER - 475)) | (1 << (MariaDBParser.MASTER_AUTO_POSITION - 475)) | (1 << (MariaDBParser.MASTER_CONNECT_RETRY - 475)) | (1 << (MariaDBParser.MASTER_DELAY - 475)) | (1 << (MariaDBParser.MASTER_HEARTBEAT_PERIOD - 475)) | (1 << (MariaDBParser.MASTER_HOST - 475)) | (1 << (MariaDBParser.MASTER_LOG_FILE - 475)) | (1 << (MariaDBParser.MASTER_LOG_POS - 475)) | (1 << (MariaDBParser.MASTER_PASSWORD - 475)) | (1 << (MariaDBParser.MASTER_PORT - 475)) | (1 << (MariaDBParser.MASTER_RETRY_COUNT - 475)) | (1 << (MariaDBParser.MASTER_SSL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CA - 475)) | (1 << (MariaDBParser.MASTER_SSL_CAPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_CERT - 475)) | (1 << (MariaDBParser.MASTER_SSL_CIPHER - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRLPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_KEY - 475)) | (1 << (MariaDBParser.MASTER_TLS_VERSION - 475)) | (1 << (MariaDBParser.MASTER_USER - 475)) | (1 << (MariaDBParser.MAX_CONNECTIONS_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_QUERIES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_ROWS - 475)) | (1 << (MariaDBParser.MAX_SIZE - 475)) | (1 << (MariaDBParser.MAX_UPDATES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_USER_CONNECTIONS - 475)) | (1 << (MariaDBParser.MEDIUM - 475)) | (1 << (MariaDBParser.MEMBER - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (MariaDBParser.MERGE - 507)) | (1 << (MariaDBParser.MESSAGE_TEXT - 507)) | (1 << (MariaDBParser.MID - 507)) | (1 << (MariaDBParser.MIGRATE - 507)) | (1 << (MariaDBParser.MIN_ROWS - 507)) | (1 << (MariaDBParser.MODE - 507)) | (1 << (MariaDBParser.MODIFY - 507)) | (1 << (MariaDBParser.MUTEX - 507)) | (1 << (MariaDBParser.MYSQL - 507)) | (1 << (MariaDBParser.MYSQL_ERRNO - 507)) | (1 << (MariaDBParser.NAME - 507)) | (1 << (MariaDBParser.NAMES - 507)) | (1 << (MariaDBParser.NCHAR - 507)) | (1 << (MariaDBParser.NEVER - 507)) | (1 << (MariaDBParser.NEXT - 507)) | (1 << (MariaDBParser.NO - 507)) | (1 << (MariaDBParser.NOCACHE - 507)) | (1 << (MariaDBParser.NOCOPY - 507)) | (1 << (MariaDBParser.NOCYCLE - 507)) | (1 << (MariaDBParser.NOMAXVALUE - 507)) | (1 << (MariaDBParser.NOMINVALUE - 507)) | (1 << (MariaDBParser.NOWAIT - 507)) | (1 << (MariaDBParser.NODEGROUP - 507)) | (1 << (MariaDBParser.NONE - 507)) | (1 << (MariaDBParser.ODBC - 507)) | (1 << (MariaDBParser.OFFLINE - 507)) | (1 << (MariaDBParser.OFFSET - 507)) | (1 << (MariaDBParser.OF - 507)) | (1 << (MariaDBParser.OJ - 507)) | (1 << (MariaDBParser.OLD_PASSWORD - 507)) | (1 << (MariaDBParser.ONE - 507)) | (1 << (MariaDBParser.ONLINE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (MariaDBParser.ONLY - 539)) | (1 << (MariaDBParser.OPEN - 539)) | (1 << (MariaDBParser.OPTIMIZER_COSTS - 539)) | (1 << (MariaDBParser.OPTIONS - 539)) | (1 << (MariaDBParser.OWNER - 539)) | (1 << (MariaDBParser.PACK_KEYS - 539)) | (1 << (MariaDBParser.PAGE - 539)) | (1 << (MariaDBParser.PARSER - 539)) | (1 << (MariaDBParser.PARTIAL - 539)) | (1 << (MariaDBParser.PARTITIONING - 539)) | (1 << (MariaDBParser.PARTITIONS - 539)) | (1 << (MariaDBParser.PASSWORD - 539)) | (1 << (MariaDBParser.PASSWORD_LOCK_TIME - 539)) | (1 << (MariaDBParser.PHASE - 539)) | (1 << (MariaDBParser.PLUGIN - 539)) | (1 << (MariaDBParser.PLUGIN_DIR - 539)) | (1 << (MariaDBParser.PLUGINS - 539)) | (1 << (MariaDBParser.PORT - 539)) | (1 << (MariaDBParser.PRECEDES - 539)) | (1 << (MariaDBParser.PREPARE - 539)) | (1 << (MariaDBParser.PRESERVE - 539)) | (1 << (MariaDBParser.PREV - 539)) | (1 << (MariaDBParser.PROCESSLIST - 539)) | (1 << (MariaDBParser.PROFILE - 539)) | (1 << (MariaDBParser.PROFILES - 539)) | (1 << (MariaDBParser.PROXY - 539)) | (1 << (MariaDBParser.QUERY - 539)) | (1 << (MariaDBParser.QUERY_RESPONSE_TIME - 539)) | (1 << (MariaDBParser.QUICK - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (MariaDBParser.REBUILD - 571)) | (1 << (MariaDBParser.RECOVER - 571)) | (1 << (MariaDBParser.RECURSIVE - 571)) | (1 << (MariaDBParser.REDO_BUFFER_SIZE - 571)) | (1 << (MariaDBParser.REDUNDANT - 571)) | (1 << (MariaDBParser.RELAY - 571)) | (1 << (MariaDBParser.RELAY_LOG_FILE - 571)) | (1 << (MariaDBParser.RELAY_LOG_POS - 571)) | (1 << (MariaDBParser.RELAYLOG - 571)) | (1 << (MariaDBParser.REMOVE - 571)) | (1 << (MariaDBParser.REORGANIZE - 571)) | (1 << (MariaDBParser.REPAIR - 571)) | (1 << (MariaDBParser.REPLICATE_DO_DB - 571)) | (1 << (MariaDBParser.REPLICATE_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_REWRITE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATION - 571)) | (1 << (MariaDBParser.RESET - 571)) | (1 << (MariaDBParser.RESTART - 571)) | (1 << (MariaDBParser.RESUME - 571)) | (1 << (MariaDBParser.RETURNED_SQLSTATE - 571)) | (1 << (MariaDBParser.RETURNS - 571)) | (1 << (MariaDBParser.REUSE - 571)) | (1 << (MariaDBParser.ROLE - 571)) | (1 << (MariaDBParser.ROLLBACK - 571)) | (1 << (MariaDBParser.ROLLUP - 571)) | (1 << (MariaDBParser.ROTATE - 571)) | (1 << (MariaDBParser.ROW - 571)))) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & ((1 << (MariaDBParser.ROWS - 603)) | (1 << (MariaDBParser.ROW_FORMAT - 603)) | (1 << (MariaDBParser.RTREE - 603)) | (1 << (MariaDBParser.SAVEPOINT - 603)) | (1 << (MariaDBParser.SCHEDULE - 603)) | (1 << (MariaDBParser.SECURITY - 603)) | (1 << (MariaDBParser.SEQUENCE - 603)) | (1 << (MariaDBParser.SERVER - 603)) | (1 << (MariaDBParser.SESSION - 603)) | (1 << (MariaDBParser.SHARE - 603)) | (1 << (MariaDBParser.SHARED - 603)) | (1 << (MariaDBParser.SIGNED - 603)) | (1 << (MariaDBParser.SIMPLE - 603)) | (1 << (MariaDBParser.SLAVE - 603)) | (1 << (MariaDBParser.SLAVES - 603)) | (1 << (MariaDBParser.SLOW - 603)) | (1 << (MariaDBParser.SNAPSHOT - 603)) | (1 << (MariaDBParser.SOCKET - 603)) | (1 << (MariaDBParser.SOME - 603)) | (1 << (MariaDBParser.SONAME - 603)) | (1 << (MariaDBParser.SOUNDS - 603)) | (1 << (MariaDBParser.SOURCE - 603)) | (1 << (MariaDBParser.SQL_AFTER_GTIDS - 603)) | (1 << (MariaDBParser.SQL_AFTER_MTS_GAPS - 603)) | (1 << (MariaDBParser.SQL_BEFORE_GTIDS - 603)) | (1 << (MariaDBParser.SQL_BUFFER_RESULT - 603)) | (1 << (MariaDBParser.SQL_CACHE - 603)) | (1 << (MariaDBParser.SQL_NO_CACHE - 603)) | (1 << (MariaDBParser.SQL_THREAD - 603)) | (1 << (MariaDBParser.START - 603)) | (1 << (MariaDBParser.STARTS - 603)) | (1 << (MariaDBParser.STATS_AUTO_RECALC - 603)))) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & ((1 << (MariaDBParser.STATS_PERSISTENT - 635)) | (1 << (MariaDBParser.STATS_SAMPLE_PAGES - 635)) | (1 << (MariaDBParser.STATUS - 635)) | (1 << (MariaDBParser.STOP - 635)) | (1 << (MariaDBParser.STORAGE - 635)) | (1 << (MariaDBParser.STRING - 635)) | (1 << (MariaDBParser.SUBCLASS_ORIGIN - 635)) | (1 << (MariaDBParser.SUBJECT - 635)) | (1 << (MariaDBParser.SUBPARTITION - 635)) | (1 << (MariaDBParser.SUBPARTITIONS - 635)) | (1 << (MariaDBParser.SUSPEND - 635)) | (1 << (MariaDBParser.SWAPS - 635)) | (1 << (MariaDBParser.SWITCHES - 635)) | (1 << (MariaDBParser.TABLE_NAME - 635)) | (1 << (MariaDBParser.TABLESPACE - 635)) | (1 << (MariaDBParser.TABLE_TYPE - 635)) | (1 << (MariaDBParser.TEMPORARY - 635)) | (1 << (MariaDBParser.TEMPTABLE - 635)) | (1 << (MariaDBParser.THAN - 635)) | (1 << (MariaDBParser.TRADITIONAL - 635)) | (1 << (MariaDBParser.TRANSACTION - 635)) | (1 << (MariaDBParser.TRANSACTIONAL - 635)) | (1 << (MariaDBParser.TRIGGERS - 635)) | (1 << (MariaDBParser.TRUNCATE - 635)) | (1 << (MariaDBParser.TYPES - 635)) | (1 << (MariaDBParser.UNBOUNDED - 635)) | (1 << (MariaDBParser.UNDEFINED - 635)) | (1 << (MariaDBParser.UNDOFILE - 635)) | (1 << (MariaDBParser.UNDO_BUFFER_SIZE - 635)) | (1 << (MariaDBParser.UNINSTALL - 635)) | (1 << (MariaDBParser.UNKNOWN - 635)))) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & ((1 << (MariaDBParser.UNTIL - 667)) | (1 << (MariaDBParser.UPGRADE - 667)) | (1 << (MariaDBParser.USER - 667)) | (1 << (MariaDBParser.USE_FRM - 667)) | (1 << (MariaDBParser.USER_RESOURCES - 667)) | (1 << (MariaDBParser.VALIDATION - 667)) | (1 << (MariaDBParser.VALUE - 667)) | (1 << (MariaDBParser.VARIABLES - 667)) | (1 << (MariaDBParser.VIEW - 667)) | (1 << (MariaDBParser.VIRTUAL - 667)) | (1 << (MariaDBParser.VISIBLE - 667)) | (1 << (MariaDBParser.WAIT - 667)) | (1 << (MariaDBParser.WARNINGS - 667)) | (1 << (MariaDBParser.WITHOUT - 667)) | (1 << (MariaDBParser.WORK - 667)) | (1 << (MariaDBParser.WRAPPER - 667)) | (1 << (MariaDBParser.WSREP_MEMBERSHIP - 667)) | (1 << (MariaDBParser.WSREP_STATUS - 667)) | (1 << (MariaDBParser.X509 - 667)) | (1 << (MariaDBParser.XA - 667)) | (1 << (MariaDBParser.XML - 667)) | (1 << (MariaDBParser.EUR - 667)) | (1 << (MariaDBParser.USA - 667)) | (1 << (MariaDBParser.JIS - 667)) | (1 << (MariaDBParser.ISO - 667)) | (1 << (MariaDBParser.INTERNAL - 667)) | (1 << (MariaDBParser.QUARTER - 667)) | (1 << (MariaDBParser.MONTH - 667)) | (1 << (MariaDBParser.DAY - 667)) | (1 << (MariaDBParser.HOUR - 667)))) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & ((1 << (MariaDBParser.MINUTE - 699)) | (1 << (MariaDBParser.WEEK - 699)) | (1 << (MariaDBParser.SECOND - 699)) | (1 << (MariaDBParser.MICROSECOND - 699)) | (1 << (MariaDBParser.USER_STATISTICS - 699)) | (1 << (MariaDBParser.CLIENT_STATISTICS - 699)) | (1 << (MariaDBParser.INDEX_STATISTICS - 699)) | (1 << (MariaDBParser.TABLE_STATISTICS - 699)) | (1 << (MariaDBParser.ADMIN - 699)) | (1 << (MariaDBParser.AUDIT_ADMIN - 699)) | (1 << (MariaDBParser.BACKUP_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ENCRYPTION_ADMIN - 699)) | (1 << (MariaDBParser.CLONE_ADMIN - 699)) | (1 << (MariaDBParser.CONNECTION_ADMIN - 699)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ADMIN - 699)) | (1 << (MariaDBParser.EXECUTE - 699)) | (1 << (MariaDBParser.FILE - 699)) | (1 << (MariaDBParser.FIREWALL_ADMIN - 699)) | (1 << (MariaDBParser.FIREWALL_USER - 699)) | (1 << (MariaDBParser.GROUP_REPLICATION_ADMIN - 699)) | (1 << (MariaDBParser.INNODB_REDO_LOG_ARCHIVE - 699)) | (1 << (MariaDBParser.INVOKE - 699)) | (1 << (MariaDBParser.LAMBDA - 699)) | (1 << (MariaDBParser.NDB_STORED_USER - 699)) | (1 << (MariaDBParser.PASSWORDLESS_USER_ADMIN - 699)))) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & ((1 << (MariaDBParser.PERSIST_RO_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.PRIVILEGES - 731)) | (1 << (MariaDBParser.PROCESS - 731)) | (1 << (MariaDBParser.RELOAD - 731)) | (1 << (MariaDBParser.REPLICATION_APPLIER - 731)) | (1 << (MariaDBParser.REPLICATION_SLAVE_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_USER - 731)) | (1 << (MariaDBParser.ROLE_ADMIN - 731)) | (1 << (MariaDBParser.ROUTINE - 731)) | (1 << (MariaDBParser.S3 - 731)) | (1 << (MariaDBParser.SESSION_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.SET_USER_ID - 731)) | (1 << (MariaDBParser.SHOW_ROUTINE - 731)) | (1 << (MariaDBParser.SHUTDOWN - 731)) | (1 << (MariaDBParser.SUPER - 731)) | (1 << (MariaDBParser.SYSTEM_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.TABLES - 731)) | (1 << (MariaDBParser.TABLE_ENCRYPTION_ADMIN - 731)) | (1 << (MariaDBParser.VERSION_TOKEN_ADMIN - 731)) | (1 << (MariaDBParser.XA_RECOVER_ADMIN - 731)) | (1 << (MariaDBParser.ARMSCII8 - 731)) | (1 << (MariaDBParser.ASCII - 731)) | (1 << (MariaDBParser.BIG5 - 731)) | (1 << (MariaDBParser.CP1250 - 731)) | (1 << (MariaDBParser.CP1251 - 731)) | (1 << (MariaDBParser.CP1256 - 731)) | (1 << (MariaDBParser.CP1257 - 731)) | (1 << (MariaDBParser.CP850 - 731)) | (1 << (MariaDBParser.CP852 - 731)) | (1 << (MariaDBParser.CP866 - 731)))) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & ((1 << (MariaDBParser.CP932 - 763)) | (1 << (MariaDBParser.DEC8 - 763)) | (1 << (MariaDBParser.EUCJPMS - 763)) | (1 << (MariaDBParser.EUCKR - 763)) | (1 << (MariaDBParser.GB18030 - 763)) | (1 << (MariaDBParser.GB2312 - 763)) | (1 << (MariaDBParser.GBK - 763)) | (1 << (MariaDBParser.GEOSTD8 - 763)) | (1 << (MariaDBParser.GREEK - 763)) | (1 << (MariaDBParser.HEBREW - 763)) | (1 << (MariaDBParser.HP8 - 763)) | (1 << (MariaDBParser.KEYBCS2 - 763)) | (1 << (MariaDBParser.KOI8R - 763)) | (1 << (MariaDBParser.KOI8U - 763)) | (1 << (MariaDBParser.LATIN1 - 763)) | (1 << (MariaDBParser.LATIN2 - 763)) | (1 << (MariaDBParser.LATIN5 - 763)) | (1 << (MariaDBParser.LATIN7 - 763)) | (1 << (MariaDBParser.MACCE - 763)) | (1 << (MariaDBParser.MACROMAN - 763)) | (1 << (MariaDBParser.SJIS - 763)) | (1 << (MariaDBParser.SWE7 - 763)) | (1 << (MariaDBParser.TIS620 - 763)) | (1 << (MariaDBParser.UCS2 - 763)) | (1 << (MariaDBParser.UJIS - 763)) | (1 << (MariaDBParser.UTF16 - 763)) | (1 << (MariaDBParser.UTF16LE - 763)) | (1 << (MariaDBParser.UTF32 - 763)) | (1 << (MariaDBParser.UTF8 - 763)) | (1 << (MariaDBParser.UTF8MB3 - 763)) | (1 << (MariaDBParser.UTF8MB4 - 763)) | (1 << (MariaDBParser.ARCHIVE - 763)))) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & ((1 << (MariaDBParser.BLACKHOLE - 795)) | (1 << (MariaDBParser.CSV - 795)) | (1 << (MariaDBParser.FEDERATED - 795)) | (1 << (MariaDBParser.INNODB - 795)) | (1 << (MariaDBParser.MEMORY - 795)) | (1 << (MariaDBParser.MRG_MYISAM - 795)) | (1 << (MariaDBParser.MYISAM - 795)) | (1 << (MariaDBParser.NDB - 795)) | (1 << (MariaDBParser.NDBCLUSTER - 795)) | (1 << (MariaDBParser.PERFORMANCE_SCHEMA - 795)) | (1 << (MariaDBParser.TOKUDB - 795)) | (1 << (MariaDBParser.REPEATABLE - 795)) | (1 << (MariaDBParser.COMMITTED - 795)) | (1 << (MariaDBParser.UNCOMMITTED - 795)) | (1 << (MariaDBParser.SERIALIZABLE - 795)) | (1 << (MariaDBParser.GEOMETRYCOLLECTION - 795)) | (1 << (MariaDBParser.LINESTRING - 795)) | (1 << (MariaDBParser.MULTILINESTRING - 795)) | (1 << (MariaDBParser.MULTIPOINT - 795)) | (1 << (MariaDBParser.MULTIPOLYGON - 795)) | (1 << (MariaDBParser.POINT - 795)) | (1 << (MariaDBParser.POLYGON - 795)) | (1 << (MariaDBParser.ABS - 795)) | (1 << (MariaDBParser.ACOS - 795)) | (1 << (MariaDBParser.ADDDATE - 795)) | (1 << (MariaDBParser.ADDTIME - 795)) | (1 << (MariaDBParser.AES_DECRYPT - 795)) | (1 << (MariaDBParser.AES_ENCRYPT - 795)) | (1 << (MariaDBParser.AREA - 795)) | (1 << (MariaDBParser.ASBINARY - 795)))) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & ((1 << (MariaDBParser.ASIN - 827)) | (1 << (MariaDBParser.ASTEXT - 827)) | (1 << (MariaDBParser.ASWKB - 827)) | (1 << (MariaDBParser.ASWKT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DECRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DERIVE - 827)) | (1 << (MariaDBParser.ASYMMETRIC_ENCRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_SIGN - 827)) | (1 << (MariaDBParser.ASYMMETRIC_VERIFY - 827)) | (1 << (MariaDBParser.ATAN - 827)) | (1 << (MariaDBParser.ATAN2 - 827)) | (1 << (MariaDBParser.BENCHMARK - 827)) | (1 << (MariaDBParser.BIN - 827)) | (1 << (MariaDBParser.BIT_COUNT - 827)) | (1 << (MariaDBParser.BIT_LENGTH - 827)) | (1 << (MariaDBParser.BUFFER - 827)) | (1 << (MariaDBParser.CATALOG_NAME - 827)) | (1 << (MariaDBParser.CEIL - 827)) | (1 << (MariaDBParser.CEILING - 827)) | (1 << (MariaDBParser.CENTROID - 827)) | (1 << (MariaDBParser.CHARACTER_LENGTH - 827)) | (1 << (MariaDBParser.CHARSET - 827)) | (1 << (MariaDBParser.CHAR_LENGTH - 827)) | (1 << (MariaDBParser.COERCIBILITY - 827)) | (1 << (MariaDBParser.COLLATION - 827)) | (1 << (MariaDBParser.COMPRESS - 827)) | (1 << (MariaDBParser.CONCAT - 827)) | (1 << (MariaDBParser.CONCAT_WS - 827)) | (1 << (MariaDBParser.CONNECTION_ID - 827)) | (1 << (MariaDBParser.CONV - 827)) | (1 << (MariaDBParser.CONVERT_TZ - 827)) | (1 << (MariaDBParser.COS - 827)))) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & ((1 << (MariaDBParser.COT - 859)) | (1 << (MariaDBParser.CRC32 - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY - 859)) | (1 << (MariaDBParser.CREATE_DH_PARAMETERS - 859)) | (1 << (MariaDBParser.CREATE_DIGEST - 859)) | (1 << (MariaDBParser.CROSSES - 859)) | (1 << (MariaDBParser.DATEDIFF - 859)) | (1 << (MariaDBParser.DATE_FORMAT - 859)) | (1 << (MariaDBParser.DAYNAME - 859)) | (1 << (MariaDBParser.DAYOFMONTH - 859)) | (1 << (MariaDBParser.DAYOFWEEK - 859)) | (1 << (MariaDBParser.DAYOFYEAR - 859)) | (1 << (MariaDBParser.DECODE - 859)) | (1 << (MariaDBParser.DEGREES - 859)) | (1 << (MariaDBParser.DES_DECRYPT - 859)) | (1 << (MariaDBParser.DES_ENCRYPT - 859)) | (1 << (MariaDBParser.DIMENSION - 859)) | (1 << (MariaDBParser.DISJOINT - 859)) | (1 << (MariaDBParser.ELT - 859)) | (1 << (MariaDBParser.ENCODE - 859)) | (1 << (MariaDBParser.ENCRYPT - 859)) | (1 << (MariaDBParser.ENDPOINT - 859)) | (1 << (MariaDBParser.ENGINE_ATTRIBUTE - 859)) | (1 << (MariaDBParser.ENVELOPE - 859)) | (1 << (MariaDBParser.EQUALS - 859)) | (1 << (MariaDBParser.EXP - 859)) | (1 << (MariaDBParser.EXPORT_SET - 859)) | (1 << (MariaDBParser.EXTERIORRING - 859)) | (1 << (MariaDBParser.EXTRACTVALUE - 859)) | (1 << (MariaDBParser.FIELD - 859)) | (1 << (MariaDBParser.FIND_IN_SET - 859)))) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & ((1 << (MariaDBParser.FLOOR - 891)) | (1 << (MariaDBParser.FORMAT - 891)) | (1 << (MariaDBParser.FOUND_ROWS - 891)) | (1 << (MariaDBParser.FROM_BASE64 - 891)) | (1 << (MariaDBParser.FROM_DAYS - 891)) | (1 << (MariaDBParser.FROM_UNIXTIME - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYN - 891)) | (1 << (MariaDBParser.GEOMETRYTYPE - 891)) | (1 << (MariaDBParser.GEOMFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMFROMWKB - 891)) | (1 << (MariaDBParser.GET_FORMAT - 891)) | (1 << (MariaDBParser.GET_LOCK - 891)) | (1 << (MariaDBParser.GLENGTH - 891)) | (1 << (MariaDBParser.GREATEST - 891)) | (1 << (MariaDBParser.GTID_SUBSET - 891)) | (1 << (MariaDBParser.GTID_SUBTRACT - 891)) | (1 << (MariaDBParser.HEX - 891)) | (1 << (MariaDBParser.IFNULL - 891)) | (1 << (MariaDBParser.INET6_ATON - 891)) | (1 << (MariaDBParser.INET6_NTOA - 891)) | (1 << (MariaDBParser.INET_ATON - 891)) | (1 << (MariaDBParser.INET_NTOA - 891)) | (1 << (MariaDBParser.INSTR - 891)) | (1 << (MariaDBParser.INTERIORRINGN - 891)) | (1 << (MariaDBParser.INTERSECTS - 891)) | (1 << (MariaDBParser.ISCLOSED - 891)))) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & ((1 << (MariaDBParser.ISEMPTY - 923)) | (1 << (MariaDBParser.ISNULL - 923)) | (1 << (MariaDBParser.ISSIMPLE - 923)) | (1 << (MariaDBParser.IS_FREE_LOCK - 923)) | (1 << (MariaDBParser.IS_IPV4 - 923)) | (1 << (MariaDBParser.IS_IPV4_COMPAT - 923)) | (1 << (MariaDBParser.IS_IPV4_MAPPED - 923)) | (1 << (MariaDBParser.IS_IPV6 - 923)) | (1 << (MariaDBParser.IS_USED_LOCK - 923)) | (1 << (MariaDBParser.LAST_INSERT_ID - 923)) | (1 << (MariaDBParser.LCASE - 923)) | (1 << (MariaDBParser.LEAST - 923)) | (1 << (MariaDBParser.LENGTH - 923)) | (1 << (MariaDBParser.LINEFROMTEXT - 923)) | (1 << (MariaDBParser.LINEFROMWKB - 923)) | (1 << (MariaDBParser.LINESTRINGFROMTEXT - 923)) | (1 << (MariaDBParser.LINESTRINGFROMWKB - 923)) | (1 << (MariaDBParser.LN - 923)) | (1 << (MariaDBParser.LOAD_FILE - 923)) | (1 << (MariaDBParser.LOCATE - 923)) | (1 << (MariaDBParser.LOG - 923)) | (1 << (MariaDBParser.LOG10 - 923)) | (1 << (MariaDBParser.LOG2 - 923)) | (1 << (MariaDBParser.LOWER - 923)) | (1 << (MariaDBParser.LPAD - 923)) | (1 << (MariaDBParser.LTRIM - 923)) | (1 << (MariaDBParser.MAKEDATE - 923)) | (1 << (MariaDBParser.MAKETIME - 923)) | (1 << (MariaDBParser.MAKE_SET - 923)) | (1 << (MariaDBParser.MASTER_POS_WAIT - 923)) | (1 << (MariaDBParser.MBRCONTAINS - 923)) | (1 << (MariaDBParser.MBRDISJOINT - 923)))) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & ((1 << (MariaDBParser.MBREQUAL - 955)) | (1 << (MariaDBParser.MBRINTERSECTS - 955)) | (1 << (MariaDBParser.MBROVERLAPS - 955)) | (1 << (MariaDBParser.MBRTOUCHES - 955)) | (1 << (MariaDBParser.MBRWITHIN - 955)) | (1 << (MariaDBParser.MD5 - 955)) | (1 << (MariaDBParser.MLINEFROMTEXT - 955)) | (1 << (MariaDBParser.MLINEFROMWKB - 955)) | (1 << (MariaDBParser.MONTHNAME - 955)) | (1 << (MariaDBParser.MPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MPOLYFROMTEXT - 955)) | (1 << (MariaDBParser.MPOLYFROMWKB - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMTEXT - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMWKB - 955)) | (1 << (MariaDBParser.NAME_CONST - 955)) | (1 << (MariaDBParser.NULLIF - 955)) | (1 << (MariaDBParser.NUMGEOMETRIES - 955)) | (1 << (MariaDBParser.NUMINTERIORRINGS - 955)) | (1 << (MariaDBParser.NUMPOINTS - 955)) | (1 << (MariaDBParser.OCT - 955)) | (1 << (MariaDBParser.OCTET_LENGTH - 955)) | (1 << (MariaDBParser.ORD - 955)) | (1 << (MariaDBParser.OVERLAPS - 955)) | (1 << (MariaDBParser.PERIOD_ADD - 955)) | (1 << (MariaDBParser.PERIOD_DIFF - 955)) | (1 << (MariaDBParser.PI - 955)) | (1 << (MariaDBParser.POINTFROMTEXT - 955)))) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & ((1 << (MariaDBParser.POINTFROMWKB - 987)) | (1 << (MariaDBParser.POINTN - 987)) | (1 << (MariaDBParser.POLYFROMTEXT - 987)) | (1 << (MariaDBParser.POLYFROMWKB - 987)) | (1 << (MariaDBParser.POLYGONFROMTEXT - 987)) | (1 << (MariaDBParser.POLYGONFROMWKB - 987)) | (1 << (MariaDBParser.POW - 987)) | (1 << (MariaDBParser.POWER - 987)) | (1 << (MariaDBParser.QUOTE - 987)) | (1 << (MariaDBParser.RADIANS - 987)) | (1 << (MariaDBParser.RAND - 987)) | (1 << (MariaDBParser.RANDOM_BYTES - 987)) | (1 << (MariaDBParser.RELEASE_LOCK - 987)) | (1 << (MariaDBParser.REVERSE - 987)) | (1 << (MariaDBParser.ROUND - 987)) | (1 << (MariaDBParser.ROW_COUNT - 987)) | (1 << (MariaDBParser.RPAD - 987)) | (1 << (MariaDBParser.RTRIM - 987)) | (1 << (MariaDBParser.SEC_TO_TIME - 987)) | (1 << (MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE - 987)) | (1 << (MariaDBParser.SESSION_USER - 987)) | (1 << (MariaDBParser.SHA - 987)) | (1 << (MariaDBParser.SHA1 - 987)) | (1 << (MariaDBParser.SHA2 - 987)) | (1 << (MariaDBParser.SCHEMA_NAME - 987)) | (1 << (MariaDBParser.SIGN - 987)) | (1 << (MariaDBParser.SIN - 987)) | (1 << (MariaDBParser.SLEEP - 987)) | (1 << (MariaDBParser.SOUNDEX - 987)) | (1 << (MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS - 987)) | (1 << (MariaDBParser.SQRT - 987)) | (1 << (MariaDBParser.SRID - 987)))) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & ((1 << (MariaDBParser.STARTPOINT - 1019)) | (1 << (MariaDBParser.STRCMP - 1019)) | (1 << (MariaDBParser.STR_TO_DATE - 1019)) | (1 << (MariaDBParser.ST_AREA - 1019)) | (1 << (MariaDBParser.ST_ASBINARY - 1019)) | (1 << (MariaDBParser.ST_ASTEXT - 1019)) | (1 << (MariaDBParser.ST_ASWKB - 1019)) | (1 << (MariaDBParser.ST_ASWKT - 1019)) | (1 << (MariaDBParser.ST_BUFFER - 1019)) | (1 << (MariaDBParser.ST_CENTROID - 1019)) | (1 << (MariaDBParser.ST_CONTAINS - 1019)) | (1 << (MariaDBParser.ST_CROSSES - 1019)) | (1 << (MariaDBParser.ST_DIFFERENCE - 1019)) | (1 << (MariaDBParser.ST_DIMENSION - 1019)) | (1 << (MariaDBParser.ST_DISJOINT - 1019)) | (1 << (MariaDBParser.ST_DISTANCE - 1019)) | (1 << (MariaDBParser.ST_ENDPOINT - 1019)) | (1 << (MariaDBParser.ST_ENVELOPE - 1019)) | (1 << (MariaDBParser.ST_EQUALS - 1019)) | (1 << (MariaDBParser.ST_EXTERIORRING - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYN - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYTYPE - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMWKB - 1019)) | (1 << (MariaDBParser.ST_INTERIORRINGN - 1019)))) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & ((1 << (MariaDBParser.ST_INTERSECTION - 1051)) | (1 << (MariaDBParser.ST_INTERSECTS - 1051)) | (1 << (MariaDBParser.ST_ISCLOSED - 1051)) | (1 << (MariaDBParser.ST_ISEMPTY - 1051)) | (1 << (MariaDBParser.ST_ISSIMPLE - 1051)) | (1 << (MariaDBParser.ST_LINEFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINEFROMWKB - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMWKB - 1051)) | (1 << (MariaDBParser.ST_NUMGEOMETRIES - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRING - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRINGS - 1051)) | (1 << (MariaDBParser.ST_NUMPOINTS - 1051)) | (1 << (MariaDBParser.ST_OVERLAPS - 1051)) | (1 << (MariaDBParser.ST_POINTFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POINTFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POINTN - 1051)) | (1 << (MariaDBParser.ST_POLYFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMWKB - 1051)) | (1 << (MariaDBParser.ST_SRID - 1051)) | (1 << (MariaDBParser.ST_STARTPOINT - 1051)) | (1 << (MariaDBParser.ST_SYMDIFFERENCE - 1051)) | (1 << (MariaDBParser.ST_TOUCHES - 1051)) | (1 << (MariaDBParser.ST_UNION - 1051)) | (1 << (MariaDBParser.ST_WITHIN - 1051)) | (1 << (MariaDBParser.ST_X - 1051)) | (1 << (MariaDBParser.ST_Y - 1051)) | (1 << (MariaDBParser.SUBDATE - 1051)) | (1 << (MariaDBParser.SUBSTRING_INDEX - 1051)) | (1 << (MariaDBParser.SUBTIME - 1051)))) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & ((1 << (MariaDBParser.SYSTEM_USER - 1083)) | (1 << (MariaDBParser.TAN - 1083)) | (1 << (MariaDBParser.TIMEDIFF - 1083)) | (1 << (MariaDBParser.TIMESTAMPADD - 1083)) | (1 << (MariaDBParser.TIMESTAMPDIFF - 1083)) | (1 << (MariaDBParser.TIME_FORMAT - 1083)) | (1 << (MariaDBParser.TIME_TO_SEC - 1083)) | (1 << (MariaDBParser.TOUCHES - 1083)) | (1 << (MariaDBParser.TO_BASE64 - 1083)) | (1 << (MariaDBParser.TO_DAYS - 1083)) | (1 << (MariaDBParser.TO_SECONDS - 1083)) | (1 << (MariaDBParser.UCASE - 1083)) | (1 << (MariaDBParser.UNCOMPRESS - 1083)) | (1 << (MariaDBParser.UNCOMPRESSED_LENGTH - 1083)) | (1 << (MariaDBParser.UNHEX - 1083)) | (1 << (MariaDBParser.UNIX_TIMESTAMP - 1083)) | (1 << (MariaDBParser.UPDATEXML - 1083)) | (1 << (MariaDBParser.UPPER - 1083)) | (1 << (MariaDBParser.UUID - 1083)) | (1 << (MariaDBParser.UUID_SHORT - 1083)) | (1 << (MariaDBParser.VALIDATE_PASSWORD_STRENGTH - 1083)) | (1 << (MariaDBParser.VERSION - 1083)) | (1 << (MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1083)) | (1 << (MariaDBParser.WEEKDAY - 1083)) | (1 << (MariaDBParser.WEEKOFYEAR - 1083)) | (1 << (MariaDBParser.WEIGHT_STRING - 1083)) | (1 << (MariaDBParser.WITHIN - 1083)) | (1 << (MariaDBParser.YEARWEEK - 1083)) | (1 << (MariaDBParser.Y_FUNCTION - 1083)) | (1 << (MariaDBParser.X_FUNCTION - 1083)) | (1 << (MariaDBParser.VIA - 1083)) | (1 << (MariaDBParser.LASTVAL - 1083)))) !== 0) || ((((_la - 1115)) & ~0x1F) === 0 && ((1 << (_la - 1115)) & ((1 << (MariaDBParser.NEXTVAL - 1115)) | (1 << (MariaDBParser.SETVAL - 1115)) | (1 << (MariaDBParser.PREVIOUS - 1115)) | (1 << (MariaDBParser.PERSISTENT - 1115)) | (1 << (MariaDBParser.BINLOG_MONITOR - 1115)) | (1 << (MariaDBParser.BINLOG_REPLAY - 1115)) | (1 << (MariaDBParser.FEDERATED_ADMIN - 1115)) | (1 << (MariaDBParser.READ_ONLY_ADMIN - 1115)) | (1 << (MariaDBParser.REPLICA - 1115)) | (1 << (MariaDBParser.REPLICAS - 1115)) | (1 << (MariaDBParser.REPLICATION_MASTER_ADMIN - 1115)) | (1 << (MariaDBParser.MONITOR - 1115)) | (1 << (MariaDBParser.READ_ONLY - 1115)) | (1 << (MariaDBParser.REPLAY - 1115)) | (1 << (MariaDBParser.MOD - 1115)))) !== 0) || ((((_la - 1166)) & ~0x1F) === 0 && ((1 << (_la - 1166)) & ((1 << (MariaDBParser.CHARSET_REVERSE_QOUTE_STRING - 1166)) | (1 << (MariaDBParser.STRING_LITERAL - 1166)) | (1 << (MariaDBParser.ID - 1166)))) !== 0)) {
				{
				this.state = 4933;
				this.uid();
				this.state = 4934;
				this.match(MariaDBParser.COLON_SYMB);
				}
			}

			this.state = 4938;
			this.match(MariaDBParser.REPEAT);
			this.state = 4940;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4939;
					this.procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4942;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 729, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 4944;
			this.match(MariaDBParser.UNTIL);
			this.state = 4945;
			this.expression(0);
			this.state = 4946;
			this.match(MariaDBParser.END);
			this.state = 4947;
			this.match(MariaDBParser.REPEAT);
			this.state = 4949;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MariaDBParser.ATTRIBUTE) | (1 << MariaDBParser.BODY) | (1 << MariaDBParser.BUCKETS) | (1 << MariaDBParser.CONDITION))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (MariaDBParser.CURRENT - 36)) | (1 << (MariaDBParser.CURRENT_ROLE - 36)) | (1 << (MariaDBParser.CURRENT_USER - 36)) | (1 << (MariaDBParser.DATABASE - 36)) | (1 << (MariaDBParser.DEFAULT - 36)) | (1 << (MariaDBParser.DIAGNOSTICS - 36)) | (1 << (MariaDBParser.EMPTY - 36)) | (1 << (MariaDBParser.EXCEPT - 36)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (MariaDBParser.GROUP - 73)) | (1 << (MariaDBParser.IF - 73)) | (1 << (MariaDBParser.IGNORED - 73)) | (1 << (MariaDBParser.INSERT - 73)) | (1 << (MariaDBParser.LATERAL - 73)) | (1 << (MariaDBParser.LEFT - 73)) | (1 << (MariaDBParser.LOCKED - 73)))) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & ((1 << (MariaDBParser.MAXVALUE - 110)) | (1 << (MariaDBParser.MINVALUE - 110)) | (1 << (MariaDBParser.NUMBER - 110)) | (1 << (MariaDBParser.OPTIONAL - 110)) | (1 << (MariaDBParser.ORDER - 110)) | (1 << (MariaDBParser.PRIMARY - 110)) | (1 << (MariaDBParser.PACKAGE - 110)))) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (MariaDBParser.REPLACE - 142)) | (1 << (MariaDBParser.RIGHT - 142)) | (1 << (MariaDBParser.SCHEMA - 142)) | (1 << (MariaDBParser.SKIP_ - 142)) | (1 << (MariaDBParser.STACKED - 142)) | (1 << (MariaDBParser.STATEMENT - 142)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MariaDBParser.DATE - 217)) | (1 << (MariaDBParser.TIME - 217)) | (1 << (MariaDBParser.TIMESTAMP - 217)) | (1 << (MariaDBParser.DATETIME - 217)) | (1 << (MariaDBParser.YEAR - 217)) | (1 << (MariaDBParser.BINARY - 217)) | (1 << (MariaDBParser.TEXT - 217)) | (1 << (MariaDBParser.ENUM - 217)) | (1 << (MariaDBParser.SERIAL - 217)))) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & ((1 << (MariaDBParser.JSON_ARRAY - 251)) | (1 << (MariaDBParser.JSON_ARRAYAGG - 251)) | (1 << (MariaDBParser.JSON_ARRAY_APPEND - 251)) | (1 << (MariaDBParser.JSON_ARRAY_INSERT - 251)) | (1 << (MariaDBParser.JSON_CONTAINS - 251)) | (1 << (MariaDBParser.JSON_CONTAINS_PATH - 251)) | (1 << (MariaDBParser.JSON_DEPTH - 251)) | (1 << (MariaDBParser.JSON_EXTRACT - 251)) | (1 << (MariaDBParser.JSON_INSERT - 251)) | (1 << (MariaDBParser.JSON_KEYS - 251)) | (1 << (MariaDBParser.JSON_LENGTH - 251)) | (1 << (MariaDBParser.JSON_MERGE - 251)) | (1 << (MariaDBParser.JSON_MERGE_PATCH - 251)) | (1 << (MariaDBParser.JSON_MERGE_PRESERVE - 251)) | (1 << (MariaDBParser.JSON_OBJECT - 251)) | (1 << (MariaDBParser.JSON_OBJECTAGG - 251)) | (1 << (MariaDBParser.JSON_OVERLAPS - 251)) | (1 << (MariaDBParser.JSON_PRETTY - 251)) | (1 << (MariaDBParser.JSON_QUOTE - 251)) | (1 << (MariaDBParser.JSON_REMOVE - 251)) | (1 << (MariaDBParser.JSON_REPLACE - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALID - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT - 251)) | (1 << (MariaDBParser.JSON_SEARCH - 251)) | (1 << (MariaDBParser.JSON_SET - 251)) | (1 << (MariaDBParser.JSON_STORAGE_FREE - 251)) | (1 << (MariaDBParser.JSON_STORAGE_SIZE - 251)) | (1 << (MariaDBParser.JSON_TABLE - 251)) | (1 << (MariaDBParser.JSON_TYPE - 251)) | (1 << (MariaDBParser.JSON_UNQUOTE - 251)) | (1 << (MariaDBParser.JSON_VALID - 251)) | (1 << (MariaDBParser.JSON_VALUE - 251)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (MariaDBParser.NESTED - 283)) | (1 << (MariaDBParser.ORDINALITY - 283)) | (1 << (MariaDBParser.PATH - 283)) | (1 << (MariaDBParser.AVG - 283)) | (1 << (MariaDBParser.BIT_AND - 283)) | (1 << (MariaDBParser.BIT_OR - 283)) | (1 << (MariaDBParser.BIT_XOR - 283)) | (1 << (MariaDBParser.COUNT - 283)) | (1 << (MariaDBParser.CUME_DIST - 283)) | (1 << (MariaDBParser.DENSE_RANK - 283)) | (1 << (MariaDBParser.FIRST_VALUE - 283)) | (1 << (MariaDBParser.GROUP_CONCAT - 283)) | (1 << (MariaDBParser.LAG - 283)) | (1 << (MariaDBParser.LAST_VALUE - 283)) | (1 << (MariaDBParser.LEAD - 283)) | (1 << (MariaDBParser.MAX - 283)) | (1 << (MariaDBParser.MIN - 283)) | (1 << (MariaDBParser.NTILE - 283)) | (1 << (MariaDBParser.NTH_VALUE - 283)) | (1 << (MariaDBParser.PERCENT_RANK - 283)) | (1 << (MariaDBParser.RANK - 283)) | (1 << (MariaDBParser.ROW_NUMBER - 283)) | (1 << (MariaDBParser.STD - 283)) | (1 << (MariaDBParser.STDDEV - 283)) | (1 << (MariaDBParser.STDDEV_POP - 283)) | (1 << (MariaDBParser.STDDEV_SAMP - 283)) | (1 << (MariaDBParser.SUM - 283)) | (1 << (MariaDBParser.VAR_POP - 283)) | (1 << (MariaDBParser.VAR_SAMP - 283)) | (1 << (MariaDBParser.VARIANCE - 283)) | (1 << (MariaDBParser.CURRENT_DATE - 283)) | (1 << (MariaDBParser.CURRENT_TIME - 283)))) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & ((1 << (MariaDBParser.CURRENT_TIMESTAMP - 315)) | (1 << (MariaDBParser.LOCALTIME - 315)) | (1 << (MariaDBParser.CURDATE - 315)) | (1 << (MariaDBParser.CURTIME - 315)) | (1 << (MariaDBParser.DATE_ADD - 315)) | (1 << (MariaDBParser.DATE_SUB - 315)) | (1 << (MariaDBParser.LOCALTIMESTAMP - 315)) | (1 << (MariaDBParser.NOW - 315)) | (1 << (MariaDBParser.POSITION - 315)) | (1 << (MariaDBParser.SUBSTR - 315)) | (1 << (MariaDBParser.SUBSTRING - 315)) | (1 << (MariaDBParser.SYSDATE - 315)) | (1 << (MariaDBParser.TRIM - 315)) | (1 << (MariaDBParser.UTC_DATE - 315)) | (1 << (MariaDBParser.UTC_TIME - 315)) | (1 << (MariaDBParser.UTC_TIMESTAMP - 315)) | (1 << (MariaDBParser.ACCOUNT - 315)) | (1 << (MariaDBParser.ACTION - 315)) | (1 << (MariaDBParser.AFTER - 315)) | (1 << (MariaDBParser.AGGREGATE - 315)) | (1 << (MariaDBParser.ALGORITHM - 315)) | (1 << (MariaDBParser.ANY - 315)) | (1 << (MariaDBParser.AT - 315)) | (1 << (MariaDBParser.AUTHORS - 315)) | (1 << (MariaDBParser.AUTOCOMMIT - 315)) | (1 << (MariaDBParser.AUTOEXTEND_SIZE - 315)) | (1 << (MariaDBParser.AUTO_INCREMENT - 315)) | (1 << (MariaDBParser.AVG_ROW_LENGTH - 315)) | (1 << (MariaDBParser.BEGIN - 315)) | (1 << (MariaDBParser.BINLOG - 315)) | (1 << (MariaDBParser.BIT - 315)))) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & ((1 << (MariaDBParser.BLOCK - 347)) | (1 << (MariaDBParser.BOOL - 347)) | (1 << (MariaDBParser.BOOLEAN - 347)) | (1 << (MariaDBParser.BTREE - 347)) | (1 << (MariaDBParser.CACHE - 347)) | (1 << (MariaDBParser.CASCADED - 347)) | (1 << (MariaDBParser.CHAIN - 347)) | (1 << (MariaDBParser.CHANGED - 347)) | (1 << (MariaDBParser.CHANNEL - 347)) | (1 << (MariaDBParser.CHECKSUM - 347)) | (1 << (MariaDBParser.PAGE_CHECKSUM - 347)) | (1 << (MariaDBParser.CIPHER - 347)) | (1 << (MariaDBParser.CLASS_ORIGIN - 347)) | (1 << (MariaDBParser.CLIENT - 347)) | (1 << (MariaDBParser.CLOSE - 347)) | (1 << (MariaDBParser.CLUSTERING - 347)) | (1 << (MariaDBParser.COALESCE - 347)) | (1 << (MariaDBParser.CODE - 347)) | (1 << (MariaDBParser.COLUMNS - 347)) | (1 << (MariaDBParser.COLUMN_FORMAT - 347)) | (1 << (MariaDBParser.COLUMN_NAME - 347)) | (1 << (MariaDBParser.COMMENT - 347)) | (1 << (MariaDBParser.COMMIT - 347)) | (1 << (MariaDBParser.COMPACT - 347)) | (1 << (MariaDBParser.COMPLETION - 347)) | (1 << (MariaDBParser.COMPRESSED - 347)) | (1 << (MariaDBParser.COMPRESSION - 347)) | (1 << (MariaDBParser.CONCURRENT - 347)) | (1 << (MariaDBParser.CONNECT - 347)) | (1 << (MariaDBParser.CONNECTION - 347)) | (1 << (MariaDBParser.CONSISTENT - 347)) | (1 << (MariaDBParser.CONSTRAINT_CATALOG - 347)))) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & ((1 << (MariaDBParser.CONSTRAINT_SCHEMA - 379)) | (1 << (MariaDBParser.CONSTRAINT_NAME - 379)) | (1 << (MariaDBParser.CONTAINS - 379)) | (1 << (MariaDBParser.CONTEXT - 379)) | (1 << (MariaDBParser.CONTRIBUTORS - 379)) | (1 << (MariaDBParser.COPY - 379)) | (1 << (MariaDBParser.CPU - 379)) | (1 << (MariaDBParser.CYCLE - 379)) | (1 << (MariaDBParser.CURSOR_NAME - 379)) | (1 << (MariaDBParser.DATA - 379)) | (1 << (MariaDBParser.DATAFILE - 379)) | (1 << (MariaDBParser.DEALLOCATE - 379)) | (1 << (MariaDBParser.DEFAULT_AUTH - 379)) | (1 << (MariaDBParser.DEFINER - 379)) | (1 << (MariaDBParser.DELAY_KEY_WRITE - 379)) | (1 << (MariaDBParser.DES_KEY_FILE - 379)) | (1 << (MariaDBParser.DIRECTORY - 379)) | (1 << (MariaDBParser.DISABLE - 379)) | (1 << (MariaDBParser.DISCARD - 379)) | (1 << (MariaDBParser.DISK - 379)) | (1 << (MariaDBParser.DO - 379)) | (1 << (MariaDBParser.DUMPFILE - 379)) | (1 << (MariaDBParser.DUPLICATE - 379)) | (1 << (MariaDBParser.DYNAMIC - 379)) | (1 << (MariaDBParser.ENABLE - 379)) | (1 << (MariaDBParser.ENCRYPTED - 379)) | (1 << (MariaDBParser.ENCRYPTION - 379)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ID - 379)) | (1 << (MariaDBParser.END - 379)) | (1 << (MariaDBParser.ENDS - 379)) | (1 << (MariaDBParser.ENGINE - 379)) | (1 << (MariaDBParser.ENGINES - 379)))) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & ((1 << (MariaDBParser.ERROR - 411)) | (1 << (MariaDBParser.ERRORS - 411)) | (1 << (MariaDBParser.ESCAPE - 411)) | (1 << (MariaDBParser.EVEN - 411)) | (1 << (MariaDBParser.EVENT - 411)) | (1 << (MariaDBParser.EVENTS - 411)) | (1 << (MariaDBParser.EVERY - 411)) | (1 << (MariaDBParser.EXCHANGE - 411)) | (1 << (MariaDBParser.EXCLUSIVE - 411)) | (1 << (MariaDBParser.EXPIRE - 411)) | (1 << (MariaDBParser.EXPORT - 411)) | (1 << (MariaDBParser.EXTENDED - 411)) | (1 << (MariaDBParser.EXTENT_SIZE - 411)) | (1 << (MariaDBParser.FAILED_LOGIN_ATTEMPTS - 411)) | (1 << (MariaDBParser.FAST - 411)) | (1 << (MariaDBParser.FAULTS - 411)) | (1 << (MariaDBParser.FIELDS - 411)) | (1 << (MariaDBParser.FILE_BLOCK_SIZE - 411)) | (1 << (MariaDBParser.FILTER - 411)) | (1 << (MariaDBParser.FIRST - 411)) | (1 << (MariaDBParser.FIXED - 411)) | (1 << (MariaDBParser.FLUSH - 411)) | (1 << (MariaDBParser.FOLLOWS - 411)) | (1 << (MariaDBParser.FOUND - 411)) | (1 << (MariaDBParser.FULL - 411)) | (1 << (MariaDBParser.FUNCTION - 411)) | (1 << (MariaDBParser.GENERAL - 411)) | (1 << (MariaDBParser.GLOBAL - 411)) | (1 << (MariaDBParser.GRANTS - 411)) | (1 << (MariaDBParser.GROUP_REPLICATION - 411)) | (1 << (MariaDBParser.HANDLER - 411)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (MariaDBParser.HASH - 443)) | (1 << (MariaDBParser.HELP - 443)) | (1 << (MariaDBParser.HISTORY - 443)) | (1 << (MariaDBParser.HOST - 443)) | (1 << (MariaDBParser.HOSTS - 443)) | (1 << (MariaDBParser.IDENTIFIED - 443)) | (1 << (MariaDBParser.IGNORE_SERVER_IDS - 443)) | (1 << (MariaDBParser.IMPORT - 443)) | (1 << (MariaDBParser.INCREMENT - 443)) | (1 << (MariaDBParser.INDEXES - 443)) | (1 << (MariaDBParser.INITIAL_SIZE - 443)) | (1 << (MariaDBParser.INPLACE - 443)) | (1 << (MariaDBParser.INSERT_METHOD - 443)) | (1 << (MariaDBParser.INSTALL - 443)) | (1 << (MariaDBParser.INSTANCE - 443)) | (1 << (MariaDBParser.INSTANT - 443)) | (1 << (MariaDBParser.INVISIBLE - 443)) | (1 << (MariaDBParser.INVOKER - 443)) | (1 << (MariaDBParser.IO - 443)) | (1 << (MariaDBParser.IO_THREAD - 443)) | (1 << (MariaDBParser.IPC - 443)) | (1 << (MariaDBParser.ISOLATION - 443)) | (1 << (MariaDBParser.ISSUER - 443)) | (1 << (MariaDBParser.JSON - 443)) | (1 << (MariaDBParser.KEY_BLOCK_SIZE - 443)) | (1 << (MariaDBParser.LANGUAGE - 443)) | (1 << (MariaDBParser.LAST - 443)) | (1 << (MariaDBParser.LEAVES - 443)) | (1 << (MariaDBParser.LESS - 443)) | (1 << (MariaDBParser.LEVEL - 443)) | (1 << (MariaDBParser.LIST - 443)) | (1 << (MariaDBParser.LOCAL - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (MariaDBParser.LOCALES - 475)) | (1 << (MariaDBParser.LOGFILE - 475)) | (1 << (MariaDBParser.LOGS - 475)) | (1 << (MariaDBParser.MASTER - 475)) | (1 << (MariaDBParser.MASTER_AUTO_POSITION - 475)) | (1 << (MariaDBParser.MASTER_CONNECT_RETRY - 475)) | (1 << (MariaDBParser.MASTER_DELAY - 475)) | (1 << (MariaDBParser.MASTER_HEARTBEAT_PERIOD - 475)) | (1 << (MariaDBParser.MASTER_HOST - 475)) | (1 << (MariaDBParser.MASTER_LOG_FILE - 475)) | (1 << (MariaDBParser.MASTER_LOG_POS - 475)) | (1 << (MariaDBParser.MASTER_PASSWORD - 475)) | (1 << (MariaDBParser.MASTER_PORT - 475)) | (1 << (MariaDBParser.MASTER_RETRY_COUNT - 475)) | (1 << (MariaDBParser.MASTER_SSL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CA - 475)) | (1 << (MariaDBParser.MASTER_SSL_CAPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_CERT - 475)) | (1 << (MariaDBParser.MASTER_SSL_CIPHER - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRLPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_KEY - 475)) | (1 << (MariaDBParser.MASTER_TLS_VERSION - 475)) | (1 << (MariaDBParser.MASTER_USER - 475)) | (1 << (MariaDBParser.MAX_CONNECTIONS_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_QUERIES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_ROWS - 475)) | (1 << (MariaDBParser.MAX_SIZE - 475)) | (1 << (MariaDBParser.MAX_UPDATES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_USER_CONNECTIONS - 475)) | (1 << (MariaDBParser.MEDIUM - 475)) | (1 << (MariaDBParser.MEMBER - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (MariaDBParser.MERGE - 507)) | (1 << (MariaDBParser.MESSAGE_TEXT - 507)) | (1 << (MariaDBParser.MID - 507)) | (1 << (MariaDBParser.MIGRATE - 507)) | (1 << (MariaDBParser.MIN_ROWS - 507)) | (1 << (MariaDBParser.MODE - 507)) | (1 << (MariaDBParser.MODIFY - 507)) | (1 << (MariaDBParser.MUTEX - 507)) | (1 << (MariaDBParser.MYSQL - 507)) | (1 << (MariaDBParser.MYSQL_ERRNO - 507)) | (1 << (MariaDBParser.NAME - 507)) | (1 << (MariaDBParser.NAMES - 507)) | (1 << (MariaDBParser.NCHAR - 507)) | (1 << (MariaDBParser.NEVER - 507)) | (1 << (MariaDBParser.NEXT - 507)) | (1 << (MariaDBParser.NO - 507)) | (1 << (MariaDBParser.NOCACHE - 507)) | (1 << (MariaDBParser.NOCOPY - 507)) | (1 << (MariaDBParser.NOCYCLE - 507)) | (1 << (MariaDBParser.NOMAXVALUE - 507)) | (1 << (MariaDBParser.NOMINVALUE - 507)) | (1 << (MariaDBParser.NOWAIT - 507)) | (1 << (MariaDBParser.NODEGROUP - 507)) | (1 << (MariaDBParser.NONE - 507)) | (1 << (MariaDBParser.ODBC - 507)) | (1 << (MariaDBParser.OFFLINE - 507)) | (1 << (MariaDBParser.OFFSET - 507)) | (1 << (MariaDBParser.OF - 507)) | (1 << (MariaDBParser.OJ - 507)) | (1 << (MariaDBParser.OLD_PASSWORD - 507)) | (1 << (MariaDBParser.ONE - 507)) | (1 << (MariaDBParser.ONLINE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (MariaDBParser.ONLY - 539)) | (1 << (MariaDBParser.OPEN - 539)) | (1 << (MariaDBParser.OPTIMIZER_COSTS - 539)) | (1 << (MariaDBParser.OPTIONS - 539)) | (1 << (MariaDBParser.OWNER - 539)) | (1 << (MariaDBParser.PACK_KEYS - 539)) | (1 << (MariaDBParser.PAGE - 539)) | (1 << (MariaDBParser.PARSER - 539)) | (1 << (MariaDBParser.PARTIAL - 539)) | (1 << (MariaDBParser.PARTITIONING - 539)) | (1 << (MariaDBParser.PARTITIONS - 539)) | (1 << (MariaDBParser.PASSWORD - 539)) | (1 << (MariaDBParser.PASSWORD_LOCK_TIME - 539)) | (1 << (MariaDBParser.PHASE - 539)) | (1 << (MariaDBParser.PLUGIN - 539)) | (1 << (MariaDBParser.PLUGIN_DIR - 539)) | (1 << (MariaDBParser.PLUGINS - 539)) | (1 << (MariaDBParser.PORT - 539)) | (1 << (MariaDBParser.PRECEDES - 539)) | (1 << (MariaDBParser.PREPARE - 539)) | (1 << (MariaDBParser.PRESERVE - 539)) | (1 << (MariaDBParser.PREV - 539)) | (1 << (MariaDBParser.PROCESSLIST - 539)) | (1 << (MariaDBParser.PROFILE - 539)) | (1 << (MariaDBParser.PROFILES - 539)) | (1 << (MariaDBParser.PROXY - 539)) | (1 << (MariaDBParser.QUERY - 539)) | (1 << (MariaDBParser.QUERY_RESPONSE_TIME - 539)) | (1 << (MariaDBParser.QUICK - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (MariaDBParser.REBUILD - 571)) | (1 << (MariaDBParser.RECOVER - 571)) | (1 << (MariaDBParser.RECURSIVE - 571)) | (1 << (MariaDBParser.REDO_BUFFER_SIZE - 571)) | (1 << (MariaDBParser.REDUNDANT - 571)) | (1 << (MariaDBParser.RELAY - 571)) | (1 << (MariaDBParser.RELAY_LOG_FILE - 571)) | (1 << (MariaDBParser.RELAY_LOG_POS - 571)) | (1 << (MariaDBParser.RELAYLOG - 571)) | (1 << (MariaDBParser.REMOVE - 571)) | (1 << (MariaDBParser.REORGANIZE - 571)) | (1 << (MariaDBParser.REPAIR - 571)) | (1 << (MariaDBParser.REPLICATE_DO_DB - 571)) | (1 << (MariaDBParser.REPLICATE_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_REWRITE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATION - 571)) | (1 << (MariaDBParser.RESET - 571)) | (1 << (MariaDBParser.RESTART - 571)) | (1 << (MariaDBParser.RESUME - 571)) | (1 << (MariaDBParser.RETURNED_SQLSTATE - 571)) | (1 << (MariaDBParser.RETURNS - 571)) | (1 << (MariaDBParser.REUSE - 571)) | (1 << (MariaDBParser.ROLE - 571)) | (1 << (MariaDBParser.ROLLBACK - 571)) | (1 << (MariaDBParser.ROLLUP - 571)) | (1 << (MariaDBParser.ROTATE - 571)) | (1 << (MariaDBParser.ROW - 571)))) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & ((1 << (MariaDBParser.ROWS - 603)) | (1 << (MariaDBParser.ROW_FORMAT - 603)) | (1 << (MariaDBParser.RTREE - 603)) | (1 << (MariaDBParser.SAVEPOINT - 603)) | (1 << (MariaDBParser.SCHEDULE - 603)) | (1 << (MariaDBParser.SECURITY - 603)) | (1 << (MariaDBParser.SEQUENCE - 603)) | (1 << (MariaDBParser.SERVER - 603)) | (1 << (MariaDBParser.SESSION - 603)) | (1 << (MariaDBParser.SHARE - 603)) | (1 << (MariaDBParser.SHARED - 603)) | (1 << (MariaDBParser.SIGNED - 603)) | (1 << (MariaDBParser.SIMPLE - 603)) | (1 << (MariaDBParser.SLAVE - 603)) | (1 << (MariaDBParser.SLAVES - 603)) | (1 << (MariaDBParser.SLOW - 603)) | (1 << (MariaDBParser.SNAPSHOT - 603)) | (1 << (MariaDBParser.SOCKET - 603)) | (1 << (MariaDBParser.SOME - 603)) | (1 << (MariaDBParser.SONAME - 603)) | (1 << (MariaDBParser.SOUNDS - 603)) | (1 << (MariaDBParser.SOURCE - 603)) | (1 << (MariaDBParser.SQL_AFTER_GTIDS - 603)) | (1 << (MariaDBParser.SQL_AFTER_MTS_GAPS - 603)) | (1 << (MariaDBParser.SQL_BEFORE_GTIDS - 603)) | (1 << (MariaDBParser.SQL_BUFFER_RESULT - 603)) | (1 << (MariaDBParser.SQL_CACHE - 603)) | (1 << (MariaDBParser.SQL_NO_CACHE - 603)) | (1 << (MariaDBParser.SQL_THREAD - 603)) | (1 << (MariaDBParser.START - 603)) | (1 << (MariaDBParser.STARTS - 603)) | (1 << (MariaDBParser.STATS_AUTO_RECALC - 603)))) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & ((1 << (MariaDBParser.STATS_PERSISTENT - 635)) | (1 << (MariaDBParser.STATS_SAMPLE_PAGES - 635)) | (1 << (MariaDBParser.STATUS - 635)) | (1 << (MariaDBParser.STOP - 635)) | (1 << (MariaDBParser.STORAGE - 635)) | (1 << (MariaDBParser.STRING - 635)) | (1 << (MariaDBParser.SUBCLASS_ORIGIN - 635)) | (1 << (MariaDBParser.SUBJECT - 635)) | (1 << (MariaDBParser.SUBPARTITION - 635)) | (1 << (MariaDBParser.SUBPARTITIONS - 635)) | (1 << (MariaDBParser.SUSPEND - 635)) | (1 << (MariaDBParser.SWAPS - 635)) | (1 << (MariaDBParser.SWITCHES - 635)) | (1 << (MariaDBParser.TABLE_NAME - 635)) | (1 << (MariaDBParser.TABLESPACE - 635)) | (1 << (MariaDBParser.TABLE_TYPE - 635)) | (1 << (MariaDBParser.TEMPORARY - 635)) | (1 << (MariaDBParser.TEMPTABLE - 635)) | (1 << (MariaDBParser.THAN - 635)) | (1 << (MariaDBParser.TRADITIONAL - 635)) | (1 << (MariaDBParser.TRANSACTION - 635)) | (1 << (MariaDBParser.TRANSACTIONAL - 635)) | (1 << (MariaDBParser.TRIGGERS - 635)) | (1 << (MariaDBParser.TRUNCATE - 635)) | (1 << (MariaDBParser.TYPES - 635)) | (1 << (MariaDBParser.UNBOUNDED - 635)) | (1 << (MariaDBParser.UNDEFINED - 635)) | (1 << (MariaDBParser.UNDOFILE - 635)) | (1 << (MariaDBParser.UNDO_BUFFER_SIZE - 635)) | (1 << (MariaDBParser.UNINSTALL - 635)) | (1 << (MariaDBParser.UNKNOWN - 635)))) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & ((1 << (MariaDBParser.UNTIL - 667)) | (1 << (MariaDBParser.UPGRADE - 667)) | (1 << (MariaDBParser.USER - 667)) | (1 << (MariaDBParser.USE_FRM - 667)) | (1 << (MariaDBParser.USER_RESOURCES - 667)) | (1 << (MariaDBParser.VALIDATION - 667)) | (1 << (MariaDBParser.VALUE - 667)) | (1 << (MariaDBParser.VARIABLES - 667)) | (1 << (MariaDBParser.VIEW - 667)) | (1 << (MariaDBParser.VIRTUAL - 667)) | (1 << (MariaDBParser.VISIBLE - 667)) | (1 << (MariaDBParser.WAIT - 667)) | (1 << (MariaDBParser.WARNINGS - 667)) | (1 << (MariaDBParser.WITHOUT - 667)) | (1 << (MariaDBParser.WORK - 667)) | (1 << (MariaDBParser.WRAPPER - 667)) | (1 << (MariaDBParser.WSREP_MEMBERSHIP - 667)) | (1 << (MariaDBParser.WSREP_STATUS - 667)) | (1 << (MariaDBParser.X509 - 667)) | (1 << (MariaDBParser.XA - 667)) | (1 << (MariaDBParser.XML - 667)) | (1 << (MariaDBParser.EUR - 667)) | (1 << (MariaDBParser.USA - 667)) | (1 << (MariaDBParser.JIS - 667)) | (1 << (MariaDBParser.ISO - 667)) | (1 << (MariaDBParser.INTERNAL - 667)) | (1 << (MariaDBParser.QUARTER - 667)) | (1 << (MariaDBParser.MONTH - 667)) | (1 << (MariaDBParser.DAY - 667)) | (1 << (MariaDBParser.HOUR - 667)))) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & ((1 << (MariaDBParser.MINUTE - 699)) | (1 << (MariaDBParser.WEEK - 699)) | (1 << (MariaDBParser.SECOND - 699)) | (1 << (MariaDBParser.MICROSECOND - 699)) | (1 << (MariaDBParser.USER_STATISTICS - 699)) | (1 << (MariaDBParser.CLIENT_STATISTICS - 699)) | (1 << (MariaDBParser.INDEX_STATISTICS - 699)) | (1 << (MariaDBParser.TABLE_STATISTICS - 699)) | (1 << (MariaDBParser.ADMIN - 699)) | (1 << (MariaDBParser.AUDIT_ADMIN - 699)) | (1 << (MariaDBParser.BACKUP_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ENCRYPTION_ADMIN - 699)) | (1 << (MariaDBParser.CLONE_ADMIN - 699)) | (1 << (MariaDBParser.CONNECTION_ADMIN - 699)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ADMIN - 699)) | (1 << (MariaDBParser.EXECUTE - 699)) | (1 << (MariaDBParser.FILE - 699)) | (1 << (MariaDBParser.FIREWALL_ADMIN - 699)) | (1 << (MariaDBParser.FIREWALL_USER - 699)) | (1 << (MariaDBParser.GROUP_REPLICATION_ADMIN - 699)) | (1 << (MariaDBParser.INNODB_REDO_LOG_ARCHIVE - 699)) | (1 << (MariaDBParser.INVOKE - 699)) | (1 << (MariaDBParser.LAMBDA - 699)) | (1 << (MariaDBParser.NDB_STORED_USER - 699)) | (1 << (MariaDBParser.PASSWORDLESS_USER_ADMIN - 699)))) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & ((1 << (MariaDBParser.PERSIST_RO_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.PRIVILEGES - 731)) | (1 << (MariaDBParser.PROCESS - 731)) | (1 << (MariaDBParser.RELOAD - 731)) | (1 << (MariaDBParser.REPLICATION_APPLIER - 731)) | (1 << (MariaDBParser.REPLICATION_SLAVE_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_USER - 731)) | (1 << (MariaDBParser.ROLE_ADMIN - 731)) | (1 << (MariaDBParser.ROUTINE - 731)) | (1 << (MariaDBParser.S3 - 731)) | (1 << (MariaDBParser.SESSION_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.SET_USER_ID - 731)) | (1 << (MariaDBParser.SHOW_ROUTINE - 731)) | (1 << (MariaDBParser.SHUTDOWN - 731)) | (1 << (MariaDBParser.SUPER - 731)) | (1 << (MariaDBParser.SYSTEM_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.TABLES - 731)) | (1 << (MariaDBParser.TABLE_ENCRYPTION_ADMIN - 731)) | (1 << (MariaDBParser.VERSION_TOKEN_ADMIN - 731)) | (1 << (MariaDBParser.XA_RECOVER_ADMIN - 731)) | (1 << (MariaDBParser.ARMSCII8 - 731)) | (1 << (MariaDBParser.ASCII - 731)) | (1 << (MariaDBParser.BIG5 - 731)) | (1 << (MariaDBParser.CP1250 - 731)) | (1 << (MariaDBParser.CP1251 - 731)) | (1 << (MariaDBParser.CP1256 - 731)) | (1 << (MariaDBParser.CP1257 - 731)) | (1 << (MariaDBParser.CP850 - 731)) | (1 << (MariaDBParser.CP852 - 731)) | (1 << (MariaDBParser.CP866 - 731)))) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & ((1 << (MariaDBParser.CP932 - 763)) | (1 << (MariaDBParser.DEC8 - 763)) | (1 << (MariaDBParser.EUCJPMS - 763)) | (1 << (MariaDBParser.EUCKR - 763)) | (1 << (MariaDBParser.GB18030 - 763)) | (1 << (MariaDBParser.GB2312 - 763)) | (1 << (MariaDBParser.GBK - 763)) | (1 << (MariaDBParser.GEOSTD8 - 763)) | (1 << (MariaDBParser.GREEK - 763)) | (1 << (MariaDBParser.HEBREW - 763)) | (1 << (MariaDBParser.HP8 - 763)) | (1 << (MariaDBParser.KEYBCS2 - 763)) | (1 << (MariaDBParser.KOI8R - 763)) | (1 << (MariaDBParser.KOI8U - 763)) | (1 << (MariaDBParser.LATIN1 - 763)) | (1 << (MariaDBParser.LATIN2 - 763)) | (1 << (MariaDBParser.LATIN5 - 763)) | (1 << (MariaDBParser.LATIN7 - 763)) | (1 << (MariaDBParser.MACCE - 763)) | (1 << (MariaDBParser.MACROMAN - 763)) | (1 << (MariaDBParser.SJIS - 763)) | (1 << (MariaDBParser.SWE7 - 763)) | (1 << (MariaDBParser.TIS620 - 763)) | (1 << (MariaDBParser.UCS2 - 763)) | (1 << (MariaDBParser.UJIS - 763)) | (1 << (MariaDBParser.UTF16 - 763)) | (1 << (MariaDBParser.UTF16LE - 763)) | (1 << (MariaDBParser.UTF32 - 763)) | (1 << (MariaDBParser.UTF8 - 763)) | (1 << (MariaDBParser.UTF8MB3 - 763)) | (1 << (MariaDBParser.UTF8MB4 - 763)) | (1 << (MariaDBParser.ARCHIVE - 763)))) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & ((1 << (MariaDBParser.BLACKHOLE - 795)) | (1 << (MariaDBParser.CSV - 795)) | (1 << (MariaDBParser.FEDERATED - 795)) | (1 << (MariaDBParser.INNODB - 795)) | (1 << (MariaDBParser.MEMORY - 795)) | (1 << (MariaDBParser.MRG_MYISAM - 795)) | (1 << (MariaDBParser.MYISAM - 795)) | (1 << (MariaDBParser.NDB - 795)) | (1 << (MariaDBParser.NDBCLUSTER - 795)) | (1 << (MariaDBParser.PERFORMANCE_SCHEMA - 795)) | (1 << (MariaDBParser.TOKUDB - 795)) | (1 << (MariaDBParser.REPEATABLE - 795)) | (1 << (MariaDBParser.COMMITTED - 795)) | (1 << (MariaDBParser.UNCOMMITTED - 795)) | (1 << (MariaDBParser.SERIALIZABLE - 795)) | (1 << (MariaDBParser.GEOMETRYCOLLECTION - 795)) | (1 << (MariaDBParser.LINESTRING - 795)) | (1 << (MariaDBParser.MULTILINESTRING - 795)) | (1 << (MariaDBParser.MULTIPOINT - 795)) | (1 << (MariaDBParser.MULTIPOLYGON - 795)) | (1 << (MariaDBParser.POINT - 795)) | (1 << (MariaDBParser.POLYGON - 795)) | (1 << (MariaDBParser.ABS - 795)) | (1 << (MariaDBParser.ACOS - 795)) | (1 << (MariaDBParser.ADDDATE - 795)) | (1 << (MariaDBParser.ADDTIME - 795)) | (1 << (MariaDBParser.AES_DECRYPT - 795)) | (1 << (MariaDBParser.AES_ENCRYPT - 795)) | (1 << (MariaDBParser.AREA - 795)) | (1 << (MariaDBParser.ASBINARY - 795)))) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & ((1 << (MariaDBParser.ASIN - 827)) | (1 << (MariaDBParser.ASTEXT - 827)) | (1 << (MariaDBParser.ASWKB - 827)) | (1 << (MariaDBParser.ASWKT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DECRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DERIVE - 827)) | (1 << (MariaDBParser.ASYMMETRIC_ENCRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_SIGN - 827)) | (1 << (MariaDBParser.ASYMMETRIC_VERIFY - 827)) | (1 << (MariaDBParser.ATAN - 827)) | (1 << (MariaDBParser.ATAN2 - 827)) | (1 << (MariaDBParser.BENCHMARK - 827)) | (1 << (MariaDBParser.BIN - 827)) | (1 << (MariaDBParser.BIT_COUNT - 827)) | (1 << (MariaDBParser.BIT_LENGTH - 827)) | (1 << (MariaDBParser.BUFFER - 827)) | (1 << (MariaDBParser.CATALOG_NAME - 827)) | (1 << (MariaDBParser.CEIL - 827)) | (1 << (MariaDBParser.CEILING - 827)) | (1 << (MariaDBParser.CENTROID - 827)) | (1 << (MariaDBParser.CHARACTER_LENGTH - 827)) | (1 << (MariaDBParser.CHARSET - 827)) | (1 << (MariaDBParser.CHAR_LENGTH - 827)) | (1 << (MariaDBParser.COERCIBILITY - 827)) | (1 << (MariaDBParser.COLLATION - 827)) | (1 << (MariaDBParser.COMPRESS - 827)) | (1 << (MariaDBParser.CONCAT - 827)) | (1 << (MariaDBParser.CONCAT_WS - 827)) | (1 << (MariaDBParser.CONNECTION_ID - 827)) | (1 << (MariaDBParser.CONV - 827)) | (1 << (MariaDBParser.CONVERT_TZ - 827)) | (1 << (MariaDBParser.COS - 827)))) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & ((1 << (MariaDBParser.COT - 859)) | (1 << (MariaDBParser.CRC32 - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY - 859)) | (1 << (MariaDBParser.CREATE_DH_PARAMETERS - 859)) | (1 << (MariaDBParser.CREATE_DIGEST - 859)) | (1 << (MariaDBParser.CROSSES - 859)) | (1 << (MariaDBParser.DATEDIFF - 859)) | (1 << (MariaDBParser.DATE_FORMAT - 859)) | (1 << (MariaDBParser.DAYNAME - 859)) | (1 << (MariaDBParser.DAYOFMONTH - 859)) | (1 << (MariaDBParser.DAYOFWEEK - 859)) | (1 << (MariaDBParser.DAYOFYEAR - 859)) | (1 << (MariaDBParser.DECODE - 859)) | (1 << (MariaDBParser.DEGREES - 859)) | (1 << (MariaDBParser.DES_DECRYPT - 859)) | (1 << (MariaDBParser.DES_ENCRYPT - 859)) | (1 << (MariaDBParser.DIMENSION - 859)) | (1 << (MariaDBParser.DISJOINT - 859)) | (1 << (MariaDBParser.ELT - 859)) | (1 << (MariaDBParser.ENCODE - 859)) | (1 << (MariaDBParser.ENCRYPT - 859)) | (1 << (MariaDBParser.ENDPOINT - 859)) | (1 << (MariaDBParser.ENGINE_ATTRIBUTE - 859)) | (1 << (MariaDBParser.ENVELOPE - 859)) | (1 << (MariaDBParser.EQUALS - 859)) | (1 << (MariaDBParser.EXP - 859)) | (1 << (MariaDBParser.EXPORT_SET - 859)) | (1 << (MariaDBParser.EXTERIORRING - 859)) | (1 << (MariaDBParser.EXTRACTVALUE - 859)) | (1 << (MariaDBParser.FIELD - 859)) | (1 << (MariaDBParser.FIND_IN_SET - 859)))) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & ((1 << (MariaDBParser.FLOOR - 891)) | (1 << (MariaDBParser.FORMAT - 891)) | (1 << (MariaDBParser.FOUND_ROWS - 891)) | (1 << (MariaDBParser.FROM_BASE64 - 891)) | (1 << (MariaDBParser.FROM_DAYS - 891)) | (1 << (MariaDBParser.FROM_UNIXTIME - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYN - 891)) | (1 << (MariaDBParser.GEOMETRYTYPE - 891)) | (1 << (MariaDBParser.GEOMFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMFROMWKB - 891)) | (1 << (MariaDBParser.GET_FORMAT - 891)) | (1 << (MariaDBParser.GET_LOCK - 891)) | (1 << (MariaDBParser.GLENGTH - 891)) | (1 << (MariaDBParser.GREATEST - 891)) | (1 << (MariaDBParser.GTID_SUBSET - 891)) | (1 << (MariaDBParser.GTID_SUBTRACT - 891)) | (1 << (MariaDBParser.HEX - 891)) | (1 << (MariaDBParser.IFNULL - 891)) | (1 << (MariaDBParser.INET6_ATON - 891)) | (1 << (MariaDBParser.INET6_NTOA - 891)) | (1 << (MariaDBParser.INET_ATON - 891)) | (1 << (MariaDBParser.INET_NTOA - 891)) | (1 << (MariaDBParser.INSTR - 891)) | (1 << (MariaDBParser.INTERIORRINGN - 891)) | (1 << (MariaDBParser.INTERSECTS - 891)) | (1 << (MariaDBParser.ISCLOSED - 891)))) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & ((1 << (MariaDBParser.ISEMPTY - 923)) | (1 << (MariaDBParser.ISNULL - 923)) | (1 << (MariaDBParser.ISSIMPLE - 923)) | (1 << (MariaDBParser.IS_FREE_LOCK - 923)) | (1 << (MariaDBParser.IS_IPV4 - 923)) | (1 << (MariaDBParser.IS_IPV4_COMPAT - 923)) | (1 << (MariaDBParser.IS_IPV4_MAPPED - 923)) | (1 << (MariaDBParser.IS_IPV6 - 923)) | (1 << (MariaDBParser.IS_USED_LOCK - 923)) | (1 << (MariaDBParser.LAST_INSERT_ID - 923)) | (1 << (MariaDBParser.LCASE - 923)) | (1 << (MariaDBParser.LEAST - 923)) | (1 << (MariaDBParser.LENGTH - 923)) | (1 << (MariaDBParser.LINEFROMTEXT - 923)) | (1 << (MariaDBParser.LINEFROMWKB - 923)) | (1 << (MariaDBParser.LINESTRINGFROMTEXT - 923)) | (1 << (MariaDBParser.LINESTRINGFROMWKB - 923)) | (1 << (MariaDBParser.LN - 923)) | (1 << (MariaDBParser.LOAD_FILE - 923)) | (1 << (MariaDBParser.LOCATE - 923)) | (1 << (MariaDBParser.LOG - 923)) | (1 << (MariaDBParser.LOG10 - 923)) | (1 << (MariaDBParser.LOG2 - 923)) | (1 << (MariaDBParser.LOWER - 923)) | (1 << (MariaDBParser.LPAD - 923)) | (1 << (MariaDBParser.LTRIM - 923)) | (1 << (MariaDBParser.MAKEDATE - 923)) | (1 << (MariaDBParser.MAKETIME - 923)) | (1 << (MariaDBParser.MAKE_SET - 923)) | (1 << (MariaDBParser.MASTER_POS_WAIT - 923)) | (1 << (MariaDBParser.MBRCONTAINS - 923)) | (1 << (MariaDBParser.MBRDISJOINT - 923)))) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & ((1 << (MariaDBParser.MBREQUAL - 955)) | (1 << (MariaDBParser.MBRINTERSECTS - 955)) | (1 << (MariaDBParser.MBROVERLAPS - 955)) | (1 << (MariaDBParser.MBRTOUCHES - 955)) | (1 << (MariaDBParser.MBRWITHIN - 955)) | (1 << (MariaDBParser.MD5 - 955)) | (1 << (MariaDBParser.MLINEFROMTEXT - 955)) | (1 << (MariaDBParser.MLINEFROMWKB - 955)) | (1 << (MariaDBParser.MONTHNAME - 955)) | (1 << (MariaDBParser.MPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MPOLYFROMTEXT - 955)) | (1 << (MariaDBParser.MPOLYFROMWKB - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMTEXT - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMWKB - 955)) | (1 << (MariaDBParser.NAME_CONST - 955)) | (1 << (MariaDBParser.NULLIF - 955)) | (1 << (MariaDBParser.NUMGEOMETRIES - 955)) | (1 << (MariaDBParser.NUMINTERIORRINGS - 955)) | (1 << (MariaDBParser.NUMPOINTS - 955)) | (1 << (MariaDBParser.OCT - 955)) | (1 << (MariaDBParser.OCTET_LENGTH - 955)) | (1 << (MariaDBParser.ORD - 955)) | (1 << (MariaDBParser.OVERLAPS - 955)) | (1 << (MariaDBParser.PERIOD_ADD - 955)) | (1 << (MariaDBParser.PERIOD_DIFF - 955)) | (1 << (MariaDBParser.PI - 955)) | (1 << (MariaDBParser.POINTFROMTEXT - 955)))) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & ((1 << (MariaDBParser.POINTFROMWKB - 987)) | (1 << (MariaDBParser.POINTN - 987)) | (1 << (MariaDBParser.POLYFROMTEXT - 987)) | (1 << (MariaDBParser.POLYFROMWKB - 987)) | (1 << (MariaDBParser.POLYGONFROMTEXT - 987)) | (1 << (MariaDBParser.POLYGONFROMWKB - 987)) | (1 << (MariaDBParser.POW - 987)) | (1 << (MariaDBParser.POWER - 987)) | (1 << (MariaDBParser.QUOTE - 987)) | (1 << (MariaDBParser.RADIANS - 987)) | (1 << (MariaDBParser.RAND - 987)) | (1 << (MariaDBParser.RANDOM_BYTES - 987)) | (1 << (MariaDBParser.RELEASE_LOCK - 987)) | (1 << (MariaDBParser.REVERSE - 987)) | (1 << (MariaDBParser.ROUND - 987)) | (1 << (MariaDBParser.ROW_COUNT - 987)) | (1 << (MariaDBParser.RPAD - 987)) | (1 << (MariaDBParser.RTRIM - 987)) | (1 << (MariaDBParser.SEC_TO_TIME - 987)) | (1 << (MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE - 987)) | (1 << (MariaDBParser.SESSION_USER - 987)) | (1 << (MariaDBParser.SHA - 987)) | (1 << (MariaDBParser.SHA1 - 987)) | (1 << (MariaDBParser.SHA2 - 987)) | (1 << (MariaDBParser.SCHEMA_NAME - 987)) | (1 << (MariaDBParser.SIGN - 987)) | (1 << (MariaDBParser.SIN - 987)) | (1 << (MariaDBParser.SLEEP - 987)) | (1 << (MariaDBParser.SOUNDEX - 987)) | (1 << (MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS - 987)) | (1 << (MariaDBParser.SQRT - 987)) | (1 << (MariaDBParser.SRID - 987)))) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & ((1 << (MariaDBParser.STARTPOINT - 1019)) | (1 << (MariaDBParser.STRCMP - 1019)) | (1 << (MariaDBParser.STR_TO_DATE - 1019)) | (1 << (MariaDBParser.ST_AREA - 1019)) | (1 << (MariaDBParser.ST_ASBINARY - 1019)) | (1 << (MariaDBParser.ST_ASTEXT - 1019)) | (1 << (MariaDBParser.ST_ASWKB - 1019)) | (1 << (MariaDBParser.ST_ASWKT - 1019)) | (1 << (MariaDBParser.ST_BUFFER - 1019)) | (1 << (MariaDBParser.ST_CENTROID - 1019)) | (1 << (MariaDBParser.ST_CONTAINS - 1019)) | (1 << (MariaDBParser.ST_CROSSES - 1019)) | (1 << (MariaDBParser.ST_DIFFERENCE - 1019)) | (1 << (MariaDBParser.ST_DIMENSION - 1019)) | (1 << (MariaDBParser.ST_DISJOINT - 1019)) | (1 << (MariaDBParser.ST_DISTANCE - 1019)) | (1 << (MariaDBParser.ST_ENDPOINT - 1019)) | (1 << (MariaDBParser.ST_ENVELOPE - 1019)) | (1 << (MariaDBParser.ST_EQUALS - 1019)) | (1 << (MariaDBParser.ST_EXTERIORRING - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYN - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYTYPE - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMWKB - 1019)) | (1 << (MariaDBParser.ST_INTERIORRINGN - 1019)))) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & ((1 << (MariaDBParser.ST_INTERSECTION - 1051)) | (1 << (MariaDBParser.ST_INTERSECTS - 1051)) | (1 << (MariaDBParser.ST_ISCLOSED - 1051)) | (1 << (MariaDBParser.ST_ISEMPTY - 1051)) | (1 << (MariaDBParser.ST_ISSIMPLE - 1051)) | (1 << (MariaDBParser.ST_LINEFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINEFROMWKB - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMWKB - 1051)) | (1 << (MariaDBParser.ST_NUMGEOMETRIES - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRING - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRINGS - 1051)) | (1 << (MariaDBParser.ST_NUMPOINTS - 1051)) | (1 << (MariaDBParser.ST_OVERLAPS - 1051)) | (1 << (MariaDBParser.ST_POINTFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POINTFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POINTN - 1051)) | (1 << (MariaDBParser.ST_POLYFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMWKB - 1051)) | (1 << (MariaDBParser.ST_SRID - 1051)) | (1 << (MariaDBParser.ST_STARTPOINT - 1051)) | (1 << (MariaDBParser.ST_SYMDIFFERENCE - 1051)) | (1 << (MariaDBParser.ST_TOUCHES - 1051)) | (1 << (MariaDBParser.ST_UNION - 1051)) | (1 << (MariaDBParser.ST_WITHIN - 1051)) | (1 << (MariaDBParser.ST_X - 1051)) | (1 << (MariaDBParser.ST_Y - 1051)) | (1 << (MariaDBParser.SUBDATE - 1051)) | (1 << (MariaDBParser.SUBSTRING_INDEX - 1051)) | (1 << (MariaDBParser.SUBTIME - 1051)))) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & ((1 << (MariaDBParser.SYSTEM_USER - 1083)) | (1 << (MariaDBParser.TAN - 1083)) | (1 << (MariaDBParser.TIMEDIFF - 1083)) | (1 << (MariaDBParser.TIMESTAMPADD - 1083)) | (1 << (MariaDBParser.TIMESTAMPDIFF - 1083)) | (1 << (MariaDBParser.TIME_FORMAT - 1083)) | (1 << (MariaDBParser.TIME_TO_SEC - 1083)) | (1 << (MariaDBParser.TOUCHES - 1083)) | (1 << (MariaDBParser.TO_BASE64 - 1083)) | (1 << (MariaDBParser.TO_DAYS - 1083)) | (1 << (MariaDBParser.TO_SECONDS - 1083)) | (1 << (MariaDBParser.UCASE - 1083)) | (1 << (MariaDBParser.UNCOMPRESS - 1083)) | (1 << (MariaDBParser.UNCOMPRESSED_LENGTH - 1083)) | (1 << (MariaDBParser.UNHEX - 1083)) | (1 << (MariaDBParser.UNIX_TIMESTAMP - 1083)) | (1 << (MariaDBParser.UPDATEXML - 1083)) | (1 << (MariaDBParser.UPPER - 1083)) | (1 << (MariaDBParser.UUID - 1083)) | (1 << (MariaDBParser.UUID_SHORT - 1083)) | (1 << (MariaDBParser.VALIDATE_PASSWORD_STRENGTH - 1083)) | (1 << (MariaDBParser.VERSION - 1083)) | (1 << (MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1083)) | (1 << (MariaDBParser.WEEKDAY - 1083)) | (1 << (MariaDBParser.WEEKOFYEAR - 1083)) | (1 << (MariaDBParser.WEIGHT_STRING - 1083)) | (1 << (MariaDBParser.WITHIN - 1083)) | (1 << (MariaDBParser.YEARWEEK - 1083)) | (1 << (MariaDBParser.Y_FUNCTION - 1083)) | (1 << (MariaDBParser.X_FUNCTION - 1083)) | (1 << (MariaDBParser.VIA - 1083)) | (1 << (MariaDBParser.LASTVAL - 1083)))) !== 0) || ((((_la - 1115)) & ~0x1F) === 0 && ((1 << (_la - 1115)) & ((1 << (MariaDBParser.NEXTVAL - 1115)) | (1 << (MariaDBParser.SETVAL - 1115)) | (1 << (MariaDBParser.PREVIOUS - 1115)) | (1 << (MariaDBParser.PERSISTENT - 1115)) | (1 << (MariaDBParser.BINLOG_MONITOR - 1115)) | (1 << (MariaDBParser.BINLOG_REPLAY - 1115)) | (1 << (MariaDBParser.FEDERATED_ADMIN - 1115)) | (1 << (MariaDBParser.READ_ONLY_ADMIN - 1115)) | (1 << (MariaDBParser.REPLICA - 1115)) | (1 << (MariaDBParser.REPLICAS - 1115)) | (1 << (MariaDBParser.REPLICATION_MASTER_ADMIN - 1115)) | (1 << (MariaDBParser.MONITOR - 1115)) | (1 << (MariaDBParser.READ_ONLY - 1115)) | (1 << (MariaDBParser.REPLAY - 1115)) | (1 << (MariaDBParser.MOD - 1115)))) !== 0) || ((((_la - 1166)) & ~0x1F) === 0 && ((1 << (_la - 1166)) & ((1 << (MariaDBParser.CHARSET_REVERSE_QOUTE_STRING - 1166)) | (1 << (MariaDBParser.STRING_LITERAL - 1166)) | (1 << (MariaDBParser.ID - 1166)))) !== 0)) {
				{
				this.state = 4948;
				this.uid();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public returnStatement(): ReturnStatementContext {
		let _localctx: ReturnStatementContext = new ReturnStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 412, MariaDBParser.RULE_returnStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4951;
			this.match(MariaDBParser.RETURN);
			this.state = 4952;
			this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public whileStatement(): WhileStatementContext {
		let _localctx: WhileStatementContext = new WhileStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 414, MariaDBParser.RULE_whileStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4957;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MariaDBParser.ATTRIBUTE) | (1 << MariaDBParser.BODY) | (1 << MariaDBParser.BUCKETS) | (1 << MariaDBParser.CONDITION))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (MariaDBParser.CURRENT - 36)) | (1 << (MariaDBParser.CURRENT_ROLE - 36)) | (1 << (MariaDBParser.CURRENT_USER - 36)) | (1 << (MariaDBParser.DATABASE - 36)) | (1 << (MariaDBParser.DEFAULT - 36)) | (1 << (MariaDBParser.DIAGNOSTICS - 36)) | (1 << (MariaDBParser.EMPTY - 36)) | (1 << (MariaDBParser.EXCEPT - 36)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (MariaDBParser.GROUP - 73)) | (1 << (MariaDBParser.IF - 73)) | (1 << (MariaDBParser.IGNORED - 73)) | (1 << (MariaDBParser.INSERT - 73)) | (1 << (MariaDBParser.LATERAL - 73)) | (1 << (MariaDBParser.LEFT - 73)) | (1 << (MariaDBParser.LOCKED - 73)))) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & ((1 << (MariaDBParser.MAXVALUE - 110)) | (1 << (MariaDBParser.MINVALUE - 110)) | (1 << (MariaDBParser.NUMBER - 110)) | (1 << (MariaDBParser.OPTIONAL - 110)) | (1 << (MariaDBParser.ORDER - 110)) | (1 << (MariaDBParser.PRIMARY - 110)) | (1 << (MariaDBParser.PACKAGE - 110)))) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (MariaDBParser.REPLACE - 142)) | (1 << (MariaDBParser.RIGHT - 142)) | (1 << (MariaDBParser.SCHEMA - 142)) | (1 << (MariaDBParser.SKIP_ - 142)) | (1 << (MariaDBParser.STACKED - 142)) | (1 << (MariaDBParser.STATEMENT - 142)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MariaDBParser.DATE - 217)) | (1 << (MariaDBParser.TIME - 217)) | (1 << (MariaDBParser.TIMESTAMP - 217)) | (1 << (MariaDBParser.DATETIME - 217)) | (1 << (MariaDBParser.YEAR - 217)) | (1 << (MariaDBParser.BINARY - 217)) | (1 << (MariaDBParser.TEXT - 217)) | (1 << (MariaDBParser.ENUM - 217)) | (1 << (MariaDBParser.SERIAL - 217)))) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & ((1 << (MariaDBParser.JSON_ARRAY - 251)) | (1 << (MariaDBParser.JSON_ARRAYAGG - 251)) | (1 << (MariaDBParser.JSON_ARRAY_APPEND - 251)) | (1 << (MariaDBParser.JSON_ARRAY_INSERT - 251)) | (1 << (MariaDBParser.JSON_CONTAINS - 251)) | (1 << (MariaDBParser.JSON_CONTAINS_PATH - 251)) | (1 << (MariaDBParser.JSON_DEPTH - 251)) | (1 << (MariaDBParser.JSON_EXTRACT - 251)) | (1 << (MariaDBParser.JSON_INSERT - 251)) | (1 << (MariaDBParser.JSON_KEYS - 251)) | (1 << (MariaDBParser.JSON_LENGTH - 251)) | (1 << (MariaDBParser.JSON_MERGE - 251)) | (1 << (MariaDBParser.JSON_MERGE_PATCH - 251)) | (1 << (MariaDBParser.JSON_MERGE_PRESERVE - 251)) | (1 << (MariaDBParser.JSON_OBJECT - 251)) | (1 << (MariaDBParser.JSON_OBJECTAGG - 251)) | (1 << (MariaDBParser.JSON_OVERLAPS - 251)) | (1 << (MariaDBParser.JSON_PRETTY - 251)) | (1 << (MariaDBParser.JSON_QUOTE - 251)) | (1 << (MariaDBParser.JSON_REMOVE - 251)) | (1 << (MariaDBParser.JSON_REPLACE - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALID - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT - 251)) | (1 << (MariaDBParser.JSON_SEARCH - 251)) | (1 << (MariaDBParser.JSON_SET - 251)) | (1 << (MariaDBParser.JSON_STORAGE_FREE - 251)) | (1 << (MariaDBParser.JSON_STORAGE_SIZE - 251)) | (1 << (MariaDBParser.JSON_TABLE - 251)) | (1 << (MariaDBParser.JSON_TYPE - 251)) | (1 << (MariaDBParser.JSON_UNQUOTE - 251)) | (1 << (MariaDBParser.JSON_VALID - 251)) | (1 << (MariaDBParser.JSON_VALUE - 251)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (MariaDBParser.NESTED - 283)) | (1 << (MariaDBParser.ORDINALITY - 283)) | (1 << (MariaDBParser.PATH - 283)) | (1 << (MariaDBParser.AVG - 283)) | (1 << (MariaDBParser.BIT_AND - 283)) | (1 << (MariaDBParser.BIT_OR - 283)) | (1 << (MariaDBParser.BIT_XOR - 283)) | (1 << (MariaDBParser.COUNT - 283)) | (1 << (MariaDBParser.CUME_DIST - 283)) | (1 << (MariaDBParser.DENSE_RANK - 283)) | (1 << (MariaDBParser.FIRST_VALUE - 283)) | (1 << (MariaDBParser.GROUP_CONCAT - 283)) | (1 << (MariaDBParser.LAG - 283)) | (1 << (MariaDBParser.LAST_VALUE - 283)) | (1 << (MariaDBParser.LEAD - 283)) | (1 << (MariaDBParser.MAX - 283)) | (1 << (MariaDBParser.MIN - 283)) | (1 << (MariaDBParser.NTILE - 283)) | (1 << (MariaDBParser.NTH_VALUE - 283)) | (1 << (MariaDBParser.PERCENT_RANK - 283)) | (1 << (MariaDBParser.RANK - 283)) | (1 << (MariaDBParser.ROW_NUMBER - 283)) | (1 << (MariaDBParser.STD - 283)) | (1 << (MariaDBParser.STDDEV - 283)) | (1 << (MariaDBParser.STDDEV_POP - 283)) | (1 << (MariaDBParser.STDDEV_SAMP - 283)) | (1 << (MariaDBParser.SUM - 283)) | (1 << (MariaDBParser.VAR_POP - 283)) | (1 << (MariaDBParser.VAR_SAMP - 283)) | (1 << (MariaDBParser.VARIANCE - 283)) | (1 << (MariaDBParser.CURRENT_DATE - 283)) | (1 << (MariaDBParser.CURRENT_TIME - 283)))) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & ((1 << (MariaDBParser.CURRENT_TIMESTAMP - 315)) | (1 << (MariaDBParser.LOCALTIME - 315)) | (1 << (MariaDBParser.CURDATE - 315)) | (1 << (MariaDBParser.CURTIME - 315)) | (1 << (MariaDBParser.DATE_ADD - 315)) | (1 << (MariaDBParser.DATE_SUB - 315)) | (1 << (MariaDBParser.LOCALTIMESTAMP - 315)) | (1 << (MariaDBParser.NOW - 315)) | (1 << (MariaDBParser.POSITION - 315)) | (1 << (MariaDBParser.SUBSTR - 315)) | (1 << (MariaDBParser.SUBSTRING - 315)) | (1 << (MariaDBParser.SYSDATE - 315)) | (1 << (MariaDBParser.TRIM - 315)) | (1 << (MariaDBParser.UTC_DATE - 315)) | (1 << (MariaDBParser.UTC_TIME - 315)) | (1 << (MariaDBParser.UTC_TIMESTAMP - 315)) | (1 << (MariaDBParser.ACCOUNT - 315)) | (1 << (MariaDBParser.ACTION - 315)) | (1 << (MariaDBParser.AFTER - 315)) | (1 << (MariaDBParser.AGGREGATE - 315)) | (1 << (MariaDBParser.ALGORITHM - 315)) | (1 << (MariaDBParser.ANY - 315)) | (1 << (MariaDBParser.AT - 315)) | (1 << (MariaDBParser.AUTHORS - 315)) | (1 << (MariaDBParser.AUTOCOMMIT - 315)) | (1 << (MariaDBParser.AUTOEXTEND_SIZE - 315)) | (1 << (MariaDBParser.AUTO_INCREMENT - 315)) | (1 << (MariaDBParser.AVG_ROW_LENGTH - 315)) | (1 << (MariaDBParser.BEGIN - 315)) | (1 << (MariaDBParser.BINLOG - 315)) | (1 << (MariaDBParser.BIT - 315)))) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & ((1 << (MariaDBParser.BLOCK - 347)) | (1 << (MariaDBParser.BOOL - 347)) | (1 << (MariaDBParser.BOOLEAN - 347)) | (1 << (MariaDBParser.BTREE - 347)) | (1 << (MariaDBParser.CACHE - 347)) | (1 << (MariaDBParser.CASCADED - 347)) | (1 << (MariaDBParser.CHAIN - 347)) | (1 << (MariaDBParser.CHANGED - 347)) | (1 << (MariaDBParser.CHANNEL - 347)) | (1 << (MariaDBParser.CHECKSUM - 347)) | (1 << (MariaDBParser.PAGE_CHECKSUM - 347)) | (1 << (MariaDBParser.CIPHER - 347)) | (1 << (MariaDBParser.CLASS_ORIGIN - 347)) | (1 << (MariaDBParser.CLIENT - 347)) | (1 << (MariaDBParser.CLOSE - 347)) | (1 << (MariaDBParser.CLUSTERING - 347)) | (1 << (MariaDBParser.COALESCE - 347)) | (1 << (MariaDBParser.CODE - 347)) | (1 << (MariaDBParser.COLUMNS - 347)) | (1 << (MariaDBParser.COLUMN_FORMAT - 347)) | (1 << (MariaDBParser.COLUMN_NAME - 347)) | (1 << (MariaDBParser.COMMENT - 347)) | (1 << (MariaDBParser.COMMIT - 347)) | (1 << (MariaDBParser.COMPACT - 347)) | (1 << (MariaDBParser.COMPLETION - 347)) | (1 << (MariaDBParser.COMPRESSED - 347)) | (1 << (MariaDBParser.COMPRESSION - 347)) | (1 << (MariaDBParser.CONCURRENT - 347)) | (1 << (MariaDBParser.CONNECT - 347)) | (1 << (MariaDBParser.CONNECTION - 347)) | (1 << (MariaDBParser.CONSISTENT - 347)) | (1 << (MariaDBParser.CONSTRAINT_CATALOG - 347)))) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & ((1 << (MariaDBParser.CONSTRAINT_SCHEMA - 379)) | (1 << (MariaDBParser.CONSTRAINT_NAME - 379)) | (1 << (MariaDBParser.CONTAINS - 379)) | (1 << (MariaDBParser.CONTEXT - 379)) | (1 << (MariaDBParser.CONTRIBUTORS - 379)) | (1 << (MariaDBParser.COPY - 379)) | (1 << (MariaDBParser.CPU - 379)) | (1 << (MariaDBParser.CYCLE - 379)) | (1 << (MariaDBParser.CURSOR_NAME - 379)) | (1 << (MariaDBParser.DATA - 379)) | (1 << (MariaDBParser.DATAFILE - 379)) | (1 << (MariaDBParser.DEALLOCATE - 379)) | (1 << (MariaDBParser.DEFAULT_AUTH - 379)) | (1 << (MariaDBParser.DEFINER - 379)) | (1 << (MariaDBParser.DELAY_KEY_WRITE - 379)) | (1 << (MariaDBParser.DES_KEY_FILE - 379)) | (1 << (MariaDBParser.DIRECTORY - 379)) | (1 << (MariaDBParser.DISABLE - 379)) | (1 << (MariaDBParser.DISCARD - 379)) | (1 << (MariaDBParser.DISK - 379)) | (1 << (MariaDBParser.DO - 379)) | (1 << (MariaDBParser.DUMPFILE - 379)) | (1 << (MariaDBParser.DUPLICATE - 379)) | (1 << (MariaDBParser.DYNAMIC - 379)) | (1 << (MariaDBParser.ENABLE - 379)) | (1 << (MariaDBParser.ENCRYPTED - 379)) | (1 << (MariaDBParser.ENCRYPTION - 379)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ID - 379)) | (1 << (MariaDBParser.END - 379)) | (1 << (MariaDBParser.ENDS - 379)) | (1 << (MariaDBParser.ENGINE - 379)) | (1 << (MariaDBParser.ENGINES - 379)))) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & ((1 << (MariaDBParser.ERROR - 411)) | (1 << (MariaDBParser.ERRORS - 411)) | (1 << (MariaDBParser.ESCAPE - 411)) | (1 << (MariaDBParser.EVEN - 411)) | (1 << (MariaDBParser.EVENT - 411)) | (1 << (MariaDBParser.EVENTS - 411)) | (1 << (MariaDBParser.EVERY - 411)) | (1 << (MariaDBParser.EXCHANGE - 411)) | (1 << (MariaDBParser.EXCLUSIVE - 411)) | (1 << (MariaDBParser.EXPIRE - 411)) | (1 << (MariaDBParser.EXPORT - 411)) | (1 << (MariaDBParser.EXTENDED - 411)) | (1 << (MariaDBParser.EXTENT_SIZE - 411)) | (1 << (MariaDBParser.FAILED_LOGIN_ATTEMPTS - 411)) | (1 << (MariaDBParser.FAST - 411)) | (1 << (MariaDBParser.FAULTS - 411)) | (1 << (MariaDBParser.FIELDS - 411)) | (1 << (MariaDBParser.FILE_BLOCK_SIZE - 411)) | (1 << (MariaDBParser.FILTER - 411)) | (1 << (MariaDBParser.FIRST - 411)) | (1 << (MariaDBParser.FIXED - 411)) | (1 << (MariaDBParser.FLUSH - 411)) | (1 << (MariaDBParser.FOLLOWS - 411)) | (1 << (MariaDBParser.FOUND - 411)) | (1 << (MariaDBParser.FULL - 411)) | (1 << (MariaDBParser.FUNCTION - 411)) | (1 << (MariaDBParser.GENERAL - 411)) | (1 << (MariaDBParser.GLOBAL - 411)) | (1 << (MariaDBParser.GRANTS - 411)) | (1 << (MariaDBParser.GROUP_REPLICATION - 411)) | (1 << (MariaDBParser.HANDLER - 411)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (MariaDBParser.HASH - 443)) | (1 << (MariaDBParser.HELP - 443)) | (1 << (MariaDBParser.HISTORY - 443)) | (1 << (MariaDBParser.HOST - 443)) | (1 << (MariaDBParser.HOSTS - 443)) | (1 << (MariaDBParser.IDENTIFIED - 443)) | (1 << (MariaDBParser.IGNORE_SERVER_IDS - 443)) | (1 << (MariaDBParser.IMPORT - 443)) | (1 << (MariaDBParser.INCREMENT - 443)) | (1 << (MariaDBParser.INDEXES - 443)) | (1 << (MariaDBParser.INITIAL_SIZE - 443)) | (1 << (MariaDBParser.INPLACE - 443)) | (1 << (MariaDBParser.INSERT_METHOD - 443)) | (1 << (MariaDBParser.INSTALL - 443)) | (1 << (MariaDBParser.INSTANCE - 443)) | (1 << (MariaDBParser.INSTANT - 443)) | (1 << (MariaDBParser.INVISIBLE - 443)) | (1 << (MariaDBParser.INVOKER - 443)) | (1 << (MariaDBParser.IO - 443)) | (1 << (MariaDBParser.IO_THREAD - 443)) | (1 << (MariaDBParser.IPC - 443)) | (1 << (MariaDBParser.ISOLATION - 443)) | (1 << (MariaDBParser.ISSUER - 443)) | (1 << (MariaDBParser.JSON - 443)) | (1 << (MariaDBParser.KEY_BLOCK_SIZE - 443)) | (1 << (MariaDBParser.LANGUAGE - 443)) | (1 << (MariaDBParser.LAST - 443)) | (1 << (MariaDBParser.LEAVES - 443)) | (1 << (MariaDBParser.LESS - 443)) | (1 << (MariaDBParser.LEVEL - 443)) | (1 << (MariaDBParser.LIST - 443)) | (1 << (MariaDBParser.LOCAL - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (MariaDBParser.LOCALES - 475)) | (1 << (MariaDBParser.LOGFILE - 475)) | (1 << (MariaDBParser.LOGS - 475)) | (1 << (MariaDBParser.MASTER - 475)) | (1 << (MariaDBParser.MASTER_AUTO_POSITION - 475)) | (1 << (MariaDBParser.MASTER_CONNECT_RETRY - 475)) | (1 << (MariaDBParser.MASTER_DELAY - 475)) | (1 << (MariaDBParser.MASTER_HEARTBEAT_PERIOD - 475)) | (1 << (MariaDBParser.MASTER_HOST - 475)) | (1 << (MariaDBParser.MASTER_LOG_FILE - 475)) | (1 << (MariaDBParser.MASTER_LOG_POS - 475)) | (1 << (MariaDBParser.MASTER_PASSWORD - 475)) | (1 << (MariaDBParser.MASTER_PORT - 475)) | (1 << (MariaDBParser.MASTER_RETRY_COUNT - 475)) | (1 << (MariaDBParser.MASTER_SSL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CA - 475)) | (1 << (MariaDBParser.MASTER_SSL_CAPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_CERT - 475)) | (1 << (MariaDBParser.MASTER_SSL_CIPHER - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRLPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_KEY - 475)) | (1 << (MariaDBParser.MASTER_TLS_VERSION - 475)) | (1 << (MariaDBParser.MASTER_USER - 475)) | (1 << (MariaDBParser.MAX_CONNECTIONS_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_QUERIES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_ROWS - 475)) | (1 << (MariaDBParser.MAX_SIZE - 475)) | (1 << (MariaDBParser.MAX_UPDATES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_USER_CONNECTIONS - 475)) | (1 << (MariaDBParser.MEDIUM - 475)) | (1 << (MariaDBParser.MEMBER - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (MariaDBParser.MERGE - 507)) | (1 << (MariaDBParser.MESSAGE_TEXT - 507)) | (1 << (MariaDBParser.MID - 507)) | (1 << (MariaDBParser.MIGRATE - 507)) | (1 << (MariaDBParser.MIN_ROWS - 507)) | (1 << (MariaDBParser.MODE - 507)) | (1 << (MariaDBParser.MODIFY - 507)) | (1 << (MariaDBParser.MUTEX - 507)) | (1 << (MariaDBParser.MYSQL - 507)) | (1 << (MariaDBParser.MYSQL_ERRNO - 507)) | (1 << (MariaDBParser.NAME - 507)) | (1 << (MariaDBParser.NAMES - 507)) | (1 << (MariaDBParser.NCHAR - 507)) | (1 << (MariaDBParser.NEVER - 507)) | (1 << (MariaDBParser.NEXT - 507)) | (1 << (MariaDBParser.NO - 507)) | (1 << (MariaDBParser.NOCACHE - 507)) | (1 << (MariaDBParser.NOCOPY - 507)) | (1 << (MariaDBParser.NOCYCLE - 507)) | (1 << (MariaDBParser.NOMAXVALUE - 507)) | (1 << (MariaDBParser.NOMINVALUE - 507)) | (1 << (MariaDBParser.NOWAIT - 507)) | (1 << (MariaDBParser.NODEGROUP - 507)) | (1 << (MariaDBParser.NONE - 507)) | (1 << (MariaDBParser.ODBC - 507)) | (1 << (MariaDBParser.OFFLINE - 507)) | (1 << (MariaDBParser.OFFSET - 507)) | (1 << (MariaDBParser.OF - 507)) | (1 << (MariaDBParser.OJ - 507)) | (1 << (MariaDBParser.OLD_PASSWORD - 507)) | (1 << (MariaDBParser.ONE - 507)) | (1 << (MariaDBParser.ONLINE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (MariaDBParser.ONLY - 539)) | (1 << (MariaDBParser.OPEN - 539)) | (1 << (MariaDBParser.OPTIMIZER_COSTS - 539)) | (1 << (MariaDBParser.OPTIONS - 539)) | (1 << (MariaDBParser.OWNER - 539)) | (1 << (MariaDBParser.PACK_KEYS - 539)) | (1 << (MariaDBParser.PAGE - 539)) | (1 << (MariaDBParser.PARSER - 539)) | (1 << (MariaDBParser.PARTIAL - 539)) | (1 << (MariaDBParser.PARTITIONING - 539)) | (1 << (MariaDBParser.PARTITIONS - 539)) | (1 << (MariaDBParser.PASSWORD - 539)) | (1 << (MariaDBParser.PASSWORD_LOCK_TIME - 539)) | (1 << (MariaDBParser.PHASE - 539)) | (1 << (MariaDBParser.PLUGIN - 539)) | (1 << (MariaDBParser.PLUGIN_DIR - 539)) | (1 << (MariaDBParser.PLUGINS - 539)) | (1 << (MariaDBParser.PORT - 539)) | (1 << (MariaDBParser.PRECEDES - 539)) | (1 << (MariaDBParser.PREPARE - 539)) | (1 << (MariaDBParser.PRESERVE - 539)) | (1 << (MariaDBParser.PREV - 539)) | (1 << (MariaDBParser.PROCESSLIST - 539)) | (1 << (MariaDBParser.PROFILE - 539)) | (1 << (MariaDBParser.PROFILES - 539)) | (1 << (MariaDBParser.PROXY - 539)) | (1 << (MariaDBParser.QUERY - 539)) | (1 << (MariaDBParser.QUERY_RESPONSE_TIME - 539)) | (1 << (MariaDBParser.QUICK - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (MariaDBParser.REBUILD - 571)) | (1 << (MariaDBParser.RECOVER - 571)) | (1 << (MariaDBParser.RECURSIVE - 571)) | (1 << (MariaDBParser.REDO_BUFFER_SIZE - 571)) | (1 << (MariaDBParser.REDUNDANT - 571)) | (1 << (MariaDBParser.RELAY - 571)) | (1 << (MariaDBParser.RELAY_LOG_FILE - 571)) | (1 << (MariaDBParser.RELAY_LOG_POS - 571)) | (1 << (MariaDBParser.RELAYLOG - 571)) | (1 << (MariaDBParser.REMOVE - 571)) | (1 << (MariaDBParser.REORGANIZE - 571)) | (1 << (MariaDBParser.REPAIR - 571)) | (1 << (MariaDBParser.REPLICATE_DO_DB - 571)) | (1 << (MariaDBParser.REPLICATE_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_REWRITE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATION - 571)) | (1 << (MariaDBParser.RESET - 571)) | (1 << (MariaDBParser.RESTART - 571)) | (1 << (MariaDBParser.RESUME - 571)) | (1 << (MariaDBParser.RETURNED_SQLSTATE - 571)) | (1 << (MariaDBParser.RETURNS - 571)) | (1 << (MariaDBParser.REUSE - 571)) | (1 << (MariaDBParser.ROLE - 571)) | (1 << (MariaDBParser.ROLLBACK - 571)) | (1 << (MariaDBParser.ROLLUP - 571)) | (1 << (MariaDBParser.ROTATE - 571)) | (1 << (MariaDBParser.ROW - 571)))) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & ((1 << (MariaDBParser.ROWS - 603)) | (1 << (MariaDBParser.ROW_FORMAT - 603)) | (1 << (MariaDBParser.RTREE - 603)) | (1 << (MariaDBParser.SAVEPOINT - 603)) | (1 << (MariaDBParser.SCHEDULE - 603)) | (1 << (MariaDBParser.SECURITY - 603)) | (1 << (MariaDBParser.SEQUENCE - 603)) | (1 << (MariaDBParser.SERVER - 603)) | (1 << (MariaDBParser.SESSION - 603)) | (1 << (MariaDBParser.SHARE - 603)) | (1 << (MariaDBParser.SHARED - 603)) | (1 << (MariaDBParser.SIGNED - 603)) | (1 << (MariaDBParser.SIMPLE - 603)) | (1 << (MariaDBParser.SLAVE - 603)) | (1 << (MariaDBParser.SLAVES - 603)) | (1 << (MariaDBParser.SLOW - 603)) | (1 << (MariaDBParser.SNAPSHOT - 603)) | (1 << (MariaDBParser.SOCKET - 603)) | (1 << (MariaDBParser.SOME - 603)) | (1 << (MariaDBParser.SONAME - 603)) | (1 << (MariaDBParser.SOUNDS - 603)) | (1 << (MariaDBParser.SOURCE - 603)) | (1 << (MariaDBParser.SQL_AFTER_GTIDS - 603)) | (1 << (MariaDBParser.SQL_AFTER_MTS_GAPS - 603)) | (1 << (MariaDBParser.SQL_BEFORE_GTIDS - 603)) | (1 << (MariaDBParser.SQL_BUFFER_RESULT - 603)) | (1 << (MariaDBParser.SQL_CACHE - 603)) | (1 << (MariaDBParser.SQL_NO_CACHE - 603)) | (1 << (MariaDBParser.SQL_THREAD - 603)) | (1 << (MariaDBParser.START - 603)) | (1 << (MariaDBParser.STARTS - 603)) | (1 << (MariaDBParser.STATS_AUTO_RECALC - 603)))) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & ((1 << (MariaDBParser.STATS_PERSISTENT - 635)) | (1 << (MariaDBParser.STATS_SAMPLE_PAGES - 635)) | (1 << (MariaDBParser.STATUS - 635)) | (1 << (MariaDBParser.STOP - 635)) | (1 << (MariaDBParser.STORAGE - 635)) | (1 << (MariaDBParser.STRING - 635)) | (1 << (MariaDBParser.SUBCLASS_ORIGIN - 635)) | (1 << (MariaDBParser.SUBJECT - 635)) | (1 << (MariaDBParser.SUBPARTITION - 635)) | (1 << (MariaDBParser.SUBPARTITIONS - 635)) | (1 << (MariaDBParser.SUSPEND - 635)) | (1 << (MariaDBParser.SWAPS - 635)) | (1 << (MariaDBParser.SWITCHES - 635)) | (1 << (MariaDBParser.TABLE_NAME - 635)) | (1 << (MariaDBParser.TABLESPACE - 635)) | (1 << (MariaDBParser.TABLE_TYPE - 635)) | (1 << (MariaDBParser.TEMPORARY - 635)) | (1 << (MariaDBParser.TEMPTABLE - 635)) | (1 << (MariaDBParser.THAN - 635)) | (1 << (MariaDBParser.TRADITIONAL - 635)) | (1 << (MariaDBParser.TRANSACTION - 635)) | (1 << (MariaDBParser.TRANSACTIONAL - 635)) | (1 << (MariaDBParser.TRIGGERS - 635)) | (1 << (MariaDBParser.TRUNCATE - 635)) | (1 << (MariaDBParser.TYPES - 635)) | (1 << (MariaDBParser.UNBOUNDED - 635)) | (1 << (MariaDBParser.UNDEFINED - 635)) | (1 << (MariaDBParser.UNDOFILE - 635)) | (1 << (MariaDBParser.UNDO_BUFFER_SIZE - 635)) | (1 << (MariaDBParser.UNINSTALL - 635)) | (1 << (MariaDBParser.UNKNOWN - 635)))) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & ((1 << (MariaDBParser.UNTIL - 667)) | (1 << (MariaDBParser.UPGRADE - 667)) | (1 << (MariaDBParser.USER - 667)) | (1 << (MariaDBParser.USE_FRM - 667)) | (1 << (MariaDBParser.USER_RESOURCES - 667)) | (1 << (MariaDBParser.VALIDATION - 667)) | (1 << (MariaDBParser.VALUE - 667)) | (1 << (MariaDBParser.VARIABLES - 667)) | (1 << (MariaDBParser.VIEW - 667)) | (1 << (MariaDBParser.VIRTUAL - 667)) | (1 << (MariaDBParser.VISIBLE - 667)) | (1 << (MariaDBParser.WAIT - 667)) | (1 << (MariaDBParser.WARNINGS - 667)) | (1 << (MariaDBParser.WITHOUT - 667)) | (1 << (MariaDBParser.WORK - 667)) | (1 << (MariaDBParser.WRAPPER - 667)) | (1 << (MariaDBParser.WSREP_MEMBERSHIP - 667)) | (1 << (MariaDBParser.WSREP_STATUS - 667)) | (1 << (MariaDBParser.X509 - 667)) | (1 << (MariaDBParser.XA - 667)) | (1 << (MariaDBParser.XML - 667)) | (1 << (MariaDBParser.EUR - 667)) | (1 << (MariaDBParser.USA - 667)) | (1 << (MariaDBParser.JIS - 667)) | (1 << (MariaDBParser.ISO - 667)) | (1 << (MariaDBParser.INTERNAL - 667)) | (1 << (MariaDBParser.QUARTER - 667)) | (1 << (MariaDBParser.MONTH - 667)) | (1 << (MariaDBParser.DAY - 667)) | (1 << (MariaDBParser.HOUR - 667)))) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & ((1 << (MariaDBParser.MINUTE - 699)) | (1 << (MariaDBParser.WEEK - 699)) | (1 << (MariaDBParser.SECOND - 699)) | (1 << (MariaDBParser.MICROSECOND - 699)) | (1 << (MariaDBParser.USER_STATISTICS - 699)) | (1 << (MariaDBParser.CLIENT_STATISTICS - 699)) | (1 << (MariaDBParser.INDEX_STATISTICS - 699)) | (1 << (MariaDBParser.TABLE_STATISTICS - 699)) | (1 << (MariaDBParser.ADMIN - 699)) | (1 << (MariaDBParser.AUDIT_ADMIN - 699)) | (1 << (MariaDBParser.BACKUP_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ENCRYPTION_ADMIN - 699)) | (1 << (MariaDBParser.CLONE_ADMIN - 699)) | (1 << (MariaDBParser.CONNECTION_ADMIN - 699)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ADMIN - 699)) | (1 << (MariaDBParser.EXECUTE - 699)) | (1 << (MariaDBParser.FILE - 699)) | (1 << (MariaDBParser.FIREWALL_ADMIN - 699)) | (1 << (MariaDBParser.FIREWALL_USER - 699)) | (1 << (MariaDBParser.GROUP_REPLICATION_ADMIN - 699)) | (1 << (MariaDBParser.INNODB_REDO_LOG_ARCHIVE - 699)) | (1 << (MariaDBParser.INVOKE - 699)) | (1 << (MariaDBParser.LAMBDA - 699)) | (1 << (MariaDBParser.NDB_STORED_USER - 699)) | (1 << (MariaDBParser.PASSWORDLESS_USER_ADMIN - 699)))) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & ((1 << (MariaDBParser.PERSIST_RO_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.PRIVILEGES - 731)) | (1 << (MariaDBParser.PROCESS - 731)) | (1 << (MariaDBParser.RELOAD - 731)) | (1 << (MariaDBParser.REPLICATION_APPLIER - 731)) | (1 << (MariaDBParser.REPLICATION_SLAVE_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_USER - 731)) | (1 << (MariaDBParser.ROLE_ADMIN - 731)) | (1 << (MariaDBParser.ROUTINE - 731)) | (1 << (MariaDBParser.S3 - 731)) | (1 << (MariaDBParser.SESSION_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.SET_USER_ID - 731)) | (1 << (MariaDBParser.SHOW_ROUTINE - 731)) | (1 << (MariaDBParser.SHUTDOWN - 731)) | (1 << (MariaDBParser.SUPER - 731)) | (1 << (MariaDBParser.SYSTEM_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.TABLES - 731)) | (1 << (MariaDBParser.TABLE_ENCRYPTION_ADMIN - 731)) | (1 << (MariaDBParser.VERSION_TOKEN_ADMIN - 731)) | (1 << (MariaDBParser.XA_RECOVER_ADMIN - 731)) | (1 << (MariaDBParser.ARMSCII8 - 731)) | (1 << (MariaDBParser.ASCII - 731)) | (1 << (MariaDBParser.BIG5 - 731)) | (1 << (MariaDBParser.CP1250 - 731)) | (1 << (MariaDBParser.CP1251 - 731)) | (1 << (MariaDBParser.CP1256 - 731)) | (1 << (MariaDBParser.CP1257 - 731)) | (1 << (MariaDBParser.CP850 - 731)) | (1 << (MariaDBParser.CP852 - 731)) | (1 << (MariaDBParser.CP866 - 731)))) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & ((1 << (MariaDBParser.CP932 - 763)) | (1 << (MariaDBParser.DEC8 - 763)) | (1 << (MariaDBParser.EUCJPMS - 763)) | (1 << (MariaDBParser.EUCKR - 763)) | (1 << (MariaDBParser.GB18030 - 763)) | (1 << (MariaDBParser.GB2312 - 763)) | (1 << (MariaDBParser.GBK - 763)) | (1 << (MariaDBParser.GEOSTD8 - 763)) | (1 << (MariaDBParser.GREEK - 763)) | (1 << (MariaDBParser.HEBREW - 763)) | (1 << (MariaDBParser.HP8 - 763)) | (1 << (MariaDBParser.KEYBCS2 - 763)) | (1 << (MariaDBParser.KOI8R - 763)) | (1 << (MariaDBParser.KOI8U - 763)) | (1 << (MariaDBParser.LATIN1 - 763)) | (1 << (MariaDBParser.LATIN2 - 763)) | (1 << (MariaDBParser.LATIN5 - 763)) | (1 << (MariaDBParser.LATIN7 - 763)) | (1 << (MariaDBParser.MACCE - 763)) | (1 << (MariaDBParser.MACROMAN - 763)) | (1 << (MariaDBParser.SJIS - 763)) | (1 << (MariaDBParser.SWE7 - 763)) | (1 << (MariaDBParser.TIS620 - 763)) | (1 << (MariaDBParser.UCS2 - 763)) | (1 << (MariaDBParser.UJIS - 763)) | (1 << (MariaDBParser.UTF16 - 763)) | (1 << (MariaDBParser.UTF16LE - 763)) | (1 << (MariaDBParser.UTF32 - 763)) | (1 << (MariaDBParser.UTF8 - 763)) | (1 << (MariaDBParser.UTF8MB3 - 763)) | (1 << (MariaDBParser.UTF8MB4 - 763)) | (1 << (MariaDBParser.ARCHIVE - 763)))) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & ((1 << (MariaDBParser.BLACKHOLE - 795)) | (1 << (MariaDBParser.CSV - 795)) | (1 << (MariaDBParser.FEDERATED - 795)) | (1 << (MariaDBParser.INNODB - 795)) | (1 << (MariaDBParser.MEMORY - 795)) | (1 << (MariaDBParser.MRG_MYISAM - 795)) | (1 << (MariaDBParser.MYISAM - 795)) | (1 << (MariaDBParser.NDB - 795)) | (1 << (MariaDBParser.NDBCLUSTER - 795)) | (1 << (MariaDBParser.PERFORMANCE_SCHEMA - 795)) | (1 << (MariaDBParser.TOKUDB - 795)) | (1 << (MariaDBParser.REPEATABLE - 795)) | (1 << (MariaDBParser.COMMITTED - 795)) | (1 << (MariaDBParser.UNCOMMITTED - 795)) | (1 << (MariaDBParser.SERIALIZABLE - 795)) | (1 << (MariaDBParser.GEOMETRYCOLLECTION - 795)) | (1 << (MariaDBParser.LINESTRING - 795)) | (1 << (MariaDBParser.MULTILINESTRING - 795)) | (1 << (MariaDBParser.MULTIPOINT - 795)) | (1 << (MariaDBParser.MULTIPOLYGON - 795)) | (1 << (MariaDBParser.POINT - 795)) | (1 << (MariaDBParser.POLYGON - 795)) | (1 << (MariaDBParser.ABS - 795)) | (1 << (MariaDBParser.ACOS - 795)) | (1 << (MariaDBParser.ADDDATE - 795)) | (1 << (MariaDBParser.ADDTIME - 795)) | (1 << (MariaDBParser.AES_DECRYPT - 795)) | (1 << (MariaDBParser.AES_ENCRYPT - 795)) | (1 << (MariaDBParser.AREA - 795)) | (1 << (MariaDBParser.ASBINARY - 795)))) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & ((1 << (MariaDBParser.ASIN - 827)) | (1 << (MariaDBParser.ASTEXT - 827)) | (1 << (MariaDBParser.ASWKB - 827)) | (1 << (MariaDBParser.ASWKT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DECRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DERIVE - 827)) | (1 << (MariaDBParser.ASYMMETRIC_ENCRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_SIGN - 827)) | (1 << (MariaDBParser.ASYMMETRIC_VERIFY - 827)) | (1 << (MariaDBParser.ATAN - 827)) | (1 << (MariaDBParser.ATAN2 - 827)) | (1 << (MariaDBParser.BENCHMARK - 827)) | (1 << (MariaDBParser.BIN - 827)) | (1 << (MariaDBParser.BIT_COUNT - 827)) | (1 << (MariaDBParser.BIT_LENGTH - 827)) | (1 << (MariaDBParser.BUFFER - 827)) | (1 << (MariaDBParser.CATALOG_NAME - 827)) | (1 << (MariaDBParser.CEIL - 827)) | (1 << (MariaDBParser.CEILING - 827)) | (1 << (MariaDBParser.CENTROID - 827)) | (1 << (MariaDBParser.CHARACTER_LENGTH - 827)) | (1 << (MariaDBParser.CHARSET - 827)) | (1 << (MariaDBParser.CHAR_LENGTH - 827)) | (1 << (MariaDBParser.COERCIBILITY - 827)) | (1 << (MariaDBParser.COLLATION - 827)) | (1 << (MariaDBParser.COMPRESS - 827)) | (1 << (MariaDBParser.CONCAT - 827)) | (1 << (MariaDBParser.CONCAT_WS - 827)) | (1 << (MariaDBParser.CONNECTION_ID - 827)) | (1 << (MariaDBParser.CONV - 827)) | (1 << (MariaDBParser.CONVERT_TZ - 827)) | (1 << (MariaDBParser.COS - 827)))) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & ((1 << (MariaDBParser.COT - 859)) | (1 << (MariaDBParser.CRC32 - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY - 859)) | (1 << (MariaDBParser.CREATE_DH_PARAMETERS - 859)) | (1 << (MariaDBParser.CREATE_DIGEST - 859)) | (1 << (MariaDBParser.CROSSES - 859)) | (1 << (MariaDBParser.DATEDIFF - 859)) | (1 << (MariaDBParser.DATE_FORMAT - 859)) | (1 << (MariaDBParser.DAYNAME - 859)) | (1 << (MariaDBParser.DAYOFMONTH - 859)) | (1 << (MariaDBParser.DAYOFWEEK - 859)) | (1 << (MariaDBParser.DAYOFYEAR - 859)) | (1 << (MariaDBParser.DECODE - 859)) | (1 << (MariaDBParser.DEGREES - 859)) | (1 << (MariaDBParser.DES_DECRYPT - 859)) | (1 << (MariaDBParser.DES_ENCRYPT - 859)) | (1 << (MariaDBParser.DIMENSION - 859)) | (1 << (MariaDBParser.DISJOINT - 859)) | (1 << (MariaDBParser.ELT - 859)) | (1 << (MariaDBParser.ENCODE - 859)) | (1 << (MariaDBParser.ENCRYPT - 859)) | (1 << (MariaDBParser.ENDPOINT - 859)) | (1 << (MariaDBParser.ENGINE_ATTRIBUTE - 859)) | (1 << (MariaDBParser.ENVELOPE - 859)) | (1 << (MariaDBParser.EQUALS - 859)) | (1 << (MariaDBParser.EXP - 859)) | (1 << (MariaDBParser.EXPORT_SET - 859)) | (1 << (MariaDBParser.EXTERIORRING - 859)) | (1 << (MariaDBParser.EXTRACTVALUE - 859)) | (1 << (MariaDBParser.FIELD - 859)) | (1 << (MariaDBParser.FIND_IN_SET - 859)))) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & ((1 << (MariaDBParser.FLOOR - 891)) | (1 << (MariaDBParser.FORMAT - 891)) | (1 << (MariaDBParser.FOUND_ROWS - 891)) | (1 << (MariaDBParser.FROM_BASE64 - 891)) | (1 << (MariaDBParser.FROM_DAYS - 891)) | (1 << (MariaDBParser.FROM_UNIXTIME - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYN - 891)) | (1 << (MariaDBParser.GEOMETRYTYPE - 891)) | (1 << (MariaDBParser.GEOMFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMFROMWKB - 891)) | (1 << (MariaDBParser.GET_FORMAT - 891)) | (1 << (MariaDBParser.GET_LOCK - 891)) | (1 << (MariaDBParser.GLENGTH - 891)) | (1 << (MariaDBParser.GREATEST - 891)) | (1 << (MariaDBParser.GTID_SUBSET - 891)) | (1 << (MariaDBParser.GTID_SUBTRACT - 891)) | (1 << (MariaDBParser.HEX - 891)) | (1 << (MariaDBParser.IFNULL - 891)) | (1 << (MariaDBParser.INET6_ATON - 891)) | (1 << (MariaDBParser.INET6_NTOA - 891)) | (1 << (MariaDBParser.INET_ATON - 891)) | (1 << (MariaDBParser.INET_NTOA - 891)) | (1 << (MariaDBParser.INSTR - 891)) | (1 << (MariaDBParser.INTERIORRINGN - 891)) | (1 << (MariaDBParser.INTERSECTS - 891)) | (1 << (MariaDBParser.ISCLOSED - 891)))) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & ((1 << (MariaDBParser.ISEMPTY - 923)) | (1 << (MariaDBParser.ISNULL - 923)) | (1 << (MariaDBParser.ISSIMPLE - 923)) | (1 << (MariaDBParser.IS_FREE_LOCK - 923)) | (1 << (MariaDBParser.IS_IPV4 - 923)) | (1 << (MariaDBParser.IS_IPV4_COMPAT - 923)) | (1 << (MariaDBParser.IS_IPV4_MAPPED - 923)) | (1 << (MariaDBParser.IS_IPV6 - 923)) | (1 << (MariaDBParser.IS_USED_LOCK - 923)) | (1 << (MariaDBParser.LAST_INSERT_ID - 923)) | (1 << (MariaDBParser.LCASE - 923)) | (1 << (MariaDBParser.LEAST - 923)) | (1 << (MariaDBParser.LENGTH - 923)) | (1 << (MariaDBParser.LINEFROMTEXT - 923)) | (1 << (MariaDBParser.LINEFROMWKB - 923)) | (1 << (MariaDBParser.LINESTRINGFROMTEXT - 923)) | (1 << (MariaDBParser.LINESTRINGFROMWKB - 923)) | (1 << (MariaDBParser.LN - 923)) | (1 << (MariaDBParser.LOAD_FILE - 923)) | (1 << (MariaDBParser.LOCATE - 923)) | (1 << (MariaDBParser.LOG - 923)) | (1 << (MariaDBParser.LOG10 - 923)) | (1 << (MariaDBParser.LOG2 - 923)) | (1 << (MariaDBParser.LOWER - 923)) | (1 << (MariaDBParser.LPAD - 923)) | (1 << (MariaDBParser.LTRIM - 923)) | (1 << (MariaDBParser.MAKEDATE - 923)) | (1 << (MariaDBParser.MAKETIME - 923)) | (1 << (MariaDBParser.MAKE_SET - 923)) | (1 << (MariaDBParser.MASTER_POS_WAIT - 923)) | (1 << (MariaDBParser.MBRCONTAINS - 923)) | (1 << (MariaDBParser.MBRDISJOINT - 923)))) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & ((1 << (MariaDBParser.MBREQUAL - 955)) | (1 << (MariaDBParser.MBRINTERSECTS - 955)) | (1 << (MariaDBParser.MBROVERLAPS - 955)) | (1 << (MariaDBParser.MBRTOUCHES - 955)) | (1 << (MariaDBParser.MBRWITHIN - 955)) | (1 << (MariaDBParser.MD5 - 955)) | (1 << (MariaDBParser.MLINEFROMTEXT - 955)) | (1 << (MariaDBParser.MLINEFROMWKB - 955)) | (1 << (MariaDBParser.MONTHNAME - 955)) | (1 << (MariaDBParser.MPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MPOLYFROMTEXT - 955)) | (1 << (MariaDBParser.MPOLYFROMWKB - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMTEXT - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMWKB - 955)) | (1 << (MariaDBParser.NAME_CONST - 955)) | (1 << (MariaDBParser.NULLIF - 955)) | (1 << (MariaDBParser.NUMGEOMETRIES - 955)) | (1 << (MariaDBParser.NUMINTERIORRINGS - 955)) | (1 << (MariaDBParser.NUMPOINTS - 955)) | (1 << (MariaDBParser.OCT - 955)) | (1 << (MariaDBParser.OCTET_LENGTH - 955)) | (1 << (MariaDBParser.ORD - 955)) | (1 << (MariaDBParser.OVERLAPS - 955)) | (1 << (MariaDBParser.PERIOD_ADD - 955)) | (1 << (MariaDBParser.PERIOD_DIFF - 955)) | (1 << (MariaDBParser.PI - 955)) | (1 << (MariaDBParser.POINTFROMTEXT - 955)))) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & ((1 << (MariaDBParser.POINTFROMWKB - 987)) | (1 << (MariaDBParser.POINTN - 987)) | (1 << (MariaDBParser.POLYFROMTEXT - 987)) | (1 << (MariaDBParser.POLYFROMWKB - 987)) | (1 << (MariaDBParser.POLYGONFROMTEXT - 987)) | (1 << (MariaDBParser.POLYGONFROMWKB - 987)) | (1 << (MariaDBParser.POW - 987)) | (1 << (MariaDBParser.POWER - 987)) | (1 << (MariaDBParser.QUOTE - 987)) | (1 << (MariaDBParser.RADIANS - 987)) | (1 << (MariaDBParser.RAND - 987)) | (1 << (MariaDBParser.RANDOM_BYTES - 987)) | (1 << (MariaDBParser.RELEASE_LOCK - 987)) | (1 << (MariaDBParser.REVERSE - 987)) | (1 << (MariaDBParser.ROUND - 987)) | (1 << (MariaDBParser.ROW_COUNT - 987)) | (1 << (MariaDBParser.RPAD - 987)) | (1 << (MariaDBParser.RTRIM - 987)) | (1 << (MariaDBParser.SEC_TO_TIME - 987)) | (1 << (MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE - 987)) | (1 << (MariaDBParser.SESSION_USER - 987)) | (1 << (MariaDBParser.SHA - 987)) | (1 << (MariaDBParser.SHA1 - 987)) | (1 << (MariaDBParser.SHA2 - 987)) | (1 << (MariaDBParser.SCHEMA_NAME - 987)) | (1 << (MariaDBParser.SIGN - 987)) | (1 << (MariaDBParser.SIN - 987)) | (1 << (MariaDBParser.SLEEP - 987)) | (1 << (MariaDBParser.SOUNDEX - 987)) | (1 << (MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS - 987)) | (1 << (MariaDBParser.SQRT - 987)) | (1 << (MariaDBParser.SRID - 987)))) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & ((1 << (MariaDBParser.STARTPOINT - 1019)) | (1 << (MariaDBParser.STRCMP - 1019)) | (1 << (MariaDBParser.STR_TO_DATE - 1019)) | (1 << (MariaDBParser.ST_AREA - 1019)) | (1 << (MariaDBParser.ST_ASBINARY - 1019)) | (1 << (MariaDBParser.ST_ASTEXT - 1019)) | (1 << (MariaDBParser.ST_ASWKB - 1019)) | (1 << (MariaDBParser.ST_ASWKT - 1019)) | (1 << (MariaDBParser.ST_BUFFER - 1019)) | (1 << (MariaDBParser.ST_CENTROID - 1019)) | (1 << (MariaDBParser.ST_CONTAINS - 1019)) | (1 << (MariaDBParser.ST_CROSSES - 1019)) | (1 << (MariaDBParser.ST_DIFFERENCE - 1019)) | (1 << (MariaDBParser.ST_DIMENSION - 1019)) | (1 << (MariaDBParser.ST_DISJOINT - 1019)) | (1 << (MariaDBParser.ST_DISTANCE - 1019)) | (1 << (MariaDBParser.ST_ENDPOINT - 1019)) | (1 << (MariaDBParser.ST_ENVELOPE - 1019)) | (1 << (MariaDBParser.ST_EQUALS - 1019)) | (1 << (MariaDBParser.ST_EXTERIORRING - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYN - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYTYPE - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMWKB - 1019)) | (1 << (MariaDBParser.ST_INTERIORRINGN - 1019)))) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & ((1 << (MariaDBParser.ST_INTERSECTION - 1051)) | (1 << (MariaDBParser.ST_INTERSECTS - 1051)) | (1 << (MariaDBParser.ST_ISCLOSED - 1051)) | (1 << (MariaDBParser.ST_ISEMPTY - 1051)) | (1 << (MariaDBParser.ST_ISSIMPLE - 1051)) | (1 << (MariaDBParser.ST_LINEFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINEFROMWKB - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMWKB - 1051)) | (1 << (MariaDBParser.ST_NUMGEOMETRIES - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRING - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRINGS - 1051)) | (1 << (MariaDBParser.ST_NUMPOINTS - 1051)) | (1 << (MariaDBParser.ST_OVERLAPS - 1051)) | (1 << (MariaDBParser.ST_POINTFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POINTFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POINTN - 1051)) | (1 << (MariaDBParser.ST_POLYFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMWKB - 1051)) | (1 << (MariaDBParser.ST_SRID - 1051)) | (1 << (MariaDBParser.ST_STARTPOINT - 1051)) | (1 << (MariaDBParser.ST_SYMDIFFERENCE - 1051)) | (1 << (MariaDBParser.ST_TOUCHES - 1051)) | (1 << (MariaDBParser.ST_UNION - 1051)) | (1 << (MariaDBParser.ST_WITHIN - 1051)) | (1 << (MariaDBParser.ST_X - 1051)) | (1 << (MariaDBParser.ST_Y - 1051)) | (1 << (MariaDBParser.SUBDATE - 1051)) | (1 << (MariaDBParser.SUBSTRING_INDEX - 1051)) | (1 << (MariaDBParser.SUBTIME - 1051)))) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & ((1 << (MariaDBParser.SYSTEM_USER - 1083)) | (1 << (MariaDBParser.TAN - 1083)) | (1 << (MariaDBParser.TIMEDIFF - 1083)) | (1 << (MariaDBParser.TIMESTAMPADD - 1083)) | (1 << (MariaDBParser.TIMESTAMPDIFF - 1083)) | (1 << (MariaDBParser.TIME_FORMAT - 1083)) | (1 << (MariaDBParser.TIME_TO_SEC - 1083)) | (1 << (MariaDBParser.TOUCHES - 1083)) | (1 << (MariaDBParser.TO_BASE64 - 1083)) | (1 << (MariaDBParser.TO_DAYS - 1083)) | (1 << (MariaDBParser.TO_SECONDS - 1083)) | (1 << (MariaDBParser.UCASE - 1083)) | (1 << (MariaDBParser.UNCOMPRESS - 1083)) | (1 << (MariaDBParser.UNCOMPRESSED_LENGTH - 1083)) | (1 << (MariaDBParser.UNHEX - 1083)) | (1 << (MariaDBParser.UNIX_TIMESTAMP - 1083)) | (1 << (MariaDBParser.UPDATEXML - 1083)) | (1 << (MariaDBParser.UPPER - 1083)) | (1 << (MariaDBParser.UUID - 1083)) | (1 << (MariaDBParser.UUID_SHORT - 1083)) | (1 << (MariaDBParser.VALIDATE_PASSWORD_STRENGTH - 1083)) | (1 << (MariaDBParser.VERSION - 1083)) | (1 << (MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1083)) | (1 << (MariaDBParser.WEEKDAY - 1083)) | (1 << (MariaDBParser.WEEKOFYEAR - 1083)) | (1 << (MariaDBParser.WEIGHT_STRING - 1083)) | (1 << (MariaDBParser.WITHIN - 1083)) | (1 << (MariaDBParser.YEARWEEK - 1083)) | (1 << (MariaDBParser.Y_FUNCTION - 1083)) | (1 << (MariaDBParser.X_FUNCTION - 1083)) | (1 << (MariaDBParser.VIA - 1083)) | (1 << (MariaDBParser.LASTVAL - 1083)))) !== 0) || ((((_la - 1115)) & ~0x1F) === 0 && ((1 << (_la - 1115)) & ((1 << (MariaDBParser.NEXTVAL - 1115)) | (1 << (MariaDBParser.SETVAL - 1115)) | (1 << (MariaDBParser.PREVIOUS - 1115)) | (1 << (MariaDBParser.PERSISTENT - 1115)) | (1 << (MariaDBParser.BINLOG_MONITOR - 1115)) | (1 << (MariaDBParser.BINLOG_REPLAY - 1115)) | (1 << (MariaDBParser.FEDERATED_ADMIN - 1115)) | (1 << (MariaDBParser.READ_ONLY_ADMIN - 1115)) | (1 << (MariaDBParser.REPLICA - 1115)) | (1 << (MariaDBParser.REPLICAS - 1115)) | (1 << (MariaDBParser.REPLICATION_MASTER_ADMIN - 1115)) | (1 << (MariaDBParser.MONITOR - 1115)) | (1 << (MariaDBParser.READ_ONLY - 1115)) | (1 << (MariaDBParser.REPLAY - 1115)) | (1 << (MariaDBParser.MOD - 1115)))) !== 0) || ((((_la - 1166)) & ~0x1F) === 0 && ((1 << (_la - 1166)) & ((1 << (MariaDBParser.CHARSET_REVERSE_QOUTE_STRING - 1166)) | (1 << (MariaDBParser.STRING_LITERAL - 1166)) | (1 << (MariaDBParser.ID - 1166)))) !== 0)) {
				{
				this.state = 4954;
				this.uid();
				this.state = 4955;
				this.match(MariaDBParser.COLON_SYMB);
				}
			}

			this.state = 4959;
			this.match(MariaDBParser.WHILE);
			this.state = 4960;
			this.expression(0);
			this.state = 4961;
			this.match(MariaDBParser.DO);
			this.state = 4963;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4962;
					this.procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4965;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 732, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 4967;
			this.match(MariaDBParser.END);
			this.state = 4968;
			this.match(MariaDBParser.WHILE);
			this.state = 4970;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MariaDBParser.ATTRIBUTE) | (1 << MariaDBParser.BODY) | (1 << MariaDBParser.BUCKETS) | (1 << MariaDBParser.CONDITION))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (MariaDBParser.CURRENT - 36)) | (1 << (MariaDBParser.CURRENT_ROLE - 36)) | (1 << (MariaDBParser.CURRENT_USER - 36)) | (1 << (MariaDBParser.DATABASE - 36)) | (1 << (MariaDBParser.DEFAULT - 36)) | (1 << (MariaDBParser.DIAGNOSTICS - 36)) | (1 << (MariaDBParser.EMPTY - 36)) | (1 << (MariaDBParser.EXCEPT - 36)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (MariaDBParser.GROUP - 73)) | (1 << (MariaDBParser.IF - 73)) | (1 << (MariaDBParser.IGNORED - 73)) | (1 << (MariaDBParser.INSERT - 73)) | (1 << (MariaDBParser.LATERAL - 73)) | (1 << (MariaDBParser.LEFT - 73)) | (1 << (MariaDBParser.LOCKED - 73)))) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & ((1 << (MariaDBParser.MAXVALUE - 110)) | (1 << (MariaDBParser.MINVALUE - 110)) | (1 << (MariaDBParser.NUMBER - 110)) | (1 << (MariaDBParser.OPTIONAL - 110)) | (1 << (MariaDBParser.ORDER - 110)) | (1 << (MariaDBParser.PRIMARY - 110)) | (1 << (MariaDBParser.PACKAGE - 110)))) !== 0) || ((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (MariaDBParser.REPLACE - 142)) | (1 << (MariaDBParser.RIGHT - 142)) | (1 << (MariaDBParser.SCHEMA - 142)) | (1 << (MariaDBParser.SKIP_ - 142)) | (1 << (MariaDBParser.STACKED - 142)) | (1 << (MariaDBParser.STATEMENT - 142)))) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MariaDBParser.DATE - 217)) | (1 << (MariaDBParser.TIME - 217)) | (1 << (MariaDBParser.TIMESTAMP - 217)) | (1 << (MariaDBParser.DATETIME - 217)) | (1 << (MariaDBParser.YEAR - 217)) | (1 << (MariaDBParser.BINARY - 217)) | (1 << (MariaDBParser.TEXT - 217)) | (1 << (MariaDBParser.ENUM - 217)) | (1 << (MariaDBParser.SERIAL - 217)))) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & ((1 << (MariaDBParser.JSON_ARRAY - 251)) | (1 << (MariaDBParser.JSON_ARRAYAGG - 251)) | (1 << (MariaDBParser.JSON_ARRAY_APPEND - 251)) | (1 << (MariaDBParser.JSON_ARRAY_INSERT - 251)) | (1 << (MariaDBParser.JSON_CONTAINS - 251)) | (1 << (MariaDBParser.JSON_CONTAINS_PATH - 251)) | (1 << (MariaDBParser.JSON_DEPTH - 251)) | (1 << (MariaDBParser.JSON_EXTRACT - 251)) | (1 << (MariaDBParser.JSON_INSERT - 251)) | (1 << (MariaDBParser.JSON_KEYS - 251)) | (1 << (MariaDBParser.JSON_LENGTH - 251)) | (1 << (MariaDBParser.JSON_MERGE - 251)) | (1 << (MariaDBParser.JSON_MERGE_PATCH - 251)) | (1 << (MariaDBParser.JSON_MERGE_PRESERVE - 251)) | (1 << (MariaDBParser.JSON_OBJECT - 251)) | (1 << (MariaDBParser.JSON_OBJECTAGG - 251)) | (1 << (MariaDBParser.JSON_OVERLAPS - 251)) | (1 << (MariaDBParser.JSON_PRETTY - 251)) | (1 << (MariaDBParser.JSON_QUOTE - 251)) | (1 << (MariaDBParser.JSON_REMOVE - 251)) | (1 << (MariaDBParser.JSON_REPLACE - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALID - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT - 251)) | (1 << (MariaDBParser.JSON_SEARCH - 251)) | (1 << (MariaDBParser.JSON_SET - 251)) | (1 << (MariaDBParser.JSON_STORAGE_FREE - 251)) | (1 << (MariaDBParser.JSON_STORAGE_SIZE - 251)) | (1 << (MariaDBParser.JSON_TABLE - 251)) | (1 << (MariaDBParser.JSON_TYPE - 251)) | (1 << (MariaDBParser.JSON_UNQUOTE - 251)) | (1 << (MariaDBParser.JSON_VALID - 251)) | (1 << (MariaDBParser.JSON_VALUE - 251)))) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (MariaDBParser.NESTED - 283)) | (1 << (MariaDBParser.ORDINALITY - 283)) | (1 << (MariaDBParser.PATH - 283)) | (1 << (MariaDBParser.AVG - 283)) | (1 << (MariaDBParser.BIT_AND - 283)) | (1 << (MariaDBParser.BIT_OR - 283)) | (1 << (MariaDBParser.BIT_XOR - 283)) | (1 << (MariaDBParser.COUNT - 283)) | (1 << (MariaDBParser.CUME_DIST - 283)) | (1 << (MariaDBParser.DENSE_RANK - 283)) | (1 << (MariaDBParser.FIRST_VALUE - 283)) | (1 << (MariaDBParser.GROUP_CONCAT - 283)) | (1 << (MariaDBParser.LAG - 283)) | (1 << (MariaDBParser.LAST_VALUE - 283)) | (1 << (MariaDBParser.LEAD - 283)) | (1 << (MariaDBParser.MAX - 283)) | (1 << (MariaDBParser.MIN - 283)) | (1 << (MariaDBParser.NTILE - 283)) | (1 << (MariaDBParser.NTH_VALUE - 283)) | (1 << (MariaDBParser.PERCENT_RANK - 283)) | (1 << (MariaDBParser.RANK - 283)) | (1 << (MariaDBParser.ROW_NUMBER - 283)) | (1 << (MariaDBParser.STD - 283)) | (1 << (MariaDBParser.STDDEV - 283)) | (1 << (MariaDBParser.STDDEV_POP - 283)) | (1 << (MariaDBParser.STDDEV_SAMP - 283)) | (1 << (MariaDBParser.SUM - 283)) | (1 << (MariaDBParser.VAR_POP - 283)) | (1 << (MariaDBParser.VAR_SAMP - 283)) | (1 << (MariaDBParser.VARIANCE - 283)) | (1 << (MariaDBParser.CURRENT_DATE - 283)) | (1 << (MariaDBParser.CURRENT_TIME - 283)))) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & ((1 << (MariaDBParser.CURRENT_TIMESTAMP - 315)) | (1 << (MariaDBParser.LOCALTIME - 315)) | (1 << (MariaDBParser.CURDATE - 315)) | (1 << (MariaDBParser.CURTIME - 315)) | (1 << (MariaDBParser.DATE_ADD - 315)) | (1 << (MariaDBParser.DATE_SUB - 315)) | (1 << (MariaDBParser.LOCALTIMESTAMP - 315)) | (1 << (MariaDBParser.NOW - 315)) | (1 << (MariaDBParser.POSITION - 315)) | (1 << (MariaDBParser.SUBSTR - 315)) | (1 << (MariaDBParser.SUBSTRING - 315)) | (1 << (MariaDBParser.SYSDATE - 315)) | (1 << (MariaDBParser.TRIM - 315)) | (1 << (MariaDBParser.UTC_DATE - 315)) | (1 << (MariaDBParser.UTC_TIME - 315)) | (1 << (MariaDBParser.UTC_TIMESTAMP - 315)) | (1 << (MariaDBParser.ACCOUNT - 315)) | (1 << (MariaDBParser.ACTION - 315)) | (1 << (MariaDBParser.AFTER - 315)) | (1 << (MariaDBParser.AGGREGATE - 315)) | (1 << (MariaDBParser.ALGORITHM - 315)) | (1 << (MariaDBParser.ANY - 315)) | (1 << (MariaDBParser.AT - 315)) | (1 << (MariaDBParser.AUTHORS - 315)) | (1 << (MariaDBParser.AUTOCOMMIT - 315)) | (1 << (MariaDBParser.AUTOEXTEND_SIZE - 315)) | (1 << (MariaDBParser.AUTO_INCREMENT - 315)) | (1 << (MariaDBParser.AVG_ROW_LENGTH - 315)) | (1 << (MariaDBParser.BEGIN - 315)) | (1 << (MariaDBParser.BINLOG - 315)) | (1 << (MariaDBParser.BIT - 315)))) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & ((1 << (MariaDBParser.BLOCK - 347)) | (1 << (MariaDBParser.BOOL - 347)) | (1 << (MariaDBParser.BOOLEAN - 347)) | (1 << (MariaDBParser.BTREE - 347)) | (1 << (MariaDBParser.CACHE - 347)) | (1 << (MariaDBParser.CASCADED - 347)) | (1 << (MariaDBParser.CHAIN - 347)) | (1 << (MariaDBParser.CHANGED - 347)) | (1 << (MariaDBParser.CHANNEL - 347)) | (1 << (MariaDBParser.CHECKSUM - 347)) | (1 << (MariaDBParser.PAGE_CHECKSUM - 347)) | (1 << (MariaDBParser.CIPHER - 347)) | (1 << (MariaDBParser.CLASS_ORIGIN - 347)) | (1 << (MariaDBParser.CLIENT - 347)) | (1 << (MariaDBParser.CLOSE - 347)) | (1 << (MariaDBParser.CLUSTERING - 347)) | (1 << (MariaDBParser.COALESCE - 347)) | (1 << (MariaDBParser.CODE - 347)) | (1 << (MariaDBParser.COLUMNS - 347)) | (1 << (MariaDBParser.COLUMN_FORMAT - 347)) | (1 << (MariaDBParser.COLUMN_NAME - 347)) | (1 << (MariaDBParser.COMMENT - 347)) | (1 << (MariaDBParser.COMMIT - 347)) | (1 << (MariaDBParser.COMPACT - 347)) | (1 << (MariaDBParser.COMPLETION - 347)) | (1 << (MariaDBParser.COMPRESSED - 347)) | (1 << (MariaDBParser.COMPRESSION - 347)) | (1 << (MariaDBParser.CONCURRENT - 347)) | (1 << (MariaDBParser.CONNECT - 347)) | (1 << (MariaDBParser.CONNECTION - 347)) | (1 << (MariaDBParser.CONSISTENT - 347)) | (1 << (MariaDBParser.CONSTRAINT_CATALOG - 347)))) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & ((1 << (MariaDBParser.CONSTRAINT_SCHEMA - 379)) | (1 << (MariaDBParser.CONSTRAINT_NAME - 379)) | (1 << (MariaDBParser.CONTAINS - 379)) | (1 << (MariaDBParser.CONTEXT - 379)) | (1 << (MariaDBParser.CONTRIBUTORS - 379)) | (1 << (MariaDBParser.COPY - 379)) | (1 << (MariaDBParser.CPU - 379)) | (1 << (MariaDBParser.CYCLE - 379)) | (1 << (MariaDBParser.CURSOR_NAME - 379)) | (1 << (MariaDBParser.DATA - 379)) | (1 << (MariaDBParser.DATAFILE - 379)) | (1 << (MariaDBParser.DEALLOCATE - 379)) | (1 << (MariaDBParser.DEFAULT_AUTH - 379)) | (1 << (MariaDBParser.DEFINER - 379)) | (1 << (MariaDBParser.DELAY_KEY_WRITE - 379)) | (1 << (MariaDBParser.DES_KEY_FILE - 379)) | (1 << (MariaDBParser.DIRECTORY - 379)) | (1 << (MariaDBParser.DISABLE - 379)) | (1 << (MariaDBParser.DISCARD - 379)) | (1 << (MariaDBParser.DISK - 379)) | (1 << (MariaDBParser.DO - 379)) | (1 << (MariaDBParser.DUMPFILE - 379)) | (1 << (MariaDBParser.DUPLICATE - 379)) | (1 << (MariaDBParser.DYNAMIC - 379)) | (1 << (MariaDBParser.ENABLE - 379)) | (1 << (MariaDBParser.ENCRYPTED - 379)) | (1 << (MariaDBParser.ENCRYPTION - 379)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ID - 379)) | (1 << (MariaDBParser.END - 379)) | (1 << (MariaDBParser.ENDS - 379)) | (1 << (MariaDBParser.ENGINE - 379)) | (1 << (MariaDBParser.ENGINES - 379)))) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & ((1 << (MariaDBParser.ERROR - 411)) | (1 << (MariaDBParser.ERRORS - 411)) | (1 << (MariaDBParser.ESCAPE - 411)) | (1 << (MariaDBParser.EVEN - 411)) | (1 << (MariaDBParser.EVENT - 411)) | (1 << (MariaDBParser.EVENTS - 411)) | (1 << (MariaDBParser.EVERY - 411)) | (1 << (MariaDBParser.EXCHANGE - 411)) | (1 << (MariaDBParser.EXCLUSIVE - 411)) | (1 << (MariaDBParser.EXPIRE - 411)) | (1 << (MariaDBParser.EXPORT - 411)) | (1 << (MariaDBParser.EXTENDED - 411)) | (1 << (MariaDBParser.EXTENT_SIZE - 411)) | (1 << (MariaDBParser.FAILED_LOGIN_ATTEMPTS - 411)) | (1 << (MariaDBParser.FAST - 411)) | (1 << (MariaDBParser.FAULTS - 411)) | (1 << (MariaDBParser.FIELDS - 411)) | (1 << (MariaDBParser.FILE_BLOCK_SIZE - 411)) | (1 << (MariaDBParser.FILTER - 411)) | (1 << (MariaDBParser.FIRST - 411)) | (1 << (MariaDBParser.FIXED - 411)) | (1 << (MariaDBParser.FLUSH - 411)) | (1 << (MariaDBParser.FOLLOWS - 411)) | (1 << (MariaDBParser.FOUND - 411)) | (1 << (MariaDBParser.FULL - 411)) | (1 << (MariaDBParser.FUNCTION - 411)) | (1 << (MariaDBParser.GENERAL - 411)) | (1 << (MariaDBParser.GLOBAL - 411)) | (1 << (MariaDBParser.GRANTS - 411)) | (1 << (MariaDBParser.GROUP_REPLICATION - 411)) | (1 << (MariaDBParser.HANDLER - 411)))) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & ((1 << (MariaDBParser.HASH - 443)) | (1 << (MariaDBParser.HELP - 443)) | (1 << (MariaDBParser.HISTORY - 443)) | (1 << (MariaDBParser.HOST - 443)) | (1 << (MariaDBParser.HOSTS - 443)) | (1 << (MariaDBParser.IDENTIFIED - 443)) | (1 << (MariaDBParser.IGNORE_SERVER_IDS - 443)) | (1 << (MariaDBParser.IMPORT - 443)) | (1 << (MariaDBParser.INCREMENT - 443)) | (1 << (MariaDBParser.INDEXES - 443)) | (1 << (MariaDBParser.INITIAL_SIZE - 443)) | (1 << (MariaDBParser.INPLACE - 443)) | (1 << (MariaDBParser.INSERT_METHOD - 443)) | (1 << (MariaDBParser.INSTALL - 443)) | (1 << (MariaDBParser.INSTANCE - 443)) | (1 << (MariaDBParser.INSTANT - 443)) | (1 << (MariaDBParser.INVISIBLE - 443)) | (1 << (MariaDBParser.INVOKER - 443)) | (1 << (MariaDBParser.IO - 443)) | (1 << (MariaDBParser.IO_THREAD - 443)) | (1 << (MariaDBParser.IPC - 443)) | (1 << (MariaDBParser.ISOLATION - 443)) | (1 << (MariaDBParser.ISSUER - 443)) | (1 << (MariaDBParser.JSON - 443)) | (1 << (MariaDBParser.KEY_BLOCK_SIZE - 443)) | (1 << (MariaDBParser.LANGUAGE - 443)) | (1 << (MariaDBParser.LAST - 443)) | (1 << (MariaDBParser.LEAVES - 443)) | (1 << (MariaDBParser.LESS - 443)) | (1 << (MariaDBParser.LEVEL - 443)) | (1 << (MariaDBParser.LIST - 443)) | (1 << (MariaDBParser.LOCAL - 443)))) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & ((1 << (MariaDBParser.LOCALES - 475)) | (1 << (MariaDBParser.LOGFILE - 475)) | (1 << (MariaDBParser.LOGS - 475)) | (1 << (MariaDBParser.MASTER - 475)) | (1 << (MariaDBParser.MASTER_AUTO_POSITION - 475)) | (1 << (MariaDBParser.MASTER_CONNECT_RETRY - 475)) | (1 << (MariaDBParser.MASTER_DELAY - 475)) | (1 << (MariaDBParser.MASTER_HEARTBEAT_PERIOD - 475)) | (1 << (MariaDBParser.MASTER_HOST - 475)) | (1 << (MariaDBParser.MASTER_LOG_FILE - 475)) | (1 << (MariaDBParser.MASTER_LOG_POS - 475)) | (1 << (MariaDBParser.MASTER_PASSWORD - 475)) | (1 << (MariaDBParser.MASTER_PORT - 475)) | (1 << (MariaDBParser.MASTER_RETRY_COUNT - 475)) | (1 << (MariaDBParser.MASTER_SSL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CA - 475)) | (1 << (MariaDBParser.MASTER_SSL_CAPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_CERT - 475)) | (1 << (MariaDBParser.MASTER_SSL_CIPHER - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRL - 475)) | (1 << (MariaDBParser.MASTER_SSL_CRLPATH - 475)) | (1 << (MariaDBParser.MASTER_SSL_KEY - 475)) | (1 << (MariaDBParser.MASTER_TLS_VERSION - 475)) | (1 << (MariaDBParser.MASTER_USER - 475)) | (1 << (MariaDBParser.MAX_CONNECTIONS_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_QUERIES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_ROWS - 475)) | (1 << (MariaDBParser.MAX_SIZE - 475)) | (1 << (MariaDBParser.MAX_UPDATES_PER_HOUR - 475)) | (1 << (MariaDBParser.MAX_USER_CONNECTIONS - 475)) | (1 << (MariaDBParser.MEDIUM - 475)) | (1 << (MariaDBParser.MEMBER - 475)))) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & ((1 << (MariaDBParser.MERGE - 507)) | (1 << (MariaDBParser.MESSAGE_TEXT - 507)) | (1 << (MariaDBParser.MID - 507)) | (1 << (MariaDBParser.MIGRATE - 507)) | (1 << (MariaDBParser.MIN_ROWS - 507)) | (1 << (MariaDBParser.MODE - 507)) | (1 << (MariaDBParser.MODIFY - 507)) | (1 << (MariaDBParser.MUTEX - 507)) | (1 << (MariaDBParser.MYSQL - 507)) | (1 << (MariaDBParser.MYSQL_ERRNO - 507)) | (1 << (MariaDBParser.NAME - 507)) | (1 << (MariaDBParser.NAMES - 507)) | (1 << (MariaDBParser.NCHAR - 507)) | (1 << (MariaDBParser.NEVER - 507)) | (1 << (MariaDBParser.NEXT - 507)) | (1 << (MariaDBParser.NO - 507)) | (1 << (MariaDBParser.NOCACHE - 507)) | (1 << (MariaDBParser.NOCOPY - 507)) | (1 << (MariaDBParser.NOCYCLE - 507)) | (1 << (MariaDBParser.NOMAXVALUE - 507)) | (1 << (MariaDBParser.NOMINVALUE - 507)) | (1 << (MariaDBParser.NOWAIT - 507)) | (1 << (MariaDBParser.NODEGROUP - 507)) | (1 << (MariaDBParser.NONE - 507)) | (1 << (MariaDBParser.ODBC - 507)) | (1 << (MariaDBParser.OFFLINE - 507)) | (1 << (MariaDBParser.OFFSET - 507)) | (1 << (MariaDBParser.OF - 507)) | (1 << (MariaDBParser.OJ - 507)) | (1 << (MariaDBParser.OLD_PASSWORD - 507)) | (1 << (MariaDBParser.ONE - 507)) | (1 << (MariaDBParser.ONLINE - 507)))) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & ((1 << (MariaDBParser.ONLY - 539)) | (1 << (MariaDBParser.OPEN - 539)) | (1 << (MariaDBParser.OPTIMIZER_COSTS - 539)) | (1 << (MariaDBParser.OPTIONS - 539)) | (1 << (MariaDBParser.OWNER - 539)) | (1 << (MariaDBParser.PACK_KEYS - 539)) | (1 << (MariaDBParser.PAGE - 539)) | (1 << (MariaDBParser.PARSER - 539)) | (1 << (MariaDBParser.PARTIAL - 539)) | (1 << (MariaDBParser.PARTITIONING - 539)) | (1 << (MariaDBParser.PARTITIONS - 539)) | (1 << (MariaDBParser.PASSWORD - 539)) | (1 << (MariaDBParser.PASSWORD_LOCK_TIME - 539)) | (1 << (MariaDBParser.PHASE - 539)) | (1 << (MariaDBParser.PLUGIN - 539)) | (1 << (MariaDBParser.PLUGIN_DIR - 539)) | (1 << (MariaDBParser.PLUGINS - 539)) | (1 << (MariaDBParser.PORT - 539)) | (1 << (MariaDBParser.PRECEDES - 539)) | (1 << (MariaDBParser.PREPARE - 539)) | (1 << (MariaDBParser.PRESERVE - 539)) | (1 << (MariaDBParser.PREV - 539)) | (1 << (MariaDBParser.PROCESSLIST - 539)) | (1 << (MariaDBParser.PROFILE - 539)) | (1 << (MariaDBParser.PROFILES - 539)) | (1 << (MariaDBParser.PROXY - 539)) | (1 << (MariaDBParser.QUERY - 539)) | (1 << (MariaDBParser.QUERY_RESPONSE_TIME - 539)) | (1 << (MariaDBParser.QUICK - 539)))) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & ((1 << (MariaDBParser.REBUILD - 571)) | (1 << (MariaDBParser.RECOVER - 571)) | (1 << (MariaDBParser.RECURSIVE - 571)) | (1 << (MariaDBParser.REDO_BUFFER_SIZE - 571)) | (1 << (MariaDBParser.REDUNDANT - 571)) | (1 << (MariaDBParser.RELAY - 571)) | (1 << (MariaDBParser.RELAY_LOG_FILE - 571)) | (1 << (MariaDBParser.RELAY_LOG_POS - 571)) | (1 << (MariaDBParser.RELAYLOG - 571)) | (1 << (MariaDBParser.REMOVE - 571)) | (1 << (MariaDBParser.REORGANIZE - 571)) | (1 << (MariaDBParser.REPAIR - 571)) | (1 << (MariaDBParser.REPLICATE_DO_DB - 571)) | (1 << (MariaDBParser.REPLICATE_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_REWRITE_DB - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_DO_TABLE - 571)) | (1 << (MariaDBParser.REPLICATE_WILD_IGNORE_TABLE - 571)) | (1 << (MariaDBParser.REPLICATION - 571)) | (1 << (MariaDBParser.RESET - 571)) | (1 << (MariaDBParser.RESTART - 571)) | (1 << (MariaDBParser.RESUME - 571)) | (1 << (MariaDBParser.RETURNED_SQLSTATE - 571)) | (1 << (MariaDBParser.RETURNS - 571)) | (1 << (MariaDBParser.REUSE - 571)) | (1 << (MariaDBParser.ROLE - 571)) | (1 << (MariaDBParser.ROLLBACK - 571)) | (1 << (MariaDBParser.ROLLUP - 571)) | (1 << (MariaDBParser.ROTATE - 571)) | (1 << (MariaDBParser.ROW - 571)))) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & ((1 << (MariaDBParser.ROWS - 603)) | (1 << (MariaDBParser.ROW_FORMAT - 603)) | (1 << (MariaDBParser.RTREE - 603)) | (1 << (MariaDBParser.SAVEPOINT - 603)) | (1 << (MariaDBParser.SCHEDULE - 603)) | (1 << (MariaDBParser.SECURITY - 603)) | (1 << (MariaDBParser.SEQUENCE - 603)) | (1 << (MariaDBParser.SERVER - 603)) | (1 << (MariaDBParser.SESSION - 603)) | (1 << (MariaDBParser.SHARE - 603)) | (1 << (MariaDBParser.SHARED - 603)) | (1 << (MariaDBParser.SIGNED - 603)) | (1 << (MariaDBParser.SIMPLE - 603)) | (1 << (MariaDBParser.SLAVE - 603)) | (1 << (MariaDBParser.SLAVES - 603)) | (1 << (MariaDBParser.SLOW - 603)) | (1 << (MariaDBParser.SNAPSHOT - 603)) | (1 << (MariaDBParser.SOCKET - 603)) | (1 << (MariaDBParser.SOME - 603)) | (1 << (MariaDBParser.SONAME - 603)) | (1 << (MariaDBParser.SOUNDS - 603)) | (1 << (MariaDBParser.SOURCE - 603)) | (1 << (MariaDBParser.SQL_AFTER_GTIDS - 603)) | (1 << (MariaDBParser.SQL_AFTER_MTS_GAPS - 603)) | (1 << (MariaDBParser.SQL_BEFORE_GTIDS - 603)) | (1 << (MariaDBParser.SQL_BUFFER_RESULT - 603)) | (1 << (MariaDBParser.SQL_CACHE - 603)) | (1 << (MariaDBParser.SQL_NO_CACHE - 603)) | (1 << (MariaDBParser.SQL_THREAD - 603)) | (1 << (MariaDBParser.START - 603)) | (1 << (MariaDBParser.STARTS - 603)) | (1 << (MariaDBParser.STATS_AUTO_RECALC - 603)))) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & ((1 << (MariaDBParser.STATS_PERSISTENT - 635)) | (1 << (MariaDBParser.STATS_SAMPLE_PAGES - 635)) | (1 << (MariaDBParser.STATUS - 635)) | (1 << (MariaDBParser.STOP - 635)) | (1 << (MariaDBParser.STORAGE - 635)) | (1 << (MariaDBParser.STRING - 635)) | (1 << (MariaDBParser.SUBCLASS_ORIGIN - 635)) | (1 << (MariaDBParser.SUBJECT - 635)) | (1 << (MariaDBParser.SUBPARTITION - 635)) | (1 << (MariaDBParser.SUBPARTITIONS - 635)) | (1 << (MariaDBParser.SUSPEND - 635)) | (1 << (MariaDBParser.SWAPS - 635)) | (1 << (MariaDBParser.SWITCHES - 635)) | (1 << (MariaDBParser.TABLE_NAME - 635)) | (1 << (MariaDBParser.TABLESPACE - 635)) | (1 << (MariaDBParser.TABLE_TYPE - 635)) | (1 << (MariaDBParser.TEMPORARY - 635)) | (1 << (MariaDBParser.TEMPTABLE - 635)) | (1 << (MariaDBParser.THAN - 635)) | (1 << (MariaDBParser.TRADITIONAL - 635)) | (1 << (MariaDBParser.TRANSACTION - 635)) | (1 << (MariaDBParser.TRANSACTIONAL - 635)) | (1 << (MariaDBParser.TRIGGERS - 635)) | (1 << (MariaDBParser.TRUNCATE - 635)) | (1 << (MariaDBParser.TYPES - 635)) | (1 << (MariaDBParser.UNBOUNDED - 635)) | (1 << (MariaDBParser.UNDEFINED - 635)) | (1 << (MariaDBParser.UNDOFILE - 635)) | (1 << (MariaDBParser.UNDO_BUFFER_SIZE - 635)) | (1 << (MariaDBParser.UNINSTALL - 635)) | (1 << (MariaDBParser.UNKNOWN - 635)))) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & ((1 << (MariaDBParser.UNTIL - 667)) | (1 << (MariaDBParser.UPGRADE - 667)) | (1 << (MariaDBParser.USER - 667)) | (1 << (MariaDBParser.USE_FRM - 667)) | (1 << (MariaDBParser.USER_RESOURCES - 667)) | (1 << (MariaDBParser.VALIDATION - 667)) | (1 << (MariaDBParser.VALUE - 667)) | (1 << (MariaDBParser.VARIABLES - 667)) | (1 << (MariaDBParser.VIEW - 667)) | (1 << (MariaDBParser.VIRTUAL - 667)) | (1 << (MariaDBParser.VISIBLE - 667)) | (1 << (MariaDBParser.WAIT - 667)) | (1 << (MariaDBParser.WARNINGS - 667)) | (1 << (MariaDBParser.WITHOUT - 667)) | (1 << (MariaDBParser.WORK - 667)) | (1 << (MariaDBParser.WRAPPER - 667)) | (1 << (MariaDBParser.WSREP_MEMBERSHIP - 667)) | (1 << (MariaDBParser.WSREP_STATUS - 667)) | (1 << (MariaDBParser.X509 - 667)) | (1 << (MariaDBParser.XA - 667)) | (1 << (MariaDBParser.XML - 667)) | (1 << (MariaDBParser.EUR - 667)) | (1 << (MariaDBParser.USA - 667)) | (1 << (MariaDBParser.JIS - 667)) | (1 << (MariaDBParser.ISO - 667)) | (1 << (MariaDBParser.INTERNAL - 667)) | (1 << (MariaDBParser.QUARTER - 667)) | (1 << (MariaDBParser.MONTH - 667)) | (1 << (MariaDBParser.DAY - 667)) | (1 << (MariaDBParser.HOUR - 667)))) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & ((1 << (MariaDBParser.MINUTE - 699)) | (1 << (MariaDBParser.WEEK - 699)) | (1 << (MariaDBParser.SECOND - 699)) | (1 << (MariaDBParser.MICROSECOND - 699)) | (1 << (MariaDBParser.USER_STATISTICS - 699)) | (1 << (MariaDBParser.CLIENT_STATISTICS - 699)) | (1 << (MariaDBParser.INDEX_STATISTICS - 699)) | (1 << (MariaDBParser.TABLE_STATISTICS - 699)) | (1 << (MariaDBParser.ADMIN - 699)) | (1 << (MariaDBParser.AUDIT_ADMIN - 699)) | (1 << (MariaDBParser.BACKUP_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ADMIN - 699)) | (1 << (MariaDBParser.BINLOG_ENCRYPTION_ADMIN - 699)) | (1 << (MariaDBParser.CLONE_ADMIN - 699)) | (1 << (MariaDBParser.CONNECTION_ADMIN - 699)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ADMIN - 699)) | (1 << (MariaDBParser.EXECUTE - 699)) | (1 << (MariaDBParser.FILE - 699)) | (1 << (MariaDBParser.FIREWALL_ADMIN - 699)) | (1 << (MariaDBParser.FIREWALL_USER - 699)) | (1 << (MariaDBParser.GROUP_REPLICATION_ADMIN - 699)) | (1 << (MariaDBParser.INNODB_REDO_LOG_ARCHIVE - 699)) | (1 << (MariaDBParser.INVOKE - 699)) | (1 << (MariaDBParser.LAMBDA - 699)) | (1 << (MariaDBParser.NDB_STORED_USER - 699)) | (1 << (MariaDBParser.PASSWORDLESS_USER_ADMIN - 699)))) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & ((1 << (MariaDBParser.PERSIST_RO_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.PRIVILEGES - 731)) | (1 << (MariaDBParser.PROCESS - 731)) | (1 << (MariaDBParser.RELOAD - 731)) | (1 << (MariaDBParser.REPLICATION_APPLIER - 731)) | (1 << (MariaDBParser.REPLICATION_SLAVE_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_ADMIN - 731)) | (1 << (MariaDBParser.RESOURCE_GROUP_USER - 731)) | (1 << (MariaDBParser.ROLE_ADMIN - 731)) | (1 << (MariaDBParser.ROUTINE - 731)) | (1 << (MariaDBParser.S3 - 731)) | (1 << (MariaDBParser.SESSION_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.SET_USER_ID - 731)) | (1 << (MariaDBParser.SHOW_ROUTINE - 731)) | (1 << (MariaDBParser.SHUTDOWN - 731)) | (1 << (MariaDBParser.SUPER - 731)) | (1 << (MariaDBParser.SYSTEM_VARIABLES_ADMIN - 731)) | (1 << (MariaDBParser.TABLES - 731)) | (1 << (MariaDBParser.TABLE_ENCRYPTION_ADMIN - 731)) | (1 << (MariaDBParser.VERSION_TOKEN_ADMIN - 731)) | (1 << (MariaDBParser.XA_RECOVER_ADMIN - 731)) | (1 << (MariaDBParser.ARMSCII8 - 731)) | (1 << (MariaDBParser.ASCII - 731)) | (1 << (MariaDBParser.BIG5 - 731)) | (1 << (MariaDBParser.CP1250 - 731)) | (1 << (MariaDBParser.CP1251 - 731)) | (1 << (MariaDBParser.CP1256 - 731)) | (1 << (MariaDBParser.CP1257 - 731)) | (1 << (MariaDBParser.CP850 - 731)) | (1 << (MariaDBParser.CP852 - 731)) | (1 << (MariaDBParser.CP866 - 731)))) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & ((1 << (MariaDBParser.CP932 - 763)) | (1 << (MariaDBParser.DEC8 - 763)) | (1 << (MariaDBParser.EUCJPMS - 763)) | (1 << (MariaDBParser.EUCKR - 763)) | (1 << (MariaDBParser.GB18030 - 763)) | (1 << (MariaDBParser.GB2312 - 763)) | (1 << (MariaDBParser.GBK - 763)) | (1 << (MariaDBParser.GEOSTD8 - 763)) | (1 << (MariaDBParser.GREEK - 763)) | (1 << (MariaDBParser.HEBREW - 763)) | (1 << (MariaDBParser.HP8 - 763)) | (1 << (MariaDBParser.KEYBCS2 - 763)) | (1 << (MariaDBParser.KOI8R - 763)) | (1 << (MariaDBParser.KOI8U - 763)) | (1 << (MariaDBParser.LATIN1 - 763)) | (1 << (MariaDBParser.LATIN2 - 763)) | (1 << (MariaDBParser.LATIN5 - 763)) | (1 << (MariaDBParser.LATIN7 - 763)) | (1 << (MariaDBParser.MACCE - 763)) | (1 << (MariaDBParser.MACROMAN - 763)) | (1 << (MariaDBParser.SJIS - 763)) | (1 << (MariaDBParser.SWE7 - 763)) | (1 << (MariaDBParser.TIS620 - 763)) | (1 << (MariaDBParser.UCS2 - 763)) | (1 << (MariaDBParser.UJIS - 763)) | (1 << (MariaDBParser.UTF16 - 763)) | (1 << (MariaDBParser.UTF16LE - 763)) | (1 << (MariaDBParser.UTF32 - 763)) | (1 << (MariaDBParser.UTF8 - 763)) | (1 << (MariaDBParser.UTF8MB3 - 763)) | (1 << (MariaDBParser.UTF8MB4 - 763)) | (1 << (MariaDBParser.ARCHIVE - 763)))) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & ((1 << (MariaDBParser.BLACKHOLE - 795)) | (1 << (MariaDBParser.CSV - 795)) | (1 << (MariaDBParser.FEDERATED - 795)) | (1 << (MariaDBParser.INNODB - 795)) | (1 << (MariaDBParser.MEMORY - 795)) | (1 << (MariaDBParser.MRG_MYISAM - 795)) | (1 << (MariaDBParser.MYISAM - 795)) | (1 << (MariaDBParser.NDB - 795)) | (1 << (MariaDBParser.NDBCLUSTER - 795)) | (1 << (MariaDBParser.PERFORMANCE_SCHEMA - 795)) | (1 << (MariaDBParser.TOKUDB - 795)) | (1 << (MariaDBParser.REPEATABLE - 795)) | (1 << (MariaDBParser.COMMITTED - 795)) | (1 << (MariaDBParser.UNCOMMITTED - 795)) | (1 << (MariaDBParser.SERIALIZABLE - 795)) | (1 << (MariaDBParser.GEOMETRYCOLLECTION - 795)) | (1 << (MariaDBParser.LINESTRING - 795)) | (1 << (MariaDBParser.MULTILINESTRING - 795)) | (1 << (MariaDBParser.MULTIPOINT - 795)) | (1 << (MariaDBParser.MULTIPOLYGON - 795)) | (1 << (MariaDBParser.POINT - 795)) | (1 << (MariaDBParser.POLYGON - 795)) | (1 << (MariaDBParser.ABS - 795)) | (1 << (MariaDBParser.ACOS - 795)) | (1 << (MariaDBParser.ADDDATE - 795)) | (1 << (MariaDBParser.ADDTIME - 795)) | (1 << (MariaDBParser.AES_DECRYPT - 795)) | (1 << (MariaDBParser.AES_ENCRYPT - 795)) | (1 << (MariaDBParser.AREA - 795)) | (1 << (MariaDBParser.ASBINARY - 795)))) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & ((1 << (MariaDBParser.ASIN - 827)) | (1 << (MariaDBParser.ASTEXT - 827)) | (1 << (MariaDBParser.ASWKB - 827)) | (1 << (MariaDBParser.ASWKT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DECRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_DERIVE - 827)) | (1 << (MariaDBParser.ASYMMETRIC_ENCRYPT - 827)) | (1 << (MariaDBParser.ASYMMETRIC_SIGN - 827)) | (1 << (MariaDBParser.ASYMMETRIC_VERIFY - 827)) | (1 << (MariaDBParser.ATAN - 827)) | (1 << (MariaDBParser.ATAN2 - 827)) | (1 << (MariaDBParser.BENCHMARK - 827)) | (1 << (MariaDBParser.BIN - 827)) | (1 << (MariaDBParser.BIT_COUNT - 827)) | (1 << (MariaDBParser.BIT_LENGTH - 827)) | (1 << (MariaDBParser.BUFFER - 827)) | (1 << (MariaDBParser.CATALOG_NAME - 827)) | (1 << (MariaDBParser.CEIL - 827)) | (1 << (MariaDBParser.CEILING - 827)) | (1 << (MariaDBParser.CENTROID - 827)) | (1 << (MariaDBParser.CHARACTER_LENGTH - 827)) | (1 << (MariaDBParser.CHARSET - 827)) | (1 << (MariaDBParser.CHAR_LENGTH - 827)) | (1 << (MariaDBParser.COERCIBILITY - 827)) | (1 << (MariaDBParser.COLLATION - 827)) | (1 << (MariaDBParser.COMPRESS - 827)) | (1 << (MariaDBParser.CONCAT - 827)) | (1 << (MariaDBParser.CONCAT_WS - 827)) | (1 << (MariaDBParser.CONNECTION_ID - 827)) | (1 << (MariaDBParser.CONV - 827)) | (1 << (MariaDBParser.CONVERT_TZ - 827)) | (1 << (MariaDBParser.COS - 827)))) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & ((1 << (MariaDBParser.COT - 859)) | (1 << (MariaDBParser.CRC32 - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY - 859)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY - 859)) | (1 << (MariaDBParser.CREATE_DH_PARAMETERS - 859)) | (1 << (MariaDBParser.CREATE_DIGEST - 859)) | (1 << (MariaDBParser.CROSSES - 859)) | (1 << (MariaDBParser.DATEDIFF - 859)) | (1 << (MariaDBParser.DATE_FORMAT - 859)) | (1 << (MariaDBParser.DAYNAME - 859)) | (1 << (MariaDBParser.DAYOFMONTH - 859)) | (1 << (MariaDBParser.DAYOFWEEK - 859)) | (1 << (MariaDBParser.DAYOFYEAR - 859)) | (1 << (MariaDBParser.DECODE - 859)) | (1 << (MariaDBParser.DEGREES - 859)) | (1 << (MariaDBParser.DES_DECRYPT - 859)) | (1 << (MariaDBParser.DES_ENCRYPT - 859)) | (1 << (MariaDBParser.DIMENSION - 859)) | (1 << (MariaDBParser.DISJOINT - 859)) | (1 << (MariaDBParser.ELT - 859)) | (1 << (MariaDBParser.ENCODE - 859)) | (1 << (MariaDBParser.ENCRYPT - 859)) | (1 << (MariaDBParser.ENDPOINT - 859)) | (1 << (MariaDBParser.ENGINE_ATTRIBUTE - 859)) | (1 << (MariaDBParser.ENVELOPE - 859)) | (1 << (MariaDBParser.EQUALS - 859)) | (1 << (MariaDBParser.EXP - 859)) | (1 << (MariaDBParser.EXPORT_SET - 859)) | (1 << (MariaDBParser.EXTERIORRING - 859)) | (1 << (MariaDBParser.EXTRACTVALUE - 859)) | (1 << (MariaDBParser.FIELD - 859)) | (1 << (MariaDBParser.FIND_IN_SET - 859)))) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & ((1 << (MariaDBParser.FLOOR - 891)) | (1 << (MariaDBParser.FORMAT - 891)) | (1 << (MariaDBParser.FOUND_ROWS - 891)) | (1 << (MariaDBParser.FROM_BASE64 - 891)) | (1 << (MariaDBParser.FROM_DAYS - 891)) | (1 << (MariaDBParser.FROM_UNIXTIME - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMCOLLFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMETRYFROMWKB - 891)) | (1 << (MariaDBParser.GEOMETRYN - 891)) | (1 << (MariaDBParser.GEOMETRYTYPE - 891)) | (1 << (MariaDBParser.GEOMFROMTEXT - 891)) | (1 << (MariaDBParser.GEOMFROMWKB - 891)) | (1 << (MariaDBParser.GET_FORMAT - 891)) | (1 << (MariaDBParser.GET_LOCK - 891)) | (1 << (MariaDBParser.GLENGTH - 891)) | (1 << (MariaDBParser.GREATEST - 891)) | (1 << (MariaDBParser.GTID_SUBSET - 891)) | (1 << (MariaDBParser.GTID_SUBTRACT - 891)) | (1 << (MariaDBParser.HEX - 891)) | (1 << (MariaDBParser.IFNULL - 891)) | (1 << (MariaDBParser.INET6_ATON - 891)) | (1 << (MariaDBParser.INET6_NTOA - 891)) | (1 << (MariaDBParser.INET_ATON - 891)) | (1 << (MariaDBParser.INET_NTOA - 891)) | (1 << (MariaDBParser.INSTR - 891)) | (1 << (MariaDBParser.INTERIORRINGN - 891)) | (1 << (MariaDBParser.INTERSECTS - 891)) | (1 << (MariaDBParser.ISCLOSED - 891)))) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & ((1 << (MariaDBParser.ISEMPTY - 923)) | (1 << (MariaDBParser.ISNULL - 923)) | (1 << (MariaDBParser.ISSIMPLE - 923)) | (1 << (MariaDBParser.IS_FREE_LOCK - 923)) | (1 << (MariaDBParser.IS_IPV4 - 923)) | (1 << (MariaDBParser.IS_IPV4_COMPAT - 923)) | (1 << (MariaDBParser.IS_IPV4_MAPPED - 923)) | (1 << (MariaDBParser.IS_IPV6 - 923)) | (1 << (MariaDBParser.IS_USED_LOCK - 923)) | (1 << (MariaDBParser.LAST_INSERT_ID - 923)) | (1 << (MariaDBParser.LCASE - 923)) | (1 << (MariaDBParser.LEAST - 923)) | (1 << (MariaDBParser.LENGTH - 923)) | (1 << (MariaDBParser.LINEFROMTEXT - 923)) | (1 << (MariaDBParser.LINEFROMWKB - 923)) | (1 << (MariaDBParser.LINESTRINGFROMTEXT - 923)) | (1 << (MariaDBParser.LINESTRINGFROMWKB - 923)) | (1 << (MariaDBParser.LN - 923)) | (1 << (MariaDBParser.LOAD_FILE - 923)) | (1 << (MariaDBParser.LOCATE - 923)) | (1 << (MariaDBParser.LOG - 923)) | (1 << (MariaDBParser.LOG10 - 923)) | (1 << (MariaDBParser.LOG2 - 923)) | (1 << (MariaDBParser.LOWER - 923)) | (1 << (MariaDBParser.LPAD - 923)) | (1 << (MariaDBParser.LTRIM - 923)) | (1 << (MariaDBParser.MAKEDATE - 923)) | (1 << (MariaDBParser.MAKETIME - 923)) | (1 << (MariaDBParser.MAKE_SET - 923)) | (1 << (MariaDBParser.MASTER_POS_WAIT - 923)) | (1 << (MariaDBParser.MBRCONTAINS - 923)) | (1 << (MariaDBParser.MBRDISJOINT - 923)))) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & ((1 << (MariaDBParser.MBREQUAL - 955)) | (1 << (MariaDBParser.MBRINTERSECTS - 955)) | (1 << (MariaDBParser.MBROVERLAPS - 955)) | (1 << (MariaDBParser.MBRTOUCHES - 955)) | (1 << (MariaDBParser.MBRWITHIN - 955)) | (1 << (MariaDBParser.MD5 - 955)) | (1 << (MariaDBParser.MLINEFROMTEXT - 955)) | (1 << (MariaDBParser.MLINEFROMWKB - 955)) | (1 << (MariaDBParser.MONTHNAME - 955)) | (1 << (MariaDBParser.MPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MPOLYFROMTEXT - 955)) | (1 << (MariaDBParser.MPOLYFROMWKB - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMTEXT - 955)) | (1 << (MariaDBParser.MULTILINESTRINGFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOINTFROMWKB - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMTEXT - 955)) | (1 << (MariaDBParser.MULTIPOLYGONFROMWKB - 955)) | (1 << (MariaDBParser.NAME_CONST - 955)) | (1 << (MariaDBParser.NULLIF - 955)) | (1 << (MariaDBParser.NUMGEOMETRIES - 955)) | (1 << (MariaDBParser.NUMINTERIORRINGS - 955)) | (1 << (MariaDBParser.NUMPOINTS - 955)) | (1 << (MariaDBParser.OCT - 955)) | (1 << (MariaDBParser.OCTET_LENGTH - 955)) | (1 << (MariaDBParser.ORD - 955)) | (1 << (MariaDBParser.OVERLAPS - 955)) | (1 << (MariaDBParser.PERIOD_ADD - 955)) | (1 << (MariaDBParser.PERIOD_DIFF - 955)) | (1 << (MariaDBParser.PI - 955)) | (1 << (MariaDBParser.POINTFROMTEXT - 955)))) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & ((1 << (MariaDBParser.POINTFROMWKB - 987)) | (1 << (MariaDBParser.POINTN - 987)) | (1 << (MariaDBParser.POLYFROMTEXT - 987)) | (1 << (MariaDBParser.POLYFROMWKB - 987)) | (1 << (MariaDBParser.POLYGONFROMTEXT - 987)) | (1 << (MariaDBParser.POLYGONFROMWKB - 987)) | (1 << (MariaDBParser.POW - 987)) | (1 << (MariaDBParser.POWER - 987)) | (1 << (MariaDBParser.QUOTE - 987)) | (1 << (MariaDBParser.RADIANS - 987)) | (1 << (MariaDBParser.RAND - 987)) | (1 << (MariaDBParser.RANDOM_BYTES - 987)) | (1 << (MariaDBParser.RELEASE_LOCK - 987)) | (1 << (MariaDBParser.REVERSE - 987)) | (1 << (MariaDBParser.ROUND - 987)) | (1 << (MariaDBParser.ROW_COUNT - 987)) | (1 << (MariaDBParser.RPAD - 987)) | (1 << (MariaDBParser.RTRIM - 987)) | (1 << (MariaDBParser.SEC_TO_TIME - 987)) | (1 << (MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE - 987)) | (1 << (MariaDBParser.SESSION_USER - 987)) | (1 << (MariaDBParser.SHA - 987)) | (1 << (MariaDBParser.SHA1 - 987)) | (1 << (MariaDBParser.SHA2 - 987)) | (1 << (MariaDBParser.SCHEMA_NAME - 987)) | (1 << (MariaDBParser.SIGN - 987)) | (1 << (MariaDBParser.SIN - 987)) | (1 << (MariaDBParser.SLEEP - 987)) | (1 << (MariaDBParser.SOUNDEX - 987)) | (1 << (MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS - 987)) | (1 << (MariaDBParser.SQRT - 987)) | (1 << (MariaDBParser.SRID - 987)))) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & ((1 << (MariaDBParser.STARTPOINT - 1019)) | (1 << (MariaDBParser.STRCMP - 1019)) | (1 << (MariaDBParser.STR_TO_DATE - 1019)) | (1 << (MariaDBParser.ST_AREA - 1019)) | (1 << (MariaDBParser.ST_ASBINARY - 1019)) | (1 << (MariaDBParser.ST_ASTEXT - 1019)) | (1 << (MariaDBParser.ST_ASWKB - 1019)) | (1 << (MariaDBParser.ST_ASWKT - 1019)) | (1 << (MariaDBParser.ST_BUFFER - 1019)) | (1 << (MariaDBParser.ST_CENTROID - 1019)) | (1 << (MariaDBParser.ST_CONTAINS - 1019)) | (1 << (MariaDBParser.ST_CROSSES - 1019)) | (1 << (MariaDBParser.ST_DIFFERENCE - 1019)) | (1 << (MariaDBParser.ST_DIMENSION - 1019)) | (1 << (MariaDBParser.ST_DISJOINT - 1019)) | (1 << (MariaDBParser.ST_DISTANCE - 1019)) | (1 << (MariaDBParser.ST_ENDPOINT - 1019)) | (1 << (MariaDBParser.ST_ENVELOPE - 1019)) | (1 << (MariaDBParser.ST_EQUALS - 1019)) | (1 << (MariaDBParser.ST_EXTERIORRING - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTXT - 1019)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYFROMWKB - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYN - 1019)) | (1 << (MariaDBParser.ST_GEOMETRYTYPE - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMTEXT - 1019)) | (1 << (MariaDBParser.ST_GEOMFROMWKB - 1019)) | (1 << (MariaDBParser.ST_INTERIORRINGN - 1019)))) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & ((1 << (MariaDBParser.ST_INTERSECTION - 1051)) | (1 << (MariaDBParser.ST_INTERSECTS - 1051)) | (1 << (MariaDBParser.ST_ISCLOSED - 1051)) | (1 << (MariaDBParser.ST_ISEMPTY - 1051)) | (1 << (MariaDBParser.ST_ISSIMPLE - 1051)) | (1 << (MariaDBParser.ST_LINEFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINEFROMWKB - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_LINESTRINGFROMWKB - 1051)) | (1 << (MariaDBParser.ST_NUMGEOMETRIES - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRING - 1051)) | (1 << (MariaDBParser.ST_NUMINTERIORRINGS - 1051)) | (1 << (MariaDBParser.ST_NUMPOINTS - 1051)) | (1 << (MariaDBParser.ST_OVERLAPS - 1051)) | (1 << (MariaDBParser.ST_POINTFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POINTFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POINTN - 1051)) | (1 << (MariaDBParser.ST_POLYFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYFROMWKB - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMTEXT - 1051)) | (1 << (MariaDBParser.ST_POLYGONFROMWKB - 1051)) | (1 << (MariaDBParser.ST_SRID - 1051)) | (1 << (MariaDBParser.ST_STARTPOINT - 1051)) | (1 << (MariaDBParser.ST_SYMDIFFERENCE - 1051)) | (1 << (MariaDBParser.ST_TOUCHES - 1051)) | (1 << (MariaDBParser.ST_UNION - 1051)) | (1 << (MariaDBParser.ST_WITHIN - 1051)) | (1 << (MariaDBParser.ST_X - 1051)) | (1 << (MariaDBParser.ST_Y - 1051)) | (1 << (MariaDBParser.SUBDATE - 1051)) | (1 << (MariaDBParser.SUBSTRING_INDEX - 1051)) | (1 << (MariaDBParser.SUBTIME - 1051)))) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & ((1 << (MariaDBParser.SYSTEM_USER - 1083)) | (1 << (MariaDBParser.TAN - 1083)) | (1 << (MariaDBParser.TIMEDIFF - 1083)) | (1 << (MariaDBParser.TIMESTAMPADD - 1083)) | (1 << (MariaDBParser.TIMESTAMPDIFF - 1083)) | (1 << (MariaDBParser.TIME_FORMAT - 1083)) | (1 << (MariaDBParser.TIME_TO_SEC - 1083)) | (1 << (MariaDBParser.TOUCHES - 1083)) | (1 << (MariaDBParser.TO_BASE64 - 1083)) | (1 << (MariaDBParser.TO_DAYS - 1083)) | (1 << (MariaDBParser.TO_SECONDS - 1083)) | (1 << (MariaDBParser.UCASE - 1083)) | (1 << (MariaDBParser.UNCOMPRESS - 1083)) | (1 << (MariaDBParser.UNCOMPRESSED_LENGTH - 1083)) | (1 << (MariaDBParser.UNHEX - 1083)) | (1 << (MariaDBParser.UNIX_TIMESTAMP - 1083)) | (1 << (MariaDBParser.UPDATEXML - 1083)) | (1 << (MariaDBParser.UPPER - 1083)) | (1 << (MariaDBParser.UUID - 1083)) | (1 << (MariaDBParser.UUID_SHORT - 1083)) | (1 << (MariaDBParser.VALIDATE_PASSWORD_STRENGTH - 1083)) | (1 << (MariaDBParser.VERSION - 1083)) | (1 << (MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1083)) | (1 << (MariaDBParser.WEEKDAY - 1083)) | (1 << (MariaDBParser.WEEKOFYEAR - 1083)) | (1 << (MariaDBParser.WEIGHT_STRING - 1083)) | (1 << (MariaDBParser.WITHIN - 1083)) | (1 << (MariaDBParser.YEARWEEK - 1083)) | (1 << (MariaDBParser.Y_FUNCTION - 1083)) | (1 << (MariaDBParser.X_FUNCTION - 1083)) | (1 << (MariaDBParser.VIA - 1083)) | (1 << (MariaDBParser.LASTVAL - 1083)))) !== 0) || ((((_la - 1115)) & ~0x1F) === 0 && ((1 << (_la - 1115)) & ((1 << (MariaDBParser.NEXTVAL - 1115)) | (1 << (MariaDBParser.SETVAL - 1115)) | (1 << (MariaDBParser.PREVIOUS - 1115)) | (1 << (MariaDBParser.PERSISTENT - 1115)) | (1 << (MariaDBParser.BINLOG_MONITOR - 1115)) | (1 << (MariaDBParser.BINLOG_REPLAY - 1115)) | (1 << (MariaDBParser.FEDERATED_ADMIN - 1115)) | (1 << (MariaDBParser.READ_ONLY_ADMIN - 1115)) | (1 << (MariaDBParser.REPLICA - 1115)) | (1 << (MariaDBParser.REPLICAS - 1115)) | (1 << (MariaDBParser.REPLICATION_MASTER_ADMIN - 1115)) | (1 << (MariaDBParser.MONITOR - 1115)) | (1 << (MariaDBParser.READ_ONLY - 1115)) | (1 << (MariaDBParser.REPLAY - 1115)) | (1 << (MariaDBParser.MOD - 1115)))) !== 0) || ((((_la - 1166)) & ~0x1F) === 0 && ((1 << (_la - 1166)) & ((1 << (MariaDBParser.CHARSET_REVERSE_QOUTE_STRING - 1166)) | (1 << (MariaDBParser.STRING_LITERAL - 1166)) | (1 << (MariaDBParser.ID - 1166)))) !== 0)) {
				{
				this.state = 4969;
				this.uid();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cursorStatement(): CursorStatementContext {
		let _localctx: CursorStatementContext = new CursorStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 416, MariaDBParser.RULE_cursorStatement);
		let _la: number;
		try {
			this.state = 4987;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.CLOSE:
				_localctx = new CloseCursorContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4972;
				this.match(MariaDBParser.CLOSE);
				this.state = 4973;
				this.uid();
				}
				break;
			case MariaDBParser.FETCH:
				_localctx = new FetchCursorContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4974;
				this.match(MariaDBParser.FETCH);
				this.state = 4979;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 735, this._ctx) ) {
				case 1:
					{
					this.state = 4976;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MariaDBParser.NEXT) {
						{
						this.state = 4975;
						this.match(MariaDBParser.NEXT);
						}
					}

					this.state = 4978;
					this.match(MariaDBParser.FROM);
					}
					break;
				}
				this.state = 4981;
				this.uid();
				this.state = 4982;
				this.match(MariaDBParser.INTO);
				this.state = 4983;
				this.uidList();
				}
				break;
			case MariaDBParser.OPEN:
				_localctx = new OpenCursorContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4985;
				this.match(MariaDBParser.OPEN);
				this.state = 4986;
				this.uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declareVariable(): DeclareVariableContext {
		let _localctx: DeclareVariableContext = new DeclareVariableContext(this._ctx, this.state);
		this.enterRule(_localctx, 418, MariaDBParser.RULE_declareVariable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4989;
			this.match(MariaDBParser.DECLARE);
			this.state = 4990;
			this.uidList();
			this.state = 4991;
			this.dataType();
			this.state = 4994;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.DEFAULT) {
				{
				this.state = 4992;
				this.match(MariaDBParser.DEFAULT);
				this.state = 4993;
				this.expression(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declareCondition(): DeclareConditionContext {
		let _localctx: DeclareConditionContext = new DeclareConditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 420, MariaDBParser.RULE_declareCondition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4996;
			this.match(MariaDBParser.DECLARE);
			this.state = 4997;
			this.uid();
			this.state = 4998;
			this.match(MariaDBParser.CONDITION);
			this.state = 4999;
			this.match(MariaDBParser.FOR);
			this.state = 5006;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.ZERO_DECIMAL:
			case MariaDBParser.ONE_DECIMAL:
			case MariaDBParser.TWO_DECIMAL:
			case MariaDBParser.DECIMAL_LITERAL:
			case MariaDBParser.REAL_LITERAL:
				{
				this.state = 5000;
				this.decimalLiteral();
				}
				break;
			case MariaDBParser.SQLSTATE:
				{
				this.state = 5001;
				this.match(MariaDBParser.SQLSTATE);
				this.state = 5003;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.VALUE) {
					{
					this.state = 5002;
					this.match(MariaDBParser.VALUE);
					}
				}

				this.state = 5005;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declareCursor(): DeclareCursorContext {
		let _localctx: DeclareCursorContext = new DeclareCursorContext(this._ctx, this.state);
		this.enterRule(_localctx, 422, MariaDBParser.RULE_declareCursor);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5008;
			this.match(MariaDBParser.DECLARE);
			this.state = 5009;
			this.uid();
			this.state = 5010;
			this.match(MariaDBParser.CURSOR);
			this.state = 5011;
			this.match(MariaDBParser.FOR);
			this.state = 5012;
			this.selectStatement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declareHandler(): DeclareHandlerContext {
		let _localctx: DeclareHandlerContext = new DeclareHandlerContext(this._ctx, this.state);
		this.enterRule(_localctx, 424, MariaDBParser.RULE_declareHandler);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5014;
			this.match(MariaDBParser.DECLARE);
			this.state = 5015;
			_localctx._handlerAction = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MariaDBParser.CONTINUE || _la === MariaDBParser.EXIT || _la === MariaDBParser.UNDO)) {
				_localctx._handlerAction = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5016;
			this.match(MariaDBParser.HANDLER);
			this.state = 5017;
			this.match(MariaDBParser.FOR);
			this.state = 5018;
			this.handlerConditionValue();
			this.state = 5023;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.COMMA) {
				{
				{
				this.state = 5019;
				this.match(MariaDBParser.COMMA);
				this.state = 5020;
				this.handlerConditionValue();
				}
				}
				this.state = 5025;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5026;
			this.routineBody();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public handlerConditionValue(): HandlerConditionValueContext {
		let _localctx: HandlerConditionValueContext = new HandlerConditionValueContext(this._ctx, this.state);
		this.enterRule(_localctx, 426, MariaDBParser.RULE_handlerConditionValue);
		let _la: number;
		try {
			this.state = 5039;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.ZERO_DECIMAL:
			case MariaDBParser.ONE_DECIMAL:
			case MariaDBParser.TWO_DECIMAL:
			case MariaDBParser.DECIMAL_LITERAL:
			case MariaDBParser.REAL_LITERAL:
				_localctx = new HandlerConditionCodeContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5028;
				this.decimalLiteral();
				}
				break;
			case MariaDBParser.SQLSTATE:
				_localctx = new HandlerConditionStateContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5029;
				this.match(MariaDBParser.SQLSTATE);
				this.state = 5031;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.VALUE) {
					{
					this.state = 5030;
					this.match(MariaDBParser.VALUE);
					}
				}

				this.state = 5033;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			case MariaDBParser.ATTRIBUTE:
			case MariaDBParser.BODY:
			case MariaDBParser.BUCKETS:
			case MariaDBParser.CONDITION:
			case MariaDBParser.CURRENT:
			case MariaDBParser.CURRENT_ROLE:
			case MariaDBParser.CURRENT_USER:
			case MariaDBParser.DATABASE:
			case MariaDBParser.DEFAULT:
			case MariaDBParser.DIAGNOSTICS:
			case MariaDBParser.EMPTY:
			case MariaDBParser.EXCEPT:
			case MariaDBParser.GROUP:
			case MariaDBParser.IF:
			case MariaDBParser.IGNORED:
			case MariaDBParser.INSERT:
			case MariaDBParser.LATERAL:
			case MariaDBParser.LEFT:
			case MariaDBParser.LOCKED:
			case MariaDBParser.MAXVALUE:
			case MariaDBParser.MINVALUE:
			case MariaDBParser.NUMBER:
			case MariaDBParser.OPTIONAL:
			case MariaDBParser.ORDER:
			case MariaDBParser.PRIMARY:
			case MariaDBParser.PACKAGE:
			case MariaDBParser.REPLACE:
			case MariaDBParser.RIGHT:
			case MariaDBParser.SCHEMA:
			case MariaDBParser.SKIP_:
			case MariaDBParser.STACKED:
			case MariaDBParser.STATEMENT:
			case MariaDBParser.DATE:
			case MariaDBParser.TIME:
			case MariaDBParser.TIMESTAMP:
			case MariaDBParser.DATETIME:
			case MariaDBParser.YEAR:
			case MariaDBParser.BINARY:
			case MariaDBParser.TEXT:
			case MariaDBParser.ENUM:
			case MariaDBParser.SERIAL:
			case MariaDBParser.JSON_ARRAY:
			case MariaDBParser.JSON_ARRAYAGG:
			case MariaDBParser.JSON_ARRAY_APPEND:
			case MariaDBParser.JSON_ARRAY_INSERT:
			case MariaDBParser.JSON_CONTAINS:
			case MariaDBParser.JSON_CONTAINS_PATH:
			case MariaDBParser.JSON_DEPTH:
			case MariaDBParser.JSON_EXTRACT:
			case MariaDBParser.JSON_INSERT:
			case MariaDBParser.JSON_KEYS:
			case MariaDBParser.JSON_LENGTH:
			case MariaDBParser.JSON_MERGE:
			case MariaDBParser.JSON_MERGE_PATCH:
			case MariaDBParser.JSON_MERGE_PRESERVE:
			case MariaDBParser.JSON_OBJECT:
			case MariaDBParser.JSON_OBJECTAGG:
			case MariaDBParser.JSON_OVERLAPS:
			case MariaDBParser.JSON_PRETTY:
			case MariaDBParser.JSON_QUOTE:
			case MariaDBParser.JSON_REMOVE:
			case MariaDBParser.JSON_REPLACE:
			case MariaDBParser.JSON_SCHEMA_VALID:
			case MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT:
			case MariaDBParser.JSON_SEARCH:
			case MariaDBParser.JSON_SET:
			case MariaDBParser.JSON_STORAGE_FREE:
			case MariaDBParser.JSON_STORAGE_SIZE:
			case MariaDBParser.JSON_TABLE:
			case MariaDBParser.JSON_TYPE:
			case MariaDBParser.JSON_UNQUOTE:
			case MariaDBParser.JSON_VALID:
			case MariaDBParser.JSON_VALUE:
			case MariaDBParser.NESTED:
			case MariaDBParser.ORDINALITY:
			case MariaDBParser.PATH:
			case MariaDBParser.AVG:
			case MariaDBParser.BIT_AND:
			case MariaDBParser.BIT_OR:
			case MariaDBParser.BIT_XOR:
			case MariaDBParser.COUNT:
			case MariaDBParser.CUME_DIST:
			case MariaDBParser.DENSE_RANK:
			case MariaDBParser.FIRST_VALUE:
			case MariaDBParser.GROUP_CONCAT:
			case MariaDBParser.LAG:
			case MariaDBParser.LAST_VALUE:
			case MariaDBParser.LEAD:
			case MariaDBParser.MAX:
			case MariaDBParser.MIN:
			case MariaDBParser.NTILE:
			case MariaDBParser.NTH_VALUE:
			case MariaDBParser.PERCENT_RANK:
			case MariaDBParser.RANK:
			case MariaDBParser.ROW_NUMBER:
			case MariaDBParser.STD:
			case MariaDBParser.STDDEV:
			case MariaDBParser.STDDEV_POP:
			case MariaDBParser.STDDEV_SAMP:
			case MariaDBParser.SUM:
			case MariaDBParser.VAR_POP:
			case MariaDBParser.VAR_SAMP:
			case MariaDBParser.VARIANCE:
			case MariaDBParser.CURRENT_DATE:
			case MariaDBParser.CURRENT_TIME:
			case MariaDBParser.CURRENT_TIMESTAMP:
			case MariaDBParser.LOCALTIME:
			case MariaDBParser.CURDATE:
			case MariaDBParser.CURTIME:
			case MariaDBParser.DATE_ADD:
			case MariaDBParser.DATE_SUB:
			case MariaDBParser.LOCALTIMESTAMP:
			case MariaDBParser.NOW:
			case MariaDBParser.POSITION:
			case MariaDBParser.SUBSTR:
			case MariaDBParser.SUBSTRING:
			case MariaDBParser.SYSDATE:
			case MariaDBParser.TRIM:
			case MariaDBParser.UTC_DATE:
			case MariaDBParser.UTC_TIME:
			case MariaDBParser.UTC_TIMESTAMP:
			case MariaDBParser.ACCOUNT:
			case MariaDBParser.ACTION:
			case MariaDBParser.AFTER:
			case MariaDBParser.AGGREGATE:
			case MariaDBParser.ALGORITHM:
			case MariaDBParser.ANY:
			case MariaDBParser.AT:
			case MariaDBParser.AUTHORS:
			case MariaDBParser.AUTOCOMMIT:
			case MariaDBParser.AUTOEXTEND_SIZE:
			case MariaDBParser.AUTO_INCREMENT:
			case MariaDBParser.AVG_ROW_LENGTH:
			case MariaDBParser.BEGIN:
			case MariaDBParser.BINLOG:
			case MariaDBParser.BIT:
			case MariaDBParser.BLOCK:
			case MariaDBParser.BOOL:
			case MariaDBParser.BOOLEAN:
			case MariaDBParser.BTREE:
			case MariaDBParser.CACHE:
			case MariaDBParser.CASCADED:
			case MariaDBParser.CHAIN:
			case MariaDBParser.CHANGED:
			case MariaDBParser.CHANNEL:
			case MariaDBParser.CHECKSUM:
			case MariaDBParser.PAGE_CHECKSUM:
			case MariaDBParser.CIPHER:
			case MariaDBParser.CLASS_ORIGIN:
			case MariaDBParser.CLIENT:
			case MariaDBParser.CLOSE:
			case MariaDBParser.CLUSTERING:
			case MariaDBParser.COALESCE:
			case MariaDBParser.CODE:
			case MariaDBParser.COLUMNS:
			case MariaDBParser.COLUMN_FORMAT:
			case MariaDBParser.COLUMN_NAME:
			case MariaDBParser.COMMENT:
			case MariaDBParser.COMMIT:
			case MariaDBParser.COMPACT:
			case MariaDBParser.COMPLETION:
			case MariaDBParser.COMPRESSED:
			case MariaDBParser.COMPRESSION:
			case MariaDBParser.CONCURRENT:
			case MariaDBParser.CONNECT:
			case MariaDBParser.CONNECTION:
			case MariaDBParser.CONSISTENT:
			case MariaDBParser.CONSTRAINT_CATALOG:
			case MariaDBParser.CONSTRAINT_SCHEMA:
			case MariaDBParser.CONSTRAINT_NAME:
			case MariaDBParser.CONTAINS:
			case MariaDBParser.CONTEXT:
			case MariaDBParser.CONTRIBUTORS:
			case MariaDBParser.COPY:
			case MariaDBParser.CPU:
			case MariaDBParser.CYCLE:
			case MariaDBParser.CURSOR_NAME:
			case MariaDBParser.DATA:
			case MariaDBParser.DATAFILE:
			case MariaDBParser.DEALLOCATE:
			case MariaDBParser.DEFAULT_AUTH:
			case MariaDBParser.DEFINER:
			case MariaDBParser.DELAY_KEY_WRITE:
			case MariaDBParser.DES_KEY_FILE:
			case MariaDBParser.DIRECTORY:
			case MariaDBParser.DISABLE:
			case MariaDBParser.DISCARD:
			case MariaDBParser.DISK:
			case MariaDBParser.DO:
			case MariaDBParser.DUMPFILE:
			case MariaDBParser.DUPLICATE:
			case MariaDBParser.DYNAMIC:
			case MariaDBParser.ENABLE:
			case MariaDBParser.ENCRYPTED:
			case MariaDBParser.ENCRYPTION:
			case MariaDBParser.ENCRYPTION_KEY_ID:
			case MariaDBParser.END:
			case MariaDBParser.ENDS:
			case MariaDBParser.ENGINE:
			case MariaDBParser.ENGINES:
			case MariaDBParser.ERROR:
			case MariaDBParser.ERRORS:
			case MariaDBParser.ESCAPE:
			case MariaDBParser.EVEN:
			case MariaDBParser.EVENT:
			case MariaDBParser.EVENTS:
			case MariaDBParser.EVERY:
			case MariaDBParser.EXCHANGE:
			case MariaDBParser.EXCLUSIVE:
			case MariaDBParser.EXPIRE:
			case MariaDBParser.EXPORT:
			case MariaDBParser.EXTENDED:
			case MariaDBParser.EXTENT_SIZE:
			case MariaDBParser.FAILED_LOGIN_ATTEMPTS:
			case MariaDBParser.FAST:
			case MariaDBParser.FAULTS:
			case MariaDBParser.FIELDS:
			case MariaDBParser.FILE_BLOCK_SIZE:
			case MariaDBParser.FILTER:
			case MariaDBParser.FIRST:
			case MariaDBParser.FIXED:
			case MariaDBParser.FLUSH:
			case MariaDBParser.FOLLOWS:
			case MariaDBParser.FOUND:
			case MariaDBParser.FULL:
			case MariaDBParser.FUNCTION:
			case MariaDBParser.GENERAL:
			case MariaDBParser.GLOBAL:
			case MariaDBParser.GRANTS:
			case MariaDBParser.GROUP_REPLICATION:
			case MariaDBParser.HANDLER:
			case MariaDBParser.HASH:
			case MariaDBParser.HELP:
			case MariaDBParser.HISTORY:
			case MariaDBParser.HOST:
			case MariaDBParser.HOSTS:
			case MariaDBParser.IDENTIFIED:
			case MariaDBParser.IGNORE_SERVER_IDS:
			case MariaDBParser.IMPORT:
			case MariaDBParser.INCREMENT:
			case MariaDBParser.INDEXES:
			case MariaDBParser.INITIAL_SIZE:
			case MariaDBParser.INPLACE:
			case MariaDBParser.INSERT_METHOD:
			case MariaDBParser.INSTALL:
			case MariaDBParser.INSTANCE:
			case MariaDBParser.INSTANT:
			case MariaDBParser.INVISIBLE:
			case MariaDBParser.INVOKER:
			case MariaDBParser.IO:
			case MariaDBParser.IO_THREAD:
			case MariaDBParser.IPC:
			case MariaDBParser.ISOLATION:
			case MariaDBParser.ISSUER:
			case MariaDBParser.JSON:
			case MariaDBParser.KEY_BLOCK_SIZE:
			case MariaDBParser.LANGUAGE:
			case MariaDBParser.LAST:
			case MariaDBParser.LEAVES:
			case MariaDBParser.LESS:
			case MariaDBParser.LEVEL:
			case MariaDBParser.LIST:
			case MariaDBParser.LOCAL:
			case MariaDBParser.LOCALES:
			case MariaDBParser.LOGFILE:
			case MariaDBParser.LOGS:
			case MariaDBParser.MASTER:
			case MariaDBParser.MASTER_AUTO_POSITION:
			case MariaDBParser.MASTER_CONNECT_RETRY:
			case MariaDBParser.MASTER_DELAY:
			case MariaDBParser.MASTER_HEARTBEAT_PERIOD:
			case MariaDBParser.MASTER_HOST:
			case MariaDBParser.MASTER_LOG_FILE:
			case MariaDBParser.MASTER_LOG_POS:
			case MariaDBParser.MASTER_PASSWORD:
			case MariaDBParser.MASTER_PORT:
			case MariaDBParser.MASTER_RETRY_COUNT:
			case MariaDBParser.MASTER_SSL:
			case MariaDBParser.MASTER_SSL_CA:
			case MariaDBParser.MASTER_SSL_CAPATH:
			case MariaDBParser.MASTER_SSL_CERT:
			case MariaDBParser.MASTER_SSL_CIPHER:
			case MariaDBParser.MASTER_SSL_CRL:
			case MariaDBParser.MASTER_SSL_CRLPATH:
			case MariaDBParser.MASTER_SSL_KEY:
			case MariaDBParser.MASTER_TLS_VERSION:
			case MariaDBParser.MASTER_USER:
			case MariaDBParser.MAX_CONNECTIONS_PER_HOUR:
			case MariaDBParser.MAX_QUERIES_PER_HOUR:
			case MariaDBParser.MAX_ROWS:
			case MariaDBParser.MAX_SIZE:
			case MariaDBParser.MAX_UPDATES_PER_HOUR:
			case MariaDBParser.MAX_USER_CONNECTIONS:
			case MariaDBParser.MEDIUM:
			case MariaDBParser.MEMBER:
			case MariaDBParser.MERGE:
			case MariaDBParser.MESSAGE_TEXT:
			case MariaDBParser.MID:
			case MariaDBParser.MIGRATE:
			case MariaDBParser.MIN_ROWS:
			case MariaDBParser.MODE:
			case MariaDBParser.MODIFY:
			case MariaDBParser.MUTEX:
			case MariaDBParser.MYSQL:
			case MariaDBParser.MYSQL_ERRNO:
			case MariaDBParser.NAME:
			case MariaDBParser.NAMES:
			case MariaDBParser.NCHAR:
			case MariaDBParser.NEVER:
			case MariaDBParser.NEXT:
			case MariaDBParser.NO:
			case MariaDBParser.NOCACHE:
			case MariaDBParser.NOCOPY:
			case MariaDBParser.NOCYCLE:
			case MariaDBParser.NOMAXVALUE:
			case MariaDBParser.NOMINVALUE:
			case MariaDBParser.NOWAIT:
			case MariaDBParser.NODEGROUP:
			case MariaDBParser.NONE:
			case MariaDBParser.ODBC:
			case MariaDBParser.OFFLINE:
			case MariaDBParser.OFFSET:
			case MariaDBParser.OF:
			case MariaDBParser.OJ:
			case MariaDBParser.OLD_PASSWORD:
			case MariaDBParser.ONE:
			case MariaDBParser.ONLINE:
			case MariaDBParser.ONLY:
			case MariaDBParser.OPEN:
			case MariaDBParser.OPTIMIZER_COSTS:
			case MariaDBParser.OPTIONS:
			case MariaDBParser.OWNER:
			case MariaDBParser.PACK_KEYS:
			case MariaDBParser.PAGE:
			case MariaDBParser.PARSER:
			case MariaDBParser.PARTIAL:
			case MariaDBParser.PARTITIONING:
			case MariaDBParser.PARTITIONS:
			case MariaDBParser.PASSWORD:
			case MariaDBParser.PASSWORD_LOCK_TIME:
			case MariaDBParser.PHASE:
			case MariaDBParser.PLUGIN:
			case MariaDBParser.PLUGIN_DIR:
			case MariaDBParser.PLUGINS:
			case MariaDBParser.PORT:
			case MariaDBParser.PRECEDES:
			case MariaDBParser.PREPARE:
			case MariaDBParser.PRESERVE:
			case MariaDBParser.PREV:
			case MariaDBParser.PROCESSLIST:
			case MariaDBParser.PROFILE:
			case MariaDBParser.PROFILES:
			case MariaDBParser.PROXY:
			case MariaDBParser.QUERY:
			case MariaDBParser.QUERY_RESPONSE_TIME:
			case MariaDBParser.QUICK:
			case MariaDBParser.REBUILD:
			case MariaDBParser.RECOVER:
			case MariaDBParser.RECURSIVE:
			case MariaDBParser.REDO_BUFFER_SIZE:
			case MariaDBParser.REDUNDANT:
			case MariaDBParser.RELAY:
			case MariaDBParser.RELAY_LOG_FILE:
			case MariaDBParser.RELAY_LOG_POS:
			case MariaDBParser.RELAYLOG:
			case MariaDBParser.REMOVE:
			case MariaDBParser.REORGANIZE:
			case MariaDBParser.REPAIR:
			case MariaDBParser.REPLICATE_DO_DB:
			case MariaDBParser.REPLICATE_DO_TABLE:
			case MariaDBParser.REPLICATE_IGNORE_DB:
			case MariaDBParser.REPLICATE_IGNORE_TABLE:
			case MariaDBParser.REPLICATE_REWRITE_DB:
			case MariaDBParser.REPLICATE_WILD_DO_TABLE:
			case MariaDBParser.REPLICATE_WILD_IGNORE_TABLE:
			case MariaDBParser.REPLICATION:
			case MariaDBParser.RESET:
			case MariaDBParser.RESTART:
			case MariaDBParser.RESUME:
			case MariaDBParser.RETURNED_SQLSTATE:
			case MariaDBParser.RETURNS:
			case MariaDBParser.REUSE:
			case MariaDBParser.ROLE:
			case MariaDBParser.ROLLBACK:
			case MariaDBParser.ROLLUP:
			case MariaDBParser.ROTATE:
			case MariaDBParser.ROW:
			case MariaDBParser.ROWS:
			case MariaDBParser.ROW_FORMAT:
			case MariaDBParser.RTREE:
			case MariaDBParser.SAVEPOINT:
			case MariaDBParser.SCHEDULE:
			case MariaDBParser.SECURITY:
			case MariaDBParser.SEQUENCE:
			case MariaDBParser.SERVER:
			case MariaDBParser.SESSION:
			case MariaDBParser.SHARE:
			case MariaDBParser.SHARED:
			case MariaDBParser.SIGNED:
			case MariaDBParser.SIMPLE:
			case MariaDBParser.SLAVE:
			case MariaDBParser.SLAVES:
			case MariaDBParser.SLOW:
			case MariaDBParser.SNAPSHOT:
			case MariaDBParser.SOCKET:
			case MariaDBParser.SOME:
			case MariaDBParser.SONAME:
			case MariaDBParser.SOUNDS:
			case MariaDBParser.SOURCE:
			case MariaDBParser.SQL_AFTER_GTIDS:
			case MariaDBParser.SQL_AFTER_MTS_GAPS:
			case MariaDBParser.SQL_BEFORE_GTIDS:
			case MariaDBParser.SQL_BUFFER_RESULT:
			case MariaDBParser.SQL_CACHE:
			case MariaDBParser.SQL_NO_CACHE:
			case MariaDBParser.SQL_THREAD:
			case MariaDBParser.START:
			case MariaDBParser.STARTS:
			case MariaDBParser.STATS_AUTO_RECALC:
			case MariaDBParser.STATS_PERSISTENT:
			case MariaDBParser.STATS_SAMPLE_PAGES:
			case MariaDBParser.STATUS:
			case MariaDBParser.STOP:
			case MariaDBParser.STORAGE:
			case MariaDBParser.STRING:
			case MariaDBParser.SUBCLASS_ORIGIN:
			case MariaDBParser.SUBJECT:
			case MariaDBParser.SUBPARTITION:
			case MariaDBParser.SUBPARTITIONS:
			case MariaDBParser.SUSPEND:
			case MariaDBParser.SWAPS:
			case MariaDBParser.SWITCHES:
			case MariaDBParser.TABLE_NAME:
			case MariaDBParser.TABLESPACE:
			case MariaDBParser.TABLE_TYPE:
			case MariaDBParser.TEMPORARY:
			case MariaDBParser.TEMPTABLE:
			case MariaDBParser.THAN:
			case MariaDBParser.TRADITIONAL:
			case MariaDBParser.TRANSACTION:
			case MariaDBParser.TRANSACTIONAL:
			case MariaDBParser.TRIGGERS:
			case MariaDBParser.TRUNCATE:
			case MariaDBParser.TYPES:
			case MariaDBParser.UNBOUNDED:
			case MariaDBParser.UNDEFINED:
			case MariaDBParser.UNDOFILE:
			case MariaDBParser.UNDO_BUFFER_SIZE:
			case MariaDBParser.UNINSTALL:
			case MariaDBParser.UNKNOWN:
			case MariaDBParser.UNTIL:
			case MariaDBParser.UPGRADE:
			case MariaDBParser.USER:
			case MariaDBParser.USE_FRM:
			case MariaDBParser.USER_RESOURCES:
			case MariaDBParser.VALIDATION:
			case MariaDBParser.VALUE:
			case MariaDBParser.VARIABLES:
			case MariaDBParser.VIEW:
			case MariaDBParser.VIRTUAL:
			case MariaDBParser.VISIBLE:
			case MariaDBParser.WAIT:
			case MariaDBParser.WARNINGS:
			case MariaDBParser.WITHOUT:
			case MariaDBParser.WORK:
			case MariaDBParser.WRAPPER:
			case MariaDBParser.WSREP_MEMBERSHIP:
			case MariaDBParser.WSREP_STATUS:
			case MariaDBParser.X509:
			case MariaDBParser.XA:
			case MariaDBParser.XML:
			case MariaDBParser.EUR:
			case MariaDBParser.USA:
			case MariaDBParser.JIS:
			case MariaDBParser.ISO:
			case MariaDBParser.INTERNAL:
			case MariaDBParser.QUARTER:
			case MariaDBParser.MONTH:
			case MariaDBParser.DAY:
			case MariaDBParser.HOUR:
			case MariaDBParser.MINUTE:
			case MariaDBParser.WEEK:
			case MariaDBParser.SECOND:
			case MariaDBParser.MICROSECOND:
			case MariaDBParser.USER_STATISTICS:
			case MariaDBParser.CLIENT_STATISTICS:
			case MariaDBParser.INDEX_STATISTICS:
			case MariaDBParser.TABLE_STATISTICS:
			case MariaDBParser.ADMIN:
			case MariaDBParser.AUDIT_ADMIN:
			case MariaDBParser.BACKUP_ADMIN:
			case MariaDBParser.BINLOG_ADMIN:
			case MariaDBParser.BINLOG_ENCRYPTION_ADMIN:
			case MariaDBParser.CLONE_ADMIN:
			case MariaDBParser.CONNECTION_ADMIN:
			case MariaDBParser.ENCRYPTION_KEY_ADMIN:
			case MariaDBParser.EXECUTE:
			case MariaDBParser.FILE:
			case MariaDBParser.FIREWALL_ADMIN:
			case MariaDBParser.FIREWALL_USER:
			case MariaDBParser.GROUP_REPLICATION_ADMIN:
			case MariaDBParser.INNODB_REDO_LOG_ARCHIVE:
			case MariaDBParser.INVOKE:
			case MariaDBParser.LAMBDA:
			case MariaDBParser.NDB_STORED_USER:
			case MariaDBParser.PASSWORDLESS_USER_ADMIN:
			case MariaDBParser.PERSIST_RO_VARIABLES_ADMIN:
			case MariaDBParser.PRIVILEGES:
			case MariaDBParser.PROCESS:
			case MariaDBParser.RELOAD:
			case MariaDBParser.REPLICATION_APPLIER:
			case MariaDBParser.REPLICATION_SLAVE_ADMIN:
			case MariaDBParser.RESOURCE_GROUP_ADMIN:
			case MariaDBParser.RESOURCE_GROUP_USER:
			case MariaDBParser.ROLE_ADMIN:
			case MariaDBParser.ROUTINE:
			case MariaDBParser.S3:
			case MariaDBParser.SESSION_VARIABLES_ADMIN:
			case MariaDBParser.SET_USER_ID:
			case MariaDBParser.SHOW_ROUTINE:
			case MariaDBParser.SHUTDOWN:
			case MariaDBParser.SUPER:
			case MariaDBParser.SYSTEM_VARIABLES_ADMIN:
			case MariaDBParser.TABLES:
			case MariaDBParser.TABLE_ENCRYPTION_ADMIN:
			case MariaDBParser.VERSION_TOKEN_ADMIN:
			case MariaDBParser.XA_RECOVER_ADMIN:
			case MariaDBParser.ARMSCII8:
			case MariaDBParser.ASCII:
			case MariaDBParser.BIG5:
			case MariaDBParser.CP1250:
			case MariaDBParser.CP1251:
			case MariaDBParser.CP1256:
			case MariaDBParser.CP1257:
			case MariaDBParser.CP850:
			case MariaDBParser.CP852:
			case MariaDBParser.CP866:
			case MariaDBParser.CP932:
			case MariaDBParser.DEC8:
			case MariaDBParser.EUCJPMS:
			case MariaDBParser.EUCKR:
			case MariaDBParser.GB18030:
			case MariaDBParser.GB2312:
			case MariaDBParser.GBK:
			case MariaDBParser.GEOSTD8:
			case MariaDBParser.GREEK:
			case MariaDBParser.HEBREW:
			case MariaDBParser.HP8:
			case MariaDBParser.KEYBCS2:
			case MariaDBParser.KOI8R:
			case MariaDBParser.KOI8U:
			case MariaDBParser.LATIN1:
			case MariaDBParser.LATIN2:
			case MariaDBParser.LATIN5:
			case MariaDBParser.LATIN7:
			case MariaDBParser.MACCE:
			case MariaDBParser.MACROMAN:
			case MariaDBParser.SJIS:
			case MariaDBParser.SWE7:
			case MariaDBParser.TIS620:
			case MariaDBParser.UCS2:
			case MariaDBParser.UJIS:
			case MariaDBParser.UTF16:
			case MariaDBParser.UTF16LE:
			case MariaDBParser.UTF32:
			case MariaDBParser.UTF8:
			case MariaDBParser.UTF8MB3:
			case MariaDBParser.UTF8MB4:
			case MariaDBParser.ARCHIVE:
			case MariaDBParser.BLACKHOLE:
			case MariaDBParser.CSV:
			case MariaDBParser.FEDERATED:
			case MariaDBParser.INNODB:
			case MariaDBParser.MEMORY:
			case MariaDBParser.MRG_MYISAM:
			case MariaDBParser.MYISAM:
			case MariaDBParser.NDB:
			case MariaDBParser.NDBCLUSTER:
			case MariaDBParser.PERFORMANCE_SCHEMA:
			case MariaDBParser.TOKUDB:
			case MariaDBParser.REPEATABLE:
			case MariaDBParser.COMMITTED:
			case MariaDBParser.UNCOMMITTED:
			case MariaDBParser.SERIALIZABLE:
			case MariaDBParser.GEOMETRYCOLLECTION:
			case MariaDBParser.LINESTRING:
			case MariaDBParser.MULTILINESTRING:
			case MariaDBParser.MULTIPOINT:
			case MariaDBParser.MULTIPOLYGON:
			case MariaDBParser.POINT:
			case MariaDBParser.POLYGON:
			case MariaDBParser.ABS:
			case MariaDBParser.ACOS:
			case MariaDBParser.ADDDATE:
			case MariaDBParser.ADDTIME:
			case MariaDBParser.AES_DECRYPT:
			case MariaDBParser.AES_ENCRYPT:
			case MariaDBParser.AREA:
			case MariaDBParser.ASBINARY:
			case MariaDBParser.ASIN:
			case MariaDBParser.ASTEXT:
			case MariaDBParser.ASWKB:
			case MariaDBParser.ASWKT:
			case MariaDBParser.ASYMMETRIC_DECRYPT:
			case MariaDBParser.ASYMMETRIC_DERIVE:
			case MariaDBParser.ASYMMETRIC_ENCRYPT:
			case MariaDBParser.ASYMMETRIC_SIGN:
			case MariaDBParser.ASYMMETRIC_VERIFY:
			case MariaDBParser.ATAN:
			case MariaDBParser.ATAN2:
			case MariaDBParser.BENCHMARK:
			case MariaDBParser.BIN:
			case MariaDBParser.BIT_COUNT:
			case MariaDBParser.BIT_LENGTH:
			case MariaDBParser.BUFFER:
			case MariaDBParser.CATALOG_NAME:
			case MariaDBParser.CEIL:
			case MariaDBParser.CEILING:
			case MariaDBParser.CENTROID:
			case MariaDBParser.CHARACTER_LENGTH:
			case MariaDBParser.CHARSET:
			case MariaDBParser.CHAR_LENGTH:
			case MariaDBParser.COERCIBILITY:
			case MariaDBParser.COLLATION:
			case MariaDBParser.COMPRESS:
			case MariaDBParser.CONCAT:
			case MariaDBParser.CONCAT_WS:
			case MariaDBParser.CONNECTION_ID:
			case MariaDBParser.CONV:
			case MariaDBParser.CONVERT_TZ:
			case MariaDBParser.COS:
			case MariaDBParser.COT:
			case MariaDBParser.CRC32:
			case MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY:
			case MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY:
			case MariaDBParser.CREATE_DH_PARAMETERS:
			case MariaDBParser.CREATE_DIGEST:
			case MariaDBParser.CROSSES:
			case MariaDBParser.DATEDIFF:
			case MariaDBParser.DATE_FORMAT:
			case MariaDBParser.DAYNAME:
			case MariaDBParser.DAYOFMONTH:
			case MariaDBParser.DAYOFWEEK:
			case MariaDBParser.DAYOFYEAR:
			case MariaDBParser.DECODE:
			case MariaDBParser.DEGREES:
			case MariaDBParser.DES_DECRYPT:
			case MariaDBParser.DES_ENCRYPT:
			case MariaDBParser.DIMENSION:
			case MariaDBParser.DISJOINT:
			case MariaDBParser.ELT:
			case MariaDBParser.ENCODE:
			case MariaDBParser.ENCRYPT:
			case MariaDBParser.ENDPOINT:
			case MariaDBParser.ENGINE_ATTRIBUTE:
			case MariaDBParser.ENVELOPE:
			case MariaDBParser.EQUALS:
			case MariaDBParser.EXP:
			case MariaDBParser.EXPORT_SET:
			case MariaDBParser.EXTERIORRING:
			case MariaDBParser.EXTRACTVALUE:
			case MariaDBParser.FIELD:
			case MariaDBParser.FIND_IN_SET:
			case MariaDBParser.FLOOR:
			case MariaDBParser.FORMAT:
			case MariaDBParser.FOUND_ROWS:
			case MariaDBParser.FROM_BASE64:
			case MariaDBParser.FROM_DAYS:
			case MariaDBParser.FROM_UNIXTIME:
			case MariaDBParser.GEOMCOLLFROMTEXT:
			case MariaDBParser.GEOMCOLLFROMWKB:
			case MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT:
			case MariaDBParser.GEOMETRYCOLLECTIONFROMWKB:
			case MariaDBParser.GEOMETRYFROMTEXT:
			case MariaDBParser.GEOMETRYFROMWKB:
			case MariaDBParser.GEOMETRYN:
			case MariaDBParser.GEOMETRYTYPE:
			case MariaDBParser.GEOMFROMTEXT:
			case MariaDBParser.GEOMFROMWKB:
			case MariaDBParser.GET_FORMAT:
			case MariaDBParser.GET_LOCK:
			case MariaDBParser.GLENGTH:
			case MariaDBParser.GREATEST:
			case MariaDBParser.GTID_SUBSET:
			case MariaDBParser.GTID_SUBTRACT:
			case MariaDBParser.HEX:
			case MariaDBParser.IFNULL:
			case MariaDBParser.INET6_ATON:
			case MariaDBParser.INET6_NTOA:
			case MariaDBParser.INET_ATON:
			case MariaDBParser.INET_NTOA:
			case MariaDBParser.INSTR:
			case MariaDBParser.INTERIORRINGN:
			case MariaDBParser.INTERSECTS:
			case MariaDBParser.ISCLOSED:
			case MariaDBParser.ISEMPTY:
			case MariaDBParser.ISNULL:
			case MariaDBParser.ISSIMPLE:
			case MariaDBParser.IS_FREE_LOCK:
			case MariaDBParser.IS_IPV4:
			case MariaDBParser.IS_IPV4_COMPAT:
			case MariaDBParser.IS_IPV4_MAPPED:
			case MariaDBParser.IS_IPV6:
			case MariaDBParser.IS_USED_LOCK:
			case MariaDBParser.LAST_INSERT_ID:
			case MariaDBParser.LCASE:
			case MariaDBParser.LEAST:
			case MariaDBParser.LENGTH:
			case MariaDBParser.LINEFROMTEXT:
			case MariaDBParser.LINEFROMWKB:
			case MariaDBParser.LINESTRINGFROMTEXT:
			case MariaDBParser.LINESTRINGFROMWKB:
			case MariaDBParser.LN:
			case MariaDBParser.LOAD_FILE:
			case MariaDBParser.LOCATE:
			case MariaDBParser.LOG:
			case MariaDBParser.LOG10:
			case MariaDBParser.LOG2:
			case MariaDBParser.LOWER:
			case MariaDBParser.LPAD:
			case MariaDBParser.LTRIM:
			case MariaDBParser.MAKEDATE:
			case MariaDBParser.MAKETIME:
			case MariaDBParser.MAKE_SET:
			case MariaDBParser.MASTER_POS_WAIT:
			case MariaDBParser.MBRCONTAINS:
			case MariaDBParser.MBRDISJOINT:
			case MariaDBParser.MBREQUAL:
			case MariaDBParser.MBRINTERSECTS:
			case MariaDBParser.MBROVERLAPS:
			case MariaDBParser.MBRTOUCHES:
			case MariaDBParser.MBRWITHIN:
			case MariaDBParser.MD5:
			case MariaDBParser.MLINEFROMTEXT:
			case MariaDBParser.MLINEFROMWKB:
			case MariaDBParser.MONTHNAME:
			case MariaDBParser.MPOINTFROMTEXT:
			case MariaDBParser.MPOINTFROMWKB:
			case MariaDBParser.MPOLYFROMTEXT:
			case MariaDBParser.MPOLYFROMWKB:
			case MariaDBParser.MULTILINESTRINGFROMTEXT:
			case MariaDBParser.MULTILINESTRINGFROMWKB:
			case MariaDBParser.MULTIPOINTFROMTEXT:
			case MariaDBParser.MULTIPOINTFROMWKB:
			case MariaDBParser.MULTIPOLYGONFROMTEXT:
			case MariaDBParser.MULTIPOLYGONFROMWKB:
			case MariaDBParser.NAME_CONST:
			case MariaDBParser.NULLIF:
			case MariaDBParser.NUMGEOMETRIES:
			case MariaDBParser.NUMINTERIORRINGS:
			case MariaDBParser.NUMPOINTS:
			case MariaDBParser.OCT:
			case MariaDBParser.OCTET_LENGTH:
			case MariaDBParser.ORD:
			case MariaDBParser.OVERLAPS:
			case MariaDBParser.PERIOD_ADD:
			case MariaDBParser.PERIOD_DIFF:
			case MariaDBParser.PI:
			case MariaDBParser.POINTFROMTEXT:
			case MariaDBParser.POINTFROMWKB:
			case MariaDBParser.POINTN:
			case MariaDBParser.POLYFROMTEXT:
			case MariaDBParser.POLYFROMWKB:
			case MariaDBParser.POLYGONFROMTEXT:
			case MariaDBParser.POLYGONFROMWKB:
			case MariaDBParser.POW:
			case MariaDBParser.POWER:
			case MariaDBParser.QUOTE:
			case MariaDBParser.RADIANS:
			case MariaDBParser.RAND:
			case MariaDBParser.RANDOM_BYTES:
			case MariaDBParser.RELEASE_LOCK:
			case MariaDBParser.REVERSE:
			case MariaDBParser.ROUND:
			case MariaDBParser.ROW_COUNT:
			case MariaDBParser.RPAD:
			case MariaDBParser.RTRIM:
			case MariaDBParser.SEC_TO_TIME:
			case MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE:
			case MariaDBParser.SESSION_USER:
			case MariaDBParser.SHA:
			case MariaDBParser.SHA1:
			case MariaDBParser.SHA2:
			case MariaDBParser.SCHEMA_NAME:
			case MariaDBParser.SIGN:
			case MariaDBParser.SIN:
			case MariaDBParser.SLEEP:
			case MariaDBParser.SOUNDEX:
			case MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS:
			case MariaDBParser.SQRT:
			case MariaDBParser.SRID:
			case MariaDBParser.STARTPOINT:
			case MariaDBParser.STRCMP:
			case MariaDBParser.STR_TO_DATE:
			case MariaDBParser.ST_AREA:
			case MariaDBParser.ST_ASBINARY:
			case MariaDBParser.ST_ASTEXT:
			case MariaDBParser.ST_ASWKB:
			case MariaDBParser.ST_ASWKT:
			case MariaDBParser.ST_BUFFER:
			case MariaDBParser.ST_CENTROID:
			case MariaDBParser.ST_CONTAINS:
			case MariaDBParser.ST_CROSSES:
			case MariaDBParser.ST_DIFFERENCE:
			case MariaDBParser.ST_DIMENSION:
			case MariaDBParser.ST_DISJOINT:
			case MariaDBParser.ST_DISTANCE:
			case MariaDBParser.ST_ENDPOINT:
			case MariaDBParser.ST_ENVELOPE:
			case MariaDBParser.ST_EQUALS:
			case MariaDBParser.ST_EXTERIORRING:
			case MariaDBParser.ST_GEOMCOLLFROMTEXT:
			case MariaDBParser.ST_GEOMCOLLFROMTXT:
			case MariaDBParser.ST_GEOMCOLLFROMWKB:
			case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
			case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB:
			case MariaDBParser.ST_GEOMETRYFROMTEXT:
			case MariaDBParser.ST_GEOMETRYFROMWKB:
			case MariaDBParser.ST_GEOMETRYN:
			case MariaDBParser.ST_GEOMETRYTYPE:
			case MariaDBParser.ST_GEOMFROMTEXT:
			case MariaDBParser.ST_GEOMFROMWKB:
			case MariaDBParser.ST_INTERIORRINGN:
			case MariaDBParser.ST_INTERSECTION:
			case MariaDBParser.ST_INTERSECTS:
			case MariaDBParser.ST_ISCLOSED:
			case MariaDBParser.ST_ISEMPTY:
			case MariaDBParser.ST_ISSIMPLE:
			case MariaDBParser.ST_LINEFROMTEXT:
			case MariaDBParser.ST_LINEFROMWKB:
			case MariaDBParser.ST_LINESTRINGFROMTEXT:
			case MariaDBParser.ST_LINESTRINGFROMWKB:
			case MariaDBParser.ST_NUMGEOMETRIES:
			case MariaDBParser.ST_NUMINTERIORRING:
			case MariaDBParser.ST_NUMINTERIORRINGS:
			case MariaDBParser.ST_NUMPOINTS:
			case MariaDBParser.ST_OVERLAPS:
			case MariaDBParser.ST_POINTFROMTEXT:
			case MariaDBParser.ST_POINTFROMWKB:
			case MariaDBParser.ST_POINTN:
			case MariaDBParser.ST_POLYFROMTEXT:
			case MariaDBParser.ST_POLYFROMWKB:
			case MariaDBParser.ST_POLYGONFROMTEXT:
			case MariaDBParser.ST_POLYGONFROMWKB:
			case MariaDBParser.ST_SRID:
			case MariaDBParser.ST_STARTPOINT:
			case MariaDBParser.ST_SYMDIFFERENCE:
			case MariaDBParser.ST_TOUCHES:
			case MariaDBParser.ST_UNION:
			case MariaDBParser.ST_WITHIN:
			case MariaDBParser.ST_X:
			case MariaDBParser.ST_Y:
			case MariaDBParser.SUBDATE:
			case MariaDBParser.SUBSTRING_INDEX:
			case MariaDBParser.SUBTIME:
			case MariaDBParser.SYSTEM_USER:
			case MariaDBParser.TAN:
			case MariaDBParser.TIMEDIFF:
			case MariaDBParser.TIMESTAMPADD:
			case MariaDBParser.TIMESTAMPDIFF:
			case MariaDBParser.TIME_FORMAT:
			case MariaDBParser.TIME_TO_SEC:
			case MariaDBParser.TOUCHES:
			case MariaDBParser.TO_BASE64:
			case MariaDBParser.TO_DAYS:
			case MariaDBParser.TO_SECONDS:
			case MariaDBParser.UCASE:
			case MariaDBParser.UNCOMPRESS:
			case MariaDBParser.UNCOMPRESSED_LENGTH:
			case MariaDBParser.UNHEX:
			case MariaDBParser.UNIX_TIMESTAMP:
			case MariaDBParser.UPDATEXML:
			case MariaDBParser.UPPER:
			case MariaDBParser.UUID:
			case MariaDBParser.UUID_SHORT:
			case MariaDBParser.VALIDATE_PASSWORD_STRENGTH:
			case MariaDBParser.VERSION:
			case MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case MariaDBParser.WEEKDAY:
			case MariaDBParser.WEEKOFYEAR:
			case MariaDBParser.WEIGHT_STRING:
			case MariaDBParser.WITHIN:
			case MariaDBParser.YEARWEEK:
			case MariaDBParser.Y_FUNCTION:
			case MariaDBParser.X_FUNCTION:
			case MariaDBParser.VIA:
			case MariaDBParser.LASTVAL:
			case MariaDBParser.NEXTVAL:
			case MariaDBParser.SETVAL:
			case MariaDBParser.PREVIOUS:
			case MariaDBParser.PERSISTENT:
			case MariaDBParser.BINLOG_MONITOR:
			case MariaDBParser.BINLOG_REPLAY:
			case MariaDBParser.FEDERATED_ADMIN:
			case MariaDBParser.READ_ONLY_ADMIN:
			case MariaDBParser.REPLICA:
			case MariaDBParser.REPLICAS:
			case MariaDBParser.REPLICATION_MASTER_ADMIN:
			case MariaDBParser.MONITOR:
			case MariaDBParser.READ_ONLY:
			case MariaDBParser.REPLAY:
			case MariaDBParser.MOD:
			case MariaDBParser.CHARSET_REVERSE_QOUTE_STRING:
			case MariaDBParser.STRING_LITERAL:
			case MariaDBParser.ID:
				_localctx = new HandlerConditionNameContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5034;
				this.uid();
				}
				break;
			case MariaDBParser.SQLWARNING:
				_localctx = new HandlerConditionWarningContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5035;
				this.match(MariaDBParser.SQLWARNING);
				}
				break;
			case MariaDBParser.NOT:
				_localctx = new HandlerConditionNotfoundContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5036;
				this.match(MariaDBParser.NOT);
				this.state = 5037;
				this.match(MariaDBParser.FOUND);
				}
				break;
			case MariaDBParser.SQLEXCEPTION:
				_localctx = new HandlerConditionExceptionContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5038;
				this.match(MariaDBParser.SQLEXCEPTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedureSqlStatement(): ProcedureSqlStatementContext {
		let _localctx: ProcedureSqlStatementContext = new ProcedureSqlStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 428, MariaDBParser.RULE_procedureSqlStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5043;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 743, this._ctx) ) {
			case 1:
				{
				this.state = 5041;
				this.compoundStatement();
				}
				break;

			case 2:
				{
				this.state = 5042;
				this.sqlStatement();
				}
				break;
			}
			this.state = 5045;
			this.match(MariaDBParser.SEMI);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public caseAlternative(): CaseAlternativeContext {
		let _localctx: CaseAlternativeContext = new CaseAlternativeContext(this._ctx, this.state);
		this.enterRule(_localctx, 430, MariaDBParser.RULE_caseAlternative);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5047;
			this.match(MariaDBParser.WHEN);
			this.state = 5050;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 744, this._ctx) ) {
			case 1:
				{
				this.state = 5048;
				this.constant();
				}
				break;

			case 2:
				{
				this.state = 5049;
				this.expression(0);
				}
				break;
			}
			this.state = 5052;
			this.match(MariaDBParser.THEN);
			this.state = 5054;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 5053;
					this.procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 5056;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 745, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public elifAlternative(): ElifAlternativeContext {
		let _localctx: ElifAlternativeContext = new ElifAlternativeContext(this._ctx, this.state);
		this.enterRule(_localctx, 432, MariaDBParser.RULE_elifAlternative);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5058;
			this.match(MariaDBParser.ELSEIF);
			this.state = 5059;
			this.expression(0);
			this.state = 5060;
			this.match(MariaDBParser.THEN);
			this.state = 5062;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 5061;
					this.procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 5064;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 746, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterUser(): AlterUserContext {
		let _localctx: AlterUserContext = new AlterUserContext(this._ctx, this.state);
		this.enterRule(_localctx, 434, MariaDBParser.RULE_alterUser);
		let _la: number;
		try {
			this.state = 5126;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 759, this._ctx) ) {
			case 1:
				_localctx = new AlterUserMysqlV56Context(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5066;
				this.match(MariaDBParser.ALTER);
				this.state = 5067;
				this.match(MariaDBParser.USER);
				this.state = 5068;
				this.userSpecification();
				this.state = 5073;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 5069;
					this.match(MariaDBParser.COMMA);
					this.state = 5070;
					this.userSpecification();
					}
					}
					this.state = 5075;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 2:
				_localctx = new AlterUserMysqlV80Context(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5076;
				this.match(MariaDBParser.ALTER);
				this.state = 5077;
				this.match(MariaDBParser.USER);
				this.state = 5079;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.IF) {
					{
					this.state = 5078;
					this.ifExists();
					}
				}

				this.state = 5081;
				this.userAuthOption();
				this.state = 5086;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 5082;
					this.match(MariaDBParser.COMMA);
					this.state = 5083;
					this.userAuthOption();
					}
					}
					this.state = 5088;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5103;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.REQUIRE) {
					{
					this.state = 5089;
					this.match(MariaDBParser.REQUIRE);
					this.state = 5101;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case MariaDBParser.NONE:
						{
						this.state = 5090;
						(_localctx as AlterUserMysqlV80Context)._tlsNone = this.match(MariaDBParser.NONE);
						}
						break;
					case MariaDBParser.SSL:
					case MariaDBParser.CIPHER:
					case MariaDBParser.ISSUER:
					case MariaDBParser.SUBJECT:
					case MariaDBParser.X509:
						{
						this.state = 5091;
						this.tlsOption();
						this.state = 5098;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === MariaDBParser.AND || _la === MariaDBParser.SSL || _la === MariaDBParser.CIPHER || _la === MariaDBParser.ISSUER || _la === MariaDBParser.SUBJECT || _la === MariaDBParser.X509) {
							{
							{
							this.state = 5093;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === MariaDBParser.AND) {
								{
								this.state = 5092;
								this.match(MariaDBParser.AND);
								}
							}

							this.state = 5095;
							this.tlsOption();
							}
							}
							this.state = 5100;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				this.state = 5111;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.WITH) {
					{
					this.state = 5105;
					this.match(MariaDBParser.WITH);
					this.state = 5107;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5106;
						this.userResourceOption();
						}
						}
						this.state = 5109;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 499)) & ~0x1F) === 0 && ((1 << (_la - 499)) & ((1 << (MariaDBParser.MAX_CONNECTIONS_PER_HOUR - 499)) | (1 << (MariaDBParser.MAX_QUERIES_PER_HOUR - 499)) | (1 << (MariaDBParser.MAX_UPDATES_PER_HOUR - 499)) | (1 << (MariaDBParser.MAX_USER_CONNECTIONS - 499)))) !== 0));
					}
				}

				this.state = 5117;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.ACCOUNT || _la === MariaDBParser.FAILED_LOGIN_ATTEMPTS || _la === MariaDBParser.PASSWORD || _la === MariaDBParser.PASSWORD_LOCK_TIME) {
					{
					this.state = 5115;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case MariaDBParser.FAILED_LOGIN_ATTEMPTS:
					case MariaDBParser.PASSWORD:
					case MariaDBParser.PASSWORD_LOCK_TIME:
						{
						this.state = 5113;
						this.userPasswordOption();
						}
						break;
					case MariaDBParser.ACCOUNT:
						{
						this.state = 5114;
						this.userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					this.state = 5119;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5124;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.COMMENT:
					{
					this.state = 5120;
					this.match(MariaDBParser.COMMENT);
					this.state = 5121;
					this.match(MariaDBParser.STRING_LITERAL);
					}
					break;
				case MariaDBParser.ATTRIBUTE:
					{
					this.state = 5122;
					this.match(MariaDBParser.ATTRIBUTE);
					this.state = 5123;
					this.match(MariaDBParser.STRING_LITERAL);
					}
					break;
				case MariaDBParser.EOF:
				case MariaDBParser.ALTER:
				case MariaDBParser.ANALYZE:
				case MariaDBParser.CALL:
				case MariaDBParser.CHANGE:
				case MariaDBParser.CHECK:
				case MariaDBParser.CREATE:
				case MariaDBParser.DELETE:
				case MariaDBParser.DESC:
				case MariaDBParser.DESCRIBE:
				case MariaDBParser.DROP:
				case MariaDBParser.EXPLAIN:
				case MariaDBParser.GET:
				case MariaDBParser.GRANT:
				case MariaDBParser.INSERT:
				case MariaDBParser.KILL:
				case MariaDBParser.LOAD:
				case MariaDBParser.LOCK:
				case MariaDBParser.OPTIMIZE:
				case MariaDBParser.PURGE:
				case MariaDBParser.RELEASE:
				case MariaDBParser.RENAME:
				case MariaDBParser.REPLACE:
				case MariaDBParser.RESIGNAL:
				case MariaDBParser.REVOKE:
				case MariaDBParser.SELECT:
				case MariaDBParser.SET:
				case MariaDBParser.SHOW:
				case MariaDBParser.SIGNAL:
				case MariaDBParser.UNLOCK:
				case MariaDBParser.UPDATE:
				case MariaDBParser.USE:
				case MariaDBParser.VALUES:
				case MariaDBParser.BEGIN:
				case MariaDBParser.BINLOG:
				case MariaDBParser.CACHE:
				case MariaDBParser.CHECKSUM:
				case MariaDBParser.COMMIT:
				case MariaDBParser.DEALLOCATE:
				case MariaDBParser.DO:
				case MariaDBParser.FLUSH:
				case MariaDBParser.HANDLER:
				case MariaDBParser.HELP:
				case MariaDBParser.INSTALL:
				case MariaDBParser.PREPARE:
				case MariaDBParser.REPAIR:
				case MariaDBParser.RESET:
				case MariaDBParser.ROLLBACK:
				case MariaDBParser.SAVEPOINT:
				case MariaDBParser.START:
				case MariaDBParser.STOP:
				case MariaDBParser.TRUNCATE:
				case MariaDBParser.UNINSTALL:
				case MariaDBParser.XA:
				case MariaDBParser.EXECUTE:
				case MariaDBParser.SHUTDOWN:
				case MariaDBParser.MINUS:
				case MariaDBParser.LR_BRACKET:
				case MariaDBParser.SEMI:
					break;
				default:
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createUser(): CreateUserContext {
		let _localctx: CreateUserContext = new CreateUserContext(this._ctx, this.state);
		this.enterRule(_localctx, 436, MariaDBParser.RULE_createUser);
		let _la: number;
		try {
			this.state = 5188;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 772, this._ctx) ) {
			case 1:
				_localctx = new CreateUserMysqlV56Context(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5128;
				this.match(MariaDBParser.CREATE);
				this.state = 5129;
				this.match(MariaDBParser.USER);
				this.state = 5130;
				this.userAuthOption();
				this.state = 5135;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 5131;
					this.match(MariaDBParser.COMMA);
					this.state = 5132;
					this.userAuthOption();
					}
					}
					this.state = 5137;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 2:
				_localctx = new CreateUserMysqlV80Context(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5138;
				this.match(MariaDBParser.CREATE);
				this.state = 5139;
				this.match(MariaDBParser.USER);
				this.state = 5141;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.IF) {
					{
					this.state = 5140;
					this.ifNotExists();
					}
				}

				this.state = 5143;
				this.userAuthOption();
				this.state = 5148;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 5144;
					this.match(MariaDBParser.COMMA);
					this.state = 5145;
					this.userAuthOption();
					}
					}
					this.state = 5150;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5165;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.REQUIRE) {
					{
					this.state = 5151;
					this.match(MariaDBParser.REQUIRE);
					this.state = 5163;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case MariaDBParser.NONE:
						{
						this.state = 5152;
						(_localctx as CreateUserMysqlV80Context)._tlsNone = this.match(MariaDBParser.NONE);
						}
						break;
					case MariaDBParser.SSL:
					case MariaDBParser.CIPHER:
					case MariaDBParser.ISSUER:
					case MariaDBParser.SUBJECT:
					case MariaDBParser.X509:
						{
						this.state = 5153;
						this.tlsOption();
						this.state = 5160;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === MariaDBParser.AND || _la === MariaDBParser.SSL || _la === MariaDBParser.CIPHER || _la === MariaDBParser.ISSUER || _la === MariaDBParser.SUBJECT || _la === MariaDBParser.X509) {
							{
							{
							this.state = 5155;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === MariaDBParser.AND) {
								{
								this.state = 5154;
								this.match(MariaDBParser.AND);
								}
							}

							this.state = 5157;
							this.tlsOption();
							}
							}
							this.state = 5162;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				this.state = 5173;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.WITH) {
					{
					this.state = 5167;
					this.match(MariaDBParser.WITH);
					this.state = 5169;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5168;
						this.userResourceOption();
						}
						}
						this.state = 5171;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 499)) & ~0x1F) === 0 && ((1 << (_la - 499)) & ((1 << (MariaDBParser.MAX_CONNECTIONS_PER_HOUR - 499)) | (1 << (MariaDBParser.MAX_QUERIES_PER_HOUR - 499)) | (1 << (MariaDBParser.MAX_UPDATES_PER_HOUR - 499)) | (1 << (MariaDBParser.MAX_USER_CONNECTIONS - 499)))) !== 0));
					}
				}

				this.state = 5179;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.ACCOUNT || _la === MariaDBParser.FAILED_LOGIN_ATTEMPTS || _la === MariaDBParser.PASSWORD || _la === MariaDBParser.PASSWORD_LOCK_TIME) {
					{
					this.state = 5177;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case MariaDBParser.FAILED_LOGIN_ATTEMPTS:
					case MariaDBParser.PASSWORD:
					case MariaDBParser.PASSWORD_LOCK_TIME:
						{
						this.state = 5175;
						this.userPasswordOption();
						}
						break;
					case MariaDBParser.ACCOUNT:
						{
						this.state = 5176;
						this.userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					this.state = 5181;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5186;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.COMMENT:
					{
					this.state = 5182;
					this.match(MariaDBParser.COMMENT);
					this.state = 5183;
					this.match(MariaDBParser.STRING_LITERAL);
					}
					break;
				case MariaDBParser.ATTRIBUTE:
					{
					this.state = 5184;
					this.match(MariaDBParser.ATTRIBUTE);
					this.state = 5185;
					this.match(MariaDBParser.STRING_LITERAL);
					}
					break;
				case MariaDBParser.EOF:
				case MariaDBParser.ALTER:
				case MariaDBParser.ANALYZE:
				case MariaDBParser.CALL:
				case MariaDBParser.CHANGE:
				case MariaDBParser.CHECK:
				case MariaDBParser.CREATE:
				case MariaDBParser.DELETE:
				case MariaDBParser.DESC:
				case MariaDBParser.DESCRIBE:
				case MariaDBParser.DROP:
				case MariaDBParser.EXPLAIN:
				case MariaDBParser.GET:
				case MariaDBParser.GRANT:
				case MariaDBParser.INSERT:
				case MariaDBParser.KILL:
				case MariaDBParser.LOAD:
				case MariaDBParser.LOCK:
				case MariaDBParser.OPTIMIZE:
				case MariaDBParser.PURGE:
				case MariaDBParser.RELEASE:
				case MariaDBParser.RENAME:
				case MariaDBParser.REPLACE:
				case MariaDBParser.RESIGNAL:
				case MariaDBParser.REVOKE:
				case MariaDBParser.SELECT:
				case MariaDBParser.SET:
				case MariaDBParser.SHOW:
				case MariaDBParser.SIGNAL:
				case MariaDBParser.UNLOCK:
				case MariaDBParser.UPDATE:
				case MariaDBParser.USE:
				case MariaDBParser.VALUES:
				case MariaDBParser.BEGIN:
				case MariaDBParser.BINLOG:
				case MariaDBParser.CACHE:
				case MariaDBParser.CHECKSUM:
				case MariaDBParser.COMMIT:
				case MariaDBParser.DEALLOCATE:
				case MariaDBParser.DO:
				case MariaDBParser.FLUSH:
				case MariaDBParser.HANDLER:
				case MariaDBParser.HELP:
				case MariaDBParser.INSTALL:
				case MariaDBParser.PREPARE:
				case MariaDBParser.REPAIR:
				case MariaDBParser.RESET:
				case MariaDBParser.ROLLBACK:
				case MariaDBParser.SAVEPOINT:
				case MariaDBParser.START:
				case MariaDBParser.STOP:
				case MariaDBParser.TRUNCATE:
				case MariaDBParser.UNINSTALL:
				case MariaDBParser.XA:
				case MariaDBParser.EXECUTE:
				case MariaDBParser.SHUTDOWN:
				case MariaDBParser.MINUS:
				case MariaDBParser.LR_BRACKET:
				case MariaDBParser.SEMI:
					break;
				default:
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropUser(): DropUserContext {
		let _localctx: DropUserContext = new DropUserContext(this._ctx, this.state);
		this.enterRule(_localctx, 438, MariaDBParser.RULE_dropUser);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5190;
			this.match(MariaDBParser.DROP);
			this.state = 5191;
			this.match(MariaDBParser.USER);
			this.state = 5193;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.IF) {
				{
				this.state = 5192;
				this.ifExists();
				}
			}

			this.state = 5195;
			this.userName();
			this.state = 5200;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.COMMA) {
				{
				{
				this.state = 5196;
				this.match(MariaDBParser.COMMA);
				this.state = 5197;
				this.userName();
				}
				}
				this.state = 5202;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grantStatement(): GrantStatementContext {
		let _localctx: GrantStatementContext = new GrantStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 440, MariaDBParser.RULE_grantStatement);
		let _la: number;
		try {
			let _alt: number;
			this.state = 5296;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 793, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5203;
				this.match(MariaDBParser.GRANT);
				this.state = 5204;
				this.privelegeClause();
				this.state = 5209;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 5205;
					this.match(MariaDBParser.COMMA);
					this.state = 5206;
					this.privelegeClause();
					}
					}
					this.state = 5211;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5212;
				this.match(MariaDBParser.ON);
				this.state = 5214;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 776, this._ctx) ) {
				case 1:
					{
					this.state = 5213;
					_localctx._privilegeObject = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MariaDBParser.PROCEDURE || _la === MariaDBParser.TABLE || _la === MariaDBParser.FUNCTION)) {
						_localctx._privilegeObject = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 5216;
				this.privilegeLevel();
				this.state = 5217;
				this.match(MariaDBParser.TO);
				this.state = 5218;
				this.userAuthOption();
				this.state = 5223;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 5219;
					this.match(MariaDBParser.COMMA);
					this.state = 5220;
					this.userAuthOption();
					}
					}
					this.state = 5225;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5240;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.REQUIRE) {
					{
					this.state = 5226;
					this.match(MariaDBParser.REQUIRE);
					this.state = 5238;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case MariaDBParser.NONE:
						{
						this.state = 5227;
						_localctx._tlsNone = this.match(MariaDBParser.NONE);
						}
						break;
					case MariaDBParser.SSL:
					case MariaDBParser.CIPHER:
					case MariaDBParser.ISSUER:
					case MariaDBParser.SUBJECT:
					case MariaDBParser.X509:
						{
						this.state = 5228;
						this.tlsOption();
						this.state = 5235;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === MariaDBParser.AND || _la === MariaDBParser.SSL || _la === MariaDBParser.CIPHER || _la === MariaDBParser.ISSUER || _la === MariaDBParser.SUBJECT || _la === MariaDBParser.X509) {
							{
							{
							this.state = 5230;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === MariaDBParser.AND) {
								{
								this.state = 5229;
								this.match(MariaDBParser.AND);
								}
							}

							this.state = 5232;
							this.tlsOption();
							}
							}
							this.state = 5237;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				this.state = 5251;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.WITH) {
					{
					this.state = 5242;
					this.match(MariaDBParser.WITH);
					this.state = 5248;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 783, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							this.state = 5246;
							this._errHandler.sync(this);
							switch (this._input.LA(1)) {
							case MariaDBParser.GRANT:
								{
								this.state = 5243;
								this.match(MariaDBParser.GRANT);
								this.state = 5244;
								this.match(MariaDBParser.OPTION);
								}
								break;
							case MariaDBParser.MAX_CONNECTIONS_PER_HOUR:
							case MariaDBParser.MAX_QUERIES_PER_HOUR:
							case MariaDBParser.MAX_UPDATES_PER_HOUR:
							case MariaDBParser.MAX_USER_CONNECTIONS:
								{
								this.state = 5245;
								this.userResourceOption();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
						}
						this.state = 5250;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 783, this._ctx);
					}
					}
				}

				this.state = 5259;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.AS) {
					{
					this.state = 5253;
					this.match(MariaDBParser.AS);
					this.state = 5254;
					this.userName();
					this.state = 5255;
					this.match(MariaDBParser.WITH);
					this.state = 5256;
					this.match(MariaDBParser.ROLE);
					this.state = 5257;
					this.roleOption();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5261;
				this.match(MariaDBParser.GRANT);
				this.state = 5264;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 786, this._ctx) ) {
				case 1:
					{
					this.state = 5262;
					this.userName();
					}
					break;

				case 2:
					{
					this.state = 5263;
					this.uid();
					}
					break;
				}
				this.state = 5273;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 5266;
					this.match(MariaDBParser.COMMA);
					this.state = 5269;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 787, this._ctx) ) {
					case 1:
						{
						this.state = 5267;
						this.userName();
						}
						break;

					case 2:
						{
						this.state = 5268;
						this.uid();
						}
						break;
					}
					}
					}
					this.state = 5275;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5276;
				this.match(MariaDBParser.TO);
				this.state = 5279;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 789, this._ctx) ) {
				case 1:
					{
					this.state = 5277;
					this.userName();
					}
					break;

				case 2:
					{
					this.state = 5278;
					this.uid();
					}
					break;
				}
				this.state = 5288;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 5281;
					this.match(MariaDBParser.COMMA);
					this.state = 5284;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 790, this._ctx) ) {
					case 1:
						{
						this.state = 5282;
						this.userName();
						}
						break;

					case 2:
						{
						this.state = 5283;
						this.uid();
						}
						break;
					}
					}
					}
					this.state = 5290;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5294;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.WITH) {
					{
					this.state = 5291;
					this.match(MariaDBParser.WITH);
					this.state = 5292;
					this.match(MariaDBParser.ADMIN);
					this.state = 5293;
					this.match(MariaDBParser.OPTION);
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public roleOption(): RoleOptionContext {
		let _localctx: RoleOptionContext = new RoleOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 442, MariaDBParser.RULE_roleOption);
		let _la: number;
		try {
			this.state = 5320;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 797, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5298;
				this.match(MariaDBParser.DEFAULT);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5299;
				this.match(MariaDBParser.NONE);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5300;
				this.match(MariaDBParser.ALL);
				this.state = 5310;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.EXCEPT) {
					{
					this.state = 5301;
					this.match(MariaDBParser.EXCEPT);
					this.state = 5302;
					this.userName();
					this.state = 5307;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === MariaDBParser.COMMA) {
						{
						{
						this.state = 5303;
						this.match(MariaDBParser.COMMA);
						this.state = 5304;
						this.userName();
						}
						}
						this.state = 5309;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5312;
				this.userName();
				this.state = 5317;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 5313;
					this.match(MariaDBParser.COMMA);
					this.state = 5314;
					this.userName();
					}
					}
					this.state = 5319;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grantProxy(): GrantProxyContext {
		let _localctx: GrantProxyContext = new GrantProxyContext(this._ctx, this.state);
		this.enterRule(_localctx, 444, MariaDBParser.RULE_grantProxy);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5322;
			this.match(MariaDBParser.GRANT);
			this.state = 5323;
			this.match(MariaDBParser.PROXY);
			this.state = 5324;
			this.match(MariaDBParser.ON);
			this.state = 5325;
			_localctx._fromFirst = this.userName();
			this.state = 5326;
			this.match(MariaDBParser.TO);
			this.state = 5327;
			_localctx._toFirst = this.userName();
			this.state = 5332;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.COMMA) {
				{
				{
				this.state = 5328;
				this.match(MariaDBParser.COMMA);
				this.state = 5329;
				_localctx._userName = this.userName();
				_localctx._toOther.push(_localctx._userName);
				}
				}
				this.state = 5334;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5338;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.WITH) {
				{
				this.state = 5335;
				this.match(MariaDBParser.WITH);
				this.state = 5336;
				this.match(MariaDBParser.GRANT);
				this.state = 5337;
				this.match(MariaDBParser.OPTION);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public renameUser(): RenameUserContext {
		let _localctx: RenameUserContext = new RenameUserContext(this._ctx, this.state);
		this.enterRule(_localctx, 446, MariaDBParser.RULE_renameUser);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5340;
			this.match(MariaDBParser.RENAME);
			this.state = 5341;
			this.match(MariaDBParser.USER);
			this.state = 5342;
			this.renameUserClause();
			this.state = 5347;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.COMMA) {
				{
				{
				this.state = 5343;
				this.match(MariaDBParser.COMMA);
				this.state = 5344;
				this.renameUserClause();
				}
				}
				this.state = 5349;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public revokeStatement(): RevokeStatementContext {
		let _localctx: RevokeStatementContext = new RevokeStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 448, MariaDBParser.RULE_revokeStatement);
		let _la: number;
		try {
			this.state = 5414;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 810, this._ctx) ) {
			case 1:
				_localctx = new DetailRevokeContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5350;
				this.match(MariaDBParser.REVOKE);
				this.state = 5351;
				this.privelegeClause();
				this.state = 5356;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 5352;
					this.match(MariaDBParser.COMMA);
					this.state = 5353;
					this.privelegeClause();
					}
					}
					this.state = 5358;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5359;
				this.match(MariaDBParser.ON);
				this.state = 5361;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 802, this._ctx) ) {
				case 1:
					{
					this.state = 5360;
					(_localctx as DetailRevokeContext)._privilegeObject = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MariaDBParser.PROCEDURE || _la === MariaDBParser.TABLE || _la === MariaDBParser.FUNCTION)) {
						(_localctx as DetailRevokeContext)._privilegeObject = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 5363;
				this.privilegeLevel();
				this.state = 5364;
				this.match(MariaDBParser.FROM);
				this.state = 5365;
				this.userName();
				this.state = 5370;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 5366;
					this.match(MariaDBParser.COMMA);
					this.state = 5367;
					this.userName();
					}
					}
					this.state = 5372;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 2:
				_localctx = new ShortRevokeContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5373;
				this.match(MariaDBParser.REVOKE);
				this.state = 5374;
				this.match(MariaDBParser.ALL);
				this.state = 5376;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.PRIVILEGES) {
					{
					this.state = 5375;
					this.match(MariaDBParser.PRIVILEGES);
					}
				}

				this.state = 5378;
				this.match(MariaDBParser.COMMA);
				this.state = 5379;
				this.match(MariaDBParser.GRANT);
				this.state = 5380;
				this.match(MariaDBParser.OPTION);
				this.state = 5381;
				this.match(MariaDBParser.FROM);
				this.state = 5382;
				this.userName();
				this.state = 5387;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 5383;
					this.match(MariaDBParser.COMMA);
					this.state = 5384;
					this.userName();
					}
					}
					this.state = 5389;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 3:
				_localctx = new RoleRevokeContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5390;
				this.match(MariaDBParser.REVOKE);
				this.state = 5391;
				this.uid();
				this.state = 5396;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 5392;
					this.match(MariaDBParser.COMMA);
					this.state = 5393;
					this.uid();
					}
					}
					this.state = 5398;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5399;
				this.match(MariaDBParser.FROM);
				this.state = 5402;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 807, this._ctx) ) {
				case 1:
					{
					this.state = 5400;
					this.userName();
					}
					break;

				case 2:
					{
					this.state = 5401;
					this.uid();
					}
					break;
				}
				this.state = 5411;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 5404;
					this.match(MariaDBParser.COMMA);
					this.state = 5407;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 808, this._ctx) ) {
					case 1:
						{
						this.state = 5405;
						this.userName();
						}
						break;

					case 2:
						{
						this.state = 5406;
						this.uid();
						}
						break;
					}
					}
					}
					this.state = 5413;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public revokeProxy(): RevokeProxyContext {
		let _localctx: RevokeProxyContext = new RevokeProxyContext(this._ctx, this.state);
		this.enterRule(_localctx, 450, MariaDBParser.RULE_revokeProxy);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5416;
			this.match(MariaDBParser.REVOKE);
			this.state = 5417;
			this.match(MariaDBParser.PROXY);
			this.state = 5418;
			this.match(MariaDBParser.ON);
			this.state = 5419;
			_localctx._onUser = this.userName();
			this.state = 5420;
			this.match(MariaDBParser.FROM);
			this.state = 5421;
			_localctx._fromFirst = this.userName();
			this.state = 5426;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.COMMA) {
				{
				{
				this.state = 5422;
				this.match(MariaDBParser.COMMA);
				this.state = 5423;
				_localctx._userName = this.userName();
				_localctx._fromOther.push(_localctx._userName);
				}
				}
				this.state = 5428;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setPasswordStatement(): SetPasswordStatementContext {
		let _localctx: SetPasswordStatementContext = new SetPasswordStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 452, MariaDBParser.RULE_setPasswordStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5429;
			this.match(MariaDBParser.SET);
			this.state = 5430;
			this.match(MariaDBParser.PASSWORD);
			this.state = 5433;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.FOR) {
				{
				this.state = 5431;
				this.match(MariaDBParser.FOR);
				this.state = 5432;
				this.userName();
				}
			}

			this.state = 5435;
			this.match(MariaDBParser.EQUAL_SYMBOL);
			this.state = 5438;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.OLD_PASSWORD:
			case MariaDBParser.PASSWORD:
				{
				this.state = 5436;
				this.passwordFunctionClause();
				}
				break;
			case MariaDBParser.STRING_LITERAL:
				{
				this.state = 5437;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public userSpecification(): UserSpecificationContext {
		let _localctx: UserSpecificationContext = new UserSpecificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 454, MariaDBParser.RULE_userSpecification);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5440;
			this.userName();
			this.state = 5441;
			this.userPasswordOption();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public userAuthOption(): UserAuthOptionContext {
		let _localctx: UserAuthOptionContext = new UserAuthOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 456, MariaDBParser.RULE_userAuthOption);
		let _la: number;
		try {
			this.state = 5470;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 816, this._ctx) ) {
			case 1:
				_localctx = new HashAuthOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5443;
				this.userName();
				this.state = 5444;
				this.match(MariaDBParser.IDENTIFIED);
				this.state = 5445;
				this.match(MariaDBParser.BY);
				this.state = 5446;
				this.match(MariaDBParser.PASSWORD);
				this.state = 5447;
				(_localctx as HashAuthOptionContext)._hashed = this.match(MariaDBParser.STRING_LITERAL);
				}
				break;

			case 2:
				_localctx = new StringAuthOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5449;
				this.userName();
				this.state = 5450;
				this.match(MariaDBParser.IDENTIFIED);
				this.state = 5451;
				this.match(MariaDBParser.BY);
				this.state = 5452;
				this.match(MariaDBParser.STRING_LITERAL);
				this.state = 5456;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.RETAIN) {
					{
					this.state = 5453;
					this.match(MariaDBParser.RETAIN);
					this.state = 5454;
					this.match(MariaDBParser.CURRENT);
					this.state = 5455;
					this.match(MariaDBParser.PASSWORD);
					}
				}

				}
				break;

			case 3:
				_localctx = new ModuleAuthOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5458;
				this.userName();
				this.state = 5459;
				this.match(MariaDBParser.IDENTIFIED);
				this.state = 5460;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.WITH || _la === MariaDBParser.VIA)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5461;
				this.authenticationRule();
				this.state = 5466;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.OR) {
					{
					{
					this.state = 5462;
					this.match(MariaDBParser.OR);
					this.state = 5463;
					this.authenticationRule();
					}
					}
					this.state = 5468;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 4:
				_localctx = new SimpleAuthOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5469;
				this.userName();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public authenticationRule(): AuthenticationRuleContext {
		let _localctx: AuthenticationRuleContext = new AuthenticationRuleContext(this._ctx, this.state);
		this.enterRule(_localctx, 458, MariaDBParser.RULE_authenticationRule);
		let _la: number;
		try {
			this.state = 5481;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 818, this._ctx) ) {
			case 1:
				_localctx = new ModuleContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5472;
				this.authPlugin();
				this.state = 5475;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 817, this._ctx) ) {
				case 1:
					{
					this.state = 5473;
					_la = this._input.LA(1);
					if (!(_la === MariaDBParser.AS || _la === MariaDBParser.BY || _la === MariaDBParser.USING)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 5474;
					this.match(MariaDBParser.STRING_LITERAL);
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new PasswordModuleOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5477;
				this.authPlugin();
				this.state = 5478;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.AS || _la === MariaDBParser.USING)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5479;
				this.passwordFunctionClause();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tlsOption(): TlsOptionContext {
		let _localctx: TlsOptionContext = new TlsOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 460, MariaDBParser.RULE_tlsOption);
		try {
			this.state = 5491;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.SSL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5483;
				this.match(MariaDBParser.SSL);
				}
				break;
			case MariaDBParser.X509:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5484;
				this.match(MariaDBParser.X509);
				}
				break;
			case MariaDBParser.CIPHER:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5485;
				this.match(MariaDBParser.CIPHER);
				this.state = 5486;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			case MariaDBParser.ISSUER:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5487;
				this.match(MariaDBParser.ISSUER);
				this.state = 5488;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			case MariaDBParser.SUBJECT:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5489;
				this.match(MariaDBParser.SUBJECT);
				this.state = 5490;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public userResourceOption(): UserResourceOptionContext {
		let _localctx: UserResourceOptionContext = new UserResourceOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 462, MariaDBParser.RULE_userResourceOption);
		try {
			this.state = 5501;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.MAX_QUERIES_PER_HOUR:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5493;
				this.match(MariaDBParser.MAX_QUERIES_PER_HOUR);
				this.state = 5494;
				this.decimalLiteral();
				}
				break;
			case MariaDBParser.MAX_UPDATES_PER_HOUR:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5495;
				this.match(MariaDBParser.MAX_UPDATES_PER_HOUR);
				this.state = 5496;
				this.decimalLiteral();
				}
				break;
			case MariaDBParser.MAX_CONNECTIONS_PER_HOUR:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5497;
				this.match(MariaDBParser.MAX_CONNECTIONS_PER_HOUR);
				this.state = 5498;
				this.decimalLiteral();
				}
				break;
			case MariaDBParser.MAX_USER_CONNECTIONS:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5499;
				this.match(MariaDBParser.MAX_USER_CONNECTIONS);
				this.state = 5500;
				this.decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public userPasswordOption(): UserPasswordOptionContext {
		let _localctx: UserPasswordOptionContext = new UserPasswordOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 464, MariaDBParser.RULE_userPasswordOption);
		let _la: number;
		try {
			this.state = 5541;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 826, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5503;
				this.match(MariaDBParser.PASSWORD);
				this.state = 5504;
				this.match(MariaDBParser.EXPIRE);
				this.state = 5511;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.DEFAULT:
					{
					this.state = 5505;
					_localctx._expireType = this.match(MariaDBParser.DEFAULT);
					}
					break;
				case MariaDBParser.NEVER:
					{
					this.state = 5506;
					_localctx._expireType = this.match(MariaDBParser.NEVER);
					}
					break;
				case MariaDBParser.INTERVAL:
					{
					this.state = 5507;
					_localctx._expireType = this.match(MariaDBParser.INTERVAL);
					this.state = 5508;
					this.decimalLiteral();
					this.state = 5509;
					this.match(MariaDBParser.DAY);
					}
					break;
				case MariaDBParser.EOF:
				case MariaDBParser.ALTER:
				case MariaDBParser.ANALYZE:
				case MariaDBParser.ATTRIBUTE:
				case MariaDBParser.CALL:
				case MariaDBParser.CHANGE:
				case MariaDBParser.CHECK:
				case MariaDBParser.CREATE:
				case MariaDBParser.DELETE:
				case MariaDBParser.DESC:
				case MariaDBParser.DESCRIBE:
				case MariaDBParser.DROP:
				case MariaDBParser.EXPLAIN:
				case MariaDBParser.GET:
				case MariaDBParser.GRANT:
				case MariaDBParser.INSERT:
				case MariaDBParser.KILL:
				case MariaDBParser.LOAD:
				case MariaDBParser.LOCK:
				case MariaDBParser.OPTIMIZE:
				case MariaDBParser.PURGE:
				case MariaDBParser.RELEASE:
				case MariaDBParser.RENAME:
				case MariaDBParser.REPLACE:
				case MariaDBParser.RESIGNAL:
				case MariaDBParser.REVOKE:
				case MariaDBParser.SELECT:
				case MariaDBParser.SET:
				case MariaDBParser.SHOW:
				case MariaDBParser.SIGNAL:
				case MariaDBParser.UNLOCK:
				case MariaDBParser.UPDATE:
				case MariaDBParser.USE:
				case MariaDBParser.VALUES:
				case MariaDBParser.ACCOUNT:
				case MariaDBParser.BEGIN:
				case MariaDBParser.BINLOG:
				case MariaDBParser.CACHE:
				case MariaDBParser.CHECKSUM:
				case MariaDBParser.COMMENT:
				case MariaDBParser.COMMIT:
				case MariaDBParser.DEALLOCATE:
				case MariaDBParser.DO:
				case MariaDBParser.FAILED_LOGIN_ATTEMPTS:
				case MariaDBParser.FLUSH:
				case MariaDBParser.HANDLER:
				case MariaDBParser.HELP:
				case MariaDBParser.INSTALL:
				case MariaDBParser.PASSWORD:
				case MariaDBParser.PASSWORD_LOCK_TIME:
				case MariaDBParser.PREPARE:
				case MariaDBParser.REPAIR:
				case MariaDBParser.RESET:
				case MariaDBParser.ROLLBACK:
				case MariaDBParser.SAVEPOINT:
				case MariaDBParser.START:
				case MariaDBParser.STOP:
				case MariaDBParser.TRUNCATE:
				case MariaDBParser.UNINSTALL:
				case MariaDBParser.XA:
				case MariaDBParser.EXECUTE:
				case MariaDBParser.SHUTDOWN:
				case MariaDBParser.MINUS:
				case MariaDBParser.LR_BRACKET:
				case MariaDBParser.COMMA:
				case MariaDBParser.SEMI:
					break;
				default:
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5513;
				this.match(MariaDBParser.PASSWORD);
				this.state = 5514;
				this.match(MariaDBParser.HISTORY);
				this.state = 5517;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.DEFAULT:
					{
					this.state = 5515;
					this.match(MariaDBParser.DEFAULT);
					}
					break;
				case MariaDBParser.ZERO_DECIMAL:
				case MariaDBParser.ONE_DECIMAL:
				case MariaDBParser.TWO_DECIMAL:
				case MariaDBParser.DECIMAL_LITERAL:
				case MariaDBParser.REAL_LITERAL:
					{
					this.state = 5516;
					this.decimalLiteral();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5519;
				this.match(MariaDBParser.PASSWORD);
				this.state = 5520;
				this.match(MariaDBParser.REUSE);
				this.state = 5521;
				this.match(MariaDBParser.INTERVAL);
				this.state = 5526;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.DEFAULT:
					{
					this.state = 5522;
					this.match(MariaDBParser.DEFAULT);
					}
					break;
				case MariaDBParser.ZERO_DECIMAL:
				case MariaDBParser.ONE_DECIMAL:
				case MariaDBParser.TWO_DECIMAL:
				case MariaDBParser.DECIMAL_LITERAL:
				case MariaDBParser.REAL_LITERAL:
					{
					this.state = 5523;
					this.decimalLiteral();
					this.state = 5524;
					this.match(MariaDBParser.DAY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5528;
				this.match(MariaDBParser.PASSWORD);
				this.state = 5529;
				this.match(MariaDBParser.REQUIRE);
				this.state = 5530;
				this.match(MariaDBParser.CURRENT);
				this.state = 5532;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.DEFAULT || _la === MariaDBParser.OPTIONAL) {
					{
					this.state = 5531;
					_la = this._input.LA(1);
					if (!(_la === MariaDBParser.DEFAULT || _la === MariaDBParser.OPTIONAL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5534;
				this.match(MariaDBParser.FAILED_LOGIN_ATTEMPTS);
				this.state = 5535;
				this.decimalLiteral();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5536;
				this.match(MariaDBParser.PASSWORD_LOCK_TIME);
				this.state = 5539;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.ZERO_DECIMAL:
				case MariaDBParser.ONE_DECIMAL:
				case MariaDBParser.TWO_DECIMAL:
				case MariaDBParser.DECIMAL_LITERAL:
				case MariaDBParser.REAL_LITERAL:
					{
					this.state = 5537;
					this.decimalLiteral();
					}
					break;
				case MariaDBParser.UNBOUNDED:
					{
					this.state = 5538;
					this.match(MariaDBParser.UNBOUNDED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public userLockOption(): UserLockOptionContext {
		let _localctx: UserLockOptionContext = new UserLockOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 466, MariaDBParser.RULE_userLockOption);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5543;
			this.match(MariaDBParser.ACCOUNT);
			this.state = 5544;
			_localctx._lockType = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MariaDBParser.LOCK || _la === MariaDBParser.UNLOCK)) {
				_localctx._lockType = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public privelegeClause(): PrivelegeClauseContext {
		let _localctx: PrivelegeClauseContext = new PrivelegeClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 468, MariaDBParser.RULE_privelegeClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5546;
			this.privilege();
			this.state = 5551;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.LR_BRACKET) {
				{
				this.state = 5547;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 5548;
				this.uidList();
				this.state = 5549;
				this.match(MariaDBParser.RR_BRACKET);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public privilege(): PrivilegeContext {
		let _localctx: PrivilegeContext = new PrivilegeContext(this._ctx, this.state);
		this.enterRule(_localctx, 470, MariaDBParser.RULE_privilege);
		let _la: number;
		try {
			this.state = 5673;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 834, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5553;
				this.match(MariaDBParser.ALL);
				this.state = 5555;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.PRIVILEGES) {
					{
					this.state = 5554;
					this.match(MariaDBParser.PRIVILEGES);
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5557;
				this.match(MariaDBParser.ALTER);
				this.state = 5559;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.ROUTINE) {
					{
					this.state = 5558;
					this.match(MariaDBParser.ROUTINE);
					}
				}

				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5561;
				this.match(MariaDBParser.CREATE);
				this.state = 5569;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.TEMPORARY:
					{
					this.state = 5562;
					this.match(MariaDBParser.TEMPORARY);
					this.state = 5563;
					this.match(MariaDBParser.TABLES);
					}
					break;
				case MariaDBParser.ROUTINE:
					{
					this.state = 5564;
					this.match(MariaDBParser.ROUTINE);
					}
					break;
				case MariaDBParser.VIEW:
					{
					this.state = 5565;
					this.match(MariaDBParser.VIEW);
					}
					break;
				case MariaDBParser.USER:
					{
					this.state = 5566;
					this.match(MariaDBParser.USER);
					}
					break;
				case MariaDBParser.TABLESPACE:
					{
					this.state = 5567;
					this.match(MariaDBParser.TABLESPACE);
					}
					break;
				case MariaDBParser.ROLE:
					{
					this.state = 5568;
					this.match(MariaDBParser.ROLE);
					}
					break;
				case MariaDBParser.ON:
				case MariaDBParser.LR_BRACKET:
				case MariaDBParser.COMMA:
					break;
				default:
					break;
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5571;
				this.match(MariaDBParser.DELETE);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5572;
				this.match(MariaDBParser.DROP);
				this.state = 5574;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.ROLE) {
					{
					this.state = 5573;
					this.match(MariaDBParser.ROLE);
					}
				}

				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5576;
				this.match(MariaDBParser.EVENT);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5577;
				this.match(MariaDBParser.EXECUTE);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5578;
				this.match(MariaDBParser.FILE);
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 5579;
				this.match(MariaDBParser.GRANT);
				this.state = 5580;
				this.match(MariaDBParser.OPTION);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 5581;
				this.match(MariaDBParser.INDEX);
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 5582;
				this.match(MariaDBParser.INSERT);
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 5583;
				this.match(MariaDBParser.LOCK);
				this.state = 5584;
				this.match(MariaDBParser.TABLES);
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 5585;
				this.match(MariaDBParser.PROCESS);
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 5586;
				this.match(MariaDBParser.PROXY);
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 5587;
				this.match(MariaDBParser.REFERENCES);
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 5588;
				this.match(MariaDBParser.RELOAD);
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 5589;
				this.match(MariaDBParser.REPLICATION);
				this.state = 5590;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.CLIENT || _la === MariaDBParser.MASTER || _la === MariaDBParser.SLAVE || _la === MariaDBParser.REPLICA)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5592;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.ADMIN) {
					{
					this.state = 5591;
					this.match(MariaDBParser.ADMIN);
					}
				}

				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 5594;
				this.match(MariaDBParser.SELECT);
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 5595;
				this.match(MariaDBParser.SHOW);
				this.state = 5596;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.DATABASES || _la === MariaDBParser.SCHEMAS || _la === MariaDBParser.VIEW)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 5597;
				this.match(MariaDBParser.SHUTDOWN);
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 5598;
				this.match(MariaDBParser.SUPER);
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 5599;
				this.match(MariaDBParser.TRIGGER);
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 5600;
				this.match(MariaDBParser.UPDATE);
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 5601;
				this.match(MariaDBParser.USAGE);
				}
				break;

			case 25:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 5602;
				this.match(MariaDBParser.APPLICATION_PASSWORD_ADMIN);
				}
				break;

			case 26:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 5603;
				this.match(MariaDBParser.AUDIT_ADMIN);
				}
				break;

			case 27:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 5604;
				this.match(MariaDBParser.BACKUP_ADMIN);
				}
				break;

			case 28:
				this.enterOuterAlt(_localctx, 28);
				{
				this.state = 5605;
				this.match(MariaDBParser.BINLOG_ADMIN);
				}
				break;

			case 29:
				this.enterOuterAlt(_localctx, 29);
				{
				this.state = 5606;
				this.match(MariaDBParser.BINLOG_ENCRYPTION_ADMIN);
				}
				break;

			case 30:
				this.enterOuterAlt(_localctx, 30);
				{
				this.state = 5607;
				this.match(MariaDBParser.CLONE_ADMIN);
				}
				break;

			case 31:
				this.enterOuterAlt(_localctx, 31);
				{
				this.state = 5608;
				this.match(MariaDBParser.CONNECTION_ADMIN);
				}
				break;

			case 32:
				this.enterOuterAlt(_localctx, 32);
				{
				this.state = 5609;
				this.match(MariaDBParser.ENCRYPTION_KEY_ADMIN);
				}
				break;

			case 33:
				this.enterOuterAlt(_localctx, 33);
				{
				this.state = 5610;
				this.match(MariaDBParser.FIREWALL_ADMIN);
				}
				break;

			case 34:
				this.enterOuterAlt(_localctx, 34);
				{
				this.state = 5611;
				this.match(MariaDBParser.FIREWALL_USER);
				}
				break;

			case 35:
				this.enterOuterAlt(_localctx, 35);
				{
				this.state = 5612;
				this.match(MariaDBParser.FLUSH_OPTIMIZER_COSTS);
				}
				break;

			case 36:
				this.enterOuterAlt(_localctx, 36);
				{
				this.state = 5613;
				this.match(MariaDBParser.FLUSH_STATUS);
				}
				break;

			case 37:
				this.enterOuterAlt(_localctx, 37);
				{
				this.state = 5614;
				this.match(MariaDBParser.FLUSH_TABLES);
				}
				break;

			case 38:
				this.enterOuterAlt(_localctx, 38);
				{
				this.state = 5615;
				this.match(MariaDBParser.FLUSH_USER_RESOURCES);
				}
				break;

			case 39:
				this.enterOuterAlt(_localctx, 39);
				{
				this.state = 5616;
				this.match(MariaDBParser.GROUP_REPLICATION_ADMIN);
				}
				break;

			case 40:
				this.enterOuterAlt(_localctx, 40);
				{
				this.state = 5617;
				this.match(MariaDBParser.INNODB_REDO_LOG_ARCHIVE);
				}
				break;

			case 41:
				this.enterOuterAlt(_localctx, 41);
				{
				this.state = 5618;
				this.match(MariaDBParser.INNODB_REDO_LOG_ENABLE);
				}
				break;

			case 42:
				this.enterOuterAlt(_localctx, 42);
				{
				this.state = 5619;
				this.match(MariaDBParser.NDB_STORED_USER);
				}
				break;

			case 43:
				this.enterOuterAlt(_localctx, 43);
				{
				this.state = 5620;
				this.match(MariaDBParser.PASSWORDLESS_USER_ADMIN);
				}
				break;

			case 44:
				this.enterOuterAlt(_localctx, 44);
				{
				this.state = 5621;
				this.match(MariaDBParser.PERSIST_RO_VARIABLES_ADMIN);
				}
				break;

			case 45:
				this.enterOuterAlt(_localctx, 45);
				{
				this.state = 5622;
				this.match(MariaDBParser.REPLICATION_APPLIER);
				}
				break;

			case 46:
				this.enterOuterAlt(_localctx, 46);
				{
				this.state = 5623;
				this.match(MariaDBParser.REPLICATION_SLAVE_ADMIN);
				}
				break;

			case 47:
				this.enterOuterAlt(_localctx, 47);
				{
				this.state = 5624;
				this.match(MariaDBParser.RESOURCE_GROUP_ADMIN);
				}
				break;

			case 48:
				this.enterOuterAlt(_localctx, 48);
				{
				this.state = 5625;
				this.match(MariaDBParser.RESOURCE_GROUP_USER);
				}
				break;

			case 49:
				this.enterOuterAlt(_localctx, 49);
				{
				this.state = 5626;
				this.match(MariaDBParser.ROLE_ADMIN);
				}
				break;

			case 50:
				this.enterOuterAlt(_localctx, 50);
				{
				this.state = 5627;
				this.match(MariaDBParser.SERVICE_CONNECTION_ADMIN);
				}
				break;

			case 51:
				this.enterOuterAlt(_localctx, 51);
				{
				this.state = 5628;
				this.match(MariaDBParser.SESSION_VARIABLES_ADMIN);
				}
				break;

			case 52:
				this.enterOuterAlt(_localctx, 52);
				{
				this.state = 5629;
				this.match(MariaDBParser.SET_USER_ID);
				}
				break;

			case 53:
				this.enterOuterAlt(_localctx, 53);
				{
				this.state = 5630;
				this.match(MariaDBParser.SHOW_ROUTINE);
				}
				break;

			case 54:
				this.enterOuterAlt(_localctx, 54);
				{
				this.state = 5631;
				this.match(MariaDBParser.SYSTEM_USER);
				}
				break;

			case 55:
				this.enterOuterAlt(_localctx, 55);
				{
				this.state = 5632;
				this.match(MariaDBParser.SYSTEM_VARIABLES_ADMIN);
				}
				break;

			case 56:
				this.enterOuterAlt(_localctx, 56);
				{
				this.state = 5633;
				this.match(MariaDBParser.TABLE_ENCRYPTION_ADMIN);
				}
				break;

			case 57:
				this.enterOuterAlt(_localctx, 57);
				{
				this.state = 5634;
				this.match(MariaDBParser.VERSION_TOKEN_ADMIN);
				}
				break;

			case 58:
				this.enterOuterAlt(_localctx, 58);
				{
				this.state = 5635;
				this.match(MariaDBParser.XA_RECOVER_ADMIN);
				}
				break;

			case 59:
				this.enterOuterAlt(_localctx, 59);
				{
				this.state = 5636;
				this.match(MariaDBParser.BINLOG_MONITOR);
				}
				break;

			case 60:
				this.enterOuterAlt(_localctx, 60);
				{
				this.state = 5637;
				this.match(MariaDBParser.BINLOG_REPLAY);
				}
				break;

			case 61:
				this.enterOuterAlt(_localctx, 61);
				{
				this.state = 5638;
				this.match(MariaDBParser.FEDERATED_ADMIN);
				}
				break;

			case 62:
				this.enterOuterAlt(_localctx, 62);
				{
				this.state = 5639;
				this.match(MariaDBParser.READ_ONLY_ADMIN);
				}
				break;

			case 63:
				this.enterOuterAlt(_localctx, 63);
				{
				this.state = 5640;
				this.match(MariaDBParser.REPLICATION_MASTER_ADMIN);
				}
				break;

			case 64:
				this.enterOuterAlt(_localctx, 64);
				{
				this.state = 5641;
				this.match(MariaDBParser.BINLOG);
				this.state = 5642;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.ADMIN || _la === MariaDBParser.MONITOR || _la === MariaDBParser.REPLAY)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 65:
				this.enterOuterAlt(_localctx, 65);
				{
				this.state = 5643;
				this.match(MariaDBParser.FEDERATED);
				this.state = 5644;
				this.match(MariaDBParser.ADMIN);
				}
				break;

			case 66:
				this.enterOuterAlt(_localctx, 66);
				{
				this.state = 5648;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.READ:
					{
					this.state = 5645;
					this.match(MariaDBParser.READ);
					this.state = 5646;
					this.match(MariaDBParser.ONLY);
					}
					break;
				case MariaDBParser.READ_ONLY:
					{
					this.state = 5647;
					this.match(MariaDBParser.READ_ONLY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 5650;
				this.match(MariaDBParser.ADMIN);
				}
				break;

			case 67:
				this.enterOuterAlt(_localctx, 67);
				{
				this.state = 5651;
				this.match(MariaDBParser.ADMIN);
				this.state = 5652;
				this.match(MariaDBParser.OPTION);
				}
				break;

			case 68:
				this.enterOuterAlt(_localctx, 68);
				{
				this.state = 5653;
				this.match(MariaDBParser.CONNECTION);
				this.state = 5654;
				this.match(MariaDBParser.ADMIN);
				}
				break;

			case 69:
				this.enterOuterAlt(_localctx, 69);
				{
				this.state = 5655;
				this.match(MariaDBParser.DELETE);
				this.state = 5656;
				this.match(MariaDBParser.HISTORY);
				}
				break;

			case 70:
				this.enterOuterAlt(_localctx, 70);
				{
				this.state = 5657;
				this.match(MariaDBParser.REPLICA);
				this.state = 5658;
				this.match(MariaDBParser.MONITOR);
				}
				break;

			case 71:
				this.enterOuterAlt(_localctx, 71);
				{
				this.state = 5659;
				this.match(MariaDBParser.GRANT);
				this.state = 5660;
				this.match(MariaDBParser.OPTION);
				}
				break;

			case 72:
				this.enterOuterAlt(_localctx, 72);
				{
				this.state = 5661;
				this.match(MariaDBParser.SET);
				this.state = 5662;
				this.match(MariaDBParser.USER);
				}
				break;

			case 73:
				this.enterOuterAlt(_localctx, 73);
				{
				this.state = 5663;
				this.match(MariaDBParser.SLAVE);
				this.state = 5664;
				this.match(MariaDBParser.MONITOR);
				}
				break;

			case 74:
				this.enterOuterAlt(_localctx, 74);
				{
				this.state = 5665;
				this.match(MariaDBParser.LOAD);
				this.state = 5666;
				this.match(MariaDBParser.FROM);
				this.state = 5667;
				this.match(MariaDBParser.S3);
				}
				break;

			case 75:
				this.enterOuterAlt(_localctx, 75);
				{
				this.state = 5668;
				this.match(MariaDBParser.SELECT);
				this.state = 5669;
				this.match(MariaDBParser.INTO);
				this.state = 5670;
				this.match(MariaDBParser.S3);
				}
				break;

			case 76:
				this.enterOuterAlt(_localctx, 76);
				{
				this.state = 5671;
				this.match(MariaDBParser.INVOKE);
				this.state = 5672;
				this.match(MariaDBParser.LAMBDA);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public privilegeLevel(): PrivilegeLevelContext {
		let _localctx: PrivilegeLevelContext = new PrivilegeLevelContext(this._ctx, this.state);
		this.enterRule(_localctx, 472, MariaDBParser.RULE_privilegeLevel);
		try {
			this.state = 5691;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 835, this._ctx) ) {
			case 1:
				_localctx = new CurrentSchemaPriviLevelContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5675;
				this.match(MariaDBParser.STAR);
				}
				break;

			case 2:
				_localctx = new GlobalPrivLevelContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5676;
				this.match(MariaDBParser.STAR);
				this.state = 5677;
				this.match(MariaDBParser.DOT);
				this.state = 5678;
				this.match(MariaDBParser.STAR);
				}
				break;

			case 3:
				_localctx = new DefiniteSchemaPrivLevelContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5679;
				this.uid();
				this.state = 5680;
				this.match(MariaDBParser.DOT);
				this.state = 5681;
				this.match(MariaDBParser.STAR);
				}
				break;

			case 4:
				_localctx = new DefiniteFullTablePrivLevelContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5683;
				this.uid();
				this.state = 5684;
				this.match(MariaDBParser.DOT);
				this.state = 5685;
				this.uid();
				}
				break;

			case 5:
				_localctx = new DefiniteFullTablePrivLevel2Context(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5687;
				this.uid();
				this.state = 5688;
				this.dottedId();
				}
				break;

			case 6:
				_localctx = new DefiniteTablePrivLevelContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5690;
				this.uid();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public renameUserClause(): RenameUserClauseContext {
		let _localctx: RenameUserClauseContext = new RenameUserClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 474, MariaDBParser.RULE_renameUserClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5693;
			_localctx._fromFirst = this.userName();
			this.state = 5694;
			this.match(MariaDBParser.TO);
			this.state = 5695;
			_localctx._toFirst = this.userName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public analyzeTable(): AnalyzeTableContext {
		let _localctx: AnalyzeTableContext = new AnalyzeTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 476, MariaDBParser.RULE_analyzeTable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5697;
			this.match(MariaDBParser.ANALYZE);
			this.state = 5699;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.NO_WRITE_TO_BINLOG || _la === MariaDBParser.LOCAL) {
				{
				this.state = 5698;
				_localctx._actionOption = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.NO_WRITE_TO_BINLOG || _la === MariaDBParser.LOCAL)) {
					_localctx._actionOption = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 5701;
			_la = this._input.LA(1);
			if (!(_la === MariaDBParser.TABLE || _la === MariaDBParser.TABLES)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5702;
			this.tables();
			this.state = 5720;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 839, this._ctx) ) {
			case 1:
				{
				this.state = 5703;
				this.match(MariaDBParser.UPDATE);
				this.state = 5704;
				this.match(MariaDBParser.HISTOGRAM);
				this.state = 5705;
				this.match(MariaDBParser.ON);
				this.state = 5706;
				this.fullColumnName();
				this.state = 5711;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 5707;
					this.match(MariaDBParser.COMMA);
					this.state = 5708;
					this.fullColumnName();
					}
					}
					this.state = 5713;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5718;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.WITH) {
					{
					this.state = 5714;
					this.match(MariaDBParser.WITH);
					this.state = 5715;
					this.decimalLiteral();
					this.state = 5716;
					this.match(MariaDBParser.BUCKETS);
					}
				}

				}
				break;
			}
			this.state = 5733;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 841, this._ctx) ) {
			case 1:
				{
				this.state = 5722;
				this.match(MariaDBParser.DROP);
				this.state = 5723;
				this.match(MariaDBParser.HISTOGRAM);
				this.state = 5724;
				this.match(MariaDBParser.ON);
				this.state = 5725;
				this.fullColumnName();
				this.state = 5730;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 5726;
					this.match(MariaDBParser.COMMA);
					this.state = 5727;
					this.fullColumnName();
					}
					}
					this.state = 5732;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public checkTable(): CheckTableContext {
		let _localctx: CheckTableContext = new CheckTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 478, MariaDBParser.RULE_checkTable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5735;
			this.match(MariaDBParser.CHECK);
			this.state = 5736;
			this.match(MariaDBParser.TABLE);
			this.state = 5737;
			this.tables();
			this.state = 5741;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.FOR || _la === MariaDBParser.CHANGED || _la === MariaDBParser.EXTENDED || _la === MariaDBParser.FAST || _la === MariaDBParser.MEDIUM || _la === MariaDBParser.QUICK) {
				{
				{
				this.state = 5738;
				this.checkTableOption();
				}
				}
				this.state = 5743;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public checksumTable(): ChecksumTableContext {
		let _localctx: ChecksumTableContext = new ChecksumTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 480, MariaDBParser.RULE_checksumTable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5744;
			this.match(MariaDBParser.CHECKSUM);
			this.state = 5745;
			this.match(MariaDBParser.TABLE);
			this.state = 5746;
			this.tables();
			this.state = 5748;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.EXTENDED || _la === MariaDBParser.QUICK) {
				{
				this.state = 5747;
				_localctx._actionOption = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.EXTENDED || _la === MariaDBParser.QUICK)) {
					_localctx._actionOption = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public optimizeTable(): OptimizeTableContext {
		let _localctx: OptimizeTableContext = new OptimizeTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 482, MariaDBParser.RULE_optimizeTable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5750;
			this.match(MariaDBParser.OPTIMIZE);
			this.state = 5752;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.NO_WRITE_TO_BINLOG || _la === MariaDBParser.LOCAL) {
				{
				this.state = 5751;
				_localctx._actionOption = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.NO_WRITE_TO_BINLOG || _la === MariaDBParser.LOCAL)) {
					_localctx._actionOption = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 5754;
			_la = this._input.LA(1);
			if (!(_la === MariaDBParser.TABLE || _la === MariaDBParser.TABLES)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5755;
			this.tables();
			this.state = 5757;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.NOWAIT || _la === MariaDBParser.WAIT) {
				{
				this.state = 5756;
				this.waitNowaitClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public repairTable(): RepairTableContext {
		let _localctx: RepairTableContext = new RepairTableContext(this._ctx, this.state);
		this.enterRule(_localctx, 484, MariaDBParser.RULE_repairTable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5759;
			this.match(MariaDBParser.REPAIR);
			this.state = 5761;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.NO_WRITE_TO_BINLOG || _la === MariaDBParser.LOCAL) {
				{
				this.state = 5760;
				_localctx._actionOption = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.NO_WRITE_TO_BINLOG || _la === MariaDBParser.LOCAL)) {
					_localctx._actionOption = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 5763;
			this.match(MariaDBParser.TABLE);
			this.state = 5764;
			this.tables();
			this.state = 5766;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.QUICK) {
				{
				this.state = 5765;
				this.match(MariaDBParser.QUICK);
				}
			}

			this.state = 5769;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.EXTENDED) {
				{
				this.state = 5768;
				this.match(MariaDBParser.EXTENDED);
				}
			}

			this.state = 5772;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.USE_FRM) {
				{
				this.state = 5771;
				this.match(MariaDBParser.USE_FRM);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public checkTableOption(): CheckTableOptionContext {
		let _localctx: CheckTableOptionContext = new CheckTableOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 486, MariaDBParser.RULE_checkTableOption);
		try {
			this.state = 5781;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.FOR:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5774;
				this.match(MariaDBParser.FOR);
				this.state = 5775;
				this.match(MariaDBParser.UPGRADE);
				}
				break;
			case MariaDBParser.QUICK:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5776;
				this.match(MariaDBParser.QUICK);
				}
				break;
			case MariaDBParser.FAST:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5777;
				this.match(MariaDBParser.FAST);
				}
				break;
			case MariaDBParser.MEDIUM:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5778;
				this.match(MariaDBParser.MEDIUM);
				}
				break;
			case MariaDBParser.EXTENDED:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5779;
				this.match(MariaDBParser.EXTENDED);
				}
				break;
			case MariaDBParser.CHANGED:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5780;
				this.match(MariaDBParser.CHANGED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createUdfunction(): CreateUdfunctionContext {
		let _localctx: CreateUdfunctionContext = new CreateUdfunctionContext(this._ctx, this.state);
		this.enterRule(_localctx, 488, MariaDBParser.RULE_createUdfunction);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5783;
			this.match(MariaDBParser.CREATE);
			this.state = 5785;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.OR) {
				{
				this.state = 5784;
				this.orReplace();
				}
			}

			this.state = 5788;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.AGGREGATE) {
				{
				this.state = 5787;
				this.match(MariaDBParser.AGGREGATE);
				}
			}

			this.state = 5790;
			this.match(MariaDBParser.FUNCTION);
			this.state = 5792;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 853, this._ctx) ) {
			case 1:
				{
				this.state = 5791;
				this.ifNotExists();
				}
				break;
			}
			this.state = 5794;
			this.uid();
			this.state = 5795;
			this.match(MariaDBParser.RETURNS);
			this.state = 5796;
			_localctx._returnType = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(((((_la - 206)) & ~0x1F) === 0 && ((1 << (_la - 206)) & ((1 << (MariaDBParser.INTEGER - 206)) | (1 << (MariaDBParser.REAL - 206)) | (1 << (MariaDBParser.DECIMAL - 206)))) !== 0) || _la === MariaDBParser.STRING)) {
				_localctx._returnType = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5797;
			this.match(MariaDBParser.SONAME);
			this.state = 5798;
			this.match(MariaDBParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public installPlugin(): InstallPluginContext {
		let _localctx: InstallPluginContext = new InstallPluginContext(this._ctx, this.state);
		this.enterRule(_localctx, 490, MariaDBParser.RULE_installPlugin);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5800;
			this.match(MariaDBParser.INSTALL);
			this.state = 5801;
			this.match(MariaDBParser.PLUGIN);
			this.state = 5802;
			this.uid();
			this.state = 5803;
			this.match(MariaDBParser.SONAME);
			this.state = 5804;
			this.match(MariaDBParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public uninstallPlugin(): UninstallPluginContext {
		let _localctx: UninstallPluginContext = new UninstallPluginContext(this._ctx, this.state);
		this.enterRule(_localctx, 492, MariaDBParser.RULE_uninstallPlugin);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5806;
			this.match(MariaDBParser.UNINSTALL);
			this.state = 5807;
			this.match(MariaDBParser.PLUGIN);
			this.state = 5808;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setStatement(): SetStatementContext {
		let _localctx: SetStatementContext = new SetStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 494, MariaDBParser.RULE_setStatement);
		let _la: number;
		try {
			this.state = 5862;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 861, this._ctx) ) {
			case 1:
				_localctx = new SetVariableContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5810;
				this.match(MariaDBParser.SET);
				this.state = 5811;
				this.variableClause();
				this.state = 5812;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.VAR_ASSIGN || _la === MariaDBParser.EQUAL_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5815;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 854, this._ctx) ) {
				case 1:
					{
					this.state = 5813;
					this.expression(0);
					}
					break;

				case 2:
					{
					this.state = 5814;
					this.match(MariaDBParser.ON);
					}
					break;
				}
				this.state = 5826;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 5817;
					this.match(MariaDBParser.COMMA);
					this.state = 5818;
					this.variableClause();
					this.state = 5819;
					_la = this._input.LA(1);
					if (!(_la === MariaDBParser.VAR_ASSIGN || _la === MariaDBParser.EQUAL_SYMBOL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 5822;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 855, this._ctx) ) {
					case 1:
						{
						this.state = 5820;
						this.expression(0);
						}
						break;

					case 2:
						{
						this.state = 5821;
						this.match(MariaDBParser.ON);
						}
						break;
					}
					}
					}
					this.state = 5828;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 2:
				_localctx = new SetCharsetContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5829;
				this.match(MariaDBParser.SET);
				this.state = 5830;
				this.charSet();
				this.state = 5833;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.BINARY:
				case MariaDBParser.ARMSCII8:
				case MariaDBParser.ASCII:
				case MariaDBParser.BIG5:
				case MariaDBParser.CP1250:
				case MariaDBParser.CP1251:
				case MariaDBParser.CP1256:
				case MariaDBParser.CP1257:
				case MariaDBParser.CP850:
				case MariaDBParser.CP852:
				case MariaDBParser.CP866:
				case MariaDBParser.CP932:
				case MariaDBParser.DEC8:
				case MariaDBParser.EUCJPMS:
				case MariaDBParser.EUCKR:
				case MariaDBParser.GB18030:
				case MariaDBParser.GB2312:
				case MariaDBParser.GBK:
				case MariaDBParser.GEOSTD8:
				case MariaDBParser.GREEK:
				case MariaDBParser.HEBREW:
				case MariaDBParser.HP8:
				case MariaDBParser.KEYBCS2:
				case MariaDBParser.KOI8R:
				case MariaDBParser.KOI8U:
				case MariaDBParser.LATIN1:
				case MariaDBParser.LATIN2:
				case MariaDBParser.LATIN5:
				case MariaDBParser.LATIN7:
				case MariaDBParser.MACCE:
				case MariaDBParser.MACROMAN:
				case MariaDBParser.SJIS:
				case MariaDBParser.SWE7:
				case MariaDBParser.TIS620:
				case MariaDBParser.UCS2:
				case MariaDBParser.UJIS:
				case MariaDBParser.UTF16:
				case MariaDBParser.UTF16LE:
				case MariaDBParser.UTF32:
				case MariaDBParser.UTF8:
				case MariaDBParser.UTF8MB3:
				case MariaDBParser.UTF8MB4:
				case MariaDBParser.CHARSET_REVERSE_QOUTE_STRING:
				case MariaDBParser.STRING_LITERAL:
					{
					this.state = 5831;
					this.charsetName();
					}
					break;
				case MariaDBParser.DEFAULT:
					{
					this.state = 5832;
					this.match(MariaDBParser.DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 3:
				_localctx = new SetNamesContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5835;
				this.match(MariaDBParser.SET);
				this.state = 5836;
				this.match(MariaDBParser.NAMES);
				this.state = 5843;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.BINARY:
				case MariaDBParser.ARMSCII8:
				case MariaDBParser.ASCII:
				case MariaDBParser.BIG5:
				case MariaDBParser.CP1250:
				case MariaDBParser.CP1251:
				case MariaDBParser.CP1256:
				case MariaDBParser.CP1257:
				case MariaDBParser.CP850:
				case MariaDBParser.CP852:
				case MariaDBParser.CP866:
				case MariaDBParser.CP932:
				case MariaDBParser.DEC8:
				case MariaDBParser.EUCJPMS:
				case MariaDBParser.EUCKR:
				case MariaDBParser.GB18030:
				case MariaDBParser.GB2312:
				case MariaDBParser.GBK:
				case MariaDBParser.GEOSTD8:
				case MariaDBParser.GREEK:
				case MariaDBParser.HEBREW:
				case MariaDBParser.HP8:
				case MariaDBParser.KEYBCS2:
				case MariaDBParser.KOI8R:
				case MariaDBParser.KOI8U:
				case MariaDBParser.LATIN1:
				case MariaDBParser.LATIN2:
				case MariaDBParser.LATIN5:
				case MariaDBParser.LATIN7:
				case MariaDBParser.MACCE:
				case MariaDBParser.MACROMAN:
				case MariaDBParser.SJIS:
				case MariaDBParser.SWE7:
				case MariaDBParser.TIS620:
				case MariaDBParser.UCS2:
				case MariaDBParser.UJIS:
				case MariaDBParser.UTF16:
				case MariaDBParser.UTF16LE:
				case MariaDBParser.UTF32:
				case MariaDBParser.UTF8:
				case MariaDBParser.UTF8MB3:
				case MariaDBParser.UTF8MB4:
				case MariaDBParser.CHARSET_REVERSE_QOUTE_STRING:
				case MariaDBParser.STRING_LITERAL:
					{
					this.state = 5837;
					this.charsetName();
					this.state = 5840;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MariaDBParser.COLLATE) {
						{
						this.state = 5838;
						this.match(MariaDBParser.COLLATE);
						this.state = 5839;
						this.collationName();
						}
					}

					}
					break;
				case MariaDBParser.DEFAULT:
					{
					this.state = 5842;
					this.match(MariaDBParser.DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 4:
				_localctx = new SetPasswordContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5845;
				this.setPasswordStatement();
				}
				break;

			case 5:
				_localctx = new SetTransactionContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5846;
				this.setTransactionStatement();
				}
				break;

			case 6:
				_localctx = new SetAutocommitContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5847;
				this.setAutocommitStatement();
				}
				break;

			case 7:
				_localctx = new SetNewValueInsideTriggerContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5848;
				this.match(MariaDBParser.SET);
				this.state = 5849;
				this.fullId();
				this.state = 5850;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.VAR_ASSIGN || _la === MariaDBParser.EQUAL_SYMBOL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5851;
				this.expression(0);
				this.state = 5859;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 5852;
					this.match(MariaDBParser.COMMA);
					this.state = 5853;
					this.fullId();
					this.state = 5854;
					_la = this._input.LA(1);
					if (!(_la === MariaDBParser.VAR_ASSIGN || _la === MariaDBParser.EQUAL_SYMBOL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 5855;
					this.expression(0);
					}
					}
					this.state = 5861;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showStatement(): ShowStatementContext {
		let _localctx: ShowStatementContext = new ShowStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 496, MariaDBParser.RULE_showStatement);
		let _la: number;
		try {
			this.state = 6055;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 893, this._ctx) ) {
			case 1:
				_localctx = new ShowMasterLogsContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5864;
				this.match(MariaDBParser.SHOW);
				this.state = 5865;
				(_localctx as ShowMasterLogsContext)._logFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.BINARY || _la === MariaDBParser.MASTER)) {
					(_localctx as ShowMasterLogsContext)._logFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5866;
				this.match(MariaDBParser.LOGS);
				}
				break;

			case 2:
				_localctx = new ShowBinLogEventsContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5867;
				this.match(MariaDBParser.SHOW);
				this.state = 5868;
				this.match(MariaDBParser.BINLOG);
				this.state = 5869;
				this.match(MariaDBParser.EVENTS);
				this.state = 5872;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.IN) {
					{
					this.state = 5870;
					this.match(MariaDBParser.IN);
					this.state = 5871;
					(_localctx as ShowBinLogEventsContext)._filename = this.match(MariaDBParser.STRING_LITERAL);
					}
				}

				this.state = 5876;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.FROM) {
					{
					this.state = 5874;
					this.match(MariaDBParser.FROM);
					this.state = 5875;
					(_localctx as ShowBinLogEventsContext)._fromPosition = this.decimalLiteral();
					}
				}

				this.state = 5879;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.LIMIT) {
					{
					this.state = 5878;
					this.limitClause();
					}
				}

				}
				break;

			case 3:
				_localctx = new ShowRelayLogEventsContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5881;
				this.match(MariaDBParser.SHOW);
				this.state = 5882;
				this.match(MariaDBParser.RELAYLOG);
				this.state = 5884;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.STRING_LITERAL) {
					{
					this.state = 5883;
					(_localctx as ShowRelayLogEventsContext)._connectionName = this.match(MariaDBParser.STRING_LITERAL);
					}
				}

				this.state = 5886;
				this.match(MariaDBParser.EVENTS);
				this.state = 5889;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.IN) {
					{
					this.state = 5887;
					this.match(MariaDBParser.IN);
					this.state = 5888;
					(_localctx as ShowRelayLogEventsContext)._filename = this.match(MariaDBParser.STRING_LITERAL);
					}
				}

				this.state = 5893;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.FROM) {
					{
					this.state = 5891;
					this.match(MariaDBParser.FROM);
					this.state = 5892;
					(_localctx as ShowRelayLogEventsContext)._fromPosition = this.decimalLiteral();
					}
				}

				this.state = 5896;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.LIMIT) {
					{
					this.state = 5895;
					this.limitClause();
					}
				}

				this.state = 5901;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.FOR) {
					{
					this.state = 5898;
					this.match(MariaDBParser.FOR);
					this.state = 5899;
					this.match(MariaDBParser.CHANNEL);
					this.state = 5900;
					(_localctx as ShowRelayLogEventsContext)._channelName = this.match(MariaDBParser.STRING_LITERAL);
					}
				}

				}
				break;

			case 4:
				_localctx = new ShowObjectFilterContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5903;
				this.match(MariaDBParser.SHOW);
				this.state = 5904;
				this.showCommonEntity();
				this.state = 5906;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.LIKE || _la === MariaDBParser.WHERE) {
					{
					this.state = 5905;
					this.showFilter();
					}
				}

				}
				break;

			case 5:
				_localctx = new ShowColumnsContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5908;
				this.match(MariaDBParser.SHOW);
				this.state = 5910;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.FULL) {
					{
					this.state = 5909;
					this.match(MariaDBParser.FULL);
					}
				}

				this.state = 5912;
				(_localctx as ShowColumnsContext)._columnsFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.COLUMNS || _la === MariaDBParser.FIELDS)) {
					(_localctx as ShowColumnsContext)._columnsFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5913;
				(_localctx as ShowColumnsContext)._tableFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.FROM || _la === MariaDBParser.IN)) {
					(_localctx as ShowColumnsContext)._tableFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5914;
				this.tableName();
				this.state = 5917;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.FROM || _la === MariaDBParser.IN) {
					{
					this.state = 5915;
					(_localctx as ShowColumnsContext)._schemaFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MariaDBParser.FROM || _la === MariaDBParser.IN)) {
						(_localctx as ShowColumnsContext)._schemaFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 5916;
					this.uid();
					}
				}

				this.state = 5920;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.LIKE || _la === MariaDBParser.WHERE) {
					{
					this.state = 5919;
					this.showFilter();
					}
				}

				}
				break;

			case 6:
				_localctx = new ShowCreateDbContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5922;
				this.match(MariaDBParser.SHOW);
				this.state = 5923;
				this.match(MariaDBParser.CREATE);
				this.state = 5924;
				(_localctx as ShowCreateDbContext)._schemaFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.DATABASE || _la === MariaDBParser.SCHEMA)) {
					(_localctx as ShowCreateDbContext)._schemaFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5926;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 874, this._ctx) ) {
				case 1:
					{
					this.state = 5925;
					this.ifNotExists();
					}
					break;
				}
				this.state = 5928;
				this.uid();
				}
				break;

			case 7:
				_localctx = new ShowCreateFullIdObjectContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5929;
				this.match(MariaDBParser.SHOW);
				this.state = 5930;
				this.match(MariaDBParser.CREATE);
				this.state = 5931;
				(_localctx as ShowCreateFullIdObjectContext)._namedEntity = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.PROCEDURE || _la === MariaDBParser.TABLE || _la === MariaDBParser.TRIGGER || _la === MariaDBParser.EVENT || _la === MariaDBParser.FUNCTION || _la === MariaDBParser.SEQUENCE || _la === MariaDBParser.VIEW)) {
					(_localctx as ShowCreateFullIdObjectContext)._namedEntity = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5932;
				this.fullId();
				}
				break;

			case 8:
				_localctx = new ShowCreatePackageContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5933;
				this.match(MariaDBParser.SHOW);
				this.state = 5934;
				this.match(MariaDBParser.CREATE);
				this.state = 5935;
				this.match(MariaDBParser.PACKAGE);
				this.state = 5937;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 875, this._ctx) ) {
				case 1:
					{
					this.state = 5936;
					this.match(MariaDBParser.BODY);
					}
					break;
				}
				this.state = 5939;
				this.fullId();
				}
				break;

			case 9:
				_localctx = new ShowCreateUserContext(_localctx);
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 5940;
				this.match(MariaDBParser.SHOW);
				this.state = 5941;
				this.match(MariaDBParser.CREATE);
				this.state = 5942;
				this.match(MariaDBParser.USER);
				this.state = 5943;
				this.userName();
				}
				break;

			case 10:
				_localctx = new ShowEngineContext(_localctx);
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 5944;
				this.match(MariaDBParser.SHOW);
				this.state = 5945;
				this.match(MariaDBParser.ENGINE);
				this.state = 5946;
				this.engineName();
				this.state = 5947;
				(_localctx as ShowEngineContext)._engineOption = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.MUTEX || _la === MariaDBParser.STATUS)) {
					(_localctx as ShowEngineContext)._engineOption = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 11:
				_localctx = new ShowInnoDBStatusContext(_localctx);
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 5949;
				this.match(MariaDBParser.SHOW);
				this.state = 5950;
				this.match(MariaDBParser.INNODB);
				this.state = 5951;
				this.match(MariaDBParser.STATUS);
				}
				break;

			case 12:
				_localctx = new ShowGlobalInfoContext(_localctx);
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 5952;
				this.match(MariaDBParser.SHOW);
				this.state = 5953;
				this.showGlobalInfoClause();
				}
				break;

			case 13:
				_localctx = new ShowErrorsContext(_localctx);
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 5954;
				this.match(MariaDBParser.SHOW);
				this.state = 5955;
				(_localctx as ShowErrorsContext)._errorFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.ERRORS || _la === MariaDBParser.WARNINGS)) {
					(_localctx as ShowErrorsContext)._errorFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5957;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.LIMIT) {
					{
					this.state = 5956;
					this.limitClause();
					}
				}

				}
				break;

			case 14:
				_localctx = new ShowCountErrorsContext(_localctx);
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 5959;
				this.match(MariaDBParser.SHOW);
				this.state = 5960;
				this.match(MariaDBParser.COUNT);
				this.state = 5961;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 5962;
				this.match(MariaDBParser.STAR);
				this.state = 5963;
				this.match(MariaDBParser.RR_BRACKET);
				this.state = 5964;
				(_localctx as ShowCountErrorsContext)._errorFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.ERRORS || _la === MariaDBParser.WARNINGS)) {
					(_localctx as ShowCountErrorsContext)._errorFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 15:
				_localctx = new ShowSchemaFilterContext(_localctx);
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 5965;
				this.match(MariaDBParser.SHOW);
				this.state = 5966;
				this.showSchemaEntity();
				this.state = 5969;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.FROM || _la === MariaDBParser.IN) {
					{
					this.state = 5967;
					(_localctx as ShowSchemaFilterContext)._schemaFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MariaDBParser.FROM || _la === MariaDBParser.IN)) {
						(_localctx as ShowSchemaFilterContext)._schemaFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 5968;
					this.uid();
					}
				}

				this.state = 5972;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.LIKE || _la === MariaDBParser.WHERE) {
					{
					this.state = 5971;
					this.showFilter();
					}
				}

				}
				break;

			case 16:
				_localctx = new ShowRoutineContext(_localctx);
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 5974;
				this.match(MariaDBParser.SHOW);
				this.state = 5975;
				(_localctx as ShowRoutineContext)._routine = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.PROCEDURE || _la === MariaDBParser.FUNCTION)) {
					(_localctx as ShowRoutineContext)._routine = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5976;
				this.match(MariaDBParser.CODE);
				this.state = 5977;
				this.fullId();
				}
				break;

			case 17:
				_localctx = new ShowGrantsContext(_localctx);
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 5978;
				this.match(MariaDBParser.SHOW);
				this.state = 5979;
				this.match(MariaDBParser.GRANTS);
				this.state = 5982;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.FOR) {
					{
					this.state = 5980;
					this.match(MariaDBParser.FOR);
					this.state = 5981;
					this.userName();
					}
				}

				}
				break;

			case 18:
				_localctx = new ShowIndexesContext(_localctx);
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 5984;
				this.match(MariaDBParser.SHOW);
				this.state = 5985;
				(_localctx as ShowIndexesContext)._indexFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.INDEX || _la === MariaDBParser.KEYS || _la === MariaDBParser.INDEXES)) {
					(_localctx as ShowIndexesContext)._indexFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5986;
				(_localctx as ShowIndexesContext)._tableFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.FROM || _la === MariaDBParser.IN)) {
					(_localctx as ShowIndexesContext)._tableFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5987;
				this.tableName();
				this.state = 5990;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.FROM || _la === MariaDBParser.IN) {
					{
					this.state = 5988;
					(_localctx as ShowIndexesContext)._schemaFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MariaDBParser.FROM || _la === MariaDBParser.IN)) {
						(_localctx as ShowIndexesContext)._schemaFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 5989;
					this.uid();
					}
				}

				this.state = 5994;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.WHERE) {
					{
					this.state = 5992;
					this.match(MariaDBParser.WHERE);
					this.state = 5993;
					this.expression(0);
					}
				}

				}
				break;

			case 19:
				_localctx = new ShowOpenTablesContext(_localctx);
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 5996;
				this.match(MariaDBParser.SHOW);
				this.state = 5997;
				this.match(MariaDBParser.OPEN);
				this.state = 5998;
				this.match(MariaDBParser.TABLES);
				this.state = 6001;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.FROM || _la === MariaDBParser.IN) {
					{
					this.state = 5999;
					(_localctx as ShowOpenTablesContext)._schemaFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MariaDBParser.FROM || _la === MariaDBParser.IN)) {
						(_localctx as ShowOpenTablesContext)._schemaFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 6000;
					this.fullId();
					}
				}

				this.state = 6004;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.LIKE || _la === MariaDBParser.WHERE) {
					{
					this.state = 6003;
					this.showFilter();
					}
				}

				}
				break;

			case 20:
				_localctx = new ShowProfileContext(_localctx);
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 6006;
				this.match(MariaDBParser.SHOW);
				this.state = 6007;
				this.match(MariaDBParser.PROFILE);
				this.state = 6016;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.ALL || _la === MariaDBParser.BLOCK || _la === MariaDBParser.CONTEXT || _la === MariaDBParser.CPU || _la === MariaDBParser.IPC || _la === MariaDBParser.PAGE || _la === MariaDBParser.SOURCE || _la === MariaDBParser.SWAPS || _la === MariaDBParser.MEMORY) {
					{
					this.state = 6008;
					this.showProfileType();
					this.state = 6013;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === MariaDBParser.COMMA) {
						{
						{
						this.state = 6009;
						this.match(MariaDBParser.COMMA);
						this.state = 6010;
						this.showProfileType();
						}
						}
						this.state = 6015;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 6021;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.FOR) {
					{
					this.state = 6018;
					this.match(MariaDBParser.FOR);
					this.state = 6019;
					this.match(MariaDBParser.QUERY);
					this.state = 6020;
					(_localctx as ShowProfileContext)._queryCount = this.decimalLiteral();
					}
				}

				this.state = 6024;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.LIMIT) {
					{
					this.state = 6023;
					this.limitClause();
					}
				}

				}
				break;

			case 21:
				_localctx = new ShowSlaveStatusContext(_localctx);
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 6026;
				this.match(MariaDBParser.SHOW);
				this.state = 6027;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.SLAVE || _la === MariaDBParser.REPLICA)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6029;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.STRING_LITERAL) {
					{
					this.state = 6028;
					(_localctx as ShowSlaveStatusContext)._connectionName = this.match(MariaDBParser.STRING_LITERAL);
					}
				}

				this.state = 6031;
				this.match(MariaDBParser.STATUS);
				this.state = 6035;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.FOR) {
					{
					this.state = 6032;
					this.match(MariaDBParser.FOR);
					this.state = 6033;
					this.match(MariaDBParser.CHANNEL);
					this.state = 6034;
					(_localctx as ShowSlaveStatusContext)._channelName = this.match(MariaDBParser.STRING_LITERAL);
					}
				}

				}
				break;

			case 22:
				_localctx = new ShowUserstatPluginContext(_localctx);
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 6037;
				this.match(MariaDBParser.SHOW);
				this.state = 6038;
				_la = this._input.LA(1);
				if (!(((((_la - 703)) & ~0x1F) === 0 && ((1 << (_la - 703)) & ((1 << (MariaDBParser.USER_STATISTICS - 703)) | (1 << (MariaDBParser.CLIENT_STATISTICS - 703)) | (1 << (MariaDBParser.INDEX_STATISTICS - 703)) | (1 << (MariaDBParser.TABLE_STATISTICS - 703)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 23:
				_localctx = new ShowExplainContext(_localctx);
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 6039;
				this.match(MariaDBParser.SHOW);
				this.state = 6040;
				this.match(MariaDBParser.EXPLAIN);
				this.state = 6042;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.FORMAT) {
					{
					this.state = 6041;
					this.formatJsonStatement();
					}
				}

				this.state = 6044;
				this.match(MariaDBParser.FOR);
				this.state = 6045;
				this.decimalLiteral();
				}
				break;

			case 24:
				_localctx = new ShowPackageStatusContext(_localctx);
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 6046;
				this.match(MariaDBParser.SHOW);
				this.state = 6047;
				this.match(MariaDBParser.PACKAGE);
				this.state = 6049;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.BODY) {
					{
					this.state = 6048;
					this.match(MariaDBParser.BODY);
					}
				}

				this.state = 6051;
				this.match(MariaDBParser.STATUS);
				this.state = 6053;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.LIKE || _la === MariaDBParser.WHERE) {
					{
					this.state = 6052;
					this.showFilter();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public explainStatement(): ExplainStatementContext {
		let _localctx: ExplainStatementContext = new ExplainStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 498, MariaDBParser.RULE_explainStatement);
		let _la: number;
		try {
			_localctx = new ExplainForConnectionContext(_localctx);
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6057;
			this.match(MariaDBParser.EXPLAIN);
			this.state = 6059;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.FORMAT) {
				{
				this.state = 6058;
				this.formatJsonStatement();
				}
			}

			this.state = 6061;
			this.match(MariaDBParser.FOR);
			this.state = 6062;
			this.match(MariaDBParser.CONNECTION);
			this.state = 6063;
			this.decimalLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public variableClause(): VariableClauseContext {
		let _localctx: VariableClauseContext = new VariableClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 500, MariaDBParser.RULE_variableClause);
		let _la: number;
		try {
			this.state = 6075;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.LOCAL_ID:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6065;
				this.match(MariaDBParser.LOCAL_ID);
				}
				break;
			case MariaDBParser.GLOBAL_ID:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6066;
				this.match(MariaDBParser.GLOBAL_ID);
				}
				break;
			case MariaDBParser.ATTRIBUTE:
			case MariaDBParser.BODY:
			case MariaDBParser.BUCKETS:
			case MariaDBParser.CONDITION:
			case MariaDBParser.CURRENT:
			case MariaDBParser.CURRENT_ROLE:
			case MariaDBParser.CURRENT_USER:
			case MariaDBParser.DATABASE:
			case MariaDBParser.DEFAULT:
			case MariaDBParser.DIAGNOSTICS:
			case MariaDBParser.EMPTY:
			case MariaDBParser.EXCEPT:
			case MariaDBParser.GROUP:
			case MariaDBParser.IF:
			case MariaDBParser.IGNORED:
			case MariaDBParser.INSERT:
			case MariaDBParser.LATERAL:
			case MariaDBParser.LEFT:
			case MariaDBParser.LOCKED:
			case MariaDBParser.MAXVALUE:
			case MariaDBParser.MINVALUE:
			case MariaDBParser.NUMBER:
			case MariaDBParser.OPTIONAL:
			case MariaDBParser.ORDER:
			case MariaDBParser.PRIMARY:
			case MariaDBParser.PACKAGE:
			case MariaDBParser.REPLACE:
			case MariaDBParser.RIGHT:
			case MariaDBParser.SCHEMA:
			case MariaDBParser.SKIP_:
			case MariaDBParser.STACKED:
			case MariaDBParser.STATEMENT:
			case MariaDBParser.DATE:
			case MariaDBParser.TIME:
			case MariaDBParser.TIMESTAMP:
			case MariaDBParser.DATETIME:
			case MariaDBParser.YEAR:
			case MariaDBParser.BINARY:
			case MariaDBParser.TEXT:
			case MariaDBParser.ENUM:
			case MariaDBParser.SERIAL:
			case MariaDBParser.JSON_ARRAY:
			case MariaDBParser.JSON_ARRAYAGG:
			case MariaDBParser.JSON_ARRAY_APPEND:
			case MariaDBParser.JSON_ARRAY_INSERT:
			case MariaDBParser.JSON_CONTAINS:
			case MariaDBParser.JSON_CONTAINS_PATH:
			case MariaDBParser.JSON_DEPTH:
			case MariaDBParser.JSON_EXTRACT:
			case MariaDBParser.JSON_INSERT:
			case MariaDBParser.JSON_KEYS:
			case MariaDBParser.JSON_LENGTH:
			case MariaDBParser.JSON_MERGE:
			case MariaDBParser.JSON_MERGE_PATCH:
			case MariaDBParser.JSON_MERGE_PRESERVE:
			case MariaDBParser.JSON_OBJECT:
			case MariaDBParser.JSON_OBJECTAGG:
			case MariaDBParser.JSON_OVERLAPS:
			case MariaDBParser.JSON_PRETTY:
			case MariaDBParser.JSON_QUOTE:
			case MariaDBParser.JSON_REMOVE:
			case MariaDBParser.JSON_REPLACE:
			case MariaDBParser.JSON_SCHEMA_VALID:
			case MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT:
			case MariaDBParser.JSON_SEARCH:
			case MariaDBParser.JSON_SET:
			case MariaDBParser.JSON_STORAGE_FREE:
			case MariaDBParser.JSON_STORAGE_SIZE:
			case MariaDBParser.JSON_TABLE:
			case MariaDBParser.JSON_TYPE:
			case MariaDBParser.JSON_UNQUOTE:
			case MariaDBParser.JSON_VALID:
			case MariaDBParser.JSON_VALUE:
			case MariaDBParser.NESTED:
			case MariaDBParser.ORDINALITY:
			case MariaDBParser.PATH:
			case MariaDBParser.AVG:
			case MariaDBParser.BIT_AND:
			case MariaDBParser.BIT_OR:
			case MariaDBParser.BIT_XOR:
			case MariaDBParser.COUNT:
			case MariaDBParser.CUME_DIST:
			case MariaDBParser.DENSE_RANK:
			case MariaDBParser.FIRST_VALUE:
			case MariaDBParser.GROUP_CONCAT:
			case MariaDBParser.LAG:
			case MariaDBParser.LAST_VALUE:
			case MariaDBParser.LEAD:
			case MariaDBParser.MAX:
			case MariaDBParser.MIN:
			case MariaDBParser.NTILE:
			case MariaDBParser.NTH_VALUE:
			case MariaDBParser.PERCENT_RANK:
			case MariaDBParser.RANK:
			case MariaDBParser.ROW_NUMBER:
			case MariaDBParser.STD:
			case MariaDBParser.STDDEV:
			case MariaDBParser.STDDEV_POP:
			case MariaDBParser.STDDEV_SAMP:
			case MariaDBParser.SUM:
			case MariaDBParser.VAR_POP:
			case MariaDBParser.VAR_SAMP:
			case MariaDBParser.VARIANCE:
			case MariaDBParser.CURRENT_DATE:
			case MariaDBParser.CURRENT_TIME:
			case MariaDBParser.CURRENT_TIMESTAMP:
			case MariaDBParser.LOCALTIME:
			case MariaDBParser.CURDATE:
			case MariaDBParser.CURTIME:
			case MariaDBParser.DATE_ADD:
			case MariaDBParser.DATE_SUB:
			case MariaDBParser.LOCALTIMESTAMP:
			case MariaDBParser.NOW:
			case MariaDBParser.POSITION:
			case MariaDBParser.SUBSTR:
			case MariaDBParser.SUBSTRING:
			case MariaDBParser.SYSDATE:
			case MariaDBParser.TRIM:
			case MariaDBParser.UTC_DATE:
			case MariaDBParser.UTC_TIME:
			case MariaDBParser.UTC_TIMESTAMP:
			case MariaDBParser.ACCOUNT:
			case MariaDBParser.ACTION:
			case MariaDBParser.AFTER:
			case MariaDBParser.AGGREGATE:
			case MariaDBParser.ALGORITHM:
			case MariaDBParser.ANY:
			case MariaDBParser.AT:
			case MariaDBParser.AUTHORS:
			case MariaDBParser.AUTOCOMMIT:
			case MariaDBParser.AUTOEXTEND_SIZE:
			case MariaDBParser.AUTO_INCREMENT:
			case MariaDBParser.AVG_ROW_LENGTH:
			case MariaDBParser.BEGIN:
			case MariaDBParser.BINLOG:
			case MariaDBParser.BIT:
			case MariaDBParser.BLOCK:
			case MariaDBParser.BOOL:
			case MariaDBParser.BOOLEAN:
			case MariaDBParser.BTREE:
			case MariaDBParser.CACHE:
			case MariaDBParser.CASCADED:
			case MariaDBParser.CHAIN:
			case MariaDBParser.CHANGED:
			case MariaDBParser.CHANNEL:
			case MariaDBParser.CHECKSUM:
			case MariaDBParser.PAGE_CHECKSUM:
			case MariaDBParser.CIPHER:
			case MariaDBParser.CLASS_ORIGIN:
			case MariaDBParser.CLIENT:
			case MariaDBParser.CLOSE:
			case MariaDBParser.CLUSTERING:
			case MariaDBParser.COALESCE:
			case MariaDBParser.CODE:
			case MariaDBParser.COLUMNS:
			case MariaDBParser.COLUMN_FORMAT:
			case MariaDBParser.COLUMN_NAME:
			case MariaDBParser.COMMENT:
			case MariaDBParser.COMMIT:
			case MariaDBParser.COMPACT:
			case MariaDBParser.COMPLETION:
			case MariaDBParser.COMPRESSED:
			case MariaDBParser.COMPRESSION:
			case MariaDBParser.CONCURRENT:
			case MariaDBParser.CONNECT:
			case MariaDBParser.CONNECTION:
			case MariaDBParser.CONSISTENT:
			case MariaDBParser.CONSTRAINT_CATALOG:
			case MariaDBParser.CONSTRAINT_SCHEMA:
			case MariaDBParser.CONSTRAINT_NAME:
			case MariaDBParser.CONTAINS:
			case MariaDBParser.CONTEXT:
			case MariaDBParser.CONTRIBUTORS:
			case MariaDBParser.COPY:
			case MariaDBParser.CPU:
			case MariaDBParser.CYCLE:
			case MariaDBParser.CURSOR_NAME:
			case MariaDBParser.DATA:
			case MariaDBParser.DATAFILE:
			case MariaDBParser.DEALLOCATE:
			case MariaDBParser.DEFAULT_AUTH:
			case MariaDBParser.DEFINER:
			case MariaDBParser.DELAY_KEY_WRITE:
			case MariaDBParser.DES_KEY_FILE:
			case MariaDBParser.DIRECTORY:
			case MariaDBParser.DISABLE:
			case MariaDBParser.DISCARD:
			case MariaDBParser.DISK:
			case MariaDBParser.DO:
			case MariaDBParser.DUMPFILE:
			case MariaDBParser.DUPLICATE:
			case MariaDBParser.DYNAMIC:
			case MariaDBParser.ENABLE:
			case MariaDBParser.ENCRYPTED:
			case MariaDBParser.ENCRYPTION:
			case MariaDBParser.ENCRYPTION_KEY_ID:
			case MariaDBParser.END:
			case MariaDBParser.ENDS:
			case MariaDBParser.ENGINE:
			case MariaDBParser.ENGINES:
			case MariaDBParser.ERROR:
			case MariaDBParser.ERRORS:
			case MariaDBParser.ESCAPE:
			case MariaDBParser.EVEN:
			case MariaDBParser.EVENT:
			case MariaDBParser.EVENTS:
			case MariaDBParser.EVERY:
			case MariaDBParser.EXCHANGE:
			case MariaDBParser.EXCLUSIVE:
			case MariaDBParser.EXPIRE:
			case MariaDBParser.EXPORT:
			case MariaDBParser.EXTENDED:
			case MariaDBParser.EXTENT_SIZE:
			case MariaDBParser.FAILED_LOGIN_ATTEMPTS:
			case MariaDBParser.FAST:
			case MariaDBParser.FAULTS:
			case MariaDBParser.FIELDS:
			case MariaDBParser.FILE_BLOCK_SIZE:
			case MariaDBParser.FILTER:
			case MariaDBParser.FIRST:
			case MariaDBParser.FIXED:
			case MariaDBParser.FLUSH:
			case MariaDBParser.FOLLOWS:
			case MariaDBParser.FOUND:
			case MariaDBParser.FULL:
			case MariaDBParser.FUNCTION:
			case MariaDBParser.GENERAL:
			case MariaDBParser.GLOBAL:
			case MariaDBParser.GRANTS:
			case MariaDBParser.GROUP_REPLICATION:
			case MariaDBParser.HANDLER:
			case MariaDBParser.HASH:
			case MariaDBParser.HELP:
			case MariaDBParser.HISTORY:
			case MariaDBParser.HOST:
			case MariaDBParser.HOSTS:
			case MariaDBParser.IDENTIFIED:
			case MariaDBParser.IGNORE_SERVER_IDS:
			case MariaDBParser.IMPORT:
			case MariaDBParser.INCREMENT:
			case MariaDBParser.INDEXES:
			case MariaDBParser.INITIAL_SIZE:
			case MariaDBParser.INPLACE:
			case MariaDBParser.INSERT_METHOD:
			case MariaDBParser.INSTALL:
			case MariaDBParser.INSTANCE:
			case MariaDBParser.INSTANT:
			case MariaDBParser.INVISIBLE:
			case MariaDBParser.INVOKER:
			case MariaDBParser.IO:
			case MariaDBParser.IO_THREAD:
			case MariaDBParser.IPC:
			case MariaDBParser.ISOLATION:
			case MariaDBParser.ISSUER:
			case MariaDBParser.JSON:
			case MariaDBParser.KEY_BLOCK_SIZE:
			case MariaDBParser.LANGUAGE:
			case MariaDBParser.LAST:
			case MariaDBParser.LEAVES:
			case MariaDBParser.LESS:
			case MariaDBParser.LEVEL:
			case MariaDBParser.LIST:
			case MariaDBParser.LOCAL:
			case MariaDBParser.LOCALES:
			case MariaDBParser.LOGFILE:
			case MariaDBParser.LOGS:
			case MariaDBParser.MASTER:
			case MariaDBParser.MASTER_AUTO_POSITION:
			case MariaDBParser.MASTER_CONNECT_RETRY:
			case MariaDBParser.MASTER_DELAY:
			case MariaDBParser.MASTER_HEARTBEAT_PERIOD:
			case MariaDBParser.MASTER_HOST:
			case MariaDBParser.MASTER_LOG_FILE:
			case MariaDBParser.MASTER_LOG_POS:
			case MariaDBParser.MASTER_PASSWORD:
			case MariaDBParser.MASTER_PORT:
			case MariaDBParser.MASTER_RETRY_COUNT:
			case MariaDBParser.MASTER_SSL:
			case MariaDBParser.MASTER_SSL_CA:
			case MariaDBParser.MASTER_SSL_CAPATH:
			case MariaDBParser.MASTER_SSL_CERT:
			case MariaDBParser.MASTER_SSL_CIPHER:
			case MariaDBParser.MASTER_SSL_CRL:
			case MariaDBParser.MASTER_SSL_CRLPATH:
			case MariaDBParser.MASTER_SSL_KEY:
			case MariaDBParser.MASTER_TLS_VERSION:
			case MariaDBParser.MASTER_USER:
			case MariaDBParser.MAX_CONNECTIONS_PER_HOUR:
			case MariaDBParser.MAX_QUERIES_PER_HOUR:
			case MariaDBParser.MAX_ROWS:
			case MariaDBParser.MAX_SIZE:
			case MariaDBParser.MAX_UPDATES_PER_HOUR:
			case MariaDBParser.MAX_USER_CONNECTIONS:
			case MariaDBParser.MEDIUM:
			case MariaDBParser.MEMBER:
			case MariaDBParser.MERGE:
			case MariaDBParser.MESSAGE_TEXT:
			case MariaDBParser.MID:
			case MariaDBParser.MIGRATE:
			case MariaDBParser.MIN_ROWS:
			case MariaDBParser.MODE:
			case MariaDBParser.MODIFY:
			case MariaDBParser.MUTEX:
			case MariaDBParser.MYSQL:
			case MariaDBParser.MYSQL_ERRNO:
			case MariaDBParser.NAME:
			case MariaDBParser.NAMES:
			case MariaDBParser.NCHAR:
			case MariaDBParser.NEVER:
			case MariaDBParser.NEXT:
			case MariaDBParser.NO:
			case MariaDBParser.NOCACHE:
			case MariaDBParser.NOCOPY:
			case MariaDBParser.NOCYCLE:
			case MariaDBParser.NOMAXVALUE:
			case MariaDBParser.NOMINVALUE:
			case MariaDBParser.NOWAIT:
			case MariaDBParser.NODEGROUP:
			case MariaDBParser.NONE:
			case MariaDBParser.ODBC:
			case MariaDBParser.OFFLINE:
			case MariaDBParser.OFFSET:
			case MariaDBParser.OF:
			case MariaDBParser.OJ:
			case MariaDBParser.OLD_PASSWORD:
			case MariaDBParser.ONE:
			case MariaDBParser.ONLINE:
			case MariaDBParser.ONLY:
			case MariaDBParser.OPEN:
			case MariaDBParser.OPTIMIZER_COSTS:
			case MariaDBParser.OPTIONS:
			case MariaDBParser.OWNER:
			case MariaDBParser.PACK_KEYS:
			case MariaDBParser.PAGE:
			case MariaDBParser.PARSER:
			case MariaDBParser.PARTIAL:
			case MariaDBParser.PARTITIONING:
			case MariaDBParser.PARTITIONS:
			case MariaDBParser.PASSWORD:
			case MariaDBParser.PASSWORD_LOCK_TIME:
			case MariaDBParser.PHASE:
			case MariaDBParser.PLUGIN:
			case MariaDBParser.PLUGIN_DIR:
			case MariaDBParser.PLUGINS:
			case MariaDBParser.PORT:
			case MariaDBParser.PRECEDES:
			case MariaDBParser.PREPARE:
			case MariaDBParser.PRESERVE:
			case MariaDBParser.PREV:
			case MariaDBParser.PROCESSLIST:
			case MariaDBParser.PROFILE:
			case MariaDBParser.PROFILES:
			case MariaDBParser.PROXY:
			case MariaDBParser.QUERY:
			case MariaDBParser.QUERY_RESPONSE_TIME:
			case MariaDBParser.QUICK:
			case MariaDBParser.REBUILD:
			case MariaDBParser.RECOVER:
			case MariaDBParser.RECURSIVE:
			case MariaDBParser.REDO_BUFFER_SIZE:
			case MariaDBParser.REDUNDANT:
			case MariaDBParser.RELAY:
			case MariaDBParser.RELAY_LOG_FILE:
			case MariaDBParser.RELAY_LOG_POS:
			case MariaDBParser.RELAYLOG:
			case MariaDBParser.REMOVE:
			case MariaDBParser.REORGANIZE:
			case MariaDBParser.REPAIR:
			case MariaDBParser.REPLICATE_DO_DB:
			case MariaDBParser.REPLICATE_DO_TABLE:
			case MariaDBParser.REPLICATE_IGNORE_DB:
			case MariaDBParser.REPLICATE_IGNORE_TABLE:
			case MariaDBParser.REPLICATE_REWRITE_DB:
			case MariaDBParser.REPLICATE_WILD_DO_TABLE:
			case MariaDBParser.REPLICATE_WILD_IGNORE_TABLE:
			case MariaDBParser.REPLICATION:
			case MariaDBParser.RESET:
			case MariaDBParser.RESTART:
			case MariaDBParser.RESUME:
			case MariaDBParser.RETURNED_SQLSTATE:
			case MariaDBParser.RETURNS:
			case MariaDBParser.REUSE:
			case MariaDBParser.ROLE:
			case MariaDBParser.ROLLBACK:
			case MariaDBParser.ROLLUP:
			case MariaDBParser.ROTATE:
			case MariaDBParser.ROW:
			case MariaDBParser.ROWS:
			case MariaDBParser.ROW_FORMAT:
			case MariaDBParser.RTREE:
			case MariaDBParser.SAVEPOINT:
			case MariaDBParser.SCHEDULE:
			case MariaDBParser.SECURITY:
			case MariaDBParser.SEQUENCE:
			case MariaDBParser.SERVER:
			case MariaDBParser.SESSION:
			case MariaDBParser.SHARE:
			case MariaDBParser.SHARED:
			case MariaDBParser.SIGNED:
			case MariaDBParser.SIMPLE:
			case MariaDBParser.SLAVE:
			case MariaDBParser.SLAVES:
			case MariaDBParser.SLOW:
			case MariaDBParser.SNAPSHOT:
			case MariaDBParser.SOCKET:
			case MariaDBParser.SOME:
			case MariaDBParser.SONAME:
			case MariaDBParser.SOUNDS:
			case MariaDBParser.SOURCE:
			case MariaDBParser.SQL_AFTER_GTIDS:
			case MariaDBParser.SQL_AFTER_MTS_GAPS:
			case MariaDBParser.SQL_BEFORE_GTIDS:
			case MariaDBParser.SQL_BUFFER_RESULT:
			case MariaDBParser.SQL_CACHE:
			case MariaDBParser.SQL_NO_CACHE:
			case MariaDBParser.SQL_THREAD:
			case MariaDBParser.START:
			case MariaDBParser.STARTS:
			case MariaDBParser.STATS_AUTO_RECALC:
			case MariaDBParser.STATS_PERSISTENT:
			case MariaDBParser.STATS_SAMPLE_PAGES:
			case MariaDBParser.STATUS:
			case MariaDBParser.STOP:
			case MariaDBParser.STORAGE:
			case MariaDBParser.STRING:
			case MariaDBParser.SUBCLASS_ORIGIN:
			case MariaDBParser.SUBJECT:
			case MariaDBParser.SUBPARTITION:
			case MariaDBParser.SUBPARTITIONS:
			case MariaDBParser.SUSPEND:
			case MariaDBParser.SWAPS:
			case MariaDBParser.SWITCHES:
			case MariaDBParser.TABLE_NAME:
			case MariaDBParser.TABLESPACE:
			case MariaDBParser.TABLE_TYPE:
			case MariaDBParser.TEMPORARY:
			case MariaDBParser.TEMPTABLE:
			case MariaDBParser.THAN:
			case MariaDBParser.TRADITIONAL:
			case MariaDBParser.TRANSACTION:
			case MariaDBParser.TRANSACTIONAL:
			case MariaDBParser.TRIGGERS:
			case MariaDBParser.TRUNCATE:
			case MariaDBParser.TYPES:
			case MariaDBParser.UNBOUNDED:
			case MariaDBParser.UNDEFINED:
			case MariaDBParser.UNDOFILE:
			case MariaDBParser.UNDO_BUFFER_SIZE:
			case MariaDBParser.UNINSTALL:
			case MariaDBParser.UNKNOWN:
			case MariaDBParser.UNTIL:
			case MariaDBParser.UPGRADE:
			case MariaDBParser.USER:
			case MariaDBParser.USE_FRM:
			case MariaDBParser.USER_RESOURCES:
			case MariaDBParser.VALIDATION:
			case MariaDBParser.VALUE:
			case MariaDBParser.VARIABLES:
			case MariaDBParser.VIEW:
			case MariaDBParser.VIRTUAL:
			case MariaDBParser.VISIBLE:
			case MariaDBParser.WAIT:
			case MariaDBParser.WARNINGS:
			case MariaDBParser.WITHOUT:
			case MariaDBParser.WORK:
			case MariaDBParser.WRAPPER:
			case MariaDBParser.WSREP_MEMBERSHIP:
			case MariaDBParser.WSREP_STATUS:
			case MariaDBParser.X509:
			case MariaDBParser.XA:
			case MariaDBParser.XML:
			case MariaDBParser.EUR:
			case MariaDBParser.USA:
			case MariaDBParser.JIS:
			case MariaDBParser.ISO:
			case MariaDBParser.INTERNAL:
			case MariaDBParser.QUARTER:
			case MariaDBParser.MONTH:
			case MariaDBParser.DAY:
			case MariaDBParser.HOUR:
			case MariaDBParser.MINUTE:
			case MariaDBParser.WEEK:
			case MariaDBParser.SECOND:
			case MariaDBParser.MICROSECOND:
			case MariaDBParser.USER_STATISTICS:
			case MariaDBParser.CLIENT_STATISTICS:
			case MariaDBParser.INDEX_STATISTICS:
			case MariaDBParser.TABLE_STATISTICS:
			case MariaDBParser.ADMIN:
			case MariaDBParser.AUDIT_ADMIN:
			case MariaDBParser.BACKUP_ADMIN:
			case MariaDBParser.BINLOG_ADMIN:
			case MariaDBParser.BINLOG_ENCRYPTION_ADMIN:
			case MariaDBParser.CLONE_ADMIN:
			case MariaDBParser.CONNECTION_ADMIN:
			case MariaDBParser.ENCRYPTION_KEY_ADMIN:
			case MariaDBParser.EXECUTE:
			case MariaDBParser.FILE:
			case MariaDBParser.FIREWALL_ADMIN:
			case MariaDBParser.FIREWALL_USER:
			case MariaDBParser.GROUP_REPLICATION_ADMIN:
			case MariaDBParser.INNODB_REDO_LOG_ARCHIVE:
			case MariaDBParser.INVOKE:
			case MariaDBParser.LAMBDA:
			case MariaDBParser.NDB_STORED_USER:
			case MariaDBParser.PASSWORDLESS_USER_ADMIN:
			case MariaDBParser.PERSIST_RO_VARIABLES_ADMIN:
			case MariaDBParser.PRIVILEGES:
			case MariaDBParser.PROCESS:
			case MariaDBParser.RELOAD:
			case MariaDBParser.REPLICATION_APPLIER:
			case MariaDBParser.REPLICATION_SLAVE_ADMIN:
			case MariaDBParser.RESOURCE_GROUP_ADMIN:
			case MariaDBParser.RESOURCE_GROUP_USER:
			case MariaDBParser.ROLE_ADMIN:
			case MariaDBParser.ROUTINE:
			case MariaDBParser.S3:
			case MariaDBParser.SESSION_VARIABLES_ADMIN:
			case MariaDBParser.SET_USER_ID:
			case MariaDBParser.SHOW_ROUTINE:
			case MariaDBParser.SHUTDOWN:
			case MariaDBParser.SUPER:
			case MariaDBParser.SYSTEM_VARIABLES_ADMIN:
			case MariaDBParser.TABLES:
			case MariaDBParser.TABLE_ENCRYPTION_ADMIN:
			case MariaDBParser.VERSION_TOKEN_ADMIN:
			case MariaDBParser.XA_RECOVER_ADMIN:
			case MariaDBParser.ARMSCII8:
			case MariaDBParser.ASCII:
			case MariaDBParser.BIG5:
			case MariaDBParser.CP1250:
			case MariaDBParser.CP1251:
			case MariaDBParser.CP1256:
			case MariaDBParser.CP1257:
			case MariaDBParser.CP850:
			case MariaDBParser.CP852:
			case MariaDBParser.CP866:
			case MariaDBParser.CP932:
			case MariaDBParser.DEC8:
			case MariaDBParser.EUCJPMS:
			case MariaDBParser.EUCKR:
			case MariaDBParser.GB18030:
			case MariaDBParser.GB2312:
			case MariaDBParser.GBK:
			case MariaDBParser.GEOSTD8:
			case MariaDBParser.GREEK:
			case MariaDBParser.HEBREW:
			case MariaDBParser.HP8:
			case MariaDBParser.KEYBCS2:
			case MariaDBParser.KOI8R:
			case MariaDBParser.KOI8U:
			case MariaDBParser.LATIN1:
			case MariaDBParser.LATIN2:
			case MariaDBParser.LATIN5:
			case MariaDBParser.LATIN7:
			case MariaDBParser.MACCE:
			case MariaDBParser.MACROMAN:
			case MariaDBParser.SJIS:
			case MariaDBParser.SWE7:
			case MariaDBParser.TIS620:
			case MariaDBParser.UCS2:
			case MariaDBParser.UJIS:
			case MariaDBParser.UTF16:
			case MariaDBParser.UTF16LE:
			case MariaDBParser.UTF32:
			case MariaDBParser.UTF8:
			case MariaDBParser.UTF8MB3:
			case MariaDBParser.UTF8MB4:
			case MariaDBParser.ARCHIVE:
			case MariaDBParser.BLACKHOLE:
			case MariaDBParser.CSV:
			case MariaDBParser.FEDERATED:
			case MariaDBParser.INNODB:
			case MariaDBParser.MEMORY:
			case MariaDBParser.MRG_MYISAM:
			case MariaDBParser.MYISAM:
			case MariaDBParser.NDB:
			case MariaDBParser.NDBCLUSTER:
			case MariaDBParser.PERFORMANCE_SCHEMA:
			case MariaDBParser.TOKUDB:
			case MariaDBParser.REPEATABLE:
			case MariaDBParser.COMMITTED:
			case MariaDBParser.UNCOMMITTED:
			case MariaDBParser.SERIALIZABLE:
			case MariaDBParser.GEOMETRYCOLLECTION:
			case MariaDBParser.LINESTRING:
			case MariaDBParser.MULTILINESTRING:
			case MariaDBParser.MULTIPOINT:
			case MariaDBParser.MULTIPOLYGON:
			case MariaDBParser.POINT:
			case MariaDBParser.POLYGON:
			case MariaDBParser.ABS:
			case MariaDBParser.ACOS:
			case MariaDBParser.ADDDATE:
			case MariaDBParser.ADDTIME:
			case MariaDBParser.AES_DECRYPT:
			case MariaDBParser.AES_ENCRYPT:
			case MariaDBParser.AREA:
			case MariaDBParser.ASBINARY:
			case MariaDBParser.ASIN:
			case MariaDBParser.ASTEXT:
			case MariaDBParser.ASWKB:
			case MariaDBParser.ASWKT:
			case MariaDBParser.ASYMMETRIC_DECRYPT:
			case MariaDBParser.ASYMMETRIC_DERIVE:
			case MariaDBParser.ASYMMETRIC_ENCRYPT:
			case MariaDBParser.ASYMMETRIC_SIGN:
			case MariaDBParser.ASYMMETRIC_VERIFY:
			case MariaDBParser.ATAN:
			case MariaDBParser.ATAN2:
			case MariaDBParser.BENCHMARK:
			case MariaDBParser.BIN:
			case MariaDBParser.BIT_COUNT:
			case MariaDBParser.BIT_LENGTH:
			case MariaDBParser.BUFFER:
			case MariaDBParser.CATALOG_NAME:
			case MariaDBParser.CEIL:
			case MariaDBParser.CEILING:
			case MariaDBParser.CENTROID:
			case MariaDBParser.CHARACTER_LENGTH:
			case MariaDBParser.CHARSET:
			case MariaDBParser.CHAR_LENGTH:
			case MariaDBParser.COERCIBILITY:
			case MariaDBParser.COLLATION:
			case MariaDBParser.COMPRESS:
			case MariaDBParser.CONCAT:
			case MariaDBParser.CONCAT_WS:
			case MariaDBParser.CONNECTION_ID:
			case MariaDBParser.CONV:
			case MariaDBParser.CONVERT_TZ:
			case MariaDBParser.COS:
			case MariaDBParser.COT:
			case MariaDBParser.CRC32:
			case MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY:
			case MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY:
			case MariaDBParser.CREATE_DH_PARAMETERS:
			case MariaDBParser.CREATE_DIGEST:
			case MariaDBParser.CROSSES:
			case MariaDBParser.DATEDIFF:
			case MariaDBParser.DATE_FORMAT:
			case MariaDBParser.DAYNAME:
			case MariaDBParser.DAYOFMONTH:
			case MariaDBParser.DAYOFWEEK:
			case MariaDBParser.DAYOFYEAR:
			case MariaDBParser.DECODE:
			case MariaDBParser.DEGREES:
			case MariaDBParser.DES_DECRYPT:
			case MariaDBParser.DES_ENCRYPT:
			case MariaDBParser.DIMENSION:
			case MariaDBParser.DISJOINT:
			case MariaDBParser.ELT:
			case MariaDBParser.ENCODE:
			case MariaDBParser.ENCRYPT:
			case MariaDBParser.ENDPOINT:
			case MariaDBParser.ENGINE_ATTRIBUTE:
			case MariaDBParser.ENVELOPE:
			case MariaDBParser.EQUALS:
			case MariaDBParser.EXP:
			case MariaDBParser.EXPORT_SET:
			case MariaDBParser.EXTERIORRING:
			case MariaDBParser.EXTRACTVALUE:
			case MariaDBParser.FIELD:
			case MariaDBParser.FIND_IN_SET:
			case MariaDBParser.FLOOR:
			case MariaDBParser.FORMAT:
			case MariaDBParser.FOUND_ROWS:
			case MariaDBParser.FROM_BASE64:
			case MariaDBParser.FROM_DAYS:
			case MariaDBParser.FROM_UNIXTIME:
			case MariaDBParser.GEOMCOLLFROMTEXT:
			case MariaDBParser.GEOMCOLLFROMWKB:
			case MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT:
			case MariaDBParser.GEOMETRYCOLLECTIONFROMWKB:
			case MariaDBParser.GEOMETRYFROMTEXT:
			case MariaDBParser.GEOMETRYFROMWKB:
			case MariaDBParser.GEOMETRYN:
			case MariaDBParser.GEOMETRYTYPE:
			case MariaDBParser.GEOMFROMTEXT:
			case MariaDBParser.GEOMFROMWKB:
			case MariaDBParser.GET_FORMAT:
			case MariaDBParser.GET_LOCK:
			case MariaDBParser.GLENGTH:
			case MariaDBParser.GREATEST:
			case MariaDBParser.GTID_SUBSET:
			case MariaDBParser.GTID_SUBTRACT:
			case MariaDBParser.HEX:
			case MariaDBParser.IFNULL:
			case MariaDBParser.INET6_ATON:
			case MariaDBParser.INET6_NTOA:
			case MariaDBParser.INET_ATON:
			case MariaDBParser.INET_NTOA:
			case MariaDBParser.INSTR:
			case MariaDBParser.INTERIORRINGN:
			case MariaDBParser.INTERSECTS:
			case MariaDBParser.ISCLOSED:
			case MariaDBParser.ISEMPTY:
			case MariaDBParser.ISNULL:
			case MariaDBParser.ISSIMPLE:
			case MariaDBParser.IS_FREE_LOCK:
			case MariaDBParser.IS_IPV4:
			case MariaDBParser.IS_IPV4_COMPAT:
			case MariaDBParser.IS_IPV4_MAPPED:
			case MariaDBParser.IS_IPV6:
			case MariaDBParser.IS_USED_LOCK:
			case MariaDBParser.LAST_INSERT_ID:
			case MariaDBParser.LCASE:
			case MariaDBParser.LEAST:
			case MariaDBParser.LENGTH:
			case MariaDBParser.LINEFROMTEXT:
			case MariaDBParser.LINEFROMWKB:
			case MariaDBParser.LINESTRINGFROMTEXT:
			case MariaDBParser.LINESTRINGFROMWKB:
			case MariaDBParser.LN:
			case MariaDBParser.LOAD_FILE:
			case MariaDBParser.LOCATE:
			case MariaDBParser.LOG:
			case MariaDBParser.LOG10:
			case MariaDBParser.LOG2:
			case MariaDBParser.LOWER:
			case MariaDBParser.LPAD:
			case MariaDBParser.LTRIM:
			case MariaDBParser.MAKEDATE:
			case MariaDBParser.MAKETIME:
			case MariaDBParser.MAKE_SET:
			case MariaDBParser.MASTER_POS_WAIT:
			case MariaDBParser.MBRCONTAINS:
			case MariaDBParser.MBRDISJOINT:
			case MariaDBParser.MBREQUAL:
			case MariaDBParser.MBRINTERSECTS:
			case MariaDBParser.MBROVERLAPS:
			case MariaDBParser.MBRTOUCHES:
			case MariaDBParser.MBRWITHIN:
			case MariaDBParser.MD5:
			case MariaDBParser.MLINEFROMTEXT:
			case MariaDBParser.MLINEFROMWKB:
			case MariaDBParser.MONTHNAME:
			case MariaDBParser.MPOINTFROMTEXT:
			case MariaDBParser.MPOINTFROMWKB:
			case MariaDBParser.MPOLYFROMTEXT:
			case MariaDBParser.MPOLYFROMWKB:
			case MariaDBParser.MULTILINESTRINGFROMTEXT:
			case MariaDBParser.MULTILINESTRINGFROMWKB:
			case MariaDBParser.MULTIPOINTFROMTEXT:
			case MariaDBParser.MULTIPOINTFROMWKB:
			case MariaDBParser.MULTIPOLYGONFROMTEXT:
			case MariaDBParser.MULTIPOLYGONFROMWKB:
			case MariaDBParser.NAME_CONST:
			case MariaDBParser.NULLIF:
			case MariaDBParser.NUMGEOMETRIES:
			case MariaDBParser.NUMINTERIORRINGS:
			case MariaDBParser.NUMPOINTS:
			case MariaDBParser.OCT:
			case MariaDBParser.OCTET_LENGTH:
			case MariaDBParser.ORD:
			case MariaDBParser.OVERLAPS:
			case MariaDBParser.PERIOD_ADD:
			case MariaDBParser.PERIOD_DIFF:
			case MariaDBParser.PI:
			case MariaDBParser.POINTFROMTEXT:
			case MariaDBParser.POINTFROMWKB:
			case MariaDBParser.POINTN:
			case MariaDBParser.POLYFROMTEXT:
			case MariaDBParser.POLYFROMWKB:
			case MariaDBParser.POLYGONFROMTEXT:
			case MariaDBParser.POLYGONFROMWKB:
			case MariaDBParser.POW:
			case MariaDBParser.POWER:
			case MariaDBParser.QUOTE:
			case MariaDBParser.RADIANS:
			case MariaDBParser.RAND:
			case MariaDBParser.RANDOM_BYTES:
			case MariaDBParser.RELEASE_LOCK:
			case MariaDBParser.REVERSE:
			case MariaDBParser.ROUND:
			case MariaDBParser.ROW_COUNT:
			case MariaDBParser.RPAD:
			case MariaDBParser.RTRIM:
			case MariaDBParser.SEC_TO_TIME:
			case MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE:
			case MariaDBParser.SESSION_USER:
			case MariaDBParser.SHA:
			case MariaDBParser.SHA1:
			case MariaDBParser.SHA2:
			case MariaDBParser.SCHEMA_NAME:
			case MariaDBParser.SIGN:
			case MariaDBParser.SIN:
			case MariaDBParser.SLEEP:
			case MariaDBParser.SOUNDEX:
			case MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS:
			case MariaDBParser.SQRT:
			case MariaDBParser.SRID:
			case MariaDBParser.STARTPOINT:
			case MariaDBParser.STRCMP:
			case MariaDBParser.STR_TO_DATE:
			case MariaDBParser.ST_AREA:
			case MariaDBParser.ST_ASBINARY:
			case MariaDBParser.ST_ASTEXT:
			case MariaDBParser.ST_ASWKB:
			case MariaDBParser.ST_ASWKT:
			case MariaDBParser.ST_BUFFER:
			case MariaDBParser.ST_CENTROID:
			case MariaDBParser.ST_CONTAINS:
			case MariaDBParser.ST_CROSSES:
			case MariaDBParser.ST_DIFFERENCE:
			case MariaDBParser.ST_DIMENSION:
			case MariaDBParser.ST_DISJOINT:
			case MariaDBParser.ST_DISTANCE:
			case MariaDBParser.ST_ENDPOINT:
			case MariaDBParser.ST_ENVELOPE:
			case MariaDBParser.ST_EQUALS:
			case MariaDBParser.ST_EXTERIORRING:
			case MariaDBParser.ST_GEOMCOLLFROMTEXT:
			case MariaDBParser.ST_GEOMCOLLFROMTXT:
			case MariaDBParser.ST_GEOMCOLLFROMWKB:
			case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
			case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB:
			case MariaDBParser.ST_GEOMETRYFROMTEXT:
			case MariaDBParser.ST_GEOMETRYFROMWKB:
			case MariaDBParser.ST_GEOMETRYN:
			case MariaDBParser.ST_GEOMETRYTYPE:
			case MariaDBParser.ST_GEOMFROMTEXT:
			case MariaDBParser.ST_GEOMFROMWKB:
			case MariaDBParser.ST_INTERIORRINGN:
			case MariaDBParser.ST_INTERSECTION:
			case MariaDBParser.ST_INTERSECTS:
			case MariaDBParser.ST_ISCLOSED:
			case MariaDBParser.ST_ISEMPTY:
			case MariaDBParser.ST_ISSIMPLE:
			case MariaDBParser.ST_LINEFROMTEXT:
			case MariaDBParser.ST_LINEFROMWKB:
			case MariaDBParser.ST_LINESTRINGFROMTEXT:
			case MariaDBParser.ST_LINESTRINGFROMWKB:
			case MariaDBParser.ST_NUMGEOMETRIES:
			case MariaDBParser.ST_NUMINTERIORRING:
			case MariaDBParser.ST_NUMINTERIORRINGS:
			case MariaDBParser.ST_NUMPOINTS:
			case MariaDBParser.ST_OVERLAPS:
			case MariaDBParser.ST_POINTFROMTEXT:
			case MariaDBParser.ST_POINTFROMWKB:
			case MariaDBParser.ST_POINTN:
			case MariaDBParser.ST_POLYFROMTEXT:
			case MariaDBParser.ST_POLYFROMWKB:
			case MariaDBParser.ST_POLYGONFROMTEXT:
			case MariaDBParser.ST_POLYGONFROMWKB:
			case MariaDBParser.ST_SRID:
			case MariaDBParser.ST_STARTPOINT:
			case MariaDBParser.ST_SYMDIFFERENCE:
			case MariaDBParser.ST_TOUCHES:
			case MariaDBParser.ST_UNION:
			case MariaDBParser.ST_WITHIN:
			case MariaDBParser.ST_X:
			case MariaDBParser.ST_Y:
			case MariaDBParser.SUBDATE:
			case MariaDBParser.SUBSTRING_INDEX:
			case MariaDBParser.SUBTIME:
			case MariaDBParser.SYSTEM_USER:
			case MariaDBParser.TAN:
			case MariaDBParser.TIMEDIFF:
			case MariaDBParser.TIMESTAMPADD:
			case MariaDBParser.TIMESTAMPDIFF:
			case MariaDBParser.TIME_FORMAT:
			case MariaDBParser.TIME_TO_SEC:
			case MariaDBParser.TOUCHES:
			case MariaDBParser.TO_BASE64:
			case MariaDBParser.TO_DAYS:
			case MariaDBParser.TO_SECONDS:
			case MariaDBParser.UCASE:
			case MariaDBParser.UNCOMPRESS:
			case MariaDBParser.UNCOMPRESSED_LENGTH:
			case MariaDBParser.UNHEX:
			case MariaDBParser.UNIX_TIMESTAMP:
			case MariaDBParser.UPDATEXML:
			case MariaDBParser.UPPER:
			case MariaDBParser.UUID:
			case MariaDBParser.UUID_SHORT:
			case MariaDBParser.VALIDATE_PASSWORD_STRENGTH:
			case MariaDBParser.VERSION:
			case MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case MariaDBParser.WEEKDAY:
			case MariaDBParser.WEEKOFYEAR:
			case MariaDBParser.WEIGHT_STRING:
			case MariaDBParser.WITHIN:
			case MariaDBParser.YEARWEEK:
			case MariaDBParser.Y_FUNCTION:
			case MariaDBParser.X_FUNCTION:
			case MariaDBParser.VIA:
			case MariaDBParser.LASTVAL:
			case MariaDBParser.NEXTVAL:
			case MariaDBParser.SETVAL:
			case MariaDBParser.PREVIOUS:
			case MariaDBParser.PERSISTENT:
			case MariaDBParser.BINLOG_MONITOR:
			case MariaDBParser.BINLOG_REPLAY:
			case MariaDBParser.FEDERATED_ADMIN:
			case MariaDBParser.READ_ONLY_ADMIN:
			case MariaDBParser.REPLICA:
			case MariaDBParser.REPLICAS:
			case MariaDBParser.REPLICATION_MASTER_ADMIN:
			case MariaDBParser.MONITOR:
			case MariaDBParser.READ_ONLY:
			case MariaDBParser.REPLAY:
			case MariaDBParser.MOD:
			case MariaDBParser.AT_SIGN:
			case MariaDBParser.CHARSET_REVERSE_QOUTE_STRING:
			case MariaDBParser.STRING_LITERAL:
			case MariaDBParser.ID:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6072;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 896, this._ctx) ) {
				case 1:
					{
					this.state = 6069;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MariaDBParser.AT_SIGN) {
						{
						this.state = 6067;
						this.match(MariaDBParser.AT_SIGN);
						this.state = 6068;
						this.match(MariaDBParser.AT_SIGN);
						}
					}

					this.state = 6071;
					_la = this._input.LA(1);
					if (!(_la === MariaDBParser.GLOBAL || _la === MariaDBParser.LOCAL || _la === MariaDBParser.SESSION)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 6074;
				this.uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showCommonEntity(): ShowCommonEntityContext {
		let _localctx: ShowCommonEntityContext = new ShowCommonEntityContext(this._ctx, this.state);
		this.enterRule(_localctx, 502, MariaDBParser.RULE_showCommonEntity);
		let _la: number;
		try {
			this.state = 6090;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.CHARACTER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6077;
				this.match(MariaDBParser.CHARACTER);
				this.state = 6078;
				this.match(MariaDBParser.SET);
				}
				break;
			case MariaDBParser.COLLATION:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6079;
				this.match(MariaDBParser.COLLATION);
				}
				break;
			case MariaDBParser.DATABASES:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6080;
				this.match(MariaDBParser.DATABASES);
				}
				break;
			case MariaDBParser.SCHEMAS:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6081;
				this.match(MariaDBParser.SCHEMAS);
				}
				break;
			case MariaDBParser.FUNCTION:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6082;
				this.match(MariaDBParser.FUNCTION);
				this.state = 6083;
				this.match(MariaDBParser.STATUS);
				}
				break;
			case MariaDBParser.PROCEDURE:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 6084;
				this.match(MariaDBParser.PROCEDURE);
				this.state = 6085;
				this.match(MariaDBParser.STATUS);
				}
				break;
			case MariaDBParser.GLOBAL:
			case MariaDBParser.SESSION:
			case MariaDBParser.STATUS:
			case MariaDBParser.VARIABLES:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 6087;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.GLOBAL || _la === MariaDBParser.SESSION) {
					{
					this.state = 6086;
					_la = this._input.LA(1);
					if (!(_la === MariaDBParser.GLOBAL || _la === MariaDBParser.SESSION)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 6089;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.STATUS || _la === MariaDBParser.VARIABLES)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showFilter(): ShowFilterContext {
		let _localctx: ShowFilterContext = new ShowFilterContext(this._ctx, this.state);
		this.enterRule(_localctx, 504, MariaDBParser.RULE_showFilter);
		try {
			this.state = 6096;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.LIKE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6092;
				this.match(MariaDBParser.LIKE);
				this.state = 6093;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			case MariaDBParser.WHERE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6094;
				this.match(MariaDBParser.WHERE);
				this.state = 6095;
				this.expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showGlobalInfoClause(): ShowGlobalInfoClauseContext {
		let _localctx: ShowGlobalInfoClauseContext = new ShowGlobalInfoClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 506, MariaDBParser.RULE_showGlobalInfoClause);
		let _la: number;
		try {
			this.state = 6131;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.ENGINES:
			case MariaDBParser.STORAGE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6099;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.STORAGE) {
					{
					this.state = 6098;
					this.match(MariaDBParser.STORAGE);
					}
				}

				this.state = 6101;
				this.match(MariaDBParser.ENGINES);
				}
				break;
			case MariaDBParser.BINLOG:
			case MariaDBParser.MASTER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6102;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.BINLOG || _la === MariaDBParser.MASTER)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6103;
				this.match(MariaDBParser.STATUS);
				}
				break;
			case MariaDBParser.PLUGINS:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6104;
				this.match(MariaDBParser.PLUGINS);
				this.state = 6110;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.SONAME) {
					{
					this.state = 6105;
					this.match(MariaDBParser.SONAME);
					this.state = 6108;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case MariaDBParser.STRING_LITERAL:
						{
						this.state = 6106;
						this.match(MariaDBParser.STRING_LITERAL);
						}
						break;
					case MariaDBParser.LIKE:
					case MariaDBParser.WHERE:
						{
						this.state = 6107;
						this.showFilter();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			case MariaDBParser.PRIVILEGES:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6112;
				this.match(MariaDBParser.PRIVILEGES);
				}
				break;
			case MariaDBParser.FULL:
			case MariaDBParser.PROCESSLIST:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6114;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.FULL) {
					{
					this.state = 6113;
					this.match(MariaDBParser.FULL);
					}
				}

				this.state = 6116;
				this.match(MariaDBParser.PROCESSLIST);
				}
				break;
			case MariaDBParser.PROFILES:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 6117;
				this.match(MariaDBParser.PROFILES);
				}
				break;
			case MariaDBParser.LOCALES:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 6118;
				this.match(MariaDBParser.LOCALES);
				}
				break;
			case MariaDBParser.SLAVE:
			case MariaDBParser.REPLICA:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 6119;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.SLAVE || _la === MariaDBParser.REPLICA)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6120;
				this.match(MariaDBParser.HOSTS);
				}
				break;
			case MariaDBParser.AUTHORS:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 6121;
				this.match(MariaDBParser.AUTHORS);
				}
				break;
			case MariaDBParser.CONTRIBUTORS:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 6122;
				this.match(MariaDBParser.CONTRIBUTORS);
				}
				break;
			case MariaDBParser.QUERY_RESPONSE_TIME:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 6123;
				this.match(MariaDBParser.QUERY_RESPONSE_TIME);
				}
				break;
			case MariaDBParser.ALL:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 6124;
				this.match(MariaDBParser.ALL);
				this.state = 6125;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.SLAVES || _la === MariaDBParser.REPLICAS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6126;
				this.match(MariaDBParser.STATUS);
				}
				break;
			case MariaDBParser.WSREP_MEMBERSHIP:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 6127;
				this.match(MariaDBParser.WSREP_MEMBERSHIP);
				}
				break;
			case MariaDBParser.WSREP_STATUS:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 6128;
				this.match(MariaDBParser.WSREP_STATUS);
				}
				break;
			case MariaDBParser.TABLE:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 6129;
				this.match(MariaDBParser.TABLE);
				this.state = 6130;
				this.match(MariaDBParser.TYPES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showSchemaEntity(): ShowSchemaEntityContext {
		let _localctx: ShowSchemaEntityContext = new ShowSchemaEntityContext(this._ctx, this.state);
		this.enterRule(_localctx, 508, MariaDBParser.RULE_showSchemaEntity);
		let _la: number;
		try {
			this.state = 6141;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.EVENTS:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6133;
				this.match(MariaDBParser.EVENTS);
				}
				break;
			case MariaDBParser.TABLE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6134;
				this.match(MariaDBParser.TABLE);
				this.state = 6135;
				this.match(MariaDBParser.STATUS);
				}
				break;
			case MariaDBParser.FULL:
			case MariaDBParser.TABLES:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6137;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.FULL) {
					{
					this.state = 6136;
					this.match(MariaDBParser.FULL);
					}
				}

				this.state = 6139;
				this.match(MariaDBParser.TABLES);
				}
				break;
			case MariaDBParser.TRIGGERS:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6140;
				this.match(MariaDBParser.TRIGGERS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showProfileType(): ShowProfileTypeContext {
		let _localctx: ShowProfileTypeContext = new ShowProfileTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 510, MariaDBParser.RULE_showProfileType);
		try {
			this.state = 6155;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.ALL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6143;
				this.match(MariaDBParser.ALL);
				}
				break;
			case MariaDBParser.BLOCK:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6144;
				this.match(MariaDBParser.BLOCK);
				this.state = 6145;
				this.match(MariaDBParser.IO);
				}
				break;
			case MariaDBParser.CONTEXT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6146;
				this.match(MariaDBParser.CONTEXT);
				this.state = 6147;
				this.match(MariaDBParser.SWITCHES);
				}
				break;
			case MariaDBParser.CPU:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6148;
				this.match(MariaDBParser.CPU);
				}
				break;
			case MariaDBParser.IPC:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6149;
				this.match(MariaDBParser.IPC);
				}
				break;
			case MariaDBParser.MEMORY:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 6150;
				this.match(MariaDBParser.MEMORY);
				}
				break;
			case MariaDBParser.PAGE:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 6151;
				this.match(MariaDBParser.PAGE);
				this.state = 6152;
				this.match(MariaDBParser.FAULTS);
				}
				break;
			case MariaDBParser.SOURCE:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 6153;
				this.match(MariaDBParser.SOURCE);
				}
				break;
			case MariaDBParser.SWAPS:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 6154;
				this.match(MariaDBParser.SWAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public binlogStatement(): BinlogStatementContext {
		let _localctx: BinlogStatementContext = new BinlogStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 512, MariaDBParser.RULE_binlogStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6157;
			this.match(MariaDBParser.BINLOG);
			this.state = 6158;
			this.match(MariaDBParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cacheIndexStatement(): CacheIndexStatementContext {
		let _localctx: CacheIndexStatementContext = new CacheIndexStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 514, MariaDBParser.RULE_cacheIndexStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6160;
			this.match(MariaDBParser.CACHE);
			this.state = 6161;
			this.match(MariaDBParser.INDEX);
			this.state = 6162;
			this.tableIndexes();
			this.state = 6167;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.COMMA) {
				{
				{
				this.state = 6163;
				this.match(MariaDBParser.COMMA);
				this.state = 6164;
				this.tableIndexes();
				}
				}
				this.state = 6169;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6177;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.PARTITION) {
				{
				this.state = 6170;
				this.match(MariaDBParser.PARTITION);
				this.state = 6171;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 6174;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.ATTRIBUTE:
				case MariaDBParser.BODY:
				case MariaDBParser.BUCKETS:
				case MariaDBParser.CONDITION:
				case MariaDBParser.CURRENT:
				case MariaDBParser.CURRENT_ROLE:
				case MariaDBParser.CURRENT_USER:
				case MariaDBParser.DATABASE:
				case MariaDBParser.DEFAULT:
				case MariaDBParser.DIAGNOSTICS:
				case MariaDBParser.EMPTY:
				case MariaDBParser.EXCEPT:
				case MariaDBParser.GROUP:
				case MariaDBParser.IF:
				case MariaDBParser.IGNORED:
				case MariaDBParser.INSERT:
				case MariaDBParser.LATERAL:
				case MariaDBParser.LEFT:
				case MariaDBParser.LOCKED:
				case MariaDBParser.MAXVALUE:
				case MariaDBParser.MINVALUE:
				case MariaDBParser.NUMBER:
				case MariaDBParser.OPTIONAL:
				case MariaDBParser.ORDER:
				case MariaDBParser.PRIMARY:
				case MariaDBParser.PACKAGE:
				case MariaDBParser.REPLACE:
				case MariaDBParser.RIGHT:
				case MariaDBParser.SCHEMA:
				case MariaDBParser.SKIP_:
				case MariaDBParser.STACKED:
				case MariaDBParser.STATEMENT:
				case MariaDBParser.DATE:
				case MariaDBParser.TIME:
				case MariaDBParser.TIMESTAMP:
				case MariaDBParser.DATETIME:
				case MariaDBParser.YEAR:
				case MariaDBParser.BINARY:
				case MariaDBParser.TEXT:
				case MariaDBParser.ENUM:
				case MariaDBParser.SERIAL:
				case MariaDBParser.JSON_ARRAY:
				case MariaDBParser.JSON_ARRAYAGG:
				case MariaDBParser.JSON_ARRAY_APPEND:
				case MariaDBParser.JSON_ARRAY_INSERT:
				case MariaDBParser.JSON_CONTAINS:
				case MariaDBParser.JSON_CONTAINS_PATH:
				case MariaDBParser.JSON_DEPTH:
				case MariaDBParser.JSON_EXTRACT:
				case MariaDBParser.JSON_INSERT:
				case MariaDBParser.JSON_KEYS:
				case MariaDBParser.JSON_LENGTH:
				case MariaDBParser.JSON_MERGE:
				case MariaDBParser.JSON_MERGE_PATCH:
				case MariaDBParser.JSON_MERGE_PRESERVE:
				case MariaDBParser.JSON_OBJECT:
				case MariaDBParser.JSON_OBJECTAGG:
				case MariaDBParser.JSON_OVERLAPS:
				case MariaDBParser.JSON_PRETTY:
				case MariaDBParser.JSON_QUOTE:
				case MariaDBParser.JSON_REMOVE:
				case MariaDBParser.JSON_REPLACE:
				case MariaDBParser.JSON_SCHEMA_VALID:
				case MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT:
				case MariaDBParser.JSON_SEARCH:
				case MariaDBParser.JSON_SET:
				case MariaDBParser.JSON_STORAGE_FREE:
				case MariaDBParser.JSON_STORAGE_SIZE:
				case MariaDBParser.JSON_TABLE:
				case MariaDBParser.JSON_TYPE:
				case MariaDBParser.JSON_UNQUOTE:
				case MariaDBParser.JSON_VALID:
				case MariaDBParser.JSON_VALUE:
				case MariaDBParser.NESTED:
				case MariaDBParser.ORDINALITY:
				case MariaDBParser.PATH:
				case MariaDBParser.AVG:
				case MariaDBParser.BIT_AND:
				case MariaDBParser.BIT_OR:
				case MariaDBParser.BIT_XOR:
				case MariaDBParser.COUNT:
				case MariaDBParser.CUME_DIST:
				case MariaDBParser.DENSE_RANK:
				case MariaDBParser.FIRST_VALUE:
				case MariaDBParser.GROUP_CONCAT:
				case MariaDBParser.LAG:
				case MariaDBParser.LAST_VALUE:
				case MariaDBParser.LEAD:
				case MariaDBParser.MAX:
				case MariaDBParser.MIN:
				case MariaDBParser.NTILE:
				case MariaDBParser.NTH_VALUE:
				case MariaDBParser.PERCENT_RANK:
				case MariaDBParser.RANK:
				case MariaDBParser.ROW_NUMBER:
				case MariaDBParser.STD:
				case MariaDBParser.STDDEV:
				case MariaDBParser.STDDEV_POP:
				case MariaDBParser.STDDEV_SAMP:
				case MariaDBParser.SUM:
				case MariaDBParser.VAR_POP:
				case MariaDBParser.VAR_SAMP:
				case MariaDBParser.VARIANCE:
				case MariaDBParser.CURRENT_DATE:
				case MariaDBParser.CURRENT_TIME:
				case MariaDBParser.CURRENT_TIMESTAMP:
				case MariaDBParser.LOCALTIME:
				case MariaDBParser.CURDATE:
				case MariaDBParser.CURTIME:
				case MariaDBParser.DATE_ADD:
				case MariaDBParser.DATE_SUB:
				case MariaDBParser.LOCALTIMESTAMP:
				case MariaDBParser.NOW:
				case MariaDBParser.POSITION:
				case MariaDBParser.SUBSTR:
				case MariaDBParser.SUBSTRING:
				case MariaDBParser.SYSDATE:
				case MariaDBParser.TRIM:
				case MariaDBParser.UTC_DATE:
				case MariaDBParser.UTC_TIME:
				case MariaDBParser.UTC_TIMESTAMP:
				case MariaDBParser.ACCOUNT:
				case MariaDBParser.ACTION:
				case MariaDBParser.AFTER:
				case MariaDBParser.AGGREGATE:
				case MariaDBParser.ALGORITHM:
				case MariaDBParser.ANY:
				case MariaDBParser.AT:
				case MariaDBParser.AUTHORS:
				case MariaDBParser.AUTOCOMMIT:
				case MariaDBParser.AUTOEXTEND_SIZE:
				case MariaDBParser.AUTO_INCREMENT:
				case MariaDBParser.AVG_ROW_LENGTH:
				case MariaDBParser.BEGIN:
				case MariaDBParser.BINLOG:
				case MariaDBParser.BIT:
				case MariaDBParser.BLOCK:
				case MariaDBParser.BOOL:
				case MariaDBParser.BOOLEAN:
				case MariaDBParser.BTREE:
				case MariaDBParser.CACHE:
				case MariaDBParser.CASCADED:
				case MariaDBParser.CHAIN:
				case MariaDBParser.CHANGED:
				case MariaDBParser.CHANNEL:
				case MariaDBParser.CHECKSUM:
				case MariaDBParser.PAGE_CHECKSUM:
				case MariaDBParser.CIPHER:
				case MariaDBParser.CLASS_ORIGIN:
				case MariaDBParser.CLIENT:
				case MariaDBParser.CLOSE:
				case MariaDBParser.CLUSTERING:
				case MariaDBParser.COALESCE:
				case MariaDBParser.CODE:
				case MariaDBParser.COLUMNS:
				case MariaDBParser.COLUMN_FORMAT:
				case MariaDBParser.COLUMN_NAME:
				case MariaDBParser.COMMENT:
				case MariaDBParser.COMMIT:
				case MariaDBParser.COMPACT:
				case MariaDBParser.COMPLETION:
				case MariaDBParser.COMPRESSED:
				case MariaDBParser.COMPRESSION:
				case MariaDBParser.CONCURRENT:
				case MariaDBParser.CONNECT:
				case MariaDBParser.CONNECTION:
				case MariaDBParser.CONSISTENT:
				case MariaDBParser.CONSTRAINT_CATALOG:
				case MariaDBParser.CONSTRAINT_SCHEMA:
				case MariaDBParser.CONSTRAINT_NAME:
				case MariaDBParser.CONTAINS:
				case MariaDBParser.CONTEXT:
				case MariaDBParser.CONTRIBUTORS:
				case MariaDBParser.COPY:
				case MariaDBParser.CPU:
				case MariaDBParser.CYCLE:
				case MariaDBParser.CURSOR_NAME:
				case MariaDBParser.DATA:
				case MariaDBParser.DATAFILE:
				case MariaDBParser.DEALLOCATE:
				case MariaDBParser.DEFAULT_AUTH:
				case MariaDBParser.DEFINER:
				case MariaDBParser.DELAY_KEY_WRITE:
				case MariaDBParser.DES_KEY_FILE:
				case MariaDBParser.DIRECTORY:
				case MariaDBParser.DISABLE:
				case MariaDBParser.DISCARD:
				case MariaDBParser.DISK:
				case MariaDBParser.DO:
				case MariaDBParser.DUMPFILE:
				case MariaDBParser.DUPLICATE:
				case MariaDBParser.DYNAMIC:
				case MariaDBParser.ENABLE:
				case MariaDBParser.ENCRYPTED:
				case MariaDBParser.ENCRYPTION:
				case MariaDBParser.ENCRYPTION_KEY_ID:
				case MariaDBParser.END:
				case MariaDBParser.ENDS:
				case MariaDBParser.ENGINE:
				case MariaDBParser.ENGINES:
				case MariaDBParser.ERROR:
				case MariaDBParser.ERRORS:
				case MariaDBParser.ESCAPE:
				case MariaDBParser.EVEN:
				case MariaDBParser.EVENT:
				case MariaDBParser.EVENTS:
				case MariaDBParser.EVERY:
				case MariaDBParser.EXCHANGE:
				case MariaDBParser.EXCLUSIVE:
				case MariaDBParser.EXPIRE:
				case MariaDBParser.EXPORT:
				case MariaDBParser.EXTENDED:
				case MariaDBParser.EXTENT_SIZE:
				case MariaDBParser.FAILED_LOGIN_ATTEMPTS:
				case MariaDBParser.FAST:
				case MariaDBParser.FAULTS:
				case MariaDBParser.FIELDS:
				case MariaDBParser.FILE_BLOCK_SIZE:
				case MariaDBParser.FILTER:
				case MariaDBParser.FIRST:
				case MariaDBParser.FIXED:
				case MariaDBParser.FLUSH:
				case MariaDBParser.FOLLOWS:
				case MariaDBParser.FOUND:
				case MariaDBParser.FULL:
				case MariaDBParser.FUNCTION:
				case MariaDBParser.GENERAL:
				case MariaDBParser.GLOBAL:
				case MariaDBParser.GRANTS:
				case MariaDBParser.GROUP_REPLICATION:
				case MariaDBParser.HANDLER:
				case MariaDBParser.HASH:
				case MariaDBParser.HELP:
				case MariaDBParser.HISTORY:
				case MariaDBParser.HOST:
				case MariaDBParser.HOSTS:
				case MariaDBParser.IDENTIFIED:
				case MariaDBParser.IGNORE_SERVER_IDS:
				case MariaDBParser.IMPORT:
				case MariaDBParser.INCREMENT:
				case MariaDBParser.INDEXES:
				case MariaDBParser.INITIAL_SIZE:
				case MariaDBParser.INPLACE:
				case MariaDBParser.INSERT_METHOD:
				case MariaDBParser.INSTALL:
				case MariaDBParser.INSTANCE:
				case MariaDBParser.INSTANT:
				case MariaDBParser.INVISIBLE:
				case MariaDBParser.INVOKER:
				case MariaDBParser.IO:
				case MariaDBParser.IO_THREAD:
				case MariaDBParser.IPC:
				case MariaDBParser.ISOLATION:
				case MariaDBParser.ISSUER:
				case MariaDBParser.JSON:
				case MariaDBParser.KEY_BLOCK_SIZE:
				case MariaDBParser.LANGUAGE:
				case MariaDBParser.LAST:
				case MariaDBParser.LEAVES:
				case MariaDBParser.LESS:
				case MariaDBParser.LEVEL:
				case MariaDBParser.LIST:
				case MariaDBParser.LOCAL:
				case MariaDBParser.LOCALES:
				case MariaDBParser.LOGFILE:
				case MariaDBParser.LOGS:
				case MariaDBParser.MASTER:
				case MariaDBParser.MASTER_AUTO_POSITION:
				case MariaDBParser.MASTER_CONNECT_RETRY:
				case MariaDBParser.MASTER_DELAY:
				case MariaDBParser.MASTER_HEARTBEAT_PERIOD:
				case MariaDBParser.MASTER_HOST:
				case MariaDBParser.MASTER_LOG_FILE:
				case MariaDBParser.MASTER_LOG_POS:
				case MariaDBParser.MASTER_PASSWORD:
				case MariaDBParser.MASTER_PORT:
				case MariaDBParser.MASTER_RETRY_COUNT:
				case MariaDBParser.MASTER_SSL:
				case MariaDBParser.MASTER_SSL_CA:
				case MariaDBParser.MASTER_SSL_CAPATH:
				case MariaDBParser.MASTER_SSL_CERT:
				case MariaDBParser.MASTER_SSL_CIPHER:
				case MariaDBParser.MASTER_SSL_CRL:
				case MariaDBParser.MASTER_SSL_CRLPATH:
				case MariaDBParser.MASTER_SSL_KEY:
				case MariaDBParser.MASTER_TLS_VERSION:
				case MariaDBParser.MASTER_USER:
				case MariaDBParser.MAX_CONNECTIONS_PER_HOUR:
				case MariaDBParser.MAX_QUERIES_PER_HOUR:
				case MariaDBParser.MAX_ROWS:
				case MariaDBParser.MAX_SIZE:
				case MariaDBParser.MAX_UPDATES_PER_HOUR:
				case MariaDBParser.MAX_USER_CONNECTIONS:
				case MariaDBParser.MEDIUM:
				case MariaDBParser.MEMBER:
				case MariaDBParser.MERGE:
				case MariaDBParser.MESSAGE_TEXT:
				case MariaDBParser.MID:
				case MariaDBParser.MIGRATE:
				case MariaDBParser.MIN_ROWS:
				case MariaDBParser.MODE:
				case MariaDBParser.MODIFY:
				case MariaDBParser.MUTEX:
				case MariaDBParser.MYSQL:
				case MariaDBParser.MYSQL_ERRNO:
				case MariaDBParser.NAME:
				case MariaDBParser.NAMES:
				case MariaDBParser.NCHAR:
				case MariaDBParser.NEVER:
				case MariaDBParser.NEXT:
				case MariaDBParser.NO:
				case MariaDBParser.NOCACHE:
				case MariaDBParser.NOCOPY:
				case MariaDBParser.NOCYCLE:
				case MariaDBParser.NOMAXVALUE:
				case MariaDBParser.NOMINVALUE:
				case MariaDBParser.NOWAIT:
				case MariaDBParser.NODEGROUP:
				case MariaDBParser.NONE:
				case MariaDBParser.ODBC:
				case MariaDBParser.OFFLINE:
				case MariaDBParser.OFFSET:
				case MariaDBParser.OF:
				case MariaDBParser.OJ:
				case MariaDBParser.OLD_PASSWORD:
				case MariaDBParser.ONE:
				case MariaDBParser.ONLINE:
				case MariaDBParser.ONLY:
				case MariaDBParser.OPEN:
				case MariaDBParser.OPTIMIZER_COSTS:
				case MariaDBParser.OPTIONS:
				case MariaDBParser.OWNER:
				case MariaDBParser.PACK_KEYS:
				case MariaDBParser.PAGE:
				case MariaDBParser.PARSER:
				case MariaDBParser.PARTIAL:
				case MariaDBParser.PARTITIONING:
				case MariaDBParser.PARTITIONS:
				case MariaDBParser.PASSWORD:
				case MariaDBParser.PASSWORD_LOCK_TIME:
				case MariaDBParser.PHASE:
				case MariaDBParser.PLUGIN:
				case MariaDBParser.PLUGIN_DIR:
				case MariaDBParser.PLUGINS:
				case MariaDBParser.PORT:
				case MariaDBParser.PRECEDES:
				case MariaDBParser.PREPARE:
				case MariaDBParser.PRESERVE:
				case MariaDBParser.PREV:
				case MariaDBParser.PROCESSLIST:
				case MariaDBParser.PROFILE:
				case MariaDBParser.PROFILES:
				case MariaDBParser.PROXY:
				case MariaDBParser.QUERY:
				case MariaDBParser.QUERY_RESPONSE_TIME:
				case MariaDBParser.QUICK:
				case MariaDBParser.REBUILD:
				case MariaDBParser.RECOVER:
				case MariaDBParser.RECURSIVE:
				case MariaDBParser.REDO_BUFFER_SIZE:
				case MariaDBParser.REDUNDANT:
				case MariaDBParser.RELAY:
				case MariaDBParser.RELAY_LOG_FILE:
				case MariaDBParser.RELAY_LOG_POS:
				case MariaDBParser.RELAYLOG:
				case MariaDBParser.REMOVE:
				case MariaDBParser.REORGANIZE:
				case MariaDBParser.REPAIR:
				case MariaDBParser.REPLICATE_DO_DB:
				case MariaDBParser.REPLICATE_DO_TABLE:
				case MariaDBParser.REPLICATE_IGNORE_DB:
				case MariaDBParser.REPLICATE_IGNORE_TABLE:
				case MariaDBParser.REPLICATE_REWRITE_DB:
				case MariaDBParser.REPLICATE_WILD_DO_TABLE:
				case MariaDBParser.REPLICATE_WILD_IGNORE_TABLE:
				case MariaDBParser.REPLICATION:
				case MariaDBParser.RESET:
				case MariaDBParser.RESTART:
				case MariaDBParser.RESUME:
				case MariaDBParser.RETURNED_SQLSTATE:
				case MariaDBParser.RETURNS:
				case MariaDBParser.REUSE:
				case MariaDBParser.ROLE:
				case MariaDBParser.ROLLBACK:
				case MariaDBParser.ROLLUP:
				case MariaDBParser.ROTATE:
				case MariaDBParser.ROW:
				case MariaDBParser.ROWS:
				case MariaDBParser.ROW_FORMAT:
				case MariaDBParser.RTREE:
				case MariaDBParser.SAVEPOINT:
				case MariaDBParser.SCHEDULE:
				case MariaDBParser.SECURITY:
				case MariaDBParser.SEQUENCE:
				case MariaDBParser.SERVER:
				case MariaDBParser.SESSION:
				case MariaDBParser.SHARE:
				case MariaDBParser.SHARED:
				case MariaDBParser.SIGNED:
				case MariaDBParser.SIMPLE:
				case MariaDBParser.SLAVE:
				case MariaDBParser.SLAVES:
				case MariaDBParser.SLOW:
				case MariaDBParser.SNAPSHOT:
				case MariaDBParser.SOCKET:
				case MariaDBParser.SOME:
				case MariaDBParser.SONAME:
				case MariaDBParser.SOUNDS:
				case MariaDBParser.SOURCE:
				case MariaDBParser.SQL_AFTER_GTIDS:
				case MariaDBParser.SQL_AFTER_MTS_GAPS:
				case MariaDBParser.SQL_BEFORE_GTIDS:
				case MariaDBParser.SQL_BUFFER_RESULT:
				case MariaDBParser.SQL_CACHE:
				case MariaDBParser.SQL_NO_CACHE:
				case MariaDBParser.SQL_THREAD:
				case MariaDBParser.START:
				case MariaDBParser.STARTS:
				case MariaDBParser.STATS_AUTO_RECALC:
				case MariaDBParser.STATS_PERSISTENT:
				case MariaDBParser.STATS_SAMPLE_PAGES:
				case MariaDBParser.STATUS:
				case MariaDBParser.STOP:
				case MariaDBParser.STORAGE:
				case MariaDBParser.STRING:
				case MariaDBParser.SUBCLASS_ORIGIN:
				case MariaDBParser.SUBJECT:
				case MariaDBParser.SUBPARTITION:
				case MariaDBParser.SUBPARTITIONS:
				case MariaDBParser.SUSPEND:
				case MariaDBParser.SWAPS:
				case MariaDBParser.SWITCHES:
				case MariaDBParser.TABLE_NAME:
				case MariaDBParser.TABLESPACE:
				case MariaDBParser.TABLE_TYPE:
				case MariaDBParser.TEMPORARY:
				case MariaDBParser.TEMPTABLE:
				case MariaDBParser.THAN:
				case MariaDBParser.TRADITIONAL:
				case MariaDBParser.TRANSACTION:
				case MariaDBParser.TRANSACTIONAL:
				case MariaDBParser.TRIGGERS:
				case MariaDBParser.TRUNCATE:
				case MariaDBParser.TYPES:
				case MariaDBParser.UNBOUNDED:
				case MariaDBParser.UNDEFINED:
				case MariaDBParser.UNDOFILE:
				case MariaDBParser.UNDO_BUFFER_SIZE:
				case MariaDBParser.UNINSTALL:
				case MariaDBParser.UNKNOWN:
				case MariaDBParser.UNTIL:
				case MariaDBParser.UPGRADE:
				case MariaDBParser.USER:
				case MariaDBParser.USE_FRM:
				case MariaDBParser.USER_RESOURCES:
				case MariaDBParser.VALIDATION:
				case MariaDBParser.VALUE:
				case MariaDBParser.VARIABLES:
				case MariaDBParser.VIEW:
				case MariaDBParser.VIRTUAL:
				case MariaDBParser.VISIBLE:
				case MariaDBParser.WAIT:
				case MariaDBParser.WARNINGS:
				case MariaDBParser.WITHOUT:
				case MariaDBParser.WORK:
				case MariaDBParser.WRAPPER:
				case MariaDBParser.WSREP_MEMBERSHIP:
				case MariaDBParser.WSREP_STATUS:
				case MariaDBParser.X509:
				case MariaDBParser.XA:
				case MariaDBParser.XML:
				case MariaDBParser.EUR:
				case MariaDBParser.USA:
				case MariaDBParser.JIS:
				case MariaDBParser.ISO:
				case MariaDBParser.INTERNAL:
				case MariaDBParser.QUARTER:
				case MariaDBParser.MONTH:
				case MariaDBParser.DAY:
				case MariaDBParser.HOUR:
				case MariaDBParser.MINUTE:
				case MariaDBParser.WEEK:
				case MariaDBParser.SECOND:
				case MariaDBParser.MICROSECOND:
				case MariaDBParser.USER_STATISTICS:
				case MariaDBParser.CLIENT_STATISTICS:
				case MariaDBParser.INDEX_STATISTICS:
				case MariaDBParser.TABLE_STATISTICS:
				case MariaDBParser.ADMIN:
				case MariaDBParser.AUDIT_ADMIN:
				case MariaDBParser.BACKUP_ADMIN:
				case MariaDBParser.BINLOG_ADMIN:
				case MariaDBParser.BINLOG_ENCRYPTION_ADMIN:
				case MariaDBParser.CLONE_ADMIN:
				case MariaDBParser.CONNECTION_ADMIN:
				case MariaDBParser.ENCRYPTION_KEY_ADMIN:
				case MariaDBParser.EXECUTE:
				case MariaDBParser.FILE:
				case MariaDBParser.FIREWALL_ADMIN:
				case MariaDBParser.FIREWALL_USER:
				case MariaDBParser.GROUP_REPLICATION_ADMIN:
				case MariaDBParser.INNODB_REDO_LOG_ARCHIVE:
				case MariaDBParser.INVOKE:
				case MariaDBParser.LAMBDA:
				case MariaDBParser.NDB_STORED_USER:
				case MariaDBParser.PASSWORDLESS_USER_ADMIN:
				case MariaDBParser.PERSIST_RO_VARIABLES_ADMIN:
				case MariaDBParser.PRIVILEGES:
				case MariaDBParser.PROCESS:
				case MariaDBParser.RELOAD:
				case MariaDBParser.REPLICATION_APPLIER:
				case MariaDBParser.REPLICATION_SLAVE_ADMIN:
				case MariaDBParser.RESOURCE_GROUP_ADMIN:
				case MariaDBParser.RESOURCE_GROUP_USER:
				case MariaDBParser.ROLE_ADMIN:
				case MariaDBParser.ROUTINE:
				case MariaDBParser.S3:
				case MariaDBParser.SESSION_VARIABLES_ADMIN:
				case MariaDBParser.SET_USER_ID:
				case MariaDBParser.SHOW_ROUTINE:
				case MariaDBParser.SHUTDOWN:
				case MariaDBParser.SUPER:
				case MariaDBParser.SYSTEM_VARIABLES_ADMIN:
				case MariaDBParser.TABLES:
				case MariaDBParser.TABLE_ENCRYPTION_ADMIN:
				case MariaDBParser.VERSION_TOKEN_ADMIN:
				case MariaDBParser.XA_RECOVER_ADMIN:
				case MariaDBParser.ARMSCII8:
				case MariaDBParser.ASCII:
				case MariaDBParser.BIG5:
				case MariaDBParser.CP1250:
				case MariaDBParser.CP1251:
				case MariaDBParser.CP1256:
				case MariaDBParser.CP1257:
				case MariaDBParser.CP850:
				case MariaDBParser.CP852:
				case MariaDBParser.CP866:
				case MariaDBParser.CP932:
				case MariaDBParser.DEC8:
				case MariaDBParser.EUCJPMS:
				case MariaDBParser.EUCKR:
				case MariaDBParser.GB18030:
				case MariaDBParser.GB2312:
				case MariaDBParser.GBK:
				case MariaDBParser.GEOSTD8:
				case MariaDBParser.GREEK:
				case MariaDBParser.HEBREW:
				case MariaDBParser.HP8:
				case MariaDBParser.KEYBCS2:
				case MariaDBParser.KOI8R:
				case MariaDBParser.KOI8U:
				case MariaDBParser.LATIN1:
				case MariaDBParser.LATIN2:
				case MariaDBParser.LATIN5:
				case MariaDBParser.LATIN7:
				case MariaDBParser.MACCE:
				case MariaDBParser.MACROMAN:
				case MariaDBParser.SJIS:
				case MariaDBParser.SWE7:
				case MariaDBParser.TIS620:
				case MariaDBParser.UCS2:
				case MariaDBParser.UJIS:
				case MariaDBParser.UTF16:
				case MariaDBParser.UTF16LE:
				case MariaDBParser.UTF32:
				case MariaDBParser.UTF8:
				case MariaDBParser.UTF8MB3:
				case MariaDBParser.UTF8MB4:
				case MariaDBParser.ARCHIVE:
				case MariaDBParser.BLACKHOLE:
				case MariaDBParser.CSV:
				case MariaDBParser.FEDERATED:
				case MariaDBParser.INNODB:
				case MariaDBParser.MEMORY:
				case MariaDBParser.MRG_MYISAM:
				case MariaDBParser.MYISAM:
				case MariaDBParser.NDB:
				case MariaDBParser.NDBCLUSTER:
				case MariaDBParser.PERFORMANCE_SCHEMA:
				case MariaDBParser.TOKUDB:
				case MariaDBParser.REPEATABLE:
				case MariaDBParser.COMMITTED:
				case MariaDBParser.UNCOMMITTED:
				case MariaDBParser.SERIALIZABLE:
				case MariaDBParser.GEOMETRYCOLLECTION:
				case MariaDBParser.LINESTRING:
				case MariaDBParser.MULTILINESTRING:
				case MariaDBParser.MULTIPOINT:
				case MariaDBParser.MULTIPOLYGON:
				case MariaDBParser.POINT:
				case MariaDBParser.POLYGON:
				case MariaDBParser.ABS:
				case MariaDBParser.ACOS:
				case MariaDBParser.ADDDATE:
				case MariaDBParser.ADDTIME:
				case MariaDBParser.AES_DECRYPT:
				case MariaDBParser.AES_ENCRYPT:
				case MariaDBParser.AREA:
				case MariaDBParser.ASBINARY:
				case MariaDBParser.ASIN:
				case MariaDBParser.ASTEXT:
				case MariaDBParser.ASWKB:
				case MariaDBParser.ASWKT:
				case MariaDBParser.ASYMMETRIC_DECRYPT:
				case MariaDBParser.ASYMMETRIC_DERIVE:
				case MariaDBParser.ASYMMETRIC_ENCRYPT:
				case MariaDBParser.ASYMMETRIC_SIGN:
				case MariaDBParser.ASYMMETRIC_VERIFY:
				case MariaDBParser.ATAN:
				case MariaDBParser.ATAN2:
				case MariaDBParser.BENCHMARK:
				case MariaDBParser.BIN:
				case MariaDBParser.BIT_COUNT:
				case MariaDBParser.BIT_LENGTH:
				case MariaDBParser.BUFFER:
				case MariaDBParser.CATALOG_NAME:
				case MariaDBParser.CEIL:
				case MariaDBParser.CEILING:
				case MariaDBParser.CENTROID:
				case MariaDBParser.CHARACTER_LENGTH:
				case MariaDBParser.CHARSET:
				case MariaDBParser.CHAR_LENGTH:
				case MariaDBParser.COERCIBILITY:
				case MariaDBParser.COLLATION:
				case MariaDBParser.COMPRESS:
				case MariaDBParser.CONCAT:
				case MariaDBParser.CONCAT_WS:
				case MariaDBParser.CONNECTION_ID:
				case MariaDBParser.CONV:
				case MariaDBParser.CONVERT_TZ:
				case MariaDBParser.COS:
				case MariaDBParser.COT:
				case MariaDBParser.CRC32:
				case MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY:
				case MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY:
				case MariaDBParser.CREATE_DH_PARAMETERS:
				case MariaDBParser.CREATE_DIGEST:
				case MariaDBParser.CROSSES:
				case MariaDBParser.DATEDIFF:
				case MariaDBParser.DATE_FORMAT:
				case MariaDBParser.DAYNAME:
				case MariaDBParser.DAYOFMONTH:
				case MariaDBParser.DAYOFWEEK:
				case MariaDBParser.DAYOFYEAR:
				case MariaDBParser.DECODE:
				case MariaDBParser.DEGREES:
				case MariaDBParser.DES_DECRYPT:
				case MariaDBParser.DES_ENCRYPT:
				case MariaDBParser.DIMENSION:
				case MariaDBParser.DISJOINT:
				case MariaDBParser.ELT:
				case MariaDBParser.ENCODE:
				case MariaDBParser.ENCRYPT:
				case MariaDBParser.ENDPOINT:
				case MariaDBParser.ENGINE_ATTRIBUTE:
				case MariaDBParser.ENVELOPE:
				case MariaDBParser.EQUALS:
				case MariaDBParser.EXP:
				case MariaDBParser.EXPORT_SET:
				case MariaDBParser.EXTERIORRING:
				case MariaDBParser.EXTRACTVALUE:
				case MariaDBParser.FIELD:
				case MariaDBParser.FIND_IN_SET:
				case MariaDBParser.FLOOR:
				case MariaDBParser.FORMAT:
				case MariaDBParser.FOUND_ROWS:
				case MariaDBParser.FROM_BASE64:
				case MariaDBParser.FROM_DAYS:
				case MariaDBParser.FROM_UNIXTIME:
				case MariaDBParser.GEOMCOLLFROMTEXT:
				case MariaDBParser.GEOMCOLLFROMWKB:
				case MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT:
				case MariaDBParser.GEOMETRYCOLLECTIONFROMWKB:
				case MariaDBParser.GEOMETRYFROMTEXT:
				case MariaDBParser.GEOMETRYFROMWKB:
				case MariaDBParser.GEOMETRYN:
				case MariaDBParser.GEOMETRYTYPE:
				case MariaDBParser.GEOMFROMTEXT:
				case MariaDBParser.GEOMFROMWKB:
				case MariaDBParser.GET_FORMAT:
				case MariaDBParser.GET_LOCK:
				case MariaDBParser.GLENGTH:
				case MariaDBParser.GREATEST:
				case MariaDBParser.GTID_SUBSET:
				case MariaDBParser.GTID_SUBTRACT:
				case MariaDBParser.HEX:
				case MariaDBParser.IFNULL:
				case MariaDBParser.INET6_ATON:
				case MariaDBParser.INET6_NTOA:
				case MariaDBParser.INET_ATON:
				case MariaDBParser.INET_NTOA:
				case MariaDBParser.INSTR:
				case MariaDBParser.INTERIORRINGN:
				case MariaDBParser.INTERSECTS:
				case MariaDBParser.ISCLOSED:
				case MariaDBParser.ISEMPTY:
				case MariaDBParser.ISNULL:
				case MariaDBParser.ISSIMPLE:
				case MariaDBParser.IS_FREE_LOCK:
				case MariaDBParser.IS_IPV4:
				case MariaDBParser.IS_IPV4_COMPAT:
				case MariaDBParser.IS_IPV4_MAPPED:
				case MariaDBParser.IS_IPV6:
				case MariaDBParser.IS_USED_LOCK:
				case MariaDBParser.LAST_INSERT_ID:
				case MariaDBParser.LCASE:
				case MariaDBParser.LEAST:
				case MariaDBParser.LENGTH:
				case MariaDBParser.LINEFROMTEXT:
				case MariaDBParser.LINEFROMWKB:
				case MariaDBParser.LINESTRINGFROMTEXT:
				case MariaDBParser.LINESTRINGFROMWKB:
				case MariaDBParser.LN:
				case MariaDBParser.LOAD_FILE:
				case MariaDBParser.LOCATE:
				case MariaDBParser.LOG:
				case MariaDBParser.LOG10:
				case MariaDBParser.LOG2:
				case MariaDBParser.LOWER:
				case MariaDBParser.LPAD:
				case MariaDBParser.LTRIM:
				case MariaDBParser.MAKEDATE:
				case MariaDBParser.MAKETIME:
				case MariaDBParser.MAKE_SET:
				case MariaDBParser.MASTER_POS_WAIT:
				case MariaDBParser.MBRCONTAINS:
				case MariaDBParser.MBRDISJOINT:
				case MariaDBParser.MBREQUAL:
				case MariaDBParser.MBRINTERSECTS:
				case MariaDBParser.MBROVERLAPS:
				case MariaDBParser.MBRTOUCHES:
				case MariaDBParser.MBRWITHIN:
				case MariaDBParser.MD5:
				case MariaDBParser.MLINEFROMTEXT:
				case MariaDBParser.MLINEFROMWKB:
				case MariaDBParser.MONTHNAME:
				case MariaDBParser.MPOINTFROMTEXT:
				case MariaDBParser.MPOINTFROMWKB:
				case MariaDBParser.MPOLYFROMTEXT:
				case MariaDBParser.MPOLYFROMWKB:
				case MariaDBParser.MULTILINESTRINGFROMTEXT:
				case MariaDBParser.MULTILINESTRINGFROMWKB:
				case MariaDBParser.MULTIPOINTFROMTEXT:
				case MariaDBParser.MULTIPOINTFROMWKB:
				case MariaDBParser.MULTIPOLYGONFROMTEXT:
				case MariaDBParser.MULTIPOLYGONFROMWKB:
				case MariaDBParser.NAME_CONST:
				case MariaDBParser.NULLIF:
				case MariaDBParser.NUMGEOMETRIES:
				case MariaDBParser.NUMINTERIORRINGS:
				case MariaDBParser.NUMPOINTS:
				case MariaDBParser.OCT:
				case MariaDBParser.OCTET_LENGTH:
				case MariaDBParser.ORD:
				case MariaDBParser.OVERLAPS:
				case MariaDBParser.PERIOD_ADD:
				case MariaDBParser.PERIOD_DIFF:
				case MariaDBParser.PI:
				case MariaDBParser.POINTFROMTEXT:
				case MariaDBParser.POINTFROMWKB:
				case MariaDBParser.POINTN:
				case MariaDBParser.POLYFROMTEXT:
				case MariaDBParser.POLYFROMWKB:
				case MariaDBParser.POLYGONFROMTEXT:
				case MariaDBParser.POLYGONFROMWKB:
				case MariaDBParser.POW:
				case MariaDBParser.POWER:
				case MariaDBParser.QUOTE:
				case MariaDBParser.RADIANS:
				case MariaDBParser.RAND:
				case MariaDBParser.RANDOM_BYTES:
				case MariaDBParser.RELEASE_LOCK:
				case MariaDBParser.REVERSE:
				case MariaDBParser.ROUND:
				case MariaDBParser.ROW_COUNT:
				case MariaDBParser.RPAD:
				case MariaDBParser.RTRIM:
				case MariaDBParser.SEC_TO_TIME:
				case MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE:
				case MariaDBParser.SESSION_USER:
				case MariaDBParser.SHA:
				case MariaDBParser.SHA1:
				case MariaDBParser.SHA2:
				case MariaDBParser.SCHEMA_NAME:
				case MariaDBParser.SIGN:
				case MariaDBParser.SIN:
				case MariaDBParser.SLEEP:
				case MariaDBParser.SOUNDEX:
				case MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS:
				case MariaDBParser.SQRT:
				case MariaDBParser.SRID:
				case MariaDBParser.STARTPOINT:
				case MariaDBParser.STRCMP:
				case MariaDBParser.STR_TO_DATE:
				case MariaDBParser.ST_AREA:
				case MariaDBParser.ST_ASBINARY:
				case MariaDBParser.ST_ASTEXT:
				case MariaDBParser.ST_ASWKB:
				case MariaDBParser.ST_ASWKT:
				case MariaDBParser.ST_BUFFER:
				case MariaDBParser.ST_CENTROID:
				case MariaDBParser.ST_CONTAINS:
				case MariaDBParser.ST_CROSSES:
				case MariaDBParser.ST_DIFFERENCE:
				case MariaDBParser.ST_DIMENSION:
				case MariaDBParser.ST_DISJOINT:
				case MariaDBParser.ST_DISTANCE:
				case MariaDBParser.ST_ENDPOINT:
				case MariaDBParser.ST_ENVELOPE:
				case MariaDBParser.ST_EQUALS:
				case MariaDBParser.ST_EXTERIORRING:
				case MariaDBParser.ST_GEOMCOLLFROMTEXT:
				case MariaDBParser.ST_GEOMCOLLFROMTXT:
				case MariaDBParser.ST_GEOMCOLLFROMWKB:
				case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
				case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB:
				case MariaDBParser.ST_GEOMETRYFROMTEXT:
				case MariaDBParser.ST_GEOMETRYFROMWKB:
				case MariaDBParser.ST_GEOMETRYN:
				case MariaDBParser.ST_GEOMETRYTYPE:
				case MariaDBParser.ST_GEOMFROMTEXT:
				case MariaDBParser.ST_GEOMFROMWKB:
				case MariaDBParser.ST_INTERIORRINGN:
				case MariaDBParser.ST_INTERSECTION:
				case MariaDBParser.ST_INTERSECTS:
				case MariaDBParser.ST_ISCLOSED:
				case MariaDBParser.ST_ISEMPTY:
				case MariaDBParser.ST_ISSIMPLE:
				case MariaDBParser.ST_LINEFROMTEXT:
				case MariaDBParser.ST_LINEFROMWKB:
				case MariaDBParser.ST_LINESTRINGFROMTEXT:
				case MariaDBParser.ST_LINESTRINGFROMWKB:
				case MariaDBParser.ST_NUMGEOMETRIES:
				case MariaDBParser.ST_NUMINTERIORRING:
				case MariaDBParser.ST_NUMINTERIORRINGS:
				case MariaDBParser.ST_NUMPOINTS:
				case MariaDBParser.ST_OVERLAPS:
				case MariaDBParser.ST_POINTFROMTEXT:
				case MariaDBParser.ST_POINTFROMWKB:
				case MariaDBParser.ST_POINTN:
				case MariaDBParser.ST_POLYFROMTEXT:
				case MariaDBParser.ST_POLYFROMWKB:
				case MariaDBParser.ST_POLYGONFROMTEXT:
				case MariaDBParser.ST_POLYGONFROMWKB:
				case MariaDBParser.ST_SRID:
				case MariaDBParser.ST_STARTPOINT:
				case MariaDBParser.ST_SYMDIFFERENCE:
				case MariaDBParser.ST_TOUCHES:
				case MariaDBParser.ST_UNION:
				case MariaDBParser.ST_WITHIN:
				case MariaDBParser.ST_X:
				case MariaDBParser.ST_Y:
				case MariaDBParser.SUBDATE:
				case MariaDBParser.SUBSTRING_INDEX:
				case MariaDBParser.SUBTIME:
				case MariaDBParser.SYSTEM_USER:
				case MariaDBParser.TAN:
				case MariaDBParser.TIMEDIFF:
				case MariaDBParser.TIMESTAMPADD:
				case MariaDBParser.TIMESTAMPDIFF:
				case MariaDBParser.TIME_FORMAT:
				case MariaDBParser.TIME_TO_SEC:
				case MariaDBParser.TOUCHES:
				case MariaDBParser.TO_BASE64:
				case MariaDBParser.TO_DAYS:
				case MariaDBParser.TO_SECONDS:
				case MariaDBParser.UCASE:
				case MariaDBParser.UNCOMPRESS:
				case MariaDBParser.UNCOMPRESSED_LENGTH:
				case MariaDBParser.UNHEX:
				case MariaDBParser.UNIX_TIMESTAMP:
				case MariaDBParser.UPDATEXML:
				case MariaDBParser.UPPER:
				case MariaDBParser.UUID:
				case MariaDBParser.UUID_SHORT:
				case MariaDBParser.VALIDATE_PASSWORD_STRENGTH:
				case MariaDBParser.VERSION:
				case MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case MariaDBParser.WEEKDAY:
				case MariaDBParser.WEEKOFYEAR:
				case MariaDBParser.WEIGHT_STRING:
				case MariaDBParser.WITHIN:
				case MariaDBParser.YEARWEEK:
				case MariaDBParser.Y_FUNCTION:
				case MariaDBParser.X_FUNCTION:
				case MariaDBParser.VIA:
				case MariaDBParser.LASTVAL:
				case MariaDBParser.NEXTVAL:
				case MariaDBParser.SETVAL:
				case MariaDBParser.PREVIOUS:
				case MariaDBParser.PERSISTENT:
				case MariaDBParser.BINLOG_MONITOR:
				case MariaDBParser.BINLOG_REPLAY:
				case MariaDBParser.FEDERATED_ADMIN:
				case MariaDBParser.READ_ONLY_ADMIN:
				case MariaDBParser.REPLICA:
				case MariaDBParser.REPLICAS:
				case MariaDBParser.REPLICATION_MASTER_ADMIN:
				case MariaDBParser.MONITOR:
				case MariaDBParser.READ_ONLY:
				case MariaDBParser.REPLAY:
				case MariaDBParser.MOD:
				case MariaDBParser.CHARSET_REVERSE_QOUTE_STRING:
				case MariaDBParser.STRING_LITERAL:
				case MariaDBParser.ID:
					{
					this.state = 6172;
					this.uidList();
					}
					break;
				case MariaDBParser.ALL:
					{
					this.state = 6173;
					this.match(MariaDBParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 6176;
				this.match(MariaDBParser.RR_BRACKET);
				}
			}

			this.state = 6179;
			this.match(MariaDBParser.IN);
			this.state = 6180;
			_localctx._schema = this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public flushStatement(): FlushStatementContext {
		let _localctx: FlushStatementContext = new FlushStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 516, MariaDBParser.RULE_flushStatement);
		let _la: number;
		try {
			this.state = 6196;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 914, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6182;
				this.match(MariaDBParser.FLUSH);
				this.state = 6184;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.NO_WRITE_TO_BINLOG || _la === MariaDBParser.LOCAL) {
					{
					this.state = 6183;
					_localctx._flushFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MariaDBParser.NO_WRITE_TO_BINLOG || _la === MariaDBParser.LOCAL)) {
						_localctx._flushFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 6186;
				this.flushOption();
				this.state = 6191;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 6187;
					this.match(MariaDBParser.COMMA);
					this.state = 6188;
					this.flushOption();
					}
					}
					this.state = 6193;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6194;
				this.match(MariaDBParser.FLUSH);
				this.state = 6195;
				_la = this._input.LA(1);
				if (!(((((_la - 703)) & ~0x1F) === 0 && ((1 << (_la - 703)) & ((1 << (MariaDBParser.USER_STATISTICS - 703)) | (1 << (MariaDBParser.CLIENT_STATISTICS - 703)) | (1 << (MariaDBParser.INDEX_STATISTICS - 703)) | (1 << (MariaDBParser.TABLE_STATISTICS - 703)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public killStatement(): KillStatementContext {
		let _localctx: KillStatementContext = new KillStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 518, MariaDBParser.RULE_killStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6198;
			this.match(MariaDBParser.KILL);
			this.state = 6200;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 915, this._ctx) ) {
			case 1:
				{
				this.state = 6199;
				_localctx._connectionFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.CONNECTION || _la === MariaDBParser.QUERY)) {
					_localctx._connectionFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			this.state = 6202;
			this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public loadIndexIntoCache(): LoadIndexIntoCacheContext {
		let _localctx: LoadIndexIntoCacheContext = new LoadIndexIntoCacheContext(this._ctx, this.state);
		this.enterRule(_localctx, 520, MariaDBParser.RULE_loadIndexIntoCache);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6204;
			this.match(MariaDBParser.LOAD);
			this.state = 6205;
			this.match(MariaDBParser.INDEX);
			this.state = 6206;
			this.match(MariaDBParser.INTO);
			this.state = 6207;
			this.match(MariaDBParser.CACHE);
			this.state = 6208;
			this.loadedTableIndexes();
			this.state = 6213;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.COMMA) {
				{
				{
				this.state = 6209;
				this.match(MariaDBParser.COMMA);
				this.state = 6210;
				this.loadedTableIndexes();
				}
				}
				this.state = 6215;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public resetStatement(): ResetStatementContext {
		let _localctx: ResetStatementContext = new ResetStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 522, MariaDBParser.RULE_resetStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6216;
			this.match(MariaDBParser.RESET);
			this.state = 6217;
			this.match(MariaDBParser.QUERY);
			this.state = 6218;
			this.match(MariaDBParser.CACHE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public shutdownStatement(): ShutdownStatementContext {
		let _localctx: ShutdownStatementContext = new ShutdownStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 524, MariaDBParser.RULE_shutdownStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6220;
			this.match(MariaDBParser.SHUTDOWN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableIndexes(): TableIndexesContext {
		let _localctx: TableIndexesContext = new TableIndexesContext(this._ctx, this.state);
		this.enterRule(_localctx, 526, MariaDBParser.RULE_tableIndexes);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6222;
			this.tableName();
			this.state = 6230;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.INDEX || _la === MariaDBParser.KEY || _la === MariaDBParser.LR_BRACKET) {
				{
				this.state = 6224;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.INDEX || _la === MariaDBParser.KEY) {
					{
					this.state = 6223;
					_localctx._indexFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MariaDBParser.INDEX || _la === MariaDBParser.KEY)) {
						_localctx._indexFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 6226;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 6227;
				this.uidList();
				this.state = 6228;
				this.match(MariaDBParser.RR_BRACKET);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public flushOption(): FlushOptionContext {
		let _localctx: FlushOptionContext = new FlushOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 528, MariaDBParser.RULE_flushOption);
		let _la: number;
		try {
			this.state = 6264;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 925, this._ctx) ) {
			case 1:
				_localctx = new SimpleFlushOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6250;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.DES_KEY_FILE:
					{
					this.state = 6232;
					this.match(MariaDBParser.DES_KEY_FILE);
					}
					break;
				case MariaDBParser.HOSTS:
					{
					this.state = 6233;
					this.match(MariaDBParser.HOSTS);
					}
					break;
				case MariaDBParser.BINARY:
				case MariaDBParser.ENGINE:
				case MariaDBParser.ERROR:
				case MariaDBParser.GENERAL:
				case MariaDBParser.LOGS:
				case MariaDBParser.RELAY:
				case MariaDBParser.SLOW:
					{
					this.state = 6235;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MariaDBParser.BINARY || ((((_la - 409)) & ~0x1F) === 0 && ((1 << (_la - 409)) & ((1 << (MariaDBParser.ENGINE - 409)) | (1 << (MariaDBParser.ERROR - 409)) | (1 << (MariaDBParser.GENERAL - 409)))) !== 0) || _la === MariaDBParser.RELAY || _la === MariaDBParser.SLOW) {
						{
						this.state = 6234;
						_la = this._input.LA(1);
						if (!(_la === MariaDBParser.BINARY || ((((_la - 409)) & ~0x1F) === 0 && ((1 << (_la - 409)) & ((1 << (MariaDBParser.ENGINE - 409)) | (1 << (MariaDBParser.ERROR - 409)) | (1 << (MariaDBParser.GENERAL - 409)))) !== 0) || _la === MariaDBParser.RELAY || _la === MariaDBParser.SLOW)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
					}

					this.state = 6237;
					this.match(MariaDBParser.LOGS);
					}
					break;
				case MariaDBParser.OPTIMIZER_COSTS:
					{
					this.state = 6238;
					this.match(MariaDBParser.OPTIMIZER_COSTS);
					}
					break;
				case MariaDBParser.PRIVILEGES:
					{
					this.state = 6239;
					this.match(MariaDBParser.PRIVILEGES);
					}
					break;
				case MariaDBParser.QUERY:
					{
					this.state = 6240;
					this.match(MariaDBParser.QUERY);
					this.state = 6241;
					this.match(MariaDBParser.CACHE);
					}
					break;
				case MariaDBParser.STATUS:
					{
					this.state = 6242;
					this.match(MariaDBParser.STATUS);
					}
					break;
				case MariaDBParser.USER_RESOURCES:
					{
					this.state = 6243;
					this.match(MariaDBParser.USER_RESOURCES);
					}
					break;
				case MariaDBParser.TABLES:
					{
					this.state = 6244;
					this.match(MariaDBParser.TABLES);
					this.state = 6248;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MariaDBParser.WITH) {
						{
						this.state = 6245;
						this.match(MariaDBParser.WITH);
						this.state = 6246;
						this.match(MariaDBParser.READ);
						this.state = 6247;
						this.match(MariaDBParser.LOCK);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				_localctx = new ChannelFlushOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6252;
				this.match(MariaDBParser.RELAY);
				this.state = 6253;
				this.match(MariaDBParser.LOGS);
				this.state = 6255;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.FOR) {
					{
					this.state = 6254;
					this.channelOption();
					}
				}

				}
				break;

			case 3:
				_localctx = new TableFlushOptionContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6257;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.TABLE || _la === MariaDBParser.TABLES)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6259;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 923, this._ctx) ) {
				case 1:
					{
					this.state = 6258;
					this.tables();
					}
					break;
				}
				this.state = 6262;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.FOR || _la === MariaDBParser.WITH) {
					{
					this.state = 6261;
					this.flushTableOption();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public flushTableOption(): FlushTableOptionContext {
		let _localctx: FlushTableOptionContext = new FlushTableOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 530, MariaDBParser.RULE_flushTableOption);
		try {
			this.state = 6271;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.WITH:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6266;
				this.match(MariaDBParser.WITH);
				this.state = 6267;
				this.match(MariaDBParser.READ);
				this.state = 6268;
				this.match(MariaDBParser.LOCK);
				}
				break;
			case MariaDBParser.FOR:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6269;
				this.match(MariaDBParser.FOR);
				this.state = 6270;
				this.match(MariaDBParser.EXPORT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public loadedTableIndexes(): LoadedTableIndexesContext {
		let _localctx: LoadedTableIndexesContext = new LoadedTableIndexesContext(this._ctx, this.state);
		this.enterRule(_localctx, 532, MariaDBParser.RULE_loadedTableIndexes);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6273;
			this.tableName();
			this.state = 6281;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.PARTITION) {
				{
				this.state = 6274;
				this.match(MariaDBParser.PARTITION);
				this.state = 6275;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 6278;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.ATTRIBUTE:
				case MariaDBParser.BODY:
				case MariaDBParser.BUCKETS:
				case MariaDBParser.CONDITION:
				case MariaDBParser.CURRENT:
				case MariaDBParser.CURRENT_ROLE:
				case MariaDBParser.CURRENT_USER:
				case MariaDBParser.DATABASE:
				case MariaDBParser.DEFAULT:
				case MariaDBParser.DIAGNOSTICS:
				case MariaDBParser.EMPTY:
				case MariaDBParser.EXCEPT:
				case MariaDBParser.GROUP:
				case MariaDBParser.IF:
				case MariaDBParser.IGNORED:
				case MariaDBParser.INSERT:
				case MariaDBParser.LATERAL:
				case MariaDBParser.LEFT:
				case MariaDBParser.LOCKED:
				case MariaDBParser.MAXVALUE:
				case MariaDBParser.MINVALUE:
				case MariaDBParser.NUMBER:
				case MariaDBParser.OPTIONAL:
				case MariaDBParser.ORDER:
				case MariaDBParser.PRIMARY:
				case MariaDBParser.PACKAGE:
				case MariaDBParser.REPLACE:
				case MariaDBParser.RIGHT:
				case MariaDBParser.SCHEMA:
				case MariaDBParser.SKIP_:
				case MariaDBParser.STACKED:
				case MariaDBParser.STATEMENT:
				case MariaDBParser.DATE:
				case MariaDBParser.TIME:
				case MariaDBParser.TIMESTAMP:
				case MariaDBParser.DATETIME:
				case MariaDBParser.YEAR:
				case MariaDBParser.BINARY:
				case MariaDBParser.TEXT:
				case MariaDBParser.ENUM:
				case MariaDBParser.SERIAL:
				case MariaDBParser.JSON_ARRAY:
				case MariaDBParser.JSON_ARRAYAGG:
				case MariaDBParser.JSON_ARRAY_APPEND:
				case MariaDBParser.JSON_ARRAY_INSERT:
				case MariaDBParser.JSON_CONTAINS:
				case MariaDBParser.JSON_CONTAINS_PATH:
				case MariaDBParser.JSON_DEPTH:
				case MariaDBParser.JSON_EXTRACT:
				case MariaDBParser.JSON_INSERT:
				case MariaDBParser.JSON_KEYS:
				case MariaDBParser.JSON_LENGTH:
				case MariaDBParser.JSON_MERGE:
				case MariaDBParser.JSON_MERGE_PATCH:
				case MariaDBParser.JSON_MERGE_PRESERVE:
				case MariaDBParser.JSON_OBJECT:
				case MariaDBParser.JSON_OBJECTAGG:
				case MariaDBParser.JSON_OVERLAPS:
				case MariaDBParser.JSON_PRETTY:
				case MariaDBParser.JSON_QUOTE:
				case MariaDBParser.JSON_REMOVE:
				case MariaDBParser.JSON_REPLACE:
				case MariaDBParser.JSON_SCHEMA_VALID:
				case MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT:
				case MariaDBParser.JSON_SEARCH:
				case MariaDBParser.JSON_SET:
				case MariaDBParser.JSON_STORAGE_FREE:
				case MariaDBParser.JSON_STORAGE_SIZE:
				case MariaDBParser.JSON_TABLE:
				case MariaDBParser.JSON_TYPE:
				case MariaDBParser.JSON_UNQUOTE:
				case MariaDBParser.JSON_VALID:
				case MariaDBParser.JSON_VALUE:
				case MariaDBParser.NESTED:
				case MariaDBParser.ORDINALITY:
				case MariaDBParser.PATH:
				case MariaDBParser.AVG:
				case MariaDBParser.BIT_AND:
				case MariaDBParser.BIT_OR:
				case MariaDBParser.BIT_XOR:
				case MariaDBParser.COUNT:
				case MariaDBParser.CUME_DIST:
				case MariaDBParser.DENSE_RANK:
				case MariaDBParser.FIRST_VALUE:
				case MariaDBParser.GROUP_CONCAT:
				case MariaDBParser.LAG:
				case MariaDBParser.LAST_VALUE:
				case MariaDBParser.LEAD:
				case MariaDBParser.MAX:
				case MariaDBParser.MIN:
				case MariaDBParser.NTILE:
				case MariaDBParser.NTH_VALUE:
				case MariaDBParser.PERCENT_RANK:
				case MariaDBParser.RANK:
				case MariaDBParser.ROW_NUMBER:
				case MariaDBParser.STD:
				case MariaDBParser.STDDEV:
				case MariaDBParser.STDDEV_POP:
				case MariaDBParser.STDDEV_SAMP:
				case MariaDBParser.SUM:
				case MariaDBParser.VAR_POP:
				case MariaDBParser.VAR_SAMP:
				case MariaDBParser.VARIANCE:
				case MariaDBParser.CURRENT_DATE:
				case MariaDBParser.CURRENT_TIME:
				case MariaDBParser.CURRENT_TIMESTAMP:
				case MariaDBParser.LOCALTIME:
				case MariaDBParser.CURDATE:
				case MariaDBParser.CURTIME:
				case MariaDBParser.DATE_ADD:
				case MariaDBParser.DATE_SUB:
				case MariaDBParser.LOCALTIMESTAMP:
				case MariaDBParser.NOW:
				case MariaDBParser.POSITION:
				case MariaDBParser.SUBSTR:
				case MariaDBParser.SUBSTRING:
				case MariaDBParser.SYSDATE:
				case MariaDBParser.TRIM:
				case MariaDBParser.UTC_DATE:
				case MariaDBParser.UTC_TIME:
				case MariaDBParser.UTC_TIMESTAMP:
				case MariaDBParser.ACCOUNT:
				case MariaDBParser.ACTION:
				case MariaDBParser.AFTER:
				case MariaDBParser.AGGREGATE:
				case MariaDBParser.ALGORITHM:
				case MariaDBParser.ANY:
				case MariaDBParser.AT:
				case MariaDBParser.AUTHORS:
				case MariaDBParser.AUTOCOMMIT:
				case MariaDBParser.AUTOEXTEND_SIZE:
				case MariaDBParser.AUTO_INCREMENT:
				case MariaDBParser.AVG_ROW_LENGTH:
				case MariaDBParser.BEGIN:
				case MariaDBParser.BINLOG:
				case MariaDBParser.BIT:
				case MariaDBParser.BLOCK:
				case MariaDBParser.BOOL:
				case MariaDBParser.BOOLEAN:
				case MariaDBParser.BTREE:
				case MariaDBParser.CACHE:
				case MariaDBParser.CASCADED:
				case MariaDBParser.CHAIN:
				case MariaDBParser.CHANGED:
				case MariaDBParser.CHANNEL:
				case MariaDBParser.CHECKSUM:
				case MariaDBParser.PAGE_CHECKSUM:
				case MariaDBParser.CIPHER:
				case MariaDBParser.CLASS_ORIGIN:
				case MariaDBParser.CLIENT:
				case MariaDBParser.CLOSE:
				case MariaDBParser.CLUSTERING:
				case MariaDBParser.COALESCE:
				case MariaDBParser.CODE:
				case MariaDBParser.COLUMNS:
				case MariaDBParser.COLUMN_FORMAT:
				case MariaDBParser.COLUMN_NAME:
				case MariaDBParser.COMMENT:
				case MariaDBParser.COMMIT:
				case MariaDBParser.COMPACT:
				case MariaDBParser.COMPLETION:
				case MariaDBParser.COMPRESSED:
				case MariaDBParser.COMPRESSION:
				case MariaDBParser.CONCURRENT:
				case MariaDBParser.CONNECT:
				case MariaDBParser.CONNECTION:
				case MariaDBParser.CONSISTENT:
				case MariaDBParser.CONSTRAINT_CATALOG:
				case MariaDBParser.CONSTRAINT_SCHEMA:
				case MariaDBParser.CONSTRAINT_NAME:
				case MariaDBParser.CONTAINS:
				case MariaDBParser.CONTEXT:
				case MariaDBParser.CONTRIBUTORS:
				case MariaDBParser.COPY:
				case MariaDBParser.CPU:
				case MariaDBParser.CYCLE:
				case MariaDBParser.CURSOR_NAME:
				case MariaDBParser.DATA:
				case MariaDBParser.DATAFILE:
				case MariaDBParser.DEALLOCATE:
				case MariaDBParser.DEFAULT_AUTH:
				case MariaDBParser.DEFINER:
				case MariaDBParser.DELAY_KEY_WRITE:
				case MariaDBParser.DES_KEY_FILE:
				case MariaDBParser.DIRECTORY:
				case MariaDBParser.DISABLE:
				case MariaDBParser.DISCARD:
				case MariaDBParser.DISK:
				case MariaDBParser.DO:
				case MariaDBParser.DUMPFILE:
				case MariaDBParser.DUPLICATE:
				case MariaDBParser.DYNAMIC:
				case MariaDBParser.ENABLE:
				case MariaDBParser.ENCRYPTED:
				case MariaDBParser.ENCRYPTION:
				case MariaDBParser.ENCRYPTION_KEY_ID:
				case MariaDBParser.END:
				case MariaDBParser.ENDS:
				case MariaDBParser.ENGINE:
				case MariaDBParser.ENGINES:
				case MariaDBParser.ERROR:
				case MariaDBParser.ERRORS:
				case MariaDBParser.ESCAPE:
				case MariaDBParser.EVEN:
				case MariaDBParser.EVENT:
				case MariaDBParser.EVENTS:
				case MariaDBParser.EVERY:
				case MariaDBParser.EXCHANGE:
				case MariaDBParser.EXCLUSIVE:
				case MariaDBParser.EXPIRE:
				case MariaDBParser.EXPORT:
				case MariaDBParser.EXTENDED:
				case MariaDBParser.EXTENT_SIZE:
				case MariaDBParser.FAILED_LOGIN_ATTEMPTS:
				case MariaDBParser.FAST:
				case MariaDBParser.FAULTS:
				case MariaDBParser.FIELDS:
				case MariaDBParser.FILE_BLOCK_SIZE:
				case MariaDBParser.FILTER:
				case MariaDBParser.FIRST:
				case MariaDBParser.FIXED:
				case MariaDBParser.FLUSH:
				case MariaDBParser.FOLLOWS:
				case MariaDBParser.FOUND:
				case MariaDBParser.FULL:
				case MariaDBParser.FUNCTION:
				case MariaDBParser.GENERAL:
				case MariaDBParser.GLOBAL:
				case MariaDBParser.GRANTS:
				case MariaDBParser.GROUP_REPLICATION:
				case MariaDBParser.HANDLER:
				case MariaDBParser.HASH:
				case MariaDBParser.HELP:
				case MariaDBParser.HISTORY:
				case MariaDBParser.HOST:
				case MariaDBParser.HOSTS:
				case MariaDBParser.IDENTIFIED:
				case MariaDBParser.IGNORE_SERVER_IDS:
				case MariaDBParser.IMPORT:
				case MariaDBParser.INCREMENT:
				case MariaDBParser.INDEXES:
				case MariaDBParser.INITIAL_SIZE:
				case MariaDBParser.INPLACE:
				case MariaDBParser.INSERT_METHOD:
				case MariaDBParser.INSTALL:
				case MariaDBParser.INSTANCE:
				case MariaDBParser.INSTANT:
				case MariaDBParser.INVISIBLE:
				case MariaDBParser.INVOKER:
				case MariaDBParser.IO:
				case MariaDBParser.IO_THREAD:
				case MariaDBParser.IPC:
				case MariaDBParser.ISOLATION:
				case MariaDBParser.ISSUER:
				case MariaDBParser.JSON:
				case MariaDBParser.KEY_BLOCK_SIZE:
				case MariaDBParser.LANGUAGE:
				case MariaDBParser.LAST:
				case MariaDBParser.LEAVES:
				case MariaDBParser.LESS:
				case MariaDBParser.LEVEL:
				case MariaDBParser.LIST:
				case MariaDBParser.LOCAL:
				case MariaDBParser.LOCALES:
				case MariaDBParser.LOGFILE:
				case MariaDBParser.LOGS:
				case MariaDBParser.MASTER:
				case MariaDBParser.MASTER_AUTO_POSITION:
				case MariaDBParser.MASTER_CONNECT_RETRY:
				case MariaDBParser.MASTER_DELAY:
				case MariaDBParser.MASTER_HEARTBEAT_PERIOD:
				case MariaDBParser.MASTER_HOST:
				case MariaDBParser.MASTER_LOG_FILE:
				case MariaDBParser.MASTER_LOG_POS:
				case MariaDBParser.MASTER_PASSWORD:
				case MariaDBParser.MASTER_PORT:
				case MariaDBParser.MASTER_RETRY_COUNT:
				case MariaDBParser.MASTER_SSL:
				case MariaDBParser.MASTER_SSL_CA:
				case MariaDBParser.MASTER_SSL_CAPATH:
				case MariaDBParser.MASTER_SSL_CERT:
				case MariaDBParser.MASTER_SSL_CIPHER:
				case MariaDBParser.MASTER_SSL_CRL:
				case MariaDBParser.MASTER_SSL_CRLPATH:
				case MariaDBParser.MASTER_SSL_KEY:
				case MariaDBParser.MASTER_TLS_VERSION:
				case MariaDBParser.MASTER_USER:
				case MariaDBParser.MAX_CONNECTIONS_PER_HOUR:
				case MariaDBParser.MAX_QUERIES_PER_HOUR:
				case MariaDBParser.MAX_ROWS:
				case MariaDBParser.MAX_SIZE:
				case MariaDBParser.MAX_UPDATES_PER_HOUR:
				case MariaDBParser.MAX_USER_CONNECTIONS:
				case MariaDBParser.MEDIUM:
				case MariaDBParser.MEMBER:
				case MariaDBParser.MERGE:
				case MariaDBParser.MESSAGE_TEXT:
				case MariaDBParser.MID:
				case MariaDBParser.MIGRATE:
				case MariaDBParser.MIN_ROWS:
				case MariaDBParser.MODE:
				case MariaDBParser.MODIFY:
				case MariaDBParser.MUTEX:
				case MariaDBParser.MYSQL:
				case MariaDBParser.MYSQL_ERRNO:
				case MariaDBParser.NAME:
				case MariaDBParser.NAMES:
				case MariaDBParser.NCHAR:
				case MariaDBParser.NEVER:
				case MariaDBParser.NEXT:
				case MariaDBParser.NO:
				case MariaDBParser.NOCACHE:
				case MariaDBParser.NOCOPY:
				case MariaDBParser.NOCYCLE:
				case MariaDBParser.NOMAXVALUE:
				case MariaDBParser.NOMINVALUE:
				case MariaDBParser.NOWAIT:
				case MariaDBParser.NODEGROUP:
				case MariaDBParser.NONE:
				case MariaDBParser.ODBC:
				case MariaDBParser.OFFLINE:
				case MariaDBParser.OFFSET:
				case MariaDBParser.OF:
				case MariaDBParser.OJ:
				case MariaDBParser.OLD_PASSWORD:
				case MariaDBParser.ONE:
				case MariaDBParser.ONLINE:
				case MariaDBParser.ONLY:
				case MariaDBParser.OPEN:
				case MariaDBParser.OPTIMIZER_COSTS:
				case MariaDBParser.OPTIONS:
				case MariaDBParser.OWNER:
				case MariaDBParser.PACK_KEYS:
				case MariaDBParser.PAGE:
				case MariaDBParser.PARSER:
				case MariaDBParser.PARTIAL:
				case MariaDBParser.PARTITIONING:
				case MariaDBParser.PARTITIONS:
				case MariaDBParser.PASSWORD:
				case MariaDBParser.PASSWORD_LOCK_TIME:
				case MariaDBParser.PHASE:
				case MariaDBParser.PLUGIN:
				case MariaDBParser.PLUGIN_DIR:
				case MariaDBParser.PLUGINS:
				case MariaDBParser.PORT:
				case MariaDBParser.PRECEDES:
				case MariaDBParser.PREPARE:
				case MariaDBParser.PRESERVE:
				case MariaDBParser.PREV:
				case MariaDBParser.PROCESSLIST:
				case MariaDBParser.PROFILE:
				case MariaDBParser.PROFILES:
				case MariaDBParser.PROXY:
				case MariaDBParser.QUERY:
				case MariaDBParser.QUERY_RESPONSE_TIME:
				case MariaDBParser.QUICK:
				case MariaDBParser.REBUILD:
				case MariaDBParser.RECOVER:
				case MariaDBParser.RECURSIVE:
				case MariaDBParser.REDO_BUFFER_SIZE:
				case MariaDBParser.REDUNDANT:
				case MariaDBParser.RELAY:
				case MariaDBParser.RELAY_LOG_FILE:
				case MariaDBParser.RELAY_LOG_POS:
				case MariaDBParser.RELAYLOG:
				case MariaDBParser.REMOVE:
				case MariaDBParser.REORGANIZE:
				case MariaDBParser.REPAIR:
				case MariaDBParser.REPLICATE_DO_DB:
				case MariaDBParser.REPLICATE_DO_TABLE:
				case MariaDBParser.REPLICATE_IGNORE_DB:
				case MariaDBParser.REPLICATE_IGNORE_TABLE:
				case MariaDBParser.REPLICATE_REWRITE_DB:
				case MariaDBParser.REPLICATE_WILD_DO_TABLE:
				case MariaDBParser.REPLICATE_WILD_IGNORE_TABLE:
				case MariaDBParser.REPLICATION:
				case MariaDBParser.RESET:
				case MariaDBParser.RESTART:
				case MariaDBParser.RESUME:
				case MariaDBParser.RETURNED_SQLSTATE:
				case MariaDBParser.RETURNS:
				case MariaDBParser.REUSE:
				case MariaDBParser.ROLE:
				case MariaDBParser.ROLLBACK:
				case MariaDBParser.ROLLUP:
				case MariaDBParser.ROTATE:
				case MariaDBParser.ROW:
				case MariaDBParser.ROWS:
				case MariaDBParser.ROW_FORMAT:
				case MariaDBParser.RTREE:
				case MariaDBParser.SAVEPOINT:
				case MariaDBParser.SCHEDULE:
				case MariaDBParser.SECURITY:
				case MariaDBParser.SEQUENCE:
				case MariaDBParser.SERVER:
				case MariaDBParser.SESSION:
				case MariaDBParser.SHARE:
				case MariaDBParser.SHARED:
				case MariaDBParser.SIGNED:
				case MariaDBParser.SIMPLE:
				case MariaDBParser.SLAVE:
				case MariaDBParser.SLAVES:
				case MariaDBParser.SLOW:
				case MariaDBParser.SNAPSHOT:
				case MariaDBParser.SOCKET:
				case MariaDBParser.SOME:
				case MariaDBParser.SONAME:
				case MariaDBParser.SOUNDS:
				case MariaDBParser.SOURCE:
				case MariaDBParser.SQL_AFTER_GTIDS:
				case MariaDBParser.SQL_AFTER_MTS_GAPS:
				case MariaDBParser.SQL_BEFORE_GTIDS:
				case MariaDBParser.SQL_BUFFER_RESULT:
				case MariaDBParser.SQL_CACHE:
				case MariaDBParser.SQL_NO_CACHE:
				case MariaDBParser.SQL_THREAD:
				case MariaDBParser.START:
				case MariaDBParser.STARTS:
				case MariaDBParser.STATS_AUTO_RECALC:
				case MariaDBParser.STATS_PERSISTENT:
				case MariaDBParser.STATS_SAMPLE_PAGES:
				case MariaDBParser.STATUS:
				case MariaDBParser.STOP:
				case MariaDBParser.STORAGE:
				case MariaDBParser.STRING:
				case MariaDBParser.SUBCLASS_ORIGIN:
				case MariaDBParser.SUBJECT:
				case MariaDBParser.SUBPARTITION:
				case MariaDBParser.SUBPARTITIONS:
				case MariaDBParser.SUSPEND:
				case MariaDBParser.SWAPS:
				case MariaDBParser.SWITCHES:
				case MariaDBParser.TABLE_NAME:
				case MariaDBParser.TABLESPACE:
				case MariaDBParser.TABLE_TYPE:
				case MariaDBParser.TEMPORARY:
				case MariaDBParser.TEMPTABLE:
				case MariaDBParser.THAN:
				case MariaDBParser.TRADITIONAL:
				case MariaDBParser.TRANSACTION:
				case MariaDBParser.TRANSACTIONAL:
				case MariaDBParser.TRIGGERS:
				case MariaDBParser.TRUNCATE:
				case MariaDBParser.TYPES:
				case MariaDBParser.UNBOUNDED:
				case MariaDBParser.UNDEFINED:
				case MariaDBParser.UNDOFILE:
				case MariaDBParser.UNDO_BUFFER_SIZE:
				case MariaDBParser.UNINSTALL:
				case MariaDBParser.UNKNOWN:
				case MariaDBParser.UNTIL:
				case MariaDBParser.UPGRADE:
				case MariaDBParser.USER:
				case MariaDBParser.USE_FRM:
				case MariaDBParser.USER_RESOURCES:
				case MariaDBParser.VALIDATION:
				case MariaDBParser.VALUE:
				case MariaDBParser.VARIABLES:
				case MariaDBParser.VIEW:
				case MariaDBParser.VIRTUAL:
				case MariaDBParser.VISIBLE:
				case MariaDBParser.WAIT:
				case MariaDBParser.WARNINGS:
				case MariaDBParser.WITHOUT:
				case MariaDBParser.WORK:
				case MariaDBParser.WRAPPER:
				case MariaDBParser.WSREP_MEMBERSHIP:
				case MariaDBParser.WSREP_STATUS:
				case MariaDBParser.X509:
				case MariaDBParser.XA:
				case MariaDBParser.XML:
				case MariaDBParser.EUR:
				case MariaDBParser.USA:
				case MariaDBParser.JIS:
				case MariaDBParser.ISO:
				case MariaDBParser.INTERNAL:
				case MariaDBParser.QUARTER:
				case MariaDBParser.MONTH:
				case MariaDBParser.DAY:
				case MariaDBParser.HOUR:
				case MariaDBParser.MINUTE:
				case MariaDBParser.WEEK:
				case MariaDBParser.SECOND:
				case MariaDBParser.MICROSECOND:
				case MariaDBParser.USER_STATISTICS:
				case MariaDBParser.CLIENT_STATISTICS:
				case MariaDBParser.INDEX_STATISTICS:
				case MariaDBParser.TABLE_STATISTICS:
				case MariaDBParser.ADMIN:
				case MariaDBParser.AUDIT_ADMIN:
				case MariaDBParser.BACKUP_ADMIN:
				case MariaDBParser.BINLOG_ADMIN:
				case MariaDBParser.BINLOG_ENCRYPTION_ADMIN:
				case MariaDBParser.CLONE_ADMIN:
				case MariaDBParser.CONNECTION_ADMIN:
				case MariaDBParser.ENCRYPTION_KEY_ADMIN:
				case MariaDBParser.EXECUTE:
				case MariaDBParser.FILE:
				case MariaDBParser.FIREWALL_ADMIN:
				case MariaDBParser.FIREWALL_USER:
				case MariaDBParser.GROUP_REPLICATION_ADMIN:
				case MariaDBParser.INNODB_REDO_LOG_ARCHIVE:
				case MariaDBParser.INVOKE:
				case MariaDBParser.LAMBDA:
				case MariaDBParser.NDB_STORED_USER:
				case MariaDBParser.PASSWORDLESS_USER_ADMIN:
				case MariaDBParser.PERSIST_RO_VARIABLES_ADMIN:
				case MariaDBParser.PRIVILEGES:
				case MariaDBParser.PROCESS:
				case MariaDBParser.RELOAD:
				case MariaDBParser.REPLICATION_APPLIER:
				case MariaDBParser.REPLICATION_SLAVE_ADMIN:
				case MariaDBParser.RESOURCE_GROUP_ADMIN:
				case MariaDBParser.RESOURCE_GROUP_USER:
				case MariaDBParser.ROLE_ADMIN:
				case MariaDBParser.ROUTINE:
				case MariaDBParser.S3:
				case MariaDBParser.SESSION_VARIABLES_ADMIN:
				case MariaDBParser.SET_USER_ID:
				case MariaDBParser.SHOW_ROUTINE:
				case MariaDBParser.SHUTDOWN:
				case MariaDBParser.SUPER:
				case MariaDBParser.SYSTEM_VARIABLES_ADMIN:
				case MariaDBParser.TABLES:
				case MariaDBParser.TABLE_ENCRYPTION_ADMIN:
				case MariaDBParser.VERSION_TOKEN_ADMIN:
				case MariaDBParser.XA_RECOVER_ADMIN:
				case MariaDBParser.ARMSCII8:
				case MariaDBParser.ASCII:
				case MariaDBParser.BIG5:
				case MariaDBParser.CP1250:
				case MariaDBParser.CP1251:
				case MariaDBParser.CP1256:
				case MariaDBParser.CP1257:
				case MariaDBParser.CP850:
				case MariaDBParser.CP852:
				case MariaDBParser.CP866:
				case MariaDBParser.CP932:
				case MariaDBParser.DEC8:
				case MariaDBParser.EUCJPMS:
				case MariaDBParser.EUCKR:
				case MariaDBParser.GB18030:
				case MariaDBParser.GB2312:
				case MariaDBParser.GBK:
				case MariaDBParser.GEOSTD8:
				case MariaDBParser.GREEK:
				case MariaDBParser.HEBREW:
				case MariaDBParser.HP8:
				case MariaDBParser.KEYBCS2:
				case MariaDBParser.KOI8R:
				case MariaDBParser.KOI8U:
				case MariaDBParser.LATIN1:
				case MariaDBParser.LATIN2:
				case MariaDBParser.LATIN5:
				case MariaDBParser.LATIN7:
				case MariaDBParser.MACCE:
				case MariaDBParser.MACROMAN:
				case MariaDBParser.SJIS:
				case MariaDBParser.SWE7:
				case MariaDBParser.TIS620:
				case MariaDBParser.UCS2:
				case MariaDBParser.UJIS:
				case MariaDBParser.UTF16:
				case MariaDBParser.UTF16LE:
				case MariaDBParser.UTF32:
				case MariaDBParser.UTF8:
				case MariaDBParser.UTF8MB3:
				case MariaDBParser.UTF8MB4:
				case MariaDBParser.ARCHIVE:
				case MariaDBParser.BLACKHOLE:
				case MariaDBParser.CSV:
				case MariaDBParser.FEDERATED:
				case MariaDBParser.INNODB:
				case MariaDBParser.MEMORY:
				case MariaDBParser.MRG_MYISAM:
				case MariaDBParser.MYISAM:
				case MariaDBParser.NDB:
				case MariaDBParser.NDBCLUSTER:
				case MariaDBParser.PERFORMANCE_SCHEMA:
				case MariaDBParser.TOKUDB:
				case MariaDBParser.REPEATABLE:
				case MariaDBParser.COMMITTED:
				case MariaDBParser.UNCOMMITTED:
				case MariaDBParser.SERIALIZABLE:
				case MariaDBParser.GEOMETRYCOLLECTION:
				case MariaDBParser.LINESTRING:
				case MariaDBParser.MULTILINESTRING:
				case MariaDBParser.MULTIPOINT:
				case MariaDBParser.MULTIPOLYGON:
				case MariaDBParser.POINT:
				case MariaDBParser.POLYGON:
				case MariaDBParser.ABS:
				case MariaDBParser.ACOS:
				case MariaDBParser.ADDDATE:
				case MariaDBParser.ADDTIME:
				case MariaDBParser.AES_DECRYPT:
				case MariaDBParser.AES_ENCRYPT:
				case MariaDBParser.AREA:
				case MariaDBParser.ASBINARY:
				case MariaDBParser.ASIN:
				case MariaDBParser.ASTEXT:
				case MariaDBParser.ASWKB:
				case MariaDBParser.ASWKT:
				case MariaDBParser.ASYMMETRIC_DECRYPT:
				case MariaDBParser.ASYMMETRIC_DERIVE:
				case MariaDBParser.ASYMMETRIC_ENCRYPT:
				case MariaDBParser.ASYMMETRIC_SIGN:
				case MariaDBParser.ASYMMETRIC_VERIFY:
				case MariaDBParser.ATAN:
				case MariaDBParser.ATAN2:
				case MariaDBParser.BENCHMARK:
				case MariaDBParser.BIN:
				case MariaDBParser.BIT_COUNT:
				case MariaDBParser.BIT_LENGTH:
				case MariaDBParser.BUFFER:
				case MariaDBParser.CATALOG_NAME:
				case MariaDBParser.CEIL:
				case MariaDBParser.CEILING:
				case MariaDBParser.CENTROID:
				case MariaDBParser.CHARACTER_LENGTH:
				case MariaDBParser.CHARSET:
				case MariaDBParser.CHAR_LENGTH:
				case MariaDBParser.COERCIBILITY:
				case MariaDBParser.COLLATION:
				case MariaDBParser.COMPRESS:
				case MariaDBParser.CONCAT:
				case MariaDBParser.CONCAT_WS:
				case MariaDBParser.CONNECTION_ID:
				case MariaDBParser.CONV:
				case MariaDBParser.CONVERT_TZ:
				case MariaDBParser.COS:
				case MariaDBParser.COT:
				case MariaDBParser.CRC32:
				case MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY:
				case MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY:
				case MariaDBParser.CREATE_DH_PARAMETERS:
				case MariaDBParser.CREATE_DIGEST:
				case MariaDBParser.CROSSES:
				case MariaDBParser.DATEDIFF:
				case MariaDBParser.DATE_FORMAT:
				case MariaDBParser.DAYNAME:
				case MariaDBParser.DAYOFMONTH:
				case MariaDBParser.DAYOFWEEK:
				case MariaDBParser.DAYOFYEAR:
				case MariaDBParser.DECODE:
				case MariaDBParser.DEGREES:
				case MariaDBParser.DES_DECRYPT:
				case MariaDBParser.DES_ENCRYPT:
				case MariaDBParser.DIMENSION:
				case MariaDBParser.DISJOINT:
				case MariaDBParser.ELT:
				case MariaDBParser.ENCODE:
				case MariaDBParser.ENCRYPT:
				case MariaDBParser.ENDPOINT:
				case MariaDBParser.ENGINE_ATTRIBUTE:
				case MariaDBParser.ENVELOPE:
				case MariaDBParser.EQUALS:
				case MariaDBParser.EXP:
				case MariaDBParser.EXPORT_SET:
				case MariaDBParser.EXTERIORRING:
				case MariaDBParser.EXTRACTVALUE:
				case MariaDBParser.FIELD:
				case MariaDBParser.FIND_IN_SET:
				case MariaDBParser.FLOOR:
				case MariaDBParser.FORMAT:
				case MariaDBParser.FOUND_ROWS:
				case MariaDBParser.FROM_BASE64:
				case MariaDBParser.FROM_DAYS:
				case MariaDBParser.FROM_UNIXTIME:
				case MariaDBParser.GEOMCOLLFROMTEXT:
				case MariaDBParser.GEOMCOLLFROMWKB:
				case MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT:
				case MariaDBParser.GEOMETRYCOLLECTIONFROMWKB:
				case MariaDBParser.GEOMETRYFROMTEXT:
				case MariaDBParser.GEOMETRYFROMWKB:
				case MariaDBParser.GEOMETRYN:
				case MariaDBParser.GEOMETRYTYPE:
				case MariaDBParser.GEOMFROMTEXT:
				case MariaDBParser.GEOMFROMWKB:
				case MariaDBParser.GET_FORMAT:
				case MariaDBParser.GET_LOCK:
				case MariaDBParser.GLENGTH:
				case MariaDBParser.GREATEST:
				case MariaDBParser.GTID_SUBSET:
				case MariaDBParser.GTID_SUBTRACT:
				case MariaDBParser.HEX:
				case MariaDBParser.IFNULL:
				case MariaDBParser.INET6_ATON:
				case MariaDBParser.INET6_NTOA:
				case MariaDBParser.INET_ATON:
				case MariaDBParser.INET_NTOA:
				case MariaDBParser.INSTR:
				case MariaDBParser.INTERIORRINGN:
				case MariaDBParser.INTERSECTS:
				case MariaDBParser.ISCLOSED:
				case MariaDBParser.ISEMPTY:
				case MariaDBParser.ISNULL:
				case MariaDBParser.ISSIMPLE:
				case MariaDBParser.IS_FREE_LOCK:
				case MariaDBParser.IS_IPV4:
				case MariaDBParser.IS_IPV4_COMPAT:
				case MariaDBParser.IS_IPV4_MAPPED:
				case MariaDBParser.IS_IPV6:
				case MariaDBParser.IS_USED_LOCK:
				case MariaDBParser.LAST_INSERT_ID:
				case MariaDBParser.LCASE:
				case MariaDBParser.LEAST:
				case MariaDBParser.LENGTH:
				case MariaDBParser.LINEFROMTEXT:
				case MariaDBParser.LINEFROMWKB:
				case MariaDBParser.LINESTRINGFROMTEXT:
				case MariaDBParser.LINESTRINGFROMWKB:
				case MariaDBParser.LN:
				case MariaDBParser.LOAD_FILE:
				case MariaDBParser.LOCATE:
				case MariaDBParser.LOG:
				case MariaDBParser.LOG10:
				case MariaDBParser.LOG2:
				case MariaDBParser.LOWER:
				case MariaDBParser.LPAD:
				case MariaDBParser.LTRIM:
				case MariaDBParser.MAKEDATE:
				case MariaDBParser.MAKETIME:
				case MariaDBParser.MAKE_SET:
				case MariaDBParser.MASTER_POS_WAIT:
				case MariaDBParser.MBRCONTAINS:
				case MariaDBParser.MBRDISJOINT:
				case MariaDBParser.MBREQUAL:
				case MariaDBParser.MBRINTERSECTS:
				case MariaDBParser.MBROVERLAPS:
				case MariaDBParser.MBRTOUCHES:
				case MariaDBParser.MBRWITHIN:
				case MariaDBParser.MD5:
				case MariaDBParser.MLINEFROMTEXT:
				case MariaDBParser.MLINEFROMWKB:
				case MariaDBParser.MONTHNAME:
				case MariaDBParser.MPOINTFROMTEXT:
				case MariaDBParser.MPOINTFROMWKB:
				case MariaDBParser.MPOLYFROMTEXT:
				case MariaDBParser.MPOLYFROMWKB:
				case MariaDBParser.MULTILINESTRINGFROMTEXT:
				case MariaDBParser.MULTILINESTRINGFROMWKB:
				case MariaDBParser.MULTIPOINTFROMTEXT:
				case MariaDBParser.MULTIPOINTFROMWKB:
				case MariaDBParser.MULTIPOLYGONFROMTEXT:
				case MariaDBParser.MULTIPOLYGONFROMWKB:
				case MariaDBParser.NAME_CONST:
				case MariaDBParser.NULLIF:
				case MariaDBParser.NUMGEOMETRIES:
				case MariaDBParser.NUMINTERIORRINGS:
				case MariaDBParser.NUMPOINTS:
				case MariaDBParser.OCT:
				case MariaDBParser.OCTET_LENGTH:
				case MariaDBParser.ORD:
				case MariaDBParser.OVERLAPS:
				case MariaDBParser.PERIOD_ADD:
				case MariaDBParser.PERIOD_DIFF:
				case MariaDBParser.PI:
				case MariaDBParser.POINTFROMTEXT:
				case MariaDBParser.POINTFROMWKB:
				case MariaDBParser.POINTN:
				case MariaDBParser.POLYFROMTEXT:
				case MariaDBParser.POLYFROMWKB:
				case MariaDBParser.POLYGONFROMTEXT:
				case MariaDBParser.POLYGONFROMWKB:
				case MariaDBParser.POW:
				case MariaDBParser.POWER:
				case MariaDBParser.QUOTE:
				case MariaDBParser.RADIANS:
				case MariaDBParser.RAND:
				case MariaDBParser.RANDOM_BYTES:
				case MariaDBParser.RELEASE_LOCK:
				case MariaDBParser.REVERSE:
				case MariaDBParser.ROUND:
				case MariaDBParser.ROW_COUNT:
				case MariaDBParser.RPAD:
				case MariaDBParser.RTRIM:
				case MariaDBParser.SEC_TO_TIME:
				case MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE:
				case MariaDBParser.SESSION_USER:
				case MariaDBParser.SHA:
				case MariaDBParser.SHA1:
				case MariaDBParser.SHA2:
				case MariaDBParser.SCHEMA_NAME:
				case MariaDBParser.SIGN:
				case MariaDBParser.SIN:
				case MariaDBParser.SLEEP:
				case MariaDBParser.SOUNDEX:
				case MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS:
				case MariaDBParser.SQRT:
				case MariaDBParser.SRID:
				case MariaDBParser.STARTPOINT:
				case MariaDBParser.STRCMP:
				case MariaDBParser.STR_TO_DATE:
				case MariaDBParser.ST_AREA:
				case MariaDBParser.ST_ASBINARY:
				case MariaDBParser.ST_ASTEXT:
				case MariaDBParser.ST_ASWKB:
				case MariaDBParser.ST_ASWKT:
				case MariaDBParser.ST_BUFFER:
				case MariaDBParser.ST_CENTROID:
				case MariaDBParser.ST_CONTAINS:
				case MariaDBParser.ST_CROSSES:
				case MariaDBParser.ST_DIFFERENCE:
				case MariaDBParser.ST_DIMENSION:
				case MariaDBParser.ST_DISJOINT:
				case MariaDBParser.ST_DISTANCE:
				case MariaDBParser.ST_ENDPOINT:
				case MariaDBParser.ST_ENVELOPE:
				case MariaDBParser.ST_EQUALS:
				case MariaDBParser.ST_EXTERIORRING:
				case MariaDBParser.ST_GEOMCOLLFROMTEXT:
				case MariaDBParser.ST_GEOMCOLLFROMTXT:
				case MariaDBParser.ST_GEOMCOLLFROMWKB:
				case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
				case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB:
				case MariaDBParser.ST_GEOMETRYFROMTEXT:
				case MariaDBParser.ST_GEOMETRYFROMWKB:
				case MariaDBParser.ST_GEOMETRYN:
				case MariaDBParser.ST_GEOMETRYTYPE:
				case MariaDBParser.ST_GEOMFROMTEXT:
				case MariaDBParser.ST_GEOMFROMWKB:
				case MariaDBParser.ST_INTERIORRINGN:
				case MariaDBParser.ST_INTERSECTION:
				case MariaDBParser.ST_INTERSECTS:
				case MariaDBParser.ST_ISCLOSED:
				case MariaDBParser.ST_ISEMPTY:
				case MariaDBParser.ST_ISSIMPLE:
				case MariaDBParser.ST_LINEFROMTEXT:
				case MariaDBParser.ST_LINEFROMWKB:
				case MariaDBParser.ST_LINESTRINGFROMTEXT:
				case MariaDBParser.ST_LINESTRINGFROMWKB:
				case MariaDBParser.ST_NUMGEOMETRIES:
				case MariaDBParser.ST_NUMINTERIORRING:
				case MariaDBParser.ST_NUMINTERIORRINGS:
				case MariaDBParser.ST_NUMPOINTS:
				case MariaDBParser.ST_OVERLAPS:
				case MariaDBParser.ST_POINTFROMTEXT:
				case MariaDBParser.ST_POINTFROMWKB:
				case MariaDBParser.ST_POINTN:
				case MariaDBParser.ST_POLYFROMTEXT:
				case MariaDBParser.ST_POLYFROMWKB:
				case MariaDBParser.ST_POLYGONFROMTEXT:
				case MariaDBParser.ST_POLYGONFROMWKB:
				case MariaDBParser.ST_SRID:
				case MariaDBParser.ST_STARTPOINT:
				case MariaDBParser.ST_SYMDIFFERENCE:
				case MariaDBParser.ST_TOUCHES:
				case MariaDBParser.ST_UNION:
				case MariaDBParser.ST_WITHIN:
				case MariaDBParser.ST_X:
				case MariaDBParser.ST_Y:
				case MariaDBParser.SUBDATE:
				case MariaDBParser.SUBSTRING_INDEX:
				case MariaDBParser.SUBTIME:
				case MariaDBParser.SYSTEM_USER:
				case MariaDBParser.TAN:
				case MariaDBParser.TIMEDIFF:
				case MariaDBParser.TIMESTAMPADD:
				case MariaDBParser.TIMESTAMPDIFF:
				case MariaDBParser.TIME_FORMAT:
				case MariaDBParser.TIME_TO_SEC:
				case MariaDBParser.TOUCHES:
				case MariaDBParser.TO_BASE64:
				case MariaDBParser.TO_DAYS:
				case MariaDBParser.TO_SECONDS:
				case MariaDBParser.UCASE:
				case MariaDBParser.UNCOMPRESS:
				case MariaDBParser.UNCOMPRESSED_LENGTH:
				case MariaDBParser.UNHEX:
				case MariaDBParser.UNIX_TIMESTAMP:
				case MariaDBParser.UPDATEXML:
				case MariaDBParser.UPPER:
				case MariaDBParser.UUID:
				case MariaDBParser.UUID_SHORT:
				case MariaDBParser.VALIDATE_PASSWORD_STRENGTH:
				case MariaDBParser.VERSION:
				case MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case MariaDBParser.WEEKDAY:
				case MariaDBParser.WEEKOFYEAR:
				case MariaDBParser.WEIGHT_STRING:
				case MariaDBParser.WITHIN:
				case MariaDBParser.YEARWEEK:
				case MariaDBParser.Y_FUNCTION:
				case MariaDBParser.X_FUNCTION:
				case MariaDBParser.VIA:
				case MariaDBParser.LASTVAL:
				case MariaDBParser.NEXTVAL:
				case MariaDBParser.SETVAL:
				case MariaDBParser.PREVIOUS:
				case MariaDBParser.PERSISTENT:
				case MariaDBParser.BINLOG_MONITOR:
				case MariaDBParser.BINLOG_REPLAY:
				case MariaDBParser.FEDERATED_ADMIN:
				case MariaDBParser.READ_ONLY_ADMIN:
				case MariaDBParser.REPLICA:
				case MariaDBParser.REPLICAS:
				case MariaDBParser.REPLICATION_MASTER_ADMIN:
				case MariaDBParser.MONITOR:
				case MariaDBParser.READ_ONLY:
				case MariaDBParser.REPLAY:
				case MariaDBParser.MOD:
				case MariaDBParser.CHARSET_REVERSE_QOUTE_STRING:
				case MariaDBParser.STRING_LITERAL:
				case MariaDBParser.ID:
					{
					this.state = 6276;
					_localctx._partitionList = this.uidList();
					}
					break;
				case MariaDBParser.ALL:
					{
					this.state = 6277;
					this.match(MariaDBParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 6280;
				this.match(MariaDBParser.RR_BRACKET);
				}
			}

			this.state = 6290;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 930, this._ctx) ) {
			case 1:
				{
				this.state = 6284;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.INDEX || _la === MariaDBParser.KEY) {
					{
					this.state = 6283;
					_localctx._indexFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MariaDBParser.INDEX || _la === MariaDBParser.KEY)) {
						_localctx._indexFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 6286;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 6287;
				_localctx._indexList = this.uidList();
				this.state = 6288;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;
			}
			this.state = 6294;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.IGNORE) {
				{
				this.state = 6292;
				this.match(MariaDBParser.IGNORE);
				this.state = 6293;
				this.match(MariaDBParser.LEAVES);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public simpleDescribeStatement(): SimpleDescribeStatementContext {
		let _localctx: SimpleDescribeStatementContext = new SimpleDescribeStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 534, MariaDBParser.RULE_simpleDescribeStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6296;
			_localctx._command = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(((((_la - 46)) & ~0x1F) === 0 && ((1 << (_la - 46)) & ((1 << (MariaDBParser.DESC - 46)) | (1 << (MariaDBParser.DESCRIBE - 46)) | (1 << (MariaDBParser.EXPLAIN - 46)))) !== 0))) {
				_localctx._command = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 6297;
			this.tableName();
			this.state = 6300;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 932, this._ctx) ) {
			case 1:
				{
				this.state = 6298;
				_localctx._column = this.uid();
				}
				break;

			case 2:
				{
				this.state = 6299;
				_localctx._pattern = this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fullDescribeStatement(): FullDescribeStatementContext {
		let _localctx: FullDescribeStatementContext = new FullDescribeStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 536, MariaDBParser.RULE_fullDescribeStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6302;
			_localctx._command = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(((((_la - 46)) & ~0x1F) === 0 && ((1 << (_la - 46)) & ((1 << (MariaDBParser.DESC - 46)) | (1 << (MariaDBParser.DESCRIBE - 46)) | (1 << (MariaDBParser.EXPLAIN - 46)))) !== 0))) {
				_localctx._command = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 6306;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.EXTENDED || _la === MariaDBParser.PARTITIONS || _la === MariaDBParser.FORMAT) {
				{
				this.state = 6303;
				_localctx._formatType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.EXTENDED || _la === MariaDBParser.PARTITIONS || _la === MariaDBParser.FORMAT)) {
					_localctx._formatType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6304;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				this.state = 6305;
				_localctx._formatValue = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.JSON || _la === MariaDBParser.TRADITIONAL)) {
					_localctx._formatValue = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 6308;
			this.describeObjectClause();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public formatJsonStatement(): FormatJsonStatementContext {
		let _localctx: FormatJsonStatementContext = new FormatJsonStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 538, MariaDBParser.RULE_formatJsonStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6310;
			this.match(MariaDBParser.FORMAT);
			this.state = 6311;
			this.match(MariaDBParser.EQUAL_SYMBOL);
			this.state = 6312;
			_localctx._formatValue = this.match(MariaDBParser.JSON);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public helpStatement(): HelpStatementContext {
		let _localctx: HelpStatementContext = new HelpStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 540, MariaDBParser.RULE_helpStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6314;
			this.match(MariaDBParser.HELP);
			this.state = 6315;
			this.match(MariaDBParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public useStatement(): UseStatementContext {
		let _localctx: UseStatementContext = new UseStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 542, MariaDBParser.RULE_useStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6317;
			this.match(MariaDBParser.USE);
			this.state = 6318;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public signalStatement(): SignalStatementContext {
		let _localctx: SignalStatementContext = new SignalStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 544, MariaDBParser.RULE_signalStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6320;
			this.match(MariaDBParser.SIGNAL);
			this.state = 6328;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.SQLSTATE:
				{
				{
				this.state = 6321;
				this.match(MariaDBParser.SQLSTATE);
				this.state = 6323;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.VALUE) {
					{
					this.state = 6322;
					this.match(MariaDBParser.VALUE);
					}
				}

				this.state = 6325;
				this.stringLiteral();
				}
				}
				break;
			case MariaDBParser.ID:
				{
				this.state = 6326;
				this.match(MariaDBParser.ID);
				}
				break;
			case MariaDBParser.REVERSE_QUOTE_ID:
				{
				this.state = 6327;
				this.match(MariaDBParser.REVERSE_QUOTE_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 6339;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 937, this._ctx) ) {
			case 1:
				{
				this.state = 6330;
				this.match(MariaDBParser.SET);
				this.state = 6331;
				this.signalConditionInformation();
				this.state = 6336;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 6332;
					this.match(MariaDBParser.COMMA);
					this.state = 6333;
					this.signalConditionInformation();
					}
					}
					this.state = 6338;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public resignalStatement(): ResignalStatementContext {
		let _localctx: ResignalStatementContext = new ResignalStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 546, MariaDBParser.RULE_resignalStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6341;
			this.match(MariaDBParser.RESIGNAL);
			this.state = 6349;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.SQLSTATE:
				{
				{
				this.state = 6342;
				this.match(MariaDBParser.SQLSTATE);
				this.state = 6344;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.VALUE) {
					{
					this.state = 6343;
					this.match(MariaDBParser.VALUE);
					}
				}

				this.state = 6346;
				this.stringLiteral();
				}
				}
				break;
			case MariaDBParser.ID:
				{
				this.state = 6347;
				this.match(MariaDBParser.ID);
				}
				break;
			case MariaDBParser.REVERSE_QUOTE_ID:
				{
				this.state = 6348;
				this.match(MariaDBParser.REVERSE_QUOTE_ID);
				}
				break;
			case MariaDBParser.EOF:
			case MariaDBParser.ALTER:
			case MariaDBParser.ANALYZE:
			case MariaDBParser.CALL:
			case MariaDBParser.CHANGE:
			case MariaDBParser.CHECK:
			case MariaDBParser.CREATE:
			case MariaDBParser.DELETE:
			case MariaDBParser.DESC:
			case MariaDBParser.DESCRIBE:
			case MariaDBParser.DROP:
			case MariaDBParser.EXPLAIN:
			case MariaDBParser.GET:
			case MariaDBParser.GRANT:
			case MariaDBParser.INSERT:
			case MariaDBParser.KILL:
			case MariaDBParser.LOAD:
			case MariaDBParser.LOCK:
			case MariaDBParser.OPTIMIZE:
			case MariaDBParser.PURGE:
			case MariaDBParser.RELEASE:
			case MariaDBParser.RENAME:
			case MariaDBParser.REPLACE:
			case MariaDBParser.RESIGNAL:
			case MariaDBParser.REVOKE:
			case MariaDBParser.SELECT:
			case MariaDBParser.SET:
			case MariaDBParser.SHOW:
			case MariaDBParser.SIGNAL:
			case MariaDBParser.UNLOCK:
			case MariaDBParser.UPDATE:
			case MariaDBParser.USE:
			case MariaDBParser.VALUES:
			case MariaDBParser.BEGIN:
			case MariaDBParser.BINLOG:
			case MariaDBParser.CACHE:
			case MariaDBParser.CHECKSUM:
			case MariaDBParser.COMMIT:
			case MariaDBParser.DEALLOCATE:
			case MariaDBParser.DO:
			case MariaDBParser.FLUSH:
			case MariaDBParser.HANDLER:
			case MariaDBParser.HELP:
			case MariaDBParser.INSTALL:
			case MariaDBParser.PREPARE:
			case MariaDBParser.REPAIR:
			case MariaDBParser.RESET:
			case MariaDBParser.ROLLBACK:
			case MariaDBParser.SAVEPOINT:
			case MariaDBParser.START:
			case MariaDBParser.STOP:
			case MariaDBParser.TRUNCATE:
			case MariaDBParser.UNINSTALL:
			case MariaDBParser.XA:
			case MariaDBParser.EXECUTE:
			case MariaDBParser.SHUTDOWN:
			case MariaDBParser.MINUS:
			case MariaDBParser.LR_BRACKET:
			case MariaDBParser.SEMI:
				break;
			default:
				break;
			}
			this.state = 6360;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 941, this._ctx) ) {
			case 1:
				{
				this.state = 6351;
				this.match(MariaDBParser.SET);
				this.state = 6352;
				this.signalConditionInformation();
				this.state = 6357;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 6353;
					this.match(MariaDBParser.COMMA);
					this.state = 6354;
					this.signalConditionInformation();
					}
					}
					this.state = 6359;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public signalConditionInformation(): SignalConditionInformationContext {
		let _localctx: SignalConditionInformationContext = new SignalConditionInformationContext(this._ctx, this.state);
		this.enterRule(_localctx, 548, MariaDBParser.RULE_signalConditionInformation);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6362;
			_la = this._input.LA(1);
			if (!(((((_la - 359)) & ~0x1F) === 0 && ((1 << (_la - 359)) & ((1 << (MariaDBParser.CLASS_ORIGIN - 359)) | (1 << (MariaDBParser.COLUMN_NAME - 359)) | (1 << (MariaDBParser.CONSTRAINT_CATALOG - 359)) | (1 << (MariaDBParser.CONSTRAINT_SCHEMA - 359)) | (1 << (MariaDBParser.CONSTRAINT_NAME - 359)) | (1 << (MariaDBParser.CURSOR_NAME - 359)))) !== 0) || _la === MariaDBParser.MESSAGE_TEXT || _la === MariaDBParser.MYSQL_ERRNO || _la === MariaDBParser.SUBCLASS_ORIGIN || _la === MariaDBParser.TABLE_NAME || _la === MariaDBParser.CATALOG_NAME || _la === MariaDBParser.SCHEMA_NAME)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 6363;
			this.match(MariaDBParser.EQUAL_SYMBOL);
			this.state = 6368;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.START_NATIONAL_STRING_LITERAL:
			case MariaDBParser.STRING_LITERAL:
			case MariaDBParser.STRING_CHARSET_NAME:
				{
				this.state = 6364;
				this.stringLiteral();
				}
				break;
			case MariaDBParser.DECIMAL_LITERAL:
				{
				this.state = 6365;
				this.match(MariaDBParser.DECIMAL_LITERAL);
				}
				break;
			case MariaDBParser.LOCAL_ID:
			case MariaDBParser.GLOBAL_ID:
				{
				this.state = 6366;
				this.mysqlVariable();
				}
				break;
			case MariaDBParser.ATTRIBUTE:
			case MariaDBParser.BODY:
			case MariaDBParser.BUCKETS:
			case MariaDBParser.CONDITION:
			case MariaDBParser.CURRENT:
			case MariaDBParser.CURRENT_ROLE:
			case MariaDBParser.CURRENT_USER:
			case MariaDBParser.DATABASE:
			case MariaDBParser.DEFAULT:
			case MariaDBParser.DIAGNOSTICS:
			case MariaDBParser.EMPTY:
			case MariaDBParser.EXCEPT:
			case MariaDBParser.GROUP:
			case MariaDBParser.IF:
			case MariaDBParser.IGNORED:
			case MariaDBParser.INSERT:
			case MariaDBParser.LATERAL:
			case MariaDBParser.LEFT:
			case MariaDBParser.LOCKED:
			case MariaDBParser.MAXVALUE:
			case MariaDBParser.MINVALUE:
			case MariaDBParser.NUMBER:
			case MariaDBParser.OPTIONAL:
			case MariaDBParser.ORDER:
			case MariaDBParser.PRIMARY:
			case MariaDBParser.PACKAGE:
			case MariaDBParser.REPLACE:
			case MariaDBParser.RIGHT:
			case MariaDBParser.SCHEMA:
			case MariaDBParser.SKIP_:
			case MariaDBParser.STACKED:
			case MariaDBParser.STATEMENT:
			case MariaDBParser.DATE:
			case MariaDBParser.TIME:
			case MariaDBParser.TIMESTAMP:
			case MariaDBParser.DATETIME:
			case MariaDBParser.YEAR:
			case MariaDBParser.BINARY:
			case MariaDBParser.TEXT:
			case MariaDBParser.ENUM:
			case MariaDBParser.SERIAL:
			case MariaDBParser.JSON_ARRAY:
			case MariaDBParser.JSON_ARRAYAGG:
			case MariaDBParser.JSON_ARRAY_APPEND:
			case MariaDBParser.JSON_ARRAY_INSERT:
			case MariaDBParser.JSON_CONTAINS:
			case MariaDBParser.JSON_CONTAINS_PATH:
			case MariaDBParser.JSON_DEPTH:
			case MariaDBParser.JSON_EXTRACT:
			case MariaDBParser.JSON_INSERT:
			case MariaDBParser.JSON_KEYS:
			case MariaDBParser.JSON_LENGTH:
			case MariaDBParser.JSON_MERGE:
			case MariaDBParser.JSON_MERGE_PATCH:
			case MariaDBParser.JSON_MERGE_PRESERVE:
			case MariaDBParser.JSON_OBJECT:
			case MariaDBParser.JSON_OBJECTAGG:
			case MariaDBParser.JSON_OVERLAPS:
			case MariaDBParser.JSON_PRETTY:
			case MariaDBParser.JSON_QUOTE:
			case MariaDBParser.JSON_REMOVE:
			case MariaDBParser.JSON_REPLACE:
			case MariaDBParser.JSON_SCHEMA_VALID:
			case MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT:
			case MariaDBParser.JSON_SEARCH:
			case MariaDBParser.JSON_SET:
			case MariaDBParser.JSON_STORAGE_FREE:
			case MariaDBParser.JSON_STORAGE_SIZE:
			case MariaDBParser.JSON_TABLE:
			case MariaDBParser.JSON_TYPE:
			case MariaDBParser.JSON_UNQUOTE:
			case MariaDBParser.JSON_VALID:
			case MariaDBParser.JSON_VALUE:
			case MariaDBParser.NESTED:
			case MariaDBParser.ORDINALITY:
			case MariaDBParser.PATH:
			case MariaDBParser.AVG:
			case MariaDBParser.BIT_AND:
			case MariaDBParser.BIT_OR:
			case MariaDBParser.BIT_XOR:
			case MariaDBParser.COUNT:
			case MariaDBParser.CUME_DIST:
			case MariaDBParser.DENSE_RANK:
			case MariaDBParser.FIRST_VALUE:
			case MariaDBParser.GROUP_CONCAT:
			case MariaDBParser.LAG:
			case MariaDBParser.LAST_VALUE:
			case MariaDBParser.LEAD:
			case MariaDBParser.MAX:
			case MariaDBParser.MIN:
			case MariaDBParser.NTILE:
			case MariaDBParser.NTH_VALUE:
			case MariaDBParser.PERCENT_RANK:
			case MariaDBParser.RANK:
			case MariaDBParser.ROW_NUMBER:
			case MariaDBParser.STD:
			case MariaDBParser.STDDEV:
			case MariaDBParser.STDDEV_POP:
			case MariaDBParser.STDDEV_SAMP:
			case MariaDBParser.SUM:
			case MariaDBParser.VAR_POP:
			case MariaDBParser.VAR_SAMP:
			case MariaDBParser.VARIANCE:
			case MariaDBParser.CURRENT_DATE:
			case MariaDBParser.CURRENT_TIME:
			case MariaDBParser.CURRENT_TIMESTAMP:
			case MariaDBParser.LOCALTIME:
			case MariaDBParser.CURDATE:
			case MariaDBParser.CURTIME:
			case MariaDBParser.DATE_ADD:
			case MariaDBParser.DATE_SUB:
			case MariaDBParser.LOCALTIMESTAMP:
			case MariaDBParser.NOW:
			case MariaDBParser.POSITION:
			case MariaDBParser.SUBSTR:
			case MariaDBParser.SUBSTRING:
			case MariaDBParser.SYSDATE:
			case MariaDBParser.TRIM:
			case MariaDBParser.UTC_DATE:
			case MariaDBParser.UTC_TIME:
			case MariaDBParser.UTC_TIMESTAMP:
			case MariaDBParser.ACCOUNT:
			case MariaDBParser.ACTION:
			case MariaDBParser.AFTER:
			case MariaDBParser.AGGREGATE:
			case MariaDBParser.ALGORITHM:
			case MariaDBParser.ANY:
			case MariaDBParser.AT:
			case MariaDBParser.AUTHORS:
			case MariaDBParser.AUTOCOMMIT:
			case MariaDBParser.AUTOEXTEND_SIZE:
			case MariaDBParser.AUTO_INCREMENT:
			case MariaDBParser.AVG_ROW_LENGTH:
			case MariaDBParser.BEGIN:
			case MariaDBParser.BINLOG:
			case MariaDBParser.BIT:
			case MariaDBParser.BLOCK:
			case MariaDBParser.BOOL:
			case MariaDBParser.BOOLEAN:
			case MariaDBParser.BTREE:
			case MariaDBParser.CACHE:
			case MariaDBParser.CASCADED:
			case MariaDBParser.CHAIN:
			case MariaDBParser.CHANGED:
			case MariaDBParser.CHANNEL:
			case MariaDBParser.CHECKSUM:
			case MariaDBParser.PAGE_CHECKSUM:
			case MariaDBParser.CIPHER:
			case MariaDBParser.CLASS_ORIGIN:
			case MariaDBParser.CLIENT:
			case MariaDBParser.CLOSE:
			case MariaDBParser.CLUSTERING:
			case MariaDBParser.COALESCE:
			case MariaDBParser.CODE:
			case MariaDBParser.COLUMNS:
			case MariaDBParser.COLUMN_FORMAT:
			case MariaDBParser.COLUMN_NAME:
			case MariaDBParser.COMMENT:
			case MariaDBParser.COMMIT:
			case MariaDBParser.COMPACT:
			case MariaDBParser.COMPLETION:
			case MariaDBParser.COMPRESSED:
			case MariaDBParser.COMPRESSION:
			case MariaDBParser.CONCURRENT:
			case MariaDBParser.CONNECT:
			case MariaDBParser.CONNECTION:
			case MariaDBParser.CONSISTENT:
			case MariaDBParser.CONSTRAINT_CATALOG:
			case MariaDBParser.CONSTRAINT_SCHEMA:
			case MariaDBParser.CONSTRAINT_NAME:
			case MariaDBParser.CONTAINS:
			case MariaDBParser.CONTEXT:
			case MariaDBParser.CONTRIBUTORS:
			case MariaDBParser.COPY:
			case MariaDBParser.CPU:
			case MariaDBParser.CYCLE:
			case MariaDBParser.CURSOR_NAME:
			case MariaDBParser.DATA:
			case MariaDBParser.DATAFILE:
			case MariaDBParser.DEALLOCATE:
			case MariaDBParser.DEFAULT_AUTH:
			case MariaDBParser.DEFINER:
			case MariaDBParser.DELAY_KEY_WRITE:
			case MariaDBParser.DES_KEY_FILE:
			case MariaDBParser.DIRECTORY:
			case MariaDBParser.DISABLE:
			case MariaDBParser.DISCARD:
			case MariaDBParser.DISK:
			case MariaDBParser.DO:
			case MariaDBParser.DUMPFILE:
			case MariaDBParser.DUPLICATE:
			case MariaDBParser.DYNAMIC:
			case MariaDBParser.ENABLE:
			case MariaDBParser.ENCRYPTED:
			case MariaDBParser.ENCRYPTION:
			case MariaDBParser.ENCRYPTION_KEY_ID:
			case MariaDBParser.END:
			case MariaDBParser.ENDS:
			case MariaDBParser.ENGINE:
			case MariaDBParser.ENGINES:
			case MariaDBParser.ERROR:
			case MariaDBParser.ERRORS:
			case MariaDBParser.ESCAPE:
			case MariaDBParser.EVEN:
			case MariaDBParser.EVENT:
			case MariaDBParser.EVENTS:
			case MariaDBParser.EVERY:
			case MariaDBParser.EXCHANGE:
			case MariaDBParser.EXCLUSIVE:
			case MariaDBParser.EXPIRE:
			case MariaDBParser.EXPORT:
			case MariaDBParser.EXTENDED:
			case MariaDBParser.EXTENT_SIZE:
			case MariaDBParser.FAILED_LOGIN_ATTEMPTS:
			case MariaDBParser.FAST:
			case MariaDBParser.FAULTS:
			case MariaDBParser.FIELDS:
			case MariaDBParser.FILE_BLOCK_SIZE:
			case MariaDBParser.FILTER:
			case MariaDBParser.FIRST:
			case MariaDBParser.FIXED:
			case MariaDBParser.FLUSH:
			case MariaDBParser.FOLLOWS:
			case MariaDBParser.FOUND:
			case MariaDBParser.FULL:
			case MariaDBParser.FUNCTION:
			case MariaDBParser.GENERAL:
			case MariaDBParser.GLOBAL:
			case MariaDBParser.GRANTS:
			case MariaDBParser.GROUP_REPLICATION:
			case MariaDBParser.HANDLER:
			case MariaDBParser.HASH:
			case MariaDBParser.HELP:
			case MariaDBParser.HISTORY:
			case MariaDBParser.HOST:
			case MariaDBParser.HOSTS:
			case MariaDBParser.IDENTIFIED:
			case MariaDBParser.IGNORE_SERVER_IDS:
			case MariaDBParser.IMPORT:
			case MariaDBParser.INCREMENT:
			case MariaDBParser.INDEXES:
			case MariaDBParser.INITIAL_SIZE:
			case MariaDBParser.INPLACE:
			case MariaDBParser.INSERT_METHOD:
			case MariaDBParser.INSTALL:
			case MariaDBParser.INSTANCE:
			case MariaDBParser.INSTANT:
			case MariaDBParser.INVISIBLE:
			case MariaDBParser.INVOKER:
			case MariaDBParser.IO:
			case MariaDBParser.IO_THREAD:
			case MariaDBParser.IPC:
			case MariaDBParser.ISOLATION:
			case MariaDBParser.ISSUER:
			case MariaDBParser.JSON:
			case MariaDBParser.KEY_BLOCK_SIZE:
			case MariaDBParser.LANGUAGE:
			case MariaDBParser.LAST:
			case MariaDBParser.LEAVES:
			case MariaDBParser.LESS:
			case MariaDBParser.LEVEL:
			case MariaDBParser.LIST:
			case MariaDBParser.LOCAL:
			case MariaDBParser.LOCALES:
			case MariaDBParser.LOGFILE:
			case MariaDBParser.LOGS:
			case MariaDBParser.MASTER:
			case MariaDBParser.MASTER_AUTO_POSITION:
			case MariaDBParser.MASTER_CONNECT_RETRY:
			case MariaDBParser.MASTER_DELAY:
			case MariaDBParser.MASTER_HEARTBEAT_PERIOD:
			case MariaDBParser.MASTER_HOST:
			case MariaDBParser.MASTER_LOG_FILE:
			case MariaDBParser.MASTER_LOG_POS:
			case MariaDBParser.MASTER_PASSWORD:
			case MariaDBParser.MASTER_PORT:
			case MariaDBParser.MASTER_RETRY_COUNT:
			case MariaDBParser.MASTER_SSL:
			case MariaDBParser.MASTER_SSL_CA:
			case MariaDBParser.MASTER_SSL_CAPATH:
			case MariaDBParser.MASTER_SSL_CERT:
			case MariaDBParser.MASTER_SSL_CIPHER:
			case MariaDBParser.MASTER_SSL_CRL:
			case MariaDBParser.MASTER_SSL_CRLPATH:
			case MariaDBParser.MASTER_SSL_KEY:
			case MariaDBParser.MASTER_TLS_VERSION:
			case MariaDBParser.MASTER_USER:
			case MariaDBParser.MAX_CONNECTIONS_PER_HOUR:
			case MariaDBParser.MAX_QUERIES_PER_HOUR:
			case MariaDBParser.MAX_ROWS:
			case MariaDBParser.MAX_SIZE:
			case MariaDBParser.MAX_UPDATES_PER_HOUR:
			case MariaDBParser.MAX_USER_CONNECTIONS:
			case MariaDBParser.MEDIUM:
			case MariaDBParser.MEMBER:
			case MariaDBParser.MERGE:
			case MariaDBParser.MESSAGE_TEXT:
			case MariaDBParser.MID:
			case MariaDBParser.MIGRATE:
			case MariaDBParser.MIN_ROWS:
			case MariaDBParser.MODE:
			case MariaDBParser.MODIFY:
			case MariaDBParser.MUTEX:
			case MariaDBParser.MYSQL:
			case MariaDBParser.MYSQL_ERRNO:
			case MariaDBParser.NAME:
			case MariaDBParser.NAMES:
			case MariaDBParser.NCHAR:
			case MariaDBParser.NEVER:
			case MariaDBParser.NEXT:
			case MariaDBParser.NO:
			case MariaDBParser.NOCACHE:
			case MariaDBParser.NOCOPY:
			case MariaDBParser.NOCYCLE:
			case MariaDBParser.NOMAXVALUE:
			case MariaDBParser.NOMINVALUE:
			case MariaDBParser.NOWAIT:
			case MariaDBParser.NODEGROUP:
			case MariaDBParser.NONE:
			case MariaDBParser.ODBC:
			case MariaDBParser.OFFLINE:
			case MariaDBParser.OFFSET:
			case MariaDBParser.OF:
			case MariaDBParser.OJ:
			case MariaDBParser.OLD_PASSWORD:
			case MariaDBParser.ONE:
			case MariaDBParser.ONLINE:
			case MariaDBParser.ONLY:
			case MariaDBParser.OPEN:
			case MariaDBParser.OPTIMIZER_COSTS:
			case MariaDBParser.OPTIONS:
			case MariaDBParser.OWNER:
			case MariaDBParser.PACK_KEYS:
			case MariaDBParser.PAGE:
			case MariaDBParser.PARSER:
			case MariaDBParser.PARTIAL:
			case MariaDBParser.PARTITIONING:
			case MariaDBParser.PARTITIONS:
			case MariaDBParser.PASSWORD:
			case MariaDBParser.PASSWORD_LOCK_TIME:
			case MariaDBParser.PHASE:
			case MariaDBParser.PLUGIN:
			case MariaDBParser.PLUGIN_DIR:
			case MariaDBParser.PLUGINS:
			case MariaDBParser.PORT:
			case MariaDBParser.PRECEDES:
			case MariaDBParser.PREPARE:
			case MariaDBParser.PRESERVE:
			case MariaDBParser.PREV:
			case MariaDBParser.PROCESSLIST:
			case MariaDBParser.PROFILE:
			case MariaDBParser.PROFILES:
			case MariaDBParser.PROXY:
			case MariaDBParser.QUERY:
			case MariaDBParser.QUERY_RESPONSE_TIME:
			case MariaDBParser.QUICK:
			case MariaDBParser.REBUILD:
			case MariaDBParser.RECOVER:
			case MariaDBParser.RECURSIVE:
			case MariaDBParser.REDO_BUFFER_SIZE:
			case MariaDBParser.REDUNDANT:
			case MariaDBParser.RELAY:
			case MariaDBParser.RELAY_LOG_FILE:
			case MariaDBParser.RELAY_LOG_POS:
			case MariaDBParser.RELAYLOG:
			case MariaDBParser.REMOVE:
			case MariaDBParser.REORGANIZE:
			case MariaDBParser.REPAIR:
			case MariaDBParser.REPLICATE_DO_DB:
			case MariaDBParser.REPLICATE_DO_TABLE:
			case MariaDBParser.REPLICATE_IGNORE_DB:
			case MariaDBParser.REPLICATE_IGNORE_TABLE:
			case MariaDBParser.REPLICATE_REWRITE_DB:
			case MariaDBParser.REPLICATE_WILD_DO_TABLE:
			case MariaDBParser.REPLICATE_WILD_IGNORE_TABLE:
			case MariaDBParser.REPLICATION:
			case MariaDBParser.RESET:
			case MariaDBParser.RESTART:
			case MariaDBParser.RESUME:
			case MariaDBParser.RETURNED_SQLSTATE:
			case MariaDBParser.RETURNS:
			case MariaDBParser.REUSE:
			case MariaDBParser.ROLE:
			case MariaDBParser.ROLLBACK:
			case MariaDBParser.ROLLUP:
			case MariaDBParser.ROTATE:
			case MariaDBParser.ROW:
			case MariaDBParser.ROWS:
			case MariaDBParser.ROW_FORMAT:
			case MariaDBParser.RTREE:
			case MariaDBParser.SAVEPOINT:
			case MariaDBParser.SCHEDULE:
			case MariaDBParser.SECURITY:
			case MariaDBParser.SEQUENCE:
			case MariaDBParser.SERVER:
			case MariaDBParser.SESSION:
			case MariaDBParser.SHARE:
			case MariaDBParser.SHARED:
			case MariaDBParser.SIGNED:
			case MariaDBParser.SIMPLE:
			case MariaDBParser.SLAVE:
			case MariaDBParser.SLAVES:
			case MariaDBParser.SLOW:
			case MariaDBParser.SNAPSHOT:
			case MariaDBParser.SOCKET:
			case MariaDBParser.SOME:
			case MariaDBParser.SONAME:
			case MariaDBParser.SOUNDS:
			case MariaDBParser.SOURCE:
			case MariaDBParser.SQL_AFTER_GTIDS:
			case MariaDBParser.SQL_AFTER_MTS_GAPS:
			case MariaDBParser.SQL_BEFORE_GTIDS:
			case MariaDBParser.SQL_BUFFER_RESULT:
			case MariaDBParser.SQL_CACHE:
			case MariaDBParser.SQL_NO_CACHE:
			case MariaDBParser.SQL_THREAD:
			case MariaDBParser.START:
			case MariaDBParser.STARTS:
			case MariaDBParser.STATS_AUTO_RECALC:
			case MariaDBParser.STATS_PERSISTENT:
			case MariaDBParser.STATS_SAMPLE_PAGES:
			case MariaDBParser.STATUS:
			case MariaDBParser.STOP:
			case MariaDBParser.STORAGE:
			case MariaDBParser.STRING:
			case MariaDBParser.SUBCLASS_ORIGIN:
			case MariaDBParser.SUBJECT:
			case MariaDBParser.SUBPARTITION:
			case MariaDBParser.SUBPARTITIONS:
			case MariaDBParser.SUSPEND:
			case MariaDBParser.SWAPS:
			case MariaDBParser.SWITCHES:
			case MariaDBParser.TABLE_NAME:
			case MariaDBParser.TABLESPACE:
			case MariaDBParser.TABLE_TYPE:
			case MariaDBParser.TEMPORARY:
			case MariaDBParser.TEMPTABLE:
			case MariaDBParser.THAN:
			case MariaDBParser.TRADITIONAL:
			case MariaDBParser.TRANSACTION:
			case MariaDBParser.TRANSACTIONAL:
			case MariaDBParser.TRIGGERS:
			case MariaDBParser.TRUNCATE:
			case MariaDBParser.TYPES:
			case MariaDBParser.UNBOUNDED:
			case MariaDBParser.UNDEFINED:
			case MariaDBParser.UNDOFILE:
			case MariaDBParser.UNDO_BUFFER_SIZE:
			case MariaDBParser.UNINSTALL:
			case MariaDBParser.UNKNOWN:
			case MariaDBParser.UNTIL:
			case MariaDBParser.UPGRADE:
			case MariaDBParser.USER:
			case MariaDBParser.USE_FRM:
			case MariaDBParser.USER_RESOURCES:
			case MariaDBParser.VALIDATION:
			case MariaDBParser.VALUE:
			case MariaDBParser.VARIABLES:
			case MariaDBParser.VIEW:
			case MariaDBParser.VIRTUAL:
			case MariaDBParser.VISIBLE:
			case MariaDBParser.WAIT:
			case MariaDBParser.WARNINGS:
			case MariaDBParser.WITHOUT:
			case MariaDBParser.WORK:
			case MariaDBParser.WRAPPER:
			case MariaDBParser.WSREP_MEMBERSHIP:
			case MariaDBParser.WSREP_STATUS:
			case MariaDBParser.X509:
			case MariaDBParser.XA:
			case MariaDBParser.XML:
			case MariaDBParser.EUR:
			case MariaDBParser.USA:
			case MariaDBParser.JIS:
			case MariaDBParser.ISO:
			case MariaDBParser.INTERNAL:
			case MariaDBParser.QUARTER:
			case MariaDBParser.MONTH:
			case MariaDBParser.DAY:
			case MariaDBParser.HOUR:
			case MariaDBParser.MINUTE:
			case MariaDBParser.WEEK:
			case MariaDBParser.SECOND:
			case MariaDBParser.MICROSECOND:
			case MariaDBParser.USER_STATISTICS:
			case MariaDBParser.CLIENT_STATISTICS:
			case MariaDBParser.INDEX_STATISTICS:
			case MariaDBParser.TABLE_STATISTICS:
			case MariaDBParser.ADMIN:
			case MariaDBParser.AUDIT_ADMIN:
			case MariaDBParser.BACKUP_ADMIN:
			case MariaDBParser.BINLOG_ADMIN:
			case MariaDBParser.BINLOG_ENCRYPTION_ADMIN:
			case MariaDBParser.CLONE_ADMIN:
			case MariaDBParser.CONNECTION_ADMIN:
			case MariaDBParser.ENCRYPTION_KEY_ADMIN:
			case MariaDBParser.EXECUTE:
			case MariaDBParser.FILE:
			case MariaDBParser.FIREWALL_ADMIN:
			case MariaDBParser.FIREWALL_USER:
			case MariaDBParser.GROUP_REPLICATION_ADMIN:
			case MariaDBParser.INNODB_REDO_LOG_ARCHIVE:
			case MariaDBParser.INVOKE:
			case MariaDBParser.LAMBDA:
			case MariaDBParser.NDB_STORED_USER:
			case MariaDBParser.PASSWORDLESS_USER_ADMIN:
			case MariaDBParser.PERSIST_RO_VARIABLES_ADMIN:
			case MariaDBParser.PRIVILEGES:
			case MariaDBParser.PROCESS:
			case MariaDBParser.RELOAD:
			case MariaDBParser.REPLICATION_APPLIER:
			case MariaDBParser.REPLICATION_SLAVE_ADMIN:
			case MariaDBParser.RESOURCE_GROUP_ADMIN:
			case MariaDBParser.RESOURCE_GROUP_USER:
			case MariaDBParser.ROLE_ADMIN:
			case MariaDBParser.ROUTINE:
			case MariaDBParser.S3:
			case MariaDBParser.SESSION_VARIABLES_ADMIN:
			case MariaDBParser.SET_USER_ID:
			case MariaDBParser.SHOW_ROUTINE:
			case MariaDBParser.SHUTDOWN:
			case MariaDBParser.SUPER:
			case MariaDBParser.SYSTEM_VARIABLES_ADMIN:
			case MariaDBParser.TABLES:
			case MariaDBParser.TABLE_ENCRYPTION_ADMIN:
			case MariaDBParser.VERSION_TOKEN_ADMIN:
			case MariaDBParser.XA_RECOVER_ADMIN:
			case MariaDBParser.ARMSCII8:
			case MariaDBParser.ASCII:
			case MariaDBParser.BIG5:
			case MariaDBParser.CP1250:
			case MariaDBParser.CP1251:
			case MariaDBParser.CP1256:
			case MariaDBParser.CP1257:
			case MariaDBParser.CP850:
			case MariaDBParser.CP852:
			case MariaDBParser.CP866:
			case MariaDBParser.CP932:
			case MariaDBParser.DEC8:
			case MariaDBParser.EUCJPMS:
			case MariaDBParser.EUCKR:
			case MariaDBParser.GB18030:
			case MariaDBParser.GB2312:
			case MariaDBParser.GBK:
			case MariaDBParser.GEOSTD8:
			case MariaDBParser.GREEK:
			case MariaDBParser.HEBREW:
			case MariaDBParser.HP8:
			case MariaDBParser.KEYBCS2:
			case MariaDBParser.KOI8R:
			case MariaDBParser.KOI8U:
			case MariaDBParser.LATIN1:
			case MariaDBParser.LATIN2:
			case MariaDBParser.LATIN5:
			case MariaDBParser.LATIN7:
			case MariaDBParser.MACCE:
			case MariaDBParser.MACROMAN:
			case MariaDBParser.SJIS:
			case MariaDBParser.SWE7:
			case MariaDBParser.TIS620:
			case MariaDBParser.UCS2:
			case MariaDBParser.UJIS:
			case MariaDBParser.UTF16:
			case MariaDBParser.UTF16LE:
			case MariaDBParser.UTF32:
			case MariaDBParser.UTF8:
			case MariaDBParser.UTF8MB3:
			case MariaDBParser.UTF8MB4:
			case MariaDBParser.ARCHIVE:
			case MariaDBParser.BLACKHOLE:
			case MariaDBParser.CSV:
			case MariaDBParser.FEDERATED:
			case MariaDBParser.INNODB:
			case MariaDBParser.MEMORY:
			case MariaDBParser.MRG_MYISAM:
			case MariaDBParser.MYISAM:
			case MariaDBParser.NDB:
			case MariaDBParser.NDBCLUSTER:
			case MariaDBParser.PERFORMANCE_SCHEMA:
			case MariaDBParser.TOKUDB:
			case MariaDBParser.REPEATABLE:
			case MariaDBParser.COMMITTED:
			case MariaDBParser.UNCOMMITTED:
			case MariaDBParser.SERIALIZABLE:
			case MariaDBParser.GEOMETRYCOLLECTION:
			case MariaDBParser.LINESTRING:
			case MariaDBParser.MULTILINESTRING:
			case MariaDBParser.MULTIPOINT:
			case MariaDBParser.MULTIPOLYGON:
			case MariaDBParser.POINT:
			case MariaDBParser.POLYGON:
			case MariaDBParser.ABS:
			case MariaDBParser.ACOS:
			case MariaDBParser.ADDDATE:
			case MariaDBParser.ADDTIME:
			case MariaDBParser.AES_DECRYPT:
			case MariaDBParser.AES_ENCRYPT:
			case MariaDBParser.AREA:
			case MariaDBParser.ASBINARY:
			case MariaDBParser.ASIN:
			case MariaDBParser.ASTEXT:
			case MariaDBParser.ASWKB:
			case MariaDBParser.ASWKT:
			case MariaDBParser.ASYMMETRIC_DECRYPT:
			case MariaDBParser.ASYMMETRIC_DERIVE:
			case MariaDBParser.ASYMMETRIC_ENCRYPT:
			case MariaDBParser.ASYMMETRIC_SIGN:
			case MariaDBParser.ASYMMETRIC_VERIFY:
			case MariaDBParser.ATAN:
			case MariaDBParser.ATAN2:
			case MariaDBParser.BENCHMARK:
			case MariaDBParser.BIN:
			case MariaDBParser.BIT_COUNT:
			case MariaDBParser.BIT_LENGTH:
			case MariaDBParser.BUFFER:
			case MariaDBParser.CATALOG_NAME:
			case MariaDBParser.CEIL:
			case MariaDBParser.CEILING:
			case MariaDBParser.CENTROID:
			case MariaDBParser.CHARACTER_LENGTH:
			case MariaDBParser.CHARSET:
			case MariaDBParser.CHAR_LENGTH:
			case MariaDBParser.COERCIBILITY:
			case MariaDBParser.COLLATION:
			case MariaDBParser.COMPRESS:
			case MariaDBParser.CONCAT:
			case MariaDBParser.CONCAT_WS:
			case MariaDBParser.CONNECTION_ID:
			case MariaDBParser.CONV:
			case MariaDBParser.CONVERT_TZ:
			case MariaDBParser.COS:
			case MariaDBParser.COT:
			case MariaDBParser.CRC32:
			case MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY:
			case MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY:
			case MariaDBParser.CREATE_DH_PARAMETERS:
			case MariaDBParser.CREATE_DIGEST:
			case MariaDBParser.CROSSES:
			case MariaDBParser.DATEDIFF:
			case MariaDBParser.DATE_FORMAT:
			case MariaDBParser.DAYNAME:
			case MariaDBParser.DAYOFMONTH:
			case MariaDBParser.DAYOFWEEK:
			case MariaDBParser.DAYOFYEAR:
			case MariaDBParser.DECODE:
			case MariaDBParser.DEGREES:
			case MariaDBParser.DES_DECRYPT:
			case MariaDBParser.DES_ENCRYPT:
			case MariaDBParser.DIMENSION:
			case MariaDBParser.DISJOINT:
			case MariaDBParser.ELT:
			case MariaDBParser.ENCODE:
			case MariaDBParser.ENCRYPT:
			case MariaDBParser.ENDPOINT:
			case MariaDBParser.ENGINE_ATTRIBUTE:
			case MariaDBParser.ENVELOPE:
			case MariaDBParser.EQUALS:
			case MariaDBParser.EXP:
			case MariaDBParser.EXPORT_SET:
			case MariaDBParser.EXTERIORRING:
			case MariaDBParser.EXTRACTVALUE:
			case MariaDBParser.FIELD:
			case MariaDBParser.FIND_IN_SET:
			case MariaDBParser.FLOOR:
			case MariaDBParser.FORMAT:
			case MariaDBParser.FOUND_ROWS:
			case MariaDBParser.FROM_BASE64:
			case MariaDBParser.FROM_DAYS:
			case MariaDBParser.FROM_UNIXTIME:
			case MariaDBParser.GEOMCOLLFROMTEXT:
			case MariaDBParser.GEOMCOLLFROMWKB:
			case MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT:
			case MariaDBParser.GEOMETRYCOLLECTIONFROMWKB:
			case MariaDBParser.GEOMETRYFROMTEXT:
			case MariaDBParser.GEOMETRYFROMWKB:
			case MariaDBParser.GEOMETRYN:
			case MariaDBParser.GEOMETRYTYPE:
			case MariaDBParser.GEOMFROMTEXT:
			case MariaDBParser.GEOMFROMWKB:
			case MariaDBParser.GET_FORMAT:
			case MariaDBParser.GET_LOCK:
			case MariaDBParser.GLENGTH:
			case MariaDBParser.GREATEST:
			case MariaDBParser.GTID_SUBSET:
			case MariaDBParser.GTID_SUBTRACT:
			case MariaDBParser.HEX:
			case MariaDBParser.IFNULL:
			case MariaDBParser.INET6_ATON:
			case MariaDBParser.INET6_NTOA:
			case MariaDBParser.INET_ATON:
			case MariaDBParser.INET_NTOA:
			case MariaDBParser.INSTR:
			case MariaDBParser.INTERIORRINGN:
			case MariaDBParser.INTERSECTS:
			case MariaDBParser.ISCLOSED:
			case MariaDBParser.ISEMPTY:
			case MariaDBParser.ISNULL:
			case MariaDBParser.ISSIMPLE:
			case MariaDBParser.IS_FREE_LOCK:
			case MariaDBParser.IS_IPV4:
			case MariaDBParser.IS_IPV4_COMPAT:
			case MariaDBParser.IS_IPV4_MAPPED:
			case MariaDBParser.IS_IPV6:
			case MariaDBParser.IS_USED_LOCK:
			case MariaDBParser.LAST_INSERT_ID:
			case MariaDBParser.LCASE:
			case MariaDBParser.LEAST:
			case MariaDBParser.LENGTH:
			case MariaDBParser.LINEFROMTEXT:
			case MariaDBParser.LINEFROMWKB:
			case MariaDBParser.LINESTRINGFROMTEXT:
			case MariaDBParser.LINESTRINGFROMWKB:
			case MariaDBParser.LN:
			case MariaDBParser.LOAD_FILE:
			case MariaDBParser.LOCATE:
			case MariaDBParser.LOG:
			case MariaDBParser.LOG10:
			case MariaDBParser.LOG2:
			case MariaDBParser.LOWER:
			case MariaDBParser.LPAD:
			case MariaDBParser.LTRIM:
			case MariaDBParser.MAKEDATE:
			case MariaDBParser.MAKETIME:
			case MariaDBParser.MAKE_SET:
			case MariaDBParser.MASTER_POS_WAIT:
			case MariaDBParser.MBRCONTAINS:
			case MariaDBParser.MBRDISJOINT:
			case MariaDBParser.MBREQUAL:
			case MariaDBParser.MBRINTERSECTS:
			case MariaDBParser.MBROVERLAPS:
			case MariaDBParser.MBRTOUCHES:
			case MariaDBParser.MBRWITHIN:
			case MariaDBParser.MD5:
			case MariaDBParser.MLINEFROMTEXT:
			case MariaDBParser.MLINEFROMWKB:
			case MariaDBParser.MONTHNAME:
			case MariaDBParser.MPOINTFROMTEXT:
			case MariaDBParser.MPOINTFROMWKB:
			case MariaDBParser.MPOLYFROMTEXT:
			case MariaDBParser.MPOLYFROMWKB:
			case MariaDBParser.MULTILINESTRINGFROMTEXT:
			case MariaDBParser.MULTILINESTRINGFROMWKB:
			case MariaDBParser.MULTIPOINTFROMTEXT:
			case MariaDBParser.MULTIPOINTFROMWKB:
			case MariaDBParser.MULTIPOLYGONFROMTEXT:
			case MariaDBParser.MULTIPOLYGONFROMWKB:
			case MariaDBParser.NAME_CONST:
			case MariaDBParser.NULLIF:
			case MariaDBParser.NUMGEOMETRIES:
			case MariaDBParser.NUMINTERIORRINGS:
			case MariaDBParser.NUMPOINTS:
			case MariaDBParser.OCT:
			case MariaDBParser.OCTET_LENGTH:
			case MariaDBParser.ORD:
			case MariaDBParser.OVERLAPS:
			case MariaDBParser.PERIOD_ADD:
			case MariaDBParser.PERIOD_DIFF:
			case MariaDBParser.PI:
			case MariaDBParser.POINTFROMTEXT:
			case MariaDBParser.POINTFROMWKB:
			case MariaDBParser.POINTN:
			case MariaDBParser.POLYFROMTEXT:
			case MariaDBParser.POLYFROMWKB:
			case MariaDBParser.POLYGONFROMTEXT:
			case MariaDBParser.POLYGONFROMWKB:
			case MariaDBParser.POW:
			case MariaDBParser.POWER:
			case MariaDBParser.QUOTE:
			case MariaDBParser.RADIANS:
			case MariaDBParser.RAND:
			case MariaDBParser.RANDOM_BYTES:
			case MariaDBParser.RELEASE_LOCK:
			case MariaDBParser.REVERSE:
			case MariaDBParser.ROUND:
			case MariaDBParser.ROW_COUNT:
			case MariaDBParser.RPAD:
			case MariaDBParser.RTRIM:
			case MariaDBParser.SEC_TO_TIME:
			case MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE:
			case MariaDBParser.SESSION_USER:
			case MariaDBParser.SHA:
			case MariaDBParser.SHA1:
			case MariaDBParser.SHA2:
			case MariaDBParser.SCHEMA_NAME:
			case MariaDBParser.SIGN:
			case MariaDBParser.SIN:
			case MariaDBParser.SLEEP:
			case MariaDBParser.SOUNDEX:
			case MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS:
			case MariaDBParser.SQRT:
			case MariaDBParser.SRID:
			case MariaDBParser.STARTPOINT:
			case MariaDBParser.STRCMP:
			case MariaDBParser.STR_TO_DATE:
			case MariaDBParser.ST_AREA:
			case MariaDBParser.ST_ASBINARY:
			case MariaDBParser.ST_ASTEXT:
			case MariaDBParser.ST_ASWKB:
			case MariaDBParser.ST_ASWKT:
			case MariaDBParser.ST_BUFFER:
			case MariaDBParser.ST_CENTROID:
			case MariaDBParser.ST_CONTAINS:
			case MariaDBParser.ST_CROSSES:
			case MariaDBParser.ST_DIFFERENCE:
			case MariaDBParser.ST_DIMENSION:
			case MariaDBParser.ST_DISJOINT:
			case MariaDBParser.ST_DISTANCE:
			case MariaDBParser.ST_ENDPOINT:
			case MariaDBParser.ST_ENVELOPE:
			case MariaDBParser.ST_EQUALS:
			case MariaDBParser.ST_EXTERIORRING:
			case MariaDBParser.ST_GEOMCOLLFROMTEXT:
			case MariaDBParser.ST_GEOMCOLLFROMTXT:
			case MariaDBParser.ST_GEOMCOLLFROMWKB:
			case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
			case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB:
			case MariaDBParser.ST_GEOMETRYFROMTEXT:
			case MariaDBParser.ST_GEOMETRYFROMWKB:
			case MariaDBParser.ST_GEOMETRYN:
			case MariaDBParser.ST_GEOMETRYTYPE:
			case MariaDBParser.ST_GEOMFROMTEXT:
			case MariaDBParser.ST_GEOMFROMWKB:
			case MariaDBParser.ST_INTERIORRINGN:
			case MariaDBParser.ST_INTERSECTION:
			case MariaDBParser.ST_INTERSECTS:
			case MariaDBParser.ST_ISCLOSED:
			case MariaDBParser.ST_ISEMPTY:
			case MariaDBParser.ST_ISSIMPLE:
			case MariaDBParser.ST_LINEFROMTEXT:
			case MariaDBParser.ST_LINEFROMWKB:
			case MariaDBParser.ST_LINESTRINGFROMTEXT:
			case MariaDBParser.ST_LINESTRINGFROMWKB:
			case MariaDBParser.ST_NUMGEOMETRIES:
			case MariaDBParser.ST_NUMINTERIORRING:
			case MariaDBParser.ST_NUMINTERIORRINGS:
			case MariaDBParser.ST_NUMPOINTS:
			case MariaDBParser.ST_OVERLAPS:
			case MariaDBParser.ST_POINTFROMTEXT:
			case MariaDBParser.ST_POINTFROMWKB:
			case MariaDBParser.ST_POINTN:
			case MariaDBParser.ST_POLYFROMTEXT:
			case MariaDBParser.ST_POLYFROMWKB:
			case MariaDBParser.ST_POLYGONFROMTEXT:
			case MariaDBParser.ST_POLYGONFROMWKB:
			case MariaDBParser.ST_SRID:
			case MariaDBParser.ST_STARTPOINT:
			case MariaDBParser.ST_SYMDIFFERENCE:
			case MariaDBParser.ST_TOUCHES:
			case MariaDBParser.ST_UNION:
			case MariaDBParser.ST_WITHIN:
			case MariaDBParser.ST_X:
			case MariaDBParser.ST_Y:
			case MariaDBParser.SUBDATE:
			case MariaDBParser.SUBSTRING_INDEX:
			case MariaDBParser.SUBTIME:
			case MariaDBParser.SYSTEM_USER:
			case MariaDBParser.TAN:
			case MariaDBParser.TIMEDIFF:
			case MariaDBParser.TIMESTAMPADD:
			case MariaDBParser.TIMESTAMPDIFF:
			case MariaDBParser.TIME_FORMAT:
			case MariaDBParser.TIME_TO_SEC:
			case MariaDBParser.TOUCHES:
			case MariaDBParser.TO_BASE64:
			case MariaDBParser.TO_DAYS:
			case MariaDBParser.TO_SECONDS:
			case MariaDBParser.UCASE:
			case MariaDBParser.UNCOMPRESS:
			case MariaDBParser.UNCOMPRESSED_LENGTH:
			case MariaDBParser.UNHEX:
			case MariaDBParser.UNIX_TIMESTAMP:
			case MariaDBParser.UPDATEXML:
			case MariaDBParser.UPPER:
			case MariaDBParser.UUID:
			case MariaDBParser.UUID_SHORT:
			case MariaDBParser.VALIDATE_PASSWORD_STRENGTH:
			case MariaDBParser.VERSION:
			case MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case MariaDBParser.WEEKDAY:
			case MariaDBParser.WEEKOFYEAR:
			case MariaDBParser.WEIGHT_STRING:
			case MariaDBParser.WITHIN:
			case MariaDBParser.YEARWEEK:
			case MariaDBParser.Y_FUNCTION:
			case MariaDBParser.X_FUNCTION:
			case MariaDBParser.VIA:
			case MariaDBParser.LASTVAL:
			case MariaDBParser.NEXTVAL:
			case MariaDBParser.SETVAL:
			case MariaDBParser.PREVIOUS:
			case MariaDBParser.PERSISTENT:
			case MariaDBParser.BINLOG_MONITOR:
			case MariaDBParser.BINLOG_REPLAY:
			case MariaDBParser.FEDERATED_ADMIN:
			case MariaDBParser.READ_ONLY_ADMIN:
			case MariaDBParser.REPLICA:
			case MariaDBParser.REPLICAS:
			case MariaDBParser.REPLICATION_MASTER_ADMIN:
			case MariaDBParser.MONITOR:
			case MariaDBParser.READ_ONLY:
			case MariaDBParser.REPLAY:
			case MariaDBParser.MOD:
			case MariaDBParser.ID:
				{
				this.state = 6367;
				this.simpleId();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public diagnosticsStatement(): DiagnosticsStatementContext {
		let _localctx: DiagnosticsStatementContext = new DiagnosticsStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 550, MariaDBParser.RULE_diagnosticsStatement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6370;
			this.match(MariaDBParser.GET);
			this.state = 6372;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.CURRENT || _la === MariaDBParser.STACKED) {
				{
				this.state = 6371;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.CURRENT || _la === MariaDBParser.STACKED)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 6374;
			this.match(MariaDBParser.DIAGNOSTICS);
			this.state = 6406;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 947, this._ctx) ) {
			case 1:
				{
				{
				this.state = 6375;
				this.variableClause();
				this.state = 6376;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				this.state = 6377;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.NUMBER || _la === MariaDBParser.ROW_COUNT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6385;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 6378;
					this.match(MariaDBParser.COMMA);
					this.state = 6379;
					this.variableClause();
					this.state = 6380;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					this.state = 6381;
					_la = this._input.LA(1);
					if (!(_la === MariaDBParser.NUMBER || _la === MariaDBParser.ROW_COUNT)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					}
					this.state = 6387;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				break;

			case 2:
				{
				{
				this.state = 6388;
				this.match(MariaDBParser.CONDITION);
				this.state = 6391;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.ZERO_DECIMAL:
				case MariaDBParser.ONE_DECIMAL:
				case MariaDBParser.TWO_DECIMAL:
				case MariaDBParser.DECIMAL_LITERAL:
				case MariaDBParser.REAL_LITERAL:
					{
					this.state = 6389;
					this.decimalLiteral();
					}
					break;
				case MariaDBParser.ATTRIBUTE:
				case MariaDBParser.BODY:
				case MariaDBParser.BUCKETS:
				case MariaDBParser.CONDITION:
				case MariaDBParser.CURRENT:
				case MariaDBParser.CURRENT_ROLE:
				case MariaDBParser.CURRENT_USER:
				case MariaDBParser.DATABASE:
				case MariaDBParser.DEFAULT:
				case MariaDBParser.DIAGNOSTICS:
				case MariaDBParser.EMPTY:
				case MariaDBParser.EXCEPT:
				case MariaDBParser.GROUP:
				case MariaDBParser.IF:
				case MariaDBParser.IGNORED:
				case MariaDBParser.INSERT:
				case MariaDBParser.LATERAL:
				case MariaDBParser.LEFT:
				case MariaDBParser.LOCKED:
				case MariaDBParser.MAXVALUE:
				case MariaDBParser.MINVALUE:
				case MariaDBParser.NUMBER:
				case MariaDBParser.OPTIONAL:
				case MariaDBParser.ORDER:
				case MariaDBParser.PRIMARY:
				case MariaDBParser.PACKAGE:
				case MariaDBParser.REPLACE:
				case MariaDBParser.RIGHT:
				case MariaDBParser.SCHEMA:
				case MariaDBParser.SKIP_:
				case MariaDBParser.STACKED:
				case MariaDBParser.STATEMENT:
				case MariaDBParser.DATE:
				case MariaDBParser.TIME:
				case MariaDBParser.TIMESTAMP:
				case MariaDBParser.DATETIME:
				case MariaDBParser.YEAR:
				case MariaDBParser.BINARY:
				case MariaDBParser.TEXT:
				case MariaDBParser.ENUM:
				case MariaDBParser.SERIAL:
				case MariaDBParser.JSON_ARRAY:
				case MariaDBParser.JSON_ARRAYAGG:
				case MariaDBParser.JSON_ARRAY_APPEND:
				case MariaDBParser.JSON_ARRAY_INSERT:
				case MariaDBParser.JSON_CONTAINS:
				case MariaDBParser.JSON_CONTAINS_PATH:
				case MariaDBParser.JSON_DEPTH:
				case MariaDBParser.JSON_EXTRACT:
				case MariaDBParser.JSON_INSERT:
				case MariaDBParser.JSON_KEYS:
				case MariaDBParser.JSON_LENGTH:
				case MariaDBParser.JSON_MERGE:
				case MariaDBParser.JSON_MERGE_PATCH:
				case MariaDBParser.JSON_MERGE_PRESERVE:
				case MariaDBParser.JSON_OBJECT:
				case MariaDBParser.JSON_OBJECTAGG:
				case MariaDBParser.JSON_OVERLAPS:
				case MariaDBParser.JSON_PRETTY:
				case MariaDBParser.JSON_QUOTE:
				case MariaDBParser.JSON_REMOVE:
				case MariaDBParser.JSON_REPLACE:
				case MariaDBParser.JSON_SCHEMA_VALID:
				case MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT:
				case MariaDBParser.JSON_SEARCH:
				case MariaDBParser.JSON_SET:
				case MariaDBParser.JSON_STORAGE_FREE:
				case MariaDBParser.JSON_STORAGE_SIZE:
				case MariaDBParser.JSON_TABLE:
				case MariaDBParser.JSON_TYPE:
				case MariaDBParser.JSON_UNQUOTE:
				case MariaDBParser.JSON_VALID:
				case MariaDBParser.JSON_VALUE:
				case MariaDBParser.NESTED:
				case MariaDBParser.ORDINALITY:
				case MariaDBParser.PATH:
				case MariaDBParser.AVG:
				case MariaDBParser.BIT_AND:
				case MariaDBParser.BIT_OR:
				case MariaDBParser.BIT_XOR:
				case MariaDBParser.COUNT:
				case MariaDBParser.CUME_DIST:
				case MariaDBParser.DENSE_RANK:
				case MariaDBParser.FIRST_VALUE:
				case MariaDBParser.GROUP_CONCAT:
				case MariaDBParser.LAG:
				case MariaDBParser.LAST_VALUE:
				case MariaDBParser.LEAD:
				case MariaDBParser.MAX:
				case MariaDBParser.MIN:
				case MariaDBParser.NTILE:
				case MariaDBParser.NTH_VALUE:
				case MariaDBParser.PERCENT_RANK:
				case MariaDBParser.RANK:
				case MariaDBParser.ROW_NUMBER:
				case MariaDBParser.STD:
				case MariaDBParser.STDDEV:
				case MariaDBParser.STDDEV_POP:
				case MariaDBParser.STDDEV_SAMP:
				case MariaDBParser.SUM:
				case MariaDBParser.VAR_POP:
				case MariaDBParser.VAR_SAMP:
				case MariaDBParser.VARIANCE:
				case MariaDBParser.CURRENT_DATE:
				case MariaDBParser.CURRENT_TIME:
				case MariaDBParser.CURRENT_TIMESTAMP:
				case MariaDBParser.LOCALTIME:
				case MariaDBParser.CURDATE:
				case MariaDBParser.CURTIME:
				case MariaDBParser.DATE_ADD:
				case MariaDBParser.DATE_SUB:
				case MariaDBParser.LOCALTIMESTAMP:
				case MariaDBParser.NOW:
				case MariaDBParser.POSITION:
				case MariaDBParser.SUBSTR:
				case MariaDBParser.SUBSTRING:
				case MariaDBParser.SYSDATE:
				case MariaDBParser.TRIM:
				case MariaDBParser.UTC_DATE:
				case MariaDBParser.UTC_TIME:
				case MariaDBParser.UTC_TIMESTAMP:
				case MariaDBParser.ACCOUNT:
				case MariaDBParser.ACTION:
				case MariaDBParser.AFTER:
				case MariaDBParser.AGGREGATE:
				case MariaDBParser.ALGORITHM:
				case MariaDBParser.ANY:
				case MariaDBParser.AT:
				case MariaDBParser.AUTHORS:
				case MariaDBParser.AUTOCOMMIT:
				case MariaDBParser.AUTOEXTEND_SIZE:
				case MariaDBParser.AUTO_INCREMENT:
				case MariaDBParser.AVG_ROW_LENGTH:
				case MariaDBParser.BEGIN:
				case MariaDBParser.BINLOG:
				case MariaDBParser.BIT:
				case MariaDBParser.BLOCK:
				case MariaDBParser.BOOL:
				case MariaDBParser.BOOLEAN:
				case MariaDBParser.BTREE:
				case MariaDBParser.CACHE:
				case MariaDBParser.CASCADED:
				case MariaDBParser.CHAIN:
				case MariaDBParser.CHANGED:
				case MariaDBParser.CHANNEL:
				case MariaDBParser.CHECKSUM:
				case MariaDBParser.PAGE_CHECKSUM:
				case MariaDBParser.CIPHER:
				case MariaDBParser.CLASS_ORIGIN:
				case MariaDBParser.CLIENT:
				case MariaDBParser.CLOSE:
				case MariaDBParser.CLUSTERING:
				case MariaDBParser.COALESCE:
				case MariaDBParser.CODE:
				case MariaDBParser.COLUMNS:
				case MariaDBParser.COLUMN_FORMAT:
				case MariaDBParser.COLUMN_NAME:
				case MariaDBParser.COMMENT:
				case MariaDBParser.COMMIT:
				case MariaDBParser.COMPACT:
				case MariaDBParser.COMPLETION:
				case MariaDBParser.COMPRESSED:
				case MariaDBParser.COMPRESSION:
				case MariaDBParser.CONCURRENT:
				case MariaDBParser.CONNECT:
				case MariaDBParser.CONNECTION:
				case MariaDBParser.CONSISTENT:
				case MariaDBParser.CONSTRAINT_CATALOG:
				case MariaDBParser.CONSTRAINT_SCHEMA:
				case MariaDBParser.CONSTRAINT_NAME:
				case MariaDBParser.CONTAINS:
				case MariaDBParser.CONTEXT:
				case MariaDBParser.CONTRIBUTORS:
				case MariaDBParser.COPY:
				case MariaDBParser.CPU:
				case MariaDBParser.CYCLE:
				case MariaDBParser.CURSOR_NAME:
				case MariaDBParser.DATA:
				case MariaDBParser.DATAFILE:
				case MariaDBParser.DEALLOCATE:
				case MariaDBParser.DEFAULT_AUTH:
				case MariaDBParser.DEFINER:
				case MariaDBParser.DELAY_KEY_WRITE:
				case MariaDBParser.DES_KEY_FILE:
				case MariaDBParser.DIRECTORY:
				case MariaDBParser.DISABLE:
				case MariaDBParser.DISCARD:
				case MariaDBParser.DISK:
				case MariaDBParser.DO:
				case MariaDBParser.DUMPFILE:
				case MariaDBParser.DUPLICATE:
				case MariaDBParser.DYNAMIC:
				case MariaDBParser.ENABLE:
				case MariaDBParser.ENCRYPTED:
				case MariaDBParser.ENCRYPTION:
				case MariaDBParser.ENCRYPTION_KEY_ID:
				case MariaDBParser.END:
				case MariaDBParser.ENDS:
				case MariaDBParser.ENGINE:
				case MariaDBParser.ENGINES:
				case MariaDBParser.ERROR:
				case MariaDBParser.ERRORS:
				case MariaDBParser.ESCAPE:
				case MariaDBParser.EVEN:
				case MariaDBParser.EVENT:
				case MariaDBParser.EVENTS:
				case MariaDBParser.EVERY:
				case MariaDBParser.EXCHANGE:
				case MariaDBParser.EXCLUSIVE:
				case MariaDBParser.EXPIRE:
				case MariaDBParser.EXPORT:
				case MariaDBParser.EXTENDED:
				case MariaDBParser.EXTENT_SIZE:
				case MariaDBParser.FAILED_LOGIN_ATTEMPTS:
				case MariaDBParser.FAST:
				case MariaDBParser.FAULTS:
				case MariaDBParser.FIELDS:
				case MariaDBParser.FILE_BLOCK_SIZE:
				case MariaDBParser.FILTER:
				case MariaDBParser.FIRST:
				case MariaDBParser.FIXED:
				case MariaDBParser.FLUSH:
				case MariaDBParser.FOLLOWS:
				case MariaDBParser.FOUND:
				case MariaDBParser.FULL:
				case MariaDBParser.FUNCTION:
				case MariaDBParser.GENERAL:
				case MariaDBParser.GLOBAL:
				case MariaDBParser.GRANTS:
				case MariaDBParser.GROUP_REPLICATION:
				case MariaDBParser.HANDLER:
				case MariaDBParser.HASH:
				case MariaDBParser.HELP:
				case MariaDBParser.HISTORY:
				case MariaDBParser.HOST:
				case MariaDBParser.HOSTS:
				case MariaDBParser.IDENTIFIED:
				case MariaDBParser.IGNORE_SERVER_IDS:
				case MariaDBParser.IMPORT:
				case MariaDBParser.INCREMENT:
				case MariaDBParser.INDEXES:
				case MariaDBParser.INITIAL_SIZE:
				case MariaDBParser.INPLACE:
				case MariaDBParser.INSERT_METHOD:
				case MariaDBParser.INSTALL:
				case MariaDBParser.INSTANCE:
				case MariaDBParser.INSTANT:
				case MariaDBParser.INVISIBLE:
				case MariaDBParser.INVOKER:
				case MariaDBParser.IO:
				case MariaDBParser.IO_THREAD:
				case MariaDBParser.IPC:
				case MariaDBParser.ISOLATION:
				case MariaDBParser.ISSUER:
				case MariaDBParser.JSON:
				case MariaDBParser.KEY_BLOCK_SIZE:
				case MariaDBParser.LANGUAGE:
				case MariaDBParser.LAST:
				case MariaDBParser.LEAVES:
				case MariaDBParser.LESS:
				case MariaDBParser.LEVEL:
				case MariaDBParser.LIST:
				case MariaDBParser.LOCAL:
				case MariaDBParser.LOCALES:
				case MariaDBParser.LOGFILE:
				case MariaDBParser.LOGS:
				case MariaDBParser.MASTER:
				case MariaDBParser.MASTER_AUTO_POSITION:
				case MariaDBParser.MASTER_CONNECT_RETRY:
				case MariaDBParser.MASTER_DELAY:
				case MariaDBParser.MASTER_HEARTBEAT_PERIOD:
				case MariaDBParser.MASTER_HOST:
				case MariaDBParser.MASTER_LOG_FILE:
				case MariaDBParser.MASTER_LOG_POS:
				case MariaDBParser.MASTER_PASSWORD:
				case MariaDBParser.MASTER_PORT:
				case MariaDBParser.MASTER_RETRY_COUNT:
				case MariaDBParser.MASTER_SSL:
				case MariaDBParser.MASTER_SSL_CA:
				case MariaDBParser.MASTER_SSL_CAPATH:
				case MariaDBParser.MASTER_SSL_CERT:
				case MariaDBParser.MASTER_SSL_CIPHER:
				case MariaDBParser.MASTER_SSL_CRL:
				case MariaDBParser.MASTER_SSL_CRLPATH:
				case MariaDBParser.MASTER_SSL_KEY:
				case MariaDBParser.MASTER_TLS_VERSION:
				case MariaDBParser.MASTER_USER:
				case MariaDBParser.MAX_CONNECTIONS_PER_HOUR:
				case MariaDBParser.MAX_QUERIES_PER_HOUR:
				case MariaDBParser.MAX_ROWS:
				case MariaDBParser.MAX_SIZE:
				case MariaDBParser.MAX_UPDATES_PER_HOUR:
				case MariaDBParser.MAX_USER_CONNECTIONS:
				case MariaDBParser.MEDIUM:
				case MariaDBParser.MEMBER:
				case MariaDBParser.MERGE:
				case MariaDBParser.MESSAGE_TEXT:
				case MariaDBParser.MID:
				case MariaDBParser.MIGRATE:
				case MariaDBParser.MIN_ROWS:
				case MariaDBParser.MODE:
				case MariaDBParser.MODIFY:
				case MariaDBParser.MUTEX:
				case MariaDBParser.MYSQL:
				case MariaDBParser.MYSQL_ERRNO:
				case MariaDBParser.NAME:
				case MariaDBParser.NAMES:
				case MariaDBParser.NCHAR:
				case MariaDBParser.NEVER:
				case MariaDBParser.NEXT:
				case MariaDBParser.NO:
				case MariaDBParser.NOCACHE:
				case MariaDBParser.NOCOPY:
				case MariaDBParser.NOCYCLE:
				case MariaDBParser.NOMAXVALUE:
				case MariaDBParser.NOMINVALUE:
				case MariaDBParser.NOWAIT:
				case MariaDBParser.NODEGROUP:
				case MariaDBParser.NONE:
				case MariaDBParser.ODBC:
				case MariaDBParser.OFFLINE:
				case MariaDBParser.OFFSET:
				case MariaDBParser.OF:
				case MariaDBParser.OJ:
				case MariaDBParser.OLD_PASSWORD:
				case MariaDBParser.ONE:
				case MariaDBParser.ONLINE:
				case MariaDBParser.ONLY:
				case MariaDBParser.OPEN:
				case MariaDBParser.OPTIMIZER_COSTS:
				case MariaDBParser.OPTIONS:
				case MariaDBParser.OWNER:
				case MariaDBParser.PACK_KEYS:
				case MariaDBParser.PAGE:
				case MariaDBParser.PARSER:
				case MariaDBParser.PARTIAL:
				case MariaDBParser.PARTITIONING:
				case MariaDBParser.PARTITIONS:
				case MariaDBParser.PASSWORD:
				case MariaDBParser.PASSWORD_LOCK_TIME:
				case MariaDBParser.PHASE:
				case MariaDBParser.PLUGIN:
				case MariaDBParser.PLUGIN_DIR:
				case MariaDBParser.PLUGINS:
				case MariaDBParser.PORT:
				case MariaDBParser.PRECEDES:
				case MariaDBParser.PREPARE:
				case MariaDBParser.PRESERVE:
				case MariaDBParser.PREV:
				case MariaDBParser.PROCESSLIST:
				case MariaDBParser.PROFILE:
				case MariaDBParser.PROFILES:
				case MariaDBParser.PROXY:
				case MariaDBParser.QUERY:
				case MariaDBParser.QUERY_RESPONSE_TIME:
				case MariaDBParser.QUICK:
				case MariaDBParser.REBUILD:
				case MariaDBParser.RECOVER:
				case MariaDBParser.RECURSIVE:
				case MariaDBParser.REDO_BUFFER_SIZE:
				case MariaDBParser.REDUNDANT:
				case MariaDBParser.RELAY:
				case MariaDBParser.RELAY_LOG_FILE:
				case MariaDBParser.RELAY_LOG_POS:
				case MariaDBParser.RELAYLOG:
				case MariaDBParser.REMOVE:
				case MariaDBParser.REORGANIZE:
				case MariaDBParser.REPAIR:
				case MariaDBParser.REPLICATE_DO_DB:
				case MariaDBParser.REPLICATE_DO_TABLE:
				case MariaDBParser.REPLICATE_IGNORE_DB:
				case MariaDBParser.REPLICATE_IGNORE_TABLE:
				case MariaDBParser.REPLICATE_REWRITE_DB:
				case MariaDBParser.REPLICATE_WILD_DO_TABLE:
				case MariaDBParser.REPLICATE_WILD_IGNORE_TABLE:
				case MariaDBParser.REPLICATION:
				case MariaDBParser.RESET:
				case MariaDBParser.RESTART:
				case MariaDBParser.RESUME:
				case MariaDBParser.RETURNED_SQLSTATE:
				case MariaDBParser.RETURNS:
				case MariaDBParser.REUSE:
				case MariaDBParser.ROLE:
				case MariaDBParser.ROLLBACK:
				case MariaDBParser.ROLLUP:
				case MariaDBParser.ROTATE:
				case MariaDBParser.ROW:
				case MariaDBParser.ROWS:
				case MariaDBParser.ROW_FORMAT:
				case MariaDBParser.RTREE:
				case MariaDBParser.SAVEPOINT:
				case MariaDBParser.SCHEDULE:
				case MariaDBParser.SECURITY:
				case MariaDBParser.SEQUENCE:
				case MariaDBParser.SERVER:
				case MariaDBParser.SESSION:
				case MariaDBParser.SHARE:
				case MariaDBParser.SHARED:
				case MariaDBParser.SIGNED:
				case MariaDBParser.SIMPLE:
				case MariaDBParser.SLAVE:
				case MariaDBParser.SLAVES:
				case MariaDBParser.SLOW:
				case MariaDBParser.SNAPSHOT:
				case MariaDBParser.SOCKET:
				case MariaDBParser.SOME:
				case MariaDBParser.SONAME:
				case MariaDBParser.SOUNDS:
				case MariaDBParser.SOURCE:
				case MariaDBParser.SQL_AFTER_GTIDS:
				case MariaDBParser.SQL_AFTER_MTS_GAPS:
				case MariaDBParser.SQL_BEFORE_GTIDS:
				case MariaDBParser.SQL_BUFFER_RESULT:
				case MariaDBParser.SQL_CACHE:
				case MariaDBParser.SQL_NO_CACHE:
				case MariaDBParser.SQL_THREAD:
				case MariaDBParser.START:
				case MariaDBParser.STARTS:
				case MariaDBParser.STATS_AUTO_RECALC:
				case MariaDBParser.STATS_PERSISTENT:
				case MariaDBParser.STATS_SAMPLE_PAGES:
				case MariaDBParser.STATUS:
				case MariaDBParser.STOP:
				case MariaDBParser.STORAGE:
				case MariaDBParser.STRING:
				case MariaDBParser.SUBCLASS_ORIGIN:
				case MariaDBParser.SUBJECT:
				case MariaDBParser.SUBPARTITION:
				case MariaDBParser.SUBPARTITIONS:
				case MariaDBParser.SUSPEND:
				case MariaDBParser.SWAPS:
				case MariaDBParser.SWITCHES:
				case MariaDBParser.TABLE_NAME:
				case MariaDBParser.TABLESPACE:
				case MariaDBParser.TABLE_TYPE:
				case MariaDBParser.TEMPORARY:
				case MariaDBParser.TEMPTABLE:
				case MariaDBParser.THAN:
				case MariaDBParser.TRADITIONAL:
				case MariaDBParser.TRANSACTION:
				case MariaDBParser.TRANSACTIONAL:
				case MariaDBParser.TRIGGERS:
				case MariaDBParser.TRUNCATE:
				case MariaDBParser.TYPES:
				case MariaDBParser.UNBOUNDED:
				case MariaDBParser.UNDEFINED:
				case MariaDBParser.UNDOFILE:
				case MariaDBParser.UNDO_BUFFER_SIZE:
				case MariaDBParser.UNINSTALL:
				case MariaDBParser.UNKNOWN:
				case MariaDBParser.UNTIL:
				case MariaDBParser.UPGRADE:
				case MariaDBParser.USER:
				case MariaDBParser.USE_FRM:
				case MariaDBParser.USER_RESOURCES:
				case MariaDBParser.VALIDATION:
				case MariaDBParser.VALUE:
				case MariaDBParser.VARIABLES:
				case MariaDBParser.VIEW:
				case MariaDBParser.VIRTUAL:
				case MariaDBParser.VISIBLE:
				case MariaDBParser.WAIT:
				case MariaDBParser.WARNINGS:
				case MariaDBParser.WITHOUT:
				case MariaDBParser.WORK:
				case MariaDBParser.WRAPPER:
				case MariaDBParser.WSREP_MEMBERSHIP:
				case MariaDBParser.WSREP_STATUS:
				case MariaDBParser.X509:
				case MariaDBParser.XA:
				case MariaDBParser.XML:
				case MariaDBParser.EUR:
				case MariaDBParser.USA:
				case MariaDBParser.JIS:
				case MariaDBParser.ISO:
				case MariaDBParser.INTERNAL:
				case MariaDBParser.QUARTER:
				case MariaDBParser.MONTH:
				case MariaDBParser.DAY:
				case MariaDBParser.HOUR:
				case MariaDBParser.MINUTE:
				case MariaDBParser.WEEK:
				case MariaDBParser.SECOND:
				case MariaDBParser.MICROSECOND:
				case MariaDBParser.USER_STATISTICS:
				case MariaDBParser.CLIENT_STATISTICS:
				case MariaDBParser.INDEX_STATISTICS:
				case MariaDBParser.TABLE_STATISTICS:
				case MariaDBParser.ADMIN:
				case MariaDBParser.AUDIT_ADMIN:
				case MariaDBParser.BACKUP_ADMIN:
				case MariaDBParser.BINLOG_ADMIN:
				case MariaDBParser.BINLOG_ENCRYPTION_ADMIN:
				case MariaDBParser.CLONE_ADMIN:
				case MariaDBParser.CONNECTION_ADMIN:
				case MariaDBParser.ENCRYPTION_KEY_ADMIN:
				case MariaDBParser.EXECUTE:
				case MariaDBParser.FILE:
				case MariaDBParser.FIREWALL_ADMIN:
				case MariaDBParser.FIREWALL_USER:
				case MariaDBParser.GROUP_REPLICATION_ADMIN:
				case MariaDBParser.INNODB_REDO_LOG_ARCHIVE:
				case MariaDBParser.INVOKE:
				case MariaDBParser.LAMBDA:
				case MariaDBParser.NDB_STORED_USER:
				case MariaDBParser.PASSWORDLESS_USER_ADMIN:
				case MariaDBParser.PERSIST_RO_VARIABLES_ADMIN:
				case MariaDBParser.PRIVILEGES:
				case MariaDBParser.PROCESS:
				case MariaDBParser.RELOAD:
				case MariaDBParser.REPLICATION_APPLIER:
				case MariaDBParser.REPLICATION_SLAVE_ADMIN:
				case MariaDBParser.RESOURCE_GROUP_ADMIN:
				case MariaDBParser.RESOURCE_GROUP_USER:
				case MariaDBParser.ROLE_ADMIN:
				case MariaDBParser.ROUTINE:
				case MariaDBParser.S3:
				case MariaDBParser.SESSION_VARIABLES_ADMIN:
				case MariaDBParser.SET_USER_ID:
				case MariaDBParser.SHOW_ROUTINE:
				case MariaDBParser.SHUTDOWN:
				case MariaDBParser.SUPER:
				case MariaDBParser.SYSTEM_VARIABLES_ADMIN:
				case MariaDBParser.TABLES:
				case MariaDBParser.TABLE_ENCRYPTION_ADMIN:
				case MariaDBParser.VERSION_TOKEN_ADMIN:
				case MariaDBParser.XA_RECOVER_ADMIN:
				case MariaDBParser.ARMSCII8:
				case MariaDBParser.ASCII:
				case MariaDBParser.BIG5:
				case MariaDBParser.CP1250:
				case MariaDBParser.CP1251:
				case MariaDBParser.CP1256:
				case MariaDBParser.CP1257:
				case MariaDBParser.CP850:
				case MariaDBParser.CP852:
				case MariaDBParser.CP866:
				case MariaDBParser.CP932:
				case MariaDBParser.DEC8:
				case MariaDBParser.EUCJPMS:
				case MariaDBParser.EUCKR:
				case MariaDBParser.GB18030:
				case MariaDBParser.GB2312:
				case MariaDBParser.GBK:
				case MariaDBParser.GEOSTD8:
				case MariaDBParser.GREEK:
				case MariaDBParser.HEBREW:
				case MariaDBParser.HP8:
				case MariaDBParser.KEYBCS2:
				case MariaDBParser.KOI8R:
				case MariaDBParser.KOI8U:
				case MariaDBParser.LATIN1:
				case MariaDBParser.LATIN2:
				case MariaDBParser.LATIN5:
				case MariaDBParser.LATIN7:
				case MariaDBParser.MACCE:
				case MariaDBParser.MACROMAN:
				case MariaDBParser.SJIS:
				case MariaDBParser.SWE7:
				case MariaDBParser.TIS620:
				case MariaDBParser.UCS2:
				case MariaDBParser.UJIS:
				case MariaDBParser.UTF16:
				case MariaDBParser.UTF16LE:
				case MariaDBParser.UTF32:
				case MariaDBParser.UTF8:
				case MariaDBParser.UTF8MB3:
				case MariaDBParser.UTF8MB4:
				case MariaDBParser.ARCHIVE:
				case MariaDBParser.BLACKHOLE:
				case MariaDBParser.CSV:
				case MariaDBParser.FEDERATED:
				case MariaDBParser.INNODB:
				case MariaDBParser.MEMORY:
				case MariaDBParser.MRG_MYISAM:
				case MariaDBParser.MYISAM:
				case MariaDBParser.NDB:
				case MariaDBParser.NDBCLUSTER:
				case MariaDBParser.PERFORMANCE_SCHEMA:
				case MariaDBParser.TOKUDB:
				case MariaDBParser.REPEATABLE:
				case MariaDBParser.COMMITTED:
				case MariaDBParser.UNCOMMITTED:
				case MariaDBParser.SERIALIZABLE:
				case MariaDBParser.GEOMETRYCOLLECTION:
				case MariaDBParser.LINESTRING:
				case MariaDBParser.MULTILINESTRING:
				case MariaDBParser.MULTIPOINT:
				case MariaDBParser.MULTIPOLYGON:
				case MariaDBParser.POINT:
				case MariaDBParser.POLYGON:
				case MariaDBParser.ABS:
				case MariaDBParser.ACOS:
				case MariaDBParser.ADDDATE:
				case MariaDBParser.ADDTIME:
				case MariaDBParser.AES_DECRYPT:
				case MariaDBParser.AES_ENCRYPT:
				case MariaDBParser.AREA:
				case MariaDBParser.ASBINARY:
				case MariaDBParser.ASIN:
				case MariaDBParser.ASTEXT:
				case MariaDBParser.ASWKB:
				case MariaDBParser.ASWKT:
				case MariaDBParser.ASYMMETRIC_DECRYPT:
				case MariaDBParser.ASYMMETRIC_DERIVE:
				case MariaDBParser.ASYMMETRIC_ENCRYPT:
				case MariaDBParser.ASYMMETRIC_SIGN:
				case MariaDBParser.ASYMMETRIC_VERIFY:
				case MariaDBParser.ATAN:
				case MariaDBParser.ATAN2:
				case MariaDBParser.BENCHMARK:
				case MariaDBParser.BIN:
				case MariaDBParser.BIT_COUNT:
				case MariaDBParser.BIT_LENGTH:
				case MariaDBParser.BUFFER:
				case MariaDBParser.CATALOG_NAME:
				case MariaDBParser.CEIL:
				case MariaDBParser.CEILING:
				case MariaDBParser.CENTROID:
				case MariaDBParser.CHARACTER_LENGTH:
				case MariaDBParser.CHARSET:
				case MariaDBParser.CHAR_LENGTH:
				case MariaDBParser.COERCIBILITY:
				case MariaDBParser.COLLATION:
				case MariaDBParser.COMPRESS:
				case MariaDBParser.CONCAT:
				case MariaDBParser.CONCAT_WS:
				case MariaDBParser.CONNECTION_ID:
				case MariaDBParser.CONV:
				case MariaDBParser.CONVERT_TZ:
				case MariaDBParser.COS:
				case MariaDBParser.COT:
				case MariaDBParser.CRC32:
				case MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY:
				case MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY:
				case MariaDBParser.CREATE_DH_PARAMETERS:
				case MariaDBParser.CREATE_DIGEST:
				case MariaDBParser.CROSSES:
				case MariaDBParser.DATEDIFF:
				case MariaDBParser.DATE_FORMAT:
				case MariaDBParser.DAYNAME:
				case MariaDBParser.DAYOFMONTH:
				case MariaDBParser.DAYOFWEEK:
				case MariaDBParser.DAYOFYEAR:
				case MariaDBParser.DECODE:
				case MariaDBParser.DEGREES:
				case MariaDBParser.DES_DECRYPT:
				case MariaDBParser.DES_ENCRYPT:
				case MariaDBParser.DIMENSION:
				case MariaDBParser.DISJOINT:
				case MariaDBParser.ELT:
				case MariaDBParser.ENCODE:
				case MariaDBParser.ENCRYPT:
				case MariaDBParser.ENDPOINT:
				case MariaDBParser.ENGINE_ATTRIBUTE:
				case MariaDBParser.ENVELOPE:
				case MariaDBParser.EQUALS:
				case MariaDBParser.EXP:
				case MariaDBParser.EXPORT_SET:
				case MariaDBParser.EXTERIORRING:
				case MariaDBParser.EXTRACTVALUE:
				case MariaDBParser.FIELD:
				case MariaDBParser.FIND_IN_SET:
				case MariaDBParser.FLOOR:
				case MariaDBParser.FORMAT:
				case MariaDBParser.FOUND_ROWS:
				case MariaDBParser.FROM_BASE64:
				case MariaDBParser.FROM_DAYS:
				case MariaDBParser.FROM_UNIXTIME:
				case MariaDBParser.GEOMCOLLFROMTEXT:
				case MariaDBParser.GEOMCOLLFROMWKB:
				case MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT:
				case MariaDBParser.GEOMETRYCOLLECTIONFROMWKB:
				case MariaDBParser.GEOMETRYFROMTEXT:
				case MariaDBParser.GEOMETRYFROMWKB:
				case MariaDBParser.GEOMETRYN:
				case MariaDBParser.GEOMETRYTYPE:
				case MariaDBParser.GEOMFROMTEXT:
				case MariaDBParser.GEOMFROMWKB:
				case MariaDBParser.GET_FORMAT:
				case MariaDBParser.GET_LOCK:
				case MariaDBParser.GLENGTH:
				case MariaDBParser.GREATEST:
				case MariaDBParser.GTID_SUBSET:
				case MariaDBParser.GTID_SUBTRACT:
				case MariaDBParser.HEX:
				case MariaDBParser.IFNULL:
				case MariaDBParser.INET6_ATON:
				case MariaDBParser.INET6_NTOA:
				case MariaDBParser.INET_ATON:
				case MariaDBParser.INET_NTOA:
				case MariaDBParser.INSTR:
				case MariaDBParser.INTERIORRINGN:
				case MariaDBParser.INTERSECTS:
				case MariaDBParser.ISCLOSED:
				case MariaDBParser.ISEMPTY:
				case MariaDBParser.ISNULL:
				case MariaDBParser.ISSIMPLE:
				case MariaDBParser.IS_FREE_LOCK:
				case MariaDBParser.IS_IPV4:
				case MariaDBParser.IS_IPV4_COMPAT:
				case MariaDBParser.IS_IPV4_MAPPED:
				case MariaDBParser.IS_IPV6:
				case MariaDBParser.IS_USED_LOCK:
				case MariaDBParser.LAST_INSERT_ID:
				case MariaDBParser.LCASE:
				case MariaDBParser.LEAST:
				case MariaDBParser.LENGTH:
				case MariaDBParser.LINEFROMTEXT:
				case MariaDBParser.LINEFROMWKB:
				case MariaDBParser.LINESTRINGFROMTEXT:
				case MariaDBParser.LINESTRINGFROMWKB:
				case MariaDBParser.LN:
				case MariaDBParser.LOAD_FILE:
				case MariaDBParser.LOCATE:
				case MariaDBParser.LOG:
				case MariaDBParser.LOG10:
				case MariaDBParser.LOG2:
				case MariaDBParser.LOWER:
				case MariaDBParser.LPAD:
				case MariaDBParser.LTRIM:
				case MariaDBParser.MAKEDATE:
				case MariaDBParser.MAKETIME:
				case MariaDBParser.MAKE_SET:
				case MariaDBParser.MASTER_POS_WAIT:
				case MariaDBParser.MBRCONTAINS:
				case MariaDBParser.MBRDISJOINT:
				case MariaDBParser.MBREQUAL:
				case MariaDBParser.MBRINTERSECTS:
				case MariaDBParser.MBROVERLAPS:
				case MariaDBParser.MBRTOUCHES:
				case MariaDBParser.MBRWITHIN:
				case MariaDBParser.MD5:
				case MariaDBParser.MLINEFROMTEXT:
				case MariaDBParser.MLINEFROMWKB:
				case MariaDBParser.MONTHNAME:
				case MariaDBParser.MPOINTFROMTEXT:
				case MariaDBParser.MPOINTFROMWKB:
				case MariaDBParser.MPOLYFROMTEXT:
				case MariaDBParser.MPOLYFROMWKB:
				case MariaDBParser.MULTILINESTRINGFROMTEXT:
				case MariaDBParser.MULTILINESTRINGFROMWKB:
				case MariaDBParser.MULTIPOINTFROMTEXT:
				case MariaDBParser.MULTIPOINTFROMWKB:
				case MariaDBParser.MULTIPOLYGONFROMTEXT:
				case MariaDBParser.MULTIPOLYGONFROMWKB:
				case MariaDBParser.NAME_CONST:
				case MariaDBParser.NULLIF:
				case MariaDBParser.NUMGEOMETRIES:
				case MariaDBParser.NUMINTERIORRINGS:
				case MariaDBParser.NUMPOINTS:
				case MariaDBParser.OCT:
				case MariaDBParser.OCTET_LENGTH:
				case MariaDBParser.ORD:
				case MariaDBParser.OVERLAPS:
				case MariaDBParser.PERIOD_ADD:
				case MariaDBParser.PERIOD_DIFF:
				case MariaDBParser.PI:
				case MariaDBParser.POINTFROMTEXT:
				case MariaDBParser.POINTFROMWKB:
				case MariaDBParser.POINTN:
				case MariaDBParser.POLYFROMTEXT:
				case MariaDBParser.POLYFROMWKB:
				case MariaDBParser.POLYGONFROMTEXT:
				case MariaDBParser.POLYGONFROMWKB:
				case MariaDBParser.POW:
				case MariaDBParser.POWER:
				case MariaDBParser.QUOTE:
				case MariaDBParser.RADIANS:
				case MariaDBParser.RAND:
				case MariaDBParser.RANDOM_BYTES:
				case MariaDBParser.RELEASE_LOCK:
				case MariaDBParser.REVERSE:
				case MariaDBParser.ROUND:
				case MariaDBParser.ROW_COUNT:
				case MariaDBParser.RPAD:
				case MariaDBParser.RTRIM:
				case MariaDBParser.SEC_TO_TIME:
				case MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE:
				case MariaDBParser.SESSION_USER:
				case MariaDBParser.SHA:
				case MariaDBParser.SHA1:
				case MariaDBParser.SHA2:
				case MariaDBParser.SCHEMA_NAME:
				case MariaDBParser.SIGN:
				case MariaDBParser.SIN:
				case MariaDBParser.SLEEP:
				case MariaDBParser.SOUNDEX:
				case MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS:
				case MariaDBParser.SQRT:
				case MariaDBParser.SRID:
				case MariaDBParser.STARTPOINT:
				case MariaDBParser.STRCMP:
				case MariaDBParser.STR_TO_DATE:
				case MariaDBParser.ST_AREA:
				case MariaDBParser.ST_ASBINARY:
				case MariaDBParser.ST_ASTEXT:
				case MariaDBParser.ST_ASWKB:
				case MariaDBParser.ST_ASWKT:
				case MariaDBParser.ST_BUFFER:
				case MariaDBParser.ST_CENTROID:
				case MariaDBParser.ST_CONTAINS:
				case MariaDBParser.ST_CROSSES:
				case MariaDBParser.ST_DIFFERENCE:
				case MariaDBParser.ST_DIMENSION:
				case MariaDBParser.ST_DISJOINT:
				case MariaDBParser.ST_DISTANCE:
				case MariaDBParser.ST_ENDPOINT:
				case MariaDBParser.ST_ENVELOPE:
				case MariaDBParser.ST_EQUALS:
				case MariaDBParser.ST_EXTERIORRING:
				case MariaDBParser.ST_GEOMCOLLFROMTEXT:
				case MariaDBParser.ST_GEOMCOLLFROMTXT:
				case MariaDBParser.ST_GEOMCOLLFROMWKB:
				case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
				case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB:
				case MariaDBParser.ST_GEOMETRYFROMTEXT:
				case MariaDBParser.ST_GEOMETRYFROMWKB:
				case MariaDBParser.ST_GEOMETRYN:
				case MariaDBParser.ST_GEOMETRYTYPE:
				case MariaDBParser.ST_GEOMFROMTEXT:
				case MariaDBParser.ST_GEOMFROMWKB:
				case MariaDBParser.ST_INTERIORRINGN:
				case MariaDBParser.ST_INTERSECTION:
				case MariaDBParser.ST_INTERSECTS:
				case MariaDBParser.ST_ISCLOSED:
				case MariaDBParser.ST_ISEMPTY:
				case MariaDBParser.ST_ISSIMPLE:
				case MariaDBParser.ST_LINEFROMTEXT:
				case MariaDBParser.ST_LINEFROMWKB:
				case MariaDBParser.ST_LINESTRINGFROMTEXT:
				case MariaDBParser.ST_LINESTRINGFROMWKB:
				case MariaDBParser.ST_NUMGEOMETRIES:
				case MariaDBParser.ST_NUMINTERIORRING:
				case MariaDBParser.ST_NUMINTERIORRINGS:
				case MariaDBParser.ST_NUMPOINTS:
				case MariaDBParser.ST_OVERLAPS:
				case MariaDBParser.ST_POINTFROMTEXT:
				case MariaDBParser.ST_POINTFROMWKB:
				case MariaDBParser.ST_POINTN:
				case MariaDBParser.ST_POLYFROMTEXT:
				case MariaDBParser.ST_POLYFROMWKB:
				case MariaDBParser.ST_POLYGONFROMTEXT:
				case MariaDBParser.ST_POLYGONFROMWKB:
				case MariaDBParser.ST_SRID:
				case MariaDBParser.ST_STARTPOINT:
				case MariaDBParser.ST_SYMDIFFERENCE:
				case MariaDBParser.ST_TOUCHES:
				case MariaDBParser.ST_UNION:
				case MariaDBParser.ST_WITHIN:
				case MariaDBParser.ST_X:
				case MariaDBParser.ST_Y:
				case MariaDBParser.SUBDATE:
				case MariaDBParser.SUBSTRING_INDEX:
				case MariaDBParser.SUBTIME:
				case MariaDBParser.SYSTEM_USER:
				case MariaDBParser.TAN:
				case MariaDBParser.TIMEDIFF:
				case MariaDBParser.TIMESTAMPADD:
				case MariaDBParser.TIMESTAMPDIFF:
				case MariaDBParser.TIME_FORMAT:
				case MariaDBParser.TIME_TO_SEC:
				case MariaDBParser.TOUCHES:
				case MariaDBParser.TO_BASE64:
				case MariaDBParser.TO_DAYS:
				case MariaDBParser.TO_SECONDS:
				case MariaDBParser.UCASE:
				case MariaDBParser.UNCOMPRESS:
				case MariaDBParser.UNCOMPRESSED_LENGTH:
				case MariaDBParser.UNHEX:
				case MariaDBParser.UNIX_TIMESTAMP:
				case MariaDBParser.UPDATEXML:
				case MariaDBParser.UPPER:
				case MariaDBParser.UUID:
				case MariaDBParser.UUID_SHORT:
				case MariaDBParser.VALIDATE_PASSWORD_STRENGTH:
				case MariaDBParser.VERSION:
				case MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case MariaDBParser.WEEKDAY:
				case MariaDBParser.WEEKOFYEAR:
				case MariaDBParser.WEIGHT_STRING:
				case MariaDBParser.WITHIN:
				case MariaDBParser.YEARWEEK:
				case MariaDBParser.Y_FUNCTION:
				case MariaDBParser.X_FUNCTION:
				case MariaDBParser.VIA:
				case MariaDBParser.LASTVAL:
				case MariaDBParser.NEXTVAL:
				case MariaDBParser.SETVAL:
				case MariaDBParser.PREVIOUS:
				case MariaDBParser.PERSISTENT:
				case MariaDBParser.BINLOG_MONITOR:
				case MariaDBParser.BINLOG_REPLAY:
				case MariaDBParser.FEDERATED_ADMIN:
				case MariaDBParser.READ_ONLY_ADMIN:
				case MariaDBParser.REPLICA:
				case MariaDBParser.REPLICAS:
				case MariaDBParser.REPLICATION_MASTER_ADMIN:
				case MariaDBParser.MONITOR:
				case MariaDBParser.READ_ONLY:
				case MariaDBParser.REPLAY:
				case MariaDBParser.MOD:
				case MariaDBParser.AT_SIGN:
				case MariaDBParser.CHARSET_REVERSE_QOUTE_STRING:
				case MariaDBParser.STRING_LITERAL:
				case MariaDBParser.ID:
				case MariaDBParser.LOCAL_ID:
				case MariaDBParser.GLOBAL_ID:
					{
					this.state = 6390;
					this.variableClause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 6393;
				this.variableClause();
				this.state = 6394;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				this.state = 6395;
				this.diagnosticsConditionInformationName();
				this.state = 6403;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 6396;
					this.match(MariaDBParser.COMMA);
					this.state = 6397;
					this.variableClause();
					this.state = 6398;
					this.match(MariaDBParser.EQUAL_SYMBOL);
					this.state = 6399;
					this.diagnosticsConditionInformationName();
					}
					}
					this.state = 6405;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public diagnosticsConditionInformationName(): DiagnosticsConditionInformationNameContext {
		let _localctx: DiagnosticsConditionInformationNameContext = new DiagnosticsConditionInformationNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 552, MariaDBParser.RULE_diagnosticsConditionInformationName);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6408;
			_la = this._input.LA(1);
			if (!(((((_la - 359)) & ~0x1F) === 0 && ((1 << (_la - 359)) & ((1 << (MariaDBParser.CLASS_ORIGIN - 359)) | (1 << (MariaDBParser.COLUMN_NAME - 359)) | (1 << (MariaDBParser.CONSTRAINT_CATALOG - 359)) | (1 << (MariaDBParser.CONSTRAINT_SCHEMA - 359)) | (1 << (MariaDBParser.CONSTRAINT_NAME - 359)) | (1 << (MariaDBParser.CURSOR_NAME - 359)))) !== 0) || _la === MariaDBParser.MESSAGE_TEXT || _la === MariaDBParser.MYSQL_ERRNO || _la === MariaDBParser.RETURNED_SQLSTATE || _la === MariaDBParser.SUBCLASS_ORIGIN || _la === MariaDBParser.TABLE_NAME || _la === MariaDBParser.CATALOG_NAME || _la === MariaDBParser.SCHEMA_NAME)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public describeObjectClause(): DescribeObjectClauseContext {
		let _localctx: DescribeObjectClauseContext = new DescribeObjectClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 554, MariaDBParser.RULE_describeObjectClause);
		try {
			this.state = 6420;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.DELETE:
			case MariaDBParser.INSERT:
			case MariaDBParser.REPLACE:
			case MariaDBParser.SELECT:
			case MariaDBParser.UPDATE:
			case MariaDBParser.LR_BRACKET:
				_localctx = new DescribeStatementsContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6415;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.SELECT:
				case MariaDBParser.LR_BRACKET:
					{
					this.state = 6410;
					this.selectStatement();
					}
					break;
				case MariaDBParser.DELETE:
					{
					this.state = 6411;
					this.deleteStatement();
					}
					break;
				case MariaDBParser.INSERT:
					{
					this.state = 6412;
					this.insertStatement();
					}
					break;
				case MariaDBParser.REPLACE:
					{
					this.state = 6413;
					this.replaceStatement();
					}
					break;
				case MariaDBParser.UPDATE:
					{
					this.state = 6414;
					this.updateStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case MariaDBParser.FOR:
				_localctx = new DescribeConnectionContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6417;
				this.match(MariaDBParser.FOR);
				this.state = 6418;
				this.match(MariaDBParser.CONNECTION);
				this.state = 6419;
				this.uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fullId(): FullIdContext {
		let _localctx: FullIdContext = new FullIdContext(this._ctx, this.state);
		this.enterRule(_localctx, 556, MariaDBParser.RULE_fullId);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6422;
			this.uid();
			this.state = 6426;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 950, this._ctx) ) {
			case 1:
				{
				this.state = 6423;
				this.match(MariaDBParser.DOT_ID);
				}
				break;

			case 2:
				{
				this.state = 6424;
				this.match(MariaDBParser.DOT);
				this.state = 6425;
				this.uid();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableName(): TableNameContext {
		let _localctx: TableNameContext = new TableNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 558, MariaDBParser.RULE_tableName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6428;
			this.fullId();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public roleName(): RoleNameContext {
		let _localctx: RoleNameContext = new RoleNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 560, MariaDBParser.RULE_roleName);
		try {
			this.state = 6432;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 951, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6430;
				this.userName();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6431;
				this.uid();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fullColumnName(): FullColumnNameContext {
		let _localctx: FullColumnNameContext = new FullColumnNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 562, MariaDBParser.RULE_fullColumnName);
		try {
			this.state = 6446;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 955, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6434;
				this.uid();
				this.state = 6439;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 953, this._ctx) ) {
				case 1:
					{
					this.state = 6435;
					this.dottedId();
					this.state = 6437;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 952, this._ctx) ) {
					case 1:
						{
						this.state = 6436;
						this.dottedId();
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6441;
				this.matchWildcard();
				this.state = 6442;
				this.dottedId();
				this.state = 6444;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 954, this._ctx) ) {
				case 1:
					{
					this.state = 6443;
					this.dottedId();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexColumnName(): IndexColumnNameContext {
		let _localctx: IndexColumnNameContext = new IndexColumnNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 564, MariaDBParser.RULE_indexColumnName);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6459;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 958, this._ctx) ) {
			case 1:
				{
				this.state = 6450;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 956, this._ctx) ) {
				case 1:
					{
					this.state = 6448;
					this.uid();
					}
					break;

				case 2:
					{
					this.state = 6449;
					this.match(MariaDBParser.STRING_LITERAL);
					}
					break;
				}
				this.state = 6456;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.LR_BRACKET) {
					{
					this.state = 6452;
					this.match(MariaDBParser.LR_BRACKET);
					this.state = 6453;
					this.decimalLiteral();
					this.state = 6454;
					this.match(MariaDBParser.RR_BRACKET);
					}
				}

				}
				break;

			case 2:
				{
				this.state = 6458;
				this.expression(0);
				}
				break;
			}
			this.state = 6462;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.ASC || _la === MariaDBParser.DESC) {
				{
				this.state = 6461;
				_localctx._sortType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.ASC || _la === MariaDBParser.DESC)) {
					_localctx._sortType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public userName(): UserNameContext {
		let _localctx: UserNameContext = new UserNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 566, MariaDBParser.RULE_userName);
		try {
			this.state = 6471;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 960, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6464;
				this.match(MariaDBParser.STRING_USER_NAME);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6465;
				this.match(MariaDBParser.STRING_USER_NAME_MARIADB);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6466;
				this.match(MariaDBParser.ID);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6467;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6468;
				this.match(MariaDBParser.ADMIN);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 6469;
				this.keywordsCanBeId();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 6470;
				this.currentUserExpression();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mysqlVariable(): MysqlVariableContext {
		let _localctx: MysqlVariableContext = new MysqlVariableContext(this._ctx, this.state);
		this.enterRule(_localctx, 568, MariaDBParser.RULE_mysqlVariable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6473;
			_la = this._input.LA(1);
			if (!(_la === MariaDBParser.LOCAL_ID || _la === MariaDBParser.GLOBAL_ID)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public charsetName(): CharsetNameContext {
		let _localctx: CharsetNameContext = new CharsetNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 570, MariaDBParser.RULE_charsetName);
		try {
			this.state = 6479;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 961, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6475;
				this.match(MariaDBParser.BINARY);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6476;
				this.charsetNameBase();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6477;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6478;
				this.match(MariaDBParser.CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public collationName(): CollationNameContext {
		let _localctx: CollationNameContext = new CollationNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 572, MariaDBParser.RULE_collationName);
		try {
			this.state = 6483;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 962, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6481;
				this.uid();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6482;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public engineName(): EngineNameContext {
		let _localctx: EngineNameContext = new EngineNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 574, MariaDBParser.RULE_engineName);
		try {
			this.state = 6488;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.CONNECT:
			case MariaDBParser.ARCHIVE:
			case MariaDBParser.BLACKHOLE:
			case MariaDBParser.CSV:
			case MariaDBParser.FEDERATED:
			case MariaDBParser.INNODB:
			case MariaDBParser.MEMORY:
			case MariaDBParser.MRG_MYISAM:
			case MariaDBParser.MYISAM:
			case MariaDBParser.NDB:
			case MariaDBParser.NDBCLUSTER:
			case MariaDBParser.PERFORMANCE_SCHEMA:
			case MariaDBParser.TOKUDB:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6485;
				this.engineNameBase();
				}
				break;
			case MariaDBParser.ID:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6486;
				this.match(MariaDBParser.ID);
				}
				break;
			case MariaDBParser.STRING_LITERAL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6487;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public engineNameBase(): EngineNameBaseContext {
		let _localctx: EngineNameBaseContext = new EngineNameBaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 576, MariaDBParser.RULE_engineNameBase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6490;
			_la = this._input.LA(1);
			if (!(_la === MariaDBParser.CONNECT || ((((_la - 794)) & ~0x1F) === 0 && ((1 << (_la - 794)) & ((1 << (MariaDBParser.ARCHIVE - 794)) | (1 << (MariaDBParser.BLACKHOLE - 794)) | (1 << (MariaDBParser.CSV - 794)) | (1 << (MariaDBParser.FEDERATED - 794)) | (1 << (MariaDBParser.INNODB - 794)) | (1 << (MariaDBParser.MEMORY - 794)) | (1 << (MariaDBParser.MRG_MYISAM - 794)) | (1 << (MariaDBParser.MYISAM - 794)) | (1 << (MariaDBParser.NDB - 794)) | (1 << (MariaDBParser.NDBCLUSTER - 794)) | (1 << (MariaDBParser.PERFORMANCE_SCHEMA - 794)) | (1 << (MariaDBParser.TOKUDB - 794)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public encryptedLiteral(): EncryptedLiteralContext {
		let _localctx: EncryptedLiteralContext = new EncryptedLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 578, MariaDBParser.RULE_encryptedLiteral);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6492;
			_la = this._input.LA(1);
			if (!(_la === MariaDBParser.ENCRYPTED || _la === MariaDBParser.STRING_LITERAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public uuidSet(): UuidSetContext {
		let _localctx: UuidSetContext = new UuidSetContext(this._ctx, this.state);
		this.enterRule(_localctx, 580, MariaDBParser.RULE_uuidSet);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6494;
			this.decimalLiteral();
			this.state = 6495;
			this.match(MariaDBParser.MINUS);
			this.state = 6496;
			this.decimalLiteral();
			this.state = 6497;
			this.match(MariaDBParser.MINUS);
			this.state = 6498;
			this.decimalLiteral();
			this.state = 6499;
			this.match(MariaDBParser.MINUS);
			this.state = 6500;
			this.decimalLiteral();
			this.state = 6501;
			this.match(MariaDBParser.MINUS);
			this.state = 6502;
			this.decimalLiteral();
			this.state = 6508;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6503;
				this.match(MariaDBParser.COLON_SYMB);
				this.state = 6504;
				this.decimalLiteral();
				this.state = 6505;
				this.match(MariaDBParser.MINUS);
				this.state = 6506;
				this.decimalLiteral();
				}
				}
				this.state = 6510;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === MariaDBParser.COLON_SYMB);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xid(): XidContext {
		let _localctx: XidContext = new XidContext(this._ctx, this.state);
		this.enterRule(_localctx, 582, MariaDBParser.RULE_xid);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6512;
			_localctx._globalTableUid = this.xuidStringId();
			this.state = 6519;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.COMMA) {
				{
				this.state = 6513;
				this.match(MariaDBParser.COMMA);
				this.state = 6514;
				_localctx._qualifier = this.xuidStringId();
				this.state = 6517;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.COMMA) {
					{
					this.state = 6515;
					this.match(MariaDBParser.COMMA);
					this.state = 6516;
					_localctx._idFormat = this.decimalLiteral();
					}
				}

				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xuidStringId(): XuidStringIdContext {
		let _localctx: XuidStringIdContext = new XuidStringIdContext(this._ctx, this.state);
		this.enterRule(_localctx, 584, MariaDBParser.RULE_xuidStringId);
		let _la: number;
		try {
			this.state = 6528;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.STRING_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6521;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			case MariaDBParser.BIT_STRING:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6522;
				this.match(MariaDBParser.BIT_STRING);
				}
				break;
			case MariaDBParser.HEXADECIMAL_LITERAL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6524;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6523;
					this.match(MariaDBParser.HEXADECIMAL_LITERAL);
					}
					}
					this.state = 6526;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === MariaDBParser.HEXADECIMAL_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public authPlugin(): AuthPluginContext {
		let _localctx: AuthPluginContext = new AuthPluginContext(this._ctx, this.state);
		this.enterRule(_localctx, 586, MariaDBParser.RULE_authPlugin);
		try {
			this.state = 6532;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 969, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6530;
				this.uid();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6531;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public uid(): UidContext {
		let _localctx: UidContext = new UidContext(this._ctx, this.state);
		this.enterRule(_localctx, 588, MariaDBParser.RULE_uid);
		try {
			this.state = 6537;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.ATTRIBUTE:
			case MariaDBParser.BODY:
			case MariaDBParser.BUCKETS:
			case MariaDBParser.CONDITION:
			case MariaDBParser.CURRENT:
			case MariaDBParser.CURRENT_ROLE:
			case MariaDBParser.CURRENT_USER:
			case MariaDBParser.DATABASE:
			case MariaDBParser.DEFAULT:
			case MariaDBParser.DIAGNOSTICS:
			case MariaDBParser.EMPTY:
			case MariaDBParser.EXCEPT:
			case MariaDBParser.GROUP:
			case MariaDBParser.IF:
			case MariaDBParser.IGNORED:
			case MariaDBParser.INSERT:
			case MariaDBParser.LATERAL:
			case MariaDBParser.LEFT:
			case MariaDBParser.LOCKED:
			case MariaDBParser.MAXVALUE:
			case MariaDBParser.MINVALUE:
			case MariaDBParser.NUMBER:
			case MariaDBParser.OPTIONAL:
			case MariaDBParser.ORDER:
			case MariaDBParser.PRIMARY:
			case MariaDBParser.PACKAGE:
			case MariaDBParser.REPLACE:
			case MariaDBParser.RIGHT:
			case MariaDBParser.SCHEMA:
			case MariaDBParser.SKIP_:
			case MariaDBParser.STACKED:
			case MariaDBParser.STATEMENT:
			case MariaDBParser.DATE:
			case MariaDBParser.TIME:
			case MariaDBParser.TIMESTAMP:
			case MariaDBParser.DATETIME:
			case MariaDBParser.YEAR:
			case MariaDBParser.BINARY:
			case MariaDBParser.TEXT:
			case MariaDBParser.ENUM:
			case MariaDBParser.SERIAL:
			case MariaDBParser.JSON_ARRAY:
			case MariaDBParser.JSON_ARRAYAGG:
			case MariaDBParser.JSON_ARRAY_APPEND:
			case MariaDBParser.JSON_ARRAY_INSERT:
			case MariaDBParser.JSON_CONTAINS:
			case MariaDBParser.JSON_CONTAINS_PATH:
			case MariaDBParser.JSON_DEPTH:
			case MariaDBParser.JSON_EXTRACT:
			case MariaDBParser.JSON_INSERT:
			case MariaDBParser.JSON_KEYS:
			case MariaDBParser.JSON_LENGTH:
			case MariaDBParser.JSON_MERGE:
			case MariaDBParser.JSON_MERGE_PATCH:
			case MariaDBParser.JSON_MERGE_PRESERVE:
			case MariaDBParser.JSON_OBJECT:
			case MariaDBParser.JSON_OBJECTAGG:
			case MariaDBParser.JSON_OVERLAPS:
			case MariaDBParser.JSON_PRETTY:
			case MariaDBParser.JSON_QUOTE:
			case MariaDBParser.JSON_REMOVE:
			case MariaDBParser.JSON_REPLACE:
			case MariaDBParser.JSON_SCHEMA_VALID:
			case MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT:
			case MariaDBParser.JSON_SEARCH:
			case MariaDBParser.JSON_SET:
			case MariaDBParser.JSON_STORAGE_FREE:
			case MariaDBParser.JSON_STORAGE_SIZE:
			case MariaDBParser.JSON_TABLE:
			case MariaDBParser.JSON_TYPE:
			case MariaDBParser.JSON_UNQUOTE:
			case MariaDBParser.JSON_VALID:
			case MariaDBParser.JSON_VALUE:
			case MariaDBParser.NESTED:
			case MariaDBParser.ORDINALITY:
			case MariaDBParser.PATH:
			case MariaDBParser.AVG:
			case MariaDBParser.BIT_AND:
			case MariaDBParser.BIT_OR:
			case MariaDBParser.BIT_XOR:
			case MariaDBParser.COUNT:
			case MariaDBParser.CUME_DIST:
			case MariaDBParser.DENSE_RANK:
			case MariaDBParser.FIRST_VALUE:
			case MariaDBParser.GROUP_CONCAT:
			case MariaDBParser.LAG:
			case MariaDBParser.LAST_VALUE:
			case MariaDBParser.LEAD:
			case MariaDBParser.MAX:
			case MariaDBParser.MIN:
			case MariaDBParser.NTILE:
			case MariaDBParser.NTH_VALUE:
			case MariaDBParser.PERCENT_RANK:
			case MariaDBParser.RANK:
			case MariaDBParser.ROW_NUMBER:
			case MariaDBParser.STD:
			case MariaDBParser.STDDEV:
			case MariaDBParser.STDDEV_POP:
			case MariaDBParser.STDDEV_SAMP:
			case MariaDBParser.SUM:
			case MariaDBParser.VAR_POP:
			case MariaDBParser.VAR_SAMP:
			case MariaDBParser.VARIANCE:
			case MariaDBParser.CURRENT_DATE:
			case MariaDBParser.CURRENT_TIME:
			case MariaDBParser.CURRENT_TIMESTAMP:
			case MariaDBParser.LOCALTIME:
			case MariaDBParser.CURDATE:
			case MariaDBParser.CURTIME:
			case MariaDBParser.DATE_ADD:
			case MariaDBParser.DATE_SUB:
			case MariaDBParser.LOCALTIMESTAMP:
			case MariaDBParser.NOW:
			case MariaDBParser.POSITION:
			case MariaDBParser.SUBSTR:
			case MariaDBParser.SUBSTRING:
			case MariaDBParser.SYSDATE:
			case MariaDBParser.TRIM:
			case MariaDBParser.UTC_DATE:
			case MariaDBParser.UTC_TIME:
			case MariaDBParser.UTC_TIMESTAMP:
			case MariaDBParser.ACCOUNT:
			case MariaDBParser.ACTION:
			case MariaDBParser.AFTER:
			case MariaDBParser.AGGREGATE:
			case MariaDBParser.ALGORITHM:
			case MariaDBParser.ANY:
			case MariaDBParser.AT:
			case MariaDBParser.AUTHORS:
			case MariaDBParser.AUTOCOMMIT:
			case MariaDBParser.AUTOEXTEND_SIZE:
			case MariaDBParser.AUTO_INCREMENT:
			case MariaDBParser.AVG_ROW_LENGTH:
			case MariaDBParser.BEGIN:
			case MariaDBParser.BINLOG:
			case MariaDBParser.BIT:
			case MariaDBParser.BLOCK:
			case MariaDBParser.BOOL:
			case MariaDBParser.BOOLEAN:
			case MariaDBParser.BTREE:
			case MariaDBParser.CACHE:
			case MariaDBParser.CASCADED:
			case MariaDBParser.CHAIN:
			case MariaDBParser.CHANGED:
			case MariaDBParser.CHANNEL:
			case MariaDBParser.CHECKSUM:
			case MariaDBParser.PAGE_CHECKSUM:
			case MariaDBParser.CIPHER:
			case MariaDBParser.CLASS_ORIGIN:
			case MariaDBParser.CLIENT:
			case MariaDBParser.CLOSE:
			case MariaDBParser.CLUSTERING:
			case MariaDBParser.COALESCE:
			case MariaDBParser.CODE:
			case MariaDBParser.COLUMNS:
			case MariaDBParser.COLUMN_FORMAT:
			case MariaDBParser.COLUMN_NAME:
			case MariaDBParser.COMMENT:
			case MariaDBParser.COMMIT:
			case MariaDBParser.COMPACT:
			case MariaDBParser.COMPLETION:
			case MariaDBParser.COMPRESSED:
			case MariaDBParser.COMPRESSION:
			case MariaDBParser.CONCURRENT:
			case MariaDBParser.CONNECT:
			case MariaDBParser.CONNECTION:
			case MariaDBParser.CONSISTENT:
			case MariaDBParser.CONSTRAINT_CATALOG:
			case MariaDBParser.CONSTRAINT_SCHEMA:
			case MariaDBParser.CONSTRAINT_NAME:
			case MariaDBParser.CONTAINS:
			case MariaDBParser.CONTEXT:
			case MariaDBParser.CONTRIBUTORS:
			case MariaDBParser.COPY:
			case MariaDBParser.CPU:
			case MariaDBParser.CYCLE:
			case MariaDBParser.CURSOR_NAME:
			case MariaDBParser.DATA:
			case MariaDBParser.DATAFILE:
			case MariaDBParser.DEALLOCATE:
			case MariaDBParser.DEFAULT_AUTH:
			case MariaDBParser.DEFINER:
			case MariaDBParser.DELAY_KEY_WRITE:
			case MariaDBParser.DES_KEY_FILE:
			case MariaDBParser.DIRECTORY:
			case MariaDBParser.DISABLE:
			case MariaDBParser.DISCARD:
			case MariaDBParser.DISK:
			case MariaDBParser.DO:
			case MariaDBParser.DUMPFILE:
			case MariaDBParser.DUPLICATE:
			case MariaDBParser.DYNAMIC:
			case MariaDBParser.ENABLE:
			case MariaDBParser.ENCRYPTED:
			case MariaDBParser.ENCRYPTION:
			case MariaDBParser.ENCRYPTION_KEY_ID:
			case MariaDBParser.END:
			case MariaDBParser.ENDS:
			case MariaDBParser.ENGINE:
			case MariaDBParser.ENGINES:
			case MariaDBParser.ERROR:
			case MariaDBParser.ERRORS:
			case MariaDBParser.ESCAPE:
			case MariaDBParser.EVEN:
			case MariaDBParser.EVENT:
			case MariaDBParser.EVENTS:
			case MariaDBParser.EVERY:
			case MariaDBParser.EXCHANGE:
			case MariaDBParser.EXCLUSIVE:
			case MariaDBParser.EXPIRE:
			case MariaDBParser.EXPORT:
			case MariaDBParser.EXTENDED:
			case MariaDBParser.EXTENT_SIZE:
			case MariaDBParser.FAILED_LOGIN_ATTEMPTS:
			case MariaDBParser.FAST:
			case MariaDBParser.FAULTS:
			case MariaDBParser.FIELDS:
			case MariaDBParser.FILE_BLOCK_SIZE:
			case MariaDBParser.FILTER:
			case MariaDBParser.FIRST:
			case MariaDBParser.FIXED:
			case MariaDBParser.FLUSH:
			case MariaDBParser.FOLLOWS:
			case MariaDBParser.FOUND:
			case MariaDBParser.FULL:
			case MariaDBParser.FUNCTION:
			case MariaDBParser.GENERAL:
			case MariaDBParser.GLOBAL:
			case MariaDBParser.GRANTS:
			case MariaDBParser.GROUP_REPLICATION:
			case MariaDBParser.HANDLER:
			case MariaDBParser.HASH:
			case MariaDBParser.HELP:
			case MariaDBParser.HISTORY:
			case MariaDBParser.HOST:
			case MariaDBParser.HOSTS:
			case MariaDBParser.IDENTIFIED:
			case MariaDBParser.IGNORE_SERVER_IDS:
			case MariaDBParser.IMPORT:
			case MariaDBParser.INCREMENT:
			case MariaDBParser.INDEXES:
			case MariaDBParser.INITIAL_SIZE:
			case MariaDBParser.INPLACE:
			case MariaDBParser.INSERT_METHOD:
			case MariaDBParser.INSTALL:
			case MariaDBParser.INSTANCE:
			case MariaDBParser.INSTANT:
			case MariaDBParser.INVISIBLE:
			case MariaDBParser.INVOKER:
			case MariaDBParser.IO:
			case MariaDBParser.IO_THREAD:
			case MariaDBParser.IPC:
			case MariaDBParser.ISOLATION:
			case MariaDBParser.ISSUER:
			case MariaDBParser.JSON:
			case MariaDBParser.KEY_BLOCK_SIZE:
			case MariaDBParser.LANGUAGE:
			case MariaDBParser.LAST:
			case MariaDBParser.LEAVES:
			case MariaDBParser.LESS:
			case MariaDBParser.LEVEL:
			case MariaDBParser.LIST:
			case MariaDBParser.LOCAL:
			case MariaDBParser.LOCALES:
			case MariaDBParser.LOGFILE:
			case MariaDBParser.LOGS:
			case MariaDBParser.MASTER:
			case MariaDBParser.MASTER_AUTO_POSITION:
			case MariaDBParser.MASTER_CONNECT_RETRY:
			case MariaDBParser.MASTER_DELAY:
			case MariaDBParser.MASTER_HEARTBEAT_PERIOD:
			case MariaDBParser.MASTER_HOST:
			case MariaDBParser.MASTER_LOG_FILE:
			case MariaDBParser.MASTER_LOG_POS:
			case MariaDBParser.MASTER_PASSWORD:
			case MariaDBParser.MASTER_PORT:
			case MariaDBParser.MASTER_RETRY_COUNT:
			case MariaDBParser.MASTER_SSL:
			case MariaDBParser.MASTER_SSL_CA:
			case MariaDBParser.MASTER_SSL_CAPATH:
			case MariaDBParser.MASTER_SSL_CERT:
			case MariaDBParser.MASTER_SSL_CIPHER:
			case MariaDBParser.MASTER_SSL_CRL:
			case MariaDBParser.MASTER_SSL_CRLPATH:
			case MariaDBParser.MASTER_SSL_KEY:
			case MariaDBParser.MASTER_TLS_VERSION:
			case MariaDBParser.MASTER_USER:
			case MariaDBParser.MAX_CONNECTIONS_PER_HOUR:
			case MariaDBParser.MAX_QUERIES_PER_HOUR:
			case MariaDBParser.MAX_ROWS:
			case MariaDBParser.MAX_SIZE:
			case MariaDBParser.MAX_UPDATES_PER_HOUR:
			case MariaDBParser.MAX_USER_CONNECTIONS:
			case MariaDBParser.MEDIUM:
			case MariaDBParser.MEMBER:
			case MariaDBParser.MERGE:
			case MariaDBParser.MESSAGE_TEXT:
			case MariaDBParser.MID:
			case MariaDBParser.MIGRATE:
			case MariaDBParser.MIN_ROWS:
			case MariaDBParser.MODE:
			case MariaDBParser.MODIFY:
			case MariaDBParser.MUTEX:
			case MariaDBParser.MYSQL:
			case MariaDBParser.MYSQL_ERRNO:
			case MariaDBParser.NAME:
			case MariaDBParser.NAMES:
			case MariaDBParser.NCHAR:
			case MariaDBParser.NEVER:
			case MariaDBParser.NEXT:
			case MariaDBParser.NO:
			case MariaDBParser.NOCACHE:
			case MariaDBParser.NOCOPY:
			case MariaDBParser.NOCYCLE:
			case MariaDBParser.NOMAXVALUE:
			case MariaDBParser.NOMINVALUE:
			case MariaDBParser.NOWAIT:
			case MariaDBParser.NODEGROUP:
			case MariaDBParser.NONE:
			case MariaDBParser.ODBC:
			case MariaDBParser.OFFLINE:
			case MariaDBParser.OFFSET:
			case MariaDBParser.OF:
			case MariaDBParser.OJ:
			case MariaDBParser.OLD_PASSWORD:
			case MariaDBParser.ONE:
			case MariaDBParser.ONLINE:
			case MariaDBParser.ONLY:
			case MariaDBParser.OPEN:
			case MariaDBParser.OPTIMIZER_COSTS:
			case MariaDBParser.OPTIONS:
			case MariaDBParser.OWNER:
			case MariaDBParser.PACK_KEYS:
			case MariaDBParser.PAGE:
			case MariaDBParser.PARSER:
			case MariaDBParser.PARTIAL:
			case MariaDBParser.PARTITIONING:
			case MariaDBParser.PARTITIONS:
			case MariaDBParser.PASSWORD:
			case MariaDBParser.PASSWORD_LOCK_TIME:
			case MariaDBParser.PHASE:
			case MariaDBParser.PLUGIN:
			case MariaDBParser.PLUGIN_DIR:
			case MariaDBParser.PLUGINS:
			case MariaDBParser.PORT:
			case MariaDBParser.PRECEDES:
			case MariaDBParser.PREPARE:
			case MariaDBParser.PRESERVE:
			case MariaDBParser.PREV:
			case MariaDBParser.PROCESSLIST:
			case MariaDBParser.PROFILE:
			case MariaDBParser.PROFILES:
			case MariaDBParser.PROXY:
			case MariaDBParser.QUERY:
			case MariaDBParser.QUERY_RESPONSE_TIME:
			case MariaDBParser.QUICK:
			case MariaDBParser.REBUILD:
			case MariaDBParser.RECOVER:
			case MariaDBParser.RECURSIVE:
			case MariaDBParser.REDO_BUFFER_SIZE:
			case MariaDBParser.REDUNDANT:
			case MariaDBParser.RELAY:
			case MariaDBParser.RELAY_LOG_FILE:
			case MariaDBParser.RELAY_LOG_POS:
			case MariaDBParser.RELAYLOG:
			case MariaDBParser.REMOVE:
			case MariaDBParser.REORGANIZE:
			case MariaDBParser.REPAIR:
			case MariaDBParser.REPLICATE_DO_DB:
			case MariaDBParser.REPLICATE_DO_TABLE:
			case MariaDBParser.REPLICATE_IGNORE_DB:
			case MariaDBParser.REPLICATE_IGNORE_TABLE:
			case MariaDBParser.REPLICATE_REWRITE_DB:
			case MariaDBParser.REPLICATE_WILD_DO_TABLE:
			case MariaDBParser.REPLICATE_WILD_IGNORE_TABLE:
			case MariaDBParser.REPLICATION:
			case MariaDBParser.RESET:
			case MariaDBParser.RESTART:
			case MariaDBParser.RESUME:
			case MariaDBParser.RETURNED_SQLSTATE:
			case MariaDBParser.RETURNS:
			case MariaDBParser.REUSE:
			case MariaDBParser.ROLE:
			case MariaDBParser.ROLLBACK:
			case MariaDBParser.ROLLUP:
			case MariaDBParser.ROTATE:
			case MariaDBParser.ROW:
			case MariaDBParser.ROWS:
			case MariaDBParser.ROW_FORMAT:
			case MariaDBParser.RTREE:
			case MariaDBParser.SAVEPOINT:
			case MariaDBParser.SCHEDULE:
			case MariaDBParser.SECURITY:
			case MariaDBParser.SEQUENCE:
			case MariaDBParser.SERVER:
			case MariaDBParser.SESSION:
			case MariaDBParser.SHARE:
			case MariaDBParser.SHARED:
			case MariaDBParser.SIGNED:
			case MariaDBParser.SIMPLE:
			case MariaDBParser.SLAVE:
			case MariaDBParser.SLAVES:
			case MariaDBParser.SLOW:
			case MariaDBParser.SNAPSHOT:
			case MariaDBParser.SOCKET:
			case MariaDBParser.SOME:
			case MariaDBParser.SONAME:
			case MariaDBParser.SOUNDS:
			case MariaDBParser.SOURCE:
			case MariaDBParser.SQL_AFTER_GTIDS:
			case MariaDBParser.SQL_AFTER_MTS_GAPS:
			case MariaDBParser.SQL_BEFORE_GTIDS:
			case MariaDBParser.SQL_BUFFER_RESULT:
			case MariaDBParser.SQL_CACHE:
			case MariaDBParser.SQL_NO_CACHE:
			case MariaDBParser.SQL_THREAD:
			case MariaDBParser.START:
			case MariaDBParser.STARTS:
			case MariaDBParser.STATS_AUTO_RECALC:
			case MariaDBParser.STATS_PERSISTENT:
			case MariaDBParser.STATS_SAMPLE_PAGES:
			case MariaDBParser.STATUS:
			case MariaDBParser.STOP:
			case MariaDBParser.STORAGE:
			case MariaDBParser.STRING:
			case MariaDBParser.SUBCLASS_ORIGIN:
			case MariaDBParser.SUBJECT:
			case MariaDBParser.SUBPARTITION:
			case MariaDBParser.SUBPARTITIONS:
			case MariaDBParser.SUSPEND:
			case MariaDBParser.SWAPS:
			case MariaDBParser.SWITCHES:
			case MariaDBParser.TABLE_NAME:
			case MariaDBParser.TABLESPACE:
			case MariaDBParser.TABLE_TYPE:
			case MariaDBParser.TEMPORARY:
			case MariaDBParser.TEMPTABLE:
			case MariaDBParser.THAN:
			case MariaDBParser.TRADITIONAL:
			case MariaDBParser.TRANSACTION:
			case MariaDBParser.TRANSACTIONAL:
			case MariaDBParser.TRIGGERS:
			case MariaDBParser.TRUNCATE:
			case MariaDBParser.TYPES:
			case MariaDBParser.UNBOUNDED:
			case MariaDBParser.UNDEFINED:
			case MariaDBParser.UNDOFILE:
			case MariaDBParser.UNDO_BUFFER_SIZE:
			case MariaDBParser.UNINSTALL:
			case MariaDBParser.UNKNOWN:
			case MariaDBParser.UNTIL:
			case MariaDBParser.UPGRADE:
			case MariaDBParser.USER:
			case MariaDBParser.USE_FRM:
			case MariaDBParser.USER_RESOURCES:
			case MariaDBParser.VALIDATION:
			case MariaDBParser.VALUE:
			case MariaDBParser.VARIABLES:
			case MariaDBParser.VIEW:
			case MariaDBParser.VIRTUAL:
			case MariaDBParser.VISIBLE:
			case MariaDBParser.WAIT:
			case MariaDBParser.WARNINGS:
			case MariaDBParser.WITHOUT:
			case MariaDBParser.WORK:
			case MariaDBParser.WRAPPER:
			case MariaDBParser.WSREP_MEMBERSHIP:
			case MariaDBParser.WSREP_STATUS:
			case MariaDBParser.X509:
			case MariaDBParser.XA:
			case MariaDBParser.XML:
			case MariaDBParser.EUR:
			case MariaDBParser.USA:
			case MariaDBParser.JIS:
			case MariaDBParser.ISO:
			case MariaDBParser.INTERNAL:
			case MariaDBParser.QUARTER:
			case MariaDBParser.MONTH:
			case MariaDBParser.DAY:
			case MariaDBParser.HOUR:
			case MariaDBParser.MINUTE:
			case MariaDBParser.WEEK:
			case MariaDBParser.SECOND:
			case MariaDBParser.MICROSECOND:
			case MariaDBParser.USER_STATISTICS:
			case MariaDBParser.CLIENT_STATISTICS:
			case MariaDBParser.INDEX_STATISTICS:
			case MariaDBParser.TABLE_STATISTICS:
			case MariaDBParser.ADMIN:
			case MariaDBParser.AUDIT_ADMIN:
			case MariaDBParser.BACKUP_ADMIN:
			case MariaDBParser.BINLOG_ADMIN:
			case MariaDBParser.BINLOG_ENCRYPTION_ADMIN:
			case MariaDBParser.CLONE_ADMIN:
			case MariaDBParser.CONNECTION_ADMIN:
			case MariaDBParser.ENCRYPTION_KEY_ADMIN:
			case MariaDBParser.EXECUTE:
			case MariaDBParser.FILE:
			case MariaDBParser.FIREWALL_ADMIN:
			case MariaDBParser.FIREWALL_USER:
			case MariaDBParser.GROUP_REPLICATION_ADMIN:
			case MariaDBParser.INNODB_REDO_LOG_ARCHIVE:
			case MariaDBParser.INVOKE:
			case MariaDBParser.LAMBDA:
			case MariaDBParser.NDB_STORED_USER:
			case MariaDBParser.PASSWORDLESS_USER_ADMIN:
			case MariaDBParser.PERSIST_RO_VARIABLES_ADMIN:
			case MariaDBParser.PRIVILEGES:
			case MariaDBParser.PROCESS:
			case MariaDBParser.RELOAD:
			case MariaDBParser.REPLICATION_APPLIER:
			case MariaDBParser.REPLICATION_SLAVE_ADMIN:
			case MariaDBParser.RESOURCE_GROUP_ADMIN:
			case MariaDBParser.RESOURCE_GROUP_USER:
			case MariaDBParser.ROLE_ADMIN:
			case MariaDBParser.ROUTINE:
			case MariaDBParser.S3:
			case MariaDBParser.SESSION_VARIABLES_ADMIN:
			case MariaDBParser.SET_USER_ID:
			case MariaDBParser.SHOW_ROUTINE:
			case MariaDBParser.SHUTDOWN:
			case MariaDBParser.SUPER:
			case MariaDBParser.SYSTEM_VARIABLES_ADMIN:
			case MariaDBParser.TABLES:
			case MariaDBParser.TABLE_ENCRYPTION_ADMIN:
			case MariaDBParser.VERSION_TOKEN_ADMIN:
			case MariaDBParser.XA_RECOVER_ADMIN:
			case MariaDBParser.ARMSCII8:
			case MariaDBParser.ASCII:
			case MariaDBParser.BIG5:
			case MariaDBParser.CP1250:
			case MariaDBParser.CP1251:
			case MariaDBParser.CP1256:
			case MariaDBParser.CP1257:
			case MariaDBParser.CP850:
			case MariaDBParser.CP852:
			case MariaDBParser.CP866:
			case MariaDBParser.CP932:
			case MariaDBParser.DEC8:
			case MariaDBParser.EUCJPMS:
			case MariaDBParser.EUCKR:
			case MariaDBParser.GB18030:
			case MariaDBParser.GB2312:
			case MariaDBParser.GBK:
			case MariaDBParser.GEOSTD8:
			case MariaDBParser.GREEK:
			case MariaDBParser.HEBREW:
			case MariaDBParser.HP8:
			case MariaDBParser.KEYBCS2:
			case MariaDBParser.KOI8R:
			case MariaDBParser.KOI8U:
			case MariaDBParser.LATIN1:
			case MariaDBParser.LATIN2:
			case MariaDBParser.LATIN5:
			case MariaDBParser.LATIN7:
			case MariaDBParser.MACCE:
			case MariaDBParser.MACROMAN:
			case MariaDBParser.SJIS:
			case MariaDBParser.SWE7:
			case MariaDBParser.TIS620:
			case MariaDBParser.UCS2:
			case MariaDBParser.UJIS:
			case MariaDBParser.UTF16:
			case MariaDBParser.UTF16LE:
			case MariaDBParser.UTF32:
			case MariaDBParser.UTF8:
			case MariaDBParser.UTF8MB3:
			case MariaDBParser.UTF8MB4:
			case MariaDBParser.ARCHIVE:
			case MariaDBParser.BLACKHOLE:
			case MariaDBParser.CSV:
			case MariaDBParser.FEDERATED:
			case MariaDBParser.INNODB:
			case MariaDBParser.MEMORY:
			case MariaDBParser.MRG_MYISAM:
			case MariaDBParser.MYISAM:
			case MariaDBParser.NDB:
			case MariaDBParser.NDBCLUSTER:
			case MariaDBParser.PERFORMANCE_SCHEMA:
			case MariaDBParser.TOKUDB:
			case MariaDBParser.REPEATABLE:
			case MariaDBParser.COMMITTED:
			case MariaDBParser.UNCOMMITTED:
			case MariaDBParser.SERIALIZABLE:
			case MariaDBParser.GEOMETRYCOLLECTION:
			case MariaDBParser.LINESTRING:
			case MariaDBParser.MULTILINESTRING:
			case MariaDBParser.MULTIPOINT:
			case MariaDBParser.MULTIPOLYGON:
			case MariaDBParser.POINT:
			case MariaDBParser.POLYGON:
			case MariaDBParser.ABS:
			case MariaDBParser.ACOS:
			case MariaDBParser.ADDDATE:
			case MariaDBParser.ADDTIME:
			case MariaDBParser.AES_DECRYPT:
			case MariaDBParser.AES_ENCRYPT:
			case MariaDBParser.AREA:
			case MariaDBParser.ASBINARY:
			case MariaDBParser.ASIN:
			case MariaDBParser.ASTEXT:
			case MariaDBParser.ASWKB:
			case MariaDBParser.ASWKT:
			case MariaDBParser.ASYMMETRIC_DECRYPT:
			case MariaDBParser.ASYMMETRIC_DERIVE:
			case MariaDBParser.ASYMMETRIC_ENCRYPT:
			case MariaDBParser.ASYMMETRIC_SIGN:
			case MariaDBParser.ASYMMETRIC_VERIFY:
			case MariaDBParser.ATAN:
			case MariaDBParser.ATAN2:
			case MariaDBParser.BENCHMARK:
			case MariaDBParser.BIN:
			case MariaDBParser.BIT_COUNT:
			case MariaDBParser.BIT_LENGTH:
			case MariaDBParser.BUFFER:
			case MariaDBParser.CATALOG_NAME:
			case MariaDBParser.CEIL:
			case MariaDBParser.CEILING:
			case MariaDBParser.CENTROID:
			case MariaDBParser.CHARACTER_LENGTH:
			case MariaDBParser.CHARSET:
			case MariaDBParser.CHAR_LENGTH:
			case MariaDBParser.COERCIBILITY:
			case MariaDBParser.COLLATION:
			case MariaDBParser.COMPRESS:
			case MariaDBParser.CONCAT:
			case MariaDBParser.CONCAT_WS:
			case MariaDBParser.CONNECTION_ID:
			case MariaDBParser.CONV:
			case MariaDBParser.CONVERT_TZ:
			case MariaDBParser.COS:
			case MariaDBParser.COT:
			case MariaDBParser.CRC32:
			case MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY:
			case MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY:
			case MariaDBParser.CREATE_DH_PARAMETERS:
			case MariaDBParser.CREATE_DIGEST:
			case MariaDBParser.CROSSES:
			case MariaDBParser.DATEDIFF:
			case MariaDBParser.DATE_FORMAT:
			case MariaDBParser.DAYNAME:
			case MariaDBParser.DAYOFMONTH:
			case MariaDBParser.DAYOFWEEK:
			case MariaDBParser.DAYOFYEAR:
			case MariaDBParser.DECODE:
			case MariaDBParser.DEGREES:
			case MariaDBParser.DES_DECRYPT:
			case MariaDBParser.DES_ENCRYPT:
			case MariaDBParser.DIMENSION:
			case MariaDBParser.DISJOINT:
			case MariaDBParser.ELT:
			case MariaDBParser.ENCODE:
			case MariaDBParser.ENCRYPT:
			case MariaDBParser.ENDPOINT:
			case MariaDBParser.ENGINE_ATTRIBUTE:
			case MariaDBParser.ENVELOPE:
			case MariaDBParser.EQUALS:
			case MariaDBParser.EXP:
			case MariaDBParser.EXPORT_SET:
			case MariaDBParser.EXTERIORRING:
			case MariaDBParser.EXTRACTVALUE:
			case MariaDBParser.FIELD:
			case MariaDBParser.FIND_IN_SET:
			case MariaDBParser.FLOOR:
			case MariaDBParser.FORMAT:
			case MariaDBParser.FOUND_ROWS:
			case MariaDBParser.FROM_BASE64:
			case MariaDBParser.FROM_DAYS:
			case MariaDBParser.FROM_UNIXTIME:
			case MariaDBParser.GEOMCOLLFROMTEXT:
			case MariaDBParser.GEOMCOLLFROMWKB:
			case MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT:
			case MariaDBParser.GEOMETRYCOLLECTIONFROMWKB:
			case MariaDBParser.GEOMETRYFROMTEXT:
			case MariaDBParser.GEOMETRYFROMWKB:
			case MariaDBParser.GEOMETRYN:
			case MariaDBParser.GEOMETRYTYPE:
			case MariaDBParser.GEOMFROMTEXT:
			case MariaDBParser.GEOMFROMWKB:
			case MariaDBParser.GET_FORMAT:
			case MariaDBParser.GET_LOCK:
			case MariaDBParser.GLENGTH:
			case MariaDBParser.GREATEST:
			case MariaDBParser.GTID_SUBSET:
			case MariaDBParser.GTID_SUBTRACT:
			case MariaDBParser.HEX:
			case MariaDBParser.IFNULL:
			case MariaDBParser.INET6_ATON:
			case MariaDBParser.INET6_NTOA:
			case MariaDBParser.INET_ATON:
			case MariaDBParser.INET_NTOA:
			case MariaDBParser.INSTR:
			case MariaDBParser.INTERIORRINGN:
			case MariaDBParser.INTERSECTS:
			case MariaDBParser.ISCLOSED:
			case MariaDBParser.ISEMPTY:
			case MariaDBParser.ISNULL:
			case MariaDBParser.ISSIMPLE:
			case MariaDBParser.IS_FREE_LOCK:
			case MariaDBParser.IS_IPV4:
			case MariaDBParser.IS_IPV4_COMPAT:
			case MariaDBParser.IS_IPV4_MAPPED:
			case MariaDBParser.IS_IPV6:
			case MariaDBParser.IS_USED_LOCK:
			case MariaDBParser.LAST_INSERT_ID:
			case MariaDBParser.LCASE:
			case MariaDBParser.LEAST:
			case MariaDBParser.LENGTH:
			case MariaDBParser.LINEFROMTEXT:
			case MariaDBParser.LINEFROMWKB:
			case MariaDBParser.LINESTRINGFROMTEXT:
			case MariaDBParser.LINESTRINGFROMWKB:
			case MariaDBParser.LN:
			case MariaDBParser.LOAD_FILE:
			case MariaDBParser.LOCATE:
			case MariaDBParser.LOG:
			case MariaDBParser.LOG10:
			case MariaDBParser.LOG2:
			case MariaDBParser.LOWER:
			case MariaDBParser.LPAD:
			case MariaDBParser.LTRIM:
			case MariaDBParser.MAKEDATE:
			case MariaDBParser.MAKETIME:
			case MariaDBParser.MAKE_SET:
			case MariaDBParser.MASTER_POS_WAIT:
			case MariaDBParser.MBRCONTAINS:
			case MariaDBParser.MBRDISJOINT:
			case MariaDBParser.MBREQUAL:
			case MariaDBParser.MBRINTERSECTS:
			case MariaDBParser.MBROVERLAPS:
			case MariaDBParser.MBRTOUCHES:
			case MariaDBParser.MBRWITHIN:
			case MariaDBParser.MD5:
			case MariaDBParser.MLINEFROMTEXT:
			case MariaDBParser.MLINEFROMWKB:
			case MariaDBParser.MONTHNAME:
			case MariaDBParser.MPOINTFROMTEXT:
			case MariaDBParser.MPOINTFROMWKB:
			case MariaDBParser.MPOLYFROMTEXT:
			case MariaDBParser.MPOLYFROMWKB:
			case MariaDBParser.MULTILINESTRINGFROMTEXT:
			case MariaDBParser.MULTILINESTRINGFROMWKB:
			case MariaDBParser.MULTIPOINTFROMTEXT:
			case MariaDBParser.MULTIPOINTFROMWKB:
			case MariaDBParser.MULTIPOLYGONFROMTEXT:
			case MariaDBParser.MULTIPOLYGONFROMWKB:
			case MariaDBParser.NAME_CONST:
			case MariaDBParser.NULLIF:
			case MariaDBParser.NUMGEOMETRIES:
			case MariaDBParser.NUMINTERIORRINGS:
			case MariaDBParser.NUMPOINTS:
			case MariaDBParser.OCT:
			case MariaDBParser.OCTET_LENGTH:
			case MariaDBParser.ORD:
			case MariaDBParser.OVERLAPS:
			case MariaDBParser.PERIOD_ADD:
			case MariaDBParser.PERIOD_DIFF:
			case MariaDBParser.PI:
			case MariaDBParser.POINTFROMTEXT:
			case MariaDBParser.POINTFROMWKB:
			case MariaDBParser.POINTN:
			case MariaDBParser.POLYFROMTEXT:
			case MariaDBParser.POLYFROMWKB:
			case MariaDBParser.POLYGONFROMTEXT:
			case MariaDBParser.POLYGONFROMWKB:
			case MariaDBParser.POW:
			case MariaDBParser.POWER:
			case MariaDBParser.QUOTE:
			case MariaDBParser.RADIANS:
			case MariaDBParser.RAND:
			case MariaDBParser.RANDOM_BYTES:
			case MariaDBParser.RELEASE_LOCK:
			case MariaDBParser.REVERSE:
			case MariaDBParser.ROUND:
			case MariaDBParser.ROW_COUNT:
			case MariaDBParser.RPAD:
			case MariaDBParser.RTRIM:
			case MariaDBParser.SEC_TO_TIME:
			case MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE:
			case MariaDBParser.SESSION_USER:
			case MariaDBParser.SHA:
			case MariaDBParser.SHA1:
			case MariaDBParser.SHA2:
			case MariaDBParser.SCHEMA_NAME:
			case MariaDBParser.SIGN:
			case MariaDBParser.SIN:
			case MariaDBParser.SLEEP:
			case MariaDBParser.SOUNDEX:
			case MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS:
			case MariaDBParser.SQRT:
			case MariaDBParser.SRID:
			case MariaDBParser.STARTPOINT:
			case MariaDBParser.STRCMP:
			case MariaDBParser.STR_TO_DATE:
			case MariaDBParser.ST_AREA:
			case MariaDBParser.ST_ASBINARY:
			case MariaDBParser.ST_ASTEXT:
			case MariaDBParser.ST_ASWKB:
			case MariaDBParser.ST_ASWKT:
			case MariaDBParser.ST_BUFFER:
			case MariaDBParser.ST_CENTROID:
			case MariaDBParser.ST_CONTAINS:
			case MariaDBParser.ST_CROSSES:
			case MariaDBParser.ST_DIFFERENCE:
			case MariaDBParser.ST_DIMENSION:
			case MariaDBParser.ST_DISJOINT:
			case MariaDBParser.ST_DISTANCE:
			case MariaDBParser.ST_ENDPOINT:
			case MariaDBParser.ST_ENVELOPE:
			case MariaDBParser.ST_EQUALS:
			case MariaDBParser.ST_EXTERIORRING:
			case MariaDBParser.ST_GEOMCOLLFROMTEXT:
			case MariaDBParser.ST_GEOMCOLLFROMTXT:
			case MariaDBParser.ST_GEOMCOLLFROMWKB:
			case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
			case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB:
			case MariaDBParser.ST_GEOMETRYFROMTEXT:
			case MariaDBParser.ST_GEOMETRYFROMWKB:
			case MariaDBParser.ST_GEOMETRYN:
			case MariaDBParser.ST_GEOMETRYTYPE:
			case MariaDBParser.ST_GEOMFROMTEXT:
			case MariaDBParser.ST_GEOMFROMWKB:
			case MariaDBParser.ST_INTERIORRINGN:
			case MariaDBParser.ST_INTERSECTION:
			case MariaDBParser.ST_INTERSECTS:
			case MariaDBParser.ST_ISCLOSED:
			case MariaDBParser.ST_ISEMPTY:
			case MariaDBParser.ST_ISSIMPLE:
			case MariaDBParser.ST_LINEFROMTEXT:
			case MariaDBParser.ST_LINEFROMWKB:
			case MariaDBParser.ST_LINESTRINGFROMTEXT:
			case MariaDBParser.ST_LINESTRINGFROMWKB:
			case MariaDBParser.ST_NUMGEOMETRIES:
			case MariaDBParser.ST_NUMINTERIORRING:
			case MariaDBParser.ST_NUMINTERIORRINGS:
			case MariaDBParser.ST_NUMPOINTS:
			case MariaDBParser.ST_OVERLAPS:
			case MariaDBParser.ST_POINTFROMTEXT:
			case MariaDBParser.ST_POINTFROMWKB:
			case MariaDBParser.ST_POINTN:
			case MariaDBParser.ST_POLYFROMTEXT:
			case MariaDBParser.ST_POLYFROMWKB:
			case MariaDBParser.ST_POLYGONFROMTEXT:
			case MariaDBParser.ST_POLYGONFROMWKB:
			case MariaDBParser.ST_SRID:
			case MariaDBParser.ST_STARTPOINT:
			case MariaDBParser.ST_SYMDIFFERENCE:
			case MariaDBParser.ST_TOUCHES:
			case MariaDBParser.ST_UNION:
			case MariaDBParser.ST_WITHIN:
			case MariaDBParser.ST_X:
			case MariaDBParser.ST_Y:
			case MariaDBParser.SUBDATE:
			case MariaDBParser.SUBSTRING_INDEX:
			case MariaDBParser.SUBTIME:
			case MariaDBParser.SYSTEM_USER:
			case MariaDBParser.TAN:
			case MariaDBParser.TIMEDIFF:
			case MariaDBParser.TIMESTAMPADD:
			case MariaDBParser.TIMESTAMPDIFF:
			case MariaDBParser.TIME_FORMAT:
			case MariaDBParser.TIME_TO_SEC:
			case MariaDBParser.TOUCHES:
			case MariaDBParser.TO_BASE64:
			case MariaDBParser.TO_DAYS:
			case MariaDBParser.TO_SECONDS:
			case MariaDBParser.UCASE:
			case MariaDBParser.UNCOMPRESS:
			case MariaDBParser.UNCOMPRESSED_LENGTH:
			case MariaDBParser.UNHEX:
			case MariaDBParser.UNIX_TIMESTAMP:
			case MariaDBParser.UPDATEXML:
			case MariaDBParser.UPPER:
			case MariaDBParser.UUID:
			case MariaDBParser.UUID_SHORT:
			case MariaDBParser.VALIDATE_PASSWORD_STRENGTH:
			case MariaDBParser.VERSION:
			case MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case MariaDBParser.WEEKDAY:
			case MariaDBParser.WEEKOFYEAR:
			case MariaDBParser.WEIGHT_STRING:
			case MariaDBParser.WITHIN:
			case MariaDBParser.YEARWEEK:
			case MariaDBParser.Y_FUNCTION:
			case MariaDBParser.X_FUNCTION:
			case MariaDBParser.VIA:
			case MariaDBParser.LASTVAL:
			case MariaDBParser.NEXTVAL:
			case MariaDBParser.SETVAL:
			case MariaDBParser.PREVIOUS:
			case MariaDBParser.PERSISTENT:
			case MariaDBParser.BINLOG_MONITOR:
			case MariaDBParser.BINLOG_REPLAY:
			case MariaDBParser.FEDERATED_ADMIN:
			case MariaDBParser.READ_ONLY_ADMIN:
			case MariaDBParser.REPLICA:
			case MariaDBParser.REPLICAS:
			case MariaDBParser.REPLICATION_MASTER_ADMIN:
			case MariaDBParser.MONITOR:
			case MariaDBParser.READ_ONLY:
			case MariaDBParser.REPLAY:
			case MariaDBParser.MOD:
			case MariaDBParser.ID:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6534;
				this.simpleId();
				}
				break;
			case MariaDBParser.CHARSET_REVERSE_QOUTE_STRING:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6535;
				this.match(MariaDBParser.CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			case MariaDBParser.STRING_LITERAL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6536;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public simpleId(): SimpleIdContext {
		let _localctx: SimpleIdContext = new SimpleIdContext(this._ctx, this.state);
		this.enterRule(_localctx, 590, MariaDBParser.RULE_simpleId);
		try {
			this.state = 6548;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 971, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6539;
				this.match(MariaDBParser.ID);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6540;
				this.charsetNameBase();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6541;
				this.transactionLevelBase();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6542;
				this.engineNameBase();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6543;
				this.privilegesBase();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 6544;
				this.intervalTypeBase();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 6545;
				this.dataTypeBase();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 6546;
				this.keywordsCanBeId();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 6547;
				this.scalarFunctionName();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dottedId(): DottedIdContext {
		let _localctx: DottedIdContext = new DottedIdContext(this._ctx, this.state);
		this.enterRule(_localctx, 592, MariaDBParser.RULE_dottedId);
		try {
			this.state = 6553;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.DOT_ID:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6550;
				this.match(MariaDBParser.DOT_ID);
				}
				break;
			case MariaDBParser.DOT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6551;
				this.match(MariaDBParser.DOT);
				this.state = 6552;
				this.uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public decimalLiteral(): DecimalLiteralContext {
		let _localctx: DecimalLiteralContext = new DecimalLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 594, MariaDBParser.RULE_decimalLiteral);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6555;
			_la = this._input.LA(1);
			if (!(((((_la - 1159)) & ~0x1F) === 0 && ((1 << (_la - 1159)) & ((1 << (MariaDBParser.ZERO_DECIMAL - 1159)) | (1 << (MariaDBParser.ONE_DECIMAL - 1159)) | (1 << (MariaDBParser.TWO_DECIMAL - 1159)) | (1 << (MariaDBParser.DECIMAL_LITERAL - 1159)) | (1 << (MariaDBParser.REAL_LITERAL - 1159)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fileSizeLiteral(): FileSizeLiteralContext {
		let _localctx: FileSizeLiteralContext = new FileSizeLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 596, MariaDBParser.RULE_fileSizeLiteral);
		try {
			this.state = 6559;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.FILESIZE_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6557;
				this.match(MariaDBParser.FILESIZE_LITERAL);
				}
				break;
			case MariaDBParser.ZERO_DECIMAL:
			case MariaDBParser.ONE_DECIMAL:
			case MariaDBParser.TWO_DECIMAL:
			case MariaDBParser.DECIMAL_LITERAL:
			case MariaDBParser.REAL_LITERAL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6558;
				this.decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stringLiteral(): StringLiteralContext {
		let _localctx: StringLiteralContext = new StringLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 598, MariaDBParser.RULE_stringLiteral);
		let _la: number;
		try {
			let _alt: number;
			this.state = 6584;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 980, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6566;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.STRING_LITERAL:
				case MariaDBParser.STRING_CHARSET_NAME:
					{
					this.state = 6562;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MariaDBParser.STRING_CHARSET_NAME) {
						{
						this.state = 6561;
						this.match(MariaDBParser.STRING_CHARSET_NAME);
						}
					}

					this.state = 6564;
					this.match(MariaDBParser.STRING_LITERAL);
					}
					break;
				case MariaDBParser.START_NATIONAL_STRING_LITERAL:
					{
					this.state = 6565;
					this.match(MariaDBParser.START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 6569;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 6568;
						this.match(MariaDBParser.STRING_LITERAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 6571;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 976, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6578;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case MariaDBParser.STRING_LITERAL:
				case MariaDBParser.STRING_CHARSET_NAME:
					{
					this.state = 6574;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === MariaDBParser.STRING_CHARSET_NAME) {
						{
						this.state = 6573;
						this.match(MariaDBParser.STRING_CHARSET_NAME);
						}
					}

					this.state = 6576;
					this.match(MariaDBParser.STRING_LITERAL);
					}
					break;
				case MariaDBParser.START_NATIONAL_STRING_LITERAL:
					{
					this.state = 6577;
					this.match(MariaDBParser.START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 6582;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 979, this._ctx) ) {
				case 1:
					{
					this.state = 6580;
					this.match(MariaDBParser.COLLATE);
					this.state = 6581;
					this.collationName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public booleanLiteral(): BooleanLiteralContext {
		let _localctx: BooleanLiteralContext = new BooleanLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 600, MariaDBParser.RULE_booleanLiteral);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6586;
			_la = this._input.LA(1);
			if (!(_la === MariaDBParser.FALSE || _la === MariaDBParser.TRUE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public hexadecimalLiteral(): HexadecimalLiteralContext {
		let _localctx: HexadecimalLiteralContext = new HexadecimalLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 602, MariaDBParser.RULE_hexadecimalLiteral);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6589;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.STRING_CHARSET_NAME) {
				{
				this.state = 6588;
				this.match(MariaDBParser.STRING_CHARSET_NAME);
				}
			}

			this.state = 6591;
			this.match(MariaDBParser.HEXADECIMAL_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nullNotnull(): NullNotnullContext {
		let _localctx: NullNotnullContext = new NullNotnullContext(this._ctx, this.state);
		this.enterRule(_localctx, 604, MariaDBParser.RULE_nullNotnull);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6594;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.NOT) {
				{
				this.state = 6593;
				this.match(MariaDBParser.NOT);
				}
			}

			this.state = 6596;
			_la = this._input.LA(1);
			if (!(_la === MariaDBParser.NULL_LITERAL || _la === MariaDBParser.NULL_SPEC_LITERAL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constant(): ConstantContext {
		let _localctx: ConstantContext = new ConstantContext(this._ctx, this.state);
		this.enterRule(_localctx, 606, MariaDBParser.RULE_constant);
		let _la: number;
		try {
			this.state = 6610;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 984, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6598;
				this.stringLiteral();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6599;
				this.decimalLiteral();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6600;
				this.match(MariaDBParser.MINUS);
				this.state = 6601;
				this.decimalLiteral();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6602;
				this.hexadecimalLiteral();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6603;
				this.booleanLiteral();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 6604;
				this.match(MariaDBParser.REAL_LITERAL);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 6605;
				this.match(MariaDBParser.BIT_STRING);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 6607;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.NOT) {
					{
					this.state = 6606;
					this.match(MariaDBParser.NOT);
					}
				}

				this.state = 6609;
				_localctx._nullLiteral = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.NULL_LITERAL || _la === MariaDBParser.NULL_SPEC_LITERAL)) {
					_localctx._nullLiteral = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataType(): DataTypeContext {
		let _localctx: DataTypeContext = new DataTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 608, MariaDBParser.RULE_dataType);
		let _la: number;
		try {
			let _alt: number;
			this.state = 6734;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1012, this._ctx) ) {
			case 1:
				_localctx = new StringDataTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6612;
				(_localctx as StringDataTypeContext)._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.CHARACTER || ((((_la - 222)) & ~0x1F) === 0 && ((1 << (_la - 222)) & ((1 << (MariaDBParser.CHAR - 222)) | (1 << (MariaDBParser.VARCHAR - 222)) | (1 << (MariaDBParser.NVARCHAR - 222)) | (1 << (MariaDBParser.LONG - 222)) | (1 << (MariaDBParser.TINYTEXT - 222)) | (1 << (MariaDBParser.TEXT - 222)) | (1 << (MariaDBParser.MEDIUMTEXT - 222)) | (1 << (MariaDBParser.LONGTEXT - 222)))) !== 0) || _la === MariaDBParser.NCHAR)) {
					(_localctx as StringDataTypeContext)._typeName = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6614;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.VARYING) {
					{
					this.state = 6613;
					this.match(MariaDBParser.VARYING);
					}
				}

				this.state = 6617;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 986, this._ctx) ) {
				case 1:
					{
					this.state = 6616;
					this.lengthOneDimension();
					}
					break;
				}
				this.state = 6620;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 987, this._ctx) ) {
				case 1:
					{
					this.state = 6619;
					this.match(MariaDBParser.BINARY);
					}
					break;
				}
				this.state = 6625;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 988, this._ctx) ) {
				case 1:
					{
					this.state = 6622;
					this.charSet();
					this.state = 6623;
					this.charsetName();
					}
					break;
				}
				this.state = 6630;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 989, this._ctx) ) {
				case 1:
					{
					this.state = 6627;
					this.match(MariaDBParser.COLLATE);
					this.state = 6628;
					this.collationName();
					}
					break;

				case 2:
					{
					this.state = 6629;
					this.match(MariaDBParser.BINARY);
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new NationalStringDataTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6632;
				this.match(MariaDBParser.NATIONAL);
				this.state = 6633;
				(_localctx as NationalStringDataTypeContext)._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.CHARACTER || _la === MariaDBParser.VARCHAR)) {
					(_localctx as NationalStringDataTypeContext)._typeName = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6635;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 990, this._ctx) ) {
				case 1:
					{
					this.state = 6634;
					this.lengthOneDimension();
					}
					break;
				}
				this.state = 6638;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 991, this._ctx) ) {
				case 1:
					{
					this.state = 6637;
					this.match(MariaDBParser.BINARY);
					}
					break;
				}
				}
				break;

			case 3:
				_localctx = new NationalStringDataTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6640;
				this.match(MariaDBParser.NCHAR);
				this.state = 6641;
				(_localctx as NationalStringDataTypeContext)._typeName = this.match(MariaDBParser.VARCHAR);
				this.state = 6643;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 992, this._ctx) ) {
				case 1:
					{
					this.state = 6642;
					this.lengthOneDimension();
					}
					break;
				}
				this.state = 6646;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 993, this._ctx) ) {
				case 1:
					{
					this.state = 6645;
					this.match(MariaDBParser.BINARY);
					}
					break;
				}
				}
				break;

			case 4:
				_localctx = new NationalVaryingStringDataTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6648;
				this.match(MariaDBParser.NATIONAL);
				this.state = 6649;
				(_localctx as NationalVaryingStringDataTypeContext)._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.CHARACTER || _la === MariaDBParser.CHAR)) {
					(_localctx as NationalVaryingStringDataTypeContext)._typeName = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6650;
				this.match(MariaDBParser.VARYING);
				this.state = 6652;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 994, this._ctx) ) {
				case 1:
					{
					this.state = 6651;
					this.lengthOneDimension();
					}
					break;
				}
				this.state = 6655;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 995, this._ctx) ) {
				case 1:
					{
					this.state = 6654;
					this.match(MariaDBParser.BINARY);
					}
					break;
				}
				}
				break;

			case 5:
				_localctx = new DimensionDataTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6657;
				(_localctx as DimensionDataTypeContext)._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (MariaDBParser.TINYINT - 196)) | (1 << (MariaDBParser.SMALLINT - 196)) | (1 << (MariaDBParser.MEDIUMINT - 196)) | (1 << (MariaDBParser.MIDDLEINT - 196)) | (1 << (MariaDBParser.INT - 196)) | (1 << (MariaDBParser.INT1 - 196)) | (1 << (MariaDBParser.INT2 - 196)) | (1 << (MariaDBParser.INT3 - 196)) | (1 << (MariaDBParser.INT4 - 196)) | (1 << (MariaDBParser.INT8 - 196)) | (1 << (MariaDBParser.INTEGER - 196)) | (1 << (MariaDBParser.BIGINT - 196)))) !== 0))) {
					(_localctx as DimensionDataTypeContext)._typeName = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6659;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 996, this._ctx) ) {
				case 1:
					{
					this.state = 6658;
					this.lengthOneDimension();
					}
					break;
				}
				this.state = 6664;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 997, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 6661;
						_la = this._input.LA(1);
						if (!(_la === MariaDBParser.UNSIGNED || _la === MariaDBParser.ZEROFILL || _la === MariaDBParser.SIGNED)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						}
					}
					this.state = 6666;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 997, this._ctx);
				}
				}
				break;

			case 6:
				_localctx = new DimensionDataTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 6667;
				(_localctx as DimensionDataTypeContext)._typeName = this.match(MariaDBParser.REAL);
				this.state = 6669;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 998, this._ctx) ) {
				case 1:
					{
					this.state = 6668;
					this.lengthTwoDimension();
					}
					break;
				}
				this.state = 6674;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 999, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 6671;
						_la = this._input.LA(1);
						if (!(_la === MariaDBParser.UNSIGNED || _la === MariaDBParser.ZEROFILL || _la === MariaDBParser.SIGNED)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						}
					}
					this.state = 6676;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 999, this._ctx);
				}
				}
				break;

			case 7:
				_localctx = new DimensionDataTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 6677;
				(_localctx as DimensionDataTypeContext)._typeName = this.match(MariaDBParser.DOUBLE);
				this.state = 6679;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.PRECISION) {
					{
					this.state = 6678;
					this.match(MariaDBParser.PRECISION);
					}
				}

				this.state = 6682;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1001, this._ctx) ) {
				case 1:
					{
					this.state = 6681;
					this.lengthTwoDimension();
					}
					break;
				}
				this.state = 6687;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1002, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 6684;
						_la = this._input.LA(1);
						if (!(_la === MariaDBParser.UNSIGNED || _la === MariaDBParser.ZEROFILL || _la === MariaDBParser.SIGNED)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						}
					}
					this.state = 6689;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1002, this._ctx);
				}
				}
				break;

			case 8:
				_localctx = new DimensionDataTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 6690;
				(_localctx as DimensionDataTypeContext)._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 211)) & ~0x1F) === 0 && ((1 << (_la - 211)) & ((1 << (MariaDBParser.FLOAT - 211)) | (1 << (MariaDBParser.FLOAT4 - 211)) | (1 << (MariaDBParser.FLOAT8 - 211)) | (1 << (MariaDBParser.DECIMAL - 211)) | (1 << (MariaDBParser.DEC - 211)) | (1 << (MariaDBParser.NUMERIC - 211)))) !== 0) || _la === MariaDBParser.FIXED)) {
					(_localctx as DimensionDataTypeContext)._typeName = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6692;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1003, this._ctx) ) {
				case 1:
					{
					this.state = 6691;
					this.lengthTwoOptionalDimension();
					}
					break;
				}
				this.state = 6697;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1004, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 6694;
						_la = this._input.LA(1);
						if (!(_la === MariaDBParser.UNSIGNED || _la === MariaDBParser.ZEROFILL || _la === MariaDBParser.SIGNED)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						}
					}
					this.state = 6699;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 1004, this._ctx);
				}
				}
				break;

			case 9:
				_localctx = new SimpleDataTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 6700;
				(_localctx as SimpleDataTypeContext)._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MariaDBParser.DATE - 217)) | (1 << (MariaDBParser.TINYBLOB - 217)) | (1 << (MariaDBParser.MEDIUMBLOB - 217)) | (1 << (MariaDBParser.LONGBLOB - 217)) | (1 << (MariaDBParser.SERIAL - 217)))) !== 0) || _la === MariaDBParser.BOOL || _la === MariaDBParser.BOOLEAN)) {
					(_localctx as SimpleDataTypeContext)._typeName = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 10:
				_localctx = new DimensionDataTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 6701;
				(_localctx as DimensionDataTypeContext)._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 218)) & ~0x1F) === 0 && ((1 << (_la - 218)) & ((1 << (MariaDBParser.TIME - 218)) | (1 << (MariaDBParser.TIMESTAMP - 218)) | (1 << (MariaDBParser.DATETIME - 218)) | (1 << (MariaDBParser.YEAR - 218)) | (1 << (MariaDBParser.BINARY - 218)) | (1 << (MariaDBParser.VARBINARY - 218)) | (1 << (MariaDBParser.BLOB - 218)))) !== 0) || _la === MariaDBParser.BIT)) {
					(_localctx as DimensionDataTypeContext)._typeName = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6703;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1005, this._ctx) ) {
				case 1:
					{
					this.state = 6702;
					this.lengthOneDimension();
					}
					break;
				}
				}
				break;

			case 11:
				_localctx = new CollectionDataTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 6705;
				(_localctx as CollectionDataTypeContext)._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.SET || _la === MariaDBParser.ENUM)) {
					(_localctx as CollectionDataTypeContext)._typeName = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6706;
				this.collectionOptions();
				this.state = 6708;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1006, this._ctx) ) {
				case 1:
					{
					this.state = 6707;
					this.match(MariaDBParser.BINARY);
					}
					break;
				}
				this.state = 6713;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1007, this._ctx) ) {
				case 1:
					{
					this.state = 6710;
					this.charSet();
					this.state = 6711;
					this.charsetName();
					}
					break;
				}
				}
				break;

			case 12:
				_localctx = new SpatialDataTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 6715;
				(_localctx as SpatialDataTypeContext)._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.JSON || ((((_la - 810)) & ~0x1F) === 0 && ((1 << (_la - 810)) & ((1 << (MariaDBParser.GEOMETRYCOLLECTION - 810)) | (1 << (MariaDBParser.GEOMCOLLECTION - 810)) | (1 << (MariaDBParser.GEOMETRY - 810)) | (1 << (MariaDBParser.LINESTRING - 810)) | (1 << (MariaDBParser.MULTILINESTRING - 810)) | (1 << (MariaDBParser.MULTIPOINT - 810)) | (1 << (MariaDBParser.MULTIPOLYGON - 810)) | (1 << (MariaDBParser.POINT - 810)) | (1 << (MariaDBParser.POLYGON - 810)))) !== 0))) {
					(_localctx as SpatialDataTypeContext)._typeName = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 13:
				_localctx = new LongVarcharDataTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 6716;
				(_localctx as LongVarcharDataTypeContext)._typeName = this.match(MariaDBParser.LONG);
				this.state = 6718;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.VARCHAR) {
					{
					this.state = 6717;
					this.match(MariaDBParser.VARCHAR);
					}
				}

				this.state = 6721;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1009, this._ctx) ) {
				case 1:
					{
					this.state = 6720;
					this.match(MariaDBParser.BINARY);
					}
					break;
				}
				this.state = 6726;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1010, this._ctx) ) {
				case 1:
					{
					this.state = 6723;
					this.charSet();
					this.state = 6724;
					this.charsetName();
					}
					break;
				}
				this.state = 6730;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1011, this._ctx) ) {
				case 1:
					{
					this.state = 6728;
					this.match(MariaDBParser.COLLATE);
					this.state = 6729;
					this.collationName();
					}
					break;
				}
				}
				break;

			case 14:
				_localctx = new LongVarbinaryDataTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 6732;
				this.match(MariaDBParser.LONG);
				this.state = 6733;
				this.match(MariaDBParser.VARBINARY);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public collectionOptions(): CollectionOptionsContext {
		let _localctx: CollectionOptionsContext = new CollectionOptionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 610, MariaDBParser.RULE_collectionOptions);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6736;
			this.match(MariaDBParser.LR_BRACKET);
			this.state = 6737;
			this.match(MariaDBParser.STRING_LITERAL);
			this.state = 6742;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.COMMA) {
				{
				{
				this.state = 6738;
				this.match(MariaDBParser.COMMA);
				this.state = 6739;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				}
				this.state = 6744;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6745;
			this.match(MariaDBParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public convertedDataType(): ConvertedDataTypeContext {
		let _localctx: ConvertedDataTypeContext = new ConvertedDataTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 612, MariaDBParser.RULE_convertedDataType);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6769;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.BINARY:
			case MariaDBParser.NCHAR:
				{
				this.state = 6747;
				_localctx._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.BINARY || _la === MariaDBParser.NCHAR)) {
					_localctx._typeName = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6749;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.LR_BRACKET) {
					{
					this.state = 6748;
					this.lengthOneDimension();
					}
				}

				}
				break;
			case MariaDBParser.CHAR:
				{
				this.state = 6751;
				_localctx._typeName = this.match(MariaDBParser.CHAR);
				this.state = 6753;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.LR_BRACKET) {
					{
					this.state = 6752;
					this.lengthOneDimension();
					}
				}

				this.state = 6758;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.CHARACTER || _la === MariaDBParser.CHAR || _la === MariaDBParser.CHARSET) {
					{
					this.state = 6755;
					this.charSet();
					this.state = 6756;
					this.charsetName();
					}
				}

				}
				break;
			case MariaDBParser.INT:
			case MariaDBParser.INTEGER:
			case MariaDBParser.DATE:
			case MariaDBParser.TIME:
			case MariaDBParser.DATETIME:
			case MariaDBParser.JSON:
				{
				this.state = 6760;
				_localctx._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & ((1 << (MariaDBParser.INT - 200)) | (1 << (MariaDBParser.INTEGER - 200)) | (1 << (MariaDBParser.DATE - 200)) | (1 << (MariaDBParser.TIME - 200)) | (1 << (MariaDBParser.DATETIME - 200)))) !== 0) || _la === MariaDBParser.JSON)) {
					_localctx._typeName = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case MariaDBParser.DECIMAL:
				{
				this.state = 6761;
				_localctx._typeName = this.match(MariaDBParser.DECIMAL);
				this.state = 6763;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.LR_BRACKET) {
					{
					this.state = 6762;
					this.lengthTwoOptionalDimension();
					}
				}

				}
				break;
			case MariaDBParser.UNSIGNED:
			case MariaDBParser.SIGNED:
				{
				this.state = 6765;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.UNSIGNED || _la === MariaDBParser.SIGNED)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6767;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.INTEGER) {
					{
					this.state = 6766;
					this.match(MariaDBParser.INTEGER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 6772;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.ARRAY) {
				{
				this.state = 6771;
				this.match(MariaDBParser.ARRAY);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lengthOneDimension(): LengthOneDimensionContext {
		let _localctx: LengthOneDimensionContext = new LengthOneDimensionContext(this._ctx, this.state);
		this.enterRule(_localctx, 614, MariaDBParser.RULE_lengthOneDimension);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6774;
			this.match(MariaDBParser.LR_BRACKET);
			this.state = 6775;
			this.decimalLiteral();
			this.state = 6776;
			this.match(MariaDBParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lengthTwoDimension(): LengthTwoDimensionContext {
		let _localctx: LengthTwoDimensionContext = new LengthTwoDimensionContext(this._ctx, this.state);
		this.enterRule(_localctx, 616, MariaDBParser.RULE_lengthTwoDimension);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6778;
			this.match(MariaDBParser.LR_BRACKET);
			this.state = 6779;
			this.decimalLiteral();
			this.state = 6780;
			this.match(MariaDBParser.COMMA);
			this.state = 6781;
			this.decimalLiteral();
			this.state = 6782;
			this.match(MariaDBParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lengthTwoOptionalDimension(): LengthTwoOptionalDimensionContext {
		let _localctx: LengthTwoOptionalDimensionContext = new LengthTwoOptionalDimensionContext(this._ctx, this.state);
		this.enterRule(_localctx, 618, MariaDBParser.RULE_lengthTwoOptionalDimension);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6784;
			this.match(MariaDBParser.LR_BRACKET);
			this.state = 6785;
			this.decimalLiteral();
			this.state = 6788;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.COMMA) {
				{
				this.state = 6786;
				this.match(MariaDBParser.COMMA);
				this.state = 6787;
				this.decimalLiteral();
				}
			}

			this.state = 6790;
			this.match(MariaDBParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public uidList(): UidListContext {
		let _localctx: UidListContext = new UidListContext(this._ctx, this.state);
		this.enterRule(_localctx, 620, MariaDBParser.RULE_uidList);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6792;
			this.uid();
			this.state = 6797;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1022, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6793;
					this.match(MariaDBParser.COMMA);
					this.state = 6794;
					this.uid();
					}
					}
				}
				this.state = 6799;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1022, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tables(): TablesContext {
		let _localctx: TablesContext = new TablesContext(this._ctx, this.state);
		this.enterRule(_localctx, 622, MariaDBParser.RULE_tables);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6800;
			this.tableName();
			this.state = 6805;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1023, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6801;
					this.match(MariaDBParser.COMMA);
					this.state = 6802;
					this.tableName();
					}
					}
				}
				this.state = 6807;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1023, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexColumnNames(): IndexColumnNamesContext {
		let _localctx: IndexColumnNamesContext = new IndexColumnNamesContext(this._ctx, this.state);
		this.enterRule(_localctx, 624, MariaDBParser.RULE_indexColumnNames);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6808;
			this.match(MariaDBParser.LR_BRACKET);
			this.state = 6809;
			this.indexColumnName();
			this.state = 6814;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.COMMA) {
				{
				{
				this.state = 6810;
				this.match(MariaDBParser.COMMA);
				this.state = 6811;
				this.indexColumnName();
				}
				}
				this.state = 6816;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6817;
			this.match(MariaDBParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expressions(): ExpressionsContext {
		let _localctx: ExpressionsContext = new ExpressionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 626, MariaDBParser.RULE_expressions);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6819;
			this.expression(0);
			this.state = 6824;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.COMMA) {
				{
				{
				this.state = 6820;
				this.match(MariaDBParser.COMMA);
				this.state = 6821;
				this.expression(0);
				}
				}
				this.state = 6826;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expressionsWithDefaults(): ExpressionsWithDefaultsContext {
		let _localctx: ExpressionsWithDefaultsContext = new ExpressionsWithDefaultsContext(this._ctx, this.state);
		this.enterRule(_localctx, 628, MariaDBParser.RULE_expressionsWithDefaults);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6827;
			this.expressionOrDefault();
			this.state = 6832;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.COMMA) {
				{
				{
				this.state = 6828;
				this.match(MariaDBParser.COMMA);
				this.state = 6829;
				this.expressionOrDefault();
				}
				}
				this.state = 6834;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constants(): ConstantsContext {
		let _localctx: ConstantsContext = new ConstantsContext(this._ctx, this.state);
		this.enterRule(_localctx, 630, MariaDBParser.RULE_constants);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6835;
			this.constant();
			this.state = 6840;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.COMMA) {
				{
				{
				this.state = 6836;
				this.match(MariaDBParser.COMMA);
				this.state = 6837;
				this.constant();
				}
				}
				this.state = 6842;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public simpleStrings(): SimpleStringsContext {
		let _localctx: SimpleStringsContext = new SimpleStringsContext(this._ctx, this.state);
		this.enterRule(_localctx, 632, MariaDBParser.RULE_simpleStrings);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6843;
			this.match(MariaDBParser.STRING_LITERAL);
			this.state = 6848;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.COMMA) {
				{
				{
				this.state = 6844;
				this.match(MariaDBParser.COMMA);
				this.state = 6845;
				this.match(MariaDBParser.STRING_LITERAL);
				}
				}
				this.state = 6850;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public userVariables(): UserVariablesContext {
		let _localctx: UserVariablesContext = new UserVariablesContext(this._ctx, this.state);
		this.enterRule(_localctx, 634, MariaDBParser.RULE_userVariables);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6851;
			this.match(MariaDBParser.LOCAL_ID);
			this.state = 6856;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.COMMA) {
				{
				{
				this.state = 6852;
				this.match(MariaDBParser.COMMA);
				this.state = 6853;
				this.match(MariaDBParser.LOCAL_ID);
				}
				}
				this.state = 6858;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public defaultValue(): DefaultValueContext {
		let _localctx: DefaultValueContext = new DefaultValueContext(this._ctx, this.state);
		this.enterRule(_localctx, 636, MariaDBParser.RULE_defaultValue);
		let _la: number;
		try {
			this.state = 6894;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1032, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6859;
				this.match(MariaDBParser.NULL_LITERAL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6860;
				this.match(MariaDBParser.CAST);
				this.state = 6861;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 6862;
				this.expression(0);
				this.state = 6863;
				this.match(MariaDBParser.AS);
				this.state = 6864;
				this.convertedDataType();
				this.state = 6865;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6868;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1030, this._ctx) ) {
				case 1:
					{
					this.state = 6867;
					this.unaryOperator();
					}
					break;
				}
				this.state = 6870;
				this.constant();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6871;
				this.currentTimestamp();
				this.state = 6875;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1031, this._ctx) ) {
				case 1:
					{
					this.state = 6872;
					this.match(MariaDBParser.ON);
					this.state = 6873;
					this.match(MariaDBParser.UPDATE);
					this.state = 6874;
					this.currentTimestamp();
					}
					break;
				}
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6877;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 6878;
				this.expression(0);
				this.state = 6879;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 6881;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.LASTVAL || _la === MariaDBParser.NEXTVAL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6882;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 6883;
				this.fullId();
				this.state = 6884;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 6886;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 6887;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.NEXT || _la === MariaDBParser.PREVIOUS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6888;
				this.match(MariaDBParser.VALUE);
				this.state = 6889;
				this.match(MariaDBParser.FOR);
				this.state = 6890;
				this.fullId();
				this.state = 6891;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 6893;
				this.expression(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public currentTimestamp(): CurrentTimestampContext {
		let _localctx: CurrentTimestampContext = new CurrentTimestampContext(this._ctx, this.state);
		this.enterRule(_localctx, 638, MariaDBParser.RULE_currentTimestamp);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6910;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.CURRENT_TIMESTAMP:
			case MariaDBParser.LOCALTIME:
			case MariaDBParser.CURDATE:
			case MariaDBParser.CURTIME:
			case MariaDBParser.LOCALTIMESTAMP:
				{
				this.state = 6896;
				_la = this._input.LA(1);
				if (!(((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & ((1 << (MariaDBParser.CURRENT_TIMESTAMP - 315)) | (1 << (MariaDBParser.LOCALTIME - 315)) | (1 << (MariaDBParser.CURDATE - 315)) | (1 << (MariaDBParser.CURTIME - 315)) | (1 << (MariaDBParser.LOCALTIMESTAMP - 315)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6902;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1034, this._ctx) ) {
				case 1:
					{
					this.state = 6897;
					this.match(MariaDBParser.LR_BRACKET);
					this.state = 6899;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 1159)) & ~0x1F) === 0 && ((1 << (_la - 1159)) & ((1 << (MariaDBParser.ZERO_DECIMAL - 1159)) | (1 << (MariaDBParser.ONE_DECIMAL - 1159)) | (1 << (MariaDBParser.TWO_DECIMAL - 1159)) | (1 << (MariaDBParser.DECIMAL_LITERAL - 1159)) | (1 << (MariaDBParser.REAL_LITERAL - 1159)))) !== 0)) {
						{
						this.state = 6898;
						this.decimalLiteral();
						}
					}

					this.state = 6901;
					this.match(MariaDBParser.RR_BRACKET);
					}
					break;
				}
				}
				break;
			case MariaDBParser.NOW:
				{
				this.state = 6904;
				this.match(MariaDBParser.NOW);
				this.state = 6905;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 6907;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 1159)) & ~0x1F) === 0 && ((1 << (_la - 1159)) & ((1 << (MariaDBParser.ZERO_DECIMAL - 1159)) | (1 << (MariaDBParser.ONE_DECIMAL - 1159)) | (1 << (MariaDBParser.TWO_DECIMAL - 1159)) | (1 << (MariaDBParser.DECIMAL_LITERAL - 1159)) | (1 << (MariaDBParser.REAL_LITERAL - 1159)))) !== 0)) {
					{
					this.state = 6906;
					this.decimalLiteral();
					}
				}

				this.state = 6909;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expressionOrDefault(): ExpressionOrDefaultContext {
		let _localctx: ExpressionOrDefaultContext = new ExpressionOrDefaultContext(this._ctx, this.state);
		this.enterRule(_localctx, 640, MariaDBParser.RULE_expressionOrDefault);
		try {
			this.state = 6914;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1037, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6912;
				this.expression(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6913;
				this.match(MariaDBParser.DEFAULT);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ifExists(): IfExistsContext {
		let _localctx: IfExistsContext = new IfExistsContext(this._ctx, this.state);
		this.enterRule(_localctx, 642, MariaDBParser.RULE_ifExists);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6916;
			this.match(MariaDBParser.IF);
			this.state = 6917;
			this.match(MariaDBParser.EXISTS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ifNotExists(): IfNotExistsContext {
		let _localctx: IfNotExistsContext = new IfNotExistsContext(this._ctx, this.state);
		this.enterRule(_localctx, 644, MariaDBParser.RULE_ifNotExists);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6919;
			this.match(MariaDBParser.IF);
			this.state = 6920;
			this.match(MariaDBParser.NOT);
			this.state = 6921;
			this.match(MariaDBParser.EXISTS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public orReplace(): OrReplaceContext {
		let _localctx: OrReplaceContext = new OrReplaceContext(this._ctx, this.state);
		this.enterRule(_localctx, 646, MariaDBParser.RULE_orReplace);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6923;
			this.match(MariaDBParser.OR);
			this.state = 6924;
			this.match(MariaDBParser.REPLACE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public waitNowaitClause(): WaitNowaitClauseContext {
		let _localctx: WaitNowaitClauseContext = new WaitNowaitClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 648, MariaDBParser.RULE_waitNowaitClause);
		try {
			this.state = 6929;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.WAIT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6926;
				this.match(MariaDBParser.WAIT);
				this.state = 6927;
				this.decimalLiteral();
				}
				break;
			case MariaDBParser.NOWAIT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6928;
				this.match(MariaDBParser.NOWAIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lockOption(): LockOptionContext {
		let _localctx: LockOptionContext = new LockOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 650, MariaDBParser.RULE_lockOption);
		try {
			this.state = 6934;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.NOWAIT:
			case MariaDBParser.WAIT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6931;
				this.waitNowaitClause();
				}
				break;
			case MariaDBParser.SKIP_:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6932;
				this.match(MariaDBParser.SKIP_);
				this.state = 6933;
				this.match(MariaDBParser.LOCKED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public functionCall(): FunctionCallContext {
		let _localctx: FunctionCallContext = new FunctionCallContext(this._ctx, this.state);
		this.enterRule(_localctx, 652, MariaDBParser.RULE_functionCall);
		try {
			this.state = 6954;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1042, this._ctx) ) {
			case 1:
				_localctx = new SpecificFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6936;
				this.specificFunction();
				}
				break;

			case 2:
				_localctx = new AggregateFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6937;
				this.aggregateWindowedFunction();
				}
				break;

			case 3:
				_localctx = new NonAggregateFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6938;
				this.nonAggregateWindowedFunction();
				}
				break;

			case 4:
				_localctx = new ScalarFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6939;
				this.scalarFunctionName();
				this.state = 6940;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 6942;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1040, this._ctx) ) {
				case 1:
					{
					this.state = 6941;
					this.functionArgs();
					}
					break;
				}
				this.state = 6944;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;

			case 5:
				_localctx = new UdfFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6946;
				this.fullId();
				this.state = 6947;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 6949;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1041, this._ctx) ) {
				case 1:
					{
					this.state = 6948;
					this.functionArgs();
					}
					break;
				}
				this.state = 6951;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;

			case 6:
				_localctx = new PasswordFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 6953;
				this.passwordFunctionClause();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public specificFunction(): SpecificFunctionContext {
		let _localctx: SpecificFunctionContext = new SpecificFunctionContext(this._ctx, this.state);
		this.enterRule(_localctx, 654, MariaDBParser.RULE_specificFunction);
		let _la: number;
		try {
			this.state = 7134;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1066, this._ctx) ) {
			case 1:
				_localctx = new SimpleFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6956;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.CURRENT_USER || _la === MariaDBParser.SCHEMA || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (MariaDBParser.CURRENT_DATE - 313)) | (1 << (MariaDBParser.CURRENT_TIME - 313)) | (1 << (MariaDBParser.CURRENT_TIMESTAMP - 313)) | (1 << (MariaDBParser.LOCALTIME - 313)) | (1 << (MariaDBParser.CURDATE - 313)) | (1 << (MariaDBParser.CURTIME - 313)) | (1 << (MariaDBParser.UTC_TIMESTAMP - 313)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 6959;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1043, this._ctx) ) {
				case 1:
					{
					this.state = 6957;
					this.match(MariaDBParser.LR_BRACKET);
					this.state = 6958;
					this.match(MariaDBParser.RR_BRACKET);
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6961;
				this.match(MariaDBParser.CONVERT);
				this.state = 6962;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 6963;
				this.expression(0);
				this.state = 6964;
				(_localctx as DataTypeFunctionCallContext)._separator = this.match(MariaDBParser.COMMA);
				this.state = 6965;
				this.convertedDataType();
				this.state = 6966;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;

			case 3:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6968;
				this.match(MariaDBParser.CONVERT);
				this.state = 6969;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 6970;
				this.expression(0);
				this.state = 6971;
				this.match(MariaDBParser.USING);
				this.state = 6972;
				this.charsetName();
				this.state = 6973;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;

			case 4:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6975;
				this.match(MariaDBParser.CAST);
				this.state = 6976;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 6977;
				this.expression(0);
				this.state = 6978;
				this.match(MariaDBParser.AS);
				this.state = 6979;
				this.convertedDataType();
				this.state = 6980;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;

			case 5:
				_localctx = new ValuesFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6982;
				this.match(MariaDBParser.VALUES);
				this.state = 6983;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 6984;
				this.fullColumnName();
				this.state = 6985;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;

			case 6:
				_localctx = new CaseExpressionFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 6987;
				this.match(MariaDBParser.CASE);
				this.state = 6988;
				this.expression(0);
				this.state = 6990;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6989;
					this.caseFuncAlternative();
					}
					}
					this.state = 6992;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === MariaDBParser.WHEN);
				this.state = 6996;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.ELSE) {
					{
					this.state = 6994;
					this.match(MariaDBParser.ELSE);
					this.state = 6995;
					(_localctx as CaseExpressionFunctionCallContext)._elseArg = this.functionArg();
					}
				}

				this.state = 6998;
				this.match(MariaDBParser.END);
				}
				break;

			case 7:
				_localctx = new CaseFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 7000;
				this.match(MariaDBParser.CASE);
				this.state = 7002;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7001;
					this.caseFuncAlternative();
					}
					}
					this.state = 7004;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === MariaDBParser.WHEN);
				this.state = 7008;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.ELSE) {
					{
					this.state = 7006;
					this.match(MariaDBParser.ELSE);
					this.state = 7007;
					(_localctx as CaseFunctionCallContext)._elseArg = this.functionArg();
					}
				}

				this.state = 7010;
				this.match(MariaDBParser.END);
				}
				break;

			case 8:
				_localctx = new CharFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 7012;
				this.match(MariaDBParser.CHAR);
				this.state = 7013;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 7014;
				this.functionArgs();
				this.state = 7017;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.USING) {
					{
					this.state = 7015;
					this.match(MariaDBParser.USING);
					this.state = 7016;
					this.charsetName();
					}
				}

				this.state = 7019;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;

			case 9:
				_localctx = new PositionFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 7021;
				this.match(MariaDBParser.POSITION);
				this.state = 7022;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 7025;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1049, this._ctx) ) {
				case 1:
					{
					this.state = 7023;
					(_localctx as PositionFunctionCallContext)._positionString = this.stringLiteral();
					}
					break;

				case 2:
					{
					this.state = 7024;
					(_localctx as PositionFunctionCallContext)._positionExpression = this.expression(0);
					}
					break;
				}
				this.state = 7027;
				this.match(MariaDBParser.IN);
				this.state = 7030;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1050, this._ctx) ) {
				case 1:
					{
					this.state = 7028;
					(_localctx as PositionFunctionCallContext)._inString = this.stringLiteral();
					}
					break;

				case 2:
					{
					this.state = 7029;
					(_localctx as PositionFunctionCallContext)._inExpression = this.expression(0);
					}
					break;
				}
				this.state = 7032;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;

			case 10:
				_localctx = new SubstrFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 7034;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.SUBSTR || _la === MariaDBParser.SUBSTRING)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 7035;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 7038;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1051, this._ctx) ) {
				case 1:
					{
					this.state = 7036;
					(_localctx as SubstrFunctionCallContext)._sourceString = this.stringLiteral();
					}
					break;

				case 2:
					{
					this.state = 7037;
					(_localctx as SubstrFunctionCallContext)._sourceExpression = this.expression(0);
					}
					break;
				}
				this.state = 7040;
				this.match(MariaDBParser.FROM);
				this.state = 7043;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1052, this._ctx) ) {
				case 1:
					{
					this.state = 7041;
					(_localctx as SubstrFunctionCallContext)._fromDecimal = this.decimalLiteral();
					}
					break;

				case 2:
					{
					this.state = 7042;
					(_localctx as SubstrFunctionCallContext)._fromExpression = this.expression(0);
					}
					break;
				}
				this.state = 7050;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.FOR) {
					{
					this.state = 7045;
					this.match(MariaDBParser.FOR);
					this.state = 7048;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1053, this._ctx) ) {
					case 1:
						{
						this.state = 7046;
						(_localctx as SubstrFunctionCallContext)._forDecimal = this.decimalLiteral();
						}
						break;

					case 2:
						{
						this.state = 7047;
						(_localctx as SubstrFunctionCallContext)._forExpression = this.expression(0);
						}
						break;
					}
					}
				}

				this.state = 7052;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;

			case 11:
				_localctx = new TrimFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 7054;
				this.match(MariaDBParser.TRIM);
				this.state = 7055;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 7056;
				(_localctx as TrimFunctionCallContext)._positioinForm = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.BOTH || _la === MariaDBParser.LEADING || _la === MariaDBParser.TRAILING)) {
					(_localctx as TrimFunctionCallContext)._positioinForm = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 7059;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1055, this._ctx) ) {
				case 1:
					{
					this.state = 7057;
					(_localctx as TrimFunctionCallContext)._sourceString = this.stringLiteral();
					}
					break;

				case 2:
					{
					this.state = 7058;
					(_localctx as TrimFunctionCallContext)._sourceExpression = this.expression(0);
					}
					break;
				}
				this.state = 7061;
				this.match(MariaDBParser.FROM);
				this.state = 7064;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1056, this._ctx) ) {
				case 1:
					{
					this.state = 7062;
					(_localctx as TrimFunctionCallContext)._fromString = this.stringLiteral();
					}
					break;

				case 2:
					{
					this.state = 7063;
					(_localctx as TrimFunctionCallContext)._fromExpression = this.expression(0);
					}
					break;
				}
				this.state = 7066;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;

			case 12:
				_localctx = new TrimFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 7068;
				this.match(MariaDBParser.TRIM);
				this.state = 7069;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 7072;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1057, this._ctx) ) {
				case 1:
					{
					this.state = 7070;
					(_localctx as TrimFunctionCallContext)._sourceString = this.stringLiteral();
					}
					break;

				case 2:
					{
					this.state = 7071;
					(_localctx as TrimFunctionCallContext)._sourceExpression = this.expression(0);
					}
					break;
				}
				this.state = 7074;
				this.match(MariaDBParser.FROM);
				this.state = 7077;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1058, this._ctx) ) {
				case 1:
					{
					this.state = 7075;
					(_localctx as TrimFunctionCallContext)._fromString = this.stringLiteral();
					}
					break;

				case 2:
					{
					this.state = 7076;
					(_localctx as TrimFunctionCallContext)._fromExpression = this.expression(0);
					}
					break;
				}
				this.state = 7079;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;

			case 13:
				_localctx = new WeightFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 7081;
				this.match(MariaDBParser.WEIGHT_STRING);
				this.state = 7082;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 7085;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1059, this._ctx) ) {
				case 1:
					{
					this.state = 7083;
					this.stringLiteral();
					}
					break;

				case 2:
					{
					this.state = 7084;
					this.expression(0);
					}
					break;
				}
				this.state = 7093;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.AS) {
					{
					this.state = 7087;
					this.match(MariaDBParser.AS);
					this.state = 7088;
					(_localctx as WeightFunctionCallContext)._stringFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MariaDBParser.CHAR || _la === MariaDBParser.BINARY)) {
						(_localctx as WeightFunctionCallContext)._stringFormat = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 7089;
					this.match(MariaDBParser.LR_BRACKET);
					this.state = 7090;
					this.decimalLiteral();
					this.state = 7091;
					this.match(MariaDBParser.RR_BRACKET);
					}
				}

				this.state = 7096;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.LEVEL) {
					{
					this.state = 7095;
					this.levelsInWeightString();
					}
				}

				this.state = 7098;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;

			case 14:
				_localctx = new ExtractFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 7100;
				this.match(MariaDBParser.EXTRACT);
				this.state = 7101;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 7102;
				this.intervalType();
				this.state = 7103;
				this.match(MariaDBParser.FROM);
				this.state = 7106;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1062, this._ctx) ) {
				case 1:
					{
					this.state = 7104;
					(_localctx as ExtractFunctionCallContext)._sourceString = this.stringLiteral();
					}
					break;

				case 2:
					{
					this.state = 7105;
					(_localctx as ExtractFunctionCallContext)._sourceExpression = this.expression(0);
					}
					break;
				}
				this.state = 7108;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;

			case 15:
				_localctx = new GetFormatFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 7110;
				this.match(MariaDBParser.GET_FORMAT);
				this.state = 7111;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 7112;
				(_localctx as GetFormatFunctionCallContext)._datetimeFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MariaDBParser.DATE - 217)) | (1 << (MariaDBParser.TIME - 217)) | (1 << (MariaDBParser.DATETIME - 217)))) !== 0))) {
					(_localctx as GetFormatFunctionCallContext)._datetimeFormat = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 7113;
				this.match(MariaDBParser.COMMA);
				this.state = 7114;
				this.stringLiteral();
				this.state = 7115;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;

			case 16:
				_localctx = new JsonValueFunctionCallContext(_localctx);
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 7117;
				this.match(MariaDBParser.JSON_VALUE);
				this.state = 7118;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 7119;
				this.expression(0);
				this.state = 7120;
				this.match(MariaDBParser.COMMA);
				this.state = 7121;
				this.expression(0);
				this.state = 7124;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.RETURNING) {
					{
					this.state = 7122;
					this.match(MariaDBParser.RETURNING);
					this.state = 7123;
					this.convertedDataType();
					}
				}

				this.state = 7127;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1064, this._ctx) ) {
				case 1:
					{
					this.state = 7126;
					this.jsonOnEmpty();
					}
					break;
				}
				this.state = 7130;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.DEFAULT || _la === MariaDBParser.NULL_LITERAL || _la === MariaDBParser.ERROR) {
					{
					this.state = 7129;
					this.jsonOnError();
					}
				}

				this.state = 7132;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public caseFuncAlternative(): CaseFuncAlternativeContext {
		let _localctx: CaseFuncAlternativeContext = new CaseFuncAlternativeContext(this._ctx, this.state);
		this.enterRule(_localctx, 656, MariaDBParser.RULE_caseFuncAlternative);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7136;
			this.match(MariaDBParser.WHEN);
			this.state = 7137;
			_localctx._condition = this.functionArg();
			this.state = 7138;
			this.match(MariaDBParser.THEN);
			this.state = 7139;
			_localctx._consequent = this.functionArg();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public levelsInWeightString(): LevelsInWeightStringContext {
		let _localctx: LevelsInWeightStringContext = new LevelsInWeightStringContext(this._ctx, this.state);
		this.enterRule(_localctx, 658, MariaDBParser.RULE_levelsInWeightString);
		let _la: number;
		try {
			this.state = 7155;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1068, this._ctx) ) {
			case 1:
				_localctx = new LevelWeightListContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7141;
				this.match(MariaDBParser.LEVEL);
				this.state = 7142;
				this.levelInWeightListElement();
				this.state = 7147;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 7143;
					this.match(MariaDBParser.COMMA);
					this.state = 7144;
					this.levelInWeightListElement();
					}
					}
					this.state = 7149;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 2:
				_localctx = new LevelWeightRangeContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7150;
				this.match(MariaDBParser.LEVEL);
				this.state = 7151;
				(_localctx as LevelWeightRangeContext)._firstLevel = this.decimalLiteral();
				this.state = 7152;
				this.match(MariaDBParser.MINUS);
				this.state = 7153;
				(_localctx as LevelWeightRangeContext)._lastLevel = this.decimalLiteral();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public levelInWeightListElement(): LevelInWeightListElementContext {
		let _localctx: LevelInWeightListElementContext = new LevelInWeightListElementContext(this._ctx, this.state);
		this.enterRule(_localctx, 660, MariaDBParser.RULE_levelInWeightListElement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7157;
			this.decimalLiteral();
			this.state = 7159;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.ASC || _la === MariaDBParser.DESC || _la === MariaDBParser.REVERSE) {
				{
				this.state = 7158;
				_localctx._orderType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.ASC || _la === MariaDBParser.DESC || _la === MariaDBParser.REVERSE)) {
					_localctx._orderType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public aggregateWindowedFunction(): AggregateWindowedFunctionContext {
		let _localctx: AggregateWindowedFunctionContext = new AggregateWindowedFunctionContext(this._ctx, this.state);
		this.enterRule(_localctx, 662, MariaDBParser.RULE_aggregateWindowedFunction);
		let _la: number;
		try {
			this.state = 7220;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.AVG:
			case MariaDBParser.MAX:
			case MariaDBParser.MIN:
			case MariaDBParser.SUM:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7161;
				_la = this._input.LA(1);
				if (!(((((_la - 286)) & ~0x1F) === 0 && ((1 << (_la - 286)) & ((1 << (MariaDBParser.AVG - 286)) | (1 << (MariaDBParser.MAX - 286)) | (1 << (MariaDBParser.MIN - 286)) | (1 << (MariaDBParser.SUM - 286)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 7162;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 7164;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1070, this._ctx) ) {
				case 1:
					{
					this.state = 7163;
					_localctx._aggregator = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === MariaDBParser.ALL || _la === MariaDBParser.DISTINCT)) {
						_localctx._aggregator = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 7166;
				this.functionArg();
				this.state = 7167;
				this.match(MariaDBParser.RR_BRACKET);
				this.state = 7169;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1071, this._ctx) ) {
				case 1:
					{
					this.state = 7168;
					this.overClause();
					}
					break;
				}
				}
				break;
			case MariaDBParser.COUNT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7171;
				this.match(MariaDBParser.COUNT);
				this.state = 7172;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 7180;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1073, this._ctx) ) {
				case 1:
					{
					this.state = 7173;
					_localctx._starArg = this.match(MariaDBParser.STAR);
					}
					break;

				case 2:
					{
					this.state = 7175;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1072, this._ctx) ) {
					case 1:
						{
						this.state = 7174;
						_localctx._aggregator = this.match(MariaDBParser.ALL);
						}
						break;
					}
					this.state = 7177;
					this.functionArg();
					}
					break;

				case 3:
					{
					this.state = 7178;
					_localctx._aggregator = this.match(MariaDBParser.DISTINCT);
					this.state = 7179;
					this.functionArgs();
					}
					break;
				}
				this.state = 7182;
				this.match(MariaDBParser.RR_BRACKET);
				this.state = 7184;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1074, this._ctx) ) {
				case 1:
					{
					this.state = 7183;
					this.overClause();
					}
					break;
				}
				}
				break;
			case MariaDBParser.BIT_AND:
			case MariaDBParser.BIT_OR:
			case MariaDBParser.BIT_XOR:
			case MariaDBParser.STD:
			case MariaDBParser.STDDEV:
			case MariaDBParser.STDDEV_POP:
			case MariaDBParser.STDDEV_SAMP:
			case MariaDBParser.VAR_POP:
			case MariaDBParser.VAR_SAMP:
			case MariaDBParser.VARIANCE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7186;
				_la = this._input.LA(1);
				if (!(((((_la - 287)) & ~0x1F) === 0 && ((1 << (_la - 287)) & ((1 << (MariaDBParser.BIT_AND - 287)) | (1 << (MariaDBParser.BIT_OR - 287)) | (1 << (MariaDBParser.BIT_XOR - 287)) | (1 << (MariaDBParser.STD - 287)) | (1 << (MariaDBParser.STDDEV - 287)) | (1 << (MariaDBParser.STDDEV_POP - 287)) | (1 << (MariaDBParser.STDDEV_SAMP - 287)) | (1 << (MariaDBParser.VAR_POP - 287)) | (1 << (MariaDBParser.VAR_SAMP - 287)) | (1 << (MariaDBParser.VARIANCE - 287)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 7187;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 7189;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1075, this._ctx) ) {
				case 1:
					{
					this.state = 7188;
					_localctx._aggregator = this.match(MariaDBParser.ALL);
					}
					break;
				}
				this.state = 7191;
				this.functionArg();
				this.state = 7192;
				this.match(MariaDBParser.RR_BRACKET);
				this.state = 7194;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1076, this._ctx) ) {
				case 1:
					{
					this.state = 7193;
					this.overClause();
					}
					break;
				}
				}
				break;
			case MariaDBParser.GROUP_CONCAT:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7196;
				this.match(MariaDBParser.GROUP_CONCAT);
				this.state = 7197;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 7199;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1077, this._ctx) ) {
				case 1:
					{
					this.state = 7198;
					_localctx._aggregator = this.match(MariaDBParser.DISTINCT);
					}
					break;
				}
				this.state = 7201;
				this.functionArgs();
				this.state = 7212;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.ORDER) {
					{
					this.state = 7202;
					this.match(MariaDBParser.ORDER);
					this.state = 7203;
					this.match(MariaDBParser.BY);
					this.state = 7204;
					this.orderByExpression();
					this.state = 7209;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === MariaDBParser.COMMA) {
						{
						{
						this.state = 7205;
						this.match(MariaDBParser.COMMA);
						this.state = 7206;
						this.orderByExpression();
						}
						}
						this.state = 7211;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 7216;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.SEPARATOR) {
					{
					this.state = 7214;
					this.match(MariaDBParser.SEPARATOR);
					this.state = 7215;
					_localctx._separator = this.match(MariaDBParser.STRING_LITERAL);
					}
				}

				this.state = 7218;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nonAggregateWindowedFunction(): NonAggregateWindowedFunctionContext {
		let _localctx: NonAggregateWindowedFunctionContext = new NonAggregateWindowedFunctionContext(this._ctx, this.state);
		this.enterRule(_localctx, 664, MariaDBParser.RULE_nonAggregateWindowedFunction);
		let _la: number;
		try {
			this.state = 7259;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.LAG:
			case MariaDBParser.LEAD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7222;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.LAG || _la === MariaDBParser.LEAD)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 7223;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 7224;
				this.expression(0);
				this.state = 7227;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1082, this._ctx) ) {
				case 1:
					{
					this.state = 7225;
					this.match(MariaDBParser.COMMA);
					this.state = 7226;
					this.decimalLiteral();
					}
					break;
				}
				this.state = 7231;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.COMMA) {
					{
					this.state = 7229;
					this.match(MariaDBParser.COMMA);
					this.state = 7230;
					this.decimalLiteral();
					}
				}

				this.state = 7233;
				this.match(MariaDBParser.RR_BRACKET);
				this.state = 7234;
				this.overClause();
				}
				break;
			case MariaDBParser.FIRST_VALUE:
			case MariaDBParser.LAST_VALUE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7236;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.FIRST_VALUE || _la === MariaDBParser.LAST_VALUE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 7237;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 7238;
				this.expression(0);
				this.state = 7239;
				this.match(MariaDBParser.RR_BRACKET);
				this.state = 7240;
				this.overClause();
				}
				break;
			case MariaDBParser.CUME_DIST:
			case MariaDBParser.DENSE_RANK:
			case MariaDBParser.PERCENT_RANK:
			case MariaDBParser.RANK:
			case MariaDBParser.ROW_NUMBER:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7242;
				_la = this._input.LA(1);
				if (!(((((_la - 291)) & ~0x1F) === 0 && ((1 << (_la - 291)) & ((1 << (MariaDBParser.CUME_DIST - 291)) | (1 << (MariaDBParser.DENSE_RANK - 291)) | (1 << (MariaDBParser.PERCENT_RANK - 291)) | (1 << (MariaDBParser.RANK - 291)) | (1 << (MariaDBParser.ROW_NUMBER - 291)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 7243;
				this.match(MariaDBParser.LR_BRACKETRR_BRACKET);
				this.state = 7244;
				this.overClause();
				}
				break;
			case MariaDBParser.NTH_VALUE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7245;
				this.match(MariaDBParser.NTH_VALUE);
				this.state = 7246;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 7247;
				this.expression(0);
				this.state = 7248;
				this.match(MariaDBParser.COMMA);
				this.state = 7249;
				this.decimalLiteral();
				this.state = 7250;
				this.match(MariaDBParser.RR_BRACKET);
				this.state = 7251;
				this.overClause();
				}
				break;
			case MariaDBParser.NTILE:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 7253;
				this.match(MariaDBParser.NTILE);
				this.state = 7254;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 7255;
				this.decimalLiteral();
				this.state = 7256;
				this.match(MariaDBParser.RR_BRACKET);
				this.state = 7257;
				this.overClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public overClause(): OverClauseContext {
		let _localctx: OverClauseContext = new OverClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 666, MariaDBParser.RULE_overClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7261;
			this.match(MariaDBParser.OVER);
			this.state = 7268;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.LR_BRACKET:
				{
				this.state = 7262;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 7264;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1085, this._ctx) ) {
				case 1:
					{
					this.state = 7263;
					this.windowSpec();
					}
					break;
				}
				this.state = 7266;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;
			case MariaDBParser.ATTRIBUTE:
			case MariaDBParser.BODY:
			case MariaDBParser.BUCKETS:
			case MariaDBParser.CONDITION:
			case MariaDBParser.CURRENT:
			case MariaDBParser.CURRENT_ROLE:
			case MariaDBParser.CURRENT_USER:
			case MariaDBParser.DATABASE:
			case MariaDBParser.DEFAULT:
			case MariaDBParser.DIAGNOSTICS:
			case MariaDBParser.EMPTY:
			case MariaDBParser.EXCEPT:
			case MariaDBParser.GROUP:
			case MariaDBParser.IF:
			case MariaDBParser.IGNORED:
			case MariaDBParser.INSERT:
			case MariaDBParser.LATERAL:
			case MariaDBParser.LEFT:
			case MariaDBParser.LOCKED:
			case MariaDBParser.MAXVALUE:
			case MariaDBParser.MINVALUE:
			case MariaDBParser.NUMBER:
			case MariaDBParser.OPTIONAL:
			case MariaDBParser.ORDER:
			case MariaDBParser.PRIMARY:
			case MariaDBParser.PACKAGE:
			case MariaDBParser.REPLACE:
			case MariaDBParser.RIGHT:
			case MariaDBParser.SCHEMA:
			case MariaDBParser.SKIP_:
			case MariaDBParser.STACKED:
			case MariaDBParser.STATEMENT:
			case MariaDBParser.DATE:
			case MariaDBParser.TIME:
			case MariaDBParser.TIMESTAMP:
			case MariaDBParser.DATETIME:
			case MariaDBParser.YEAR:
			case MariaDBParser.BINARY:
			case MariaDBParser.TEXT:
			case MariaDBParser.ENUM:
			case MariaDBParser.SERIAL:
			case MariaDBParser.JSON_ARRAY:
			case MariaDBParser.JSON_ARRAYAGG:
			case MariaDBParser.JSON_ARRAY_APPEND:
			case MariaDBParser.JSON_ARRAY_INSERT:
			case MariaDBParser.JSON_CONTAINS:
			case MariaDBParser.JSON_CONTAINS_PATH:
			case MariaDBParser.JSON_DEPTH:
			case MariaDBParser.JSON_EXTRACT:
			case MariaDBParser.JSON_INSERT:
			case MariaDBParser.JSON_KEYS:
			case MariaDBParser.JSON_LENGTH:
			case MariaDBParser.JSON_MERGE:
			case MariaDBParser.JSON_MERGE_PATCH:
			case MariaDBParser.JSON_MERGE_PRESERVE:
			case MariaDBParser.JSON_OBJECT:
			case MariaDBParser.JSON_OBJECTAGG:
			case MariaDBParser.JSON_OVERLAPS:
			case MariaDBParser.JSON_PRETTY:
			case MariaDBParser.JSON_QUOTE:
			case MariaDBParser.JSON_REMOVE:
			case MariaDBParser.JSON_REPLACE:
			case MariaDBParser.JSON_SCHEMA_VALID:
			case MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT:
			case MariaDBParser.JSON_SEARCH:
			case MariaDBParser.JSON_SET:
			case MariaDBParser.JSON_STORAGE_FREE:
			case MariaDBParser.JSON_STORAGE_SIZE:
			case MariaDBParser.JSON_TABLE:
			case MariaDBParser.JSON_TYPE:
			case MariaDBParser.JSON_UNQUOTE:
			case MariaDBParser.JSON_VALID:
			case MariaDBParser.JSON_VALUE:
			case MariaDBParser.NESTED:
			case MariaDBParser.ORDINALITY:
			case MariaDBParser.PATH:
			case MariaDBParser.AVG:
			case MariaDBParser.BIT_AND:
			case MariaDBParser.BIT_OR:
			case MariaDBParser.BIT_XOR:
			case MariaDBParser.COUNT:
			case MariaDBParser.CUME_DIST:
			case MariaDBParser.DENSE_RANK:
			case MariaDBParser.FIRST_VALUE:
			case MariaDBParser.GROUP_CONCAT:
			case MariaDBParser.LAG:
			case MariaDBParser.LAST_VALUE:
			case MariaDBParser.LEAD:
			case MariaDBParser.MAX:
			case MariaDBParser.MIN:
			case MariaDBParser.NTILE:
			case MariaDBParser.NTH_VALUE:
			case MariaDBParser.PERCENT_RANK:
			case MariaDBParser.RANK:
			case MariaDBParser.ROW_NUMBER:
			case MariaDBParser.STD:
			case MariaDBParser.STDDEV:
			case MariaDBParser.STDDEV_POP:
			case MariaDBParser.STDDEV_SAMP:
			case MariaDBParser.SUM:
			case MariaDBParser.VAR_POP:
			case MariaDBParser.VAR_SAMP:
			case MariaDBParser.VARIANCE:
			case MariaDBParser.CURRENT_DATE:
			case MariaDBParser.CURRENT_TIME:
			case MariaDBParser.CURRENT_TIMESTAMP:
			case MariaDBParser.LOCALTIME:
			case MariaDBParser.CURDATE:
			case MariaDBParser.CURTIME:
			case MariaDBParser.DATE_ADD:
			case MariaDBParser.DATE_SUB:
			case MariaDBParser.LOCALTIMESTAMP:
			case MariaDBParser.NOW:
			case MariaDBParser.POSITION:
			case MariaDBParser.SUBSTR:
			case MariaDBParser.SUBSTRING:
			case MariaDBParser.SYSDATE:
			case MariaDBParser.TRIM:
			case MariaDBParser.UTC_DATE:
			case MariaDBParser.UTC_TIME:
			case MariaDBParser.UTC_TIMESTAMP:
			case MariaDBParser.ACCOUNT:
			case MariaDBParser.ACTION:
			case MariaDBParser.AFTER:
			case MariaDBParser.AGGREGATE:
			case MariaDBParser.ALGORITHM:
			case MariaDBParser.ANY:
			case MariaDBParser.AT:
			case MariaDBParser.AUTHORS:
			case MariaDBParser.AUTOCOMMIT:
			case MariaDBParser.AUTOEXTEND_SIZE:
			case MariaDBParser.AUTO_INCREMENT:
			case MariaDBParser.AVG_ROW_LENGTH:
			case MariaDBParser.BEGIN:
			case MariaDBParser.BINLOG:
			case MariaDBParser.BIT:
			case MariaDBParser.BLOCK:
			case MariaDBParser.BOOL:
			case MariaDBParser.BOOLEAN:
			case MariaDBParser.BTREE:
			case MariaDBParser.CACHE:
			case MariaDBParser.CASCADED:
			case MariaDBParser.CHAIN:
			case MariaDBParser.CHANGED:
			case MariaDBParser.CHANNEL:
			case MariaDBParser.CHECKSUM:
			case MariaDBParser.PAGE_CHECKSUM:
			case MariaDBParser.CIPHER:
			case MariaDBParser.CLASS_ORIGIN:
			case MariaDBParser.CLIENT:
			case MariaDBParser.CLOSE:
			case MariaDBParser.CLUSTERING:
			case MariaDBParser.COALESCE:
			case MariaDBParser.CODE:
			case MariaDBParser.COLUMNS:
			case MariaDBParser.COLUMN_FORMAT:
			case MariaDBParser.COLUMN_NAME:
			case MariaDBParser.COMMENT:
			case MariaDBParser.COMMIT:
			case MariaDBParser.COMPACT:
			case MariaDBParser.COMPLETION:
			case MariaDBParser.COMPRESSED:
			case MariaDBParser.COMPRESSION:
			case MariaDBParser.CONCURRENT:
			case MariaDBParser.CONNECT:
			case MariaDBParser.CONNECTION:
			case MariaDBParser.CONSISTENT:
			case MariaDBParser.CONSTRAINT_CATALOG:
			case MariaDBParser.CONSTRAINT_SCHEMA:
			case MariaDBParser.CONSTRAINT_NAME:
			case MariaDBParser.CONTAINS:
			case MariaDBParser.CONTEXT:
			case MariaDBParser.CONTRIBUTORS:
			case MariaDBParser.COPY:
			case MariaDBParser.CPU:
			case MariaDBParser.CYCLE:
			case MariaDBParser.CURSOR_NAME:
			case MariaDBParser.DATA:
			case MariaDBParser.DATAFILE:
			case MariaDBParser.DEALLOCATE:
			case MariaDBParser.DEFAULT_AUTH:
			case MariaDBParser.DEFINER:
			case MariaDBParser.DELAY_KEY_WRITE:
			case MariaDBParser.DES_KEY_FILE:
			case MariaDBParser.DIRECTORY:
			case MariaDBParser.DISABLE:
			case MariaDBParser.DISCARD:
			case MariaDBParser.DISK:
			case MariaDBParser.DO:
			case MariaDBParser.DUMPFILE:
			case MariaDBParser.DUPLICATE:
			case MariaDBParser.DYNAMIC:
			case MariaDBParser.ENABLE:
			case MariaDBParser.ENCRYPTED:
			case MariaDBParser.ENCRYPTION:
			case MariaDBParser.ENCRYPTION_KEY_ID:
			case MariaDBParser.END:
			case MariaDBParser.ENDS:
			case MariaDBParser.ENGINE:
			case MariaDBParser.ENGINES:
			case MariaDBParser.ERROR:
			case MariaDBParser.ERRORS:
			case MariaDBParser.ESCAPE:
			case MariaDBParser.EVEN:
			case MariaDBParser.EVENT:
			case MariaDBParser.EVENTS:
			case MariaDBParser.EVERY:
			case MariaDBParser.EXCHANGE:
			case MariaDBParser.EXCLUSIVE:
			case MariaDBParser.EXPIRE:
			case MariaDBParser.EXPORT:
			case MariaDBParser.EXTENDED:
			case MariaDBParser.EXTENT_SIZE:
			case MariaDBParser.FAILED_LOGIN_ATTEMPTS:
			case MariaDBParser.FAST:
			case MariaDBParser.FAULTS:
			case MariaDBParser.FIELDS:
			case MariaDBParser.FILE_BLOCK_SIZE:
			case MariaDBParser.FILTER:
			case MariaDBParser.FIRST:
			case MariaDBParser.FIXED:
			case MariaDBParser.FLUSH:
			case MariaDBParser.FOLLOWS:
			case MariaDBParser.FOUND:
			case MariaDBParser.FULL:
			case MariaDBParser.FUNCTION:
			case MariaDBParser.GENERAL:
			case MariaDBParser.GLOBAL:
			case MariaDBParser.GRANTS:
			case MariaDBParser.GROUP_REPLICATION:
			case MariaDBParser.HANDLER:
			case MariaDBParser.HASH:
			case MariaDBParser.HELP:
			case MariaDBParser.HISTORY:
			case MariaDBParser.HOST:
			case MariaDBParser.HOSTS:
			case MariaDBParser.IDENTIFIED:
			case MariaDBParser.IGNORE_SERVER_IDS:
			case MariaDBParser.IMPORT:
			case MariaDBParser.INCREMENT:
			case MariaDBParser.INDEXES:
			case MariaDBParser.INITIAL_SIZE:
			case MariaDBParser.INPLACE:
			case MariaDBParser.INSERT_METHOD:
			case MariaDBParser.INSTALL:
			case MariaDBParser.INSTANCE:
			case MariaDBParser.INSTANT:
			case MariaDBParser.INVISIBLE:
			case MariaDBParser.INVOKER:
			case MariaDBParser.IO:
			case MariaDBParser.IO_THREAD:
			case MariaDBParser.IPC:
			case MariaDBParser.ISOLATION:
			case MariaDBParser.ISSUER:
			case MariaDBParser.JSON:
			case MariaDBParser.KEY_BLOCK_SIZE:
			case MariaDBParser.LANGUAGE:
			case MariaDBParser.LAST:
			case MariaDBParser.LEAVES:
			case MariaDBParser.LESS:
			case MariaDBParser.LEVEL:
			case MariaDBParser.LIST:
			case MariaDBParser.LOCAL:
			case MariaDBParser.LOCALES:
			case MariaDBParser.LOGFILE:
			case MariaDBParser.LOGS:
			case MariaDBParser.MASTER:
			case MariaDBParser.MASTER_AUTO_POSITION:
			case MariaDBParser.MASTER_CONNECT_RETRY:
			case MariaDBParser.MASTER_DELAY:
			case MariaDBParser.MASTER_HEARTBEAT_PERIOD:
			case MariaDBParser.MASTER_HOST:
			case MariaDBParser.MASTER_LOG_FILE:
			case MariaDBParser.MASTER_LOG_POS:
			case MariaDBParser.MASTER_PASSWORD:
			case MariaDBParser.MASTER_PORT:
			case MariaDBParser.MASTER_RETRY_COUNT:
			case MariaDBParser.MASTER_SSL:
			case MariaDBParser.MASTER_SSL_CA:
			case MariaDBParser.MASTER_SSL_CAPATH:
			case MariaDBParser.MASTER_SSL_CERT:
			case MariaDBParser.MASTER_SSL_CIPHER:
			case MariaDBParser.MASTER_SSL_CRL:
			case MariaDBParser.MASTER_SSL_CRLPATH:
			case MariaDBParser.MASTER_SSL_KEY:
			case MariaDBParser.MASTER_TLS_VERSION:
			case MariaDBParser.MASTER_USER:
			case MariaDBParser.MAX_CONNECTIONS_PER_HOUR:
			case MariaDBParser.MAX_QUERIES_PER_HOUR:
			case MariaDBParser.MAX_ROWS:
			case MariaDBParser.MAX_SIZE:
			case MariaDBParser.MAX_UPDATES_PER_HOUR:
			case MariaDBParser.MAX_USER_CONNECTIONS:
			case MariaDBParser.MEDIUM:
			case MariaDBParser.MEMBER:
			case MariaDBParser.MERGE:
			case MariaDBParser.MESSAGE_TEXT:
			case MariaDBParser.MID:
			case MariaDBParser.MIGRATE:
			case MariaDBParser.MIN_ROWS:
			case MariaDBParser.MODE:
			case MariaDBParser.MODIFY:
			case MariaDBParser.MUTEX:
			case MariaDBParser.MYSQL:
			case MariaDBParser.MYSQL_ERRNO:
			case MariaDBParser.NAME:
			case MariaDBParser.NAMES:
			case MariaDBParser.NCHAR:
			case MariaDBParser.NEVER:
			case MariaDBParser.NEXT:
			case MariaDBParser.NO:
			case MariaDBParser.NOCACHE:
			case MariaDBParser.NOCOPY:
			case MariaDBParser.NOCYCLE:
			case MariaDBParser.NOMAXVALUE:
			case MariaDBParser.NOMINVALUE:
			case MariaDBParser.NOWAIT:
			case MariaDBParser.NODEGROUP:
			case MariaDBParser.NONE:
			case MariaDBParser.ODBC:
			case MariaDBParser.OFFLINE:
			case MariaDBParser.OFFSET:
			case MariaDBParser.OF:
			case MariaDBParser.OJ:
			case MariaDBParser.OLD_PASSWORD:
			case MariaDBParser.ONE:
			case MariaDBParser.ONLINE:
			case MariaDBParser.ONLY:
			case MariaDBParser.OPEN:
			case MariaDBParser.OPTIMIZER_COSTS:
			case MariaDBParser.OPTIONS:
			case MariaDBParser.OWNER:
			case MariaDBParser.PACK_KEYS:
			case MariaDBParser.PAGE:
			case MariaDBParser.PARSER:
			case MariaDBParser.PARTIAL:
			case MariaDBParser.PARTITIONING:
			case MariaDBParser.PARTITIONS:
			case MariaDBParser.PASSWORD:
			case MariaDBParser.PASSWORD_LOCK_TIME:
			case MariaDBParser.PHASE:
			case MariaDBParser.PLUGIN:
			case MariaDBParser.PLUGIN_DIR:
			case MariaDBParser.PLUGINS:
			case MariaDBParser.PORT:
			case MariaDBParser.PRECEDES:
			case MariaDBParser.PREPARE:
			case MariaDBParser.PRESERVE:
			case MariaDBParser.PREV:
			case MariaDBParser.PROCESSLIST:
			case MariaDBParser.PROFILE:
			case MariaDBParser.PROFILES:
			case MariaDBParser.PROXY:
			case MariaDBParser.QUERY:
			case MariaDBParser.QUERY_RESPONSE_TIME:
			case MariaDBParser.QUICK:
			case MariaDBParser.REBUILD:
			case MariaDBParser.RECOVER:
			case MariaDBParser.RECURSIVE:
			case MariaDBParser.REDO_BUFFER_SIZE:
			case MariaDBParser.REDUNDANT:
			case MariaDBParser.RELAY:
			case MariaDBParser.RELAY_LOG_FILE:
			case MariaDBParser.RELAY_LOG_POS:
			case MariaDBParser.RELAYLOG:
			case MariaDBParser.REMOVE:
			case MariaDBParser.REORGANIZE:
			case MariaDBParser.REPAIR:
			case MariaDBParser.REPLICATE_DO_DB:
			case MariaDBParser.REPLICATE_DO_TABLE:
			case MariaDBParser.REPLICATE_IGNORE_DB:
			case MariaDBParser.REPLICATE_IGNORE_TABLE:
			case MariaDBParser.REPLICATE_REWRITE_DB:
			case MariaDBParser.REPLICATE_WILD_DO_TABLE:
			case MariaDBParser.REPLICATE_WILD_IGNORE_TABLE:
			case MariaDBParser.REPLICATION:
			case MariaDBParser.RESET:
			case MariaDBParser.RESTART:
			case MariaDBParser.RESUME:
			case MariaDBParser.RETURNED_SQLSTATE:
			case MariaDBParser.RETURNS:
			case MariaDBParser.REUSE:
			case MariaDBParser.ROLE:
			case MariaDBParser.ROLLBACK:
			case MariaDBParser.ROLLUP:
			case MariaDBParser.ROTATE:
			case MariaDBParser.ROW:
			case MariaDBParser.ROWS:
			case MariaDBParser.ROW_FORMAT:
			case MariaDBParser.RTREE:
			case MariaDBParser.SAVEPOINT:
			case MariaDBParser.SCHEDULE:
			case MariaDBParser.SECURITY:
			case MariaDBParser.SEQUENCE:
			case MariaDBParser.SERVER:
			case MariaDBParser.SESSION:
			case MariaDBParser.SHARE:
			case MariaDBParser.SHARED:
			case MariaDBParser.SIGNED:
			case MariaDBParser.SIMPLE:
			case MariaDBParser.SLAVE:
			case MariaDBParser.SLAVES:
			case MariaDBParser.SLOW:
			case MariaDBParser.SNAPSHOT:
			case MariaDBParser.SOCKET:
			case MariaDBParser.SOME:
			case MariaDBParser.SONAME:
			case MariaDBParser.SOUNDS:
			case MariaDBParser.SOURCE:
			case MariaDBParser.SQL_AFTER_GTIDS:
			case MariaDBParser.SQL_AFTER_MTS_GAPS:
			case MariaDBParser.SQL_BEFORE_GTIDS:
			case MariaDBParser.SQL_BUFFER_RESULT:
			case MariaDBParser.SQL_CACHE:
			case MariaDBParser.SQL_NO_CACHE:
			case MariaDBParser.SQL_THREAD:
			case MariaDBParser.START:
			case MariaDBParser.STARTS:
			case MariaDBParser.STATS_AUTO_RECALC:
			case MariaDBParser.STATS_PERSISTENT:
			case MariaDBParser.STATS_SAMPLE_PAGES:
			case MariaDBParser.STATUS:
			case MariaDBParser.STOP:
			case MariaDBParser.STORAGE:
			case MariaDBParser.STRING:
			case MariaDBParser.SUBCLASS_ORIGIN:
			case MariaDBParser.SUBJECT:
			case MariaDBParser.SUBPARTITION:
			case MariaDBParser.SUBPARTITIONS:
			case MariaDBParser.SUSPEND:
			case MariaDBParser.SWAPS:
			case MariaDBParser.SWITCHES:
			case MariaDBParser.TABLE_NAME:
			case MariaDBParser.TABLESPACE:
			case MariaDBParser.TABLE_TYPE:
			case MariaDBParser.TEMPORARY:
			case MariaDBParser.TEMPTABLE:
			case MariaDBParser.THAN:
			case MariaDBParser.TRADITIONAL:
			case MariaDBParser.TRANSACTION:
			case MariaDBParser.TRANSACTIONAL:
			case MariaDBParser.TRIGGERS:
			case MariaDBParser.TRUNCATE:
			case MariaDBParser.TYPES:
			case MariaDBParser.UNBOUNDED:
			case MariaDBParser.UNDEFINED:
			case MariaDBParser.UNDOFILE:
			case MariaDBParser.UNDO_BUFFER_SIZE:
			case MariaDBParser.UNINSTALL:
			case MariaDBParser.UNKNOWN:
			case MariaDBParser.UNTIL:
			case MariaDBParser.UPGRADE:
			case MariaDBParser.USER:
			case MariaDBParser.USE_FRM:
			case MariaDBParser.USER_RESOURCES:
			case MariaDBParser.VALIDATION:
			case MariaDBParser.VALUE:
			case MariaDBParser.VARIABLES:
			case MariaDBParser.VIEW:
			case MariaDBParser.VIRTUAL:
			case MariaDBParser.VISIBLE:
			case MariaDBParser.WAIT:
			case MariaDBParser.WARNINGS:
			case MariaDBParser.WITHOUT:
			case MariaDBParser.WORK:
			case MariaDBParser.WRAPPER:
			case MariaDBParser.WSREP_MEMBERSHIP:
			case MariaDBParser.WSREP_STATUS:
			case MariaDBParser.X509:
			case MariaDBParser.XA:
			case MariaDBParser.XML:
			case MariaDBParser.EUR:
			case MariaDBParser.USA:
			case MariaDBParser.JIS:
			case MariaDBParser.ISO:
			case MariaDBParser.INTERNAL:
			case MariaDBParser.QUARTER:
			case MariaDBParser.MONTH:
			case MariaDBParser.DAY:
			case MariaDBParser.HOUR:
			case MariaDBParser.MINUTE:
			case MariaDBParser.WEEK:
			case MariaDBParser.SECOND:
			case MariaDBParser.MICROSECOND:
			case MariaDBParser.USER_STATISTICS:
			case MariaDBParser.CLIENT_STATISTICS:
			case MariaDBParser.INDEX_STATISTICS:
			case MariaDBParser.TABLE_STATISTICS:
			case MariaDBParser.ADMIN:
			case MariaDBParser.AUDIT_ADMIN:
			case MariaDBParser.BACKUP_ADMIN:
			case MariaDBParser.BINLOG_ADMIN:
			case MariaDBParser.BINLOG_ENCRYPTION_ADMIN:
			case MariaDBParser.CLONE_ADMIN:
			case MariaDBParser.CONNECTION_ADMIN:
			case MariaDBParser.ENCRYPTION_KEY_ADMIN:
			case MariaDBParser.EXECUTE:
			case MariaDBParser.FILE:
			case MariaDBParser.FIREWALL_ADMIN:
			case MariaDBParser.FIREWALL_USER:
			case MariaDBParser.GROUP_REPLICATION_ADMIN:
			case MariaDBParser.INNODB_REDO_LOG_ARCHIVE:
			case MariaDBParser.INVOKE:
			case MariaDBParser.LAMBDA:
			case MariaDBParser.NDB_STORED_USER:
			case MariaDBParser.PASSWORDLESS_USER_ADMIN:
			case MariaDBParser.PERSIST_RO_VARIABLES_ADMIN:
			case MariaDBParser.PRIVILEGES:
			case MariaDBParser.PROCESS:
			case MariaDBParser.RELOAD:
			case MariaDBParser.REPLICATION_APPLIER:
			case MariaDBParser.REPLICATION_SLAVE_ADMIN:
			case MariaDBParser.RESOURCE_GROUP_ADMIN:
			case MariaDBParser.RESOURCE_GROUP_USER:
			case MariaDBParser.ROLE_ADMIN:
			case MariaDBParser.ROUTINE:
			case MariaDBParser.S3:
			case MariaDBParser.SESSION_VARIABLES_ADMIN:
			case MariaDBParser.SET_USER_ID:
			case MariaDBParser.SHOW_ROUTINE:
			case MariaDBParser.SHUTDOWN:
			case MariaDBParser.SUPER:
			case MariaDBParser.SYSTEM_VARIABLES_ADMIN:
			case MariaDBParser.TABLES:
			case MariaDBParser.TABLE_ENCRYPTION_ADMIN:
			case MariaDBParser.VERSION_TOKEN_ADMIN:
			case MariaDBParser.XA_RECOVER_ADMIN:
			case MariaDBParser.ARMSCII8:
			case MariaDBParser.ASCII:
			case MariaDBParser.BIG5:
			case MariaDBParser.CP1250:
			case MariaDBParser.CP1251:
			case MariaDBParser.CP1256:
			case MariaDBParser.CP1257:
			case MariaDBParser.CP850:
			case MariaDBParser.CP852:
			case MariaDBParser.CP866:
			case MariaDBParser.CP932:
			case MariaDBParser.DEC8:
			case MariaDBParser.EUCJPMS:
			case MariaDBParser.EUCKR:
			case MariaDBParser.GB18030:
			case MariaDBParser.GB2312:
			case MariaDBParser.GBK:
			case MariaDBParser.GEOSTD8:
			case MariaDBParser.GREEK:
			case MariaDBParser.HEBREW:
			case MariaDBParser.HP8:
			case MariaDBParser.KEYBCS2:
			case MariaDBParser.KOI8R:
			case MariaDBParser.KOI8U:
			case MariaDBParser.LATIN1:
			case MariaDBParser.LATIN2:
			case MariaDBParser.LATIN5:
			case MariaDBParser.LATIN7:
			case MariaDBParser.MACCE:
			case MariaDBParser.MACROMAN:
			case MariaDBParser.SJIS:
			case MariaDBParser.SWE7:
			case MariaDBParser.TIS620:
			case MariaDBParser.UCS2:
			case MariaDBParser.UJIS:
			case MariaDBParser.UTF16:
			case MariaDBParser.UTF16LE:
			case MariaDBParser.UTF32:
			case MariaDBParser.UTF8:
			case MariaDBParser.UTF8MB3:
			case MariaDBParser.UTF8MB4:
			case MariaDBParser.ARCHIVE:
			case MariaDBParser.BLACKHOLE:
			case MariaDBParser.CSV:
			case MariaDBParser.FEDERATED:
			case MariaDBParser.INNODB:
			case MariaDBParser.MEMORY:
			case MariaDBParser.MRG_MYISAM:
			case MariaDBParser.MYISAM:
			case MariaDBParser.NDB:
			case MariaDBParser.NDBCLUSTER:
			case MariaDBParser.PERFORMANCE_SCHEMA:
			case MariaDBParser.TOKUDB:
			case MariaDBParser.REPEATABLE:
			case MariaDBParser.COMMITTED:
			case MariaDBParser.UNCOMMITTED:
			case MariaDBParser.SERIALIZABLE:
			case MariaDBParser.GEOMETRYCOLLECTION:
			case MariaDBParser.LINESTRING:
			case MariaDBParser.MULTILINESTRING:
			case MariaDBParser.MULTIPOINT:
			case MariaDBParser.MULTIPOLYGON:
			case MariaDBParser.POINT:
			case MariaDBParser.POLYGON:
			case MariaDBParser.ABS:
			case MariaDBParser.ACOS:
			case MariaDBParser.ADDDATE:
			case MariaDBParser.ADDTIME:
			case MariaDBParser.AES_DECRYPT:
			case MariaDBParser.AES_ENCRYPT:
			case MariaDBParser.AREA:
			case MariaDBParser.ASBINARY:
			case MariaDBParser.ASIN:
			case MariaDBParser.ASTEXT:
			case MariaDBParser.ASWKB:
			case MariaDBParser.ASWKT:
			case MariaDBParser.ASYMMETRIC_DECRYPT:
			case MariaDBParser.ASYMMETRIC_DERIVE:
			case MariaDBParser.ASYMMETRIC_ENCRYPT:
			case MariaDBParser.ASYMMETRIC_SIGN:
			case MariaDBParser.ASYMMETRIC_VERIFY:
			case MariaDBParser.ATAN:
			case MariaDBParser.ATAN2:
			case MariaDBParser.BENCHMARK:
			case MariaDBParser.BIN:
			case MariaDBParser.BIT_COUNT:
			case MariaDBParser.BIT_LENGTH:
			case MariaDBParser.BUFFER:
			case MariaDBParser.CATALOG_NAME:
			case MariaDBParser.CEIL:
			case MariaDBParser.CEILING:
			case MariaDBParser.CENTROID:
			case MariaDBParser.CHARACTER_LENGTH:
			case MariaDBParser.CHARSET:
			case MariaDBParser.CHAR_LENGTH:
			case MariaDBParser.COERCIBILITY:
			case MariaDBParser.COLLATION:
			case MariaDBParser.COMPRESS:
			case MariaDBParser.CONCAT:
			case MariaDBParser.CONCAT_WS:
			case MariaDBParser.CONNECTION_ID:
			case MariaDBParser.CONV:
			case MariaDBParser.CONVERT_TZ:
			case MariaDBParser.COS:
			case MariaDBParser.COT:
			case MariaDBParser.CRC32:
			case MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY:
			case MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY:
			case MariaDBParser.CREATE_DH_PARAMETERS:
			case MariaDBParser.CREATE_DIGEST:
			case MariaDBParser.CROSSES:
			case MariaDBParser.DATEDIFF:
			case MariaDBParser.DATE_FORMAT:
			case MariaDBParser.DAYNAME:
			case MariaDBParser.DAYOFMONTH:
			case MariaDBParser.DAYOFWEEK:
			case MariaDBParser.DAYOFYEAR:
			case MariaDBParser.DECODE:
			case MariaDBParser.DEGREES:
			case MariaDBParser.DES_DECRYPT:
			case MariaDBParser.DES_ENCRYPT:
			case MariaDBParser.DIMENSION:
			case MariaDBParser.DISJOINT:
			case MariaDBParser.ELT:
			case MariaDBParser.ENCODE:
			case MariaDBParser.ENCRYPT:
			case MariaDBParser.ENDPOINT:
			case MariaDBParser.ENGINE_ATTRIBUTE:
			case MariaDBParser.ENVELOPE:
			case MariaDBParser.EQUALS:
			case MariaDBParser.EXP:
			case MariaDBParser.EXPORT_SET:
			case MariaDBParser.EXTERIORRING:
			case MariaDBParser.EXTRACTVALUE:
			case MariaDBParser.FIELD:
			case MariaDBParser.FIND_IN_SET:
			case MariaDBParser.FLOOR:
			case MariaDBParser.FORMAT:
			case MariaDBParser.FOUND_ROWS:
			case MariaDBParser.FROM_BASE64:
			case MariaDBParser.FROM_DAYS:
			case MariaDBParser.FROM_UNIXTIME:
			case MariaDBParser.GEOMCOLLFROMTEXT:
			case MariaDBParser.GEOMCOLLFROMWKB:
			case MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT:
			case MariaDBParser.GEOMETRYCOLLECTIONFROMWKB:
			case MariaDBParser.GEOMETRYFROMTEXT:
			case MariaDBParser.GEOMETRYFROMWKB:
			case MariaDBParser.GEOMETRYN:
			case MariaDBParser.GEOMETRYTYPE:
			case MariaDBParser.GEOMFROMTEXT:
			case MariaDBParser.GEOMFROMWKB:
			case MariaDBParser.GET_FORMAT:
			case MariaDBParser.GET_LOCK:
			case MariaDBParser.GLENGTH:
			case MariaDBParser.GREATEST:
			case MariaDBParser.GTID_SUBSET:
			case MariaDBParser.GTID_SUBTRACT:
			case MariaDBParser.HEX:
			case MariaDBParser.IFNULL:
			case MariaDBParser.INET6_ATON:
			case MariaDBParser.INET6_NTOA:
			case MariaDBParser.INET_ATON:
			case MariaDBParser.INET_NTOA:
			case MariaDBParser.INSTR:
			case MariaDBParser.INTERIORRINGN:
			case MariaDBParser.INTERSECTS:
			case MariaDBParser.ISCLOSED:
			case MariaDBParser.ISEMPTY:
			case MariaDBParser.ISNULL:
			case MariaDBParser.ISSIMPLE:
			case MariaDBParser.IS_FREE_LOCK:
			case MariaDBParser.IS_IPV4:
			case MariaDBParser.IS_IPV4_COMPAT:
			case MariaDBParser.IS_IPV4_MAPPED:
			case MariaDBParser.IS_IPV6:
			case MariaDBParser.IS_USED_LOCK:
			case MariaDBParser.LAST_INSERT_ID:
			case MariaDBParser.LCASE:
			case MariaDBParser.LEAST:
			case MariaDBParser.LENGTH:
			case MariaDBParser.LINEFROMTEXT:
			case MariaDBParser.LINEFROMWKB:
			case MariaDBParser.LINESTRINGFROMTEXT:
			case MariaDBParser.LINESTRINGFROMWKB:
			case MariaDBParser.LN:
			case MariaDBParser.LOAD_FILE:
			case MariaDBParser.LOCATE:
			case MariaDBParser.LOG:
			case MariaDBParser.LOG10:
			case MariaDBParser.LOG2:
			case MariaDBParser.LOWER:
			case MariaDBParser.LPAD:
			case MariaDBParser.LTRIM:
			case MariaDBParser.MAKEDATE:
			case MariaDBParser.MAKETIME:
			case MariaDBParser.MAKE_SET:
			case MariaDBParser.MASTER_POS_WAIT:
			case MariaDBParser.MBRCONTAINS:
			case MariaDBParser.MBRDISJOINT:
			case MariaDBParser.MBREQUAL:
			case MariaDBParser.MBRINTERSECTS:
			case MariaDBParser.MBROVERLAPS:
			case MariaDBParser.MBRTOUCHES:
			case MariaDBParser.MBRWITHIN:
			case MariaDBParser.MD5:
			case MariaDBParser.MLINEFROMTEXT:
			case MariaDBParser.MLINEFROMWKB:
			case MariaDBParser.MONTHNAME:
			case MariaDBParser.MPOINTFROMTEXT:
			case MariaDBParser.MPOINTFROMWKB:
			case MariaDBParser.MPOLYFROMTEXT:
			case MariaDBParser.MPOLYFROMWKB:
			case MariaDBParser.MULTILINESTRINGFROMTEXT:
			case MariaDBParser.MULTILINESTRINGFROMWKB:
			case MariaDBParser.MULTIPOINTFROMTEXT:
			case MariaDBParser.MULTIPOINTFROMWKB:
			case MariaDBParser.MULTIPOLYGONFROMTEXT:
			case MariaDBParser.MULTIPOLYGONFROMWKB:
			case MariaDBParser.NAME_CONST:
			case MariaDBParser.NULLIF:
			case MariaDBParser.NUMGEOMETRIES:
			case MariaDBParser.NUMINTERIORRINGS:
			case MariaDBParser.NUMPOINTS:
			case MariaDBParser.OCT:
			case MariaDBParser.OCTET_LENGTH:
			case MariaDBParser.ORD:
			case MariaDBParser.OVERLAPS:
			case MariaDBParser.PERIOD_ADD:
			case MariaDBParser.PERIOD_DIFF:
			case MariaDBParser.PI:
			case MariaDBParser.POINTFROMTEXT:
			case MariaDBParser.POINTFROMWKB:
			case MariaDBParser.POINTN:
			case MariaDBParser.POLYFROMTEXT:
			case MariaDBParser.POLYFROMWKB:
			case MariaDBParser.POLYGONFROMTEXT:
			case MariaDBParser.POLYGONFROMWKB:
			case MariaDBParser.POW:
			case MariaDBParser.POWER:
			case MariaDBParser.QUOTE:
			case MariaDBParser.RADIANS:
			case MariaDBParser.RAND:
			case MariaDBParser.RANDOM_BYTES:
			case MariaDBParser.RELEASE_LOCK:
			case MariaDBParser.REVERSE:
			case MariaDBParser.ROUND:
			case MariaDBParser.ROW_COUNT:
			case MariaDBParser.RPAD:
			case MariaDBParser.RTRIM:
			case MariaDBParser.SEC_TO_TIME:
			case MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE:
			case MariaDBParser.SESSION_USER:
			case MariaDBParser.SHA:
			case MariaDBParser.SHA1:
			case MariaDBParser.SHA2:
			case MariaDBParser.SCHEMA_NAME:
			case MariaDBParser.SIGN:
			case MariaDBParser.SIN:
			case MariaDBParser.SLEEP:
			case MariaDBParser.SOUNDEX:
			case MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS:
			case MariaDBParser.SQRT:
			case MariaDBParser.SRID:
			case MariaDBParser.STARTPOINT:
			case MariaDBParser.STRCMP:
			case MariaDBParser.STR_TO_DATE:
			case MariaDBParser.ST_AREA:
			case MariaDBParser.ST_ASBINARY:
			case MariaDBParser.ST_ASTEXT:
			case MariaDBParser.ST_ASWKB:
			case MariaDBParser.ST_ASWKT:
			case MariaDBParser.ST_BUFFER:
			case MariaDBParser.ST_CENTROID:
			case MariaDBParser.ST_CONTAINS:
			case MariaDBParser.ST_CROSSES:
			case MariaDBParser.ST_DIFFERENCE:
			case MariaDBParser.ST_DIMENSION:
			case MariaDBParser.ST_DISJOINT:
			case MariaDBParser.ST_DISTANCE:
			case MariaDBParser.ST_ENDPOINT:
			case MariaDBParser.ST_ENVELOPE:
			case MariaDBParser.ST_EQUALS:
			case MariaDBParser.ST_EXTERIORRING:
			case MariaDBParser.ST_GEOMCOLLFROMTEXT:
			case MariaDBParser.ST_GEOMCOLLFROMTXT:
			case MariaDBParser.ST_GEOMCOLLFROMWKB:
			case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
			case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB:
			case MariaDBParser.ST_GEOMETRYFROMTEXT:
			case MariaDBParser.ST_GEOMETRYFROMWKB:
			case MariaDBParser.ST_GEOMETRYN:
			case MariaDBParser.ST_GEOMETRYTYPE:
			case MariaDBParser.ST_GEOMFROMTEXT:
			case MariaDBParser.ST_GEOMFROMWKB:
			case MariaDBParser.ST_INTERIORRINGN:
			case MariaDBParser.ST_INTERSECTION:
			case MariaDBParser.ST_INTERSECTS:
			case MariaDBParser.ST_ISCLOSED:
			case MariaDBParser.ST_ISEMPTY:
			case MariaDBParser.ST_ISSIMPLE:
			case MariaDBParser.ST_LINEFROMTEXT:
			case MariaDBParser.ST_LINEFROMWKB:
			case MariaDBParser.ST_LINESTRINGFROMTEXT:
			case MariaDBParser.ST_LINESTRINGFROMWKB:
			case MariaDBParser.ST_NUMGEOMETRIES:
			case MariaDBParser.ST_NUMINTERIORRING:
			case MariaDBParser.ST_NUMINTERIORRINGS:
			case MariaDBParser.ST_NUMPOINTS:
			case MariaDBParser.ST_OVERLAPS:
			case MariaDBParser.ST_POINTFROMTEXT:
			case MariaDBParser.ST_POINTFROMWKB:
			case MariaDBParser.ST_POINTN:
			case MariaDBParser.ST_POLYFROMTEXT:
			case MariaDBParser.ST_POLYFROMWKB:
			case MariaDBParser.ST_POLYGONFROMTEXT:
			case MariaDBParser.ST_POLYGONFROMWKB:
			case MariaDBParser.ST_SRID:
			case MariaDBParser.ST_STARTPOINT:
			case MariaDBParser.ST_SYMDIFFERENCE:
			case MariaDBParser.ST_TOUCHES:
			case MariaDBParser.ST_UNION:
			case MariaDBParser.ST_WITHIN:
			case MariaDBParser.ST_X:
			case MariaDBParser.ST_Y:
			case MariaDBParser.SUBDATE:
			case MariaDBParser.SUBSTRING_INDEX:
			case MariaDBParser.SUBTIME:
			case MariaDBParser.SYSTEM_USER:
			case MariaDBParser.TAN:
			case MariaDBParser.TIMEDIFF:
			case MariaDBParser.TIMESTAMPADD:
			case MariaDBParser.TIMESTAMPDIFF:
			case MariaDBParser.TIME_FORMAT:
			case MariaDBParser.TIME_TO_SEC:
			case MariaDBParser.TOUCHES:
			case MariaDBParser.TO_BASE64:
			case MariaDBParser.TO_DAYS:
			case MariaDBParser.TO_SECONDS:
			case MariaDBParser.UCASE:
			case MariaDBParser.UNCOMPRESS:
			case MariaDBParser.UNCOMPRESSED_LENGTH:
			case MariaDBParser.UNHEX:
			case MariaDBParser.UNIX_TIMESTAMP:
			case MariaDBParser.UPDATEXML:
			case MariaDBParser.UPPER:
			case MariaDBParser.UUID:
			case MariaDBParser.UUID_SHORT:
			case MariaDBParser.VALIDATE_PASSWORD_STRENGTH:
			case MariaDBParser.VERSION:
			case MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case MariaDBParser.WEEKDAY:
			case MariaDBParser.WEEKOFYEAR:
			case MariaDBParser.WEIGHT_STRING:
			case MariaDBParser.WITHIN:
			case MariaDBParser.YEARWEEK:
			case MariaDBParser.Y_FUNCTION:
			case MariaDBParser.X_FUNCTION:
			case MariaDBParser.VIA:
			case MariaDBParser.LASTVAL:
			case MariaDBParser.NEXTVAL:
			case MariaDBParser.SETVAL:
			case MariaDBParser.PREVIOUS:
			case MariaDBParser.PERSISTENT:
			case MariaDBParser.BINLOG_MONITOR:
			case MariaDBParser.BINLOG_REPLAY:
			case MariaDBParser.FEDERATED_ADMIN:
			case MariaDBParser.READ_ONLY_ADMIN:
			case MariaDBParser.REPLICA:
			case MariaDBParser.REPLICAS:
			case MariaDBParser.REPLICATION_MASTER_ADMIN:
			case MariaDBParser.MONITOR:
			case MariaDBParser.READ_ONLY:
			case MariaDBParser.REPLAY:
			case MariaDBParser.MOD:
			case MariaDBParser.CHARSET_REVERSE_QOUTE_STRING:
			case MariaDBParser.STRING_LITERAL:
			case MariaDBParser.ID:
				{
				this.state = 7267;
				this.windowName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public windowSpec(): WindowSpecContext {
		let _localctx: WindowSpecContext = new WindowSpecContext(this._ctx, this.state);
		this.enterRule(_localctx, 668, MariaDBParser.RULE_windowSpec);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7271;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1087, this._ctx) ) {
			case 1:
				{
				this.state = 7270;
				this.windowName();
				}
				break;
			}
			this.state = 7274;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.PARTITION) {
				{
				this.state = 7273;
				this.partitionClause();
				}
			}

			this.state = 7277;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.ORDER) {
				{
				this.state = 7276;
				this.orderByClause();
				}
			}

			this.state = 7280;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === MariaDBParser.RANGE || _la === MariaDBParser.ROWS) {
				{
				this.state = 7279;
				this.frameClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public windowName(): WindowNameContext {
		let _localctx: WindowNameContext = new WindowNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 670, MariaDBParser.RULE_windowName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7282;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public frameClause(): FrameClauseContext {
		let _localctx: FrameClauseContext = new FrameClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 672, MariaDBParser.RULE_frameClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7284;
			this.frameUnits();
			this.state = 7285;
			this.frameExtent();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public frameUnits(): FrameUnitsContext {
		let _localctx: FrameUnitsContext = new FrameUnitsContext(this._ctx, this.state);
		this.enterRule(_localctx, 674, MariaDBParser.RULE_frameUnits);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7287;
			_la = this._input.LA(1);
			if (!(_la === MariaDBParser.RANGE || _la === MariaDBParser.ROWS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public frameExtent(): FrameExtentContext {
		let _localctx: FrameExtentContext = new FrameExtentContext(this._ctx, this.state);
		this.enterRule(_localctx, 676, MariaDBParser.RULE_frameExtent);
		try {
			this.state = 7291;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1091, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7289;
				this.frameRange();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7290;
				this.frameBetween();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public frameBetween(): FrameBetweenContext {
		let _localctx: FrameBetweenContext = new FrameBetweenContext(this._ctx, this.state);
		this.enterRule(_localctx, 678, MariaDBParser.RULE_frameBetween);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7293;
			this.match(MariaDBParser.BETWEEN);
			this.state = 7294;
			this.frameRange();
			this.state = 7295;
			this.match(MariaDBParser.AND);
			this.state = 7296;
			this.frameRange();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public frameRange(): FrameRangeContext {
		let _localctx: FrameRangeContext = new FrameRangeContext(this._ctx, this.state);
		this.enterRule(_localctx, 680, MariaDBParser.RULE_frameRange);
		let _la: number;
		try {
			this.state = 7305;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1092, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7298;
				this.match(MariaDBParser.CURRENT);
				this.state = 7299;
				this.match(MariaDBParser.ROW);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7300;
				this.match(MariaDBParser.UNBOUNDED);
				this.state = 7301;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.FOLLOWING || _la === MariaDBParser.PRECEDING)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7302;
				this.expression(0);
				this.state = 7303;
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.FOLLOWING || _la === MariaDBParser.PRECEDING)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionClause(): PartitionClauseContext {
		let _localctx: PartitionClauseContext = new PartitionClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 682, MariaDBParser.RULE_partitionClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7307;
			this.match(MariaDBParser.PARTITION);
			this.state = 7308;
			this.match(MariaDBParser.BY);
			this.state = 7309;
			this.expression(0);
			this.state = 7314;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.COMMA) {
				{
				{
				this.state = 7310;
				this.match(MariaDBParser.COMMA);
				this.state = 7311;
				this.expression(0);
				}
				}
				this.state = 7316;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public scalarFunctionName(): ScalarFunctionNameContext {
		let _localctx: ScalarFunctionNameContext = new ScalarFunctionNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 684, MariaDBParser.RULE_scalarFunctionName);
		try {
			this.state = 7340;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.DATABASE:
			case MariaDBParser.LEFT:
			case MariaDBParser.RIGHT:
			case MariaDBParser.SCHEMA:
			case MariaDBParser.DATE:
			case MariaDBParser.TIME:
			case MariaDBParser.TIMESTAMP:
			case MariaDBParser.YEAR:
			case MariaDBParser.JSON_ARRAY:
			case MariaDBParser.JSON_ARRAYAGG:
			case MariaDBParser.JSON_ARRAY_APPEND:
			case MariaDBParser.JSON_ARRAY_INSERT:
			case MariaDBParser.JSON_CONTAINS:
			case MariaDBParser.JSON_CONTAINS_PATH:
			case MariaDBParser.JSON_DEPTH:
			case MariaDBParser.JSON_EXTRACT:
			case MariaDBParser.JSON_INSERT:
			case MariaDBParser.JSON_KEYS:
			case MariaDBParser.JSON_LENGTH:
			case MariaDBParser.JSON_MERGE:
			case MariaDBParser.JSON_MERGE_PATCH:
			case MariaDBParser.JSON_MERGE_PRESERVE:
			case MariaDBParser.JSON_OBJECT:
			case MariaDBParser.JSON_OBJECTAGG:
			case MariaDBParser.JSON_OVERLAPS:
			case MariaDBParser.JSON_PRETTY:
			case MariaDBParser.JSON_QUOTE:
			case MariaDBParser.JSON_REMOVE:
			case MariaDBParser.JSON_REPLACE:
			case MariaDBParser.JSON_SCHEMA_VALID:
			case MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT:
			case MariaDBParser.JSON_SEARCH:
			case MariaDBParser.JSON_SET:
			case MariaDBParser.JSON_STORAGE_FREE:
			case MariaDBParser.JSON_STORAGE_SIZE:
			case MariaDBParser.JSON_TABLE:
			case MariaDBParser.JSON_TYPE:
			case MariaDBParser.JSON_UNQUOTE:
			case MariaDBParser.JSON_VALID:
			case MariaDBParser.JSON_VALUE:
			case MariaDBParser.COUNT:
			case MariaDBParser.CUME_DIST:
			case MariaDBParser.DENSE_RANK:
			case MariaDBParser.FIRST_VALUE:
			case MariaDBParser.LAG:
			case MariaDBParser.LAST_VALUE:
			case MariaDBParser.LEAD:
			case MariaDBParser.NTILE:
			case MariaDBParser.NTH_VALUE:
			case MariaDBParser.PERCENT_RANK:
			case MariaDBParser.RANK:
			case MariaDBParser.ROW_NUMBER:
			case MariaDBParser.POSITION:
			case MariaDBParser.INVISIBLE:
			case MariaDBParser.VISIBLE:
			case MariaDBParser.QUARTER:
			case MariaDBParser.MONTH:
			case MariaDBParser.DAY:
			case MariaDBParser.HOUR:
			case MariaDBParser.MINUTE:
			case MariaDBParser.WEEK:
			case MariaDBParser.SECOND:
			case MariaDBParser.MICROSECOND:
			case MariaDBParser.SESSION_VARIABLES_ADMIN:
			case MariaDBParser.GEOMETRYCOLLECTION:
			case MariaDBParser.LINESTRING:
			case MariaDBParser.MULTILINESTRING:
			case MariaDBParser.MULTIPOINT:
			case MariaDBParser.MULTIPOLYGON:
			case MariaDBParser.POINT:
			case MariaDBParser.POLYGON:
			case MariaDBParser.ABS:
			case MariaDBParser.ACOS:
			case MariaDBParser.ADDDATE:
			case MariaDBParser.ADDTIME:
			case MariaDBParser.AES_DECRYPT:
			case MariaDBParser.AES_ENCRYPT:
			case MariaDBParser.AREA:
			case MariaDBParser.ASBINARY:
			case MariaDBParser.ASIN:
			case MariaDBParser.ASTEXT:
			case MariaDBParser.ASWKB:
			case MariaDBParser.ASWKT:
			case MariaDBParser.ASYMMETRIC_DECRYPT:
			case MariaDBParser.ASYMMETRIC_DERIVE:
			case MariaDBParser.ASYMMETRIC_ENCRYPT:
			case MariaDBParser.ASYMMETRIC_SIGN:
			case MariaDBParser.ASYMMETRIC_VERIFY:
			case MariaDBParser.ATAN:
			case MariaDBParser.ATAN2:
			case MariaDBParser.BENCHMARK:
			case MariaDBParser.BIN:
			case MariaDBParser.BIT_COUNT:
			case MariaDBParser.BIT_LENGTH:
			case MariaDBParser.BUFFER:
			case MariaDBParser.CEIL:
			case MariaDBParser.CEILING:
			case MariaDBParser.CENTROID:
			case MariaDBParser.CHARACTER_LENGTH:
			case MariaDBParser.CHARSET:
			case MariaDBParser.CHAR_LENGTH:
			case MariaDBParser.COERCIBILITY:
			case MariaDBParser.COLLATION:
			case MariaDBParser.COMPRESS:
			case MariaDBParser.CONCAT:
			case MariaDBParser.CONCAT_WS:
			case MariaDBParser.CONNECTION_ID:
			case MariaDBParser.CONV:
			case MariaDBParser.CONVERT_TZ:
			case MariaDBParser.COS:
			case MariaDBParser.COT:
			case MariaDBParser.CRC32:
			case MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY:
			case MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY:
			case MariaDBParser.CREATE_DH_PARAMETERS:
			case MariaDBParser.CREATE_DIGEST:
			case MariaDBParser.CROSSES:
			case MariaDBParser.DATEDIFF:
			case MariaDBParser.DATE_FORMAT:
			case MariaDBParser.DAYNAME:
			case MariaDBParser.DAYOFMONTH:
			case MariaDBParser.DAYOFWEEK:
			case MariaDBParser.DAYOFYEAR:
			case MariaDBParser.DECODE:
			case MariaDBParser.DEGREES:
			case MariaDBParser.DES_DECRYPT:
			case MariaDBParser.DES_ENCRYPT:
			case MariaDBParser.DIMENSION:
			case MariaDBParser.DISJOINT:
			case MariaDBParser.ELT:
			case MariaDBParser.ENCODE:
			case MariaDBParser.ENCRYPT:
			case MariaDBParser.ENDPOINT:
			case MariaDBParser.ENVELOPE:
			case MariaDBParser.EQUALS:
			case MariaDBParser.EXP:
			case MariaDBParser.EXPORT_SET:
			case MariaDBParser.EXTERIORRING:
			case MariaDBParser.EXTRACTVALUE:
			case MariaDBParser.FIELD:
			case MariaDBParser.FIND_IN_SET:
			case MariaDBParser.FLOOR:
			case MariaDBParser.FORMAT:
			case MariaDBParser.FOUND_ROWS:
			case MariaDBParser.FROM_BASE64:
			case MariaDBParser.FROM_DAYS:
			case MariaDBParser.FROM_UNIXTIME:
			case MariaDBParser.GEOMCOLLFROMTEXT:
			case MariaDBParser.GEOMCOLLFROMWKB:
			case MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT:
			case MariaDBParser.GEOMETRYCOLLECTIONFROMWKB:
			case MariaDBParser.GEOMETRYFROMTEXT:
			case MariaDBParser.GEOMETRYFROMWKB:
			case MariaDBParser.GEOMETRYN:
			case MariaDBParser.GEOMETRYTYPE:
			case MariaDBParser.GEOMFROMTEXT:
			case MariaDBParser.GEOMFROMWKB:
			case MariaDBParser.GET_FORMAT:
			case MariaDBParser.GET_LOCK:
			case MariaDBParser.GLENGTH:
			case MariaDBParser.GREATEST:
			case MariaDBParser.GTID_SUBSET:
			case MariaDBParser.GTID_SUBTRACT:
			case MariaDBParser.HEX:
			case MariaDBParser.IFNULL:
			case MariaDBParser.INET6_ATON:
			case MariaDBParser.INET6_NTOA:
			case MariaDBParser.INET_ATON:
			case MariaDBParser.INET_NTOA:
			case MariaDBParser.INSTR:
			case MariaDBParser.INTERIORRINGN:
			case MariaDBParser.INTERSECTS:
			case MariaDBParser.ISCLOSED:
			case MariaDBParser.ISEMPTY:
			case MariaDBParser.ISNULL:
			case MariaDBParser.ISSIMPLE:
			case MariaDBParser.IS_FREE_LOCK:
			case MariaDBParser.IS_IPV4:
			case MariaDBParser.IS_IPV4_COMPAT:
			case MariaDBParser.IS_IPV4_MAPPED:
			case MariaDBParser.IS_IPV6:
			case MariaDBParser.IS_USED_LOCK:
			case MariaDBParser.LAST_INSERT_ID:
			case MariaDBParser.LCASE:
			case MariaDBParser.LEAST:
			case MariaDBParser.LENGTH:
			case MariaDBParser.LINEFROMTEXT:
			case MariaDBParser.LINEFROMWKB:
			case MariaDBParser.LINESTRINGFROMTEXT:
			case MariaDBParser.LINESTRINGFROMWKB:
			case MariaDBParser.LN:
			case MariaDBParser.LOAD_FILE:
			case MariaDBParser.LOCATE:
			case MariaDBParser.LOG:
			case MariaDBParser.LOG10:
			case MariaDBParser.LOG2:
			case MariaDBParser.LOWER:
			case MariaDBParser.LPAD:
			case MariaDBParser.LTRIM:
			case MariaDBParser.MAKEDATE:
			case MariaDBParser.MAKETIME:
			case MariaDBParser.MAKE_SET:
			case MariaDBParser.MASTER_POS_WAIT:
			case MariaDBParser.MBRCONTAINS:
			case MariaDBParser.MBRDISJOINT:
			case MariaDBParser.MBREQUAL:
			case MariaDBParser.MBRINTERSECTS:
			case MariaDBParser.MBROVERLAPS:
			case MariaDBParser.MBRTOUCHES:
			case MariaDBParser.MBRWITHIN:
			case MariaDBParser.MD5:
			case MariaDBParser.MLINEFROMTEXT:
			case MariaDBParser.MLINEFROMWKB:
			case MariaDBParser.MONTHNAME:
			case MariaDBParser.MPOINTFROMTEXT:
			case MariaDBParser.MPOINTFROMWKB:
			case MariaDBParser.MPOLYFROMTEXT:
			case MariaDBParser.MPOLYFROMWKB:
			case MariaDBParser.MULTILINESTRINGFROMTEXT:
			case MariaDBParser.MULTILINESTRINGFROMWKB:
			case MariaDBParser.MULTIPOINTFROMTEXT:
			case MariaDBParser.MULTIPOINTFROMWKB:
			case MariaDBParser.MULTIPOLYGONFROMTEXT:
			case MariaDBParser.MULTIPOLYGONFROMWKB:
			case MariaDBParser.NAME_CONST:
			case MariaDBParser.NULLIF:
			case MariaDBParser.NUMGEOMETRIES:
			case MariaDBParser.NUMINTERIORRINGS:
			case MariaDBParser.NUMPOINTS:
			case MariaDBParser.OCT:
			case MariaDBParser.OCTET_LENGTH:
			case MariaDBParser.ORD:
			case MariaDBParser.OVERLAPS:
			case MariaDBParser.PERIOD_ADD:
			case MariaDBParser.PERIOD_DIFF:
			case MariaDBParser.PI:
			case MariaDBParser.POINTFROMTEXT:
			case MariaDBParser.POINTFROMWKB:
			case MariaDBParser.POINTN:
			case MariaDBParser.POLYFROMTEXT:
			case MariaDBParser.POLYFROMWKB:
			case MariaDBParser.POLYGONFROMTEXT:
			case MariaDBParser.POLYGONFROMWKB:
			case MariaDBParser.POW:
			case MariaDBParser.POWER:
			case MariaDBParser.QUOTE:
			case MariaDBParser.RADIANS:
			case MariaDBParser.RAND:
			case MariaDBParser.RANDOM_BYTES:
			case MariaDBParser.RELEASE_LOCK:
			case MariaDBParser.REVERSE:
			case MariaDBParser.ROUND:
			case MariaDBParser.ROW_COUNT:
			case MariaDBParser.RPAD:
			case MariaDBParser.RTRIM:
			case MariaDBParser.SEC_TO_TIME:
			case MariaDBParser.SESSION_USER:
			case MariaDBParser.SHA:
			case MariaDBParser.SHA1:
			case MariaDBParser.SHA2:
			case MariaDBParser.SIGN:
			case MariaDBParser.SIN:
			case MariaDBParser.SLEEP:
			case MariaDBParser.SOUNDEX:
			case MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS:
			case MariaDBParser.SQRT:
			case MariaDBParser.SRID:
			case MariaDBParser.STARTPOINT:
			case MariaDBParser.STRCMP:
			case MariaDBParser.STR_TO_DATE:
			case MariaDBParser.ST_AREA:
			case MariaDBParser.ST_ASBINARY:
			case MariaDBParser.ST_ASTEXT:
			case MariaDBParser.ST_ASWKB:
			case MariaDBParser.ST_ASWKT:
			case MariaDBParser.ST_BUFFER:
			case MariaDBParser.ST_CENTROID:
			case MariaDBParser.ST_CONTAINS:
			case MariaDBParser.ST_CROSSES:
			case MariaDBParser.ST_DIFFERENCE:
			case MariaDBParser.ST_DIMENSION:
			case MariaDBParser.ST_DISJOINT:
			case MariaDBParser.ST_DISTANCE:
			case MariaDBParser.ST_ENDPOINT:
			case MariaDBParser.ST_ENVELOPE:
			case MariaDBParser.ST_EQUALS:
			case MariaDBParser.ST_EXTERIORRING:
			case MariaDBParser.ST_GEOMCOLLFROMTEXT:
			case MariaDBParser.ST_GEOMCOLLFROMTXT:
			case MariaDBParser.ST_GEOMCOLLFROMWKB:
			case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
			case MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB:
			case MariaDBParser.ST_GEOMETRYFROMTEXT:
			case MariaDBParser.ST_GEOMETRYFROMWKB:
			case MariaDBParser.ST_GEOMETRYN:
			case MariaDBParser.ST_GEOMETRYTYPE:
			case MariaDBParser.ST_GEOMFROMTEXT:
			case MariaDBParser.ST_GEOMFROMWKB:
			case MariaDBParser.ST_INTERIORRINGN:
			case MariaDBParser.ST_INTERSECTION:
			case MariaDBParser.ST_INTERSECTS:
			case MariaDBParser.ST_ISCLOSED:
			case MariaDBParser.ST_ISEMPTY:
			case MariaDBParser.ST_ISSIMPLE:
			case MariaDBParser.ST_LINEFROMTEXT:
			case MariaDBParser.ST_LINEFROMWKB:
			case MariaDBParser.ST_LINESTRINGFROMTEXT:
			case MariaDBParser.ST_LINESTRINGFROMWKB:
			case MariaDBParser.ST_NUMGEOMETRIES:
			case MariaDBParser.ST_NUMINTERIORRING:
			case MariaDBParser.ST_NUMINTERIORRINGS:
			case MariaDBParser.ST_NUMPOINTS:
			case MariaDBParser.ST_OVERLAPS:
			case MariaDBParser.ST_POINTFROMTEXT:
			case MariaDBParser.ST_POINTFROMWKB:
			case MariaDBParser.ST_POINTN:
			case MariaDBParser.ST_POLYFROMTEXT:
			case MariaDBParser.ST_POLYFROMWKB:
			case MariaDBParser.ST_POLYGONFROMTEXT:
			case MariaDBParser.ST_POLYGONFROMWKB:
			case MariaDBParser.ST_SRID:
			case MariaDBParser.ST_STARTPOINT:
			case MariaDBParser.ST_SYMDIFFERENCE:
			case MariaDBParser.ST_TOUCHES:
			case MariaDBParser.ST_UNION:
			case MariaDBParser.ST_WITHIN:
			case MariaDBParser.ST_X:
			case MariaDBParser.ST_Y:
			case MariaDBParser.SUBDATE:
			case MariaDBParser.SUBSTRING_INDEX:
			case MariaDBParser.SUBTIME:
			case MariaDBParser.SYSTEM_USER:
			case MariaDBParser.TAN:
			case MariaDBParser.TIMEDIFF:
			case MariaDBParser.TIMESTAMPADD:
			case MariaDBParser.TIMESTAMPDIFF:
			case MariaDBParser.TIME_FORMAT:
			case MariaDBParser.TIME_TO_SEC:
			case MariaDBParser.TOUCHES:
			case MariaDBParser.TO_BASE64:
			case MariaDBParser.TO_DAYS:
			case MariaDBParser.TO_SECONDS:
			case MariaDBParser.UCASE:
			case MariaDBParser.UNCOMPRESS:
			case MariaDBParser.UNCOMPRESSED_LENGTH:
			case MariaDBParser.UNHEX:
			case MariaDBParser.UNIX_TIMESTAMP:
			case MariaDBParser.UPDATEXML:
			case MariaDBParser.UPPER:
			case MariaDBParser.UUID:
			case MariaDBParser.UUID_SHORT:
			case MariaDBParser.VALIDATE_PASSWORD_STRENGTH:
			case MariaDBParser.VERSION:
			case MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case MariaDBParser.WEEKDAY:
			case MariaDBParser.WEEKOFYEAR:
			case MariaDBParser.WEIGHT_STRING:
			case MariaDBParser.WITHIN:
			case MariaDBParser.YEARWEEK:
			case MariaDBParser.Y_FUNCTION:
			case MariaDBParser.X_FUNCTION:
			case MariaDBParser.LASTVAL:
			case MariaDBParser.NEXTVAL:
			case MariaDBParser.SETVAL:
			case MariaDBParser.MOD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7317;
				this.functionNameBase();
				}
				break;
			case MariaDBParser.ASCII:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7318;
				this.match(MariaDBParser.ASCII);
				}
				break;
			case MariaDBParser.CURDATE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7319;
				this.match(MariaDBParser.CURDATE);
				}
				break;
			case MariaDBParser.CURRENT_DATE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7320;
				this.match(MariaDBParser.CURRENT_DATE);
				}
				break;
			case MariaDBParser.CURRENT_TIME:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 7321;
				this.match(MariaDBParser.CURRENT_TIME);
				}
				break;
			case MariaDBParser.CURRENT_TIMESTAMP:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 7322;
				this.match(MariaDBParser.CURRENT_TIMESTAMP);
				}
				break;
			case MariaDBParser.CURTIME:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 7323;
				this.match(MariaDBParser.CURTIME);
				}
				break;
			case MariaDBParser.DATE_ADD:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 7324;
				this.match(MariaDBParser.DATE_ADD);
				}
				break;
			case MariaDBParser.DATE_SUB:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 7325;
				this.match(MariaDBParser.DATE_SUB);
				}
				break;
			case MariaDBParser.IF:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 7326;
				this.match(MariaDBParser.IF);
				}
				break;
			case MariaDBParser.INSERT:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 7327;
				this.match(MariaDBParser.INSERT);
				}
				break;
			case MariaDBParser.LOCALTIME:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 7328;
				this.match(MariaDBParser.LOCALTIME);
				}
				break;
			case MariaDBParser.LOCALTIMESTAMP:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 7329;
				this.match(MariaDBParser.LOCALTIMESTAMP);
				}
				break;
			case MariaDBParser.MID:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 7330;
				this.match(MariaDBParser.MID);
				}
				break;
			case MariaDBParser.NOW:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 7331;
				this.match(MariaDBParser.NOW);
				}
				break;
			case MariaDBParser.REPLACE:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 7332;
				this.match(MariaDBParser.REPLACE);
				}
				break;
			case MariaDBParser.SUBSTR:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 7333;
				this.match(MariaDBParser.SUBSTR);
				}
				break;
			case MariaDBParser.SUBSTRING:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 7334;
				this.match(MariaDBParser.SUBSTRING);
				}
				break;
			case MariaDBParser.SYSDATE:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 7335;
				this.match(MariaDBParser.SYSDATE);
				}
				break;
			case MariaDBParser.TRIM:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 7336;
				this.match(MariaDBParser.TRIM);
				}
				break;
			case MariaDBParser.UTC_DATE:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 7337;
				this.match(MariaDBParser.UTC_DATE);
				}
				break;
			case MariaDBParser.UTC_TIME:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 7338;
				this.match(MariaDBParser.UTC_TIME);
				}
				break;
			case MariaDBParser.UTC_TIMESTAMP:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 7339;
				this.match(MariaDBParser.UTC_TIMESTAMP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public passwordFunctionClause(): PasswordFunctionClauseContext {
		let _localctx: PasswordFunctionClauseContext = new PasswordFunctionClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 686, MariaDBParser.RULE_passwordFunctionClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7342;
			_localctx._functionName = this._input.LT(1);
			_la = this._input.LA(1);
			if (!(_la === MariaDBParser.OLD_PASSWORD || _la === MariaDBParser.PASSWORD)) {
				_localctx._functionName = this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 7343;
			this.match(MariaDBParser.LR_BRACKET);
			this.state = 7344;
			this.functionArg();
			this.state = 7345;
			this.match(MariaDBParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public functionArgs(): FunctionArgsContext {
		let _localctx: FunctionArgsContext = new FunctionArgsContext(this._ctx, this.state);
		this.enterRule(_localctx, 688, MariaDBParser.RULE_functionArgs);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7351;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1095, this._ctx) ) {
			case 1:
				{
				this.state = 7347;
				this.constant();
				}
				break;

			case 2:
				{
				this.state = 7348;
				this.fullColumnName();
				}
				break;

			case 3:
				{
				this.state = 7349;
				this.functionCall();
				}
				break;

			case 4:
				{
				this.state = 7350;
				this.expression(0);
				}
				break;
			}
			this.state = 7362;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === MariaDBParser.COMMA) {
				{
				{
				this.state = 7353;
				this.match(MariaDBParser.COMMA);
				this.state = 7358;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1096, this._ctx) ) {
				case 1:
					{
					this.state = 7354;
					this.constant();
					}
					break;

				case 2:
					{
					this.state = 7355;
					this.fullColumnName();
					}
					break;

				case 3:
					{
					this.state = 7356;
					this.functionCall();
					}
					break;

				case 4:
					{
					this.state = 7357;
					this.expression(0);
					}
					break;
				}
				}
				}
				this.state = 7364;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public functionArg(): FunctionArgContext {
		let _localctx: FunctionArgContext = new FunctionArgContext(this._ctx, this.state);
		this.enterRule(_localctx, 690, MariaDBParser.RULE_functionArg);
		try {
			this.state = 7369;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1098, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7365;
				this.constant();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7366;
				this.fullColumnName();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7367;
				this.functionCall();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7368;
				this.expression(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public expression(): ExpressionContext;
	public expression(_p: number): ExpressionContext;
	// @RuleVersion(0)
	public expression(_p?: number): ExpressionContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: ExpressionContext = new ExpressionContext(this._ctx, _parentState);
		let _prevctx: ExpressionContext = _localctx;
		let _startState: number = 692;
		this.enterRecursionRule(_localctx, 692, MariaDBParser.RULE_expression, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7382;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1100, this._ctx) ) {
			case 1:
				{
				_localctx = new NotExpressionContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;

				this.state = 7372;
				(_localctx as NotExpressionContext)._notOperator = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.NOT || _la === MariaDBParser.EXCLAMATION_SYMBOL)) {
					(_localctx as NotExpressionContext)._notOperator = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 7373;
				this.expression(4);
				}
				break;

			case 2:
				{
				_localctx = new IsExpressionContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 7374;
				this.predicate(0);
				this.state = 7375;
				this.match(MariaDBParser.IS);
				this.state = 7377;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === MariaDBParser.NOT) {
					{
					this.state = 7376;
					this.match(MariaDBParser.NOT);
					}
				}

				this.state = 7379;
				(_localctx as IsExpressionContext)._testValue = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === MariaDBParser.FALSE || _la === MariaDBParser.TRUE || _la === MariaDBParser.UNKNOWN)) {
					(_localctx as IsExpressionContext)._testValue = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 3:
				{
				_localctx = new PredicateExpressionContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 7381;
				this.predicate(0);
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 7390;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1101, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
					this.pushNewRecursionContext(_localctx, _startState, MariaDBParser.RULE_expression);
					this.state = 7384;
					if (!(this.precpred(this._ctx, 3))) {
						throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
					}
					this.state = 7385;
					this.logicalOperator();
					this.state = 7386;
					this.expression(4);
					}
					}
				}
				this.state = 7392;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1101, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public predicate(): PredicateContext;
	public predicate(_p: number): PredicateContext;
	// @RuleVersion(0)
	public predicate(_p?: number): PredicateContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: PredicateContext = new PredicateContext(this._ctx, _parentState);
		let _prevctx: PredicateContext = _localctx;
		let _startState: number = 694;
		this.enterRecursionRule(_localctx, 694, MariaDBParser.RULE_predicate, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ExpressionAtomPredicateContext(_localctx);
			this._ctx = _localctx;
			_prevctx = _localctx;

			this.state = 7396;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1102, this._ctx) ) {
			case 1:
				{
				this.state = 7394;
				this.match(MariaDBParser.LOCAL_ID);
				this.state = 7395;
				this.match(MariaDBParser.VAR_ASSIGN);
				}
				break;
			}
			this.state = 7398;
			this.expressionAtom(0);
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 7464;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1110, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					this.state = 7462;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1109, this._ctx) ) {
					case 1:
						{
						_localctx = new BinaryComparisonPredicateContext(new PredicateContext(_parentctx, _parentState));
						(_localctx as BinaryComparisonPredicateContext)._left = _prevctx;
						this.pushNewRecursionContext(_localctx, _startState, MariaDBParser.RULE_predicate);
						this.state = 7400;
						if (!(this.precpred(this._ctx, 8))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 8)");
						}
						this.state = 7401;
						this.comparisonOperator();
						this.state = 7402;
						(_localctx as BinaryComparisonPredicateContext)._right = this.predicate(9);
						}
						break;

					case 2:
						{
						_localctx = new BetweenPredicateContext(new PredicateContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, MariaDBParser.RULE_predicate);
						this.state = 7404;
						if (!(this.precpred(this._ctx, 6))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 6)");
						}
						this.state = 7406;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === MariaDBParser.NOT) {
							{
							this.state = 7405;
							this.match(MariaDBParser.NOT);
							}
						}

						this.state = 7408;
						this.match(MariaDBParser.BETWEEN);
						this.state = 7409;
						this.predicate(0);
						this.state = 7410;
						this.match(MariaDBParser.AND);
						this.state = 7411;
						this.predicate(7);
						}
						break;

					case 3:
						{
						_localctx = new SoundsLikePredicateContext(new PredicateContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, MariaDBParser.RULE_predicate);
						this.state = 7413;
						if (!(this.precpred(this._ctx, 5))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 5)");
						}
						this.state = 7414;
						this.match(MariaDBParser.SOUNDS);
						this.state = 7415;
						this.match(MariaDBParser.LIKE);
						this.state = 7416;
						this.predicate(6);
						}
						break;

					case 4:
						{
						_localctx = new RegexpPredicateContext(new PredicateContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, MariaDBParser.RULE_predicate);
						this.state = 7417;
						if (!(this.precpred(this._ctx, 3))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
						}
						this.state = 7419;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === MariaDBParser.NOT) {
							{
							this.state = 7418;
							this.match(MariaDBParser.NOT);
							}
						}

						this.state = 7421;
						(_localctx as RegexpPredicateContext)._regex = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === MariaDBParser.REGEXP || _la === MariaDBParser.RLIKE)) {
							(_localctx as RegexpPredicateContext)._regex = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 7422;
						this.predicate(4);
						}
						break;

					case 5:
						{
						_localctx = new InPredicateContext(new PredicateContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, MariaDBParser.RULE_predicate);
						this.state = 7423;
						if (!(this.precpred(this._ctx, 10))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 10)");
						}
						this.state = 7425;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === MariaDBParser.NOT) {
							{
							this.state = 7424;
							this.match(MariaDBParser.NOT);
							}
						}

						this.state = 7427;
						this.match(MariaDBParser.IN);
						this.state = 7428;
						this.match(MariaDBParser.LR_BRACKET);
						this.state = 7431;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 1106, this._ctx) ) {
						case 1:
							{
							this.state = 7429;
							this.selectStatement();
							}
							break;

						case 2:
							{
							this.state = 7430;
							this.expressions();
							}
							break;
						}
						this.state = 7433;
						this.match(MariaDBParser.RR_BRACKET);
						}
						break;

					case 6:
						{
						_localctx = new IsNullPredicateContext(new PredicateContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, MariaDBParser.RULE_predicate);
						this.state = 7435;
						if (!(this.precpred(this._ctx, 9))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 9)");
						}
						this.state = 7436;
						this.match(MariaDBParser.IS);
						this.state = 7437;
						this.nullNotnull();
						}
						break;

					case 7:
						{
						_localctx = new SubqueryComparisonPredicateContext(new PredicateContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, MariaDBParser.RULE_predicate);
						this.state = 7438;
						if (!(this.precpred(this._ctx, 7))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 7)");
						}
						this.state = 7439;
						this.comparisonOperator();
						this.state = 7440;
						(_localctx as SubqueryComparisonPredicateContext)._quantifier = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === MariaDBParser.ALL || _la === MariaDBParser.ANY || _la === MariaDBParser.SOME)) {
							(_localctx as SubqueryComparisonPredicateContext)._quantifier = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 7441;
						this.match(MariaDBParser.LR_BRACKET);
						this.state = 7442;
						this.selectStatement();
						this.state = 7443;
						this.match(MariaDBParser.RR_BRACKET);
						}
						break;

					case 8:
						{
						_localctx = new LikePredicateContext(new PredicateContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, MariaDBParser.RULE_predicate);
						this.state = 7445;
						if (!(this.precpred(this._ctx, 4))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 4)");
						}
						this.state = 7447;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === MariaDBParser.NOT) {
							{
							this.state = 7446;
							this.match(MariaDBParser.NOT);
							}
						}

						this.state = 7449;
						this.match(MariaDBParser.LIKE);
						this.state = 7450;
						this.predicate(0);
						this.state = 7453;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 1108, this._ctx) ) {
						case 1:
							{
							this.state = 7451;
							this.match(MariaDBParser.ESCAPE);
							this.state = 7452;
							this.match(MariaDBParser.STRING_LITERAL);
							}
							break;
						}
						}
						break;

					case 9:
						{
						_localctx = new JsonMemberOfPredicateContext(new PredicateContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, MariaDBParser.RULE_predicate);
						this.state = 7455;
						if (!(this.precpred(this._ctx, 1))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
						}
						this.state = 7456;
						this.match(MariaDBParser.MEMBER);
						this.state = 7457;
						this.match(MariaDBParser.OF);
						this.state = 7458;
						this.match(MariaDBParser.LR_BRACKET);
						this.state = 7459;
						this.predicate(0);
						this.state = 7460;
						this.match(MariaDBParser.RR_BRACKET);
						}
						break;
					}
					}
				}
				this.state = 7466;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1110, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public expressionAtom(): ExpressionAtomContext;
	public expressionAtom(_p: number): ExpressionAtomContext;
	// @RuleVersion(0)
	public expressionAtom(_p?: number): ExpressionAtomContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: ExpressionAtomContext = new ExpressionAtomContext(this._ctx, _parentState);
		let _prevctx: ExpressionAtomContext = _localctx;
		let _startState: number = 696;
		this.enterRecursionRule(_localctx, 696, MariaDBParser.RULE_expressionAtom, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7512;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1113, this._ctx) ) {
			case 1:
				{
				_localctx = new ConstantExpressionAtomContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;

				this.state = 7468;
				this.constant();
				}
				break;

			case 2:
				{
				_localctx = new FullColumnNameExpressionAtomContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 7469;
				this.fullColumnName();
				}
				break;

			case 3:
				{
				_localctx = new FunctionCallExpressionAtomContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 7470;
				this.functionCall();
				}
				break;

			case 4:
				{
				_localctx = new MysqlVariableExpressionAtomContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 7471;
				this.mysqlVariable();
				}
				break;

			case 5:
				{
				_localctx = new UnaryExpressionAtomContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 7472;
				this.unaryOperator();
				this.state = 7473;
				this.expressionAtom(10);
				}
				break;

			case 6:
				{
				_localctx = new BinaryExpressionAtomContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 7475;
				this.match(MariaDBParser.BINARY);
				this.state = 7476;
				this.expressionAtom(9);
				}
				break;

			case 7:
				{
				_localctx = new NestedExpressionAtomContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 7477;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 7478;
				this.expression(0);
				this.state = 7483;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === MariaDBParser.COMMA) {
					{
					{
					this.state = 7479;
					this.match(MariaDBParser.COMMA);
					this.state = 7480;
					this.expression(0);
					}
					}
					this.state = 7485;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7486;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;

			case 8:
				{
				_localctx = new NestedRowExpressionAtomContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 7488;
				this.match(MariaDBParser.ROW);
				this.state = 7489;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 7490;
				this.expression(0);
				this.state = 7493;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7491;
					this.match(MariaDBParser.COMMA);
					this.state = 7492;
					this.expression(0);
					}
					}
					this.state = 7495;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === MariaDBParser.COMMA);
				this.state = 7497;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;

			case 9:
				{
				_localctx = new ExistsExpressionAtomContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 7499;
				this.match(MariaDBParser.EXISTS);
				this.state = 7500;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 7501;
				this.selectStatement();
				this.state = 7502;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;

			case 10:
				{
				_localctx = new SubqueryExpressionAtomContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 7504;
				this.match(MariaDBParser.LR_BRACKET);
				this.state = 7505;
				this.selectStatement();
				this.state = 7506;
				this.match(MariaDBParser.RR_BRACKET);
				}
				break;

			case 11:
				{
				_localctx = new IntervalExpressionAtomContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 7508;
				this.match(MariaDBParser.INTERVAL);
				this.state = 7509;
				this.expression(0);
				this.state = 7510;
				this.intervalType();
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 7531;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1115, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					this.state = 7529;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1114, this._ctx) ) {
					case 1:
						{
						_localctx = new BitExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						(_localctx as BitExpressionAtomContext)._left = _prevctx;
						this.pushNewRecursionContext(_localctx, _startState, MariaDBParser.RULE_expressionAtom);
						this.state = 7514;
						if (!(this.precpred(this._ctx, 3))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
						}
						this.state = 7515;
						this.bitOperator();
						this.state = 7516;
						(_localctx as BitExpressionAtomContext)._right = this.expressionAtom(4);
						}
						break;

					case 2:
						{
						_localctx = new MathExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						(_localctx as MathExpressionAtomContext)._left = _prevctx;
						this.pushNewRecursionContext(_localctx, _startState, MariaDBParser.RULE_expressionAtom);
						this.state = 7518;
						if (!(this.precpred(this._ctx, 2))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
						}
						this.state = 7519;
						this.mathOperator();
						this.state = 7520;
						(_localctx as MathExpressionAtomContext)._right = this.expressionAtom(3);
						}
						break;

					case 3:
						{
						_localctx = new JsonExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						(_localctx as JsonExpressionAtomContext)._left = _prevctx;
						this.pushNewRecursionContext(_localctx, _startState, MariaDBParser.RULE_expressionAtom);
						this.state = 7522;
						if (!(this.precpred(this._ctx, 1))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
						}
						this.state = 7523;
						this.jsonOperator();
						this.state = 7524;
						(_localctx as JsonExpressionAtomContext)._right = this.expressionAtom(2);
						}
						break;

					case 4:
						{
						_localctx = new CollateExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, MariaDBParser.RULE_expressionAtom);
						this.state = 7526;
						if (!(this.precpred(this._ctx, 12))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 12)");
						}
						this.state = 7527;
						this.match(MariaDBParser.COLLATE);
						this.state = 7528;
						this.collationName();
						}
						break;
					}
					}
				}
				this.state = 7533;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1115, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unaryOperator(): UnaryOperatorContext {
		let _localctx: UnaryOperatorContext = new UnaryOperatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 698, MariaDBParser.RULE_unaryOperator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7534;
			_la = this._input.LA(1);
			if (!(_la === MariaDBParser.NOT || ((((_la - 1141)) & ~0x1F) === 0 && ((1 << (_la - 1141)) & ((1 << (MariaDBParser.PLUS - 1141)) | (1 << (MariaDBParser.MINUS - 1141)) | (1 << (MariaDBParser.EXCLAMATION_SYMBOL - 1141)) | (1 << (MariaDBParser.BIT_NOT_OP - 1141)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public comparisonOperator(): ComparisonOperatorContext {
		let _localctx: ComparisonOperatorContext = new ComparisonOperatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 700, MariaDBParser.RULE_comparisonOperator);
		try {
			this.state = 7550;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1116, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7536;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7537;
				this.match(MariaDBParser.GREATER_SYMBOL);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7538;
				this.match(MariaDBParser.LESS_SYMBOL);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7539;
				this.match(MariaDBParser.LESS_SYMBOL);
				this.state = 7540;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 7541;
				this.match(MariaDBParser.GREATER_SYMBOL);
				this.state = 7542;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 7543;
				this.match(MariaDBParser.LESS_SYMBOL);
				this.state = 7544;
				this.match(MariaDBParser.GREATER_SYMBOL);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 7545;
				this.match(MariaDBParser.EXCLAMATION_SYMBOL);
				this.state = 7546;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 7547;
				this.match(MariaDBParser.LESS_SYMBOL);
				this.state = 7548;
				this.match(MariaDBParser.EQUAL_SYMBOL);
				this.state = 7549;
				this.match(MariaDBParser.GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public logicalOperator(): LogicalOperatorContext {
		let _localctx: LogicalOperatorContext = new LogicalOperatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 702, MariaDBParser.RULE_logicalOperator);
		try {
			this.state = 7559;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.AND:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7552;
				this.match(MariaDBParser.AND);
				}
				break;
			case MariaDBParser.BIT_AND_OP:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7553;
				this.match(MariaDBParser.BIT_AND_OP);
				this.state = 7554;
				this.match(MariaDBParser.BIT_AND_OP);
				}
				break;
			case MariaDBParser.XOR:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7555;
				this.match(MariaDBParser.XOR);
				}
				break;
			case MariaDBParser.OR:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7556;
				this.match(MariaDBParser.OR);
				}
				break;
			case MariaDBParser.BIT_OR_OP:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 7557;
				this.match(MariaDBParser.BIT_OR_OP);
				this.state = 7558;
				this.match(MariaDBParser.BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bitOperator(): BitOperatorContext {
		let _localctx: BitOperatorContext = new BitOperatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 704, MariaDBParser.RULE_bitOperator);
		try {
			this.state = 7568;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case MariaDBParser.LESS_SYMBOL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7561;
				this.match(MariaDBParser.LESS_SYMBOL);
				this.state = 7562;
				this.match(MariaDBParser.LESS_SYMBOL);
				}
				break;
			case MariaDBParser.GREATER_SYMBOL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7563;
				this.match(MariaDBParser.GREATER_SYMBOL);
				this.state = 7564;
				this.match(MariaDBParser.GREATER_SYMBOL);
				}
				break;
			case MariaDBParser.BIT_AND_OP:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7565;
				this.match(MariaDBParser.BIT_AND_OP);
				}
				break;
			case MariaDBParser.BIT_XOR_OP:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7566;
				this.match(MariaDBParser.BIT_XOR_OP);
				}
				break;
			case MariaDBParser.BIT_OR_OP:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 7567;
				this.match(MariaDBParser.BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mathOperator(): MathOperatorContext {
		let _localctx: MathOperatorContext = new MathOperatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 706, MariaDBParser.RULE_mathOperator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7570;
			_la = this._input.LA(1);
			if (!(((((_la - 1138)) & ~0x1F) === 0 && ((1 << (_la - 1138)) & ((1 << (MariaDBParser.STAR - 1138)) | (1 << (MariaDBParser.DIVIDE - 1138)) | (1 << (MariaDBParser.MODULE - 1138)) | (1 << (MariaDBParser.PLUS - 1138)) | (1 << (MariaDBParser.MINUS - 1138)) | (1 << (MariaDBParser.DIV - 1138)) | (1 << (MariaDBParser.MOD - 1138)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public jsonOperator(): JsonOperatorContext {
		let _localctx: JsonOperatorContext = new JsonOperatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 708, MariaDBParser.RULE_jsonOperator);
		try {
			this.state = 7577;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1119, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7572;
				this.match(MariaDBParser.MINUS);
				this.state = 7573;
				this.match(MariaDBParser.GREATER_SYMBOL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7574;
				this.match(MariaDBParser.MINUS);
				this.state = 7575;
				this.match(MariaDBParser.GREATER_SYMBOL);
				this.state = 7576;
				this.match(MariaDBParser.GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public charsetNameBase(): CharsetNameBaseContext {
		let _localctx: CharsetNameBaseContext = new CharsetNameBaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 710, MariaDBParser.RULE_charsetNameBase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7579;
			_la = this._input.LA(1);
			if (!(_la === MariaDBParser.BINARY || ((((_la - 753)) & ~0x1F) === 0 && ((1 << (_la - 753)) & ((1 << (MariaDBParser.ARMSCII8 - 753)) | (1 << (MariaDBParser.ASCII - 753)) | (1 << (MariaDBParser.BIG5 - 753)) | (1 << (MariaDBParser.CP1250 - 753)) | (1 << (MariaDBParser.CP1251 - 753)) | (1 << (MariaDBParser.CP1256 - 753)) | (1 << (MariaDBParser.CP1257 - 753)) | (1 << (MariaDBParser.CP850 - 753)) | (1 << (MariaDBParser.CP852 - 753)) | (1 << (MariaDBParser.CP866 - 753)) | (1 << (MariaDBParser.CP932 - 753)) | (1 << (MariaDBParser.DEC8 - 753)) | (1 << (MariaDBParser.EUCJPMS - 753)) | (1 << (MariaDBParser.EUCKR - 753)) | (1 << (MariaDBParser.GB18030 - 753)) | (1 << (MariaDBParser.GB2312 - 753)) | (1 << (MariaDBParser.GBK - 753)) | (1 << (MariaDBParser.GEOSTD8 - 753)) | (1 << (MariaDBParser.GREEK - 753)) | (1 << (MariaDBParser.HEBREW - 753)) | (1 << (MariaDBParser.HP8 - 753)) | (1 << (MariaDBParser.KEYBCS2 - 753)) | (1 << (MariaDBParser.KOI8R - 753)) | (1 << (MariaDBParser.KOI8U - 753)) | (1 << (MariaDBParser.LATIN1 - 753)) | (1 << (MariaDBParser.LATIN2 - 753)) | (1 << (MariaDBParser.LATIN5 - 753)) | (1 << (MariaDBParser.LATIN7 - 753)) | (1 << (MariaDBParser.MACCE - 753)) | (1 << (MariaDBParser.MACROMAN - 753)) | (1 << (MariaDBParser.SJIS - 753)) | (1 << (MariaDBParser.SWE7 - 753)))) !== 0) || ((((_la - 785)) & ~0x1F) === 0 && ((1 << (_la - 785)) & ((1 << (MariaDBParser.TIS620 - 785)) | (1 << (MariaDBParser.UCS2 - 785)) | (1 << (MariaDBParser.UJIS - 785)) | (1 << (MariaDBParser.UTF16 - 785)) | (1 << (MariaDBParser.UTF16LE - 785)) | (1 << (MariaDBParser.UTF32 - 785)) | (1 << (MariaDBParser.UTF8 - 785)) | (1 << (MariaDBParser.UTF8MB3 - 785)) | (1 << (MariaDBParser.UTF8MB4 - 785)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transactionLevelBase(): TransactionLevelBaseContext {
		let _localctx: TransactionLevelBaseContext = new TransactionLevelBaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 712, MariaDBParser.RULE_transactionLevelBase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7581;
			_la = this._input.LA(1);
			if (!(((((_la - 806)) & ~0x1F) === 0 && ((1 << (_la - 806)) & ((1 << (MariaDBParser.REPEATABLE - 806)) | (1 << (MariaDBParser.COMMITTED - 806)) | (1 << (MariaDBParser.UNCOMMITTED - 806)) | (1 << (MariaDBParser.SERIALIZABLE - 806)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public privilegesBase(): PrivilegesBaseContext {
		let _localctx: PrivilegesBaseContext = new PrivilegesBaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 714, MariaDBParser.RULE_privilegesBase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7583;
			_la = this._input.LA(1);
			if (!(((((_la - 716)) & ~0x1F) === 0 && ((1 << (_la - 716)) & ((1 << (MariaDBParser.EXECUTE - 716)) | (1 << (MariaDBParser.FILE - 716)) | (1 << (MariaDBParser.PRIVILEGES - 716)) | (1 << (MariaDBParser.PROCESS - 716)) | (1 << (MariaDBParser.RELOAD - 716)) | (1 << (MariaDBParser.ROUTINE - 716)) | (1 << (MariaDBParser.SHUTDOWN - 716)) | (1 << (MariaDBParser.SUPER - 716)))) !== 0) || _la === MariaDBParser.TABLES)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public intervalTypeBase(): IntervalTypeBaseContext {
		let _localctx: IntervalTypeBaseContext = new IntervalTypeBaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 716, MariaDBParser.RULE_intervalTypeBase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7585;
			_la = this._input.LA(1);
			if (!(((((_la - 695)) & ~0x1F) === 0 && ((1 << (_la - 695)) & ((1 << (MariaDBParser.QUARTER - 695)) | (1 << (MariaDBParser.MONTH - 695)) | (1 << (MariaDBParser.DAY - 695)) | (1 << (MariaDBParser.HOUR - 695)) | (1 << (MariaDBParser.MINUTE - 695)) | (1 << (MariaDBParser.WEEK - 695)) | (1 << (MariaDBParser.SECOND - 695)) | (1 << (MariaDBParser.MICROSECOND - 695)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataTypeBase(): DataTypeBaseContext {
		let _localctx: DataTypeBaseContext = new DataTypeBaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 718, MariaDBParser.RULE_dataTypeBase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7587;
			_la = this._input.LA(1);
			if (!(((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MariaDBParser.DATE - 217)) | (1 << (MariaDBParser.TIME - 217)) | (1 << (MariaDBParser.TIMESTAMP - 217)) | (1 << (MariaDBParser.DATETIME - 217)) | (1 << (MariaDBParser.YEAR - 217)) | (1 << (MariaDBParser.TEXT - 217)) | (1 << (MariaDBParser.ENUM - 217)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public keywordsCanBeId(): KeywordsCanBeIdContext {
		let _localctx: KeywordsCanBeIdContext = new KeywordsCanBeIdContext(this._ctx, this.state);
		this.enterRule(_localctx, 720, MariaDBParser.RULE_keywordsCanBeId);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7589;
			_la = this._input.LA(1);
			if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << MariaDBParser.ATTRIBUTE) | (1 << MariaDBParser.BODY) | (1 << MariaDBParser.BUCKETS) | (1 << MariaDBParser.CONDITION))) !== 0) || ((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (MariaDBParser.CURRENT - 36)) | (1 << (MariaDBParser.CURRENT_ROLE - 36)) | (1 << (MariaDBParser.CURRENT_USER - 36)) | (1 << (MariaDBParser.DEFAULT - 36)) | (1 << (MariaDBParser.DIAGNOSTICS - 36)) | (1 << (MariaDBParser.EMPTY - 36)) | (1 << (MariaDBParser.EXCEPT - 36)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (MariaDBParser.GROUP - 73)) | (1 << (MariaDBParser.IGNORED - 73)) | (1 << (MariaDBParser.LATERAL - 73)) | (1 << (MariaDBParser.LOCKED - 73)))) !== 0) || ((((_la - 110)) & ~0x1F) === 0 && ((1 << (_la - 110)) & ((1 << (MariaDBParser.MAXVALUE - 110)) | (1 << (MariaDBParser.MINVALUE - 110)) | (1 << (MariaDBParser.NUMBER - 110)) | (1 << (MariaDBParser.OPTIONAL - 110)) | (1 << (MariaDBParser.ORDER - 110)) | (1 << (MariaDBParser.PRIMARY - 110)) | (1 << (MariaDBParser.PACKAGE - 110)))) !== 0) || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & ((1 << (MariaDBParser.SKIP_ - 158)) | (1 << (MariaDBParser.STACKED - 158)) | (1 << (MariaDBParser.STATEMENT - 158)))) !== 0) || _la === MariaDBParser.SERIAL || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & ((1 << (MariaDBParser.NESTED - 283)) | (1 << (MariaDBParser.ORDINALITY - 283)) | (1 << (MariaDBParser.PATH - 283)) | (1 << (MariaDBParser.AVG - 283)) | (1 << (MariaDBParser.BIT_AND - 283)) | (1 << (MariaDBParser.BIT_OR - 283)) | (1 << (MariaDBParser.BIT_XOR - 283)) | (1 << (MariaDBParser.COUNT - 283)) | (1 << (MariaDBParser.GROUP_CONCAT - 283)) | (1 << (MariaDBParser.MAX - 283)) | (1 << (MariaDBParser.MIN - 283)) | (1 << (MariaDBParser.STD - 283)) | (1 << (MariaDBParser.STDDEV - 283)) | (1 << (MariaDBParser.STDDEV_POP - 283)) | (1 << (MariaDBParser.STDDEV_SAMP - 283)) | (1 << (MariaDBParser.SUM - 283)) | (1 << (MariaDBParser.VAR_POP - 283)) | (1 << (MariaDBParser.VAR_SAMP - 283)) | (1 << (MariaDBParser.VARIANCE - 283)))) !== 0) || ((((_la - 332)) & ~0x1F) === 0 && ((1 << (_la - 332)) & ((1 << (MariaDBParser.ACCOUNT - 332)) | (1 << (MariaDBParser.ACTION - 332)) | (1 << (MariaDBParser.AFTER - 332)) | (1 << (MariaDBParser.AGGREGATE - 332)) | (1 << (MariaDBParser.ALGORITHM - 332)) | (1 << (MariaDBParser.ANY - 332)) | (1 << (MariaDBParser.AT - 332)) | (1 << (MariaDBParser.AUTHORS - 332)) | (1 << (MariaDBParser.AUTOCOMMIT - 332)) | (1 << (MariaDBParser.AUTOEXTEND_SIZE - 332)) | (1 << (MariaDBParser.AUTO_INCREMENT - 332)) | (1 << (MariaDBParser.AVG_ROW_LENGTH - 332)) | (1 << (MariaDBParser.BEGIN - 332)) | (1 << (MariaDBParser.BINLOG - 332)) | (1 << (MariaDBParser.BIT - 332)) | (1 << (MariaDBParser.BLOCK - 332)) | (1 << (MariaDBParser.BOOL - 332)) | (1 << (MariaDBParser.BOOLEAN - 332)) | (1 << (MariaDBParser.BTREE - 332)) | (1 << (MariaDBParser.CACHE - 332)) | (1 << (MariaDBParser.CASCADED - 332)) | (1 << (MariaDBParser.CHAIN - 332)) | (1 << (MariaDBParser.CHANGED - 332)) | (1 << (MariaDBParser.CHANNEL - 332)) | (1 << (MariaDBParser.CHECKSUM - 332)) | (1 << (MariaDBParser.PAGE_CHECKSUM - 332)) | (1 << (MariaDBParser.CIPHER - 332)) | (1 << (MariaDBParser.CLASS_ORIGIN - 332)) | (1 << (MariaDBParser.CLIENT - 332)) | (1 << (MariaDBParser.CLOSE - 332)) | (1 << (MariaDBParser.CLUSTERING - 332)) | (1 << (MariaDBParser.COALESCE - 332)))) !== 0) || ((((_la - 364)) & ~0x1F) === 0 && ((1 << (_la - 364)) & ((1 << (MariaDBParser.CODE - 364)) | (1 << (MariaDBParser.COLUMNS - 364)) | (1 << (MariaDBParser.COLUMN_FORMAT - 364)) | (1 << (MariaDBParser.COLUMN_NAME - 364)) | (1 << (MariaDBParser.COMMENT - 364)) | (1 << (MariaDBParser.COMMIT - 364)) | (1 << (MariaDBParser.COMPACT - 364)) | (1 << (MariaDBParser.COMPLETION - 364)) | (1 << (MariaDBParser.COMPRESSED - 364)) | (1 << (MariaDBParser.COMPRESSION - 364)) | (1 << (MariaDBParser.CONCURRENT - 364)) | (1 << (MariaDBParser.CONNECT - 364)) | (1 << (MariaDBParser.CONNECTION - 364)) | (1 << (MariaDBParser.CONSISTENT - 364)) | (1 << (MariaDBParser.CONSTRAINT_CATALOG - 364)) | (1 << (MariaDBParser.CONSTRAINT_SCHEMA - 364)) | (1 << (MariaDBParser.CONSTRAINT_NAME - 364)) | (1 << (MariaDBParser.CONTAINS - 364)) | (1 << (MariaDBParser.CONTEXT - 364)) | (1 << (MariaDBParser.CONTRIBUTORS - 364)) | (1 << (MariaDBParser.COPY - 364)) | (1 << (MariaDBParser.CPU - 364)) | (1 << (MariaDBParser.CYCLE - 364)) | (1 << (MariaDBParser.CURSOR_NAME - 364)) | (1 << (MariaDBParser.DATA - 364)) | (1 << (MariaDBParser.DATAFILE - 364)) | (1 << (MariaDBParser.DEALLOCATE - 364)) | (1 << (MariaDBParser.DEFAULT_AUTH - 364)) | (1 << (MariaDBParser.DEFINER - 364)) | (1 << (MariaDBParser.DELAY_KEY_WRITE - 364)) | (1 << (MariaDBParser.DES_KEY_FILE - 364)) | (1 << (MariaDBParser.DIRECTORY - 364)))) !== 0) || ((((_la - 396)) & ~0x1F) === 0 && ((1 << (_la - 396)) & ((1 << (MariaDBParser.DISABLE - 396)) | (1 << (MariaDBParser.DISCARD - 396)) | (1 << (MariaDBParser.DISK - 396)) | (1 << (MariaDBParser.DO - 396)) | (1 << (MariaDBParser.DUMPFILE - 396)) | (1 << (MariaDBParser.DUPLICATE - 396)) | (1 << (MariaDBParser.DYNAMIC - 396)) | (1 << (MariaDBParser.ENABLE - 396)) | (1 << (MariaDBParser.ENCRYPTED - 396)) | (1 << (MariaDBParser.ENCRYPTION - 396)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ID - 396)) | (1 << (MariaDBParser.END - 396)) | (1 << (MariaDBParser.ENDS - 396)) | (1 << (MariaDBParser.ENGINE - 396)) | (1 << (MariaDBParser.ENGINES - 396)) | (1 << (MariaDBParser.ERROR - 396)) | (1 << (MariaDBParser.ERRORS - 396)) | (1 << (MariaDBParser.ESCAPE - 396)) | (1 << (MariaDBParser.EVEN - 396)) | (1 << (MariaDBParser.EVENT - 396)) | (1 << (MariaDBParser.EVENTS - 396)) | (1 << (MariaDBParser.EVERY - 396)) | (1 << (MariaDBParser.EXCHANGE - 396)) | (1 << (MariaDBParser.EXCLUSIVE - 396)) | (1 << (MariaDBParser.EXPIRE - 396)) | (1 << (MariaDBParser.EXPORT - 396)) | (1 << (MariaDBParser.EXTENDED - 396)) | (1 << (MariaDBParser.EXTENT_SIZE - 396)) | (1 << (MariaDBParser.FAILED_LOGIN_ATTEMPTS - 396)) | (1 << (MariaDBParser.FAST - 396)) | (1 << (MariaDBParser.FAULTS - 396)) | (1 << (MariaDBParser.FIELDS - 396)))) !== 0) || ((((_la - 428)) & ~0x1F) === 0 && ((1 << (_la - 428)) & ((1 << (MariaDBParser.FILE_BLOCK_SIZE - 428)) | (1 << (MariaDBParser.FILTER - 428)) | (1 << (MariaDBParser.FIRST - 428)) | (1 << (MariaDBParser.FIXED - 428)) | (1 << (MariaDBParser.FLUSH - 428)) | (1 << (MariaDBParser.FOLLOWS - 428)) | (1 << (MariaDBParser.FOUND - 428)) | (1 << (MariaDBParser.FULL - 428)) | (1 << (MariaDBParser.FUNCTION - 428)) | (1 << (MariaDBParser.GENERAL - 428)) | (1 << (MariaDBParser.GLOBAL - 428)) | (1 << (MariaDBParser.GRANTS - 428)) | (1 << (MariaDBParser.GROUP_REPLICATION - 428)) | (1 << (MariaDBParser.HANDLER - 428)) | (1 << (MariaDBParser.HASH - 428)) | (1 << (MariaDBParser.HELP - 428)) | (1 << (MariaDBParser.HISTORY - 428)) | (1 << (MariaDBParser.HOST - 428)) | (1 << (MariaDBParser.HOSTS - 428)) | (1 << (MariaDBParser.IDENTIFIED - 428)) | (1 << (MariaDBParser.IGNORE_SERVER_IDS - 428)) | (1 << (MariaDBParser.IMPORT - 428)) | (1 << (MariaDBParser.INCREMENT - 428)) | (1 << (MariaDBParser.INDEXES - 428)) | (1 << (MariaDBParser.INITIAL_SIZE - 428)) | (1 << (MariaDBParser.INPLACE - 428)) | (1 << (MariaDBParser.INSERT_METHOD - 428)) | (1 << (MariaDBParser.INSTALL - 428)) | (1 << (MariaDBParser.INSTANCE - 428)) | (1 << (MariaDBParser.INSTANT - 428)))) !== 0) || ((((_la - 460)) & ~0x1F) === 0 && ((1 << (_la - 460)) & ((1 << (MariaDBParser.INVOKER - 460)) | (1 << (MariaDBParser.IO - 460)) | (1 << (MariaDBParser.IO_THREAD - 460)) | (1 << (MariaDBParser.IPC - 460)) | (1 << (MariaDBParser.ISOLATION - 460)) | (1 << (MariaDBParser.ISSUER - 460)) | (1 << (MariaDBParser.JSON - 460)) | (1 << (MariaDBParser.KEY_BLOCK_SIZE - 460)) | (1 << (MariaDBParser.LANGUAGE - 460)) | (1 << (MariaDBParser.LAST - 460)) | (1 << (MariaDBParser.LEAVES - 460)) | (1 << (MariaDBParser.LESS - 460)) | (1 << (MariaDBParser.LEVEL - 460)) | (1 << (MariaDBParser.LIST - 460)) | (1 << (MariaDBParser.LOCAL - 460)) | (1 << (MariaDBParser.LOCALES - 460)) | (1 << (MariaDBParser.LOGFILE - 460)) | (1 << (MariaDBParser.LOGS - 460)) | (1 << (MariaDBParser.MASTER - 460)) | (1 << (MariaDBParser.MASTER_AUTO_POSITION - 460)) | (1 << (MariaDBParser.MASTER_CONNECT_RETRY - 460)) | (1 << (MariaDBParser.MASTER_DELAY - 460)) | (1 << (MariaDBParser.MASTER_HEARTBEAT_PERIOD - 460)) | (1 << (MariaDBParser.MASTER_HOST - 460)) | (1 << (MariaDBParser.MASTER_LOG_FILE - 460)) | (1 << (MariaDBParser.MASTER_LOG_POS - 460)) | (1 << (MariaDBParser.MASTER_PASSWORD - 460)) | (1 << (MariaDBParser.MASTER_PORT - 460)) | (1 << (MariaDBParser.MASTER_RETRY_COUNT - 460)) | (1 << (MariaDBParser.MASTER_SSL - 460)) | (1 << (MariaDBParser.MASTER_SSL_CA - 460)) | (1 << (MariaDBParser.MASTER_SSL_CAPATH - 460)))) !== 0) || ((((_la - 492)) & ~0x1F) === 0 && ((1 << (_la - 492)) & ((1 << (MariaDBParser.MASTER_SSL_CERT - 492)) | (1 << (MariaDBParser.MASTER_SSL_CIPHER - 492)) | (1 << (MariaDBParser.MASTER_SSL_CRL - 492)) | (1 << (MariaDBParser.MASTER_SSL_CRLPATH - 492)) | (1 << (MariaDBParser.MASTER_SSL_KEY - 492)) | (1 << (MariaDBParser.MASTER_TLS_VERSION - 492)) | (1 << (MariaDBParser.MASTER_USER - 492)) | (1 << (MariaDBParser.MAX_CONNECTIONS_PER_HOUR - 492)) | (1 << (MariaDBParser.MAX_QUERIES_PER_HOUR - 492)) | (1 << (MariaDBParser.MAX_ROWS - 492)) | (1 << (MariaDBParser.MAX_SIZE - 492)) | (1 << (MariaDBParser.MAX_UPDATES_PER_HOUR - 492)) | (1 << (MariaDBParser.MAX_USER_CONNECTIONS - 492)) | (1 << (MariaDBParser.MEDIUM - 492)) | (1 << (MariaDBParser.MEMBER - 492)) | (1 << (MariaDBParser.MERGE - 492)) | (1 << (MariaDBParser.MESSAGE_TEXT - 492)) | (1 << (MariaDBParser.MID - 492)) | (1 << (MariaDBParser.MIGRATE - 492)) | (1 << (MariaDBParser.MIN_ROWS - 492)) | (1 << (MariaDBParser.MODE - 492)) | (1 << (MariaDBParser.MODIFY - 492)) | (1 << (MariaDBParser.MUTEX - 492)) | (1 << (MariaDBParser.MYSQL - 492)) | (1 << (MariaDBParser.MYSQL_ERRNO - 492)) | (1 << (MariaDBParser.NAME - 492)) | (1 << (MariaDBParser.NAMES - 492)) | (1 << (MariaDBParser.NCHAR - 492)) | (1 << (MariaDBParser.NEVER - 492)) | (1 << (MariaDBParser.NEXT - 492)) | (1 << (MariaDBParser.NO - 492)) | (1 << (MariaDBParser.NOCACHE - 492)))) !== 0) || ((((_la - 524)) & ~0x1F) === 0 && ((1 << (_la - 524)) & ((1 << (MariaDBParser.NOCOPY - 524)) | (1 << (MariaDBParser.NOCYCLE - 524)) | (1 << (MariaDBParser.NOMAXVALUE - 524)) | (1 << (MariaDBParser.NOMINVALUE - 524)) | (1 << (MariaDBParser.NOWAIT - 524)) | (1 << (MariaDBParser.NODEGROUP - 524)) | (1 << (MariaDBParser.NONE - 524)) | (1 << (MariaDBParser.ODBC - 524)) | (1 << (MariaDBParser.OFFLINE - 524)) | (1 << (MariaDBParser.OFFSET - 524)) | (1 << (MariaDBParser.OF - 524)) | (1 << (MariaDBParser.OJ - 524)) | (1 << (MariaDBParser.OLD_PASSWORD - 524)) | (1 << (MariaDBParser.ONE - 524)) | (1 << (MariaDBParser.ONLINE - 524)) | (1 << (MariaDBParser.ONLY - 524)) | (1 << (MariaDBParser.OPEN - 524)) | (1 << (MariaDBParser.OPTIMIZER_COSTS - 524)) | (1 << (MariaDBParser.OPTIONS - 524)) | (1 << (MariaDBParser.OWNER - 524)) | (1 << (MariaDBParser.PACK_KEYS - 524)) | (1 << (MariaDBParser.PAGE - 524)) | (1 << (MariaDBParser.PARSER - 524)) | (1 << (MariaDBParser.PARTIAL - 524)) | (1 << (MariaDBParser.PARTITIONING - 524)) | (1 << (MariaDBParser.PARTITIONS - 524)) | (1 << (MariaDBParser.PASSWORD - 524)) | (1 << (MariaDBParser.PASSWORD_LOCK_TIME - 524)) | (1 << (MariaDBParser.PHASE - 524)) | (1 << (MariaDBParser.PLUGIN - 524)))) !== 0) || ((((_la - 556)) & ~0x1F) === 0 && ((1 << (_la - 556)) & ((1 << (MariaDBParser.PLUGIN_DIR - 556)) | (1 << (MariaDBParser.PLUGINS - 556)) | (1 << (MariaDBParser.PORT - 556)) | (1 << (MariaDBParser.PRECEDES - 556)) | (1 << (MariaDBParser.PREPARE - 556)) | (1 << (MariaDBParser.PRESERVE - 556)) | (1 << (MariaDBParser.PREV - 556)) | (1 << (MariaDBParser.PROCESSLIST - 556)) | (1 << (MariaDBParser.PROFILE - 556)) | (1 << (MariaDBParser.PROFILES - 556)) | (1 << (MariaDBParser.PROXY - 556)) | (1 << (MariaDBParser.QUERY - 556)) | (1 << (MariaDBParser.QUERY_RESPONSE_TIME - 556)) | (1 << (MariaDBParser.QUICK - 556)) | (1 << (MariaDBParser.REBUILD - 556)) | (1 << (MariaDBParser.RECOVER - 556)) | (1 << (MariaDBParser.RECURSIVE - 556)) | (1 << (MariaDBParser.REDO_BUFFER_SIZE - 556)) | (1 << (MariaDBParser.REDUNDANT - 556)) | (1 << (MariaDBParser.RELAY - 556)) | (1 << (MariaDBParser.RELAY_LOG_FILE - 556)) | (1 << (MariaDBParser.RELAY_LOG_POS - 556)) | (1 << (MariaDBParser.RELAYLOG - 556)) | (1 << (MariaDBParser.REMOVE - 556)) | (1 << (MariaDBParser.REORGANIZE - 556)) | (1 << (MariaDBParser.REPAIR - 556)) | (1 << (MariaDBParser.REPLICATE_DO_DB - 556)) | (1 << (MariaDBParser.REPLICATE_DO_TABLE - 556)) | (1 << (MariaDBParser.REPLICATE_IGNORE_DB - 556)) | (1 << (MariaDBParser.REPLICATE_IGNORE_TABLE - 556)) | (1 << (MariaDBParser.REPLICATE_REWRITE_DB - 556)))) !== 0) || ((((_la - 588)) & ~0x1F) === 0 && ((1 << (_la - 588)) & ((1 << (MariaDBParser.REPLICATE_WILD_DO_TABLE - 588)) | (1 << (MariaDBParser.REPLICATE_WILD_IGNORE_TABLE - 588)) | (1 << (MariaDBParser.REPLICATION - 588)) | (1 << (MariaDBParser.RESET - 588)) | (1 << (MariaDBParser.RESTART - 588)) | (1 << (MariaDBParser.RESUME - 588)) | (1 << (MariaDBParser.RETURNED_SQLSTATE - 588)) | (1 << (MariaDBParser.RETURNS - 588)) | (1 << (MariaDBParser.REUSE - 588)) | (1 << (MariaDBParser.ROLE - 588)) | (1 << (MariaDBParser.ROLLBACK - 588)) | (1 << (MariaDBParser.ROLLUP - 588)) | (1 << (MariaDBParser.ROTATE - 588)) | (1 << (MariaDBParser.ROW - 588)) | (1 << (MariaDBParser.ROWS - 588)) | (1 << (MariaDBParser.ROW_FORMAT - 588)) | (1 << (MariaDBParser.RTREE - 588)) | (1 << (MariaDBParser.SAVEPOINT - 588)) | (1 << (MariaDBParser.SCHEDULE - 588)) | (1 << (MariaDBParser.SECURITY - 588)) | (1 << (MariaDBParser.SEQUENCE - 588)) | (1 << (MariaDBParser.SERVER - 588)) | (1 << (MariaDBParser.SESSION - 588)) | (1 << (MariaDBParser.SHARE - 588)) | (1 << (MariaDBParser.SHARED - 588)) | (1 << (MariaDBParser.SIGNED - 588)) | (1 << (MariaDBParser.SIMPLE - 588)) | (1 << (MariaDBParser.SLAVE - 588)) | (1 << (MariaDBParser.SLAVES - 588)) | (1 << (MariaDBParser.SLOW - 588)) | (1 << (MariaDBParser.SNAPSHOT - 588)))) !== 0) || ((((_la - 620)) & ~0x1F) === 0 && ((1 << (_la - 620)) & ((1 << (MariaDBParser.SOCKET - 620)) | (1 << (MariaDBParser.SOME - 620)) | (1 << (MariaDBParser.SONAME - 620)) | (1 << (MariaDBParser.SOUNDS - 620)) | (1 << (MariaDBParser.SOURCE - 620)) | (1 << (MariaDBParser.SQL_AFTER_GTIDS - 620)) | (1 << (MariaDBParser.SQL_AFTER_MTS_GAPS - 620)) | (1 << (MariaDBParser.SQL_BEFORE_GTIDS - 620)) | (1 << (MariaDBParser.SQL_BUFFER_RESULT - 620)) | (1 << (MariaDBParser.SQL_CACHE - 620)) | (1 << (MariaDBParser.SQL_NO_CACHE - 620)) | (1 << (MariaDBParser.SQL_THREAD - 620)) | (1 << (MariaDBParser.START - 620)) | (1 << (MariaDBParser.STARTS - 620)) | (1 << (MariaDBParser.STATS_AUTO_RECALC - 620)) | (1 << (MariaDBParser.STATS_PERSISTENT - 620)) | (1 << (MariaDBParser.STATS_SAMPLE_PAGES - 620)) | (1 << (MariaDBParser.STATUS - 620)) | (1 << (MariaDBParser.STOP - 620)) | (1 << (MariaDBParser.STORAGE - 620)) | (1 << (MariaDBParser.STRING - 620)) | (1 << (MariaDBParser.SUBCLASS_ORIGIN - 620)) | (1 << (MariaDBParser.SUBJECT - 620)) | (1 << (MariaDBParser.SUBPARTITION - 620)) | (1 << (MariaDBParser.SUBPARTITIONS - 620)) | (1 << (MariaDBParser.SUSPEND - 620)) | (1 << (MariaDBParser.SWAPS - 620)) | (1 << (MariaDBParser.SWITCHES - 620)) | (1 << (MariaDBParser.TABLE_NAME - 620)) | (1 << (MariaDBParser.TABLESPACE - 620)) | (1 << (MariaDBParser.TABLE_TYPE - 620)))) !== 0) || ((((_la - 652)) & ~0x1F) === 0 && ((1 << (_la - 652)) & ((1 << (MariaDBParser.TEMPORARY - 652)) | (1 << (MariaDBParser.TEMPTABLE - 652)) | (1 << (MariaDBParser.THAN - 652)) | (1 << (MariaDBParser.TRADITIONAL - 652)) | (1 << (MariaDBParser.TRANSACTION - 652)) | (1 << (MariaDBParser.TRANSACTIONAL - 652)) | (1 << (MariaDBParser.TRIGGERS - 652)) | (1 << (MariaDBParser.TRUNCATE - 652)) | (1 << (MariaDBParser.TYPES - 652)) | (1 << (MariaDBParser.UNBOUNDED - 652)) | (1 << (MariaDBParser.UNDEFINED - 652)) | (1 << (MariaDBParser.UNDOFILE - 652)) | (1 << (MariaDBParser.UNDO_BUFFER_SIZE - 652)) | (1 << (MariaDBParser.UNINSTALL - 652)) | (1 << (MariaDBParser.UNKNOWN - 652)) | (1 << (MariaDBParser.UNTIL - 652)) | (1 << (MariaDBParser.UPGRADE - 652)) | (1 << (MariaDBParser.USER - 652)) | (1 << (MariaDBParser.USE_FRM - 652)) | (1 << (MariaDBParser.USER_RESOURCES - 652)) | (1 << (MariaDBParser.VALIDATION - 652)) | (1 << (MariaDBParser.VALUE - 652)) | (1 << (MariaDBParser.VARIABLES - 652)) | (1 << (MariaDBParser.VIEW - 652)) | (1 << (MariaDBParser.VIRTUAL - 652)) | (1 << (MariaDBParser.WAIT - 652)) | (1 << (MariaDBParser.WARNINGS - 652)) | (1 << (MariaDBParser.WITHOUT - 652)) | (1 << (MariaDBParser.WORK - 652)) | (1 << (MariaDBParser.WRAPPER - 652)))) !== 0) || ((((_la - 684)) & ~0x1F) === 0 && ((1 << (_la - 684)) & ((1 << (MariaDBParser.WSREP_MEMBERSHIP - 684)) | (1 << (MariaDBParser.WSREP_STATUS - 684)) | (1 << (MariaDBParser.X509 - 684)) | (1 << (MariaDBParser.XA - 684)) | (1 << (MariaDBParser.XML - 684)) | (1 << (MariaDBParser.EUR - 684)) | (1 << (MariaDBParser.USA - 684)) | (1 << (MariaDBParser.JIS - 684)) | (1 << (MariaDBParser.ISO - 684)) | (1 << (MariaDBParser.INTERNAL - 684)) | (1 << (MariaDBParser.USER_STATISTICS - 684)) | (1 << (MariaDBParser.CLIENT_STATISTICS - 684)) | (1 << (MariaDBParser.INDEX_STATISTICS - 684)) | (1 << (MariaDBParser.TABLE_STATISTICS - 684)) | (1 << (MariaDBParser.ADMIN - 684)) | (1 << (MariaDBParser.AUDIT_ADMIN - 684)) | (1 << (MariaDBParser.BACKUP_ADMIN - 684)) | (1 << (MariaDBParser.BINLOG_ADMIN - 684)) | (1 << (MariaDBParser.BINLOG_ENCRYPTION_ADMIN - 684)) | (1 << (MariaDBParser.CLONE_ADMIN - 684)) | (1 << (MariaDBParser.CONNECTION_ADMIN - 684)) | (1 << (MariaDBParser.ENCRYPTION_KEY_ADMIN - 684)))) !== 0) || ((((_la - 718)) & ~0x1F) === 0 && ((1 << (_la - 718)) & ((1 << (MariaDBParser.FIREWALL_ADMIN - 718)) | (1 << (MariaDBParser.FIREWALL_USER - 718)) | (1 << (MariaDBParser.GROUP_REPLICATION_ADMIN - 718)) | (1 << (MariaDBParser.INNODB_REDO_LOG_ARCHIVE - 718)) | (1 << (MariaDBParser.INVOKE - 718)) | (1 << (MariaDBParser.LAMBDA - 718)) | (1 << (MariaDBParser.NDB_STORED_USER - 718)) | (1 << (MariaDBParser.PASSWORDLESS_USER_ADMIN - 718)) | (1 << (MariaDBParser.PERSIST_RO_VARIABLES_ADMIN - 718)) | (1 << (MariaDBParser.REPLICATION_APPLIER - 718)) | (1 << (MariaDBParser.REPLICATION_SLAVE_ADMIN - 718)) | (1 << (MariaDBParser.RESOURCE_GROUP_ADMIN - 718)) | (1 << (MariaDBParser.RESOURCE_GROUP_USER - 718)) | (1 << (MariaDBParser.ROLE_ADMIN - 718)) | (1 << (MariaDBParser.S3 - 718)) | (1 << (MariaDBParser.SESSION_VARIABLES_ADMIN - 718)) | (1 << (MariaDBParser.SET_USER_ID - 718)) | (1 << (MariaDBParser.SHOW_ROUTINE - 718)) | (1 << (MariaDBParser.SYSTEM_VARIABLES_ADMIN - 718)))) !== 0) || ((((_la - 750)) & ~0x1F) === 0 && ((1 << (_la - 750)) & ((1 << (MariaDBParser.TABLE_ENCRYPTION_ADMIN - 750)) | (1 << (MariaDBParser.VERSION_TOKEN_ADMIN - 750)) | (1 << (MariaDBParser.XA_RECOVER_ADMIN - 750)))) !== 0) || _la === MariaDBParser.MEMORY || _la === MariaDBParser.CATALOG_NAME || _la === MariaDBParser.ENGINE_ATTRIBUTE || _la === MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE || _la === MariaDBParser.SCHEMA_NAME || ((((_la - 1113)) & ~0x1F) === 0 && ((1 << (_la - 1113)) & ((1 << (MariaDBParser.VIA - 1113)) | (1 << (MariaDBParser.LASTVAL - 1113)) | (1 << (MariaDBParser.NEXTVAL - 1113)) | (1 << (MariaDBParser.SETVAL - 1113)) | (1 << (MariaDBParser.PREVIOUS - 1113)) | (1 << (MariaDBParser.PERSISTENT - 1113)) | (1 << (MariaDBParser.BINLOG_MONITOR - 1113)) | (1 << (MariaDBParser.BINLOG_REPLAY - 1113)) | (1 << (MariaDBParser.FEDERATED_ADMIN - 1113)) | (1 << (MariaDBParser.READ_ONLY_ADMIN - 1113)) | (1 << (MariaDBParser.REPLICA - 1113)) | (1 << (MariaDBParser.REPLICAS - 1113)) | (1 << (MariaDBParser.REPLICATION_MASTER_ADMIN - 1113)) | (1 << (MariaDBParser.MONITOR - 1113)) | (1 << (MariaDBParser.READ_ONLY - 1113)) | (1 << (MariaDBParser.REPLAY - 1113)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public functionNameBase(): FunctionNameBaseContext {
		let _localctx: FunctionNameBaseContext = new FunctionNameBaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 722, MariaDBParser.RULE_functionNameBase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7591;
			_la = this._input.LA(1);
			if (!(_la === MariaDBParser.DATABASE || _la === MariaDBParser.LEFT || _la === MariaDBParser.RIGHT || _la === MariaDBParser.SCHEMA || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & ((1 << (MariaDBParser.DATE - 217)) | (1 << (MariaDBParser.TIME - 217)) | (1 << (MariaDBParser.TIMESTAMP - 217)) | (1 << (MariaDBParser.YEAR - 217)))) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & ((1 << (MariaDBParser.JSON_ARRAY - 251)) | (1 << (MariaDBParser.JSON_ARRAYAGG - 251)) | (1 << (MariaDBParser.JSON_ARRAY_APPEND - 251)) | (1 << (MariaDBParser.JSON_ARRAY_INSERT - 251)) | (1 << (MariaDBParser.JSON_CONTAINS - 251)) | (1 << (MariaDBParser.JSON_CONTAINS_PATH - 251)) | (1 << (MariaDBParser.JSON_DEPTH - 251)) | (1 << (MariaDBParser.JSON_EXTRACT - 251)) | (1 << (MariaDBParser.JSON_INSERT - 251)) | (1 << (MariaDBParser.JSON_KEYS - 251)) | (1 << (MariaDBParser.JSON_LENGTH - 251)) | (1 << (MariaDBParser.JSON_MERGE - 251)) | (1 << (MariaDBParser.JSON_MERGE_PATCH - 251)) | (1 << (MariaDBParser.JSON_MERGE_PRESERVE - 251)) | (1 << (MariaDBParser.JSON_OBJECT - 251)) | (1 << (MariaDBParser.JSON_OBJECTAGG - 251)) | (1 << (MariaDBParser.JSON_OVERLAPS - 251)) | (1 << (MariaDBParser.JSON_PRETTY - 251)) | (1 << (MariaDBParser.JSON_QUOTE - 251)) | (1 << (MariaDBParser.JSON_REMOVE - 251)) | (1 << (MariaDBParser.JSON_REPLACE - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALID - 251)) | (1 << (MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT - 251)) | (1 << (MariaDBParser.JSON_SEARCH - 251)) | (1 << (MariaDBParser.JSON_SET - 251)) | (1 << (MariaDBParser.JSON_STORAGE_FREE - 251)) | (1 << (MariaDBParser.JSON_STORAGE_SIZE - 251)) | (1 << (MariaDBParser.JSON_TABLE - 251)) | (1 << (MariaDBParser.JSON_TYPE - 251)) | (1 << (MariaDBParser.JSON_UNQUOTE - 251)) | (1 << (MariaDBParser.JSON_VALID - 251)) | (1 << (MariaDBParser.JSON_VALUE - 251)))) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & ((1 << (MariaDBParser.COUNT - 290)) | (1 << (MariaDBParser.CUME_DIST - 290)) | (1 << (MariaDBParser.DENSE_RANK - 290)) | (1 << (MariaDBParser.FIRST_VALUE - 290)) | (1 << (MariaDBParser.LAG - 290)) | (1 << (MariaDBParser.LAST_VALUE - 290)) | (1 << (MariaDBParser.LEAD - 290)) | (1 << (MariaDBParser.NTILE - 290)) | (1 << (MariaDBParser.NTH_VALUE - 290)) | (1 << (MariaDBParser.PERCENT_RANK - 290)) | (1 << (MariaDBParser.RANK - 290)) | (1 << (MariaDBParser.ROW_NUMBER - 290)))) !== 0) || _la === MariaDBParser.POSITION || _la === MariaDBParser.INVISIBLE || ((((_la - 677)) & ~0x1F) === 0 && ((1 << (_la - 677)) & ((1 << (MariaDBParser.VISIBLE - 677)) | (1 << (MariaDBParser.QUARTER - 677)) | (1 << (MariaDBParser.MONTH - 677)) | (1 << (MariaDBParser.DAY - 677)) | (1 << (MariaDBParser.HOUR - 677)) | (1 << (MariaDBParser.MINUTE - 677)) | (1 << (MariaDBParser.WEEK - 677)) | (1 << (MariaDBParser.SECOND - 677)) | (1 << (MariaDBParser.MICROSECOND - 677)))) !== 0) || _la === MariaDBParser.SESSION_VARIABLES_ADMIN || ((((_la - 810)) & ~0x1F) === 0 && ((1 << (_la - 810)) & ((1 << (MariaDBParser.GEOMETRYCOLLECTION - 810)) | (1 << (MariaDBParser.LINESTRING - 810)) | (1 << (MariaDBParser.MULTILINESTRING - 810)) | (1 << (MariaDBParser.MULTIPOINT - 810)) | (1 << (MariaDBParser.MULTIPOLYGON - 810)) | (1 << (MariaDBParser.POINT - 810)) | (1 << (MariaDBParser.POLYGON - 810)) | (1 << (MariaDBParser.ABS - 810)) | (1 << (MariaDBParser.ACOS - 810)) | (1 << (MariaDBParser.ADDDATE - 810)) | (1 << (MariaDBParser.ADDTIME - 810)) | (1 << (MariaDBParser.AES_DECRYPT - 810)) | (1 << (MariaDBParser.AES_ENCRYPT - 810)) | (1 << (MariaDBParser.AREA - 810)) | (1 << (MariaDBParser.ASBINARY - 810)) | (1 << (MariaDBParser.ASIN - 810)) | (1 << (MariaDBParser.ASTEXT - 810)) | (1 << (MariaDBParser.ASWKB - 810)) | (1 << (MariaDBParser.ASWKT - 810)) | (1 << (MariaDBParser.ASYMMETRIC_DECRYPT - 810)) | (1 << (MariaDBParser.ASYMMETRIC_DERIVE - 810)) | (1 << (MariaDBParser.ASYMMETRIC_ENCRYPT - 810)) | (1 << (MariaDBParser.ASYMMETRIC_SIGN - 810)) | (1 << (MariaDBParser.ASYMMETRIC_VERIFY - 810)) | (1 << (MariaDBParser.ATAN - 810)) | (1 << (MariaDBParser.ATAN2 - 810)) | (1 << (MariaDBParser.BENCHMARK - 810)) | (1 << (MariaDBParser.BIN - 810)) | (1 << (MariaDBParser.BIT_COUNT - 810)) | (1 << (MariaDBParser.BIT_LENGTH - 810)))) !== 0) || ((((_la - 842)) & ~0x1F) === 0 && ((1 << (_la - 842)) & ((1 << (MariaDBParser.BUFFER - 842)) | (1 << (MariaDBParser.CEIL - 842)) | (1 << (MariaDBParser.CEILING - 842)) | (1 << (MariaDBParser.CENTROID - 842)) | (1 << (MariaDBParser.CHARACTER_LENGTH - 842)) | (1 << (MariaDBParser.CHARSET - 842)) | (1 << (MariaDBParser.CHAR_LENGTH - 842)) | (1 << (MariaDBParser.COERCIBILITY - 842)) | (1 << (MariaDBParser.COLLATION - 842)) | (1 << (MariaDBParser.COMPRESS - 842)) | (1 << (MariaDBParser.CONCAT - 842)) | (1 << (MariaDBParser.CONCAT_WS - 842)) | (1 << (MariaDBParser.CONNECTION_ID - 842)) | (1 << (MariaDBParser.CONV - 842)) | (1 << (MariaDBParser.CONVERT_TZ - 842)) | (1 << (MariaDBParser.COS - 842)) | (1 << (MariaDBParser.COT - 842)) | (1 << (MariaDBParser.CRC32 - 842)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY - 842)) | (1 << (MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY - 842)) | (1 << (MariaDBParser.CREATE_DH_PARAMETERS - 842)) | (1 << (MariaDBParser.CREATE_DIGEST - 842)) | (1 << (MariaDBParser.CROSSES - 842)) | (1 << (MariaDBParser.DATEDIFF - 842)) | (1 << (MariaDBParser.DATE_FORMAT - 842)) | (1 << (MariaDBParser.DAYNAME - 842)) | (1 << (MariaDBParser.DAYOFMONTH - 842)) | (1 << (MariaDBParser.DAYOFWEEK - 842)) | (1 << (MariaDBParser.DAYOFYEAR - 842)) | (1 << (MariaDBParser.DECODE - 842)) | (1 << (MariaDBParser.DEGREES - 842)))) !== 0) || ((((_la - 874)) & ~0x1F) === 0 && ((1 << (_la - 874)) & ((1 << (MariaDBParser.DES_DECRYPT - 874)) | (1 << (MariaDBParser.DES_ENCRYPT - 874)) | (1 << (MariaDBParser.DIMENSION - 874)) | (1 << (MariaDBParser.DISJOINT - 874)) | (1 << (MariaDBParser.ELT - 874)) | (1 << (MariaDBParser.ENCODE - 874)) | (1 << (MariaDBParser.ENCRYPT - 874)) | (1 << (MariaDBParser.ENDPOINT - 874)) | (1 << (MariaDBParser.ENVELOPE - 874)) | (1 << (MariaDBParser.EQUALS - 874)) | (1 << (MariaDBParser.EXP - 874)) | (1 << (MariaDBParser.EXPORT_SET - 874)) | (1 << (MariaDBParser.EXTERIORRING - 874)) | (1 << (MariaDBParser.EXTRACTVALUE - 874)) | (1 << (MariaDBParser.FIELD - 874)) | (1 << (MariaDBParser.FIND_IN_SET - 874)) | (1 << (MariaDBParser.FLOOR - 874)) | (1 << (MariaDBParser.FORMAT - 874)) | (1 << (MariaDBParser.FOUND_ROWS - 874)) | (1 << (MariaDBParser.FROM_BASE64 - 874)) | (1 << (MariaDBParser.FROM_DAYS - 874)) | (1 << (MariaDBParser.FROM_UNIXTIME - 874)) | (1 << (MariaDBParser.GEOMCOLLFROMTEXT - 874)) | (1 << (MariaDBParser.GEOMCOLLFROMWKB - 874)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT - 874)) | (1 << (MariaDBParser.GEOMETRYCOLLECTIONFROMWKB - 874)) | (1 << (MariaDBParser.GEOMETRYFROMTEXT - 874)) | (1 << (MariaDBParser.GEOMETRYFROMWKB - 874)) | (1 << (MariaDBParser.GEOMETRYN - 874)) | (1 << (MariaDBParser.GEOMETRYTYPE - 874)) | (1 << (MariaDBParser.GEOMFROMTEXT - 874)))) !== 0) || ((((_la - 906)) & ~0x1F) === 0 && ((1 << (_la - 906)) & ((1 << (MariaDBParser.GEOMFROMWKB - 906)) | (1 << (MariaDBParser.GET_FORMAT - 906)) | (1 << (MariaDBParser.GET_LOCK - 906)) | (1 << (MariaDBParser.GLENGTH - 906)) | (1 << (MariaDBParser.GREATEST - 906)) | (1 << (MariaDBParser.GTID_SUBSET - 906)) | (1 << (MariaDBParser.GTID_SUBTRACT - 906)) | (1 << (MariaDBParser.HEX - 906)) | (1 << (MariaDBParser.IFNULL - 906)) | (1 << (MariaDBParser.INET6_ATON - 906)) | (1 << (MariaDBParser.INET6_NTOA - 906)) | (1 << (MariaDBParser.INET_ATON - 906)) | (1 << (MariaDBParser.INET_NTOA - 906)) | (1 << (MariaDBParser.INSTR - 906)) | (1 << (MariaDBParser.INTERIORRINGN - 906)) | (1 << (MariaDBParser.INTERSECTS - 906)) | (1 << (MariaDBParser.ISCLOSED - 906)) | (1 << (MariaDBParser.ISEMPTY - 906)) | (1 << (MariaDBParser.ISNULL - 906)) | (1 << (MariaDBParser.ISSIMPLE - 906)) | (1 << (MariaDBParser.IS_FREE_LOCK - 906)) | (1 << (MariaDBParser.IS_IPV4 - 906)) | (1 << (MariaDBParser.IS_IPV4_COMPAT - 906)) | (1 << (MariaDBParser.IS_IPV4_MAPPED - 906)) | (1 << (MariaDBParser.IS_IPV6 - 906)) | (1 << (MariaDBParser.IS_USED_LOCK - 906)) | (1 << (MariaDBParser.LAST_INSERT_ID - 906)) | (1 << (MariaDBParser.LCASE - 906)) | (1 << (MariaDBParser.LEAST - 906)) | (1 << (MariaDBParser.LENGTH - 906)) | (1 << (MariaDBParser.LINEFROMTEXT - 906)) | (1 << (MariaDBParser.LINEFROMWKB - 906)))) !== 0) || ((((_la - 938)) & ~0x1F) === 0 && ((1 << (_la - 938)) & ((1 << (MariaDBParser.LINESTRINGFROMTEXT - 938)) | (1 << (MariaDBParser.LINESTRINGFROMWKB - 938)) | (1 << (MariaDBParser.LN - 938)) | (1 << (MariaDBParser.LOAD_FILE - 938)) | (1 << (MariaDBParser.LOCATE - 938)) | (1 << (MariaDBParser.LOG - 938)) | (1 << (MariaDBParser.LOG10 - 938)) | (1 << (MariaDBParser.LOG2 - 938)) | (1 << (MariaDBParser.LOWER - 938)) | (1 << (MariaDBParser.LPAD - 938)) | (1 << (MariaDBParser.LTRIM - 938)) | (1 << (MariaDBParser.MAKEDATE - 938)) | (1 << (MariaDBParser.MAKETIME - 938)) | (1 << (MariaDBParser.MAKE_SET - 938)) | (1 << (MariaDBParser.MASTER_POS_WAIT - 938)) | (1 << (MariaDBParser.MBRCONTAINS - 938)) | (1 << (MariaDBParser.MBRDISJOINT - 938)) | (1 << (MariaDBParser.MBREQUAL - 938)) | (1 << (MariaDBParser.MBRINTERSECTS - 938)) | (1 << (MariaDBParser.MBROVERLAPS - 938)) | (1 << (MariaDBParser.MBRTOUCHES - 938)) | (1 << (MariaDBParser.MBRWITHIN - 938)) | (1 << (MariaDBParser.MD5 - 938)) | (1 << (MariaDBParser.MLINEFROMTEXT - 938)) | (1 << (MariaDBParser.MLINEFROMWKB - 938)) | (1 << (MariaDBParser.MONTHNAME - 938)) | (1 << (MariaDBParser.MPOINTFROMTEXT - 938)) | (1 << (MariaDBParser.MPOINTFROMWKB - 938)) | (1 << (MariaDBParser.MPOLYFROMTEXT - 938)) | (1 << (MariaDBParser.MPOLYFROMWKB - 938)) | (1 << (MariaDBParser.MULTILINESTRINGFROMTEXT - 938)) | (1 << (MariaDBParser.MULTILINESTRINGFROMWKB - 938)))) !== 0) || ((((_la - 970)) & ~0x1F) === 0 && ((1 << (_la - 970)) & ((1 << (MariaDBParser.MULTIPOINTFROMTEXT - 970)) | (1 << (MariaDBParser.MULTIPOINTFROMWKB - 970)) | (1 << (MariaDBParser.MULTIPOLYGONFROMTEXT - 970)) | (1 << (MariaDBParser.MULTIPOLYGONFROMWKB - 970)) | (1 << (MariaDBParser.NAME_CONST - 970)) | (1 << (MariaDBParser.NULLIF - 970)) | (1 << (MariaDBParser.NUMGEOMETRIES - 970)) | (1 << (MariaDBParser.NUMINTERIORRINGS - 970)) | (1 << (MariaDBParser.NUMPOINTS - 970)) | (1 << (MariaDBParser.OCT - 970)) | (1 << (MariaDBParser.OCTET_LENGTH - 970)) | (1 << (MariaDBParser.ORD - 970)) | (1 << (MariaDBParser.OVERLAPS - 970)) | (1 << (MariaDBParser.PERIOD_ADD - 970)) | (1 << (MariaDBParser.PERIOD_DIFF - 970)) | (1 << (MariaDBParser.PI - 970)) | (1 << (MariaDBParser.POINTFROMTEXT - 970)) | (1 << (MariaDBParser.POINTFROMWKB - 970)) | (1 << (MariaDBParser.POINTN - 970)) | (1 << (MariaDBParser.POLYFROMTEXT - 970)) | (1 << (MariaDBParser.POLYFROMWKB - 970)) | (1 << (MariaDBParser.POLYGONFROMTEXT - 970)) | (1 << (MariaDBParser.POLYGONFROMWKB - 970)) | (1 << (MariaDBParser.POW - 970)) | (1 << (MariaDBParser.POWER - 970)) | (1 << (MariaDBParser.QUOTE - 970)) | (1 << (MariaDBParser.RADIANS - 970)) | (1 << (MariaDBParser.RAND - 970)) | (1 << (MariaDBParser.RANDOM_BYTES - 970)) | (1 << (MariaDBParser.RELEASE_LOCK - 970)) | (1 << (MariaDBParser.REVERSE - 970)) | (1 << (MariaDBParser.ROUND - 970)))) !== 0) || ((((_la - 1002)) & ~0x1F) === 0 && ((1 << (_la - 1002)) & ((1 << (MariaDBParser.ROW_COUNT - 1002)) | (1 << (MariaDBParser.RPAD - 1002)) | (1 << (MariaDBParser.RTRIM - 1002)) | (1 << (MariaDBParser.SEC_TO_TIME - 1002)) | (1 << (MariaDBParser.SESSION_USER - 1002)) | (1 << (MariaDBParser.SHA - 1002)) | (1 << (MariaDBParser.SHA1 - 1002)) | (1 << (MariaDBParser.SHA2 - 1002)) | (1 << (MariaDBParser.SIGN - 1002)) | (1 << (MariaDBParser.SIN - 1002)) | (1 << (MariaDBParser.SLEEP - 1002)) | (1 << (MariaDBParser.SOUNDEX - 1002)) | (1 << (MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS - 1002)) | (1 << (MariaDBParser.SQRT - 1002)) | (1 << (MariaDBParser.SRID - 1002)) | (1 << (MariaDBParser.STARTPOINT - 1002)) | (1 << (MariaDBParser.STRCMP - 1002)) | (1 << (MariaDBParser.STR_TO_DATE - 1002)) | (1 << (MariaDBParser.ST_AREA - 1002)) | (1 << (MariaDBParser.ST_ASBINARY - 1002)) | (1 << (MariaDBParser.ST_ASTEXT - 1002)) | (1 << (MariaDBParser.ST_ASWKB - 1002)) | (1 << (MariaDBParser.ST_ASWKT - 1002)) | (1 << (MariaDBParser.ST_BUFFER - 1002)) | (1 << (MariaDBParser.ST_CENTROID - 1002)) | (1 << (MariaDBParser.ST_CONTAINS - 1002)) | (1 << (MariaDBParser.ST_CROSSES - 1002)) | (1 << (MariaDBParser.ST_DIFFERENCE - 1002)) | (1 << (MariaDBParser.ST_DIMENSION - 1002)) | (1 << (MariaDBParser.ST_DISJOINT - 1002)))) !== 0) || ((((_la - 1034)) & ~0x1F) === 0 && ((1 << (_la - 1034)) & ((1 << (MariaDBParser.ST_DISTANCE - 1034)) | (1 << (MariaDBParser.ST_ENDPOINT - 1034)) | (1 << (MariaDBParser.ST_ENVELOPE - 1034)) | (1 << (MariaDBParser.ST_EQUALS - 1034)) | (1 << (MariaDBParser.ST_EXTERIORRING - 1034)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTEXT - 1034)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMTXT - 1034)) | (1 << (MariaDBParser.ST_GEOMCOLLFROMWKB - 1034)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 1034)) | (1 << (MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB - 1034)) | (1 << (MariaDBParser.ST_GEOMETRYFROMTEXT - 1034)) | (1 << (MariaDBParser.ST_GEOMETRYFROMWKB - 1034)) | (1 << (MariaDBParser.ST_GEOMETRYN - 1034)) | (1 << (MariaDBParser.ST_GEOMETRYTYPE - 1034)) | (1 << (MariaDBParser.ST_GEOMFROMTEXT - 1034)) | (1 << (MariaDBParser.ST_GEOMFROMWKB - 1034)) | (1 << (MariaDBParser.ST_INTERIORRINGN - 1034)) | (1 << (MariaDBParser.ST_INTERSECTION - 1034)) | (1 << (MariaDBParser.ST_INTERSECTS - 1034)) | (1 << (MariaDBParser.ST_ISCLOSED - 1034)) | (1 << (MariaDBParser.ST_ISEMPTY - 1034)) | (1 << (MariaDBParser.ST_ISSIMPLE - 1034)) | (1 << (MariaDBParser.ST_LINEFROMTEXT - 1034)) | (1 << (MariaDBParser.ST_LINEFROMWKB - 1034)) | (1 << (MariaDBParser.ST_LINESTRINGFROMTEXT - 1034)) | (1 << (MariaDBParser.ST_LINESTRINGFROMWKB - 1034)) | (1 << (MariaDBParser.ST_NUMGEOMETRIES - 1034)) | (1 << (MariaDBParser.ST_NUMINTERIORRING - 1034)) | (1 << (MariaDBParser.ST_NUMINTERIORRINGS - 1034)) | (1 << (MariaDBParser.ST_NUMPOINTS - 1034)) | (1 << (MariaDBParser.ST_OVERLAPS - 1034)) | (1 << (MariaDBParser.ST_POINTFROMTEXT - 1034)))) !== 0) || ((((_la - 1066)) & ~0x1F) === 0 && ((1 << (_la - 1066)) & ((1 << (MariaDBParser.ST_POINTFROMWKB - 1066)) | (1 << (MariaDBParser.ST_POINTN - 1066)) | (1 << (MariaDBParser.ST_POLYFROMTEXT - 1066)) | (1 << (MariaDBParser.ST_POLYFROMWKB - 1066)) | (1 << (MariaDBParser.ST_POLYGONFROMTEXT - 1066)) | (1 << (MariaDBParser.ST_POLYGONFROMWKB - 1066)) | (1 << (MariaDBParser.ST_SRID - 1066)) | (1 << (MariaDBParser.ST_STARTPOINT - 1066)) | (1 << (MariaDBParser.ST_SYMDIFFERENCE - 1066)) | (1 << (MariaDBParser.ST_TOUCHES - 1066)) | (1 << (MariaDBParser.ST_UNION - 1066)) | (1 << (MariaDBParser.ST_WITHIN - 1066)) | (1 << (MariaDBParser.ST_X - 1066)) | (1 << (MariaDBParser.ST_Y - 1066)) | (1 << (MariaDBParser.SUBDATE - 1066)) | (1 << (MariaDBParser.SUBSTRING_INDEX - 1066)) | (1 << (MariaDBParser.SUBTIME - 1066)) | (1 << (MariaDBParser.SYSTEM_USER - 1066)) | (1 << (MariaDBParser.TAN - 1066)) | (1 << (MariaDBParser.TIMEDIFF - 1066)) | (1 << (MariaDBParser.TIMESTAMPADD - 1066)) | (1 << (MariaDBParser.TIMESTAMPDIFF - 1066)) | (1 << (MariaDBParser.TIME_FORMAT - 1066)) | (1 << (MariaDBParser.TIME_TO_SEC - 1066)) | (1 << (MariaDBParser.TOUCHES - 1066)) | (1 << (MariaDBParser.TO_BASE64 - 1066)) | (1 << (MariaDBParser.TO_DAYS - 1066)) | (1 << (MariaDBParser.TO_SECONDS - 1066)) | (1 << (MariaDBParser.UCASE - 1066)) | (1 << (MariaDBParser.UNCOMPRESS - 1066)) | (1 << (MariaDBParser.UNCOMPRESSED_LENGTH - 1066)) | (1 << (MariaDBParser.UNHEX - 1066)))) !== 0) || ((((_la - 1098)) & ~0x1F) === 0 && ((1 << (_la - 1098)) & ((1 << (MariaDBParser.UNIX_TIMESTAMP - 1098)) | (1 << (MariaDBParser.UPDATEXML - 1098)) | (1 << (MariaDBParser.UPPER - 1098)) | (1 << (MariaDBParser.UUID - 1098)) | (1 << (MariaDBParser.UUID_SHORT - 1098)) | (1 << (MariaDBParser.VALIDATE_PASSWORD_STRENGTH - 1098)) | (1 << (MariaDBParser.VERSION - 1098)) | (1 << (MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1098)) | (1 << (MariaDBParser.WEEKDAY - 1098)) | (1 << (MariaDBParser.WEEKOFYEAR - 1098)) | (1 << (MariaDBParser.WEIGHT_STRING - 1098)) | (1 << (MariaDBParser.WITHIN - 1098)) | (1 << (MariaDBParser.YEARWEEK - 1098)) | (1 << (MariaDBParser.Y_FUNCTION - 1098)) | (1 << (MariaDBParser.X_FUNCTION - 1098)) | (1 << (MariaDBParser.LASTVAL - 1098)) | (1 << (MariaDBParser.NEXTVAL - 1098)) | (1 << (MariaDBParser.SETVAL - 1098)))) !== 0) || _la === MariaDBParser.MOD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 346:
			return this.expression_sempred(_localctx as ExpressionContext, predIndex);

		case 347:
			return this.predicate_sempred(_localctx as PredicateContext, predIndex);

		case 348:
			return this.expressionAtom_sempred(_localctx as ExpressionAtomContext, predIndex);
		}
		return true;
	}
	private expression_sempred(_localctx: ExpressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.precpred(this._ctx, 3);
		}
		return true;
	}
	private predicate_sempred(_localctx: PredicateContext, predIndex: number): boolean {
		switch (predIndex) {
		case 1:
			return this.precpred(this._ctx, 8);

		case 2:
			return this.precpred(this._ctx, 6);

		case 3:
			return this.precpred(this._ctx, 5);

		case 4:
			return this.precpred(this._ctx, 3);

		case 5:
			return this.precpred(this._ctx, 10);

		case 6:
			return this.precpred(this._ctx, 9);

		case 7:
			return this.precpred(this._ctx, 7);

		case 8:
			return this.precpred(this._ctx, 4);

		case 9:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private expressionAtom_sempred(_localctx: ExpressionAtomContext, predIndex: number): boolean {
		switch (predIndex) {
		case 10:
			return this.precpred(this._ctx, 3);

		case 11:
			return this.precpred(this._ctx, 2);

		case 12:
			return this.precpred(this._ctx, 1);

		case 13:
			return this.precpred(this._ctx, 12);
		}
		return true;
	}

	private static readonly _serializedATNSegments: number = 15;
	private static readonly _serializedATNSegment0: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\u04A3\u1DAC\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
		"+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
		"=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
		"F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
		"O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
		"X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
		"`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
		"i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
		"r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
		"{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
		"\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
		"\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
		"\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
		"\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
		"\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A" +
		"\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F\t\x9F" +
		"\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4" +
		"\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9\t\xA9" +
		"\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE" +
		"\x04\xAF\t\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3\t\xB3" +
		"\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04\xB7\t\xB7\x04\xB8\t\xB8" +
		"\x04\xB9\t\xB9\x04\xBA\t\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t\xBD" +
		"\x04\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04\xC1\t\xC1\x04\xC2\t\xC2" +
		"\x04\xC3\t\xC3\x04\xC4\t\xC4\x04\xC5\t\xC5\x04\xC6\t\xC6\x04\xC7\t\xC7" +
		"\x04\xC8\t\xC8\x04\xC9\t\xC9\x04\xCA\t\xCA\x04\xCB\t\xCB\x04\xCC\t\xCC" +
		"\x04\xCD\t\xCD\x04\xCE\t\xCE\x04\xCF\t\xCF\x04\xD0\t\xD0\x04\xD1\t\xD1" +
		"\x04\xD2\t\xD2\x04\xD3\t\xD3\x04\xD4\t\xD4\x04\xD5\t\xD5\x04\xD6\t\xD6" +
		"\x04\xD7\t\xD7\x04\xD8\t\xD8\x04\xD9\t\xD9\x04\xDA\t\xDA\x04\xDB\t\xDB" +
		"\x04\xDC\t\xDC\x04\xDD\t\xDD\x04\xDE\t\xDE\x04\xDF\t\xDF\x04\xE0\t\xE0" +
		"\x04\xE1\t\xE1\x04\xE2\t\xE2\x04\xE3\t\xE3\x04\xE4\t\xE4\x04\xE5\t\xE5" +
		"\x04\xE6\t\xE6\x04\xE7\t\xE7\x04\xE8\t\xE8\x04\xE9\t\xE9\x04\xEA\t\xEA" +
		"\x04\xEB\t\xEB\x04\xEC\t\xEC\x04\xED\t\xED\x04\xEE\t\xEE\x04\xEF\t\xEF" +
		"\x04\xF0\t\xF0\x04\xF1\t\xF1\x04\xF2\t\xF2\x04\xF3\t\xF3\x04\xF4\t\xF4" +
		"\x04\xF5\t\xF5\x04\xF6\t\xF6\x04\xF7\t\xF7\x04\xF8\t\xF8\x04\xF9\t\xF9" +
		"\x04\xFA\t\xFA\x04\xFB\t\xFB\x04\xFC\t\xFC\x04\xFD\t\xFD\x04\xFE\t\xFE" +
		"\x04\xFF\t\xFF\x04\u0100\t\u0100\x04\u0101\t\u0101\x04\u0102\t\u0102\x04" +
		"\u0103\t\u0103\x04\u0104\t\u0104\x04\u0105\t\u0105\x04\u0106\t\u0106\x04" +
		"\u0107\t\u0107\x04\u0108\t\u0108\x04\u0109\t\u0109\x04\u010A\t\u010A\x04" +
		"\u010B\t\u010B\x04\u010C\t\u010C\x04\u010D\t\u010D\x04\u010E\t\u010E\x04" +
		"\u010F\t\u010F\x04\u0110\t\u0110\x04\u0111\t\u0111\x04\u0112\t\u0112\x04" +
		"\u0113\t\u0113\x04\u0114\t\u0114\x04\u0115\t\u0115\x04\u0116\t\u0116\x04" +
		"\u0117\t\u0117\x04\u0118\t\u0118\x04\u0119\t\u0119\x04\u011A\t\u011A\x04" +
		"\u011B\t\u011B\x04\u011C\t\u011C\x04\u011D\t\u011D\x04\u011E\t\u011E\x04" +
		"\u011F\t\u011F\x04\u0120\t\u0120\x04\u0121\t\u0121\x04\u0122\t\u0122\x04" +
		"\u0123\t\u0123\x04\u0124\t\u0124\x04\u0125\t\u0125\x04\u0126\t\u0126\x04" +
		"\u0127\t\u0127\x04\u0128\t\u0128\x04\u0129\t\u0129\x04\u012A\t\u012A\x04" +
		"\u012B\t\u012B\x04\u012C\t\u012C\x04\u012D\t\u012D\x04\u012E\t\u012E\x04" +
		"\u012F\t\u012F\x04\u0130\t\u0130\x04\u0131\t\u0131\x04\u0132\t\u0132\x04" +
		"\u0133\t\u0133\x04\u0134\t\u0134\x04\u0135\t\u0135\x04\u0136\t\u0136\x04" +
		"\u0137\t\u0137\x04\u0138\t\u0138\x04\u0139\t\u0139\x04\u013A\t\u013A\x04" +
		"\u013B\t\u013B\x04\u013C\t\u013C\x04\u013D\t\u013D\x04\u013E\t\u013E\x04" +
		"\u013F\t\u013F\x04\u0140\t\u0140\x04\u0141\t\u0141\x04\u0142\t\u0142\x04" +
		"\u0143\t\u0143\x04\u0144\t\u0144\x04\u0145\t\u0145\x04\u0146\t\u0146\x04" +
		"\u0147\t\u0147\x04\u0148\t\u0148\x04\u0149\t\u0149\x04\u014A\t\u014A\x04" +
		"\u014B\t\u014B\x04\u014C\t\u014C\x04\u014D\t\u014D\x04\u014E\t\u014E\x04" +
		"\u014F\t\u014F\x04\u0150\t\u0150\x04\u0151\t\u0151\x04\u0152\t\u0152\x04" +
		"\u0153\t\u0153\x04\u0154\t\u0154\x04\u0155\t\u0155\x04\u0156\t\u0156\x04" +
		"\u0157\t\u0157\x04\u0158\t\u0158\x04\u0159\t\u0159\x04\u015A\t\u015A\x04" +
		"\u015B\t\u015B\x04\u015C\t\u015C\x04\u015D\t\u015D\x04\u015E\t\u015E\x04" +
		"\u015F\t\u015F\x04\u0160\t\u0160\x04\u0161\t\u0161\x04\u0162\t\u0162\x04" +
		"\u0163\t\u0163\x04\u0164\t\u0164\x04\u0165\t\u0165\x04\u0166\t\u0166\x04" +
		"\u0167\t\u0167\x04\u0168\t\u0168\x04\u0169\t\u0169\x04\u016A\t\u016A\x04" +
		"\u016B\t\u016B\x03\x02\x05\x02\u02D8\n\x02\x03\x02\x03\x02\x05\x02\u02DC" +
		"\n\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x05\x03\u02E3\n\x03\x03" +
		"\x03\x05\x03\u02E6\n\x03\x03\x03\x07\x03\u02E9\n\x03\f\x03\x0E\x03\u02EC" +
		"\v\x03\x03\x03\x03\x03\x03\x03\x05\x03\u02F1\n\x03\x03\x03\x05\x03\u02F4" +
		"\n\x03\x03\x03\x05\x03\u02F7\n\x03\x03\x04\x05\x04\u02FA\n\x04\x03\x04" +
		"\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04\u0303\n\x04\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x07" +
		"\x05\u030E\n\x05\f\x05\x0E\x05\u0311\v\x05\x03\x05\x03\x05\x03\x06\x03" +
		"\x06\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x05\x07\u0340\n\x07\x03\b" +
		"\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x05\b\u034D" +
		"\n\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x05\t\u0358" +
		"\n\t\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n" +
		"\x03\n\x03\n\x03\n\x03\n\x05\n\u0369\n\n\x03\v\x03\v\x03\v\x05\v\u036E" +
		"\n\v\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x05\f" +
		"\u037A\n\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r" +
		"\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03" +
		"\r\x03\r\x03\r\x03\r\x03\r\x05\r\u0396\n\r\x03\x0E\x03\x0E\x03\x0E\x03" +
		"\x0E\x03\x0E\x03\x0E\x03\x0E\x05\x0E\u039F\n\x0E\x03\x0F\x03\x0F\x03\x0F" +
		"\x05\x0F\u03A4\n\x0F\x03\x0F\x03\x0F\x07\x0F\u03A8\n\x0F\f\x0F\x0E\x0F" +
		"\u03AB\v\x0F\x03\x10\x03\x10\x05\x10\u03AF\n\x10\x03\x10\x03\x10\x05\x10" +
		"\u03B3\n\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x05" +
		"\x10\u03BC\n\x10\x03\x10\x05\x10\u03BF\n\x10\x03\x10\x05\x10\u03C2\n\x10" +
		"\x03\x10\x03\x10\x05\x10\u03C6\n\x10\x03\x10\x03\x10\x03\x10\x03\x11\x03" +
		"\x11\x05\x11\u03CD\n\x11\x03\x11\x05\x11\u03D0\n\x11\x03\x11\x05\x11\u03D3" +
		"\n\x11\x03\x11\x03\x11\x05\x11\u03D7\n\x11\x03\x11\x03\x11\x05\x11\u03DB" +
		"\n\x11\x03\x11\x03\x11\x03\x11\x03\x11\x05\x11\u03E1\n\x11\x03\x11\x07" +
		"\x11\u03E4\n\x11\f\x11\x0E\x11\u03E7\v\x11\x03\x11\x03\x11\x05\x11\u03EB" +
		"\n\x11\x03\x11\x03\x11\x03\x11\x05\x11\u03F0\n\x11\x03\x11\x07\x11\u03F3" +
		"\n\x11\f\x11\x0E\x11\u03F6\v\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12" +
		"\x03\x12\x03\x12\x03\x12\x03\x12\x05\x12\u0401\n\x12\x03\x12\x05\x12\u0404" +
		"\n\x12\x03\x12\x03\x12\x05\x12\u0408\n\x12\x03\x12\x05\x12\u040B\n\x12" +
		"\x03\x12\x03\x12\x05\x12\u040F\n\x12\x03\x12\x05\x12\u0412\n\x12\x03\x12" +
		"\x03\x12\x05\x12\u0416\n\x12\x03\x12\x05\x12\u0419\n\x12\x03\x12\x05\x12" +
		"\u041C\n\x12\x03\x12\x03\x12\x05\x12\u0420\n\x12\x03\x12\x05\x12\u0423" +
		"\n\x12\x03\x12\x03\x12\x05\x12\u0427\n\x12\x03\x12\x03\x12\x03\x13\x03" +
		"\x13\x05\x13\u042D\n\x13\x03\x13\x05\x13\u0430\n\x13\x03\x13\x03\x13\x03" +
		"\x13\x03\x13\x05\x13\u0436\n\x13\x03\x13\x03\x13\x07\x13\u043A\n\x13\f" +
		"\x13\x0E\x13\u043D\v\x13\x03\x13\x03\x13\x07\x13\u0441\n\x13\f\x13\x0E" +
		"\x13\u0444\v\x13\x03\x13\x03\x13\x03\x14\x03\x14\x05\x14\u044A\n\x14\x03" +
		"\x14\x05\x14\u044D\n\x14\x03\x14\x05\x14\u0450\n\x14\x03\x14\x03\x14\x05" +
		"\x14\u0454\n\x14\x03\x14\x03\x14\x03\x14\x05\x14\u0459\n\x14\x03\x14\x03" +
		"\x14\x07\x14\u045D\n\x14\f\x14\x0E\x14\u0460\v\x14\x03\x14\x03\x14\x03" +
		"\x14\x03\x14\x07\x14\u0466\n\x14\f\x14\x0E\x14\u0469\v\x14\x03\x14\x03" +
		"\x14\x05\x14\u046D\n\x14\x03\x15\x03\x15\x03\x15\x05\x15\u0472\n\x15\x03" +
		"\x15\x03\x15\x03\x15\x07\x15\u0477\n\x15\f\x15\x0E\x15\u047A\v\x15\x03" +
		"\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03" +
		"\x16\x03\x16\x03\x16\x07\x16\u0488\n\x16\f\x16\x0E\x16\u048B\v\x16\x03" +
		"\x16\x03\x16\x03\x17\x03\x17\x05\x17\u0491\n\x17\x03\x17\x05\x17\u0494" +
		"\n\x17\x03\x17\x03\x17\x05\x17\u0498\n\x17\x03\x17\x03\x17\x03\x17\x03" +
		"\x17\x03\x17\x03\x17\x03\x17\x03\x17\x05\x17\u04A2\n\x17\x03\x17\x03\x17" +
		"\x05\x17\u04A6\n\x17\x03\x17\x05\x17\u04A9\n\x17\x03\x17\x03\x17\x05\x17" +
		"\u04AD\n\x17\x03\x17\x03\x17\x05\x17\u04B1\n\x17\x03\x17\x03\x17\x05\x17" +
		"\u04B5\n\x17\x03\x17\x07\x17\u04B8\n\x17\f\x17\x0E\x17\u04BB\v\x17\x05" +
		"\x17\u04BD\n\x17\x03\x17\x05\x17\u04C0\n\x17\x03\x17\x05\x17\u04C3\n\x17" +
		"\x03\x17\x05\x17\u04C6\n\x17\x03\x17\x03\x17\x03\x17\x03\x17\x05\x17\u04CC" +
		"\n\x17\x03\x17\x05\x17\u04CF\n\x17\x03\x17\x03\x17\x05\x17\u04D3\n\x17" +
		"\x03\x17\x03\x17\x03\x17\x03\x17\x05\x17\u04D9\n\x17\x03\x17\x07\x17\u04DC" +
		"\n\x17\f\x17\x0E\x17\u04DF\v\x17\x05\x17\u04E1\n\x17\x03\x17\x05\x17\u04E4" +
		"\n\x17\x05\x17\u04E6\n\x17\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03" +
		"\x18\x03\x18\x03\x18\x03\x18\x05\x18\u04F1\n\x18\x03\x18\x03\x18\x05\x18" +
		"\u04F5\n\x18\x03\x18\x05\x18\u04F8\n\x18\x03\x19\x03\x19\x03\x19\x03\x19" +
		"\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x05\x19" +
		"\u0506\n\x19\x03\x19\x05\x19\u0509\n\x19\x03\x19\x03\x19\x05\x19\u050D" +
		"\n\x19\x03\x19\x05\x19\u0510\n\x19\x03\x19\x03\x19\x05\x19\u0514\n\x19" +
		"\x03\x19\x05\x19\u0517\n\x19\x03\x19\x03\x19\x05\x19\u051B\n\x19\x03\x19" +
		"\x05\x19\u051E\n\x19\x03\x19\x03\x19\x05\x19\u0522\n\x19\x03\x19\x05\x19" +
		"\u0525\n\x19\x03\x19\x05\x19\u0528\n\x19\x03\x19\x03\x19\x05\x19\u052C" +
		"\n\x19\x03\x19\x05\x19\u052F\n\x19\x03\x19\x03\x19\x05\x19\u0533\n\x19" +
		"\x03\x19\x03\x19\x03\x1A\x03\x1A\x05\x1A\u0539\n\x1A\x03\x1A\x05\x1A\u053C" +
		"\n\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A" +
		"\x03\x1A\x03\x1A\x03\x1A\x05\x1A\u0549\n\x1A\x03\x1A\x03\x1A\x03\x1B\x03" +
		"\x1B\x05\x1B\u054F\n\x1B\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1C\x03\x1C" +
		"\x03\x1C\x07\x1C\u0558\n\x1C\f\x1C\x0E\x1C\u055B\v\x1C\x03\x1C\x03\x1C" +
		"\x05\x1C\u055F\n\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x05" +
		"\x1C\u0567\n\x1C\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x05\x1F" +
		"\u056F\n\x1F\x03\x1F\x03\x1F\x03\x1F\x05\x1F\u0574\n\x1F\x03\x1F\x05\x1F" +
		"\u0577\n\x1F\x03\x1F\x03\x1F\x03\x1F\x05\x1F\u057C\n\x1F\x03\x1F\x03\x1F" +
		"\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x05\x1F\u0584\n\x1F\x03\x1F\x03\x1F\x03" +
		"\x1F\x05\x1F\u0589\n\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x05\x1F\u058F" +
		"\n\x1F\x03\x1F\x03\x1F\x03\x1F\x05\x1F\u0594\n\x1F\x03\x1F\x03\x1F\x05" +
		"\x1F\u0598\n\x1F\x05\x1F\u059A\n\x1F\x03 \x03 \x05 \u059E\n \x03 \x05" +
		" \u05A1\n \x03 \x03 \x05 \u05A5\n \x03 \x03 \x03 \x07 \u05AA\n \f \x0E" +
		" \u05AD\v \x03!\x03!\x05!\u05B1\n!\x03!\x03!\x03!\x05!\u05B6\n!\x03!\x03" +
		"!\x03!\x03!\x03!\x03!\x05!\u05BE\n!\x03!\x03!\x03!\x03!\x03!\x03!\x05" +
		"!\u05C6\n!\x03!\x03!\x03!\x05!\u05CB\n!\x03!\x03!\x03!\x03!\x03!\x03!" +
		"\x05!\u05D3\n!\x03!\x05!\u05D6\n!\x03\"\x05\"\u05D9\n\"\x03\"\x03\"\x05" +
		"\"\u05DD\n\"\x03\"\x03\"\x05\"\u05E1\n\"\x03\"\x05\"\u05E4\n\"\x03\"\x03" +
		"\"\x05\"\u05E8\n\"\x03\"\x03\"\x05\"\u05EC\n\"\x03\"\x03\"\x05\"\u05F0" +
		"\n\"\x03\"\x03\"\x03\"\x03\"\x05\"\u05F6\n\"\x03\"\x05\"\u05F9\n\"\x03" +
		"#\x03#\x03#\x03#\x03#\x05#\u0600\n#\x03$\x03$\x03$\x05$\u0605\n$\x03%" +
		"\x03%\x03%\x03%\x03%\x05%\u060C\n%\x03&\x03&\x03&\x07&\u0611\n&\f&\x0E" +
		"&\u0614\v&\x03&\x03&\x03&\x05&\u0619\n&\x03&\x03&\x03&\x03&\x07&\u061F" +
		"\n&\f&\x0E&\u0622\v&\x05&\u0624\n&\x03&\x03&\x03&\x07&\u0629\n&\f&\x0E" +
		"&\u062C\v&\x05&\u062E\n&\x05&\u0630\n&\x03\'\x03\'\x03\'\x03\'\x05\'\u0636" +
		"\n\'\x03(\x03(\x03(\x03(\x05(\u063C\n(\x03(\x03(\x03)\x03)\x03)\x03)\x03" +
		")\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x05)\u064D\n)\x03*\x03*\x03" +
		"*\x03*\x03*\x05*\u0654\n*\x03+\x03+\x03+\x03,\x03,\x05,\u065B\n,\x03," +
		"\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x05,\u0667\n,\x03,\x03," +
		"\x03,\x05,\u066C\n,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x05,\u0675\n,\x05" +
		",\u0677\n,\x03-\x05-\u067A\n-\x03-\x03-\x03-\x03.\x03.\x03.\x03/\x03/" +
		"\x03/\x03/\x03/\x05/\u0687\n/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/" +
		"\x03/\x03/\x03/\x05/\u0694\n/\x03/\x03/\x03/\x05/\u0699\n/\x030\x030\x03" +
		"0\x030\x030\x030\x030\x030\x030\x030\x030\x030\x030\x030\x050\u06A9\n" +
		"0\x031\x031\x031\x031\x071\u06AF\n1\f1\x0E1\u06B2\v1\x031\x031\x032\x03" +
		"2\x032\x032\x032\x052\u06BB\n2\x033\x033\x073\u06BF\n3\f3\x0E3\u06C2\v" +
		"3\x034\x034\x034\x034\x034\x034\x034\x034\x034\x054\u06CD\n4\x034\x05" +
		"4\u06D0\n4\x034\x034\x034\x054\u06D5\n4\x034\x034\x034\x034\x034\x034" +
		"\x034\x034\x034\x034\x034\x054\u06E2\n4\x034\x034\x034\x034\x034\x054" +
		"\u06E9\n4\x034\x034\x034\x034\x034\x054\u06F0\n4\x054\u06F2\n4\x034\x03" +
		"4\x034\x034\x034\x054\u06F9\n4\x035\x035\x055\u06FD\n5\x055\u06FF\n5\x03" +
		"5\x035\x035\x055\u0704\n5\x035\x055\u0707\n5\x035\x035\x075\u070B\n5\f" +
		"5\x0E5\u070E\v5\x035\x035\x055\u0712\n5\x055\u0714\n5\x035\x035\x055\u0718" +
		"\n5\x035\x055\u071B\n5\x035\x055\u071E\n5\x035\x035\x075\u0722\n5\f5\x0E" +
		"5\u0725\v5\x035\x035\x055\u0729\n5\x055\u072B\n5\x035\x035\x035\x055\u0730" +
		"\n5\x035\x035\x035\x035\x035\x055\u0737\n5\x055\u0739\n5\x035\x035\x03" +
		"5\x035\x035\x055\u0740\n5\x036\x036\x036\x056\u0745\n6\x036\x036\x056" +
		"\u0749\n6\x036\x056\u074C\n6\x037\x037\x037\x037\x037\x037\x057\u0754" +
		"\n7\x037\x037\x037\x037\x037\x037\x057\u075C\n7\x057\u075E\n7\x038\x03" +
		"8\x038\x038\x038\x038\x058\u0766\n8\x039\x039\x059\u076A\n9\x039\x059" +
		"\u076D\n9\x039\x039\x079\u0771\n9\f9\x0E9\u0774\v9\x039\x039\x059\u0778" +
		"\n9\x039\x059\u077B\n9\x039\x039\x079\u077F\n9\f9\x0E9\u0782\v9\x059\u0784" +
		"\n9\x03:\x03:\x05:\u0788\n:\x03:\x05:\u078B\n:\x03:\x03:\x05:\u078F\n" +
		":\x03:\x03:\x03:\x05:\u0794\n:\x03:\x03:\x03:\x05:\u0799\n:\x03:\x03:" +
		"\x03:\x05:\u079E\n:\x03:\x03:\x05:\u07A2\n:\x03:\x03:\x05:\u07A6\n:\x03" +
		":\x03:\x05:\u07AA\n:\x03:\x03:\x05:\u07AE\n:\x03:\x03:\x05:\u07B2\n:\x03" +
		":\x03:\x05:\u07B6\n:\x03:\x03:\x03:\x05:\u07BB\n:\x03:\x03:\x03:\x05:" +
		"\u07C0\n:\x03:\x03:\x03:\x05:\u07C5\n:\x03:\x03:\x03:\x03:\x05:\u07CB" +
		"\n:\x03:\x03:\x03:\x05:\u07D0\n:\x03:\x03:\x03:\x05:\u07D5\n:\x03:\x03" +
		":\x03:\x05:\u07DA\n:\x03:\x03:\x03:\x03:\x05:\u07E0\n:\x03:\x03:\x03:" +
		"\x05:\u07E5\n:\x03:\x03:\x03:\x05:\u07EA\n:\x03:\x03:\x03:\x03:\x05:\u07F0" +
		"\n:\x03:\x03:\x03:\x05:\u07F5\n:\x03:\x03:\x03:\x05:\u07FA\n:\x03:\x03" +
		":\x03:\x05:\u07FF\n:\x03:\x03:\x03:\x05:\u0804\n:\x03:\x03:\x03:\x05:" +
		"\u0809\n:\x03:\x03:\x03:\x05:\u080E\n:\x03:\x03:\x03:\x05:\u0813\n:\x03" +
		":\x03:\x03:\x03:\x03:\x05:\u081A\n:\x03:\x03:\x03:\x05:\u081F\n:\x03:" +
		"\x03:\x03:\x05:\u0824\n:\x03:\x03:\x03:\x05:\u0829\n:\x03:\x03:\x05:\u082D" +
		"\n:\x03:\x03:\x03:\x05:\u0832\n:\x03:\x03:\x03:\x03:\x03:\x03:\x05:\u083A" +
		"\n:\x03:\x03:\x03:\x05:\u083F\n:\x03:\x03:\x03:\x03:\x05:\u0845\n:\x03" +
		";\x03;\x03<\x03<\x03<\x03=\x03=\x03=\x03=\x03=\x05=\u0851\n=\x03=\x03" +
		"=\x03=\x03=\x03=\x05=\u0858\n=\x05=\u085A\n=\x03=\x03=\x03=\x03=\x07=" +
		"\u0860\n=\f=\x0E=\u0863\v=\x03=\x03=\x05=\u0867\n=\x03>\x05>\u086A\n>" +
		"\x03>\x03>\x03>\x03>\x03>\x03>\x05>\u0872\n>\x03>\x03>\x03>\x03>\x05>" +
		"\u0878\n>\x03>\x03>\x03>\x03>\x03>\x03>\x03>\x03>\x03>\x03>\x03>\x03>" +
		"\x03>\x03>\x05>\u0888\n>\x03>\x03>\x03>\x03>\x03>\x03>\x03>\x03>\x03>" +
		"\x03>\x05>\u0894\n>\x05>\u0896\n>\x03?\x05?\u0899\n?\x03?\x03?\x03?\x03" +
		"?\x03?\x03?\x05?\u08A1\n?\x03?\x03?\x03?\x03?\x05?\u08A7\n?\x03?\x03?" +
		"\x03?\x03?\x05?\u08AD\n?\x03@\x03@\x03@\x03@\x03@\x03@\x03@\x03@\x03@" +
		"\x07@\u08B8\n@\f@\x0E@\u08BB\v@\x03@\x03@\x07@\u08BF\n@\f@\x0E@\u08C2" +
		"\v@\x03@\x03@\x03@\x03@\x07@\u08C8\n@\f@\x0E@\u08CB\v@\x03@\x03@\x05@" +
		"\u08CF\n@\x03@\x03@\x03@\x03@\x03@\x03@\x03@\x07@\u08D8\n@\f@\x0E@\u08DB" +
		"\v@\x03@\x03@\x03@\x03@\x07@\u08E1\n@\f@\x0E@\u08E4\v@\x03@\x03@\x05@" +
		"\u08E8\n@\x03@\x03@\x03@\x03@\x03@\x03@\x03@\x03@\x07@\u08F2\n@\f@\x0E" +
		"@\u08F5\v@\x03@\x03@\x07@\u08F9\n@\f@\x0E@\u08FC\v@\x03@\x03@\x03@\x03" +
		"@\x07@\u0902\n@\f@\x0E@\u0905\v@\x03@\x03@\x05@\u0909\n@\x03@\x03@\x03" +
		"@\x03@\x03@\x03@\x03@\x03@\x07@\u0913\n@\f@\x0E@\u0916\v@\x03@\x03@\x07" +
		"@\u091A\n@\f@\x0E@\u091D\v@\x03@\x03@\x03@\x03@\x07@\u0923\n@\f@";
	private static readonly _serializedATNSegment1: string =
		"\x0E@\u0926\v@\x03@\x03@\x05@\u092A\n@\x03@\x03@\x03@\x07@\u092F\n@\f" +
		"@\x0E@\u0932\v@\x03@\x03@\x03@\x03@\x07@\u0938\n@\f@\x0E@\u093B\v@\x03" +
		"@\x03@\x05@\u093F\n@\x05@\u0941\n@\x03A\x03A\x03A\x05A\u0946\nA\x03B\x03" +
		"B\x03B\x03B\x06B\u094C\nB\rB\x0EB\u094D\x03B\x03B\x03C\x03C\x03C\x07C" +
		"\u0955\nC\fC\x0EC\u0958\vC\x03D\x05D\u095B\nD\x03D\x05D\u095E\nD\x03D" +
		"\x03D\x05D\u0962\nD\x03D\x03D\x03D\x05D\u0967\nD\x03D\x03D\x03D\x03D\x05" +
		"D\u096D\nD\x03D\x03D\x03D\x03D\x05D\u0973\nD\x03D\x03D\x03D\x05D\u0978" +
		"\nD\x03D\x03D\x03D\x05D\u097D\nD\x03D\x03D\x03D\x05D\u0982\nD\x03D\x03" +
		"D\x03D\x05D\u0987\nD\x03D\x05D\u098A\nD\x03E\x03E\x03E\x05E\u098F\nE\x03" +
		"E\x06E\u0992\nE\rE\x0EE\u0993\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E" +
		"\x05E\u099E\nE\x03F\x03F\x05F\u09A2\nF\x03F\x03F\x03F\x03F\x03F\x05F\u09A9" +
		"\nF\x03F\x03F\x03F\x05F\u09AE\nF\x03F\x05F\u09B1\nF\x03F\x03F\x03F\x05" +
		"F\u09B6\nF\x03F\x05F\u09B9\nF\x03F\x03F\x05F\u09BD\nF\x03F\x03F\x05F\u09C1" +
		"\nF\x03G\x03G\x03G\x03G\x07G\u09C7\nG\fG\x0EG\u09CA\vG\x03H\x03H\x03H" +
		"\x03H\x03H\x03H\x03H\x03I\x03I\x03I\x03I\x03I\x03I\x03I\x03I\x03I\x05" +
		"I\u09DC\nI\x03I\x05I\u09DF\nI\x03I\x05I\u09E2\nI\x03I\x03I\x05I\u09E6" +
		"\nI\x03I\x03I\x03J\x03J\x03J\x03J\x07J\u09EE\nJ\fJ\x0EJ\u09F1\vJ\x03K" +
		"\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x07K\u09FB\nK\fK\x0EK\u09FE\vK\x03" +
		"K\x03K\x03L\x03L\x05L\u0A04\nL\x03L\x05L\u0A07\nL\x03L\x03L\x03L\x05L" +
		"\u0A0C\nL\x03L\x03L\x03L\x07L\u0A11\nL\fL\x0EL\u0A14\vL\x05L\u0A16\nL" +
		"\x03L\x05L\u0A19\nL\x03M\x03M\x03M\x03M\x03M\x03M\x03M\x03M\x03M\x05M" +
		"\u0A24\nM\x03M\x05M\u0A27\nM\x03M\x03M\x05M\u0A2B\nM\x03M\x03M\x03N\x03" +
		"N\x03N\x03N\x05N\u0A33\nN\x03N\x05N\u0A36\nN\x03N\x03N\x03N\x05N\u0A3B" +
		"\nN\x03N\x03N\x03N\x03N\x03N\x03N\x05N\u0A43\nN\x03N\x03N\x03N\x03N\x05" +
		"N\u0A49\nN\x03N\x03N\x05N\u0A4D\nN\x03O\x03O\x03O\x05O\u0A52\nO\x03O\x03" +
		"O\x06O\u0A56\nO\rO\x0EO\u0A57\x03P\x03P\x05P\u0A5C\nP\x03P\x07P\u0A5F" +
		"\nP\fP\x0EP\u0A62\vP\x03P\x03P\x05P\u0A66\nP\x03P\x05P\u0A69\nP\x03P\x03" +
		"P\x03P\x03P\x03P\x05P\u0A70\nP\x03P\x03P\x05P\u0A74\nP\x03P\x05P\u0A77" +
		"\nP\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x07P\u0A80\nP\fP\x0EP\u0A83\vP" +
		"\x03P\x03P\x03P\x03P\x03P\x05P\u0A8A\nP\x03P\x05P\u0A8D\nP\x03P\x05P\u0A90" +
		"\nP\x03P\x03P\x07P\u0A94\nP\fP\x0EP\u0A97\vP\x03P\x03P\x03P\x05P\u0A9C" +
		"\nP\x05P\u0A9E\nP\x03P\x03P\x03P\x05P\u0AA3\nP\x03P\x05P\u0AA6\nP\x03" +
		"P\x03P\x07P\u0AAA\nP\fP\x0EP\u0AAD\vP\x03P\x03P\x03P\x05P\u0AB2\nP\x05" +
		"P\u0AB4\nP\x03P\x03P\x05P\u0AB8\nP\x03P\x05P\u0ABB\nP\x03P\x05P\u0ABE" +
		"\nP\x03P\x05P\u0AC1\nP\x03P\x03P\x07P\u0AC5\nP\fP\x0EP\u0AC8\vP\x03P\x03" +
		"P\x03P\x05P\u0ACD\nP\x03P\x05P\u0AD0\nP\x03P\x03P\x07P\u0AD4\nP\fP\x0E" +
		"P\u0AD7\vP\x03P\x03P\x03P\x05P\u0ADC\nP\x05P\u0ADE\nP\x03P\x03P\x03P\x05" +
		"P\u0AE3\nP\x03P\x05P\u0AE6\nP\x03P\x03P\x03P\x03P\x03P\x03P\x05P\u0AEE" +
		"\nP\x05P\u0AF0\nP\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x05P\u0AF9\nP\x03" +
		"P\x03P\x03P\x05P\u0AFE\nP\x03P\x03P\x03P\x03P\x03P\x03P\x05P\u0B06\nP" +
		"\x03P\x03P\x05P\u0B0A\nP\x03P\x05P\u0B0D\nP\x03P\x03P\x03P\x03P\x03P\x03" +
		"P\x05P\u0B15\nP\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x05P\u0B1F\nP" +
		"\x03P\x03P\x03P\x05P\u0B24\nP\x03P\x05P\u0B27\nP\x03P\x03P\x03P\x03P\x03" +
		"P\x05P\u0B2E\nP\x03P\x03P\x05P\u0B32\nP\x03P\x05P\u0B35\nP\x03P\x03P\x05" +
		"P\u0B39\nP\x03P\x03P\x03P\x05P\u0B3E\nP\x03P\x03P\x03P\x03P\x03P\x03P" +
		"\x03P\x05P\u0B47\nP\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x03P" +
		"\x03P\x03P\x03P\x03P\x03P\x03P\x05P\u0B59\nP\x03P\x03P\x03P\x03P\x03P" +
		"\x03P\x03P\x05P\u0B62\nP\x03P\x03P\x05P\u0B66\nP\x03P\x03P\x03P\x03P\x03" +
		"P\x03P\x03P\x03P\x03P\x03P\x05P\u0B72\nP\x03P\x05P\u0B75\nP\x03P\x03P" +
		"\x03P\x03P\x03P\x03P\x03P\x05P\u0B7E\nP\x03P\x03P\x03P\x03P\x03P\x03P" +
		"\x03P\x03P\x03P\x05P\u0B89\nP\x03P\x05P\u0B8C\nP\x03P\x03P\x03P\x03P\x07" +
		"P\u0B92\nP\fP\x0EP\u0B95\vP\x03P\x03P\x03P\x05P\u0B9A\nP\x03Q\x03Q\x03" +
		"Q\x05Q\u0B9F\nQ\x03Q\x03Q\x03Q\x03Q\x07Q\u0BA5\nQ\fQ\x0EQ\u0BA8\vQ\x03" +
		"Q\x03Q\x03Q\x03Q\x03Q\x05Q\u0BAF\nQ\x03Q\x03Q\x03Q\x03Q\x03Q\x05Q\u0BB6" +
		"\nQ\x03Q\x03Q\x03Q\x03Q\x03Q\x05Q\u0BBD\nQ\x03Q\x03Q\x03Q\x03Q\x03Q\x05" +
		"Q\u0BC4\nQ\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x07" +
		"Q\u0BD1\nQ\fQ\x0EQ\u0BD4\vQ\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03" +
		"Q\x03Q\x05Q\u0BE0\nQ\x03Q\x03Q\x03Q\x03Q\x05Q\u0BE6\nQ\x03Q\x03Q\x03Q" +
		"\x03Q\x05Q\u0BEC\nQ\x03Q\x03Q\x03Q\x03Q\x05Q\u0BF2\nQ\x03Q\x03Q\x03Q\x03" +
		"Q\x05Q\u0BF8\nQ\x03Q\x03Q\x03Q\x03Q\x05Q\u0BFE\nQ\x03Q\x03Q\x03Q\x03Q" +
		"\x05Q\u0C04\nQ\x03R\x03R\x03R\x05R\u0C09\nR\x03R\x03R\x03S\x03S\x03S\x05" +
		"S\u0C10\nS\x03S\x03S\x03T\x03T\x03T\x05T\u0C17\nT\x03T\x05T\u0C1A\nT\x03" +
		"T\x03T\x03T\x03T\x03T\x05T\u0C21\nT\x03T\x03T\x03T\x05T\u0C26\nT\x03T" +
		"\x07T\u0C29\nT\fT\x0ET\u0C2C\vT\x03T\x05T\u0C2F\nT\x03U\x03U\x03U\x03" +
		"U\x03U\x03U\x03U\x03U\x03V\x03V\x03V\x05V\u0C3C\nV\x03V\x03V\x03W\x03" +
		"W\x03W\x05W\u0C43\nW\x03W\x03W\x03X\x03X\x03X\x05X\u0C4A\nX\x03X\x03X" +
		"\x03Y\x03Y\x05Y\u0C50\nY\x03Y\x03Y\x05Y\u0C54\nY\x03Y\x03Y\x05Y\u0C58" +
		"\nY\x03Y\x05Y\u0C5B\nY\x03Z\x03Z\x03Z\x03Z\x03Z\x05Z\u0C62\nZ\x03Z\x05" +
		"Z\u0C65\nZ\x03[\x03[\x03[\x05[\u0C6A\n[\x03[\x03[\x03\\\x03\\\x03\\\x05" +
		"\\\u0C71\n\\\x03\\\x03\\\x03\\\x07\\\u0C76\n\\\f\\\x0E\\\u0C79\v\\\x03" +
		"\\\x05\\\u0C7C\n\\\x03]\x03]\x03]\x05]\u0C81\n]\x03]\x03]\x03]\x07]\u0C86" +
		"\n]\f]\x0E]\u0C89\v]\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x07^\u0C93" +
		"\n^\f^\x0E^\u0C96\v^\x05^\u0C98\n^\x03^\x03^\x03^\x05^\u0C9D\n^\x03^\x03" +
		"^\x03^\x05^\u0CA2\n^\x07^\u0CA4\n^\f^\x0E^\u0CA7\v^\x03^\x03^\x03^\x05" +
		"^\u0CAC\n^\x03_\x03_\x05_\u0CB0\n_\x03_\x03_\x05_\u0CB4\n_\x03_\x05_\u0CB7" +
		"\n_\x03_\x03_\x03_\x07_\u0CBC\n_\f_\x0E_\u0CBF\v_\x03`\x03`\x03`\x03`" +
		"\x03`\x07`\u0CC6\n`\f`\x0E`\u0CC9\v`\x03a\x03a\x05a\u0CCD\na\x03a\x03" +
		"a\x03a\x03b\x03b\x05b\u0CD4\nb\x03b\x03b\x05b\u0CD8\nb\x03c\x03c\x03c" +
		"\x03c\x03c\x05c\u0CDF\nc\x03c\x05c\u0CE2\nc\x03d\x03d\x05d\u0CE6\nd\x03" +
		"e\x03e\x03e\x03f\x03f\x03f\x03f\x05f\u0CEF\nf\x03g\x03g\x05g\u0CF3\ng" +
		"\x03g\x05g\u0CF6\ng\x03g\x05g\u0CF9\ng\x03g\x03g\x03g\x03g\x05g\u0CFF" +
		"\ng\x03g\x05g\u0D02\ng\x03g\x03g\x03g\x03g\x05g\u0D08\ng\x03g\x03g\x03" +
		"g\x03g\x03g\x07g\u0D0F\ng\fg\x0Eg\u0D12\vg\x05g\u0D14\ng\x03g\x03g\x03" +
		"g\x03g\x03g\x03g\x03g\x07g\u0D1D\ng\fg\x0Eg\u0D20\vg\x05g\u0D22\ng\x03" +
		"h\x03h\x03h\x05h\u0D27\nh\x03h\x05h\u0D2A\nh\x03h\x03h\x03h\x05h\u0D2F" +
		"\nh\x03h\x03h\x03h\x03h\x03h\x03h\x03h\x03h\x05h\u0D39\nh\x03h\x03h\x03" +
		"h\x05h\u0D3E\nh\x03h\x03h\x06h\u0D42\nh\rh\x0Eh\u0D43\x05h\u0D46\nh\x03" +
		"h\x03h\x06h\u0D4A\nh\rh\x0Eh\u0D4B\x05h\u0D4E\nh\x03h\x03h\x03h\x03h\x05" +
		"h\u0D54\nh\x03h\x03h\x03h\x03h\x07h\u0D5A\nh\fh\x0Eh\u0D5D\vh\x03h\x03" +
		"h\x05h\u0D61\nh\x03h\x03h\x03h\x03h\x07h\u0D67\nh\fh\x0Eh\u0D6A\vh\x05" +
		"h\u0D6C\nh\x03i\x03i\x03i\x05i\u0D71\ni\x03i\x05i\u0D74\ni\x03i\x03i\x03" +
		"i\x05i\u0D79\ni\x03i\x03i\x03i\x03i\x03i\x03i\x05i\u0D81\ni\x03i\x03i" +
		"\x03i\x03i\x03i\x03i\x05i\u0D89\ni\x03i\x03i\x03i\x03i\x05i\u0D8F\ni\x03" +
		"i\x03i\x03i\x03i\x07i\u0D95\ni\fi\x0Ei\u0D98\vi\x03i\x03i\x05i\u0D9C\n" +
		"i\x03i\x03i\x03i\x03i\x07i\u0DA2\ni\fi\x0Ei\u0DA5\vi\x05i\u0DA7\ni\x03" +
		"j\x03j\x05j\u0DAB\nj\x03j\x05j\u0DAE\nj\x03j\x03j\x03j\x03j\x03j\x03j" +
		"\x05j\u0DB6\nj\x03j\x03j\x03j\x03j\x05j\u0DBC\nj\x03j\x03j\x03j\x03j\x03" +
		"j\x07j\u0DC3\nj\fj\x0Ej\u0DC6\vj\x05j\u0DC8\nj\x03k\x03k\x05k\u0DCC\n" +
		"k\x03k\x03k\x05k\u0DD0\nk\x03k\x03k\x06k\u0DD4\nk\rk\x0Ek\u0DD5\x03k\x03" +
		"k\x05k\u0DDA\nk\x03k\x03k\x05k\u0DDE\nk\x05k\u0DE0\nk\x03k\x05k\u0DE3" +
		"\nk\x03k\x05k\u0DE6\nk\x03k\x05k\u0DE9\nk\x03k\x03k\x06k\u0DED\nk\rk\x0E" +
		"k\u0DEE\x03k\x03k\x05k\u0DF3\nk\x03k\x05k\u0DF6\nk\x03k\x05k\u0DF9\nk" +
		"\x03k\x05k\u0DFC\nk\x03k\x05k\u0DFF\nk\x03k\x03k\x03k\x06k\u0E04\nk\r" +
		"k\x0Ek\u0E05\x05k\u0E08\nk\x03l\x03l\x05l\u0E0C\nl\x03m\x03m\x03m\x05" +
		"m\u0E11\nm\x03m\x03m\x03m\x03m\x05m\u0E17\nm\x03m\x07m\u0E1A\nm\fm\x0E" +
		"m\u0E1D\vm\x03n\x03n\x03n\x03n\x05n\u0E23\nn\x03n\x03n\x03n\x03n\x05n" +
		"\u0E29\nn\x03n\x07n\u0E2C\nn\fn\x0En\u0E2F\vn\x05n\u0E31\nn\x03o\x03o" +
		"\x03o\x03o\x05o\u0E37\no\x03p\x03p\x05p\u0E3B\np\x03q\x03q\x03q\x03q\x03" +
		"q\x03q\x05q\u0E43\nq\x03q\x05q\u0E46\nq\x03r\x03r\x05r\u0E4A\nr\x03r\x05" +
		"r\u0E4D\nr\x03r\x05r\u0E50\nr\x03r\x03r\x03r\x03r\x03r\x03r\x03r\x05r" +
		"\u0E59\nr\x03r\x03r\x05r\u0E5D\nr\x03r\x05r\u0E60\nr\x03r\x03r\x05r\u0E64" +
		"\nr\x03s\x03s\x05s\u0E68\ns\x03s\x05s\u0E6B\ns\x03s\x05s\u0E6E\ns\x03" +
		"s\x03s\x03s\x05s\u0E73\ns\x03s\x03s\x03s\x03s\x05s\u0E79\ns\x07s\u0E7B" +
		"\ns\fs\x0Es\u0E7E\vs\x03s\x03s\x03s\x03s\x03s\x03s\x03s\x05s\u0E87\ns" +
		"\x03s\x03s\x03s\x03s\x05s\u0E8D\ns\x07s\u0E8F\ns\fs\x0Es\u0E92\vs\x03" +
		"s\x03s\x03s\x05s\u0E97\ns\x03s\x03s\x05s\u0E9B\ns\x03t\x03t\x03t\x03t" +
		"\x05t\u0EA1\nt\x03t\x05t\u0EA4\nt\x03u\x03u\x03u\x03u\x03u\x03u\x03u\x03" +
		"u\x03u\x03u\x05u\u0EB0\nu\x03u\x03u\x05u\u0EB4\nu\x03u\x03u\x05u\u0EB8" +
		"\nu\x03v\x03v\x03v\x03v\x03v\x03v\x05v\u0EC0\nv\x03v\x03v\x05v\u0EC4\n" +
		"v\x03w\x03w\x03w\x03w\x03x\x03x\x05x\u0ECC\nx\x03x\x05x\u0ECF\nx\x03x" +
		"\x03x\x05x\u0ED3\nx\x03x\x05x\u0ED6\nx\x03x\x03x\x03x\x03x\x07x\u0EDC" +
		"\nx\fx\x0Ex\u0EDF\vx\x03x\x03x\x05x\u0EE3\nx\x03x\x05x\u0EE6\nx\x03x\x05" +
		"x\u0EE9\nx\x03y\x03y\x05y\u0EED\ny\x03y\x05y\u0EF0\ny\x03y\x03y\x03y\x03" +
		"y\x03y\x07y\u0EF7\ny\fy\x0Ey\u0EFA\vy\x03y\x03y\x05y\u0EFE\ny\x03z\x03" +
		"z\x03z\x03z\x03z\x07z\u0F05\nz\fz\x0Ez\u0F08\vz\x03{\x03{\x05{\u0F0C\n" +
		"{\x03|\x03|\x03|\x07|\u0F11\n|\f|\x0E|\u0F14\v|\x03}\x03}\x07}\u0F18\n" +
		"}\f}\x0E}\u0F1B\v}\x03}\x03}\x03}\x07}\u0F20\n}\f}\x0E}\u0F23\v}\x03}" +
		"\x03}\x03}\x05}\u0F28\n}\x03~\x03~\x03~\x03~\x03~\x03~\x05~\u0F30\n~\x03" +
		"~\x05~\u0F33\n~\x03~\x05~\u0F36\n~\x03~\x03~\x03~\x07~\u0F3B\n~\f~\x0E" +
		"~\u0F3E\v~\x05~\u0F40\n~\x03~\x03~\x03~\x03~\x03~\x05~\u0F47\n~\x03~\x05" +
		"~\u0F4A\n~\x03~\x03~\x03~\x03~\x03~\x03~\x05~\u0F52\n~\x03\x7F\x03\x7F" +
		"\x03\x7F\x03\x7F\x05\x7F\u0F58\n\x7F\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x03" +
		"\x80\x03\x80\x03\x80\x03\x80\x03\x80\x05\x80\u0F63\n\x80\x03\x81\x05\x81" +
		"\u0F66\n\x81\x03\x81\x03\x81\x05\x81\u0F6A\n\x81\x03\x81\x03\x81\x03\x81" +
		"\x03\x81\x03\x81\x03\x81\x03\x81\x03\x81\x05\x81\u0F74\n\x81\x03\x81\x03" +
		"\x81\x03\x81\x03\x81\x05\x81\u0F7A\n\x81\x03\x81\x03\x81\x05\x81\u0F7E" +
		"\n\x81\x03\x81\x03\x81\x05\x81\u0F82\n\x81\x03\x81\x03\x81\x03\x81\x03" +
		"\x81\x03\x81\x03\x81\x03\x81\x03\x81\x05\x81\u0F8C\n\x81\x03\x81\x03\x81" +
		"\x03\x81\x05\x81\u0F91\n\x81\x05\x81\u0F93\n\x81\x03\x81\x03\x81\x05\x81" +
		"\u0F97\n\x81\x03\x82\x03\x82\x03\x82\x03\x82\x03\x82\x03\x82\x03\x82\x03" +
		"\x82\x05\x82\u0FA1\n\x82\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x83" +
		"\x03\x83\x03\x83\x05\x83\u0FAB\n\x83\x03\x84\x03\x84\x07\x84\u0FAF\n\x84" +
		"\f\x84\x0E\x84\u0FB2\v\x84\x03\x84\x03\x84\x05\x84\u0FB6\n\x84\x03\x84" +
		"\x05\x84\u0FB9\n\x84\x03\x84\x05\x84\u0FBC\n\x84\x03\x84\x05\x84\u0FBF" +
		"\n\x84\x03\x84\x05\x84\u0FC2\n\x84\x03\x84\x05\x84\u0FC5\n\x84\x03\x84" +
		"\x05\x84\u0FC8\n\x84\x03\x84\x03\x84\x07\x84\u0FCC\n\x84\f\x84\x0E\x84" +
		"\u0FCF\v\x84\x03\x84\x03\x84\x05\x84\u0FD3\n\x84\x03\x84\x05\x84\u0FD6" +
		"\n\x84\x03\x84\x05\x84\u0FD9\n\x84\x03\x84\x05\x84\u0FDC\n\x84\x03\x84" +
		"\x05\x84\u0FDF\n\x84\x03\x84\x05\x84\u0FE2\n\x84\x03\x84\x05\x84\u0FE5" +
		"\n\x84\x05\x84\u0FE7\n\x84\x03\x85\x03\x85\x07\x85\u0FEB\n\x85\f\x85\x0E" +
		"\x85\u0FEE\v\x85\x03\x85\x03\x85\x05\x85\u0FF2\n\x85\x03\x85\x05\x85\u0FF5" +
		"\n\x85\x03\x85\x05\x85\u0FF8\n\x85\x03\x85\x05\x85\u0FFB\n\x85\x03\x85" +
		"\x05\x85\u0FFE\n\x85\x03\x85\x05\x85\u1001\n\x85\x03\x86\x03\x86\x05\x86" +
		"\u1005\n\x86\x03\x86\x03\x86\x03\x87\x03\x87\x05\x87\u100B\n\x87\x03\x87" +
		"\x03\x87\x05\x87\u100F\n\x87\x03\x88\x03\x88\x03\x88\x03\x88\x03\x88\x03" +
		"\x88\x05\x88\u1017\n\x88\x03\x88\x03\x88\x05\x88\u101B\n\x88\x03\x88\x05" +
		"\x88\u101E\n\x88\x05\x88\u1020\n\x88\x03\x89\x03\x89\x03\x89\x03\x89\x03" +
		"\x89\x03\x89\x03\x89\x03\x89\x03\x89\x03\x89\x03\x89\x05\x89\u102D\n\x89" +
		"\x03\x89\x05\x89\u1030\n\x89\x03\x8A\x03\x8A\x03\x8A\x07\x8A\u1035\n\x8A" +
		"\f\x8A\x0E\x8A\u1038\v\x8A\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03" +
		"\x8B\x03\x8B\x05\x8B\u1041\n\x8B\x03\x8B\x05\x8B\u1044\n\x8B\x03\x8B\x03" +
		"\x8B\x03\x8B\x05\x8B\u1049\n\x8B\x05\x8B\u104B\n\x8B\x03\x8B\x03\x8B\x05" +
		"\x8B\u104F\n\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x05\x8B" +
		"\u1057\n\x8B\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x05\x8C\u105D\n\x8C\x03\x8C" +
		"\x03\x8C\x03\x8C\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x05\x8D\u1066\n\x8D\x03" +
		"\x8D\x03\x8D\x03\x8D\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03" +
		"\x8E\x03\x8E\x05\x8E\u1073\n\x8E\x03\x8F\x03\x8F\x05\x8F\u1077\n\x8F\x03" +
		"\x8F\x03\x8F\x07\x8F\u107B\n\x8F\f\x8F\x0E\x8F\u107E\v\x8F\x03\x90\x03" +
		"\x90\x03\x90\x03\x90\x03\x90\x03\x90\x05\x90\u1086\n\x90\x03\x90\x05\x90" +
		"\u1089\n\x90\x03\x90\x03\x90\x05\x90\u108D\n\x90\x03\x90\x05\x90\u1090" +
		"\n\x90\x03\x90\x03\x90\x05\x90\u1094\n\x90\x03\x90\x03\x90\x05\x90\u1098" +
		"\n\x90\x03\x90\x05\x90\u109B\n\x90\x05\x90\u109D\n\x90\x03\x91\x03\x91" +
		"\x03\x91\x03\x91\x07\x91\u10A3\n\x91\f\x91\x0E\x91\u10A6\v\x91\x03\x91" +
		"\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91\x05\x91" +
		"\u10B1\n\x91\x03\x91\x03\x91\x06\x91\u10B5\n\x91\r\x91\x0E\x91\u10B6\x05" +
		"\x91\u10B9\n\x91\x03\x91\x03\x91\x06\x91\u10BD\n\x91\r\x91\x0E\x91\u10BE" +
		"\x05\x91\u10C1\n\x91\x05\x91\u10C3\n\x91\x03\x92\x03\x92\x03\x92\x03\x92" +
		"\x05\x92\u10C9\n\x92\x03\x92\x03\x92\x03\x92\x03\x92\x03\x92\x03\x92\x05" +
		"\x92\u10D1\n\x92\x03\x93\x03\x93\x03\x93\x03\x93\x03\x93\x03\x93\x05\x93" +
		"\u10D9\n\x93\x03\x94\x03\x94\x05\x94\u10DD\n\x94\x03\x94\x03\x94\x05\x94" +
		"\u10E1\n\x94\x03\x95\x03\x95\x03\x95\x03\x95\x03\x95\x07\x95\u10E8\n\x95" +
		"\f\x95\x0E\x95\u10EB\v\x95\x03\x95\x03\x95\x05\x95\u10EF\n\x95\x03\x96" +
		"\x03\x96\x03\x96\x03\x97\x03\x97\x03\x97\x03\x97\x03\x97\x03\x97\x03\x97" +
		"\x03\x97\x03\x97\x03\x97\x03\x97\x03\x97\x03\x97\x07\x97\u1101\n\x97\f" +
		"\x97\x0E\x97\u1104\v\x97\x03\x98\x03\x98\x05\x98\u1108\n\x98\x03\x99\x03" +
		"\x99\x03\x99\x03\x99\x05\x99\u110E\n\x99\x03\x99\x03\x99\x03\x99\x03\x99" +
		"\x03\x99\x05\x99\u1115\n\x99\x03\x9A\x03\x9A\x03\x9A\x05\x9A\u111A\n\x9A" +
		"\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x07\x9B\u1121\n\x9B\f\x9B\x0E" +
		"\x9B\u1124\v\x9B\x05\x9B\u1126\n\x9B\x03\x9C\x03\x9C\x05\x9C\u112A\n\x9C" +
		"\x03\x9D\x03\x9D\x05\x9D\u112E\n\x9D\x03\x9D\x03\x9D\x05\x9D\u1132\n\x9D" +
		"\x03\x9D\x05\x9D\u1135\n\x9D\x03\x9D\x05\x9D\u1138\n\x9D\x03\x9D\x05\x9D" +
		"\u113B\n\x9D\x03\x9E\x03\x9E\x05\x9E\u113F\n\x9E\x03\x9E\x03\x9E\x05\x9E" +
		"\u1143\n\x9E\x03\x9E\x05\x9E\u1146\n\x9E\x03\x9E\x05\x9E\u1149\n\x9E\x03" +
		"\x9E\x05\x9E\u114C\n\x9E\x03\x9F\x03\x9F\x03\x9F\x03\xA0\x03\xA0\x05\xA0" +
		"\u1153\n\xA0\x03\xA0\x03\xA0\x05\xA0\u1157\n\xA0\x03\xA0\x03\xA0\x03\xA1" +
		"\x03\xA1\x03\xA1\x03\xA1\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x07\xA2" +
		"\u1164\n\xA2\f\xA2\x0E\xA2\u1167\v\xA2\x03\xA2\x05\xA2\u116A\n\xA2\x03" +
		"\xA3\x03\xA3\x03\xA3\x03\xA4\x03\xA4\x03\xA4\x03\xA4\x03\xA4\x03\xA5\x03" +
		"\xA5\x05\xA5\u1176\n\xA5\x03\xA5\x03\xA5\x03\xA5\x03\xA5\x07\xA5\u117C" +
		"\n\xA5\f\xA5\x0E\xA5\u117F\v\xA5\x03\xA6\x03\xA6\x03\xA6\x03\xA6\x03\xA6" +
		"\x03\xA6\x03\xA6\x05\xA6\u1188\n\xA6\x03\xA7\x03\xA7\x05\xA7\u118C\n\xA7" +
		"\x03\xA7\x05\xA7\u118F\n\xA7\x03\xA7\x03\xA7\x03\xA8\x03\xA8\x05\xA8\u1195" +
		"\n\xA8\x03\xA8\x05\xA8\u1198\n\xA8\x03\xA8\x05\xA8\u119B\n\xA8\x03\xA9" +
		"\x03\xA9\x03\xA9\x03\xA9\x03\xA9\x03\xA9\x03\xA9\x05\xA9\u11A4\n\xA9\x03" +
		"\xAA\x03\xAA\x03\xAA\x03\xAA\x03\xAA\x03\xAA\x03\xAA\x05\xAA\u11AD\n\xAA" +
		"\x03\xAB\x03\xAB\x03\xAB\x03\xAB\x03\xAB\x03\xAB\x07\xAB\u11B5\n\xAB\f" +
		"\xAB\x0E\xAB\u11B8\v\xAB\x03\xAB\x05\xAB\u11BB\n\xAB\x03\xAC\x03\xAC\x03" +
		"\xAC\x03\xAC\x03\xAC\x03\xAC\x07\xAC\u11C3\n\xAC\f\xAC\x0E\xAC\u11C6\v" +
		"\xAC\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x05\xAD\u11CF" +
		"\n\xAD\x03\xAE\x03\xAE\x03\xAE\x03\xAF\x03\xAF\x03\xAF\x05\xAF\u11D7\n" +
		"\xAF\x03\xAF\x05\xAF\u11DA\n\xAF\x03\xB0\x03\xB0\x03\xB0\x03\xB0\x03\xB0" +
		"\x07\xB0\u11E1\n\xB0\f\xB0\x0E\xB0\u11E4\v\xB0\x05\xB0\u11E6\n\xB0\x03" +
		"\xB0\x03\xB0\x05\xB0\u11EA\n\xB0\x03\xB0\x07\xB0\u11ED\n\xB0\f\xB0\x0E" +
		"\xB0\u11F0\v\xB0\x03\xB0\x05\xB0\u11F3\n\xB0\x03\xB1\x03\xB1\x03\xB1\x03" +
		"\xB1\x03\xB1\x07\xB1";
	private static readonly _serializedATNSegment2: string =
		"\u11FA\n\xB1\f\xB1\x0E\xB1\u11FD\v\xB1\x05\xB1\u11FF\n\xB1\x03\xB2\x03" +
		"\xB2\x03\xB2\x03\xB3\x03\xB3\x03\xB3\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03" +
		"\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03" +
		"\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x03\xB4\x07\xB4\u121C" +
		"\n\xB4\f\xB4\x0E\xB4\u121F\v\xB4\x05\xB4\u1221\n\xB4\x03\xB4\x05\xB4\u1224" +
		"\n\xB4\x03\xB5\x03\xB5\x03\xB6\x03\xB6\x03\xB7\x03\xB7\x03\xB8\x03\xB8" +
		"\x03\xB8\x03\xB8\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9" +
		"\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9" +
		"\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9" +
		"\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9" +
		"\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x07\xB9" +
		"\u125A\n\xB9\f\xB9\x0E\xB9\u125D\v\xB9\x03\xB9\x03\xB9\x05\xB9\u1261\n" +
		"\xB9\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBB\x03\xBB\x03" +
		"\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03" +
		"\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x05" +
		"\xBC\u127D\n\xBC\x03\xBD\x03\xBD\x03\xBD\x03\xBD\x03\xBD\x03\xBD\x03\xBD" +
		"\x03\xBD\x03\xBD\x03\xBD\x03\xBD\x03\xBD\x05\xBD\u128B\n\xBD\x03\xBE\x03" +
		"\xBE\x03\xBE\x07\xBE\u1290\n\xBE\f\xBE\x0E\xBE\u1293\v\xBE\x03\xBE\x05" +
		"\xBE\u1296\n\xBE\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x05\xBF\u129C\n\xBF\x03" +
		"\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x05\xC0\u12A4\n\xC0\x05\xC0" +
		"\u12A6\n\xC0\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC2\x03\xC2\x03\xC2\x03" +
		"\xC2\x03\xC2\x05\xC2\u12B1\n\xC2\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x03\xC4" +
		"\x03\xC4\x03\xC4\x03\xC4\x05\xC4\u12BB\n\xC4\x03\xC5\x03\xC5\x03\xC5\x03" +
		"\xC5\x03\xC5\x05\xC5\u12C2\n\xC5\x03\xC6\x03\xC6\x03\xC6\x03\xC6\x05\xC6" +
		"\u12C8\n\xC6\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x03\xC8\x03\xC8\x05\xC8\u12D0" +
		"\n\xC8\x03\xC9\x03\xC9\x03\xC9\x05\xC9\u12D5\n\xC9\x03\xC9\x03\xC9\x03" +
		"\xC9\x03\xC9\x07\xC9\u12DB\n\xC9\f\xC9\x0E\xC9\u12DE\v\xC9\x03\xC9\x03" +
		"\xC9\x03\xC9\x07\xC9\u12E3\n\xC9\f\xC9\x0E\xC9\u12E6\v\xC9\x03\xC9\x03" +
		"\xC9\x03\xC9\x07\xC9\u12EB\n\xC9\f\xC9\x0E\xC9\u12EE\v\xC9\x03\xC9\x03" +
		"\xC9\x03\xC9\x07\xC9\u12F3\n\xC9\f\xC9\x0E\xC9\u12F6\v\xC9\x03\xC9\x07" +
		"\xC9\u12F9\n\xC9\f\xC9\x0E\xC9\u12FC\v\xC9\x05\xC9\u12FE\n\xC9\x03\xC9" +
		"\x03\xC9\x05\xC9\u1302\n\xC9\x03\xCA\x03\xCA\x03\xCA\x05\xCA\u1307\n\xCA" +
		"\x03\xCA\x06\xCA\u130A\n\xCA\r\xCA\x0E\xCA\u130B\x03\xCA\x03\xCA\x06\xCA" +
		"\u1310\n\xCA\r\xCA\x0E\xCA\u1311\x05\xCA\u1314\n\xCA\x03\xCA\x03\xCA\x03" +
		"\xCA\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x06\xCB\u131D\n\xCB\r\xCB\x0E\xCB" +
		"\u131E\x03\xCB\x07\xCB\u1322\n\xCB\f\xCB\x0E\xCB\u1325\v\xCB\x03\xCB\x03" +
		"\xCB\x06\xCB\u1329\n\xCB\r\xCB\x0E\xCB\u132A\x05\xCB\u132D\n\xCB\x03\xCB" +
		"\x03\xCB\x03\xCB\x03\xCC\x03\xCC\x03\xCC\x03\xCD\x03\xCD\x03\xCD\x03\xCE" +
		"\x03\xCE\x03\xCE\x05\xCE\u133B\n\xCE\x03\xCE\x03\xCE\x06\xCE\u133F\n\xCE" +
		"\r\xCE\x0E\xCE\u1340\x03\xCE\x03\xCE\x03\xCE\x05\xCE\u1346\n\xCE\x03\xCF" +
		"\x03\xCF\x03\xCF\x05\xCF\u134B\n\xCF\x03\xCF\x03\xCF\x06\xCF\u134F\n\xCF" +
		"\r\xCF\x0E\xCF\u1350\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x05\xCF\u1358" +
		"\n\xCF\x03\xD0\x03\xD0\x03\xD0\x03\xD1\x03\xD1\x03\xD1\x05\xD1\u1360\n" +
		"\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x06\xD1\u1366\n\xD1\r\xD1\x0E\xD1" +
		"\u1367\x03\xD1\x03\xD1\x03\xD1\x05\xD1\u136D\n\xD1\x03\xD2\x03\xD2\x03" +
		"\xD2\x03\xD2\x05\xD2\u1373\n\xD2\x03\xD2\x05\xD2\u1376\n\xD2\x03\xD2\x03" +
		"\xD2\x03\xD2\x03\xD2\x03\xD2\x03\xD2\x05\xD2\u137E\n\xD2\x03\xD3\x03\xD3" +
		"\x03\xD3\x03\xD3\x03\xD3\x05\xD3\u1385\n\xD3\x03\xD4\x03\xD4\x03\xD4\x03" +
		"\xD4\x03\xD4\x03\xD4\x03\xD4\x05\xD4\u138E\n\xD4\x03\xD4\x05\xD4\u1391" +
		"\n\xD4\x03\xD5\x03\xD5\x03\xD5\x03\xD5\x03\xD5\x03\xD5\x03\xD6\x03\xD6" +
		"\x03\xD6\x03\xD6\x03\xD6\x03\xD6\x03\xD6\x07\xD6\u13A0\n\xD6\f\xD6\x0E" +
		"\xD6\u13A3\v\xD6\x03\xD6\x03\xD6\x03\xD7\x03\xD7\x03\xD7\x05\xD7\u13AA" +
		"\n\xD7\x03\xD7\x03\xD7\x03\xD7\x03\xD7\x03\xD7\x03\xD7\x05\xD7\u13B2\n" +
		"\xD7\x03\xD8\x03\xD8\x05\xD8\u13B6\n\xD8\x03\xD8\x03\xD8\x03\xD9\x03\xD9" +
		"\x03\xD9\x05\xD9\u13BD\n\xD9\x03\xD9\x03\xD9\x06\xD9\u13C1\n\xD9\r\xD9" +
		"\x0E\xD9\u13C2\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x06\xDA\u13C9\n\xDA\r\xDA" +
		"\x0E\xDA\u13CA\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x07\xDB\u13D2\n" +
		"\xDB\f\xDB\x0E\xDB\u13D5\v\xDB\x03\xDB\x03\xDB\x03\xDB\x05\xDB\u13DA\n" +
		"\xDB\x03\xDB\x03\xDB\x03\xDB\x07\xDB\u13DF\n\xDB\f\xDB\x0E\xDB\u13E2\v" +
		"\xDB\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x05\xDB\u13E8\n\xDB\x03\xDB\x07\xDB" +
		"\u13EB\n\xDB\f\xDB\x0E\xDB\u13EE\v\xDB\x05\xDB\u13F0\n\xDB\x05\xDB\u13F2" +
		"\n\xDB\x03\xDB\x03\xDB\x06\xDB\u13F6\n\xDB\r\xDB\x0E\xDB\u13F7\x05\xDB" +
		"\u13FA\n\xDB\x03\xDB\x03\xDB\x07\xDB\u13FE\n\xDB\f\xDB\x0E\xDB\u1401\v" +
		"\xDB\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x05\xDB\u1407\n\xDB\x05\xDB\u1409" +
		"\n\xDB\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x07\xDC\u1410\n\xDC\f\xDC" +
		"\x0E\xDC\u1413\v\xDC\x03\xDC\x03\xDC\x03\xDC\x05\xDC\u1418\n\xDC\x03\xDC" +
		"\x03\xDC\x03\xDC\x07\xDC\u141D\n\xDC\f\xDC\x0E\xDC\u1420\v\xDC\x03\xDC" +
		"\x03\xDC\x03\xDC\x03\xDC\x05\xDC\u1426\n\xDC\x03\xDC\x07\xDC\u1429\n\xDC" +
		"\f\xDC\x0E\xDC\u142C\v\xDC\x05\xDC\u142E\n\xDC\x05\xDC\u1430\n\xDC\x03" +
		"\xDC\x03\xDC\x06\xDC\u1434\n\xDC\r\xDC\x0E\xDC\u1435\x05\xDC\u1438\n\xDC" +
		"\x03\xDC\x03\xDC\x07\xDC\u143C\n\xDC\f\xDC\x0E\xDC\u143F\v\xDC\x03\xDC" +
		"\x03\xDC\x03\xDC\x03\xDC\x05\xDC\u1445\n\xDC\x05\xDC\u1447\n\xDC\x03\xDD" +
		"\x03\xDD\x03\xDD\x05\xDD\u144C\n\xDD\x03\xDD\x03\xDD\x03\xDD\x07\xDD\u1451" +
		"\n\xDD\f\xDD\x0E\xDD\u1454\v\xDD\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x07\xDE" +
		"\u145A\n\xDE\f\xDE\x0E\xDE\u145D\v\xDE\x03\xDE\x03\xDE\x05\xDE\u1461\n" +
		"\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x07\xDE\u1468\n\xDE\f\xDE" +
		"\x0E\xDE\u146B\v\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x05\xDE\u1471\n\xDE" +
		"\x03\xDE\x07\xDE\u1474\n\xDE\f\xDE\x0E\xDE\u1477\v\xDE\x05\xDE\u1479\n" +
		"\xDE\x05\xDE\u147B\n\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x07\xDE\u1481" +
		"\n\xDE\f\xDE\x0E\xDE\u1484\v\xDE\x05\xDE\u1486\n\xDE\x03\xDE\x03\xDE\x03" +
		"\xDE\x03\xDE\x03\xDE\x03\xDE\x05\xDE\u148E\n\xDE\x03\xDE\x03\xDE\x03\xDE" +
		"\x05\xDE\u1493\n\xDE\x03\xDE\x03\xDE\x03\xDE\x05\xDE\u1498\n\xDE\x07\xDE" +
		"\u149A\n\xDE\f\xDE\x0E\xDE\u149D\v\xDE\x03\xDE\x03\xDE\x03\xDE\x05\xDE" +
		"\u14A2\n\xDE\x03\xDE\x03\xDE\x03\xDE\x05\xDE\u14A7\n\xDE\x07\xDE\u14A9" +
		"\n\xDE\f\xDE\x0E\xDE\u14AC\v\xDE\x03\xDE\x03\xDE\x03\xDE\x05\xDE\u14B1" +
		"\n\xDE\x05\xDE\u14B3\n\xDE\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x03" +
		"\xDF\x03\xDF\x07\xDF\u14BC\n\xDF\f\xDF\x0E\xDF\u14BF\v\xDF\x05\xDF\u14C1" +
		"\n\xDF\x03\xDF\x03\xDF\x03\xDF\x07\xDF\u14C6\n\xDF\f\xDF\x0E\xDF\u14C9" +
		"\v\xDF\x05\xDF\u14CB\n\xDF\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03" +
		"\xE0\x03\xE0\x03\xE0\x07\xE0\u14D5\n\xE0\f\xE0\x0E\xE0\u14D8\v\xE0\x03" +
		"\xE0\x03\xE0\x03\xE0\x05\xE0\u14DD\n\xE0\x03\xE1\x03\xE1\x03\xE1\x03\xE1" +
		"\x03\xE1\x07\xE1\u14E4\n\xE1\f\xE1\x0E\xE1\u14E7\v\xE1\x03\xE2\x03\xE2" +
		"\x03\xE2\x03\xE2\x07\xE2\u14ED\n\xE2\f\xE2\x0E\xE2\u14F0\v\xE2\x03\xE2" +
		"\x03\xE2\x05\xE2\u14F4\n\xE2\x03\xE2\x03\xE2\x03\xE2\x03\xE2\x03\xE2\x07" +
		"\xE2\u14FB\n\xE2\f\xE2\x0E\xE2\u14FE\v\xE2\x03\xE2\x03\xE2\x03\xE2\x05" +
		"\xE2\u1503\n\xE2\x03\xE2\x03\xE2\x03\xE2\x03\xE2\x03\xE2\x03\xE2\x03\xE2" +
		"\x07\xE2\u150C\n\xE2\f\xE2\x0E\xE2\u150F\v\xE2\x03\xE2\x03\xE2\x03\xE2" +
		"\x03\xE2\x07\xE2\u1515\n\xE2\f\xE2\x0E\xE2\u1518\v\xE2\x03\xE2\x03\xE2" +
		"\x03\xE2\x05\xE2\u151D\n\xE2\x03\xE2\x03\xE2\x03\xE2\x05\xE2\u1522\n\xE2" +
		"\x07\xE2\u1524\n\xE2\f\xE2\x0E\xE2\u1527\v\xE2\x05\xE2\u1529\n\xE2\x03" +
		"\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x07\xE3\u1533" +
		"\n\xE3\f\xE3\x0E\xE3\u1536\v\xE3\x03\xE4\x03\xE4\x03\xE4\x03\xE4\x05\xE4" +
		"\u153C\n\xE4\x03\xE4\x03\xE4\x03\xE4\x05\xE4\u1541\n\xE4\x03\xE5\x03\xE5" +
		"\x03\xE5\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6" +
		"\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x05\xE6\u1553\n\xE6\x03\xE6\x03" +
		"\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x07\xE6\u155B\n\xE6\f\xE6\x0E\xE6" +
		"\u155E\v\xE6\x03\xE6\x05\xE6\u1561\n\xE6\x03\xE7\x03\xE7\x03\xE7\x05\xE7" +
		"\u1566\n\xE7\x03\xE7\x03\xE7\x03\xE7\x03\xE7\x05\xE7\u156C\n\xE7\x03\xE8" +
		"\x03\xE8\x03\xE8\x03\xE8\x03\xE8\x03\xE8\x03\xE8\x03\xE8\x05\xE8\u1576" +
		"\n\xE8\x03\xE9\x03\xE9\x03\xE9\x03\xE9\x03\xE9\x03\xE9\x03\xE9\x03\xE9" +
		"\x05\xE9\u1580\n\xE9\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03" +
		"\xEA\x03\xEA\x05\xEA\u158A\n\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x05\xEA" +
		"\u1590\n\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x05" +
		"\xEA\u1599\n\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x05\xEA\u159F\n\xEA\x03" +
		"\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x05\xEA\u15A6\n\xEA\x05\xEA\u15A8" +
		"\n\xEA\x03\xEB\x03\xEB\x03\xEB\x03\xEC\x03\xEC\x03\xEC\x03\xEC\x03\xEC" +
		"\x05\xEC\u15B2\n\xEC\x03\xED\x03\xED\x05\xED\u15B6\n\xED\x03\xED\x03\xED" +
		"\x05\xED\u15BA\n\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03" +
		"\xED\x03\xED\x05\xED\u15C4\n\xED\x03\xED\x03\xED\x03\xED\x05\xED\u15C9" +
		"\n\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED" +
		"\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x05\xED" +
		"\u15DB\n\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03" +
		"\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03" +
		"\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03" +
		"\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03" +
		"\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03" +
		"\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03" +
		"\xED\x03\xED\x05\xED\u1613\n\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED" +
		"\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED" +
		"\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED\x03\xED" +
		"\x05\xED\u162C\n\xED\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03" +
		"\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03" +
		"\xEE\x05\xEE\u163E\n\xEE\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x03\xF0\x03\xF0" +
		"\x05\xF0\u1646\n\xF0\x03\xF0\x03\xF0\x03\xF0\x03\xF0\x03\xF0\x03\xF0\x03" +
		"\xF0\x03\xF0\x07\xF0\u1650\n\xF0\f\xF0\x0E\xF0\u1653\v\xF0\x03\xF0\x03" +
		"\xF0\x03\xF0\x03\xF0\x05\xF0\u1659\n\xF0\x05\xF0\u165B\n\xF0\x03\xF0\x03" +
		"\xF0\x03\xF0\x03\xF0\x03\xF0\x03\xF0\x07\xF0\u1663\n\xF0\f\xF0\x0E\xF0" +
		"\u1666\v\xF0\x05\xF0\u1668\n\xF0\x03\xF1\x03\xF1\x03\xF1\x03\xF1\x07\xF1" +
		"\u166E\n\xF1\f\xF1\x0E\xF1\u1671\v\xF1\x03\xF2\x03\xF2\x03\xF2\x03\xF2" +
		"\x05\xF2\u1677\n\xF2\x03\xF3\x03\xF3\x05\xF3\u167B\n\xF3\x03\xF3\x03\xF3" +
		"\x03\xF3\x05\xF3\u1680\n\xF3\x03\xF4\x03\xF4\x05\xF4\u1684\n\xF4\x03\xF4" +
		"\x03\xF4\x03\xF4\x05\xF4\u1689\n\xF4\x03\xF4\x05\xF4\u168C\n\xF4\x03\xF4" +
		"\x05\xF4\u168F\n\xF4\x03\xF5\x03\xF5\x03\xF5\x03\xF5\x03\xF5\x03\xF5\x03" +
		"\xF5\x05\xF5\u1698\n\xF5\x03\xF6\x03\xF6\x05\xF6\u169C\n\xF6\x03\xF6\x05" +
		"\xF6\u169F\n\xF6\x03\xF6\x03\xF6\x05\xF6\u16A3\n\xF6\x03\xF6\x03\xF6\x03" +
		"\xF6\x03\xF6\x03\xF6\x03\xF6\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03" +
		"\xF7\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x03" +
		"\xF9\x05\xF9\u16BA\n\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x05\xF9" +
		"\u16C1\n\xF9\x07\xF9\u16C3\n\xF9\f\xF9\x0E\xF9\u16C6\v\xF9\x03\xF9\x03" +
		"\xF9\x03\xF9\x03\xF9\x05\xF9\u16CC\n\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xF9" +
		"\x03\xF9\x05\xF9\u16D3\n\xF9\x03\xF9\x05\xF9\u16D6\n\xF9\x03\xF9\x03\xF9" +
		"\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xF9\x03\xF9" +
		"\x03\xF9\x07\xF9\u16E4\n\xF9\f\xF9\x0E\xF9\u16E7\v\xF9\x05\xF9\u16E9\n" +
		"\xF9\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x05" +
		"\xFA\u16F3\n\xFA\x03\xFA\x03\xFA\x05\xFA\u16F7\n\xFA\x03\xFA\x05\xFA\u16FA" +
		"\n\xFA\x03\xFA\x03\xFA\x03\xFA\x05\xFA\u16FF\n\xFA\x03\xFA\x03\xFA\x03" +
		"\xFA\x05\xFA\u1704\n\xFA\x03\xFA\x03\xFA\x05\xFA\u1708\n\xFA\x03\xFA\x05" +
		"\xFA\u170B\n\xFA\x03\xFA\x03\xFA\x03\xFA\x05\xFA\u1710\n\xFA\x03\xFA\x03" +
		"\xFA\x03\xFA\x05\xFA\u1715\n\xFA\x03\xFA\x03\xFA\x05\xFA\u1719\n\xFA\x03" +
		"\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x05\xFA\u1720\n\xFA\x03\xFA\x05\xFA" +
		"\u1723\n\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x05\xFA\u1729\n\xFA\x03\xFA" +
		"\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x05\xFA" +
		"\u1734\n\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03" +
		"\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03" +
		"\xFA\x03\xFA\x05\xFA\u1748\n\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA" +
		"\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x05\xFA\u1754\n\xFA\x03\xFA\x05" +
		"\xFA\u1757\n\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA" +
		"\x03\xFA\x05\xFA\u1761\n\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03" +
		"\xFA\x05\xFA\u1769\n\xFA\x03\xFA\x03\xFA\x05\xFA\u176D\n\xFA\x03\xFA\x03" +
		"\xFA\x03\xFA\x03\xFA\x03\xFA\x05\xFA\u1774\n\xFA\x03\xFA\x05\xFA\u1777" +
		"\n\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x07\xFA\u177E\n\xFA\f\xFA" +
		"\x0E\xFA\u1781\v\xFA\x05\xFA\u1783\n\xFA\x03\xFA\x03\xFA\x03\xFA\x05\xFA" +
		"\u1788\n\xFA\x03\xFA\x05\xFA\u178B\n\xFA\x03\xFA\x03\xFA\x03\xFA\x05\xFA" +
		"\u1790\n\xFA\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x05\xFA\u1796\n\xFA\x03\xFA" +
		"\x03\xFA\x03\xFA\x03\xFA\x03\xFA\x05\xFA\u179D\n\xFA\x03\xFA\x03\xFA\x03" +
		"\xFA\x03\xFA\x03\xFA\x05\xFA\u17A4\n\xFA\x03\xFA\x03\xFA\x05\xFA\u17A8" +
		"\n\xFA\x05\xFA\u17AA\n\xFA\x03\xFB\x03\xFB\x05\xFB\u17AE\n\xFB\x03\xFB" +
		"\x03\xFB\x03\xFB\x03\xFB\x03\xFC\x03\xFC\x03\xFC\x03\xFC\x05\xFC\u17B8" +
		"\n\xFC\x03\xFC\x05\xFC\u17BB\n\xFC\x03\xFC\x05\xFC\u17BE\n\xFC\x03\xFD" +
		"\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD" +
		"\x05\xFD\u17CA\n\xFD\x03\xFD\x05\xFD\u17CD\n\xFD\x03\xFE\x03\xFE\x03\xFE" +
		"\x03\xFE\x05\xFE\u17D3\n\xFE\x03\xFF\x05\xFF\u17D6\n\xFF\x03\xFF\x03\xFF" +
		"\x03\xFF\x03\xFF\x03\xFF\x03\xFF\x03\xFF\x05\xFF\u17DF\n\xFF\x05\xFF\u17E1" +
		"\n\xFF\x03\xFF\x03\xFF\x05\xFF\u17E5\n\xFF\x03\xFF\x03\xFF\x03\xFF\x03" +
		"\xFF\x03\xFF\x03\xFF\x03\xFF\x03\xFF\x03\xFF\x03\xFF\x03\xFF\x03\xFF\x03" +
		"\xFF\x03\xFF\x03\xFF\x05\xFF\u17F6\n\xFF\x03\u0100\x03\u0100\x03\u0100" +
		"\x03\u0100\x05\u0100\u17FC\n\u0100\x03\u0100\x03\u0100\x05\u0100\u1800" +
		"\n\u0100\x03\u0101\x03\u0101\x03\u0101\x03\u0101\x03\u0101\x03\u0101\x03" +
		"\u0101\x03\u0101\x03\u0101\x03\u0101\x03\u0101\x03\u0101\x05\u0101\u180E" +
		"\n\u0101\x03\u0102\x03\u0102\x03\u0102\x03\u0103\x03\u0103\x03\u0103\x03" +
		"\u0103\x03\u0103\x07\u0103\u1818\n\u0103\f\u0103\x0E\u0103\u181B\v\u0103" +
		"\x03\u0103\x03\u0103\x03\u0103\x03\u0103\x05\u0103\u1821\n\u0103\x03\u0103" +
		"\x05\u0103\u1824\n\u0103\x03\u0103\x03\u0103\x03\u0103\x03\u0104\x03\u0104" +
		"\x05\u0104\u182B\n\u0104\x03\u0104\x03\u0104\x03\u0104\x07\u0104\u1830" +
		"\n\u0104\f\u0104\x0E\u0104\u1833\v\u0104\x03\u0104\x03\u0104\x05\u0104" +
		"\u1837\n\u0104\x03\u0105\x03\u0105\x05\u0105\u183B\n\u0105\x03\u0105\x03" +
		"\u0105\x03\u0106\x03\u0106\x03\u0106\x03\u0106\x03\u0106\x03\u0106\x03" +
		"\u0106\x07\u0106\u1846\n\u0106\f\u0106\x0E\u0106\u1849\v\u0106\x03\u0107" +
		"\x03\u0107\x03\u0107\x03\u0107\x03\u0108\x03\u0108\x03\u0109\x03\u0109" +
		"\x05\u0109\u1853\n\u0109\x03\u0109\x03\u0109\x03\u0109\x03\u0109\x05\u0109" +
		"\u1859\n\u0109\x03\u010A\x03\u010A\x03\u010A\x05\u010A\u185E\n\u010A\x03" +
		"\u010A\x03\u010A\x03\u010A\x03\u010A\x03\u010A\x03\u010A\x03\u010A\x03" +
		"\u010A\x03\u010A\x03\u010A\x03\u010A\x05\u010A\u186B\n\u010A\x05\u010A" +
		"\u186D\n\u010A\x03\u010A\x03\u010A\x03\u010A\x05\u010A\u1872\n\u010A\x03" +
		"\u010A\x03\u010A\x05\u010A\u1876\n\u010A\x03\u010A\x05\u010A\u1879\n\u010A" +
		"\x05\u010A\u187B\n\u010A\x03\u010B\x03\u010B\x03\u010B\x03\u010B\x03\u010B" +
		"\x05\u010B\u1882\n\u010B\x03\u010C\x03\u010C\x03\u010C\x03\u010C\x03\u010C" +
		"\x05\u010C\u1889\n\u010C\x03\u010C\x05\u010C\u188C\n\u010C\x03\u010C\x05" +
		"\u010C\u188F\n\u010C\x03\u010C\x03\u010C\x03\u010C\x03\u010C\x05\u010C" +
		"\u1895\n\u010C\x03\u010C\x03\u010C\x05\u010C\u1899\n\u010C\x03\u010D\x03" +
		"\u010D\x03\u010D\x03\u010D\x05\u010D\u189F\n\u010D\x03\u010E\x03\u010E" +
		"\x03\u010E\x03\u010E\x05\u010E\u18A5\n\u010E\x03\u010E\x03\u010E\x03\u010F" +
		"\x03\u010F\x03\u010F\x03\u010F\x03\u0110\x03\u0110\x03\u0110\x03\u0111" +
		"\x03\u0111\x03\u0111\x03\u0112\x03\u0112\x03\u0112\x05\u0112\u18B6\n\u0112" +
		"\x03\u0112\x03\u0112\x03\u0112\x05\u0112\u18BB\n\u0112\x03\u0112\x03\u0112" +
		"\x03\u0112\x03\u0112\x07\u0112\u18C1\n\u0112\f\u0112\x0E\u0112\u18C4\v" +
		"\u0112\x05\u0112\u18C6\n\u0112\x03\u0113\x03\u0113\x03\u0113\x05\u0113" +
		"\u18CB\n\u0113\x03\u0113\x03\u0113\x03\u0113\x05\u0113\u18D0\n\u0113\x03" +
		"\u0113\x03\u0113\x03\u0113\x03\u0113\x07\u0113\u18D6\n\u0113\f\u0113\x0E" +
		"\u0113\u18D9\v\u0113\x05\u0113\u18DB\n\u0113\x03\u0114\x03\u0114\x03\u0114" +
		"\x03\u0114\x03\u0114\x03\u0114\x05\u0114\u18E3\n\u0114\x03\u0115\x03\u0115" +
		"\x05\u0115\u18E7\n\u0115\x03\u0115\x03\u0115\x03\u0115\x03\u0115\x03\u0115" +
		"\x03\u0115\x03\u0115\x03\u0115\x03\u0115\x07\u0115\u18F2\n\u0115\f\u0115" +
		"\x0E\u0115\u18F5\v\u0115\x03\u0115\x03\u0115\x03\u0115\x05\u0115\u18FA" +
		"\n\u0115\x03\u0115\x03\u0115\x03\u0115\x03\u0115\x03\u0115\x03\u0115\x03" +
		"\u0115\x03\u0115\x07\u0115\u1904\n\u0115\f\u0115\x0E\u0115\u1907\v\u0115" +
		"\x05\u0115\u1909\n\u0115\x03\u0116\x03\u0116\x03\u0117\x03\u0117\x03\u0117" +
		"\x03\u0117\x03\u0117\x05\u0117\u1912\n\u0117\x03\u0117\x03\u0117\x03\u0117" +
		"\x05\u0117\u1917\n\u0117\x03\u0118\x03\u0118\x03\u0118\x03\u0118\x05\u0118" +
		"\u191D\n\u0118\x03\u0119\x03\u0119\x03\u011A\x03\u011A\x05\u011A\u1923" +
		"\n\u011A\x03\u011B\x03\u011B\x03\u011B\x05\u011B\u1928\n\u011B\x05\u011B" +
		"\u192A\n\u011B\x03\u011B\x03\u011B\x03\u011B\x05\u011B\u192F\n\u011B\x05" +
		"\u011B\u1931\n\u011B\x03\u011C\x03\u011C\x05\u011C\u1935\n\u011C\x03\u011C" +
		"\x03\u011C\x03\u011C\x03\u011C\x05\u011C\u193B\n\u011C\x03\u011C\x05\u011C" +
		"\u193E\n\u011C\x03\u011C\x05\u011C\u1941\n\u011C\x03\u011D\x03\u011D\x03" +
		"\u011D\x03\u011D\x03\u011D\x03\u011D\x03\u011D\x05\u011D\u194A\n\u011D" +
		"\x03\u011E\x03\u011E\x03\u011F\x03\u011F\x03\u011F\x03\u011F\x05\u011F" +
		"\u1952\n\u011F\x03\u0120\x03\u0120\x05\u0120\u1956\n\u0120\x03\u0121\x03" +
		"\u0121\x03\u0121\x05\u0121\u195B\n\u0121\x03\u0122\x03\u0122\x03\u0123" +
		"\x03\u0123\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0124" +
		"\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0124\x03\u0124" +
		"\x03\u0124\x06\u0124\u196F\n\u0124\r\u0124\x0E\u0124\u1970\x03\u0125\x03" +
		"\u0125\x03\u0125\x03\u0125\x03\u0125\x05\u0125\u1978\n\u0125\x05\u0125" +
		"\u197A\n\u0125\x03\u0126\x03\u0126\x03\u0126\x06\u0126\u197F\n\u0126\r" +
		"\u0126\x0E\u0126\u1980\x05\u0126\u1983\n\u0126\x03\u0127\x03\u0127\x05" +
		"\u0127\u1987\n\u0127\x03\u0128\x03\u0128\x03\u0128\x05\u0128\u198C\n\u0128" +
		"\x03\u0129\x03\u0129\x03\u0129\x03\u0129\x03\u0129\x03\u0129\x03\u0129" +
		"\x03\u0129\x03\u0129\x05\u0129\u1997\n\u0129\x03\u012A\x03\u012A\x03\u012A" +
		"\x05\u012A\u199C\n\u012A\x03\u012B\x03\u012B\x03\u012C\x03\u012C\x05\u012C" +
		"\u19A2\n\u012C\x03\u012D\x05\u012D\u19A5\n\u012D\x03\u012D\x03\u012D\x05" +
		"\u012D\u19A9\n\u012D\x03\u012D\x06\u012D\u19AC\n\u012D\r\u012D\x0E\u012D" +
		"\u19AD\x03\u012D\x05\u012D\u19B1\n\u012D\x03\u012D\x03\u012D\x05\u012D" +
		"\u19B5\n\u012D\x03\u012D\x03\u012D\x05\u012D\u19B9\n\u012D\x05\u012D\u19BB" +
		"\n\u012D\x03\u012E\x03\u012E\x03\u012F\x05\u012F\u19C0\n\u012F\x03\u012F" +
		"\x03\u012F\x03\u0130\x05\u0130\u19C5\n\u0130\x03\u0130\x03\u0130\x03\u0131" +
		"\x03\u0131\x03\u0131\x03\u0131\x03\u0131\x03\u0131\x03\u0131\x03\u0131" +
		"\x03\u0131\x05\u0131\u19D2\n\u0131\x03\u0131\x05\u0131\u19D5\n\u0131\x03" +
		"\u0132\x03\u0132\x05\u0132\u19D9\n\u0132\x03\u0132\x05\u0132\u19DC\n\u0132" +
		"\x03\u0132\x05\u0132\u19DF\n\u0132\x03\u0132\x03\u0132\x03\u0132\x05\u0132" +
		"\u19E4\n\u0132\x03\u0132\x03\u0132\x03\u0132\x05\u0132\u19E9\n\u0132\x03" +
		"\u0132\x03\u0132\x03\u0132\x05\u0132\u19EE\n\u0132\x03\u0132\x05\u0132" +
		"\u19F1\n\u0132\x03\u0132\x03\u0132\x03\u0132\x05\u0132\u19F6\n\u0132\x03" +
		"\u0132\x05\u0132\u19F9\n\u0132\x03\u0132\x03\u0132\x03\u0132\x03\u0132" +
		"\x05\u0132\u19FF\n\u0132\x03\u0132\x05\u0132\u1A02\n\u0132\x03\u0132\x03" +
		"\u0132\x05\u0132\u1A06\n\u0132\x03\u0132\x07\u0132\u1A09\n\u0132\f\u0132" +
		"\x0E\u0132\u1A0C\v\u0132\x03\u0132\x03\u0132\x05\u0132\u1A10\n\u0132\x03" +
		"\u0132\x07\u0132\u1A13\n\u0132\f\u0132\x0E\u0132\u1A16\v\u0132\x03\u0132" +
		"\x03\u0132\x05\u0132\u1A1A\n\u0132\x03\u0132\x05\u0132\u1A1D\n\u0132\x03" +
		"\u0132\x07\u0132\u1A20\n\u0132\f\u0132\x0E\u0132\u1A23\v\u0132\x03\u0132" +
		"\x03\u0132\x05\u0132\u1A27\n\u0132\x03\u0132\x07\u0132\u1A2A\n\u0132\f" +
		"\u0132\x0E\u0132\u1A2D\v\u0132\x03\u0132\x03\u0132\x03\u0132\x05\u0132" +
		"\u1A32\n\u0132\x03\u0132\x03\u0132\x03\u0132\x05\u0132\u1A37\n\u0132\x03" +
		"\u0132\x03\u0132\x03\u0132\x05\u0132\u1A3C\n\u0132\x03\u0132\x03\u0132" +
		"\x03\u0132\x05\u0132\u1A41\n\u0132\x03\u0132\x05\u0132\u1A44\n\u0132\x03" +
		"\u0132\x03\u0132\x03\u0132\x05\u0132\u1A49\n\u0132\x03\u0132\x03\u0132" +
		"\x05\u0132\u1A4D\n\u0132\x03\u0132\x03\u0132\x05\u0132\u1A51\n\u0132\x03" +
		"\u0133\x03\u0133\x03\u0133\x03\u0133\x07\u0133\u1A57\n\u0133\f\u0133\x0E" +
		"\u0133\u1A5A\v\u0133\x03\u0133\x03\u0133\x03\u0134\x03\u0134\x05\u0134" +
		"\u1A60\n\u0134\x03\u0134\x03\u0134\x05\u0134\u1A64\n\u0134\x03\u0134\x03" +
		"\u0134\x03\u0134\x05\u0134\u1A69\n\u0134\x03\u0134\x03\u0134\x03\u0134" +
		"\x05\u0134\u1A6E\n\u0134\x03\u0134\x03\u0134\x05\u0134\u1A72\n\u0134\x05" +
		"\u0134\u1A74\n\u0134\x03\u0134\x05\u0134\u1A77\n\u0134\x03\u0135\x03\u0135" +
		"\x03\u0135\x03\u0135\x03\u0136\x03\u0136\x03\u0136\x03\u0136\x03\u0136" +
		"\x03\u0136\x03\u0137\x03\u0137\x03\u0137\x03\u0137\x05\u0137\u1A87\n\u0137" +
		"\x03\u0137\x03\u0137\x03\u0138\x03\u0138\x03\u0138\x07\u0138\u1A8E\n\u0138" +
		"\f\u0138\x0E\u0138\u1A91\v\u0138\x03\u0139\x03\u0139\x03\u0139\x07\u0139" +
		"\u1A96\n\u0139\f\u0139\x0E\u0139\u1A99\v\u0139\x03\u013A\x03\u013A\x03" +
		"\u013A\x03\u013A\x07\u013A\u1A9F\n\u013A\f\u013A\x0E\u013A\u1AA2\v\u013A" +
		"\x03\u013A\x03\u013A\x03\u013B\x03\u013B\x03\u013B\x07\u013B\u1AA9\n\u013B" +
		"\f\u013B\x0E\u013B\u1AAC\v\u013B\x03\u013C\x03\u013C\x03\u013C\x07\u013C" +
		"\u1AB1\n\u013C\f\u013C\x0E\u013C\u1AB4\v\u013C\x03\u013D\x03\u013D\x03" +
		"\u013D\x07\u013D\u1AB9\n\u013D\f\u013D\x0E\u013D\u1ABC\v\u013D\x03\u013E" +
		"\x03\u013E\x03\u013E\x07\u013E\u1AC1\n\u013E\f\u013E\x0E\u013E\u1AC4\v" +
		"\u013E\x03\u013F\x03\u013F\x03\u013F\x07\u013F\u1AC9\n\u013F\f\u013F\x0E" +
		"\u013F\u1ACC\v\u013F\x03\u0140\x03\u0140\x03\u0140\x03\u0140\x03\u0140" +
		"\x03\u0140\x03\u0140\x03\u0140\x03\u0140\x05\u0140\u1AD7\n\u0140\x03\u0140" +
		"\x03\u0140\x03\u0140\x03\u0140\x03\u0140\x05\u0140\u1ADE\n\u0140\x03\u0140" +
		"\x03\u0140\x03\u0140\x03\u0140\x03\u0140\x03\u0140\x03\u0140\x03\u0140" +
		"\x03\u0140\x03\u0140\x03\u0140\x03\u0140\x03\u0140\x03\u0140\x03\u0140";
	private static readonly _serializedATNSegment3: string =
		"\x03\u0140\x03\u0140\x05\u0140\u1AF1\n\u0140\x03\u0141\x03\u0141\x03\u0141" +
		"\x05\u0141\u1AF6\n\u0141\x03\u0141\x05\u0141\u1AF9\n\u0141\x03\u0141\x03" +
		"\u0141\x03\u0141\x05\u0141\u1AFE\n\u0141\x03\u0141\x05\u0141\u1B01\n\u0141" +
		"\x03\u0142\x03\u0142\x05\u0142\u1B05\n\u0142\x03\u0143\x03\u0143\x03\u0143" +
		"\x03\u0144\x03\u0144\x03\u0144\x03\u0144\x03\u0145\x03\u0145\x03\u0145" +
		"\x03\u0146\x03\u0146\x03\u0146\x05\u0146\u1B14\n\u0146\x03\u0147\x03\u0147" +
		"\x03\u0147\x05\u0147\u1B19\n\u0147\x03\u0148\x03\u0148\x03\u0148\x03\u0148" +
		"\x03\u0148\x03\u0148\x05\u0148\u1B21\n\u0148\x03\u0148\x03\u0148\x03\u0148" +
		"\x03\u0148\x03\u0148\x05\u0148\u1B28\n\u0148\x03\u0148\x03\u0148\x03\u0148" +
		"\x05\u0148\u1B2D\n\u0148\x03\u0149\x03\u0149\x03\u0149\x05\u0149\u1B32" +
		"\n\u0149\x03\u0149\x03\u0149\x03\u0149\x03\u0149\x03\u0149\x03\u0149\x03" +
		"\u0149\x03\u0149\x03\u0149\x03\u0149\x03\u0149\x03\u0149\x03\u0149\x03" +
		"\u0149\x03\u0149\x03\u0149\x03\u0149\x03\u0149\x03\u0149\x03\u0149\x03" +
		"\u0149\x03\u0149\x03\u0149\x03\u0149\x03\u0149\x03\u0149\x03\u0149\x03" +
		"\u0149\x03\u0149\x06\u0149\u1B51\n\u0149\r\u0149\x0E\u0149\u1B52\x03\u0149" +
		"\x03\u0149\x05\u0149\u1B57\n\u0149\x03\u0149\x03\u0149\x03\u0149\x03\u0149" +
		"\x06\u0149\u1B5D\n\u0149\r\u0149\x0E\u0149\u1B5E\x03\u0149\x03\u0149\x05" +
		"\u0149\u1B63\n\u0149\x03\u0149\x03\u0149\x03\u0149\x03\u0149\x03\u0149" +
		"\x03\u0149\x03\u0149\x05\u0149\u1B6C\n\u0149\x03\u0149\x03\u0149\x03\u0149" +
		"\x03\u0149\x03\u0149\x03\u0149\x05\u0149\u1B74\n\u0149\x03\u0149\x03\u0149" +
		"\x03\u0149\x05\u0149\u1B79\n\u0149\x03\u0149\x03\u0149\x03\u0149\x03\u0149" +
		"\x03\u0149\x03\u0149\x05\u0149\u1B81\n\u0149\x03\u0149\x03\u0149\x03\u0149" +
		"\x05\u0149\u1B86\n\u0149\x03\u0149\x03\u0149\x03\u0149\x05\u0149\u1B8B" +
		"\n\u0149\x05\u0149\u1B8D\n\u0149\x03\u0149\x03\u0149\x03\u0149\x03\u0149" +
		"\x03\u0149\x03\u0149\x03\u0149\x05\u0149\u1B96\n\u0149\x03\u0149\x03\u0149" +
		"\x03\u0149\x05\u0149\u1B9B\n\u0149\x03\u0149\x03\u0149\x03\u0149\x03\u0149" +
		"\x03\u0149\x03\u0149\x05\u0149\u1BA3\n\u0149\x03\u0149\x03\u0149\x03\u0149" +
		"\x05\u0149\u1BA8\n\u0149\x03\u0149\x03\u0149\x03\u0149\x03\u0149\x03\u0149" +
		"\x03\u0149\x05\u0149\u1BB0\n\u0149\x03\u0149\x03\u0149\x03\u0149\x03\u0149" +
		"\x03\u0149\x03\u0149\x05\u0149\u1BB8\n\u0149\x03\u0149\x05\u0149\u1BBB" +
		"\n\u0149\x03\u0149\x03\u0149\x03\u0149\x03\u0149\x03\u0149\x03\u0149\x03" +
		"\u0149\x03\u0149\x05\u0149\u1BC5\n\u0149\x03\u0149\x03\u0149\x03\u0149" +
		"\x03\u0149\x03\u0149\x03\u0149\x03\u0149\x03\u0149\x03\u0149\x03\u0149" +
		"\x03\u0149\x03\u0149\x03\u0149\x03\u0149\x03\u0149\x03\u0149\x05\u0149" +
		"\u1BD7\n\u0149\x03\u0149\x05\u0149\u1BDA\n\u0149\x03\u0149\x05\u0149\u1BDD" +
		"\n\u0149\x03\u0149\x03\u0149\x05\u0149\u1BE1\n\u0149\x03\u014A\x03\u014A" +
		"\x03\u014A\x03\u014A\x03\u014A\x03\u014B\x03\u014B\x03\u014B\x03\u014B" +
		"\x07\u014B\u1BEC\n\u014B\f\u014B\x0E\u014B\u1BEF\v\u014B\x03\u014B\x03" +
		"\u014B\x03\u014B\x03\u014B\x03\u014B\x05\u014B\u1BF6\n\u014B\x03\u014C" +
		"\x03\u014C\x05\u014C\u1BFA\n\u014C\x03\u014D\x03\u014D\x03\u014D\x05\u014D" +
		"\u1BFF\n\u014D\x03\u014D\x03\u014D\x03\u014D\x05\u014D\u1C04\n\u014D\x03" +
		"\u014D\x03\u014D\x03\u014D\x03\u014D\x05\u014D\u1C0A\n\u014D\x03\u014D" +
		"\x03\u014D\x03\u014D\x05\u014D\u1C0F\n\u014D\x03\u014D\x03\u014D\x05\u014D" +
		"\u1C13\n\u014D\x03\u014D\x03\u014D\x03\u014D\x05\u014D\u1C18\n\u014D\x03" +
		"\u014D\x03\u014D\x03\u014D\x05\u014D\u1C1D\n\u014D\x03\u014D\x03\u014D" +
		"\x03\u014D\x05\u014D\u1C22\n\u014D\x03\u014D\x03\u014D\x03\u014D\x03\u014D" +
		"\x03\u014D\x03\u014D\x07\u014D\u1C2A\n\u014D\f\u014D\x0E\u014D\u1C2D\v" +
		"\u014D\x05\u014D\u1C2F\n\u014D\x03\u014D\x03\u014D\x05\u014D\u1C33\n\u014D" +
		"\x03\u014D\x03\u014D\x05\u014D\u1C37\n\u014D\x03\u014E\x03\u014E\x03\u014E" +
		"\x03\u014E\x03\u014E\x05\u014E\u1C3E\n\u014E\x03\u014E\x03\u014E\x05\u014E" +
		"\u1C42\n\u014E\x03\u014E\x03\u014E\x03\u014E\x03\u014E\x03\u014E\x03\u014E" +
		"\x03\u014E\x03\u014E\x03\u014E\x03\u014E\x03\u014E\x03\u014E\x03\u014E" +
		"\x03\u014E\x03\u014E\x03\u014E\x03\u014E\x03\u014E\x03\u014E\x03\u014E" +
		"\x03\u014E\x03\u014E\x03\u014E\x03\u014E\x03\u014E\x03\u014E\x05\u014E" +
		"\u1C5E\n\u014E\x03\u014F\x03\u014F\x03\u014F\x05\u014F\u1C63\n\u014F\x03" +
		"\u014F\x03\u014F\x05\u014F\u1C67\n\u014F\x03\u0150\x05\u0150\u1C6A\n\u0150" +
		"\x03\u0150\x05\u0150\u1C6D\n\u0150\x03\u0150\x05\u0150\u1C70\n\u0150\x03" +
		"\u0150\x05\u0150\u1C73\n\u0150\x03\u0151\x03\u0151\x03\u0152\x03\u0152" +
		"\x03\u0152\x03\u0153\x03\u0153\x03\u0154\x03\u0154\x05\u0154\u1C7E\n\u0154" +
		"\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0155\x03\u0156\x03\u0156" +
		"\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x03\u0156\x05\u0156\u1C8C\n\u0156" +
		"\x03\u0157\x03\u0157\x03\u0157\x03\u0157\x03\u0157\x07\u0157\u1C93\n\u0157" +
		"\f\u0157\x0E\u0157\u1C96\v\u0157\x03\u0158\x03\u0158\x03\u0158\x03\u0158" +
		"\x03\u0158\x03\u0158\x03\u0158\x03\u0158\x03\u0158\x03\u0158\x03\u0158" +
		"\x03\u0158\x03\u0158\x03\u0158\x03\u0158\x03\u0158\x03\u0158\x03\u0158" +
		"\x03\u0158\x03\u0158\x03\u0158\x03\u0158\x03\u0158\x05\u0158\u1CAF\n\u0158" +
		"\x03\u0159\x03\u0159\x03\u0159\x03\u0159\x03\u0159\x03\u015A\x03\u015A" +
		"\x03\u015A\x03\u015A\x05\u015A\u1CBA\n\u015A\x03\u015A\x03\u015A\x03\u015A" +
		"\x03\u015A\x03\u015A\x05\u015A\u1CC1\n\u015A\x07\u015A\u1CC3\n\u015A\f" +
		"\u015A\x0E\u015A\u1CC6\v\u015A\x03\u015B\x03\u015B\x03\u015B\x03\u015B" +
		"\x05\u015B\u1CCC\n\u015B\x03\u015C\x03\u015C\x03\u015C\x03\u015C\x03\u015C" +
		"\x03\u015C\x05\u015C\u1CD4\n\u015C\x03\u015C\x03\u015C\x03\u015C\x05\u015C" +
		"\u1CD9\n\u015C\x03\u015C\x03\u015C\x03\u015C\x03\u015C\x07\u015C\u1CDF" +
		"\n\u015C\f\u015C\x0E\u015C\u1CE2\v\u015C\x03\u015D\x03\u015D\x03\u015D" +
		"\x05\u015D\u1CE7\n\u015D\x03\u015D\x03\u015D\x03\u015D\x03\u015D\x03\u015D" +
		"\x03\u015D\x03\u015D\x03\u015D\x05\u015D\u1CF1\n\u015D\x03\u015D\x03\u015D" +
		"\x03\u015D\x03\u015D\x03\u015D\x03\u015D\x03\u015D\x03\u015D\x03\u015D" +
		"\x03\u015D\x03\u015D\x05\u015D\u1CFE\n\u015D\x03\u015D\x03\u015D\x03\u015D" +
		"\x03\u015D\x05\u015D\u1D04\n\u015D\x03\u015D\x03\u015D\x03\u015D\x03\u015D" +
		"\x05\u015D\u1D0A\n\u015D\x03\u015D\x03\u015D\x03\u015D\x03\u015D\x03\u015D" +
		"\x03\u015D\x03\u015D\x03\u015D\x03\u015D\x03\u015D\x03\u015D\x03\u015D" +
		"\x03\u015D\x03\u015D\x05\u015D\u1D1A\n\u015D\x03\u015D\x03\u015D\x03\u015D" +
		"\x03\u015D\x05\u015D\u1D20\n\u015D\x03\u015D\x03\u015D\x03\u015D\x03\u015D" +
		"\x03\u015D\x03\u015D\x03\u015D\x07\u015D\u1D29\n\u015D\f\u015D\x0E\u015D" +
		"\u1D2C\v\u015D\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E" +
		"\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E" +
		"\x03\u015E\x07\u015E\u1D3C\n\u015E\f\u015E\x0E\u015E\u1D3F\v\u015E\x03" +
		"\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x06" +
		"\u015E\u1D48\n\u015E\r\u015E\x0E\u015E\u1D49\x03\u015E\x03\u015E\x03\u015E" +
		"\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E" +
		"\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x05\u015E\u1D5B\n\u015E" +
		"\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E" +
		"\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E\x03\u015E" +
		"\x03\u015E\x07\u015E\u1D6C\n\u015E\f\u015E\x0E\u015E\u1D6F\v\u015E\x03" +
		"\u015F\x03\u015F\x03\u0160\x03\u0160\x03\u0160\x03\u0160\x03\u0160\x03" +
		"\u0160\x03\u0160\x03\u0160\x03\u0160\x03\u0160\x03\u0160\x03\u0160\x03" +
		"\u0160\x03\u0160\x05\u0160\u1D81\n\u0160\x03\u0161\x03\u0161\x03\u0161" +
		"\x03\u0161\x03\u0161\x03\u0161\x03\u0161\x05\u0161\u1D8A\n\u0161\x03\u0162" +
		"\x03\u0162\x03\u0162\x03\u0162\x03\u0162\x03\u0162\x03\u0162\x05\u0162" +
		"\u1D93\n\u0162\x03\u0163\x03\u0163\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x05\u0164\u1D9C\n\u0164\x03\u0165\x03\u0165\x03\u0166\x03\u0166" +
		"\x03\u0167\x03\u0167\x03\u0168\x03\u0168\x03\u0169\x03\u0169\x03\u016A" +
		"\x03\u016A\x03\u016B\x03\u016B\x03\u016B\x02\x02\x05\u02B6\u02B8\u02BA" +
		"\u016C\x02\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02\x0E\x02\x10\x02\x12\x02" +
		"\x14\x02\x16\x02\x18\x02\x1A\x02\x1C\x02\x1E\x02 \x02\"\x02$\x02&\x02" +
		"(\x02*\x02,\x02.\x020\x022\x024\x026\x028\x02:\x02<\x02>\x02@\x02B\x02" +
		"D\x02F\x02H\x02J\x02L\x02N\x02P\x02R\x02T\x02V\x02X\x02Z\x02\\\x02^\x02" +
		"`\x02b\x02d\x02f\x02h\x02j\x02l\x02n\x02p\x02r\x02t\x02v\x02x\x02z\x02" +
		"|\x02~\x02\x80\x02\x82\x02\x84\x02\x86\x02\x88\x02\x8A\x02\x8C\x02\x8E" +
		"\x02\x90\x02\x92\x02\x94\x02\x96\x02\x98\x02\x9A\x02\x9C\x02\x9E\x02\xA0" +
		"\x02\xA2\x02\xA4\x02\xA6\x02\xA8\x02\xAA\x02\xAC\x02\xAE\x02\xB0\x02\xB2" +
		"\x02\xB4\x02\xB6\x02\xB8\x02\xBA\x02\xBC\x02\xBE\x02\xC0\x02\xC2\x02\xC4" +
		"\x02\xC6\x02\xC8\x02\xCA\x02\xCC\x02\xCE\x02\xD0\x02\xD2\x02\xD4\x02\xD6" +
		"\x02\xD8\x02\xDA\x02\xDC\x02\xDE\x02\xE0\x02\xE2\x02\xE4\x02\xE6\x02\xE8" +
		"\x02\xEA\x02\xEC\x02\xEE\x02\xF0\x02\xF2\x02\xF4\x02\xF6\x02\xF8\x02\xFA" +
		"\x02\xFC\x02\xFE\x02\u0100\x02\u0102\x02\u0104\x02\u0106\x02\u0108\x02" +
		"\u010A\x02\u010C\x02\u010E\x02\u0110\x02\u0112\x02\u0114\x02\u0116\x02" +
		"\u0118\x02\u011A\x02\u011C\x02\u011E\x02\u0120\x02\u0122\x02\u0124\x02" +
		"\u0126\x02\u0128\x02\u012A\x02\u012C\x02\u012E\x02\u0130\x02\u0132\x02" +
		"\u0134\x02\u0136\x02\u0138\x02\u013A\x02\u013C\x02\u013E\x02\u0140\x02" +
		"\u0142\x02\u0144\x02\u0146\x02\u0148\x02\u014A\x02\u014C\x02\u014E\x02" +
		"\u0150\x02\u0152\x02\u0154\x02\u0156\x02\u0158\x02\u015A\x02\u015C\x02" +
		"\u015E\x02\u0160\x02\u0162\x02\u0164\x02\u0166\x02\u0168\x02\u016A\x02" +
		"\u016C\x02\u016E\x02\u0170\x02\u0172\x02\u0174\x02\u0176\x02\u0178\x02" +
		"\u017A\x02\u017C\x02\u017E\x02\u0180\x02\u0182\x02\u0184\x02\u0186\x02" +
		"\u0188\x02\u018A\x02\u018C\x02\u018E\x02\u0190\x02\u0192\x02\u0194\x02" +
		"\u0196\x02\u0198\x02\u019A\x02\u019C\x02\u019E\x02\u01A0\x02\u01A2\x02" +
		"\u01A4\x02\u01A6\x02\u01A8\x02\u01AA\x02\u01AC\x02\u01AE\x02\u01B0\x02" +
		"\u01B2\x02\u01B4\x02\u01B6\x02\u01B8\x02\u01BA\x02\u01BC\x02\u01BE\x02" +
		"\u01C0\x02\u01C2\x02\u01C4\x02\u01C6\x02\u01C8\x02\u01CA\x02\u01CC\x02" +
		"\u01CE\x02\u01D0\x02\u01D2\x02\u01D4\x02\u01D6\x02\u01D8\x02\u01DA\x02" +
		"\u01DC\x02\u01DE\x02\u01E0\x02\u01E2\x02\u01E4\x02\u01E6\x02\u01E8\x02" +
		"\u01EA\x02\u01EC\x02\u01EE\x02\u01F0\x02\u01F2\x02\u01F4\x02\u01F6\x02" +
		"\u01F8\x02\u01FA\x02\u01FC\x02\u01FE\x02\u0200\x02\u0202\x02\u0204\x02" +
		"\u0206\x02\u0208\x02\u020A\x02\u020C\x02\u020E\x02\u0210\x02\u0212\x02" +
		"\u0214\x02\u0216\x02\u0218\x02\u021A\x02\u021C\x02\u021E\x02\u0220\x02" +
		"\u0222\x02\u0224\x02\u0226\x02\u0228\x02\u022A\x02\u022C\x02\u022E\x02" +
		"\u0230\x02\u0232\x02\u0234\x02\u0236\x02\u0238\x02\u023A\x02\u023C\x02" +
		"\u023E\x02\u0240\x02\u0242\x02\u0244\x02\u0246\x02\u0248\x02\u024A\x02" +
		"\u024C\x02\u024E\x02\u0250\x02\u0252\x02\u0254\x02\u0256\x02\u0258\x02" +
		"\u025A\x02\u025C\x02\u025E\x02\u0260\x02\u0262\x02\u0264\x02\u0266\x02" +
		"\u0268\x02\u026A\x02\u026C\x02\u026E\x02\u0270\x02\u0272\x02\u0274\x02" +
		"\u0276\x02\u0278\x02\u027A\x02\u027C\x02\u027E\x02\u0280\x02\u0282\x02" +
		"\u0284\x02\u0286\x02\u0288\x02\u028A\x02\u028C\x02\u028E\x02\u0290\x02" +
		"\u0292\x02\u0294\x02\u0296\x02\u0298\x02\u029A\x02\u029C\x02\u029E\x02" +
		"\u02A0\x02\u02A2\x02\u02A4\x02\u02A6\x02\u02A8\x02\u02AA\x02\u02AC\x02" +
		"\u02AE\x02\u02B0\x02\u02B2\x02\u02B4\x02\u02B6\x02\u02B8\x02\u02BA\x02" +
		"\u02BC\x02\u02BE\x02\u02C0\x02\u02C2\x02\u02C4\x02\u02C6\x02\u02C8\x02" +
		"\u02CA\x02\u02CC\x02\u02CE\x02\u02D0\x02\u02D2\x02\u02D4\x02\x02\x9B\x04" +
		"\x02**\x99\x99\x04\x02\u0216\u0216\u021C\u021C\x05\x02GG\xA1\xA1\xB7\xB7" +
		"\x07\x02--\u0182\u0182\u01C8\u01C8\u01CC\u01CC\u020E\u020E\x06\x02--\u01A5" +
		"\u01A5\u0214\u0214\u0267\u0267\x04\x02\u0205\u0205\u0493\u0493\x04\x02" +
		"PP\x90\x90\x04\x02\x11\x11\u0150\u0150\x05\x02//WW\xBA\xBA\x04\x02\u01B4" +
		"\u01B4\u0231\u0231\x05\x02\u01FD\u01FD\u028F\u028F\u0298\u0298\x04\x02" +
		"\u018A\u018A\u01CE\u01CE\x04\x02\u0162\u0162\u01DC\u01DC\x04\x02\x16\x16" +
		"\u047B\u047B\x04\x02\xC2\xC2\u047B\u047B\x04\x02--\u0489\u048A\x05\x02" +
		"\u0160\u0160\u01BD\u01BD\u025F\u025F\x04\x02\u01CD\u01CD\u02A7\u02A7\x04" +
		"\x02\u020C\u020C\u02B3\u02B3\x05\x02RRVV\x7F\x7F\x05\x02--\u0194\u0194" +
		"\u01B1\u01B1\x05\x02--\u0190\u0190\u0321\u0321\x05\x02\u0282\u0282\u02A6" +
		"\u02A6\u0460\u0460\x04\x02SS]]\x05\x02\u01B6\u01B6\u0227\u0227\u0269\u0269" +
		"\x04\x02GG\xA1\xA1\x03\x02\u0166\u0167\x03\x02\u0489\u048A\x04\x02\u0493" +
		"\u0493\u049B\u049B\x04\x02SS\u0186\u0186\x04\x02\u0224\u0224\u0493\u0493" +
		"\x04\x02\u0225\u0225\u0493\u0493\x05\x02\u01B0\u01B0\u01D7\u01D7\u020C" +
		"\u020C\t\x02--\u0174\u0174\u0176\u0176\u0194\u0194\u01B1\u01B1\u0241\u0241" +
		"\u049B\u049B\x04\x02\u0205\u0205\u0215\u0215\x03\x02\u048A\u048B\x04\x02" +
		"\x07\x0766\x06\x02--\u0182\u0182\u01C8\u01C8\u01CC\u01CC\x04\x02\x1D\x1D" +
		"!!\x04\x02\x0E\x0E\xB1\xB1\x04\x02\xC2\xC2\u02AB\u02AB\x05\x02--\u0182" +
		"\u0182\u01C8\u01C8\x04\x02\x18\x18\x93\x93\x05\x02..MMll\x04\x02ll\u0178" +
		"\u0178\x04\x02\u016F\u016F\u01AD\u01AD\x04\x02gg\u025D\u025D\x04\x02." +
		".ll\x04\x02\b\b44\x04\x02\xBE\xBE\u02A3\u02A3\x06\x02\u01B0\u01B0\u01D7" +
		"\u01D7\u020B\u020B\u0235\u0235\x04\x02\u01B0\u01B0\u020B\u020B\x04\x02" +
		"\x0F\x0F00\x05\x02DDPP\xBC\xBC\x04\x02%%UU\x04\x02cc\x97\x97\x04\x02\b" +
		"\b45\x03\x02\u0277\u0278\x04\x02\xAE\xAE\u02EF\u02EF\x04\x02\u01B9\u01B9" +
		"\u0265\u0265\x04\x02\xE4\xE4\u01E0\u01E0\x07\x02mm\u01E5\u01E6\u01E8\u01E8" +
		"\u01EC\u01F4\u0243\u0243\x06\x02\u01E2\u01E3\u01E7\u01E7\u01E9\u01EA\u0244" +
		"\u0244\x05\x02nn\u01E1\u01E1\u01EB\u01EB\x04\x02\u01D0\u01D0\u0279\u0279" +
		"\x04\x02\u0273\u0273\u0275\u0275\x04\x02\u015A\u015A\u027A\u027A\x04\x02" +
		"\\\\\u0253\u0253\x04\x0266\u0188\u0188\x05\x02\"\"??\xB5\xB5\x05\x02\x86" +
		"\x86\xAE\xAE\u01B7\u01B7\x04\x02\xC2\xC2\u045B\u045B\x05\x02\x0E\x0E\x16" +
		"\x16\xBD\xBD\x04\x02\x0E\x0E\xBD\xBD\x04\x02--{{\x04\x02ii\xB8\xB8\x06" +
		"\x02\u016A\u016A\u01E0\u01E0\u026A\u026A\u0465\u0465\x05\x02++\x9A\x9A" +
		"\u02A5\u02A5\x05\x02\u02C5\u02C5\u0468\u0468\u046A\u046A\x04\x02uu\u01DC" +
		"\u01DC\x04\x02\u01A8\u01A8\u023C\u023C\x06\x02\xD0\xD0\xD2\xD2\xD8\xD8" +
		"\u0283\u0283\x04\x02\u046B\u046B\u047B\u047B\x04\x02FFRR\t\x02\x86\x86" +
		"\xAE\xAE\xB3\xB3\u01A1\u01A1\u01B7\u01B7\u0263\u0263\u02A5\u02A5\x04\x02" +
		"\u0204\u0204\u027F\u027F\x04\x02\u019E\u019E\u02A9\u02A9\x04\x02\x86\x86" +
		"\u01B7\u01B7\x05\x02SS^^\u01C6\u01C6\x04\x02\u026A\u026A\u0465\u0465\x03" +
		"\x02\u02C1\u02C4\x05\x02\u01B9\u01B9\u01DC\u01DC\u0265\u0265\x04\x02\u027F" +
		"\u027F\u02A4\u02A4\x04\x02\u015B\u015B\u01E0\u01E0\x04\x02\u026B\u026B" +
		"\u0466\u0466\x04\x02\u017A\u017A\u023A\u023A\b\x02\xE4\xE4\u019B\u019B" +
		"\u019D\u019D\u01B8\u01B8\u0242\u0242\u026C\u026C\x04\x0201@@\x05\x02\u01A8" +
		"\u01A8\u0229\u0229\u037E\u037E\x04\x02\u01D4\u01D4\u0291\u0291\f\x02\u0169" +
		"\u0169\u0171\u0171\u017C\u017E\u0185\u0185\u01FE\u01FE\u0206\u0206\u0284" +
		"\u0284\u028B\u028B\u034D\u034D\u03F5\u03F5\x04\x02&&\xAA\xAA\x04\x02w" +
		"w\u03EC\u03EC\r\x02\u0169\u0169\u0171\u0171\u017C\u017E\u0185\u0185\u01FE" +
		"\u01FE\u0206\u0206\u0254\u0254\u0284\u0284\u028B\u028B\u034D\u034D\u03F5" +
		"\u03F5\x03\x02\u04A0\u04A1\x04\x02\u0179\u0179\u031C\u0327\x04\x02\u0196" +
		"\u0196\u0493\u0493\x05\x02\u0489\u048B\u0494\u0494\u0496\u0496\x04\x02" +
		"AA\xB4\xB4\x04\x02vv\u0497\u0497\x07\x02\x1C\x1C\xE0\xE2\xE9\xE9\xEB\xEE" +
		"\u0209\u0209\x04\x02\x1C\x1C\xE1\xE1\x04\x02\x1C\x1C\xE0\xE0\x03\x02\xC6" +
		"\xD1\x05\x02\xB9\xB9\xC5\xC5\u0268\u0268\x04\x02\xD5\xDA\u01B1\u01B1\b" +
		"\x02\xDB\xDB\xE6\xE6\xE8\xE8\xEA\xEA\xF1\xF1\u015E\u015F\x06\x02\xDC\xDF" +
		"\xE4\xE5\xE7\xE7\u015C\u015C\x04\x02\x9C\x9C\xEF\xEF\x04\x02\u01D4\u01D4" +
		"\u032C\u0334\x04\x02\xE4\xE4\u0209\u0209\x07\x02\xCA\xCA\xD0\xD0\xDB\xDC" +
		"\xDE\xDE\u01D4\u01D4\x04\x02\xB9\xB9\u0268\u0268\x03\x02\u045C\u045D\x04" +
		"\x02\u020B\u020B\u045F\u045F\x04\x02\u013D\u0140\u0144\u0144\x06\x02(" +
		"(\x99\x99\u013B\u0140\u014D\u014D\x03\x02\u0147\u0148\x05\x02\x14\x14" +
		"aa\xB2\xB2\x04\x02\xE0\xE0\xE4\xE4\x04\x02\xDB\xDC\xDE\xDE\x05\x02\x0F" +
		"\x0F00\u03EA\u03EA\x05\x02\u0120\u0120\u012C\u012D\u0137\u0137\x05\x02" +
		"\u0121\u0123\u0133\u0136\u0138\u013A\x04\x02\u0129\u0129\u012B\u012B\x04" +
		"\x02\u0127\u0127\u012A\u012A\x04\x02\u0125\u0126\u0130\u0132\x04\x02\x88" +
		"\x88\u025D\u025D\x04\x02\u01B3\u01B3\u0232\u0232\x04\x02\u021A\u021A\u022A" +
		"\u022A\x04\x02tt\u047E\u047E\x05\x02AA\xB4\xB4\u029C\u029C\x04\x02\x8C" +
		"\x8C\x98\x98\x05\x02\b\b\u0153\u0153\u026F\u026F\x05\x02tt\u0477\u0478" +
		"\u047E\u047F\x03\x02\u0474\u047A\x04\x02\xE4\xE4\u02F3\u031B\x03\x02\u0328" +
		"\u032B\x07\x02\u02CE\u02CF\u02DE\u02E0\u02E6\u02E6\u02EC\u02ED\u02EF\u02EF" +
		"\x03\x02\u02B9\u02C0\x05\x02\xDB\xDF\xEC\xEC\xEF\xEF6\x02\x10\x10\x13" +
		"\x13\x15\x15  &(--33::==KKQQ``jjpqww{{~~\x84\x85\xA0\xA0\xAA\xAA\xAC\xAC" +
		"\xF1\xF1\u011D\u0124\u0128\u0128\u012C\u012D\u0133\u013A\u014E\u01B2\u01B4" +
		"\u01CC\u01CE\u0223\u0226\u0231\u0233\u0254\u0256\u0281\u0283\u02A6\u02A8" +
		"\u02A9\u02AB\u02B2\u02B4\u02B8\u02C1\u02C5\u02C7\u02CD\u02D0\u02D1\u02D6" +
		"\u02D7\u02D9\u02DD\u02E1\u02E5\u02E7\u02E7\u02E9\u02EB\u02EE\u02EE\u02F0" +
		"\u02F2\u0321\u0321\u034D\u034D\u0374\u0374\u03F0\u03F0\u03F5\u03F5\u045B" +
		"\u046A\x19\x02**cc\x97\x97\x99\x99\xDB\xDD\xDF\xDF\xFD\u011C\u0124\u0127" +
		"\u0129\u012B\u012E\u0132\u0146\u0146\u01CD\u01CD\u02A7\u02A7\u02B9\u02C0" +
		"\u02E9\u02E9\u032C\u032C\u032F\u034C\u034E\u0373\u0375\u03EF\u03F1\u03F4" +
		"\u03F6\u045A\u045C\u045E\u047A\u047A\x02\u2313\x02\u02D7\x03\x02\x02\x02" +
		"\x04\u02EA\x03\x02\x02\x02\x06\u02F9\x03\x02\x02\x02\b\u0304\x03\x02\x02" +
		"\x02\n\u0314\x03\x02\x02\x02\f\u033F\x03\x02\x02\x02\x0E\u034C\x03\x02" +
		"\x02\x02\x10\u0357\x03\x02\x02\x02\x12\u0368\x03\x02\x02\x02\x14\u036D" +
		"\x03\x02\x02\x02\x16\u0379\x03\x02\x02\x02\x18\u0395\x03\x02\x02\x02\x1A" +
		"\u039E\x03\x02\x02\x02\x1C\u03A0\x03\x02\x02\x02\x1E\u03AC\x03\x02\x02" +
		"\x02 \u03CA\x03\x02\x02\x02\"\u03F7\x03\x02\x02\x02$\u042A\x03\x02\x02" +
		"\x02&\u0447\x03\x02\x02\x02(\u046E\x03\x02\x02\x02*\u047B\x03\x02\x02" +
		"\x02,\u04E5\x03\x02\x02\x02.\u04E7\x03\x02\x02\x020\u04F9\x03\x02\x02" +
		"\x022\u0536\x03\x02\x02\x024\u054C\x03\x02\x02\x026\u0552\x03\x02\x02" +
		"\x028\u0568\x03\x02\x02\x02:\u056A\x03\x02\x02\x02<\u056C\x03\x02\x02" +
		"\x02>\u059B\x03\x02\x02\x02@\u05D5\x03\x02\x02\x02B\u05F8\x03\x02\x02" +
		"\x02D\u05FF\x03\x02\x02\x02F\u0601\x03\x02\x02\x02H\u0606\x03\x02\x02" +
		"\x02J\u062F\x03\x02\x02\x02L\u0635\x03\x02\x02\x02N\u0637\x03\x02\x02" +
		"\x02P\u064C\x03\x02\x02\x02R\u0653\x03\x02\x02\x02T\u0655\x03\x02\x02" +
		"\x02V\u0676\x03\x02\x02\x02X\u0679\x03\x02\x02\x02Z\u067E\x03\x02\x02" +
		"\x02\\\u0698\x03\x02\x02\x02^\u06A8\x03\x02\x02\x02`\u06AA\x03\x02\x02" +
		"\x02b\u06BA\x03\x02\x02\x02d\u06BC\x03\x02\x02\x02f\u06F8\x03\x02\x02" +
		"\x02h\u073F\x03\x02\x02\x02j\u0741\x03\x02\x02\x02l\u075D\x03\x02\x02" +
		"\x02n\u0765\x03\x02\x02\x02p\u0783\x03\x02\x02\x02r\u0844\x03\x02\x02" +
		"\x02t\u0846\x03\x02\x02\x02v\u0848\x03\x02\x02\x02x\u084B\x03\x02\x02" +
		"\x02z\u0895\x03\x02\x02\x02|\u08AC\x03\x02\x02\x02~\u0940\x03\x02\x02" +
		"\x02\x80\u0945\x03\x02\x02\x02\x82\u0947\x03\x02\x02\x02\x84\u0951\x03" +
		"\x02\x02\x02\x86\u0989\x03\x02\x02\x02\x88\u099D\x03\x02\x02\x02\x8A\u099F" +
		"\x03\x02\x02\x02\x8C\u09C2\x03\x02\x02\x02\x8E\u09CB\x03\x02\x02\x02\x90" +
		"\u09D2\x03\x02\x02\x02\x92\u09E9\x03\x02\x02\x02\x94\u09F2\x03\x02\x02" +
		"\x02\x96\u0A01\x03\x02\x02\x02\x98\u0A1A\x03\x02\x02\x02\x9A\u0A2E\x03" +
		"\x02\x02\x02\x9C\u0A4E\x03\x02\x02\x02\x9E\u0B99\x03\x02\x02\x02\xA0\u0C03" +
		"\x03\x02\x02\x02\xA2\u0C05\x03\x02\x02\x02\xA4\u0C0C\x03\x02\x02\x02\xA6" +
		"\u0C13\x03\x02\x02\x02\xA8\u0C30\x03\x02\x02\x02\xAA\u0C38\x03\x02\x02" +
		"\x02\xAC\u0C3F\x03\x02\x02\x02\xAE\u0C46\x03\x02\x02\x02\xB0\u0C4D\x03" +
		"\x02\x02\x02\xB2\u0C5C\x03\x02\x02\x02\xB4\u0C66\x03\x02\x02\x02\xB6\u0C6D" +
		"\x03\x02\x02\x02\xB8\u0C7D\x03\x02\x02\x02\xBA\u0CAB\x03\x02\x02\x02\xBC" +
		"\u0CAD\x03\x02\x02\x02\xBE\u0CC0\x03\x02\x02\x02\xC0\u0CCA\x03\x02\x02" +
		"\x02\xC2\u0CD1\x03\x02\x02\x02\xC4\u0CD9\x03\x02\x02\x02\xC6\u0CE5\x03" +
		"\x02\x02\x02\xC8\u0CE7\x03\x02\x02\x02\xCA\u0CEE\x03\x02\x02\x02\xCC\u0CF0" +
		"\x03\x02\x02\x02\xCE\u0D23\x03\x02\x02\x02\xD0\u0D6D\x03\x02\x02\x02\xD2" +
		"\u0DA8\x03\x02\x02\x02\xD4\u0E07\x03\x02\x02\x02\xD6\u0E0B\x03\x02\x02" +
		"\x02\xD8\u0E0D\x03\x02\x02\x02\xDA\u0E30\x03\x02\x02\x02\xDC\u0E32\x03" +
		"\x02\x02\x02\xDE\u0E3A\x03\x02\x02\x02\xE0\u0E42\x03\x02\x02\x02\xE2\u0E47" +
		"\x03\x02\x02\x02\xE4\u0E65\x03\x02\x02\x02\xE6\u0E9C\x03\x02\x02\x02\xE8" +
		"\u0EA5\x03\x02\x02\x02\xEA\u0EB9\x03\x02\x02\x02\xEC\u0EC5\x03\x02\x02" +
		"\x02\xEE\u0EC9\x03\x02\x02\x02\xF0\u0EEA\x03\x02\x02\x02\xF2\u0EFF\x03" +
		"\x02\x02\x02\xF4\u0F09\x03\x02\x02\x02\xF6\u0F0D\x03\x02\x02\x02\xF8\u0F27" +
		"\x03\x02\x02\x02\xFA\u0F51\x03\x02\x02\x02\xFC\u0F53\x03\x02\x02\x02\xFE" +
		"\u0F62\x03\x02\x02\x02\u0100\u0F96\x03\x02\x02\x02\u0102\u0FA0\x03\x02" +
		"\x02\x02\u0104\u0FAA\x03\x02\x02\x02\u0106\u0FE6\x03\x02\x02\x02\u0108" +
		"\u0FE8\x03\x02\x02\x02\u010A\u1002\x03\x02\x02\x02\u010C\u1008\x03\x02" +
		"\x02\x02\u010E\u1010\x03\x02\x02\x02\u0110\u1021\x03\x02\x02\x02\u0112" +
		"\u1031\x03\x02\x02\x02\u0114\u1056\x03\x02\x02\x02\u0116\u105C\x03\x02" +
		"\x02\x02\u0118\u1065\x03\x02\x02\x02\u011A\u1072\x03\x02\x02\x02\u011C" +
		"\u1076\x03\x02\x02\x02\u011E\u109C\x03\x02\x02\x02\u0120\u10C2\x03\x02" +
		"\x02\x02\u0122\u10D0\x03\x02\x02\x02\u0124\u10D8\x03\x02\x02\x02\u0126" +
		"\u10DC\x03\x02\x02\x02\u0128\u10E2\x03\x02\x02\x02\u012A\u10F0\x03\x02" +
		"\x02\x02\u012C\u10F3\x03\x02\x02\x02\u012E\u1105\x03\x02\x02\x02\u0130" +
		"\u1109\x03\x02\x02\x02\u0132\u1119\x03\x02\x02\x02\u0134\u111B\x03\x02" +
		"\x02\x02\u0136\u1127\x03\x02\x02\x02\u0138\u112B\x03\x02\x02\x02\u013A" +
		"\u113C\x03\x02\x02\x02\u013C\u114D\x03\x02\x02\x02\u013E\u1150\x03\x02" +
		"\x02\x02\u0140\u115A\x03\x02\x02\x02\u0142\u115E\x03\x02\x02\x02\u0144" +
		"\u116B\x03\x02\x02\x02\u0146\u116E\x03\x02\x02\x02\u0148\u1173\x03\x02" +
		"\x02\x02\u014A\u1187\x03\x02\x02\x02\u014C\u1189\x03\x02\x02\x02\u014E" +
		"\u119A\x03\x02\x02\x02\u0150\u11A3\x03\x02\x02\x02\u0152\u11AC\x03\x02" +
		"\x02\x02\u0154\u11AE\x03\x02\x02\x02\u0156\u11BC\x03\x02\x02\x02\u0158" +
		"\u11C7\x03\x02\x02\x02\u015A\u11D0\x03\x02\x02\x02\u015C\u11D3\x03\x02" +
		"\x02\x02\u015E\u11DB\x03\x02\x02\x02\u0160\u11F4\x03\x02\x02\x02\u0162" +
		"\u1200\x03\x02\x02\x02\u0164\u1203\x03\x02\x02\x02\u0166\u1223\x03\x02" +
		"\x02\x02\u0168\u1225\x03\x02\x02\x02\u016A\u1227\x03\x02\x02\x02\u016C" +
		"\u1229\x03\x02\x02\x02\u016E\u122B\x03\x02\x02\x02\u0170\u1260\x03\x02" +
		"\x02\x02\u0172\u1262\x03\x02\x02\x02\u0174\u1268\x03\x02\x02\x02\u0176" +
		"\u127C\x03\x02\x02\x02\u0178\u128A\x03\x02\x02\x02\u017A\u1295\x03\x02" +
		"\x02\x02\u017C\u1297\x03\x02\x02\x02\u017E\u129D\x03\x02\x02\x02\u0180" +
		"\u12A7\x03\x02\x02\x02\u0182\u12AB\x03\x02\x02\x02\u0184\u12B2\x03\x02" +
		"\x02\x02\u0186\u12B6\x03\x02\x02\x02\u0188\u12BC\x03\x02\x02\x02\u018A" +
		"\u12C3\x03\x02\x02\x02\u018C\u12C9\x03\x02\x02\x02\u018E\u12CF\x03\x02" +
		"\x02\x02\u0190\u12D4\x03\x02\x02\x02\u0192\u1303\x03\x02\x02\x02\u0194" +
		"\u1318\x03\x02\x02\x02\u0196\u1331\x03\x02\x02\x02\u0198\u1334\x03\x02" +
		"\x02\x02\u019A\u133A\x03\x02\x02\x02\u019C\u134A\x03\x02\x02\x02\u019E" +
		"\u1359\x03\x02\x02\x02\u01A0\u135F\x03\x02\x02\x02\u01A2\u137D\x03\x02" +
		"\x02\x02\u01A4\u137F\x03\x02\x02\x02\u01A6\u1386\x03\x02\x02\x02\u01A8" +
		"\u1392\x03\x02\x02\x02\u01AA\u1398\x03\x02\x02\x02\u01AC\u13B1\x03\x02" +
		"\x02\x02\u01AE\u13B5\x03\x02\x02\x02\u01B0\u13B9\x03\x02\x02\x02\u01B2" +
		"\u13C4\x03\x02\x02\x02\u01B4\u1408\x03\x02\x02\x02\u01B6\u1446\x03\x02" +
		"\x02\x02\u01B8\u1448\x03\x02\x02\x02\u01BA\u14B2\x03\x02\x02\x02\u01BC" +
		"\u14CA\x03\x02\x02\x02\u01BE\u14CC\x03\x02\x02\x02\u01C0\u14DE\x03\x02" +
		"\x02\x02\u01C2\u1528\x03\x02\x02\x02\u01C4\u152A\x03\x02\x02\x02\u01C6" +
		"\u1537\x03\x02\x02\x02\u01C8\u1542\x03\x02\x02\x02\u01CA\u1560\x03\x02" +
		"\x02\x02\u01CC\u156B\x03\x02\x02\x02\u01CE\u1575\x03\x02\x02\x02\u01D0" +
		"\u157F\x03\x02\x02\x02\u01D2\u15A7\x03\x02\x02\x02\u01D4\u15A9\x03\x02" +
		"\x02\x02\u01D6\u15AC\x03\x02\x02\x02\u01D8\u162B\x03\x02\x02\x02\u01DA" +
		"\u163D\x03\x02\x02\x02\u01DC\u163F\x03\x02\x02\x02\u01DE\u1643\x03\x02" +
		"\x02\x02\u01E0\u1669\x03\x02\x02\x02\u01E2\u1672\x03\x02\x02\x02\u01E4" +
		"\u1678\x03\x02\x02\x02\u01E6\u1681\x03\x02\x02\x02\u01E8\u1697\x03\x02" +
		"\x02\x02\u01EA\u1699\x03\x02\x02\x02\u01EC\u16AA\x03\x02\x02\x02\u01EE" +
		"\u16B0\x03\x02\x02\x02\u01F0\u16E8\x03\x02\x02\x02\u01F2\u17A9\x03\x02" +
		"\x02\x02\u01F4\u17AB\x03\x02\x02\x02\u01F6\u17BD\x03\x02\x02\x02\u01F8" +
		"\u17CC\x03\x02\x02\x02\u01FA\u17D2\x03\x02\x02\x02\u01FC\u17F5\x03\x02" +
		"\x02\x02\u01FE\u17FF\x03\x02\x02\x02\u0200\u180D";
	private static readonly _serializedATNSegment4: string =
		"\x03\x02\x02\x02\u0202\u180F\x03\x02\x02\x02\u0204\u1812\x03\x02\x02\x02" +
		"\u0206\u1836\x03\x02\x02\x02\u0208\u1838\x03\x02\x02\x02\u020A\u183E\x03" +
		"\x02\x02\x02\u020C\u184A\x03\x02\x02\x02\u020E\u184E\x03\x02\x02\x02\u0210" +
		"\u1850\x03\x02\x02\x02\u0212\u187A\x03\x02\x02\x02\u0214\u1881\x03\x02" +
		"\x02\x02\u0216\u1883\x03\x02\x02\x02\u0218\u189A\x03\x02\x02\x02\u021A" +
		"\u18A0\x03\x02\x02\x02\u021C\u18A8\x03\x02\x02\x02\u021E\u18AC\x03\x02" +
		"\x02\x02\u0220\u18AF\x03\x02\x02\x02\u0222\u18B2\x03\x02\x02\x02\u0224" +
		"\u18C7\x03\x02\x02\x02\u0226\u18DC\x03\x02\x02\x02\u0228\u18E4\x03\x02" +
		"\x02\x02\u022A\u190A\x03\x02\x02\x02\u022C\u1916\x03\x02\x02\x02\u022E" +
		"\u1918\x03\x02\x02\x02\u0230\u191E\x03\x02\x02\x02\u0232\u1922\x03\x02" +
		"\x02\x02\u0234\u1930\x03\x02\x02\x02\u0236\u193D\x03\x02\x02\x02\u0238" +
		"\u1949\x03\x02\x02\x02\u023A\u194B\x03\x02\x02\x02\u023C\u1951\x03\x02" +
		"\x02\x02\u023E\u1955\x03\x02\x02\x02\u0240\u195A\x03\x02\x02\x02\u0242" +
		"\u195C\x03\x02\x02\x02\u0244\u195E\x03\x02\x02\x02\u0246\u1960\x03\x02" +
		"\x02\x02\u0248\u1972\x03\x02\x02\x02\u024A\u1982\x03\x02\x02\x02\u024C" +
		"\u1986\x03\x02\x02\x02\u024E\u198B\x03\x02\x02\x02\u0250\u1996\x03\x02" +
		"\x02\x02\u0252\u199B\x03\x02\x02\x02\u0254\u199D\x03\x02\x02\x02\u0256" +
		"\u19A1\x03\x02\x02\x02\u0258\u19BA\x03\x02\x02\x02\u025A\u19BC\x03\x02" +
		"\x02\x02\u025C\u19BF\x03\x02\x02\x02\u025E\u19C4\x03\x02\x02\x02\u0260" +
		"\u19D4\x03\x02\x02\x02\u0262\u1A50\x03\x02\x02\x02\u0264\u1A52\x03\x02" +
		"\x02\x02\u0266\u1A73\x03\x02\x02\x02\u0268\u1A78\x03\x02\x02\x02\u026A" +
		"\u1A7C\x03\x02\x02\x02\u026C\u1A82\x03\x02\x02\x02\u026E\u1A8A\x03\x02" +
		"\x02\x02\u0270\u1A92\x03\x02\x02\x02\u0272\u1A9A\x03\x02\x02\x02\u0274" +
		"\u1AA5\x03\x02\x02\x02\u0276\u1AAD\x03\x02\x02\x02\u0278\u1AB5\x03\x02" +
		"\x02\x02\u027A\u1ABD\x03\x02\x02\x02\u027C\u1AC5\x03\x02\x02\x02\u027E" +
		"\u1AF0\x03\x02\x02\x02\u0280\u1B00\x03\x02\x02\x02\u0282\u1B04\x03\x02" +
		"\x02\x02\u0284\u1B06\x03\x02\x02\x02\u0286\u1B09\x03\x02\x02\x02\u0288" +
		"\u1B0D\x03\x02\x02\x02\u028A\u1B13\x03\x02\x02\x02\u028C\u1B18\x03\x02" +
		"\x02\x02\u028E\u1B2C\x03\x02\x02\x02\u0290\u1BE0\x03\x02\x02\x02\u0292" +
		"\u1BE2\x03\x02\x02\x02\u0294\u1BF5\x03\x02\x02\x02\u0296\u1BF7\x03\x02" +
		"\x02\x02\u0298\u1C36\x03\x02\x02\x02\u029A\u1C5D\x03\x02\x02\x02\u029C" +
		"\u1C5F\x03\x02\x02\x02\u029E\u1C69\x03\x02\x02\x02\u02A0\u1C74\x03\x02" +
		"\x02\x02\u02A2\u1C76\x03\x02\x02\x02\u02A4\u1C79\x03\x02\x02\x02\u02A6" +
		"\u1C7D\x03\x02\x02\x02\u02A8\u1C7F\x03\x02\x02\x02\u02AA\u1C8B\x03\x02" +
		"\x02\x02\u02AC\u1C8D\x03\x02\x02\x02\u02AE\u1CAE\x03\x02\x02\x02\u02B0" +
		"\u1CB0\x03\x02\x02\x02\u02B2\u1CB9\x03\x02\x02\x02\u02B4\u1CCB\x03\x02" +
		"\x02\x02\u02B6\u1CD8\x03\x02\x02\x02\u02B8\u1CE3\x03\x02\x02\x02\u02BA" +
		"\u1D5A\x03\x02\x02\x02\u02BC\u1D70\x03\x02\x02\x02\u02BE\u1D80\x03\x02" +
		"\x02\x02\u02C0\u1D89\x03\x02\x02\x02\u02C2\u1D92\x03\x02\x02\x02\u02C4" +
		"\u1D94\x03\x02\x02\x02\u02C6\u1D9B\x03\x02\x02\x02\u02C8\u1D9D\x03\x02" +
		"\x02\x02\u02CA\u1D9F\x03\x02\x02\x02\u02CC\u1DA1\x03\x02\x02\x02\u02CE" +
		"\u1DA3\x03\x02\x02\x02\u02D0\u1DA5\x03\x02\x02\x02\u02D2\u1DA7\x03\x02" +
		"\x02\x02\u02D4\u1DA9\x03\x02\x02\x02\u02D6\u02D8\x05\x04\x03\x02\u02D7" +
		"\u02D6\x03\x02\x02\x02\u02D7\u02D8\x03\x02\x02\x02\u02D8\u02DB\x03\x02" +
		"\x02\x02\u02D9\u02DA\x07\u0478\x02\x02\u02DA\u02DC\x07\u0478\x02\x02\u02DB" +
		"\u02D9\x03\x02\x02\x02\u02DB\u02DC\x03\x02\x02\x02\u02DC\u02DD\x03\x02" +
		"\x02\x02\u02DD\u02DE\x07\x02\x02\x03\u02DE\x03\x03\x02\x02\x02\u02DF\u02E2" +
		"\x05\x06\x04\x02\u02E0\u02E1\x07\u0478\x02\x02\u02E1\u02E3\x07\u0478\x02" +
		"\x02\u02E2\u02E0\x03\x02\x02\x02\u02E2\u02E3\x03\x02\x02\x02\u02E3\u02E5" +
		"\x03\x02\x02\x02\u02E4\u02E6\x07\u0487\x02\x02\u02E5\u02E4\x03\x02\x02" +
		"\x02\u02E5\u02E6\x03\x02\x02\x02\u02E6\u02E9\x03\x02\x02\x02\u02E7\u02E9" +
		"\x05\n\x06\x02\u02E8\u02DF\x03\x02\x02\x02\u02E8\u02E7\x03\x02\x02\x02" +
		"\u02E9\u02EC\x03\x02\x02\x02\u02EA\u02E8\x03\x02\x02\x02\u02EA\u02EB\x03" +
		"\x02\x02\x02\u02EB\u02F6\x03\x02\x02\x02\u02EC\u02EA\x03\x02\x02\x02\u02ED" +
		"\u02F3\x05\x06\x04\x02\u02EE\u02EF\x07\u0478\x02\x02\u02EF\u02F1\x07\u0478" +
		"\x02\x02\u02F0\u02EE\x03\x02\x02\x02\u02F0\u02F1\x03\x02\x02\x02\u02F1" +
		"\u02F2\x03\x02\x02\x02\u02F2\u02F4\x07\u0487\x02\x02\u02F3\u02F0\x03\x02" +
		"\x02\x02\u02F3\u02F4\x03\x02\x02\x02\u02F4\u02F7\x03\x02\x02\x02\u02F5" +
		"\u02F7\x05\n\x06\x02\u02F6\u02ED\x03\x02\x02\x02\u02F6\u02F5\x03\x02\x02" +
		"\x02\u02F7\x05\x03\x02\x02\x02\u02F8\u02FA\x05\b\x05\x02\u02F9\u02F8\x03" +
		"\x02\x02\x02\u02F9\u02FA\x03\x02\x02\x02\u02FA\u0302\x03\x02\x02\x02\u02FB" +
		"\u0303\x05\f\x07\x02\u02FC\u0303\x05\x0E\b\x02\u02FD\u0303\x05\x10\t\x02" +
		"\u02FE\u0303\x05\x12\n\x02\u02FF\u0303\x05\x14\v\x02\u0300\u0303\x05\x18" +
		"\r\x02\u0301\u0303\x05\x1A\x0E\x02\u0302\u02FB\x03\x02\x02\x02\u0302\u02FC" +
		"\x03\x02\x02\x02\u0302\u02FD\x03\x02\x02\x02\u0302\u02FE\x03\x02\x02\x02" +
		"\u0302\u02FF\x03\x02\x02\x02\u0302\u0300\x03\x02\x02\x02\u0302\u0301\x03" +
		"\x02\x02\x02\u0303\x07\x03\x02\x02\x02\u0304\u0305\x07\x9C\x02\x02\u0305" +
		"\u0306\x07\xAC\x02\x02\u0306\u0307\x07\u049B\x02\x02\u0307\u0308\x07\u047B" +
		"\x02\x02\u0308\u030F\x05\u0260\u0131\x02\u0309\u030A\x07\u0486\x02\x02" +
		"\u030A\u030B\x07\u049B\x02\x02\u030B\u030C\x07\u047B\x02\x02\u030C\u030E" +
		"\x05\u0260\u0131\x02\u030D\u0309\x03\x02\x02\x02\u030E\u0311\x03\x02\x02" +
		"\x02\u030F\u030D\x03\x02\x02\x02\u030F\u0310\x03\x02\x02\x02\u0310\u0312" +
		"\x03\x02\x02\x02\u0311\u030F\x03\x02\x02\x02\u0312\u0313\x07C\x02\x02" +
		"\u0313\t\x03\x02\x02\x02\u0314\u0315\x07\u0487\x02\x02\u0315\v\x03\x02" +
		"\x02\x02\u0316\u0340\x05\x1C\x0F\x02\u0317\u0340\x05\x1E\x10\x02\u0318" +
		"\u0340\x05 \x11\x02\u0319\u0340\x05\"\x12\x02\u031A\u0340\x05$\x13\x02" +
		"\u031B\u0340\x05&\x14\x02\u031C\u0340\x05*\x16\x02\u031D\u0340\x05,\x17" +
		"\x02\u031E\u0340\x05.\x18\x02\u031F\u0340\x050\x19\x02\u0320\u0340\x05" +
		"2\x1A\x02\u0321\u0340\x05<\x1F\x02\u0322\u0340\x05(\x15\x02\u0323\u0340" +
		"\x05> \x02\u0324\u0340\x05\x88E\x02\u0325\u0340\x05\x8AF\x02\u0326\u0340" +
		"\x05\x8CG\x02\u0327\u0340\x05\x8EH\x02\u0328\u0340\x05\x90I\x02\u0329" +
		"\u0340\x05\x92J\x02\u032A\u0340\x05\x94K\x02\u032B\u0340\x05\x96L\x02" +
		"\u032C\u0340\x05\x98M\x02\u032D\u0340\x05\x9AN\x02\u032E\u0340\x05\x9C" +
		"O\x02\u032F\u0340\x05\xA2R\x02\u0330\u0340\x05\xA4S\x02\u0331\u0340\x05" +
		"\xA6T\x02\u0332\u0340\x05\xA8U\x02\u0333\u0340\x05\xAAV\x02\u0334\u0340" +
		"\x05\xACW\x02\u0335\u0340\x05\xAEX\x02\u0336\u0340\x05\xB0Y\x02\u0337" +
		"\u0340\x05\xB2Z\x02\u0338\u0340\x05\xB4[\x02\u0339\u0340\x05\xB6\\\x02" +
		"\u033A\u0340\x05\xB8]\x02\u033B\u0340\x05\xBC_\x02\u033C\u0340\x05\xBA" +
		"^\x02\u033D\u0340\x05\xBE`\x02\u033E\u0340\x05\xC2b\x02\u033F\u0316\x03" +
		"\x02\x02\x02\u033F\u0317\x03\x02\x02\x02\u033F\u0318\x03\x02\x02\x02\u033F" +
		"\u0319\x03\x02\x02\x02\u033F\u031A\x03\x02\x02\x02\u033F\u031B\x03\x02" +
		"\x02\x02\u033F\u031C\x03\x02\x02\x02\u033F\u031D\x03\x02\x02\x02\u033F" +
		"\u031E\x03\x02\x02\x02\u033F\u031F\x03\x02\x02\x02\u033F\u0320\x03\x02" +
		"\x02\x02\u033F\u0321\x03\x02\x02\x02\u033F\u0322\x03\x02\x02\x02\u033F" +
		"\u0323\x03\x02\x02\x02\u033F\u0324\x03\x02\x02\x02\u033F\u0325\x03\x02" +
		"\x02\x02\u033F\u0326\x03\x02\x02\x02\u033F\u0327\x03\x02\x02\x02\u033F" +
		"\u0328\x03\x02\x02\x02\u033F\u0329\x03\x02\x02\x02\u033F\u032A\x03\x02" +
		"\x02\x02\u033F\u032B\x03\x02\x02\x02\u033F\u032C\x03\x02\x02\x02\u033F" +
		"\u032D\x03\x02\x02\x02\u033F\u032E\x03\x02\x02\x02\u033F\u032F\x03\x02" +
		"\x02\x02\u033F\u0330\x03\x02\x02\x02\u033F\u0331\x03\x02\x02\x02\u033F" +
		"\u0332\x03\x02\x02\x02\u033F\u0333\x03\x02\x02\x02\u033F\u0334\x03\x02" +
		"\x02\x02\u033F\u0335\x03\x02\x02\x02\u033F\u0336\x03\x02\x02\x02\u033F" +
		"\u0337\x03\x02\x02\x02\u033F\u0338\x03\x02\x02\x02\u033F\u0339\x03\x02" +
		"\x02\x02\u033F\u033A\x03\x02\x02\x02\u033F\u033B\x03\x02\x02\x02\u033F" +
		"\u033C\x03\x02\x02\x02\u033F\u033D\x03\x02\x02\x02\u033F\u033E\x03\x02" +
		"\x02\x02\u0340\r\x03\x02\x02\x02\u0341\u034D\x05\xD4k\x02\u0342\u034D" +
		"\x05\xCCg\x02\u0343\u034D\x05\xD6l\x02\u0344\u034D\x05\xC6d\x02\u0345" +
		"\u034D\x05\xD2j\x02\u0346\u034D\x05\xC4c\x02\u0347\u034D\x05\xCEh\x02" +
		"\u0348\u034D\x05\xD0i\x02\u0349\u034D\x05\xC8e\x02\u034A\u034D\x05\xCA" +
		"f\x02\u034B\u034D\x05\xD8m\x02\u034C\u0341\x03\x02\x02\x02\u034C\u0342" +
		"\x03\x02\x02\x02\u034C\u0343\x03\x02\x02\x02\u034C\u0344\x03\x02\x02\x02" +
		"\u034C\u0345\x03\x02\x02\x02\u034C\u0346\x03\x02\x02\x02\u034C\u0347\x03" +
		"\x02\x02\x02\u034C\u0348\x03\x02\x02\x02\u034C\u0349\x03\x02\x02\x02\u034C" +
		"\u034A\x03\x02\x02\x02\u034C\u034B\x03\x02\x02\x02\u034D\x0F\x03\x02\x02" +
		"\x02\u034E\u0358\x05\u0134\x9B\x02\u034F\u0358\x05\u0136\x9C\x02\u0350" +
		"\u0358\x05\u0138\x9D\x02\u0351\u0358\x05\u013A\x9E\x02\u0352\u0358\x05" +
		"\u013C\x9F\x02\u0353\u0358\x05\u013E\xA0\x02\u0354\u0358\x05\u0140\xA1" +
		"\x02\u0355\u0358\x05\u0142\xA2\x02\u0356\u0358\x05\u0144\xA3\x02\u0357" +
		"\u034E\x03\x02\x02\x02\u0357\u034F\x03\x02\x02\x02\u0357\u0350\x03\x02" +
		"\x02\x02\u0357\u0351\x03\x02\x02\x02\u0357\u0352\x03\x02\x02\x02\u0357" +
		"\u0353\x03\x02\x02\x02\u0357\u0354\x03\x02\x02\x02\u0357\u0355\x03\x02" +
		"\x02\x02\u0357\u0356\x03\x02\x02\x02\u0358\x11\x03\x02\x02\x02\u0359\u0369" +
		"\x05\u0154\xAB\x02\u035A\u0369\x05\u0156\xAC\x02\u035B\u0369\x05\u0158" +
		"\xAD\x02\u035C\u0369\x05\u015A\xAE\x02\u035D\u0369\x05\u015C\xAF\x02\u035E" +
		"\u0369\x05\u015E\xB0\x02\u035F\u0369\x05\u0160\xB1\x02\u0360\u0369\x05" +
		"\u0162\xB2\x02\u0361\u0369\x05\u0164\xB3\x02\u0362\u0369\x05\u017C\xBF" +
		"\x02\u0363\u0369\x05\u017E\xC0\x02\u0364\u0369\x05\u0180\xC1\x02\u0365" +
		"\u0369\x05\u0182\xC2\x02\u0366\u0369\x05\u0184\xC3\x02\u0367\u0369\x05" +
		"\u0186\xC4\x02\u0368\u0359\x03\x02\x02\x02\u0368\u035A\x03\x02\x02\x02" +
		"\u0368\u035B\x03\x02\x02\x02\u0368\u035C\x03\x02\x02\x02\u0368\u035D\x03" +
		"\x02\x02\x02\u0368\u035E\x03\x02\x02\x02\u0368\u035F\x03\x02\x02\x02\u0368" +
		"\u0360\x03\x02\x02\x02\u0368\u0361\x03\x02\x02\x02\u0368\u0362\x03\x02" +
		"\x02\x02\u0368\u0363\x03\x02\x02\x02\u0368\u0364\x03\x02\x02\x02\u0368" +
		"\u0365\x03\x02\x02\x02\u0368\u0366\x03\x02\x02\x02\u0368\u0367\x03\x02" +
		"\x02\x02\u0369\x13\x03\x02\x02\x02\u036A\u036E\x05\u0188\xC5\x02\u036B" +
		"\u036E\x05\u018A\xC6\x02\u036C\u036E\x05\u018C\xC7\x02\u036D\u036A\x03" +
		"\x02\x02\x02\u036D\u036B\x03\x02\x02\x02\u036D\u036C\x03\x02\x02\x02\u036E" +
		"\x15\x03\x02\x02\x02\u036F\u037A\x05\u0190\xC9\x02\u0370\u037A\x05\u0192" +
		"\xCA\x02\u0371\u037A\x05\u0194\xCB\x02\u0372\u037A\x05\u0198\xCD\x02\u0373" +
		"\u037A\x05\u019A\xCE\x02\u0374\u037A\x05\u019C\xCF\x02\u0375\u037A\x05" +
		"\u01A0\xD1\x02\u0376\u037A\x05\u0196\xCC\x02\u0377\u037A\x05\u019E\xD0" +
		"\x02\u0378\u037A\x05\u01A2\xD2\x02\u0379\u036F\x03\x02\x02\x02\u0379\u0370" +
		"\x03\x02\x02\x02\u0379\u0371\x03\x02\x02\x02\u0379\u0372\x03\x02\x02\x02" +
		"\u0379\u0373\x03\x02\x02\x02\u0379\u0374\x03\x02\x02\x02\u0379\u0375\x03" +
		"\x02\x02\x02\u0379\u0376\x03\x02\x02\x02\u0379\u0377\x03\x02\x02\x02\u0379" +
		"\u0378\x03\x02\x02\x02\u037A\x17\x03\x02\x02\x02\u037B\u0396\x05\u01B4" +
		"\xDB\x02\u037C\u0396\x05\u01B6\xDC\x02\u037D\u0396\x05\u01B8\xDD\x02\u037E" +
		"\u0396\x05\u01BA\xDE\x02\u037F\u0396\x05\u01BE\xE0\x02\u0380\u0396\x05" +
		"\u01C0\xE1\x02\u0381\u0396\x05\u01C2\xE2\x02\u0382\u0396\x05\u01C4\xE3" +
		"\x02\u0383\u0396\x05\u01DE\xF0\x02\u0384\u0396\x05\u01E0\xF1\x02\u0385" +
		"\u0396\x05\u01E2\xF2\x02\u0386\u0396\x05\u01E4\xF3\x02\u0387\u0396\x05" +
		"\u01E6\xF4\x02\u0388\u0396\x05\u01EA\xF6\x02\u0389\u0396\x05\u01EC\xF7" +
		"\x02\u038A\u0396\x05\u01EE\xF8\x02\u038B\u0396\x05\u01F0\xF9\x02\u038C" +
		"\u0396\x05\u01F2\xFA\x02\u038D\u0396\x05\u0202\u0102\x02\u038E\u0396\x05" +
		"\u0204\u0103\x02\u038F\u0396\x05\u0206\u0104\x02\u0390\u0396\x05\u0208" +
		"\u0105\x02\u0391\u0396\x05\u020A\u0106\x02\u0392\u0396\x05\u020C\u0107" +
		"\x02\u0393\u0396\x05\u020E\u0108\x02\u0394\u0396\x05\u01F4\xFB\x02\u0395" +
		"\u037B\x03\x02\x02\x02\u0395\u037C\x03\x02\x02\x02\u0395\u037D\x03\x02" +
		"\x02\x02\u0395\u037E\x03\x02\x02\x02\u0395\u037F\x03\x02\x02\x02\u0395" +
		"\u0380\x03\x02\x02\x02\u0395\u0381\x03\x02\x02\x02\u0395\u0382\x03\x02" +
		"\x02\x02\u0395\u0383\x03\x02\x02\x02\u0395\u0384\x03\x02\x02\x02\u0395" +
		"\u0385\x03\x02\x02\x02\u0395\u0386\x03\x02\x02\x02\u0395\u0387\x03\x02" +
		"\x02\x02\u0395\u0388\x03\x02\x02\x02\u0395\u0389\x03\x02\x02\x02\u0395" +
		"\u038A\x03\x02\x02\x02\u0395\u038B\x03\x02\x02\x02\u0395\u038C\x03\x02" +
		"\x02\x02\u0395\u038D\x03\x02\x02\x02\u0395\u038E\x03\x02\x02\x02\u0395" +
		"\u038F\x03\x02\x02\x02\u0395\u0390\x03\x02\x02\x02\u0395\u0391\x03\x02" +
		"\x02\x02\u0395\u0392\x03\x02\x02\x02\u0395\u0393\x03\x02\x02\x02\u0395" +
		"\u0394\x03\x02\x02\x02\u0396\x19\x03\x02\x02\x02\u0397\u039F\x05\u0218" +
		"\u010D\x02\u0398\u039F\x05\u021A\u010E\x02\u0399\u039F\x05\u021E\u0110" +
		"\x02\u039A\u039F\x05\u0220\u0111\x02\u039B\u039F\x05\u0222\u0112\x02\u039C" +
		"\u039F\x05\u0224\u0113\x02\u039D\u039F\x05\u0228\u0115\x02\u039E\u0397" +
		"\x03\x02\x02\x02\u039E\u0398\x03\x02\x02\x02\u039E\u0399\x03\x02\x02\x02" +
		"\u039E\u039A\x03\x02\x02\x02\u039E\u039B\x03\x02\x02\x02\u039E\u039C\x03" +
		"\x02\x02\x02\u039E\u039D\x03\x02\x02\x02\u039F\x1B\x03\x02\x02\x02\u03A0" +
		"\u03A1\x07$\x02\x02\u03A1\u03A3\t\x02\x02\x02\u03A2\u03A4\x05\u0286\u0144" +
		"\x02\u03A3\u03A2\x03\x02\x02\x02\u03A3\u03A4\x03\x02\x02\x02\u03A4\u03A5" +
		"\x03\x02\x02\x02\u03A5\u03A9\x05\u024E\u0128\x02\u03A6\u03A8\x05B\"\x02" +
		"\u03A7\u03A6\x03\x02\x02\x02\u03A8\u03AB\x03\x02\x02\x02\u03A9\u03A7\x03" +
		"\x02\x02\x02\u03A9\u03AA\x03\x02\x02\x02\u03AA\x1D\x03\x02\x02\x02\u03AB" +
		"\u03A9\x03\x02\x02\x02\u03AC\u03AE\x07$\x02\x02\u03AD\u03AF\x05H%\x02" +
		"\u03AE\u03AD\x03\x02\x02\x02\u03AE\u03AF\x03\x02\x02\x02\u03AF\u03B0\x03" +
		"\x02\x02\x02\u03B0\u03B2\x07\u01A1\x02\x02\u03B1\u03B3\x05\u0286\u0144" +
		"\x02\u03B2\u03B1\x03\x02\x02\x02\u03B2\u03B3\x03\x02\x02\x02\u03B3\u03B4" +
		"\x03\x02\x02\x02\u03B4\u03B5\x05\u022E\u0118\x02\u03B5\u03B6\x07x\x02" +
		"\x02\u03B6\u03B7\x07\u0261\x02\x02\u03B7\u03BE\x05J&\x02\u03B8\u03B9\x07" +
		"x\x02\x02\u03B9\u03BB\x07\u0175\x02\x02\u03BA\u03BC\x07t\x02\x02\u03BB" +
		"\u03BA\x03\x02\x02\x02\u03BB\u03BC\x03\x02\x02\x02\u03BC\u03BD\x03\x02" +
		"\x02\x02\u03BD\u03BF\x07\u0234\x02\x02\u03BE\u03B8\x03\x02\x02\x02\u03BE" +
		"\u03BF\x03\x02\x02\x02\u03BF\u03C1\x03\x02\x02\x02\u03C0\u03C2\x05R*\x02" +
		"\u03C1\u03C0\x03\x02\x02\x02\u03C1\u03C2\x03\x02\x02\x02\u03C2\u03C5\x03" +
		"\x02\x02\x02\u03C3\u03C4\x07\u0172\x02\x02\u03C4\u03C6\x07\u0493\x02\x02" +
		"\u03C5\u03C3\x03\x02\x02\x02\u03C5\u03C6\x03\x02\x02\x02\u03C6\u03C7\x03" +
		"\x02\x02\x02\u03C7\u03C8\x07\u0191\x02\x02\u03C8\u03C9\x05\u018E\xC8\x02" +
		"\u03C9\x1F\x03\x02\x02\x02\u03CA\u03CC\x07$\x02\x02\u03CB\u03CD\x05\u0288" +
		"\u0145\x02\u03CC\u03CB\x03\x02\x02\x02\u03CC\u03CD\x03\x02\x02\x02\u03CD" +
		"\u03CF\x03\x02\x02\x02\u03CE\u03D0\t\x03\x02\x02\u03CF\u03CE\x03\x02\x02" +
		"\x02\u03CF\u03D0\x03\x02\x02\x02\u03D0\u03D2\x03\x02\x02\x02\u03D1\u03D3" +
		"\t\x04\x02\x02\u03D2\u03D1\x03\x02\x02\x02\u03D2\u03D3\x03\x02\x02\x02" +
		"\u03D3\u03D4\x03\x02\x02\x02\u03D4\u03D6\x07S\x02\x02\u03D5\u03D7\x05" +
		"\u0286\u0144\x02\u03D6\u03D5\x03\x02\x02\x02\u03D6\u03D7\x03\x02\x02\x02" +
		"\u03D7\u03D8\x03\x02\x02\x02\u03D8\u03DA\x05\u024E\u0128\x02\u03D9\u03DB" +
		"\x05T+\x02\u03DA\u03D9\x03\x02\x02\x02\u03DA\u03DB\x03\x02\x02\x02\u03DB" +
		"\u03DC\x03\x02\x02\x02\u03DC\u03DD\x07x\x02\x02\u03DD\u03DE\x05\u0230" +
		"\u0119\x02\u03DE\u03E0\x05\u0272\u013A\x02\u03DF\u03E1\x05\u028A\u0146" +
		"\x02\u03E0\u03DF\x03\x02\x02\x02\u03E0\u03E1\x03\x02\x02\x02\u03E1\u03E5" +
		"\x03\x02\x02\x02\u03E2\u03E4\x05V,\x02\u03E3\u03E2\x03\x02\x02\x02\u03E4" +
		"\u03E7\x03\x02\x02\x02\u03E5\u03E3\x03\x02\x02\x02\u03E5\u03E6\x03\x02" +
		"\x02\x02\u03E6\u03F4\x03\x02\x02\x02\u03E7\u03E5\x03\x02\x02\x02\u03E8" +
		"\u03EA\x07\u0152\x02\x02\u03E9\u03EB\x07\u047B\x02\x02\u03EA\u03E9\x03" +
		"\x02\x02\x02\u03EA\u03EB\x03\x02\x02\x02\u03EB\u03EC\x03\x02\x02\x02\u03EC" +
		"\u03F3\t\x05\x02\x02\u03ED\u03EF\x07i\x02\x02\u03EE\u03F0\x07\u047B\x02" +
		"\x02\u03EF\u03EE\x03\x02\x02\x02\u03EF\u03F0\x03\x02\x02\x02\u03F0\u03F1" +
		"\x03\x02\x02\x02\u03F1\u03F3\t\x06\x02\x02\u03F2\u03E8\x03\x02\x02\x02" +
		"\u03F2\u03ED\x03\x02\x02\x02\u03F3\u03F6\x03\x02\x02\x02\u03F4\u03F2\x03" +
		"\x02\x02\x02\u03F4\u03F5\x03\x02\x02\x02\u03F5!\x03\x02\x02\x02\u03F6" +
		"\u03F4\x03\x02\x02\x02\u03F7\u03F8\x07$\x02\x02\u03F8\u03F9\x07\u01DE" +
		"\x02\x02\u03F9\u03FA\x07K\x02\x02\u03FA\u03FB\x05\u024E\u0128\x02\u03FB" +
		"\u03FC\x07\x07\x02\x02\u03FC\u03FD\x07\u0299\x02\x02\u03FD\u0403\x07\u0493" +
		"\x02\x02\u03FE\u0400\x07\u01C7\x02\x02\u03FF\u0401\x07\u047B\x02\x02\u0400" +
		"\u03FF\x03\x02\x02\x02\u0400\u0401\x03\x02\x02\x02\u0401\u0402\x03\x02" +
		"\x02\x02\u0402\u0404\x05\u0256\u012C\x02\u0403\u03FE\x03\x02\x02\x02\u0403" +
		"\u0404\x03\x02\x02\x02\u0404\u040A\x03\x02\x02\x02\u0405\u0407\x07\u029A" +
		"\x02\x02\u0406\u0408\x07\u047B\x02\x02\u0407\u0406\x03\x02\x02\x02\u0407" +
		"\u0408\x03\x02\x02\x02\u0408\u0409\x03\x02\x02\x02\u0409\u040B\x05\u0256" +
		"\u012C\x02\u040A\u0405\x03\x02\x02\x02\u040A\u040B\x03\x02\x02\x02\u040B" +
		"\u0411\x03\x02\x02\x02\u040C\u040E\x07\u0240\x02\x02\u040D\u040F\x07\u047B" +
		"\x02\x02\u040E\u040D\x03\x02\x02\x02\u040E\u040F\x03\x02\x02\x02\u040F" +
		"\u0410\x03\x02\x02\x02\u0410\u0412\x05\u0256\u012C\x02\u0411\u040C\x03" +
		"\x02\x02\x02\u0411\u0412\x03\x02\x02\x02\u0412\u0418\x03\x02\x02\x02\u0413" +
		"\u0415\x07\u0213\x02\x02\u0414\u0416\x07\u047B\x02\x02\u0415\u0414\x03" +
		"\x02\x02\x02\u0415\u0416\x03\x02\x02\x02\u0416\u0417\x03\x02\x02\x02\u0417" +
		"\u0419\x05\u024E\u0128\x02\u0418\u0413\x03\x02\x02\x02\u0418\u0419\x03" +
		"\x02\x02\x02\u0419\u041B\x03\x02\x02\x02\u041A\u041C\x07\u02A8\x02\x02" +
		"\u041B\u041A\x03\x02\x02\x02\u041B\u041C\x03\x02\x02\x02\u041C\u0422\x03" +
		"\x02\x02\x02\u041D\u041F\x07\u0172\x02\x02\u041E\u0420\x07\u047B\x02\x02" +
		"\u041F\u041E\x03\x02\x02\x02\u041F\u0420\x03\x02\x02\x02\u0420\u0421\x03" +
		"\x02\x02\x02\u0421\u0423\x07\u0493\x02\x02\u0422\u041D\x03\x02\x02\x02" +
		"\u0422\u0423\x03\x02\x02\x02\u0423\u0424\x03\x02\x02\x02\u0424\u0426\x07" +
		"\u019B\x02\x02\u0425\u0427\x07\u047B\x02\x02\u0426\u0425\x03\x02\x02\x02" +
		"\u0426\u0427\x03\x02\x02\x02\u0427\u0428\x03\x02\x02\x02\u0428\u0429\x05" +
		"\u0240\u0121\x02\u0429#\x03\x02\x02\x02\u042A\u042C\x07$\x02\x02\u042B" +
		"\u042D\x05\u0288\u0145\x02\u042C\u042B\x03\x02\x02\x02\u042C\u042D\x03" +
		"\x02\x02\x02\u042D\u042F\x03\x02\x02\x02\u042E\u0430\x05H%\x02\u042F\u042E" +
		"\x03\x02\x02\x02\u042F\u0430\x03\x02\x02\x02\u0430\u0431\x03\x02\x02\x02" +
		"\u0431\u0432\x07\x86\x02\x02\u0432\u0433\x05\u022E\u0118\x02\u0433\u0435" +
		"\x07\u0484\x02\x02\u0434\u0436\x05X-\x02\u0435\u0434\x03\x02\x02\x02\u0435" +
		"\u0436\x03\x02\x02\x02\u0436\u043B\x03\x02\x02\x02\u0437\u0438\x07\u0486" +
		"\x02\x02\u0438\u043A\x05X-\x02\u0439\u0437\x03\x02\x02\x02\u043A\u043D" +
		"\x03\x02\x02\x02\u043B\u0439\x03\x02\x02\x02\u043B\u043C\x03\x02\x02\x02" +
		"\u043C\u043E\x03\x02\x02\x02\u043D\u043B\x03\x02\x02\x02\u043E\u0442\x07" +
		"\u0485\x02\x02\u043F\u0441\x05\\/\x02\u0440\u043F\x03\x02\x02\x02\u0441" +
		"\u0444\x03\x02\x02\x02\u0442\u0440\x03\x02\x02\x02\u0442\u0443\x03\x02" +
		"\x02\x02\u0443\u0445\x03\x02\x02\x02\u0444\u0442\x03\x02\x02\x02\u0445" +
		"\u0446\x05\u018E\xC8\x02\u0446%\x03\x02\x02\x02\u0447\u0449\x07$\x02\x02" +
		"\u0448\u044A\x05\u0288\u0145\x02\u0449\u0448\x03\x02\x02\x02\u0449\u044A" +
		"\x03\x02\x02\x02\u044A\u044C\x03\x02\x02\x02\u044B\u044D\x05H%\x02\u044C" +
		"\u044B\x03\x02\x02\x02\u044C\u044D\x03\x02\x02\x02\u044D\u044F\x03\x02" +
		"\x02\x02\u044E\u0450\x07\u0151\x02\x02\u044F\u044E\x03\x02\x02\x02\u044F" +
		"\u0450\x03\x02\x02\x02\u0450\u0451\x03\x02\x02\x02\u0451\u0453\x07\u01B7" +
		"\x02\x02\u0452\u0454\x05\u0286\u0144\x02\u0453\u0452\x03\x02\x02\x02\u0453" +
		"\u0454\x03\x02\x02\x02\u0454\u0455\x03\x02\x02\x02\u0455\u0456\x05\u022E" +
		"\u0118\x02\u0456\u0458\x07\u0484\x02\x02\u0457\u0459\x05Z.\x02\u0458\u0457" +
		"\x03\x02\x02\x02\u0458\u0459\x03\x02\x02\x02\u0459\u045E\x03\x02\x02\x02" +
		"\u045A\u045B\x07\u0486\x02\x02\u045B\u045D\x05Z.\x02\u045C\u045A\x03\x02" +
		"\x02\x02\u045D\u0460\x03\x02\x02\x02\u045E\u045C\x03\x02\x02\x02\u045E" +
		"\u045F\x03\x02\x02\x02\u045F\u0461\x03\x02\x02\x02\u0460\u045E\x03\x02" +
		"\x02\x02\u0461\u0462\x07\u0485\x02\x02\u0462\u0463\x07\u0256\x02\x02\u0463" +
		"\u0467\x05\u0262\u0132\x02\u0464\u0466\x05\\/\x02\u0465\u0464\x03\x02" +
		"\x02\x02\u0466\u0469\x03\x02\x02\x02\u0467\u0465\x03\x02\x02\x02\u0467" +
		"\u0468\x03\x02\x02\x02\u0468\u046C\x03\x02\x02\x02\u0469\u0467\x03\x02" +
		"\x02\x02\u046A\u046D\x05\u018E\xC8\x02\u046B\u046D\x05\u019E\xD0\x02\u046C" +
		"\u046A\x03\x02\x02\x02\u046C\u046B\x03\x02\x02\x02\u046D\'\x03\x02\x02" +
		"\x02\u046E\u046F\x07$\x02\x02\u046F\u0471\x07\u0258\x02\x02\u0470\u0472" +
		"\x05\u0286\u0144\x02\u0471\u0470\x03\x02\x02\x02\u0471\u0472\x03\x02\x02" +
		"\x02\u0472\u0473\x03\x02\x02\x02\u0473\u0478\x05\u0232\u011A\x02\u0474" +
		"\u0475\x07\u0486\x02\x02\u0475\u0477\x05\u0232\u011A\x02\u0476\u0474\x03" +
		"\x02\x02\x02\u0477\u047A\x03\x02\x02\x02\u0478\u0476\x03\x02\x02\x02\u0478" +
		"\u0479\x03\x02\x02\x02\u0479)\x03\x02\x02\x02\u047A\u0478\x03\x02\x02" +
		"\x02\u047B\u047C\x07$\x02\x02\u047C\u047D\x07\u0264\x02\x02\u047D\u047E" +
		"\x05\u024E\u0128\x02\u047E\u047F\x07E\x02\x02\u047F\u0480\x07\u0186\x02" +
		"\x02\u0480\u0481\x07\u02AD\x02\x02\u0481\u0482\t\x07\x02\x02\u0482\u0483" +
		"\x07\u0220\x02\x02\u0483\u0484\x07\u0484\x02\x02\u0484\u0489\x05^0\x02" +
		"\u0485\u0486\x07\u0486\x02\x02\u0486\u0488\x05^0\x02\u0487\u0485\x03\x02" +
		"\x02\x02\u0488\u048B\x03\x02\x02\x02\u0489\u0487\x03\x02\x02\x02\u0489" +
		"\u048A\x03\x02\x02\x02\u048A\u048C\x03\x02\x02\x02\u048B\u0489\x03\x02" +
		"\x02\x02\u048C\u048D\x07\u0485\x02\x02\u048D+\x03\x02\x02\x02\u048E\u0490" +
		"\x07$\x02\x02\u048F\u0491\x05\u0288\u0145\x02\u0490\u048F\x03\x02\x02" +
		"\x02\u0490\u0491\x03\x02\x02\x02\u0491\u0493\x03\x02\x02\x02\u0492\u0494" +
		"\x07\u028E\x02\x02\u0493\u0492\x03\x02\x02\x02\u0493\u0494\x03\x02\x02" +
		"\x02\u0494\u0495\x03\x02\x02\x02\u0495\u0497\x07\xAE\x02\x02\u0496\u0498" +
		"\x05\u0286\u0144\x02\u0497\u0496\x03\x02\x02\x02\u0497\u0498\x03\x02\x02" +
		"\x02\u0498\u0499\x03\x02\x02\x02\u0499\u04A1\x05\u0230\u0119\x02\u049A" +
		"\u049B\x07d\x02\x02\u049B\u04A2\x05\u0230\u0119\x02\u049C\u049D\x07\u0484" +
		"\x02\x02\u049D\u049E\x07d\x02\x02\u049E\u049F\x05\u0230\u0119\x02\u049F" +
		"\u04A0\x07\u0485\x02\x02\u04A0\u04A2\x03\x02\x02\x02\u04A1\u049A\x03\x02" +
		"\x02\x02\u04A1\u049C\x03\x02\x02\x02\u04A2\u04E6\x03\x02\x02\x02\u04A3" +
		"\u04A5\x07$\x02\x02\u04A4\u04A6\x05\u0288\u0145\x02\u04A5\u04A4\x03\x02" +
		"\x02\x02\u04A5\u04A6\x03\x02\x02\x02\u04A6\u04A8\x03\x02\x02\x02\u04A7" +
		"\u04A9\x07\u028E\x02\x02\u04A8\u04A7\x03\x02\x02\x02\u04A8\u04A9\x03\x02" +
		"\x02\x02\u04A9\u04AA\x03\x02\x02\x02\u04AA\u04AC\x07\xAE\x02\x02\u04AB" +
		"\u04AD\x05\u0286\u0144\x02\u04AC\u04AB\x03\x02\x02\x02\u04AC\u04AD\x03" +
		"\x02\x02\x02\u04AD\u04AE\x03\x02\x02\x02\u04AE\u04B0\x05\u0230\u0119\x02" +
		"\u04AF\u04B1\x05`1\x02\u04B0\u04AF\x03\x02\x02\x02\u04B0\u04B1\x03\x02" +
		"\x02\x02\u04B1\u04BC\x03\x02\x02\x02\u04B2\u04B9\x05r:\x02\u04B3\u04B5" +
		"\x07\u0486\x02\x02\u04B4\u04B3\x03\x02\x02\x02\u04B4\u04B5\x03\x02\x02" +
		"\x02\u04B5\u04B6\x03\x02\x02\x02\u04B6\u04B8\x05r:\x02\u04B7\u04B4\x03" +
		"\x02\x02\x02\u04B8\u04BB\x03\x02\x02\x02\u04B9\u04B7\x03\x02\x02\x02\u04B9" +
		"\u04BA\x03\x02\x02\x02\u04BA\u04BD\x03\x02\x02\x02\u04BB\u04B9\x03\x02" +
		"\x02\x02\u04BC\u04B2\x03\x02\x02\x02\u04BC\u04BD\x03\x02\x02\x02\u04BD" +
		"\u04BF\x03\x02\x02\x02\u04BE\u04C0\x05x=\x02\u04BF\u04BE\x03\x02\x02\x02" +
		"\u04BF\u04C0\x03\x02\x02\x02\u04C0\u04C2\x03\x02\x02\x02\u04C1\u04C3\t" +
		"\b\x02\x02\u04C2\u04C1\x03\x02\x02\x02\u04C2\u04C3\x03\x02\x02\x02\u04C3" +
		"\u04C5\x03\x02\x02\x02\u04C4\u04C6\x07\x0E\x02\x02\u04C5\u04C4\x03\x02" +
		"\x02\x02\u04C5\u04C6\x03\x02\x02\x02\u04C6\u04C7\x03\x02\x02\x02\u04C7" +
		"\u04C8\x05\xD4k\x02\u04C8\u04E6\x03\x02\x02\x02\u04C9\u04CB\x07$\x02\x02" +
		"\u04CA\u04CC\x05\u0288\u0145\x02\u04CB\u04CA\x03\x02\x02\x02\u04CB\u04CC" +
		"\x03\x02\x02\x02\u04CC\u04CE\x03\x02\x02\x02\u04CD\u04CF\x07\u028E\x02" +
		"\x02\u04CE\u04CD\x03\x02\x02\x02\u04CE\u04CF\x03\x02\x02\x02\u04CF\u04D0" +
		"\x03\x02\x02\x02\u04D0\u04D2\x07\xAE\x02\x02\u04D1\u04D3\x05\u0286\u0144" +
		"\x02\u04D2\u04D1\x03\x02\x02\x02\u04D2\u04D3\x03\x02\x02\x02\u04D3\u04D4" +
		"\x03\x02\x02\x02\u04D4\u04D5\x05\u0230\u0119\x02\u04D5\u04E0\x05`1\x02" +
		"\u04D6\u04DD\x05r:\x02\u04D7\u04D9\x07\u0486\x02\x02\u04D8\u04D7\x03\x02" +
		"\x02\x02\u04D8\u04D9\x03\x02\x02\x02\u04D9\u04DA\x03\x02\x02\x02\u04DA" +
		"\u04DC\x05r:\x02\u04DB\u04D8\x03\x02\x02\x02\u04DC\u04DF\x03\x02\x02\x02" +
		"\u04DD\u04DB\x03\x02\x02\x02\u04DD\u04DE\x03\x02\x02\x02\u04DE\u04E1\x03" +
		"\x02\x02\x02\u04DF\u04DD\x03\x02\x02\x02\u04E0\u04D6\x03\x02\x02\x02\u04E0" +
		"\u04E1\x03\x02\x02\x02\u04E1\u04E3\x03\x02\x02\x02\u04E2\u04E4\x05x=\x02" +
		"\u04E3\u04E2\x03\x02\x02\x02\u04E3\u04E4\x03\x02\x02\x02\u04E4\u04E6\x03" +
		"\x02\x02\x02\u04E5\u048E\x03\x02";
	private static readonly _serializedATNSegment5: string =
		"\x02\x02\u04E5\u04A3\x03\x02\x02\x02\u04E5\u04C9\x03\x02\x02\x02\u04E6" +
		"-\x03\x02\x02\x02\u04E7\u04E8\x07$\x02\x02\u04E8\u04E9\x07\u028C\x02\x02" +
		"\u04E9\u04EA\x05\u024E\u0128\x02\u04EA\u04EB\x07\x07\x02\x02\u04EB\u04EC" +
		"\x07\u0187\x02\x02\u04EC\u04F0\x07\u0493\x02\x02\u04ED\u04EE\x07\u01AE" +
		"\x02\x02\u04EE\u04EF\x07\u047B\x02\x02\u04EF\u04F1\x05\u0256\u012C\x02" +
		"\u04F0\u04ED\x03\x02\x02\x02\u04F0\u04F1\x03\x02\x02\x02\u04F1\u04F7\x03" +
		"\x02\x02\x02\u04F2\u04F4\x07\u019B\x02\x02\u04F3\u04F5\x07\u047B\x02\x02" +
		"\u04F4\u04F3\x03\x02\x02\x02\u04F4\u04F5\x03\x02\x02\x02\u04F5\u04F6\x03" +
		"\x02\x02\x02\u04F6\u04F8\x05\u0240\u0121\x02\u04F7\u04F2\x03\x02\x02\x02" +
		"\u04F7\u04F8\x03\x02\x02\x02\u04F8/\x03\x02\x02\x02\u04F9\u04FA\x07$\x02" +
		"\x02\u04FA\u04FB\x07\u028C\x02\x02\u04FB\u04FC\x05\u024E\u0128\x02\u04FC" +
		"\u04FD\x07\x07\x02\x02\u04FD\u04FE\x07\u0187\x02\x02\u04FE\u04FF\x07\u0493" +
		"\x02\x02\u04FF\u0500\x07\xBC\x02\x02\u0500\u0501\x07\u01DE\x02\x02\u0501" +
		"\u0502\x07K\x02\x02\u0502\u0508\x05\u024E\u0128\x02\u0503\u0505\x07\u01A9" +
		"\x02\x02\u0504\u0506\x07\u047B\x02\x02\u0505\u0504\x03\x02\x02\x02\u0505" +
		"\u0506\x03\x02\x02\x02\u0506\u0507\x03\x02\x02\x02\u0507\u0509\x05\u0256" +
		"\u012C\x02\u0508\u0503\x03\x02\x02\x02\u0508\u0509\x03\x02\x02\x02\u0509" +
		"\u050F\x03\x02\x02\x02\u050A\u050C\x07\u01C7\x02\x02\u050B\u050D\x07\u047B" +
		"\x02\x02\u050C\u050B\x03\x02\x02\x02\u050C\u050D\x03\x02\x02\x02\u050D" +
		"\u050E\x03\x02\x02\x02\u050E\u0510\x05\u0256\u012C\x02\u050F\u050A\x03" +
		"\x02\x02\x02\u050F\u0510\x03\x02\x02\x02\u0510\u0516\x03\x02\x02\x02\u0511" +
		"\u0513\x07\u0157\x02\x02\u0512\u0514\x07\u047B\x02\x02\u0513\u0512\x03" +
		"\x02\x02\x02\u0513\u0514\x03\x02\x02\x02\u0514\u0515\x03\x02\x02\x02\u0515" +
		"\u0517\x05\u0256\u012C\x02\u0516\u0511\x03\x02\x02\x02\u0516\u0517\x03" +
		"\x02\x02\x02\u0517\u051D\x03\x02\x02\x02\u0518\u051A\x07\u01F8\x02\x02" +
		"\u0519\u051B\x07\u047B\x02\x02\u051A\u0519\x03\x02\x02\x02\u051A\u051B" +
		"\x03\x02\x02\x02\u051B\u051C\x03\x02\x02\x02\u051C\u051E\x05\u0256\u012C" +
		"\x02\u051D\u0518\x03\x02\x02\x02\u051D\u051E\x03\x02\x02\x02\u051E\u0524" +
		"\x03\x02\x02\x02\u051F\u0521\x07\u0213\x02\x02\u0520\u0522\x07\u047B\x02" +
		"\x02\u0521\u0520\x03\x02\x02\x02\u0521\u0522\x03\x02\x02\x02\u0522\u0523" +
		"\x03\x02\x02\x02\u0523\u0525\x05\u024E\u0128\x02\u0524\u051F\x03\x02\x02" +
		"\x02\u0524\u0525\x03\x02\x02\x02\u0525\u0527\x03\x02\x02\x02\u0526\u0528" +
		"\x07\u02A8\x02\x02\u0527\u0526\x03\x02\x02\x02\u0527\u0528\x03\x02\x02" +
		"\x02\u0528\u052E\x03\x02\x02\x02\u0529\u052B\x07\u0172\x02\x02\u052A\u052C" +
		"\x07\u047B\x02\x02\u052B\u052A\x03\x02\x02\x02\u052B\u052C\x03\x02\x02" +
		"\x02\u052C\u052D\x03\x02\x02\x02\u052D\u052F\x07\u0493\x02\x02\u052E\u0529" +
		"\x03\x02\x02\x02\u052E\u052F\x03\x02\x02\x02\u052F\u0530\x03\x02\x02\x02" +
		"\u0530\u0532\x07\u019B\x02\x02\u0531\u0533\x07\u047B\x02\x02\u0532\u0531" +
		"\x03\x02\x02\x02\u0532\u0533\x03\x02\x02\x02\u0533\u0534\x03\x02\x02\x02" +
		"\u0534\u0535\x05\u0240\u0121\x02\u05351\x03\x02\x02\x02\u0536\u0538\x07" +
		"$\x02\x02\u0537\u0539\x05\u0288\u0145\x02\u0538\u0537\x03\x02\x02\x02" +
		"\u0538\u0539\x03\x02\x02\x02\u0539\u053B\x03\x02\x02\x02\u053A\u053C\x05" +
		"H%\x02\u053B\u053A\x03\x02\x02\x02\u053B\u053C\x03\x02\x02\x02\u053C\u053D" +
		"\x03\x02\x02\x02\u053D\u053E\x07\xB3\x02\x02\u053E\u053F\x05\u022E\u0118" +
		"\x02\u053F\u0540\t\t\x02\x02\u0540\u0541\t\n\x02\x02\u0541\u0542\x07x" +
		"\x02\x02\u0542\u0543\x05\u0230\u0119\x02\u0543\u0544\x07C\x02\x02\u0544" +
		"\u0545\x077\x02\x02\u0545\u0548\x07\u025C\x02\x02\u0546\u0547\t\v\x02" +
		"\x02\u0547\u0549\x05\u022E\u0118\x02\u0548\u0546\x03\x02\x02\x02\u0548" +
		"\u0549\x03\x02\x02\x02\u0549\u054A\x03\x02\x02\x02\u054A\u054B\x05\u018E" +
		"\xC8\x02\u054B3\x03\x02\x02\x02\u054C\u054E\x07\xC2\x02\x02\u054D\u054F" +
		"\x07\u023F\x02\x02\u054E\u054D\x03\x02\x02\x02\u054E\u054F\x03\x02\x02" +
		"\x02\u054F\u0550\x03\x02\x02\x02\u0550\u0551\x056\x1C\x02\u05515\x03\x02" +
		"\x02\x02\u0552\u055E\x058\x1D\x02\u0553\u0554\x07\u0484\x02\x02\u0554" +
		"\u0559\x05:\x1E\x02\u0555\u0556\x07\u0486\x02\x02\u0556\u0558\x05:\x1E" +
		"\x02\u0557\u0555\x03\x02\x02\x02\u0558\u055B\x03\x02\x02\x02\u0559\u0557" +
		"\x03\x02\x02\x02\u0559\u055A\x03\x02\x02\x02\u055A\u055C\x03\x02\x02\x02" +
		"\u055B\u0559\x03\x02\x02\x02\u055C\u055D\x07\u0485\x02\x02\u055D\u055F" +
		"\x03\x02\x02\x02\u055E\u0553\x03\x02\x02\x02\u055E\u055F\x03\x02\x02\x02" +
		"\u055F\u0560\x03\x02\x02\x02\u0560\u0561\x07\x0E\x02\x02\u0561\u0562\x07" +
		"\u0484\x02\x02\u0562\u0563\x05\x0E\b\x02\u0563\u0566\x07\u0485\x02\x02" +
		"\u0564\u0565\x07\u0486\x02\x02\u0565\u0567\x056\x1C\x02\u0566\u0564\x03" +
		"\x02\x02\x02\u0566\u0567\x03\x02\x02\x02\u05677\x03\x02\x02\x02\u0568" +
		"\u0569\x05\u024E\u0128\x02\u05699\x03\x02\x02\x02\u056A\u056B\x05\u024E" +
		"\u0128\x02\u056B;\x03\x02\x02\x02\u056C\u056E\x07$\x02\x02\u056D\u056F" +
		"\x05\u0288\u0145\x02\u056E\u056D\x03\x02\x02\x02\u056E\u056F\x03\x02\x02" +
		"\x02\u056F\u0573\x03\x02\x02\x02\u0570\u0571\x07\u0152\x02\x02\u0571\u0572" +
		"\x07\u047B\x02\x02\u0572\u0574\t\f\x02\x02\u0573\u0570\x03\x02\x02\x02" +
		"\u0573\u0574\x03\x02\x02\x02\u0574\u0576\x03\x02\x02\x02\u0575\u0577\x05" +
		"H%\x02\u0576\u0575\x03\x02\x02\x02\u0576\u0577\x03\x02\x02\x02\u0577\u057B" +
		"\x03\x02\x02\x02\u0578\u0579\x07\xA2\x02\x02\u0579\u057A\x07\u0262\x02" +
		"\x02\u057A\u057C\t\r\x02\x02\u057B\u0578\x03\x02\x02\x02\u057B\u057C\x03" +
		"\x02\x02\x02\u057C\u057D\x03\x02\x02\x02\u057D\u057E\x07\u02A5\x02\x02" +
		"\u057E\u0583\x05\u022E\u0118\x02\u057F\u0580\x07\u0484\x02\x02\u0580\u0581" +
		"\x05\u026E\u0138\x02\u0581\u0582\x07\u0485\x02\x02\u0582\u0584\x03\x02" +
		"\x02\x02\u0583\u057F\x03\x02\x02\x02\u0583\u0584\x03\x02\x02\x02\u0584" +
		"\u0585\x03\x02\x02\x02\u0585\u0599\x07\x0E\x02\x02\u0586\u0588\x07\u0484" +
		"\x02\x02\u0587\u0589\x054\x1B\x02\u0588\u0587\x03\x02\x02\x02\u0588\u0589" +
		"\x03\x02\x02\x02\u0589\u058A\x03\x02\x02\x02\u058A\u058B\x05\xD4k\x02" +
		"\u058B\u058C\x07\u0485\x02\x02\u058C\u059A\x03\x02\x02\x02\u058D\u058F" +
		"\x054\x1B\x02\u058E\u058D\x03\x02\x02\x02\u058E\u058F\x03\x02\x02\x02" +
		"\u058F\u0590\x03\x02\x02\x02\u0590\u0597\x05\xD4k\x02\u0591\u0593\x07" +
		"\xC2\x02\x02\u0592\u0594\t\x0E\x02\x02\u0593\u0592\x03\x02\x02\x02\u0593" +
		"\u0594\x03\x02\x02\x02\u0594\u0595\x03\x02\x02\x02\u0595\u0596\x07\x1D" +
		"\x02\x02\u0596\u0598\x07z\x02\x02\u0597\u0591\x03\x02\x02\x02\u0597\u0598" +
		"\x03\x02\x02\x02\u0598\u059A\x03\x02\x02\x02\u0599\u0586\x03\x02\x02\x02" +
		"\u0599\u058E\x03\x02\x02\x02\u059A=\x03\x02\x02\x02\u059B\u059D\x07$\x02" +
		"\x02\u059C\u059E\x05\u0288\u0145\x02\u059D\u059C\x03\x02\x02\x02\u059D" +
		"\u059E\x03\x02\x02\x02\u059E\u05A0\x03\x02\x02\x02\u059F\u05A1\x07\u028E" +
		"\x02\x02\u05A0\u059F\x03\x02\x02\x02\u05A0\u05A1\x03\x02\x02\x02\u05A1" +
		"\u05A2\x03\x02\x02\x02\u05A2\u05A4\x07\u0263\x02\x02\u05A3\u05A5\x05\u0286" +
		"\u0144\x02\u05A4\u05A3\x03\x02\x02\x02\u05A4\u05A5\x03\x02\x02\x02\u05A5" +
		"\u05A6\x03\x02\x02\x02\u05A6\u05AB\x05\u022E\u0118\x02\u05A7\u05AA\x05" +
		"@!\x02\u05A8\u05AA\x05r:\x02\u05A9\u05A7\x03\x02\x02\x02\u05A9\u05A8\x03" +
		"\x02\x02\x02\u05AA\u05AD\x03\x02\x02\x02\u05AB\u05A9\x03\x02\x02\x02\u05AB" +
		"\u05AC\x03\x02\x02\x02\u05AC?\x03\x02\x02\x02\u05AD\u05AB\x03\x02\x02" +
		"\x02\u05AE\u05B0\x07\u01C5\x02\x02\u05AF\u05B1\t\x0F\x02\x02\u05B0\u05AF" +
		"\x03\x02\x02\x02\u05B0\u05B1\x03\x02\x02\x02\u05B1\u05B2\x03\x02\x02\x02" +
		"\u05B2\u05D6\x05\u0254\u012B\x02\u05B3\u05B5\x07q\x02\x02\u05B4\u05B6" +
		"\x07\u047B\x02\x02\u05B5\u05B4\x03\x02\x02\x02\u05B5\u05B6\x03\x02\x02" +
		"\x02\u05B6\u05B7\x03\x02\x02\x02\u05B7\u05D6\x05\u0254\u012B\x02\u05B8" +
		"\u05B9\x07\u020C\x02\x02\u05B9\u05D6\x07q\x02\x02\u05BA\u05D6\x07\u0211" +
		"\x02\x02\u05BB\u05BD\x07p\x02\x02\u05BC\u05BE\x07\u047B\x02\x02\u05BD" +
		"\u05BC\x03\x02\x02\x02\u05BD\u05BE\x03\x02\x02\x02\u05BE\u05BF\x03\x02" +
		"\x02\x02\u05BF\u05D6\x05\u0254\u012B\x02\u05C0\u05C1\x07\u020C\x02\x02" +
		"\u05C1\u05D6\x07p\x02\x02\u05C2\u05D6\x07\u0210\x02\x02\u05C3\u05C5\x07" +
		"\u027A\x02\x02\u05C4\u05C6\t\x10\x02\x02\u05C5\u05C4\x03\x02\x02\x02\u05C5" +
		"\u05C6\x03\x02\x02\x02\u05C6\u05C7\x03\x02\x02\x02\u05C7\u05D6\x05\u0254" +
		"\u012B\x02\u05C8\u05CA\x07\u0161\x02\x02\u05C9\u05CB\x07\u047B\x02\x02" +
		"\u05CA\u05C9\x03\x02\x02\x02\u05CA\u05CB\x03\x02\x02\x02\u05CB\u05CC\x03" +
		"\x02\x02\x02\u05CC\u05D6\x05\u0254\u012B\x02\u05CD\u05D6\x07\u020D\x02" +
		"\x02\u05CE\u05D6\x07\u0184\x02\x02\u05CF\u05D6\x07\u020F\x02\x02\u05D0" +
		"\u05D2\x07\u0252\x02\x02\u05D1\u05D3\t\x10\x02\x02\u05D2\u05D1\x03\x02" +
		"\x02\x02\u05D2\u05D3\x03\x02\x02\x02\u05D3\u05D4\x03\x02\x02\x02\u05D4" +
		"\u05D6\x05\u0254\u012B\x02\u05D5\u05AE\x03\x02\x02\x02\u05D5\u05B3\x03" +
		"\x02\x02\x02\u05D5\u05B8\x03\x02\x02\x02\u05D5\u05BA\x03\x02\x02\x02\u05D5" +
		"\u05BB\x03\x02\x02\x02\u05D5\u05C0\x03\x02\x02\x02\u05D5\u05C2\x03\x02" +
		"\x02\x02\u05D5\u05C3\x03\x02\x02\x02\u05D5\u05C8\x03\x02\x02\x02\u05D5" +
		"\u05CD\x03\x02\x02\x02\u05D5\u05CE\x03\x02\x02\x02\u05D5\u05CF\x03\x02" +
		"\x02\x02\u05D5\u05D0\x03\x02\x02\x02\u05D6A\x03\x02\x02\x02\u05D7\u05D9" +
		"\x07-\x02\x02\u05D8\u05D7\x03\x02\x02\x02\u05D8\u05D9\x03\x02\x02\x02" +
		"\u05D9\u05DA\x03\x02\x02\x02\u05DA\u05DC\x05D#\x02\u05DB\u05DD\x07\u047B" +
		"\x02\x02\u05DC\u05DB\x03\x02\x02\x02\u05DC\u05DD\x03\x02\x02\x02\u05DD" +
		"\u05E0\x03\x02\x02\x02\u05DE\u05E1\x05\u023C\u011F\x02\u05DF\u05E1\x07" +
		"-\x02\x02\u05E0\u05DE\x03\x02\x02\x02\u05E0\u05DF\x03\x02\x02\x02\u05E1" +
		"\u05F9\x03\x02\x02\x02\u05E2\u05E4\x07-\x02\x02\u05E3\u05E2\x03\x02\x02" +
		"\x02\u05E3\u05E4\x03\x02\x02\x02\u05E4\u05E5\x03\x02\x02\x02\u05E5\u05E7" +
		"\x07\x1E\x02\x02\u05E6\u05E8\x07\u047B\x02\x02\u05E7\u05E6\x03\x02\x02" +
		"\x02\u05E7\u05E8\x03\x02\x02\x02\u05E8\u05E9\x03\x02\x02\x02\u05E9\u05F9" +
		"\x05\u023E\u0120\x02\u05EA\u05EC\x07-\x02\x02\u05EB\u05EA\x03\x02\x02" +
		"\x02\u05EB\u05EC\x03\x02\x02\x02\u05EC\u05ED\x03\x02\x02\x02\u05ED\u05EF" +
		"\x07\u0197\x02\x02\u05EE\u05F0\x07\u047B\x02\x02\u05EF\u05EE\x03\x02\x02" +
		"\x02\u05EF\u05F0\x03\x02\x02\x02\u05F0\u05F1\x03\x02\x02\x02\u05F1\u05F9" +
		"\x07\u0493\x02\x02\u05F2\u05F3\x07\x89\x02\x02\u05F3\u05F5\x07\u021D\x02" +
		"\x02\u05F4\u05F6\x07\u047B\x02\x02\u05F5\u05F4\x03\x02\x02\x02\u05F5\u05F6" +
		"\x03\x02\x02\x02\u05F6\u05F7\x03\x02\x02\x02\u05F7\u05F9\t\x11\x02\x02" +
		"\u05F8\u05D8\x03\x02\x02\x02\u05F8\u05E3\x03\x02\x02\x02\u05F8\u05EB\x03" +
		"\x02\x02\x02\u05F8\u05F2\x03\x02\x02\x02\u05F9C\x03\x02\x02\x02\u05FA" +
		"\u05FB\x07\x1C\x02\x02\u05FB\u0600\x07\x9C\x02\x02\u05FC\u0600\x07\u0352" +
		"\x02\x02\u05FD\u05FE\x07\xE0\x02\x02\u05FE\u0600\x07\x9C\x02\x02\u05FF" +
		"\u05FA\x03\x02\x02\x02\u05FF\u05FC\x03\x02\x02\x02\u05FF\u05FD\x03\x02" +
		"\x02\x02\u0600E\x03\x02\x02\x02\u0601\u0604\x07(\x02\x02\u0602\u0603\x07" +
		"\u0484\x02\x02\u0603\u0605\x07\u0485\x02\x02\u0604\u0602\x03\x02\x02\x02" +
		"\u0604\u0605\x03\x02\x02\x02\u0605G\x03\x02\x02\x02\u0606\u0607\x07\u018A" +
		"\x02\x02\u0607\u060B\x07\u047B\x02\x02\u0608\u060C\x05\u0238\u011D\x02" +
		"\u0609\u060C\x05F$\x02\u060A\u060C\x07\'\x02\x02\u060B\u0608\x03\x02\x02" +
		"\x02\u060B\u0609\x03\x02\x02\x02\u060B\u060A\x03\x02\x02\x02\u060CI\x03" +
		"\x02\x02\x02\u060D\u060E\x07\u0154\x02\x02\u060E\u0612\x05L\'\x02\u060F" +
		"\u0611\x05N(\x02\u0610\u060F\x03\x02\x02\x02\u0611\u0614\x03\x02\x02\x02" +
		"\u0612\u0610\x03\x02\x02\x02\u0612\u0613\x03\x02\x02\x02\u0613\u0630\x03" +
		"\x02\x02\x02\u0614\u0612\x03\x02\x02\x02\u0615\u0618\x07\u01A3\x02\x02" +
		"\u0616\u0619\x05\u0254\u012B\x02\u0617\u0619\x05\u02B6\u015C\x02\u0618" +
		"\u0616\x03\x02\x02\x02\u0618\u0617\x03\x02\x02\x02\u0619\u061A\x03\x02" +
		"\x02\x02\u061A\u0623\x05P)\x02\u061B\u061C\x07\u027B\x02\x02\u061C\u0620" +
		"\x05L\'\x02\u061D\u061F\x05N(\x02\u061E\u061D\x03\x02\x02\x02\u061F\u0622" +
		"\x03\x02\x02\x02\u0620\u061E\x03\x02\x02\x02\u0620\u0621\x03\x02\x02\x02" +
		"\u0621\u0624\x03\x02\x02\x02\u0622\u0620\x03\x02\x02\x02\u0623\u061B\x03" +
		"\x02\x02\x02\u0623\u0624\x03\x02\x02\x02\u0624\u062D\x03\x02\x02\x02\u0625" +
		"\u0626\x07\u019A\x02\x02\u0626\u062A\x05L\'\x02\u0627\u0629\x05N(\x02" +
		"\u0628\u0627\x03\x02\x02\x02\u0629\u062C\x03\x02\x02\x02\u062A\u0628\x03" +
		"\x02\x02\x02\u062A\u062B\x03\x02\x02\x02\u062B\u062E\x03\x02\x02\x02\u062C" +
		"\u062A\x03\x02\x02\x02\u062D\u0625\x03\x02\x02\x02\u062D\u062E\x03\x02" +
		"\x02\x02\u062E\u0630\x03\x02\x02\x02\u062F\u060D\x03\x02\x02\x02\u062F" +
		"\u0615\x03\x02\x02\x02\u0630K\x03\x02\x02\x02\u0631\u0636\x07\u013D\x02" +
		"\x02\u0632\u0636\x05\u0258\u012D\x02\u0633\u0636\x05\u0254\u012B\x02\u0634" +
		"\u0636\x05\u02B6\u015C\x02\u0635\u0631\x03\x02\x02\x02\u0635\u0632\x03" +
		"\x02\x02\x02\u0635\u0633\x03\x02\x02\x02\u0635\u0634\x03\x02\x02\x02\u0636" +
		"M\x03\x02\x02\x02\u0637\u0638\x07\u0477\x02\x02\u0638\u063B\x07X\x02\x02" +
		"\u0639\u063C\x05\u0254\u012B\x02\u063A\u063C\x05\u02B6\u015C\x02\u063B" +
		"\u0639\x03\x02\x02\x02\u063B\u063A\x03\x02\x02\x02\u063C\u063D\x03\x02" +
		"\x02\x02\u063D\u063E\x05P)\x02\u063EO\x03\x02\x02\x02\u063F\u064D\x05" +
		"\u02CE\u0168\x02\u0640\u064D\x07\xDF\x02\x02\u0641\u064D\x07\xF2\x02\x02" +
		"\u0642\u064D\x07\xF3\x02\x02\u0643\u064D\x07\xF4\x02\x02\u0644\u064D\x07" +
		"\xF5\x02\x02\u0645\u064D\x07\xF6\x02\x02\u0646\u064D\x07\xF7\x02\x02\u0647" +
		"\u064D\x07\xF8\x02\x02\u0648\u064D\x07\xF9\x02\x02\u0649\u064D\x07\xFA" +
		"\x02\x02\u064A\u064D\x07\xFB\x02\x02\u064B\u064D\x07\xFC\x02\x02\u064C" +
		"\u063F\x03\x02\x02\x02\u064C\u0640\x03\x02\x02\x02\u064C\u0641\x03\x02" +
		"\x02\x02\u064C\u0642\x03\x02\x02\x02\u064C\u0643\x03\x02\x02\x02\u064C" +
		"\u0644\x03\x02\x02\x02\u064C\u0645\x03\x02\x02\x02\u064C\u0646\x03\x02" +
		"\x02\x02\u064C\u0647\x03\x02\x02\x02\u064C\u0648\x03\x02\x02\x02\u064C" +
		"\u0649\x03\x02\x02\x02\u064C\u064A\x03\x02\x02\x02\u064C\u064B\x03\x02" +
		"\x02\x02\u064DQ\x03\x02\x02\x02\u064E\u0654\x07\u0195\x02\x02\u064F\u0654" +
		"\x07\u018E\x02\x02\u0650\u0651\x07\u018E\x02\x02\u0651\u0652\x07x\x02" +
		"\x02\u0652\u0654\x07\u026A\x02\x02\u0653\u064E\x03\x02\x02\x02\u0653\u064F" +
		"\x03\x02\x02\x02\u0653\u0650\x03\x02\x02\x02\u0654S\x03\x02\x02\x02\u0655" +
		"\u0656\x07\xBD\x02\x02\u0656\u0657\t\x12\x02\x02\u0657U\x03\x02\x02\x02" +
		"\u0658\u065A\x07\u01D5\x02\x02\u0659\u065B\x07\u047B\x02\x02\u065A\u0659" +
		"\x03\x02\x02\x02\u065A\u065B\x03\x02\x02\x02\u065B\u065C\x03\x02\x02\x02" +
		"\u065C\u0677\x05\u0256\u012C\x02\u065D\u0677\x05T+\x02\u065E\u065F\x07" +
		"\xC2\x02\x02\u065F\u0660\x07\u0226\x02\x02\u0660\u0677\x05\u024E\u0128" +
		"\x02\u0661\u0662\x07\u0172\x02\x02\u0662\u0677\x07\u0493\x02\x02\u0663" +
		"\u0677\t\x13\x02\x02\u0664\u0666\x07\u0374\x02\x02\u0665\u0667\x07\u047B" +
		"\x02\x02\u0666\u0665\x03\x02\x02\x02\u0666\u0667\x03\x02\x02\x02\u0667" +
		"\u0668\x03\x02\x02\x02\u0668\u0677\x07\u0493\x02\x02\u0669\u066B\x07\u03F0" +
		"\x02\x02\u066A\u066C\x07\u047B\x02\x02\u066B\u066A\x03\x02\x02\x02\u066B" +
		"\u066C\x03\x02\x02\x02\u066C\u066D\x03\x02\x02\x02\u066D\u0677\x07\u0493" +
		"\x02\x02\u066E\u066F\x07\u016C\x02\x02\u066F\u0670\x07\u047B\x02\x02\u0670" +
		"\u0677\t\x14\x02\x02\u0671\u0675\x07Q\x02\x02\u0672\u0673\x07t\x02\x02" +
		"\u0673\u0675\x07Q\x02\x02\u0674\u0671\x03\x02\x02\x02\u0674\u0672\x03" +
		"\x02\x02\x02\u0675\u0677\x03\x02\x02\x02\u0676\u0658\x03\x02\x02\x02\u0676" +
		"\u065D\x03\x02\x02\x02\u0676\u065E\x03\x02\x02\x02\u0676\u0661\x03\x02" +
		"\x02\x02\u0676\u0663\x03\x02\x02\x02\u0676\u0664\x03\x02\x02\x02\u0676" +
		"\u0669\x03\x02\x02\x02\u0676\u066E\x03\x02\x02\x02\u0676\u0674\x03\x02" +
		"\x02\x02\u0677W\x03\x02\x02\x02\u0678\u067A\t\x15\x02\x02\u0679\u0678" +
		"\x03\x02\x02\x02\u0679\u067A\x03\x02\x02\x02\u067A\u067B\x03\x02\x02\x02" +
		"\u067B\u067C\x05\u024E\u0128\x02\u067C\u067D\x05\u0262\u0132\x02\u067D" +
		"Y\x03\x02\x02\x02\u067E\u067F\x05\u024E\u0128\x02\u067F\u0680\x05\u0262" +
		"\u0132\x02\u0680[\x03\x02\x02\x02\u0681\u0682\x07\u0172\x02\x02\u0682" +
		"\u0699\x07\u0493\x02\x02\u0683\u0684\x07\u01D6\x02\x02\u0684\u0699\x07" +
		"\xA2\x02\x02\u0685\u0687\x07t\x02\x02\u0686\u0685\x03\x02\x02\x02\u0686" +
		"\u0687\x03\x02\x02\x02\u0687\u0688\x03\x02\x02\x02\u0688\u0699\x072\x02" +
		"\x02\u0689\u068A\x07\u017F\x02\x02\u068A\u0694\x07\xA2\x02\x02\u068B\u068C" +
		"\x07\u020C\x02\x02\u068C\u0694\x07\xA2\x02\x02\u068D\u068E\x07\x8A\x02" +
		"\x02\u068E\u068F\x07\xA2\x02\x02\u068F\u0694\x07\u0186\x02\x02\u0690\u0691" +
		"\x07r\x02\x02\u0691\u0692\x07\xA2\x02\x02\u0692\u0694\x07\u0186\x02\x02" +
		"\u0693\u0689\x03\x02\x02\x02\u0693\u068B\x03\x02\x02\x02\u0693\u068D\x03" +
		"\x02\x02\x02\u0693\u0690\x03\x02\x02\x02\u0694\u0699\x03\x02\x02\x02\u0695" +
		"\u0696\x07\xA2\x02\x02\u0696\u0697\x07\u0262\x02\x02\u0697\u0699\t\r\x02" +
		"\x02\u0698\u0681\x03\x02\x02\x02\u0698\u0683\x03\x02\x02\x02\u0698\u0686" +
		"\x03\x02\x02\x02\u0698\u0693\x03\x02\x02\x02\u0698\u0695\x03\x02\x02\x02" +
		"\u0699]\x03\x02\x02\x02\u069A\u069B\x07\u01C0\x02\x02\u069B\u06A9\x07" +
		"\u0493\x02\x02\u069C\u069D\x07*\x02\x02\u069D\u06A9\x07\u0493\x02\x02" +
		"\u069E\u069F\x07\u029F\x02\x02\u069F\u06A9\x07\u0493\x02\x02\u06A0\u06A1" +
		"\x07\u022A\x02\x02\u06A1\u06A9\x07\u0493\x02\x02\u06A2\u06A3\x07\u026E" +
		"\x02\x02\u06A3\u06A9\x07\u0493\x02\x02\u06A4\u06A5\x07\u0221\x02\x02\u06A5" +
		"\u06A9\x07\u0493\x02\x02\u06A6\u06A7\x07\u0230\x02\x02\u06A7\u06A9\x05" +
		"\u0254\u012B\x02\u06A8\u069A\x03\x02\x02\x02\u06A8\u069C\x03\x02\x02\x02" +
		"\u06A8\u069E\x03\x02\x02\x02\u06A8\u06A0\x03\x02\x02\x02\u06A8\u06A2\x03" +
		"\x02\x02\x02\u06A8\u06A4\x03\x02\x02\x02\u06A8\u06A6\x03\x02\x02\x02\u06A9" +
		"_\x03\x02\x02\x02\u06AA\u06AB\x07\u0484\x02\x02\u06AB\u06B0\x05b2\x02" +
		"\u06AC\u06AD\x07\u0486\x02\x02\u06AD\u06AF\x05b2\x02\u06AE\u06AC\x03\x02" +
		"\x02\x02\u06AF\u06B2\x03\x02\x02\x02\u06B0\u06AE\x03\x02\x02\x02\u06B0" +
		"\u06B1\x03\x02\x02\x02\u06B1\u06B3\x03\x02\x02\x02\u06B2\u06B0\x03\x02" +
		"\x02\x02\u06B3\u06B4\x07\u0485\x02\x02\u06B4a\x03\x02\x02\x02\u06B5\u06B6" +
		"\x05\u024E\u0128\x02\u06B6\u06B7\x05d3\x02\u06B7\u06BB\x03\x02\x02\x02" +
		"\u06B8\u06BB\x05h5\x02\u06B9\u06BB\x05p9\x02\u06BA\u06B5\x03\x02\x02\x02" +
		"\u06BA\u06B8\x03\x02\x02\x02\u06BA\u06B9\x03\x02\x02\x02\u06BBc\x03\x02" +
		"\x02\x02\u06BC\u06C0\x05\u0262\u0132\x02\u06BD\u06BF\x05f4\x02\u06BE\u06BD" +
		"\x03\x02\x02\x02\u06BF\u06C2\x03\x02\x02\x02\u06C0\u06BE\x03\x02\x02\x02" +
		"\u06C0\u06C1\x03\x02\x02\x02\u06C1e\x03\x02\x02\x02\u06C2\u06C0\x03\x02" +
		"\x02\x02\u06C3\u06F9\x05\u025E\u0130\x02\u06C4\u06C5\x07-\x02\x02\u06C5" +
		"\u06F9\x05\u027E\u0140\x02\u06C6\u06F9\x07\u02A7\x02\x02\u06C7\u06F9\x07" +
		"\u01CD\x02\x02\u06C8\u06CD\x07\u0158\x02\x02\u06C9\u06CA\x07x\x02\x02" +
		"\u06CA\u06CB\x07\xBA\x02\x02\u06CB\u06CD\x05\u0280\u0141\x02\u06CC\u06C8" +
		"\x03\x02\x02\x02\u06CC\u06C9\x03\x02\x02\x02\u06CD\u06F9\x03\x02\x02\x02" +
		"\u06CE\u06D0\x07\x84\x02\x02\u06CF\u06CE\x03\x02\x02\x02\u06CF\u06D0\x03" +
		"\x02\x02\x02\u06D0\u06D1\x03\x02\x02\x02\u06D1\u06F9\x07]\x02\x02\u06D2" +
		"\u06D4\x07\xB7\x02\x02\u06D3\u06D5\x07]\x02\x02\u06D4\u06D3\x03\x02\x02" +
		"\x02\u06D4\u06D5\x03\x02\x02\x02\u06D5\u06F9\x03\x02\x02\x02\u06D6\u06D7" +
		"\x07\u0172\x02\x02\u06D7\u06F9\x07\u0493\x02\x02\u06D8\u06D9\x07\u0170" +
		"\x02\x02\u06D9\u06F9\t\x16\x02\x02\u06DA\u06DB\x07\u0281\x02\x02\u06DB" +
		"\u06F9\t\x17\x02\x02\u06DC\u06F9\x05j6\x02\u06DD\u06DE\x07\x1E\x02\x02" +
		"\u06DE\u06F9\x05\u023E\u0120\x02\u06DF\u06E0\x07H\x02\x02\u06E0\u06E2" +
		"\x07\n\x02\x02\u06E1\u06DF\x03\x02\x02\x02\u06E1\u06E2\x03\x02\x02\x02" +
		"\u06E2\u06E3\x03\x02\x02\x02\u06E3\u06E4\x07\x0E\x02\x02\u06E4\u06E5\x07" +
		"\u0484\x02\x02\u06E5\u06E6\x05\u02B6\u015C\x02\u06E6\u06E8\x07\u0485\x02" +
		"\x02\u06E7\u06E9\t\x18\x02\x02\u06E8\u06E7\x03\x02\x02\x02\u06E8\u06E9" +
		"\x03\x02\x02\x02\u06E9\u06F9\x03\x02\x02\x02\u06EA\u06EB\x07\xF1\x02\x02" +
		"\u06EB\u06EC\x07-\x02\x02\u06EC\u06F9\x07\u02A3\x02\x02\u06ED\u06EF\x07" +
		"!\x02\x02\u06EE\u06F0\x05\u024E\u0128\x02\u06EF\u06EE\x03\x02\x02\x02" +
		"\u06EF\u06F0\x03\x02\x02\x02\u06F0\u06F2\x03\x02\x02\x02\u06F1\u06ED\x03" +
		"\x02\x02\x02\u06F1\u06F2\x03\x02\x02\x02\u06F2\u06F3\x03\x02\x02\x02\u06F3" +
		"\u06F4\x07\x1D\x02\x02\u06F4\u06F5\x07\u0484\x02\x02\u06F5\u06F6\x05\u02B6" +
		"\u015C\x02\u06F6\u06F7\x07\u0485\x02\x02\u06F7\u06F9\x03\x02\x02\x02\u06F8" +
		"\u06C3\x03\x02\x02\x02\u06F8\u06C4\x03\x02\x02\x02\u06F8\u06C6\x03\x02" +
		"\x02\x02\u06F8\u06C7\x03\x02\x02\x02\u06F8\u06CC\x03\x02\x02\x02\u06F8" +
		"\u06CF\x03\x02\x02\x02\u06F8\u06D2\x03\x02\x02\x02\u06F8\u06D6\x03\x02" +
		"\x02\x02\u06F8\u06D8\x03\x02\x02\x02\u06F8\u06DA\x03\x02\x02\x02\u06F8" +
		"\u06DC\x03\x02\x02\x02\u06F8\u06DD\x03\x02\x02\x02\u06F8\u06E1\x03\x02" +
		"\x02\x02\u06F8\u06EA\x03\x02\x02\x02\u06F8\u06F1\x03\x02\x02\x02\u06F9" +
		"g\x03\x02\x02\x02\u06FA\u06FC\x07!\x02\x02\u06FB\u06FD\x05\u024E\u0128" +
		"\x02\u06FC\u06FB\x03\x02\x02\x02\u06FC\u06FD\x03\x02\x02\x02\u06FD\u06FF" +
		"\x03\x02\x02\x02\u06FE\u06FA\x03\x02\x02\x02\u06FE\u06FF\x03\x02\x02\x02" +
		"\u06FF\u0700\x03\x02\x02\x02\u0700\u0701\x07\x84\x02\x02\u0701\u0703\x07" +
		"]\x02\x02\u0702\u0704\x05\u024E\u0128\x02\u0703\u0702\x03\x02\x02\x02" +
		"\u0703\u0704\x03\x02\x02\x02\u0704\u0706\x03\x02\x02\x02\u0705\u0707\x05" +
		"T+\x02\u0706\u0705\x03\x02\x02\x02\u0706\u0707\x03\x02\x02\x02\u0707\u0708" +
		"\x03\x02\x02\x02\u0708\u070C\x05\u0272\u013A\x02\u0709\u070B\x05V,\x02" +
		"\u070A\u0709\x03\x02\x02\x02\u070B\u070E\x03\x02\x02\x02\u070C\u070A\x03" +
		"\x02\x02\x02\u070C\u070D\x03\x02\x02\x02\u070D\u0740\x03\x02\x02\x02\u070E" +
		"\u070C\x03\x02\x02\x02\u070F\u0711\x07!\x02\x02\u0710\u0712\x05\u024E" +
		"\u0128\x02\u0711\u0710\x03\x02\x02\x02\u0711\u0712\x03\x02\x02\x02\u0712" +
		"\u0714\x03\x02\x02\x02\u0713\u070F\x03\x02\x02\x02\u0713\u0714\x03\x02" +
		"\x02\x02\u0714\u0715\x03\x02\x02\x02\u0715\u0717\x07\xB7\x02\x02\u0716" +
		"\u0718\t\x19\x02\x02\u0717\u0716\x03\x02\x02\x02\u0717\u0718\x03\x02\x02" +
		"\x02\u0718\u071A\x03\x02\x02\x02\u0719\u071B\x05\u024E\u0128\x02\u071A" +
		"\u0719\x03\x02\x02\x02\u071A\u071B\x03\x02\x02\x02\u071B\u071D\x03\x02" +
		"\x02\x02\u071C\u071E\x05T+\x02\u071D\u071C\x03\x02\x02\x02\u071D\u071E" +
		"\x03\x02\x02\x02\u071E\u071F\x03\x02\x02\x02\u071F\u0723\x05\u0272\u013A" +
		"\x02\u0720\u0722\x05V,\x02\u0721\u0720\x03\x02\x02\x02\u0722\u0725\x03" +
		"\x02\x02\x02\u0723\u0721\x03\x02\x02\x02\u0723\u0724\x03\x02\x02\x02\u0724" +
		"\u0740\x03\x02\x02\x02\u0725\u0723\x03\x02\x02\x02\u0726\u0728\x07!\x02" +
		"\x02\u0727\u0729\x05\u024E\u0128\x02\u0728\u0727\x03\x02\x02\x02\u0728" +
		"\u0729\x03\x02\x02\x02\u0729\u072B\x03\x02\x02\x02\u072A\u0726\x03\x02" +
		"\x02\x02\u072A\u072B\x03\x02\x02\x02\u072B\u072C\x03\x02\x02\x02\u072C" +
		"\u072D\x07E\x02\x02\u072D\u072F\x07]\x02\x02\u072E\u0730\x05\u024E\u0128" +
		"\x02\u072F\u072E\x03\x02\x02\x02\u072F\u0730\x03\x02\x02\x02\u0730\u0731" +
		"\x03\x02\x02\x02\u0731\u0732\x05\u0272\u013A\x02\u0732\u0733\x05j6\x02" +
		"\u0733\u0740\x03\x02\x02\x02\u0734\u0736\x07!\x02\x02\u0735\u0737\x05" +
		"\u024E\u0128\x02\u0736\u0735\x03\x02\x02\x02\u0736\u0737\x03\x02\x02\x02" +
		"\u0737\u0739\x03\x02\x02\x02\u0738\u0734\x03\x02\x02\x02\u0738\u0739\x03" +
		"\x02\x02\x02\u0739\u073A\x03\x02\x02\x02\u073A\u073B\x07\x1D\x02\x02\u073B" +
		"\u073C\x07\u0484\x02\x02\u073C\u073D\x05\u02B6\u015C\x02\u073D\u073E\x07" +
		"\u0485\x02\x02\u073E\u0740\x03\x02\x02\x02\u073F\u06FE\x03\x02\x02\x02" +
		"\u073F\u0713\x03\x02\x02\x02\u073F\u072A\x03\x02\x02\x02\u073F\u0738\x03" +
		"\x02\x02\x02\u0740i\x03\x02\x02\x02\u0741\u0742\x07\x8B\x02\x02\u0742" +
		"\u0744\x05\u0230\u0119\x02\u0743\u0745\x05\u0272\u013A\x02\u0744\u0743" +
		"\x03\x02\x02\x02\u0744\u0745\x03\x02\x02\x02\u0745\u0748\x03\x02\x02\x02" +
		"\u0746\u0747\x07o\x02\x02\u0747\u0749\t\x1A\x02\x02\u0748\u0746\x03\x02" +
		"\x02\x02\u0748\u0749\x03\x02\x02\x02\u0749\u074B\x03\x02\x02\x02\u074A" +
		"\u074C\x05l7\x02\u074B\u074A\x03\x02\x02\x02\u074B\u074C\x03\x02\x02\x02" +
		"\u074Ck\x03\x02\x02\x02\u074D\u074E\x07x\x02\x02\u074E\u074F\x07/\x02" +
		"\x02\u074F\u0753\x05n8\x02\u0750\u0751\x07x\x02\x02\u0751\u0752\x07\xBA" +
		"\x02\x02\u0752\u0754\x05n8\x02\u0753\u0750\x03\x02\x02\x02\u0753\u0754" +
		"\x03\x02\x02\x02\u0754\u075E\x03\x02\x02\x02\u0755\u0756\x07x\x02\x02" +
		"\u0756\u0757\x07\xBA\x02\x02\u0757\u075B\x05n8\x02\u0758\u0759\x07x\x02" +
		"\x02\u0759\u075A\x07/\x02\x02\u075A\u075C\x05n8\x02\u075B\u0758\x03\x02" +
		"\x02\x02\u075B\u075C\x03\x02\x02\x02\u075C\u075E\x03\x02\x02\x02\u075D" +
		"\u074D\x03\x02\x02\x02\u075D\u0755\x03\x02\x02\x02\u075Em\x03\x02\x02" +
		"\x02\u075F\u0766\x07\x93\x02\x02\u0760\u0766\x07\x18\x02\x02\u0761\u0762" +
		"\x07\x9C\x02\x02\u0762\u0766\x07v\x02\x02\u0763\u0764\x07\u020C\x02\x02" +
		"\u0764\u0766\x07\u014F\x02\x02\u0765\u075F\x03\x02\x02\x02\u0765\u0760" +
		"\x03\x02\x02\x02\u0765\u0761\x03\x02\x02\x02\u0765\u0763\x03\x02\x02\x02" +
		"\u0766o\x03\x02\x02\x02\u0767\u0769\t\x19\x02\x02\u0768\u076A\x05\u024E" +
		"\u0128\x02\u0769\u0768\x03\x02\x02\x02\u0769\u076A\x03\x02\x02\x02\u076A" +
		"\u076C\x03\x02\x02\x02\u076B\u076D\x05T+\x02\u076C\u076B\x03\x02\x02\x02" +
		"\u076C\u076D\x03\x02\x02\x02\u076D\u076E\x03\x02\x02\x02\u076E\u0772\x05" +
		"\u0272\u013A\x02\u076F\u0771\x05V,\x02\u0770\u076F\x03\x02\x02\x02";
	private static readonly _serializedATNSegment6: string =
		"\u0771\u0774\x03\x02\x02\x02\u0772\u0770\x03\x02\x02\x02\u0772\u0773\x03" +
		"\x02\x02\x02\u0773\u0784\x03\x02\x02\x02\u0774\u0772\x03\x02\x02\x02\u0775" +
		"\u0777\t\x1B\x02\x02\u0776\u0778\t\x19\x02\x02\u0777\u0776\x03\x02\x02" +
		"\x02\u0777\u0778\x03\x02\x02\x02\u0778\u077A\x03\x02\x02\x02\u0779\u077B" +
		"\x05\u024E\u0128\x02\u077A\u0779\x03\x02\x02\x02\u077A\u077B\x03\x02\x02" +
		"\x02\u077B\u077C\x03\x02\x02\x02\u077C\u0780\x05\u0272\u013A\x02\u077D" +
		"\u077F\x05V,\x02\u077E\u077D\x03\x02\x02\x02\u077F\u0782\x03\x02\x02\x02" +
		"\u0780\u077E\x03\x02\x02\x02\u0780\u0781\x03\x02\x02\x02\u0781\u0784\x03" +
		"\x02\x02\x02\u0782\u0780\x03\x02\x02\x02\u0783\u0767\x03\x02\x02\x02\u0783" +
		"\u0775\x03\x02\x02\x02\u0784q\x03\x02\x02\x02\u0785\u0787\x07\u019B\x02" +
		"\x02\u0786\u0788\x07\u047B\x02\x02\u0787\u0786\x03\x02\x02\x02\u0787\u0788" +
		"\x03\x02\x02\x02\u0788\u078A\x03\x02\x02\x02\u0789\u078B\x05\u0240\u0121" +
		"\x02\u078A\u0789\x03\x02\x02\x02\u078A\u078B\x03\x02\x02\x02\u078B\u0845" +
		"\x03\x02\x02\x02\u078C\u078E\x07\u0374\x02\x02\u078D\u078F\x07\u047B\x02" +
		"\x02\u078E\u078D\x03\x02\x02\x02\u078E\u078F\x03\x02\x02\x02\u078F\u0790" +
		"\x03\x02\x02\x02\u0790\u0845\x07\u0493\x02\x02\u0791\u0793\x07\u0157\x02" +
		"\x02\u0792\u0794\x07\u047B\x02\x02\u0793\u0792\x03\x02\x02\x02\u0793\u0794" +
		"\x03\x02\x02\x02\u0794\u0795\x03\x02\x02\x02\u0795\u0845\x05\u0254\u012B" +
		"\x02\u0796\u0798\x07\u0158\x02\x02\u0797\u0799\x07\u047B\x02\x02\u0798" +
		"\u0797\x03\x02\x02\x02\u0798\u0799\x03\x02\x02\x02\u0799\u079A\x03\x02" +
		"\x02\x02\u079A\u0845\x05\u0254\u012B\x02\u079B\u079D\x07\u0159\x02\x02" +
		"\u079C\u079E\x07\u047B\x02\x02\u079D\u079C\x03\x02\x02\x02\u079D\u079E" +
		"\x03\x02\x02\x02\u079E\u079F\x03\x02\x02\x02\u079F\u0845\x05\u0254\u012B" +
		"\x02\u07A0\u07A2\x07-\x02\x02\u07A1\u07A0\x03\x02\x02\x02\u07A1\u07A2" +
		"\x03\x02\x02\x02\u07A2\u07A3\x03\x02\x02\x02\u07A3\u07A5\x05D#\x02\u07A4" +
		"\u07A6\x07\u047B\x02\x02\u07A5\u07A4\x03\x02\x02\x02\u07A5\u07A6\x03\x02" +
		"\x02\x02\u07A6\u07A9\x03\x02\x02\x02\u07A7\u07AA\x05\u023C\u011F\x02\u07A8" +
		"\u07AA\x07-\x02\x02\u07A9\u07A7\x03\x02\x02\x02\u07A9\u07A8\x03\x02\x02" +
		"\x02\u07AA\u0845\x03\x02\x02\x02\u07AB\u07AD\t\x1C\x02\x02\u07AC\u07AE" +
		"\x07\u047B\x02\x02\u07AD\u07AC\x03\x02\x02\x02\u07AD\u07AE\x03\x02\x02" +
		"\x02\u07AE\u07AF\x03\x02\x02\x02\u07AF\u0845\t\x1D\x02\x02\u07B0\u07B2" +
		"\x07-\x02\x02\u07B1\u07B0\x03\x02\x02\x02\u07B1\u07B2\x03\x02\x02\x02" +
		"\u07B2\u07B3\x03\x02\x02\x02\u07B3\u07B5\x07\x1E\x02\x02\u07B4\u07B6\x07" +
		"\u047B\x02\x02\u07B5\u07B4\x03\x02\x02\x02\u07B5\u07B6\x03\x02\x02\x02" +
		"\u07B6\u07B7\x03\x02\x02\x02\u07B7\u0845\x05\u023E\u0120\x02\u07B8\u07BA" +
		"\x07\u0172\x02\x02\u07B9\u07BB\x07\u047B\x02\x02\u07BA\u07B9\x03\x02\x02" +
		"\x02\u07BA\u07BB\x03\x02\x02\x02\u07BB\u07BC\x03\x02\x02\x02\u07BC\u0845" +
		"\x07\u0493\x02\x02\u07BD\u07BF\x07\u0177\x02\x02\u07BE\u07C0\x07\u047B" +
		"\x02\x02\u07BF\u07BE\x03\x02\x02\x02\u07BF\u07C0\x03\x02\x02\x02\u07C0" +
		"\u07C1\x03\x02\x02\x02\u07C1\u0845\t\x1E\x02\x02\u07C2\u07C4\x07\u017A" +
		"\x02\x02\u07C3\u07C5\x07\u047B\x02\x02\u07C4\u07C3\x03\x02\x02\x02\u07C4" +
		"\u07C5\x03\x02\x02\x02\u07C5\u07C6\x03\x02\x02\x02\u07C6\u0845\x07\u0493" +
		"\x02\x02\u07C7\u07C8\t\x1F\x02\x02\u07C8\u07CA\x07\u018D\x02\x02\u07C9" +
		"\u07CB\x07\u047B\x02\x02\u07CA\u07C9\x03\x02\x02\x02\u07CA\u07CB\x03\x02" +
		"\x02\x02\u07CB\u07CC\x03\x02\x02\x02\u07CC\u0845\x07\u0493\x02\x02\u07CD" +
		"\u07CF\x07\u018B\x02\x02\u07CE\u07D0\x07\u047B\x02\x02\u07CF\u07CE\x03" +
		"\x02\x02\x02\u07CF\u07D0\x03\x02\x02\x02\u07D0\u07D1\x03\x02\x02\x02\u07D1" +
		"\u0845\t\x1D\x02\x02\u07D2\u07D4\x07\u0197\x02\x02\u07D3\u07D5\x07\u047B" +
		"\x02\x02\u07D4\u07D3\x03\x02\x02\x02\u07D4\u07D5\x03\x02\x02\x02\u07D5" +
		"\u07D6\x03\x02\x02\x02\u07D6\u0845\x07\u0493\x02\x02\u07D7\u07D9\x05\u0244" +
		"\u0123\x02\u07D8\u07DA\x07\u047B\x02\x02\u07D9\u07D8\x03\x02\x02\x02\u07D9" +
		"\u07DA\x03\x02\x02\x02\u07DA\u07DB\x03\x02\x02\x02\u07DB\u07DC\t\x14\x02" +
		"\x02\u07DC\u0845\x03\x02\x02\x02\u07DD\u07DF\t \x02\x02\u07DE\u07E0\x07" +
		"\u047B\x02\x02\u07DF\u07DE\x03\x02\x02\x02\u07DF\u07E0\x03\x02\x02\x02" +
		"\u07E0\u07E1\x03\x02\x02\x02\u07E1\u0845\t\x1D\x02\x02\u07E2\u07E4\t!" +
		"\x02\x02\u07E3\u07E5\x07\u047B\x02\x02\u07E4\u07E3\x03\x02\x02\x02\u07E4" +
		"\u07E5\x03\x02\x02\x02\u07E5\u07E6\x03\x02\x02\x02\u07E6\u0845\x05\u0254" +
		"\u012B\x02\u07E7\u07E9\x07\u0198\x02\x02\u07E8\u07EA\x07\u047B\x02\x02" +
		"\u07E9\u07E8\x03\x02\x02\x02\u07E9\u07EA\x03\x02\x02\x02\u07EA\u07EB\x03" +
		"\x02\x02\x02\u07EB\u0845\x05\u0254\u012B\x02\u07EC\u07ED\x07S\x02\x02" +
		"\u07ED\u07EF\x07\u018D\x02\x02\u07EE\u07F0\x07\u047B\x02\x02\u07EF\u07EE" +
		"\x03\x02\x02\x02\u07EF\u07F0\x03\x02\x02\x02\u07F0\u07F1\x03\x02\x02\x02" +
		"\u07F1\u0845\x07\u0493\x02\x02\u07F2\u07F4\x07\u01C9\x02\x02\u07F3\u07F5" +
		"\x07\u047B\x02\x02\u07F4\u07F3\x03\x02\x02\x02\u07F4\u07F5\x03\x02\x02" +
		"\x02\u07F5\u07F6\x03\x02\x02\x02\u07F6\u0845\t\"\x02\x02\u07F7\u07F9\x07" +
		"\u01D5\x02\x02\u07F8\u07FA\x07\u047B\x02\x02\u07F9\u07F8\x03\x02\x02\x02" +
		"\u07F9\u07FA\x03\x02\x02\x02\u07FA\u07FB\x03\x02\x02\x02\u07FB\u0845\x05" +
		"\u0256\u012C\x02\u07FC\u07FE\x07\u01F7\x02\x02\u07FD\u07FF\x07\u047B\x02" +
		"\x02\u07FE\u07FD\x03\x02\x02\x02\u07FE\u07FF\x03\x02\x02\x02\u07FF\u0800" +
		"\x03\x02\x02\x02\u0800\u0845\x05\u0254\u012B\x02\u0801\u0803\x07\u0201" +
		"\x02\x02\u0802\u0804\x07\u047B\x02\x02\u0803\u0802\x03\x02\x02\x02\u0803" +
		"\u0804\x03\x02\x02\x02\u0804\u0805\x03\x02\x02\x02\u0805\u0845\x05\u0254" +
		"\u012B\x02\u0806\u0808\x07\u0222\x02\x02\u0807\u0809\x07\u047B\x02\x02" +
		"\u0808\u0807\x03\x02\x02\x02\u0808\u0809\x03\x02\x02\x02\u0809\u080A\x03" +
		"\x02\x02\x02\u080A\u0845\t\x11\x02\x02\u080B\u080D\x07\u022A\x02\x02\u080C" +
		"\u080E\x07\u047B\x02\x02\u080D\u080C\x03\x02\x02\x02\u080D\u080E\x03\x02" +
		"\x02\x02\u080E\u080F\x03\x02\x02\x02\u080F\u0845\x07\u0493\x02\x02\u0810" +
		"\u0812\x07\u025E\x02\x02\u0811\u0813\x07\u047B\x02\x02\u0812\u0811\x03" +
		"\x02\x02\x02\u0812\u0813\x03\x02\x02\x02\u0813\u0814\x03\x02\x02\x02\u0814" +
		"\u0845\t#\x02\x02\u0815\u0816\x07\u027A\x02\x02\u0816\u0845\x07\u0292" +
		"\x02\x02\u0817\u0819\x07\u03F0\x02\x02\u0818\u081A\x07\u047B\x02\x02\u0819" +
		"\u0818\x03\x02\x02\x02\u0819\u081A\x03\x02\x02\x02\u081A\u081B\x03\x02" +
		"\x02\x02\u081B\u0845\x07\u0493\x02\x02\u081C\u081E\x07\u027C\x02\x02\u081D" +
		"\u081F\x07\u047B\x02\x02\u081E\u081D\x03\x02\x02\x02\u081E\u081F\x03\x02" +
		"\x02\x02\u081F\u0820\x03\x02\x02\x02\u0820\u0845\t\x11\x02\x02\u0821\u0823" +
		"\x07\u027D\x02\x02\u0822\u0824\x07\u047B\x02\x02\u0823\u0822\x03\x02\x02" +
		"\x02\u0823\u0824\x03\x02\x02\x02\u0824\u0825\x03\x02\x02\x02\u0825\u0845" +
		"\t\x11\x02\x02\u0826\u0828\x07\u027E\x02\x02\u0827\u0829\x07\u047B\x02" +
		"\x02\u0828\u0827\x03\x02\x02\x02\u0828\u0829\x03\x02\x02\x02\u0829\u082C" +
		"\x03\x02\x02\x02\u082A\u082D\x07-\x02\x02\u082B\u082D\x05\u0254\u012B" +
		"\x02\u082C\u082A\x03\x02\x02\x02\u082C\u082B\x03\x02\x02\x02\u082D\u0845" +
		"\x03\x02\x02\x02\u082E\u082F\x07\u028C\x02\x02\u082F\u0831\x05\u024E\u0128" +
		"\x02\u0830\u0832\x05v<\x02\u0831\u0830\x03\x02\x02\x02\u0831\u0832\x03" +
		"\x02\x02\x02\u0832\u0845\x03\x02\x02\x02\u0833\u0834\x07\u028D\x02\x02" +
		"\u0834\u0835\x07\u047B\x02\x02\u0835\u0845\x05t;\x02\u0836\u0845\x05v" +
		"<\x02\u0837\u0839\x07\u0293\x02\x02\u0838\u083A\x07\u047B\x02\x02\u0839" +
		"\u0838\x03\x02\x02\x02\u0839\u083A\x03\x02\x02\x02\u083A\u083B\x03\x02" +
		"\x02\x02\u083B\u0845\t\x1D\x02\x02\u083C\u083E\x07\xB6\x02\x02\u083D\u083F" +
		"\x07\u047B\x02\x02\u083E\u083D\x03\x02\x02\x02\u083E\u083F\x03\x02\x02" +
		"\x02\u083F\u0840\x03\x02\x02\x02\u0840\u0841\x07\u0484\x02\x02\u0841\u0842" +
		"\x05\u0270\u0139\x02\u0842\u0843\x07\u0485\x02\x02\u0843\u0845\x03\x02" +
		"\x02\x02\u0844\u0785\x03\x02\x02\x02\u0844\u078C\x03\x02\x02\x02\u0844" +
		"\u0791\x03\x02\x02\x02\u0844\u0796\x03\x02\x02\x02\u0844\u079B\x03\x02" +
		"\x02\x02\u0844\u07A1\x03\x02\x02\x02\u0844\u07AB\x03\x02\x02\x02\u0844" +
		"\u07B1\x03\x02\x02\x02\u0844\u07B8\x03\x02\x02\x02\u0844\u07BD\x03\x02" +
		"\x02\x02\u0844\u07C2\x03\x02\x02\x02\u0844\u07C7\x03\x02\x02\x02\u0844" +
		"\u07CD\x03\x02\x02\x02\u0844\u07D2\x03\x02\x02\x02\u0844\u07D7\x03\x02" +
		"\x02\x02\u0844\u07DD\x03\x02\x02\x02\u0844\u07E2\x03\x02\x02\x02\u0844" +
		"\u07E7\x03\x02\x02\x02\u0844\u07EC\x03\x02\x02\x02\u0844\u07F2\x03\x02" +
		"\x02\x02\u0844\u07F7\x03\x02\x02\x02\u0844\u07FC\x03\x02\x02\x02\u0844" +
		"\u0801\x03\x02\x02\x02\u0844\u0806\x03\x02\x02\x02\u0844\u080B\x03\x02" +
		"\x02\x02\u0844\u0810\x03\x02\x02\x02\u0844\u0815\x03\x02\x02\x02\u0844" +
		"\u0817\x03\x02\x02\x02\u0844\u081C\x03\x02\x02\x02\u0844\u0821\x03\x02" +
		"\x02\x02\u0844\u0826\x03\x02\x02\x02\u0844\u082E\x03\x02\x02\x02\u0844" +
		"\u0833\x03\x02\x02\x02\u0844\u0836\x03\x02\x02\x02\u0844\u0837\x03\x02" +
		"\x02\x02\u0844\u083C\x03\x02\x02\x02\u0845s\x03\x02\x02\x02\u0846\u0847" +
		"\t$\x02\x02\u0847u\x03\x02\x02\x02\u0848\u0849\x07\u0281\x02\x02\u0849" +
		"\u084A\t\x17\x02\x02\u084Aw\x03\x02\x02\x02\u084B\u084C\x07\x83\x02\x02" +
		"\u084C\u084D\x07\x16\x02\x02\u084D\u0850\x05z>\x02\u084E\u084F\x07\u0229" +
		"\x02\x02\u084F\u0851\x05\u0254\u012B\x02\u0850\u084E\x03\x02\x02\x02\u0850" +
		"\u0851\x03\x02\x02\x02\u0851\u0859\x03\x02\x02\x02\u0852\u0853\x07\u0286" +
		"\x02\x02\u0853\u0854\x07\x16\x02\x02\u0854\u0857\x05|?\x02\u0855\u0856" +
		"\x07\u0287\x02\x02\u0856\u0858\x05\u0254\u012B\x02\u0857\u0855\x03\x02" +
		"\x02\x02\u0857\u0858\x03\x02\x02\x02\u0858\u085A\x03\x02\x02\x02\u0859" +
		"\u0852\x03\x02\x02\x02\u0859\u085A\x03\x02\x02\x02\u085A\u0866\x03\x02" +
		"\x02\x02\u085B\u085C\x07\u0484\x02\x02\u085C\u0861\x05~@\x02\u085D\u085E" +
		"\x07\u0486\x02\x02\u085E\u0860\x05~@\x02\u085F\u085D\x03\x02\x02\x02\u0860" +
		"\u0863\x03\x02\x02\x02\u0861\u085F\x03\x02\x02\x02\u0861\u0862\x03\x02" +
		"\x02\x02\u0862\u0864\x03\x02\x02\x02\u0863\u0861\x03\x02\x02\x02\u0864" +
		"\u0865\x07\u0485\x02\x02\u0865\u0867\x03\x02\x02\x02\u0866\u085B\x03\x02" +
		"\x02\x02\u0866\u0867\x03\x02\x02\x02\u0867y\x03\x02\x02\x02\u0868\u086A" +
		"\x07f\x02\x02\u0869\u0868\x03\x02\x02\x02\u0869\u086A\x03\x02\x02\x02" +
		"\u086A\u086B\x03\x02\x02\x02\u086B\u086C\x07\u01BD\x02\x02\u086C\u086D" +
		"\x07\u0484\x02\x02\u086D\u086E\x05\u02B6\u015C\x02\u086E\u086F\x07\u0485" +
		"\x02\x02\u086F\u0896\x03\x02\x02\x02\u0870\u0872\x07f\x02\x02\u0871\u0870" +
		"\x03\x02\x02\x02\u0871\u0872\x03\x02\x02\x02\u0872\u0873\x03\x02\x02\x02" +
		"\u0873\u0877\x07]\x02\x02\u0874\u0875\x07\u0152\x02\x02\u0875\u0876\x07" +
		"\u047B\x02\x02\u0876\u0878\t%\x02\x02\u0877\u0874\x03\x02\x02\x02\u0877" +
		"\u0878\x03\x02\x02\x02\u0878\u0879\x03\x02\x02\x02\u0879\u087A\x07\u0484" +
		"\x02\x02\u087A\u087B\x05\u026E\u0138\x02\u087B\u087C\x07\u0485\x02\x02" +
		"\u087C\u0896\x03\x02\x02\x02\u087D\u0887\x07\x88\x02\x02\u087E\u087F\x07" +
		"\u0484\x02\x02\u087F\u0880\x05\u02B6\u015C\x02\u0880\u0881\x07\u0485\x02" +
		"\x02\u0881\u0888\x03\x02\x02\x02\u0882\u0883\x07\u016F\x02\x02\u0883\u0884" +
		"\x07\u0484\x02\x02\u0884\u0885\x05\u026E\u0138\x02\u0885\u0886\x07\u0485" +
		"\x02\x02\u0886\u0888\x03\x02\x02\x02\u0887\u087E\x03\x02\x02\x02\u0887" +
		"\u0882\x03\x02\x02\x02\u0888\u0896\x03\x02\x02\x02\u0889\u0893\x07\u01DB" +
		"\x02\x02\u088A\u088B\x07\u0484\x02\x02\u088B\u088C\x05\u02B6\u015C\x02" +
		"\u088C\u088D\x07\u0485\x02\x02\u088D\u0894\x03\x02\x02\x02\u088E\u088F" +
		"\x07\u016F\x02\x02\u088F\u0890\x07\u0484\x02\x02\u0890\u0891\x05\u026E" +
		"\u0138\x02\u0891\u0892\x07\u0485\x02\x02\u0892\u0894\x03\x02\x02\x02\u0893" +
		"\u088A\x03\x02\x02\x02\u0893\u088E\x03\x02\x02\x02\u0894\u0896\x03\x02" +
		"\x02\x02\u0895\u0869\x03\x02\x02\x02\u0895\u0871\x03\x02\x02\x02\u0895" +
		"\u087D\x03\x02\x02\x02\u0895\u0889\x03\x02\x02\x02\u0896{\x03\x02\x02" +
		"\x02\u0897\u0899\x07f\x02\x02\u0898\u0897\x03\x02\x02\x02\u0898\u0899" +
		"\x03\x02\x02\x02\u0899\u089A\x03\x02\x02\x02\u089A\u089B\x07\u01BD\x02" +
		"\x02\u089B\u089C\x07\u0484\x02\x02\u089C\u089D\x05\u02B6\u015C\x02\u089D" +
		"\u089E\x07\u0485\x02\x02\u089E\u08AD\x03\x02\x02\x02\u089F\u08A1\x07f" +
		"\x02\x02\u08A0\u089F\x03\x02\x02\x02\u08A0\u08A1\x03\x02\x02\x02\u08A1" +
		"\u08A2\x03\x02\x02\x02\u08A2\u08A6\x07]\x02\x02\u08A3\u08A4\x07\u0152" +
		"\x02\x02\u08A4\u08A5\x07\u047B\x02\x02\u08A5\u08A7\t%\x02\x02\u08A6\u08A3" +
		"\x03\x02\x02\x02\u08A6\u08A7\x03\x02\x02\x02\u08A7\u08A8\x03\x02\x02\x02" +
		"\u08A8\u08A9\x07\u0484\x02\x02\u08A9\u08AA\x05\u026E\u0138\x02\u08AA\u08AB" +
		"\x07\u0485\x02\x02\u08AB\u08AD\x03\x02\x02\x02\u08AC\u0898\x03\x02\x02" +
		"\x02\u08AC\u08A0\x03\x02\x02\x02\u08AD}\x03\x02\x02\x02\u08AE\u08AF\x07" +
		"\x83\x02\x02\u08AF\u08B0\x05\u024E\u0128\x02\u08B0\u08B1\x07\xBE\x02\x02" +
		"\u08B1\u08B2\x07\u01D9\x02\x02\u08B2\u08B3\x07\u0290\x02\x02\u08B3\u08B4" +
		"\x07\u0484\x02\x02\u08B4\u08B9\x05\x80A\x02\u08B5\u08B6\x07\u0486\x02" +
		"\x02\u08B6\u08B8\x05\x80A\x02\u08B7\u08B5\x03\x02\x02\x02\u08B8\u08BB" +
		"\x03\x02\x02\x02\u08B9\u08B7\x03\x02\x02\x02\u08B9\u08BA\x03\x02\x02\x02" +
		"\u08BA\u08BC\x03\x02\x02\x02\u08BB\u08B9\x03\x02\x02\x02\u08BC\u08C0\x07" +
		"\u0485\x02\x02\u08BD\u08BF\x05\x86D\x02\u08BE\u08BD\x03\x02\x02\x02\u08BF" +
		"\u08C2\x03\x02\x02\x02\u08C0\u08BE\x03\x02\x02\x02\u08C0\u08C1\x03\x02" +
		"\x02\x02\u08C1\u08CE\x03\x02\x02\x02\u08C2\u08C0\x03\x02\x02\x02\u08C3" +
		"\u08C4\x07\u0484\x02\x02\u08C4\u08C9\x05\x84C\x02\u08C5\u08C6\x07\u0486" +
		"\x02\x02\u08C6\u08C8\x05\x84C\x02\u08C7\u08C5\x03\x02\x02\x02\u08C8\u08CB" +
		"\x03\x02\x02\x02\u08C9\u08C7\x03\x02\x02\x02\u08C9\u08CA\x03\x02\x02\x02" +
		"\u08CA\u08CC\x03\x02\x02\x02\u08CB\u08C9\x03\x02\x02\x02\u08CC\u08CD\x07" +
		"\u0485\x02\x02\u08CD\u08CF\x03\x02\x02\x02\u08CE\u08C3\x03\x02\x02\x02" +
		"\u08CE\u08CF\x03\x02\x02\x02\u08CF\u0941\x03\x02\x02\x02\u08D0\u08D1\x07" +
		"\x83\x02\x02\u08D1\u08D2\x05\u024E\u0128\x02\u08D2\u08D3\x07\xBE\x02\x02" +
		"\u08D3\u08D4\x07\u01D9\x02\x02\u08D4\u08D5\x07\u0290\x02\x02\u08D5\u08D9" +
		"\x05\x80A\x02\u08D6\u08D8\x05\x86D\x02\u08D7\u08D6\x03\x02\x02\x02\u08D8" +
		"\u08DB\x03\x02\x02\x02\u08D9\u08D7\x03\x02\x02\x02\u08D9\u08DA\x03\x02" +
		"\x02\x02\u08DA\u08E7\x03\x02\x02\x02\u08DB\u08D9\x03\x02\x02\x02\u08DC" +
		"\u08DD\x07\u0484\x02\x02\u08DD\u08E2\x05\x84C\x02\u08DE\u08DF\x07\u0486" +
		"\x02\x02\u08DF\u08E1\x05\x84C\x02\u08E0\u08DE\x03\x02\x02\x02\u08E1\u08E4" +
		"\x03\x02\x02\x02\u08E2\u08E0\x03\x02\x02\x02\u08E2\u08E3\x03\x02\x02\x02" +
		"\u08E3\u08E5\x03\x02\x02\x02\u08E4\u08E2\x03\x02\x02\x02\u08E5\u08E6\x07" +
		"\u0485\x02\x02\u08E6\u08E8\x03\x02\x02\x02\u08E7\u08DC\x03\x02\x02\x02" +
		"\u08E7\u08E8\x03\x02\x02\x02\u08E8\u0941\x03\x02\x02\x02\u08E9\u08EA\x07" +
		"\x83\x02\x02\u08EA\u08EB\x05\u024E\u0128\x02\u08EB\u08EC\x07\xBE\x02\x02" +
		"\u08EC\u08ED\x07R\x02\x02\u08ED\u08EE\x07\u0484\x02\x02\u08EE\u08F3\x05" +
		"\x80A\x02\u08EF\u08F0\x07\u0486\x02\x02\u08F0\u08F2\x05\x80A\x02\u08F1" +
		"\u08EF\x03\x02\x02\x02\u08F2\u08F5\x03\x02\x02\x02\u08F3\u08F1\x03\x02" +
		"\x02\x02\u08F3\u08F4\x03\x02\x02\x02\u08F4\u08F6\x03\x02\x02\x02\u08F5" +
		"\u08F3\x03\x02\x02\x02\u08F6\u08FA\x07\u0485\x02\x02\u08F7\u08F9\x05\x86" +
		"D\x02\u08F8\u08F7\x03\x02\x02\x02\u08F9\u08FC\x03\x02\x02\x02\u08FA\u08F8" +
		"\x03\x02\x02\x02\u08FA\u08FB\x03\x02\x02\x02\u08FB\u0908\x03\x02\x02\x02" +
		"\u08FC\u08FA\x03\x02\x02\x02\u08FD\u08FE\x07\u0484\x02\x02\u08FE\u0903" +
		"\x05\x84C\x02\u08FF\u0900\x07\u0486\x02\x02\u0900\u0902\x05\x84C\x02\u0901" +
		"\u08FF\x03\x02\x02\x02\u0902\u0905\x03\x02\x02\x02\u0903\u0901\x03\x02" +
		"\x02\x02\u0903\u0904\x03\x02\x02\x02\u0904\u0906\x03\x02\x02\x02\u0905" +
		"\u0903\x03\x02\x02\x02\u0906\u0907\x07\u0485\x02\x02\u0907\u0909\x03\x02" +
		"\x02\x02\u0908\u08FD\x03\x02\x02\x02\u0908\u0909\x03\x02\x02\x02\u0909" +
		"\u0941\x03\x02\x02\x02\u090A\u090B\x07\x83\x02\x02\u090B\u090C\x05\u024E" +
		"\u0128\x02\u090C\u090D\x07\xBE\x02\x02\u090D\u090E\x07R\x02\x02\u090E" +
		"\u090F\x07\u0484\x02\x02\u090F\u0914\x05\x82B\x02\u0910\u0911\x07\u0486" +
		"\x02\x02\u0911\u0913\x05\x82B\x02\u0912\u0910\x03\x02\x02\x02\u0913\u0916" +
		"\x03\x02\x02\x02\u0914\u0912\x03\x02\x02\x02\u0914\u0915\x03\x02\x02\x02" +
		"\u0915\u0917\x03\x02\x02\x02\u0916\u0914\x03\x02\x02\x02\u0917\u091B\x07" +
		"\u0485\x02\x02\u0918\u091A\x05\x86D\x02\u0919\u0918\x03\x02\x02\x02\u091A" +
		"\u091D\x03\x02\x02\x02\u091B\u0919\x03\x02\x02\x02\u091B\u091C\x03\x02" +
		"\x02\x02\u091C\u0929\x03\x02\x02\x02\u091D\u091B\x03\x02\x02\x02\u091E" +
		"\u091F\x07\u0484\x02\x02\u091F\u0924\x05\x84C\x02\u0920\u0921\x07\u0486" +
		"\x02\x02\u0921\u0923\x05\x84C\x02\u0922\u0920\x03\x02\x02\x02\u0923\u0926" +
		"\x03\x02\x02\x02\u0924\u0922\x03\x02\x02\x02\u0924\u0925\x03\x02\x02\x02" +
		"\u0925\u0927\x03\x02\x02\x02\u0926\u0924\x03\x02\x02\x02\u0927\u0928\x07" +
		"\u0485\x02\x02\u0928\u092A\x03\x02\x02\x02\u0929\u091E\x03\x02\x02\x02" +
		"\u0929\u092A\x03\x02\x02\x02\u092A\u0941\x03\x02\x02\x02\u092B\u092C\x07" +
		"\x83\x02\x02\u092C\u0930\x05\u024E\u0128\x02\u092D\u092F\x05\x86D\x02" +
		"\u092E\u092D\x03\x02\x02\x02\u092F\u0932\x03\x02\x02\x02\u0930\u092E\x03" +
		"\x02\x02\x02\u0930\u0931\x03\x02\x02\x02\u0931\u093E\x03\x02\x02\x02\u0932" +
		"\u0930\x03\x02\x02\x02\u0933\u0934\x07\u0484\x02\x02\u0934\u0939\x05\x84" +
		"C\x02\u0935\u0936\x07\u0486\x02\x02\u0936\u0938\x05\x84C\x02\u0937\u0935" +
		"\x03\x02\x02\x02\u0938\u093B\x03\x02\x02\x02\u0939\u0937\x03\x02\x02\x02" +
		"\u0939\u093A\x03\x02\x02\x02\u093A\u093C\x03\x02\x02\x02\u093B\u0939\x03" +
		"\x02\x02\x02\u093C\u093D\x07\u0485\x02\x02\u093D\u093F\x03\x02\x02\x02" +
		"\u093E\u0933\x03\x02\x02\x02\u093E\u093F\x03\x02\x02\x02\u093F\u0941\x03" +
		"\x02\x02\x02\u0940\u08AE\x03\x02\x02\x02\u0940\u08D0\x03\x02\x02\x02\u0940" +
		"\u08E9\x03\x02\x02\x02\u0940\u090A\x03\x02\x02\x02\u0940\u092B\x03\x02" +
		"\x02\x02\u0941\x7F\x03\x02\x02\x02\u0942\u0946\x05\u0260\u0131\x02\u0943" +
		"\u0946\x05\u02B6\u015C\x02\u0944\u0946\x07p\x02\x02\u0945\u0942\x03\x02" +
		"\x02\x02\u0945\u0943\x03\x02\x02\x02\u0945\u0944\x03\x02\x02\x02\u0946" +
		"\x81\x03\x02\x02\x02\u0947\u0948\x07\u0484\x02\x02\u0948\u094B\x05\x80" +
		"A\x02\u0949\u094A\x07\u0486\x02\x02\u094A\u094C\x05\x80A\x02\u094B\u0949" +
		"\x03\x02\x02\x02\u094C\u094D\x03\x02\x02\x02\u094D\u094B\x03\x02\x02\x02" +
		"\u094D\u094E\x03\x02\x02\x02\u094E\u094F\x03\x02\x02\x02\u094F\u0950\x07" +
		"\u0485\x02\x02\u0950\x83\x03\x02\x02\x02\u0951\u0952\x07\u0286\x02\x02" +
		"\u0952\u0956\x05\u024E\u0128\x02\u0953\u0955\x05\x86D\x02\u0954\u0953" +
		"\x03\x02\x02\x02\u0955\u0958\x03\x02\x02\x02\u0956\u0954\x03\x02\x02\x02" +
		"\u0956\u0957\x03\x02\x02\x02\u0957\x85\x03\x02\x02\x02\u0958\u0956\x03" +
		"\x02\x02\x02\u0959\u095B\x07-\x02\x02\u095A\u0959\x03\x02\x02\x02\u095A" +
		"\u095B\x03\x02\x02\x02\u095B\u095D\x03\x02\x02\x02\u095C\u095E\x07\u0281" +
		"\x02\x02\u095D\u095C\x03\x02\x02\x02\u095D\u095E\x03\x02\x02\x02\u095E" +
		"\u095F\x03\x02\x02\x02\u095F\u0961\x07\u019B\x02\x02\u0960\u0962\x07\u047B" +
		"\x02\x02\u0961\u0960\x03\x02\x02\x02\u0961\u0962\x03\x02\x02\x02\u0962" +
		"\u0963\x03\x02\x02\x02\u0963\u098A\x05\u0240\u0121\x02\u0964\u0966\x07" +
		"\u0172\x02\x02\u0965\u0967\x07\u047B\x02\x02\u0966\u0965\x03\x02\x02\x02" +
		"\u0966\u0967\x03\x02\x02\x02\u0967\u0968\x03\x02\x02\x02\u0968\u098A\x07" +
		"\u0493\x02\x02\u0969\u096A\x07\u0186\x02\x02\u096A\u096C\x07\u018D\x02" +
		"\x02\u096B\u096D\x07\u047B\x02\x02\u096C\u096B\x03\x02\x02\x02\u096C\u096D" +
		"\x03\x02\x02\x02\u096D\u096E\x03\x02\x02\x02\u096E\u098A\x07\u0493\x02" +
		"\x02\u096F\u0970\x07S\x02\x02\u0970\u0972\x07\u018D\x02\x02\u0971\u0973" +
		"\x07\u047B\x02\x02\u0972\u0971\x03\x02\x02\x02\u0972\u0973\x03\x02\x02" +
		"\x02\u0973\u0974\x03\x02\x02\x02\u0974\u098A\x07\u0493\x02\x02\u0975\u0977" +
		"\x07\u01F7\x02\x02\u0976\u0978\x07\u047B\x02\x02\u0977\u0976\x03\x02\x02" +
		"\x02\u0977\u0978\x03\x02\x02\x02\u0978\u0979\x03\x02\x02\x02\u0979\u098A" +
		"\x05\u0254\u012B\x02\u097A\u097C\x07\u0201\x02\x02\u097B\u097D\x07\u047B" +
		"\x02\x02\u097C\u097B\x03\x02\x02\x02\u097C\u097D\x03\x02\x02\x02\u097D" +
		"\u097E\x03\x02\x02\x02\u097E\u098A\x05\u0254\u012B\x02\u097F\u0981\x07" +
		"\u028C\x02\x02\u0980\u0982\x07\u047B\x02\x02\u0981\u0980\x03\x02\x02\x02" +
		"\u0981\u0982\x03\x02\x02\x02\u0982\u0983\x03\x02\x02\x02\u0983\u098A\x05" +
		"\u024E\u0128\x02\u0984\u0986\x07\u0213\x02\x02\u0985\u0987\x07\u047B\x02" +
		"\x02\u0986\u0985\x03\x02\x02\x02\u0986\u0987\x03\x02\x02\x02\u0987\u0988" +
		"\x03\x02\x02\x02\u0988\u098A\x05\u024E\u0128\x02\u0989\u095A\x03\x02\x02" +
		"\x02\u0989\u0964\x03\x02\x02\x02\u0989\u0969\x03\x02\x02\x02\u0989\u096F" +
		"\x03\x02\x02\x02\u0989\u0975\x03\x02\x02\x02\u0989\u097A\x03\x02\x02\x02" +
		"\u0989\u097F\x03\x02\x02\x02\u0989\u0984\x03\x02\x02\x02\u098A\x87\x03" +
		"\x02\x02\x02\u098B\u098C\x07\t\x02\x02\u098C\u098E\t\x02\x02\x02\u098D" +
		"\u098F\x05\u024E\u0128\x02\u098E\u098D\x03\x02\x02\x02\u098E\u098F\x03" +
		"\x02\x02\x02\u098F\u0991\x03\x02\x02\x02\u0990\u0992\x05B\"\x02\u0991" +
		"\u0990\x03\x02\x02\x02\u0992\u0993\x03\x02\x02\x02\u0993\u0991\x03\x02" +
		"\x02\x02\u0993\u0994\x03\x02\x02\x02\u0994\u099E\x03\x02\x02\x02\u0995" +
		"\u0996\x07\t\x02\x02\u0996\u0997\t\x02\x02\x02\u0997\u0998\x05\u024E\u0128" +
		"\x02\u0998\u0999\x07\u029E\x02\x02\u0999\u099A\x07\u0186\x02\x02\u099A" +
		"\u099B\x07\u018D\x02\x02\u099B\u099C\x07\u0207\x02\x02\u099C\u099E\x03" +
		"\x02\x02\x02\u099D\u098B\x03\x02\x02\x02\u099D\u0995\x03\x02\x02\x02\u099E" +
		"\x89\x03\x02\x02\x02\u099F\u09A1\x07\t\x02\x02\u09A0\u09A2\x05H%\x02\u09A1" +
		"\u09A0\x03\x02\x02\x02\u09A1\u09A2\x03\x02\x02\x02\u09A2\u09A3\x03\x02" +
		"\x02\x02\u09A3\u09A4\x07\u01A1\x02\x02\u09A4\u09A8\x05\u022E\u0118\x02" +
		"\u09A5\u09A6\x07x\x02\x02\u09A6\u09A7\x07\u0261\x02\x02\u09A7\u09A9\x05" +
		"J&\x02\u09A8\u09A5\x03\x02\x02\x02\u09A8\u09A9\x03\x02\x02\x02\u09A9\u09B0" +
		"\x03\x02\x02\x02\u09AA\u09AB\x07x\x02\x02\u09AB\u09AD\x07\u0175\x02\x02" +
		"\u09AC\u09AE\x07t\x02\x02\u09AD\u09AC\x03\x02\x02\x02\u09AD\u09AE\x03" +
		"\x02\x02\x02\u09AE\u09AF\x03\x02\x02\x02\u09AF\u09B1\x07\u0234\x02\x02" +
		"\u09B0\u09AA\x03\x02\x02\x02\u09B0\u09B1\x03\x02\x02\x02\u09B1\u09B5\x03" +
		"\x02\x02\x02\u09B2\u09B3\x07\x8E\x02\x02\u09B3\u09B4\x07\xB1\x02\x02\u09B4" +
		"\u09B6\x05\u022E\u0118\x02\u09B5\u09B2\x03\x02\x02\x02\u09B5\u09B6\x03" +
		"\x02\x02\x02\u09B6\u09B8\x03\x02\x02\x02\u09B7\u09B9\x05R*\x02\u09B8\u09B7" +
		"\x03\x02\x02\x02\u09B8\u09B9\x03\x02\x02\x02\u09B9\u09BC\x03\x02\x02\x02" +
		"\u09BA\u09BB\x07\u0172\x02\x02\u09BB\u09BD\x07\u0493\x02\x02\u09BC\u09BA" +
		"\x03\x02\x02\x02\u09BC\u09BD\x03\x02\x02\x02\u09BD\u09C0\x03\x02\x02\x02" +
		"\u09BE\u09BF\x07\u0191\x02\x02\u09BF\u09C1\x05\u018E\xC8\x02\u09C0\u09BE" +
		"\x03\x02\x02\x02\u09C0\u09C1\x03\x02\x02\x02\u09C1\x8B\x03\x02\x02\x02" +
		"\u09C2\u09C3\x07\t\x02\x02\u09C3\u09C4\x07\u01B7\x02\x02\u09C4\u09C8\x05" +
		"\u022E\u0118\x02\u09C5\u09C7\x05\\/\x02\u09C6\u09C5\x03\x02\x02\x02\u09C7" +
		"\u09CA\x03\x02\x02\x02\u09C8\u09C6\x03\x02\x02\x02\u09C8\u09C9\x03\x02" +
		"\x02\x02\u09C9\x8D\x03\x02\x02\x02\u09CA\u09C8\x03\x02\x02\x02\u09CB\u09CC" +
		"\x07\t\x02\x02\u09CC\u09CD\x07\u01CB\x02\x02\u09CD\u09CE\x07\u025B\x02" +
		"\x02\u09CE\u09CF\x07\u0320\x02\x02\u09CF\u09D0\x07\u01E0\x02\x02\u09D0" +
		"\u09D1\x07]\x02\x02\u09D1\x8F\x03\x02\x02\x02\u09D2\u09D3\x07\t\x02\x02" +
		"\u09D3\u09D4\x07\u01DE\x02\x02\u09D4\u09D5\x07K\x02\x02\u09D5\u09D6\x05" +
		"\u024E\u0128\x02\u09D6\u09D7\x07\x07\x02\x02\u09D7\u09D8\x07\u0299\x02" +
		"\x02\u09D8\u09DE\x07\u0493\x02\x02\u09D9\u09DB\x07\u01C7\x02\x02\u09DA" +
		"\u09DC\x07\u047B\x02\x02\u09DB\u09DA\x03\x02\x02\x02\u09DB\u09DC\x03\x02" +
		"\x02\x02\u09DC\u09DD\x03\x02\x02\x02\u09DD\u09DF\x05\u0256\u012C\x02\u09DE" +
		"\u09D9\x03\x02\x02\x02\u09DE\u09DF\x03\x02\x02\x02\u09DF\u09E1\x03\x02" +
		"\x02\x02\u09E0\u09E2\x07\u02A8\x02\x02\u09E1\u09E0\x03\x02\x02\x02\u09E1" +
		"\u09E2\x03\x02\x02\x02\u09E2\u09E3\x03\x02\x02\x02\u09E3\u09E5\x07\u019B" +
		"\x02\x02\u09E4\u09E6\x07\u047B\x02\x02\u09E5\u09E4\x03\x02\x02\x02\u09E5" +
		"\u09E6\x03\x02\x02\x02\u09E6\u09E7\x03\x02\x02\x02\u09E7\u09E8\x05\u0240" +
		"\u0121\x02\u09E8\x91\x03\x02\x02\x02\u09E9\u09EA\x07\t\x02\x02\u09EA\u09EB" +
		"\x07\x86\x02\x02\u09EB\u09EF\x05\u022E\u0118\x02\u09EC\u09EE\x05\\/\x02" +
		"\u09ED\u09EC\x03\x02\x02\x02\u09EE\u09F1\x03\x02\x02\x02\u09EF\u09ED\x03" +
		"\x02\x02\x02\u09EF\u09F0\x03\x02\x02\x02\u09F0\x93\x03\x02\x02\x02\u09F1" +
		"\u09EF\x03\x02\x02\x02\u09F2\u09F3\x07\t\x02\x02\u09F3\u09F4\x07\u0264" +
		"\x02\x02\u09F4\u09F5\x05\u024E\u0128\x02\u09F5\u09F6\x07\u0220\x02\x02" +
		"\u09F6\u09F7\x07\u0484\x02\x02\u09F7\u09FC\x05^0\x02\u09F8\u09F9\x07\u0486" +
		"\x02\x02\u09F9\u09FB\x05^0\x02\u09FA\u09F8\x03\x02\x02\x02\u09FB\u09FE" +
		"\x03\x02\x02\x02\u09FC\u09FA\x03\x02\x02\x02\u09FC\u09FD\x03\x02\x02\x02" +
		"\u09FD\u09FF\x03\x02\x02\x02\u09FE\u09FC\x03\x02\x02\x02\u09FF\u0A00\x07" +
		"\u0485\x02\x02\u0A00\x95\x03\x02\x02\x02\u0A01\u0A03\x07\t\x02\x02\u0A02" +
		"\u0A04\t\x03\x02\x02\u0A03\u0A02\x03\x02\x02\x02\u0A03\u0A04\x03\x02\x02" +
		"\x02\u0A04\u0A06\x03\x02\x02\x02\u0A05\u0A07\x07P\x02\x02\u0A06\u0A05" +
		"\x03\x02\x02\x02\u0A06\u0A07\x03\x02\x02\x02\u0A07\u0A08\x03\x02\x02\x02" +
		"\u0A08\u0A09\x07\xAE\x02\x02\u0A09\u0A0B\x05\u0230\u0119\x02\u0A0A\u0A0C" +
		"\x05\u028A\u0146\x02\u0A0B\u0A0A\x03\x02\x02\x02\u0A0B\u0A0C\x03\x02\x02" +
		"\x02\u0A0C\u0A15\x03\x02\x02\x02\u0A0D\u0A12\x05\x9EP\x02\u0A0E\u0A0F" +
		"\x07\u0486\x02\x02\u0A0F\u0A11\x05\x9EP\x02\u0A10\u0A0E\x03\x02\x02\x02" +
		"\u0A11\u0A14\x03\x02\x02\x02\u0A12\u0A10\x03\x02\x02\x02\u0A12\u0A13";
	private static readonly _serializedATNSegment7: string =
		"\x03\x02\x02\x02\u0A13\u0A16\x03\x02\x02\x02\u0A14\u0A12\x03\x02\x02\x02" +
		"\u0A15\u0A0D\x03\x02\x02\x02\u0A15\u0A16\x03\x02\x02\x02\u0A16\u0A18\x03" +
		"\x02\x02\x02\u0A17\u0A19\x05x=\x02\u0A18\u0A17\x03\x02\x02\x02\u0A18\u0A19" +
		"\x03\x02\x02\x02\u0A19\x97\x03\x02\x02\x02\u0A1A\u0A1B\x07\t\x02\x02\u0A1B" +
		"\u0A1C\x07\u028C\x02\x02\u0A1C\u0A1D\x05\u024E\u0128\x02\u0A1D\u0A1E\t" +
		"&\x02\x02\u0A1E\u0A1F\x07\u0187\x02\x02\u0A1F\u0A23\x07\u0493\x02\x02" +
		"\u0A20\u0A21\x07\u01C7\x02\x02\u0A21\u0A22\x07\u047B\x02\x02\u0A22\u0A24" +
		"\x05\u0256\u012C\x02\u0A23\u0A20\x03\x02\x02\x02\u0A23\u0A24\x03\x02\x02" +
		"\x02\u0A24\u0A26\x03\x02\x02\x02\u0A25\u0A27\x07\u02A8\x02\x02\u0A26\u0A25" +
		"\x03\x02\x02\x02\u0A26\u0A27\x03\x02\x02\x02\u0A27\u0A28\x03\x02\x02\x02" +
		"\u0A28\u0A2A\x07\u019B\x02\x02\u0A29\u0A2B\x07\u047B\x02\x02\u0A2A\u0A29" +
		"\x03\x02\x02\x02\u0A2A\u0A2B\x03\x02\x02\x02\u0A2B\u0A2C\x03\x02\x02\x02" +
		"\u0A2C\u0A2D\x05\u0240\u0121\x02\u0A2D\x99\x03\x02\x02\x02\u0A2E\u0A32" +
		"\x07\t\x02\x02\u0A2F\u0A30\x07\u0152\x02\x02\u0A30\u0A31\x07\u047B\x02" +
		"\x02\u0A31\u0A33\t\f\x02\x02\u0A32\u0A2F\x03\x02\x02\x02\u0A32\u0A33\x03" +
		"\x02\x02\x02\u0A33\u0A35\x03\x02\x02\x02\u0A34\u0A36\x05H%\x02\u0A35\u0A34" +
		"\x03\x02\x02\x02\u0A35\u0A36\x03\x02\x02\x02\u0A36\u0A3A\x03\x02\x02\x02" +
		"\u0A37\u0A38\x07\xA2\x02\x02\u0A38\u0A39\x07\u0262\x02\x02\u0A39\u0A3B" +
		"\t\r\x02\x02\u0A3A\u0A37\x03\x02\x02\x02\u0A3A\u0A3B\x03\x02\x02\x02\u0A3B" +
		"\u0A3C\x03\x02\x02\x02\u0A3C\u0A3D\x07\u02A5\x02\x02\u0A3D\u0A42\x05\u022E" +
		"\u0118\x02\u0A3E\u0A3F\x07\u0484\x02\x02\u0A3F\u0A40\x05\u026E\u0138\x02" +
		"\u0A40\u0A41\x07\u0485\x02\x02\u0A41\u0A43\x03\x02\x02\x02\u0A42\u0A3E" +
		"\x03\x02\x02\x02\u0A42\u0A43\x03\x02\x02\x02\u0A43\u0A44\x03\x02\x02\x02" +
		"\u0A44\u0A45\x07\x0E\x02\x02\u0A45\u0A4C\x05\xD4k\x02\u0A46\u0A48\x07" +
		"\xC2\x02\x02\u0A47\u0A49\t\x0E\x02\x02\u0A48\u0A47\x03\x02\x02\x02\u0A48" +
		"\u0A49\x03\x02\x02\x02\u0A49\u0A4A\x03\x02\x02\x02\u0A4A\u0A4B\x07\x1D" +
		"\x02\x02\u0A4B\u0A4D\x07z\x02\x02\u0A4C\u0A46\x03\x02\x02\x02\u0A4C\u0A4D" +
		"\x03\x02\x02\x02\u0A4D\x9B\x03\x02\x02\x02\u0A4E\u0A4F\x07\t\x02\x02\u0A4F" +
		"\u0A51\x07\u0263\x02\x02\u0A50\u0A52\x05\u0284\u0143\x02\u0A51\u0A50\x03" +
		"\x02\x02\x02\u0A51\u0A52\x03\x02\x02\x02\u0A52\u0A53\x03\x02\x02\x02\u0A53" +
		"\u0A55\x05\u022E\u0118\x02\u0A54\u0A56\x05@!\x02\u0A55\u0A54\x03\x02\x02" +
		"\x02\u0A56\u0A57\x03\x02\x02\x02\u0A57\u0A55\x03\x02\x02\x02\u0A57\u0A58" +
		"\x03\x02\x02\x02\u0A58\x9D\x03\x02\x02\x02\u0A59\u0A60\x05r:\x02\u0A5A" +
		"\u0A5C\x07\u0486\x02\x02\u0A5B\u0A5A\x03\x02\x02\x02\u0A5B\u0A5C\x03\x02" +
		"\x02\x02\u0A5C\u0A5D\x03\x02\x02\x02\u0A5D\u0A5F\x05r:\x02\u0A5E\u0A5B" +
		"\x03\x02\x02\x02\u0A5F\u0A62\x03\x02\x02\x02\u0A60\u0A5E\x03\x02\x02\x02" +
		"\u0A60\u0A61\x03\x02\x02\x02\u0A61\u0B9A\x03\x02\x02\x02\u0A62\u0A60\x03" +
		"\x02\x02\x02\u0A63\u0A65\x07\x07\x02\x02\u0A64\u0A66\x07\x1F\x02\x02\u0A65" +
		"\u0A64\x03\x02\x02\x02\u0A65\u0A66\x03\x02\x02\x02\u0A66\u0A68\x03\x02" +
		"\x02\x02\u0A67\u0A69\x05\u0286\u0144\x02\u0A68\u0A67\x03\x02\x02\x02\u0A68" +
		"\u0A69\x03\x02\x02\x02\u0A69\u0A6A\x03\x02\x02\x02\u0A6A\u0A6B\x05\u024E" +
		"\u0128\x02\u0A6B\u0A6F\x05d3\x02\u0A6C\u0A70\x07\u01B0\x02\x02\u0A6D\u0A6E" +
		"\x07\u0150\x02\x02\u0A6E\u0A70\x05\u024E\u0128\x02\u0A6F\u0A6C\x03\x02" +
		"\x02\x02\u0A6F\u0A6D\x03\x02\x02\x02\u0A6F\u0A70\x03\x02\x02\x02\u0A70" +
		"\u0B9A\x03\x02\x02\x02\u0A71\u0A73\x07\x07\x02\x02\u0A72\u0A74\x07\x1F" +
		"\x02\x02\u0A73\u0A72\x03\x02\x02\x02\u0A73\u0A74\x03\x02\x02\x02\u0A74" +
		"\u0A76\x03\x02\x02\x02\u0A75\u0A77\x05\u0286\u0144\x02\u0A76\u0A75\x03" +
		"\x02\x02\x02\u0A76\u0A77\x03\x02\x02\x02\u0A77\u0A78\x03\x02\x02\x02\u0A78" +
		"\u0A79\x07\u0484\x02\x02\u0A79\u0A7A\x05\u024E\u0128\x02\u0A7A\u0A81\x05" +
		"d3\x02\u0A7B\u0A7C\x07\u0486\x02\x02\u0A7C\u0A7D\x05\u024E\u0128\x02\u0A7D" +
		"\u0A7E\x05d3\x02\u0A7E\u0A80\x03\x02\x02\x02\u0A7F\u0A7B\x03\x02\x02\x02" +
		"\u0A80\u0A83\x03\x02\x02\x02\u0A81\u0A7F\x03\x02\x02\x02\u0A81\u0A82\x03" +
		"\x02\x02\x02\u0A82\u0A84\x03\x02\x02\x02\u0A83\u0A81\x03\x02\x02\x02\u0A84" +
		"\u0A85\x07\u0485\x02\x02\u0A85\u0B9A\x03\x02\x02\x02\u0A86\u0A87\x07\x07" +
		"\x02\x02\u0A87\u0A89\t\x19\x02\x02\u0A88\u0A8A\x05\u0286\u0144\x02\u0A89" +
		"\u0A88\x03\x02\x02\x02\u0A89\u0A8A\x03\x02\x02\x02\u0A8A\u0A8C\x03\x02" +
		"\x02\x02\u0A8B\u0A8D\x05\u024E\u0128\x02\u0A8C\u0A8B\x03\x02\x02\x02\u0A8C" +
		"\u0A8D\x03\x02\x02\x02\u0A8D\u0A8F\x03\x02\x02\x02\u0A8E\u0A90\x05T+\x02" +
		"\u0A8F\u0A8E\x03\x02\x02\x02\u0A8F\u0A90\x03\x02\x02\x02\u0A90\u0A91\x03" +
		"\x02\x02\x02\u0A91\u0A95\x05\u0272\u013A\x02\u0A92\u0A94\x05V,\x02\u0A93" +
		"\u0A92\x03\x02\x02\x02\u0A94\u0A97\x03\x02\x02\x02\u0A95\u0A93\x03\x02" +
		"\x02\x02\u0A95\u0A96\x03\x02\x02\x02\u0A96\u0B9A\x03\x02\x02\x02\u0A97" +
		"\u0A95\x03\x02\x02\x02\u0A98\u0A9D\x07\x07\x02\x02\u0A99\u0A9B\x07!\x02" +
		"\x02\u0A9A\u0A9C\x05\u024E\u0128\x02\u0A9B\u0A9A\x03\x02\x02\x02\u0A9B" +
		"\u0A9C\x03\x02\x02\x02\u0A9C\u0A9E\x03\x02\x02\x02\u0A9D\u0A99\x03\x02" +
		"\x02\x02\u0A9D\u0A9E\x03\x02\x02\x02\u0A9E\u0A9F\x03\x02\x02\x02\u0A9F" +
		"\u0AA0\x07\x84\x02\x02\u0AA0\u0AA2\x07]\x02\x02\u0AA1\u0AA3\x05\u024E" +
		"\u0128\x02\u0AA2\u0AA1\x03\x02\x02\x02\u0AA2\u0AA3\x03\x02\x02\x02\u0AA3" +
		"\u0AA5\x03\x02\x02\x02\u0AA4\u0AA6\x05T+\x02\u0AA5\u0AA4\x03\x02\x02\x02" +
		"\u0AA5\u0AA6\x03\x02\x02\x02\u0AA6\u0AA7\x03\x02\x02\x02\u0AA7\u0AAB\x05" +
		"\u0272\u013A\x02\u0AA8\u0AAA\x05V,\x02\u0AA9\u0AA8\x03\x02\x02\x02\u0AAA" +
		"\u0AAD\x03\x02\x02\x02\u0AAB\u0AA9\x03\x02\x02\x02\u0AAB\u0AAC\x03\x02" +
		"\x02\x02\u0AAC\u0B9A\x03\x02\x02\x02\u0AAD\u0AAB\x03\x02\x02\x02\u0AAE" +
		"\u0AB3\x07\x07\x02\x02\u0AAF\u0AB1\x07!\x02\x02\u0AB0\u0AB2\x05\u024E" +
		"\u0128\x02\u0AB1\u0AB0\x03\x02\x02\x02\u0AB1\u0AB2\x03\x02\x02\x02\u0AB2" +
		"\u0AB4\x03\x02\x02\x02\u0AB3\u0AAF\x03\x02\x02\x02\u0AB3\u0AB4\x03\x02" +
		"\x02\x02\u0AB4\u0AB5\x03\x02\x02\x02\u0AB5\u0AB7\x07\xB7\x02\x02\u0AB6" +
		"\u0AB8\x05\u0286\u0144\x02\u0AB7\u0AB6\x03\x02\x02\x02\u0AB7\u0AB8\x03" +
		"\x02\x02\x02\u0AB8\u0ABA\x03\x02\x02\x02\u0AB9\u0ABB\t\x19\x02\x02\u0ABA" +
		"\u0AB9\x03\x02\x02\x02\u0ABA\u0ABB\x03\x02\x02\x02\u0ABB\u0ABD\x03\x02" +
		"\x02\x02\u0ABC\u0ABE\x05\u024E\u0128\x02\u0ABD\u0ABC\x03\x02\x02\x02\u0ABD" +
		"\u0ABE\x03\x02\x02\x02\u0ABE\u0AC0\x03\x02\x02\x02\u0ABF\u0AC1\x05T+\x02" +
		"\u0AC0\u0ABF\x03\x02\x02\x02\u0AC0\u0AC1\x03\x02\x02\x02\u0AC1\u0AC2\x03" +
		"\x02\x02\x02\u0AC2\u0AC6\x05\u0272\u013A\x02\u0AC3\u0AC5\x05V,\x02\u0AC4" +
		"\u0AC3\x03\x02\x02\x02\u0AC5\u0AC8\x03\x02\x02\x02\u0AC6\u0AC4\x03\x02" +
		"\x02\x02\u0AC6\u0AC7\x03\x02\x02\x02\u0AC7\u0B9A\x03\x02\x02\x02\u0AC8" +
		"\u0AC6\x03\x02\x02\x02\u0AC9\u0ACA\x07\x07\x02\x02\u0ACA\u0ACC\t\x1B\x02" +
		"\x02\u0ACB\u0ACD\t\x19\x02\x02\u0ACC\u0ACB\x03\x02\x02\x02\u0ACC\u0ACD" +
		"\x03\x02\x02\x02\u0ACD\u0ACF\x03\x02\x02\x02\u0ACE\u0AD0\x05\u024E\u0128" +
		"\x02\u0ACF\u0ACE\x03\x02\x02\x02\u0ACF\u0AD0\x03\x02\x02\x02\u0AD0\u0AD1" +
		"\x03\x02\x02\x02\u0AD1\u0AD5\x05\u0272\u013A\x02\u0AD2\u0AD4\x05V,\x02" +
		"\u0AD3\u0AD2\x03\x02\x02\x02\u0AD4\u0AD7\x03\x02\x02\x02\u0AD5\u0AD3\x03" +
		"\x02\x02\x02\u0AD5\u0AD6\x03\x02\x02\x02\u0AD6\u0B9A\x03\x02\x02\x02\u0AD7" +
		"\u0AD5\x03\x02\x02\x02\u0AD8\u0ADD\x07\x07\x02\x02\u0AD9\u0ADB\x07!\x02" +
		"\x02\u0ADA\u0ADC\x05\u024E\u0128\x02\u0ADB\u0ADA\x03\x02\x02\x02\u0ADB" +
		"\u0ADC\x03\x02\x02\x02\u0ADC\u0ADE\x03\x02\x02\x02\u0ADD\u0AD9\x03\x02" +
		"\x02\x02\u0ADD\u0ADE\x03\x02\x02\x02\u0ADE\u0ADF\x03\x02\x02\x02\u0ADF" +
		"\u0AE0\x07E\x02\x02\u0AE0\u0AE2\x07]\x02\x02\u0AE1\u0AE3\x05\u0286\u0144" +
		"\x02\u0AE2\u0AE1\x03\x02\x02\x02\u0AE2\u0AE3\x03\x02\x02\x02\u0AE3\u0AE5" +
		"\x03\x02\x02\x02\u0AE4\u0AE6\x05\u024E\u0128\x02\u0AE5\u0AE4\x03\x02\x02" +
		"\x02\u0AE5\u0AE6\x03\x02\x02\x02\u0AE6\u0AE7\x03\x02\x02\x02\u0AE7\u0AE8" +
		"\x05\u0272\u013A\x02\u0AE8\u0AE9\x05j6\x02\u0AE9\u0B9A\x03\x02\x02\x02" +
		"\u0AEA\u0AEF\x07\x07\x02\x02\u0AEB\u0AED\x07!\x02\x02\u0AEC\u0AEE\x05" +
		"\u024E\u0128\x02\u0AED\u0AEC\x03\x02\x02\x02\u0AED\u0AEE\x03\x02\x02\x02" +
		"\u0AEE\u0AF0\x03\x02\x02\x02\u0AEF\u0AEB\x03\x02\x02\x02\u0AEF\u0AF0\x03" +
		"\x02\x02\x02\u0AF0\u0AF1\x03\x02\x02\x02\u0AF1\u0AF2\x07\x1D\x02\x02\u0AF2" +
		"\u0AF3\x07\u0484\x02\x02\u0AF3\u0AF4\x05\u02B6\u015C\x02\u0AF4\u0AF5\x07" +
		"\u0485\x02\x02\u0AF5\u0B9A\x03\x02\x02\x02\u0AF6\u0AF8\x07\u0152\x02\x02" +
		"\u0AF7\u0AF9\x07\u047B\x02\x02\u0AF8\u0AF7\x03\x02\x02\x02\u0AF8\u0AF9" +
		"\x03\x02\x02\x02\u0AF9\u0AFA\x03\x02\x02\x02\u0AFA\u0B9A\t\'\x02\x02\u0AFB" +
		"\u0AFD\x07\t\x02\x02\u0AFC\u0AFE\x07\x1F\x02\x02\u0AFD\u0AFC\x03\x02\x02" +
		"\x02\u0AFD\u0AFE\x03\x02\x02\x02\u0AFE\u0AFF\x03\x02\x02\x02\u0AFF\u0B05" +
		"\x05\u024E\u0128\x02\u0B00\u0B01\x07\x9C\x02\x02\u0B01\u0B02\x07-\x02" +
		"\x02\u0B02\u0B06\x05\u027E\u0140\x02\u0B03\u0B04\x076\x02\x02\u0B04\u0B06" +
		"\x07-\x02\x02\u0B05\u0B00\x03\x02\x02\x02\u0B05\u0B03\x03\x02\x02\x02" +
		"\u0B06\u0B9A\x03\x02\x02\x02\u0B07\u0B09\x07\x1B\x02\x02\u0B08\u0B0A\x07" +
		"\x1F\x02\x02\u0B09\u0B08\x03\x02\x02\x02\u0B09\u0B0A\x03\x02\x02\x02\u0B0A" +
		"\u0B0C\x03\x02\x02\x02\u0B0B\u0B0D\x05\u0284\u0143\x02\u0B0C\u0B0B\x03" +
		"\x02\x02\x02\u0B0C\u0B0D\x03\x02\x02\x02\u0B0D\u0B0E\x03\x02\x02\x02\u0B0E" +
		"\u0B0F\x05\u024E\u0128\x02\u0B0F\u0B10\x05\u024E\u0128\x02\u0B10\u0B14" +
		"\x05d3\x02\u0B11\u0B15\x07\u01B0\x02\x02\u0B12\u0B13\x07\u0150\x02\x02" +
		"\u0B13\u0B15\x05\u024E\u0128\x02\u0B14\u0B11\x03\x02\x02\x02\u0B14\u0B12" +
		"\x03\x02\x02\x02\u0B14\u0B15\x03\x02\x02\x02\u0B15\u0B9A\x03\x02\x02\x02" +
		"\u0B16\u0B17\x07\x8E\x02\x02\u0B17\u0B18\x07\x1F\x02\x02\u0B18\u0B19\x05" +
		"\u024E\u0128\x02\u0B19\u0B1A\x07\xB1\x02\x02\u0B1A\u0B1B\x05\u024E\u0128" +
		"\x02\u0B1B\u0B9A\x03\x02\x02\x02\u0B1C\u0B1E\x07i\x02\x02\u0B1D\u0B1F" +
		"\x07\u047B\x02\x02\u0B1E\u0B1D\x03\x02\x02\x02\u0B1E\u0B1F\x03\x02\x02" +
		"\x02\u0B1F\u0B20\x03\x02\x02\x02\u0B20\u0B9A\t\x06\x02\x02\u0B21\u0B23" +
		"\x07\u0203\x02\x02\u0B22\u0B24\x07\x1F\x02\x02\u0B23\u0B22\x03\x02\x02" +
		"\x02\u0B23\u0B24\x03\x02\x02\x02\u0B24\u0B26\x03\x02\x02\x02\u0B25\u0B27" +
		"\x05\u0284\u0143\x02\u0B26\u0B25\x03\x02\x02\x02\u0B26\u0B27\x03\x02\x02" +
		"\x02\u0B27\u0B28\x03\x02\x02\x02\u0B28\u0B29\x05\u024E\u0128\x02\u0B29" +
		"\u0B2D\x05d3\x02\u0B2A\u0B2E\x07\u01B0\x02\x02\u0B2B\u0B2C\x07\u0150\x02" +
		"\x02\u0B2C\u0B2E\x05\u024E\u0128\x02\u0B2D\u0B2A\x03\x02\x02\x02\u0B2D" +
		"\u0B2B\x03\x02\x02\x02\u0B2D\u0B2E\x03\x02\x02\x02\u0B2E\u0B9A\x03\x02" +
		"\x02\x02\u0B2F\u0B31\x076\x02\x02\u0B30\u0B32\x07\x1F\x02\x02\u0B31\u0B30" +
		"\x03\x02\x02\x02\u0B31\u0B32\x03\x02\x02\x02\u0B32\u0B34\x03\x02\x02\x02" +
		"\u0B33\u0B35\x05\u0284\u0143\x02\u0B34\u0B33\x03\x02\x02\x02\u0B34\u0B35" +
		"\x03\x02\x02\x02\u0B35\u0B36\x03\x02\x02\x02\u0B36\u0B38\x05\u024E\u0128" +
		"\x02\u0B37\u0B39\x07\x93\x02\x02\u0B38\u0B37\x03\x02\x02\x02\u0B38\u0B39" +
		"\x03\x02\x02\x02\u0B39\u0B9A\x03\x02\x02\x02\u0B3A\u0B3B\x076\x02\x02" +
		"\u0B3B\u0B3D\t(\x02\x02\u0B3C\u0B3E\x05\u0284\u0143\x02\u0B3D\u0B3C\x03" +
		"\x02\x02\x02\u0B3D\u0B3E\x03\x02\x02\x02\u0B3E\u0B3F\x03\x02\x02\x02\u0B3F" +
		"\u0B9A\x05\u024E\u0128\x02\u0B40\u0B41\x076\x02\x02\u0B41\u0B42\x07\x84" +
		"\x02\x02\u0B42\u0B9A\x07]\x02\x02\u0B43\u0B44\x076\x02\x02\u0B44\u0B46" +
		"\t\x19\x02\x02\u0B45\u0B47\x05\u0284\u0143\x02\u0B46\u0B45\x03\x02\x02" +
		"\x02\u0B46\u0B47\x03\x02\x02\x02\u0B47\u0B48\x03\x02\x02\x02\u0B48\u0B9A" +
		"\x05\u024E\u0128\x02\u0B49\u0B4A\x07\x8E\x02\x02\u0B4A\u0B4B\t\x19\x02" +
		"\x02\u0B4B\u0B4C\x05\u024E\u0128\x02\u0B4C\u0B4D\x07\xB1\x02\x02\u0B4D" +
		"\u0B4E\x05\u024E\u0128\x02\u0B4E\u0B9A\x03\x02\x02\x02\u0B4F\u0B50\x07" +
		"\t\x02\x02\u0B50\u0B51\x07S\x02\x02\u0B51\u0B52\x05\u024E\u0128\x02\u0B52" +
		"\u0B53\t\x13\x02\x02\u0B53\u0B9A\x03\x02\x02\x02\u0B54\u0B55\x076\x02" +
		"\x02\u0B55\u0B56\x07E\x02\x02\u0B56\u0B58\x07]\x02\x02\u0B57\u0B59\x05" +
		"\u0284\u0143\x02\u0B58\u0B57\x03\x02\x02\x02\u0B58\u0B59\x03\x02\x02\x02" +
		"\u0B59\u0B5A\x03\x02\x02\x02\u0B5A\u0B9A\x05\u024E\u0128\x02\u0B5B\u0B5C" +
		"\x07\u018E\x02\x02\u0B5C\u0B9A\x07^\x02\x02\u0B5D\u0B5E\x07\u0195\x02" +
		"\x02\u0B5E\u0B9A\x07^\x02\x02\u0B5F\u0B61\x07\x8E\x02\x02\u0B60\u0B62" +
		"\t)\x02\x02\u0B61\u0B60\x03\x02\x02\x02\u0B61\u0B62\x03\x02\x02\x02\u0B62" +
		"\u0B65\x03\x02\x02\x02\u0B63\u0B66\x05\u024E\u0128\x02\u0B64\u0B66\x05" +
		"\u022E\u0118\x02\u0B65\u0B63\x03\x02\x02\x02\u0B65\u0B64\x03\x02\x02\x02" +
		"\u0B66\u0B9A\x03\x02\x02\x02\u0B67\u0B68\x07~\x02\x02\u0B68\u0B69\x07" +
		"\x16\x02\x02\u0B69\u0B9A\x05\u026E\u0138\x02\u0B6A\u0B6B\x07#\x02\x02" +
		"\u0B6B\u0B6C\x07\xB1\x02\x02\u0B6C\u0B6D\x07\x1C\x02\x02\u0B6D\u0B6E\x07" +
		"\x9C\x02\x02\u0B6E\u0B71\x05\u023C\u011F\x02\u0B6F\u0B70\x07\x1E\x02\x02" +
		"\u0B70\u0B72\x05\u023E\u0120\x02\u0B71\u0B6F\x03\x02\x02\x02\u0B71\u0B72" +
		"\x03\x02\x02\x02\u0B72\u0B9A\x03\x02\x02\x02\u0B73\u0B75\x07-\x02\x02" +
		"\u0B74\u0B73\x03\x02\x02\x02\u0B74\u0B75\x03\x02\x02\x02\u0B75\u0B76\x03" +
		"\x02\x02\x02\u0B76\u0B77\x07\x1C\x02\x02\u0B77\u0B78\x07\x9C\x02\x02\u0B78" +
		"\u0B79\x07\u047B\x02\x02\u0B79\u0B7D\x05\u023C\u011F\x02\u0B7A\u0B7B\x07" +
		"\x1E\x02\x02\u0B7B\u0B7C\x07\u047B\x02\x02\u0B7C\u0B7E\x05\u023E\u0120" +
		"\x02\u0B7D\u0B7A\x03\x02\x02\x02\u0B7D\u0B7E\x03\x02\x02\x02\u0B7E\u0B9A" +
		"\x03\x02\x02\x02\u0B7F\u0B80\x07\u018F\x02\x02\u0B80\u0B9A\x07\u028C\x02" +
		"\x02\u0B81\u0B82\x07\u01C4\x02\x02\u0B82\u0B9A\x07\u028C\x02\x02\u0B83" +
		"\u0B9A\x07D\x02\x02\u0B84\u0B85\t*\x02\x02\u0B85\u0B9A\x07\u02A2\x02\x02" +
		"\u0B86\u0B88\x07\x07\x02\x02\u0B87\u0B89\x07\x1F\x02\x02\u0B88\u0B87\x03" +
		"\x02\x02\x02\u0B88\u0B89\x03\x02\x02\x02\u0B89\u0B8B\x03\x02\x02\x02\u0B8A" +
		"\u0B8C\x05\u0286\u0144\x02\u0B8B\u0B8A\x03\x02\x02\x02\u0B8B\u0B8C\x03" +
		"\x02\x02\x02\u0B8C\u0B8D\x03\x02\x02\x02\u0B8D\u0B8E\x07\u0484\x02\x02" +
		"\u0B8E\u0B93\x05b2\x02\u0B8F\u0B90\x07\u0486\x02\x02\u0B90\u0B92\x05b" +
		"2\x02\u0B91\u0B8F\x03\x02\x02\x02\u0B92\u0B95\x03\x02\x02\x02\u0B93\u0B91" +
		"\x03\x02\x02\x02\u0B93\u0B94\x03\x02\x02\x02\u0B94\u0B96\x03\x02\x02\x02" +
		"\u0B95\u0B93\x03\x02\x02\x02\u0B96\u0B97\x07\u0485\x02\x02\u0B97\u0B9A" +
		"\x03\x02\x02\x02\u0B98\u0B9A\x05\xA0Q\x02\u0B99\u0A59\x03\x02\x02\x02" +
		"\u0B99\u0A63\x03\x02\x02\x02\u0B99\u0A71\x03\x02\x02\x02\u0B99\u0A86\x03" +
		"\x02\x02\x02\u0B99\u0A98\x03\x02\x02\x02\u0B99\u0AAE\x03\x02\x02\x02\u0B99" +
		"\u0AC9\x03\x02\x02\x02\u0B99\u0AD8\x03\x02\x02\x02\u0B99\u0AEA\x03\x02" +
		"\x02\x02\u0B99\u0AF6\x03\x02\x02\x02\u0B99\u0AFB\x03\x02\x02\x02\u0B99" +
		"\u0B07\x03\x02\x02\x02\u0B99\u0B16\x03\x02\x02\x02\u0B99\u0B1C\x03\x02" +
		"\x02\x02\u0B99\u0B21\x03\x02\x02\x02\u0B99\u0B2F\x03\x02\x02\x02\u0B99" +
		"\u0B3A\x03\x02\x02\x02\u0B99\u0B40\x03\x02\x02\x02\u0B99\u0B43\x03\x02" +
		"\x02\x02\u0B99\u0B49\x03\x02\x02\x02\u0B99\u0B4F\x03\x02\x02\x02\u0B99" +
		"\u0B54\x03\x02\x02\x02\u0B99\u0B5B\x03\x02\x02\x02\u0B99\u0B5D\x03\x02" +
		"\x02\x02\u0B99\u0B5F\x03\x02\x02\x02\u0B99\u0B67\x03\x02\x02\x02\u0B99" +
		"\u0B6A\x03\x02\x02\x02\u0B99\u0B74\x03\x02\x02\x02\u0B99\u0B7F\x03\x02" +
		"\x02\x02\u0B99\u0B81\x03\x02\x02\x02\u0B99\u0B83\x03\x02\x02\x02\u0B99" +
		"\u0B84\x03\x02\x02\x02\u0B99\u0B86\x03\x02\x02\x02\u0B99\u0B98\x03\x02" +
		"\x02\x02\u0B9A\x9F\x03\x02\x02\x02\u0B9B\u0B9C\x07\x07\x02\x02\u0B9C\u0B9E" +
		"\x07\x83\x02\x02\u0B9D\u0B9F\x05\u0286\u0144\x02\u0B9E\u0B9D\x03\x02\x02" +
		"\x02\u0B9E\u0B9F\x03\x02\x02\x02\u0B9F\u0BA0\x03\x02\x02\x02\u0BA0\u0BA1" +
		"\x07\u0484\x02\x02\u0BA1\u0BA6\x05~@\x02\u0BA2\u0BA3\x07\u0486\x02\x02" +
		"\u0BA3\u0BA5\x05~@\x02\u0BA4\u0BA2\x03\x02\x02\x02\u0BA5\u0BA8\x03\x02" +
		"\x02\x02\u0BA6\u0BA4\x03\x02\x02\x02\u0BA6\u0BA7\x03\x02\x02\x02\u0BA7" +
		"\u0BA9\x03\x02\x02\x02\u0BA8\u0BA6\x03\x02\x02\x02\u0BA9\u0BAA\x07\u0485" +
		"\x02\x02\u0BAA\u0C04\x03\x02\x02\x02\u0BAB\u0BAC\x076\x02\x02\u0BAC\u0BAE" +
		"\x07\x83\x02\x02\u0BAD\u0BAF\x05\u0284\u0143\x02\u0BAE\u0BAD\x03\x02\x02" +
		"\x02\u0BAE\u0BAF\x03\x02\x02\x02\u0BAF\u0BB0\x03\x02\x02\x02\u0BB0\u0C04" +
		"\x05\u026E\u0138\x02\u0BB1\u0BB2\x07\u018F\x02\x02\u0BB2\u0BB5\x07\x83" +
		"\x02\x02\u0BB3\u0BB6\x05\u026E\u0138\x02\u0BB4\u0BB6\x07\b\x02\x02\u0BB5" +
		"\u0BB3\x03\x02\x02\x02\u0BB5\u0BB4\x03\x02\x02\x02\u0BB6\u0BB7\x03\x02" +
		"\x02\x02\u0BB7\u0C04\x07\u028C\x02\x02\u0BB8\u0BB9\x07\u01C4\x02\x02\u0BB9" +
		"\u0BBC\x07\x83\x02\x02\u0BBA\u0BBD\x05\u026E\u0138\x02\u0BBB\u0BBD\x07" +
		"\b\x02\x02\u0BBC\u0BBA\x03\x02\x02\x02\u0BBC\u0BBB\x03\x02\x02\x02\u0BBD" +
		"\u0BBE\x03\x02\x02\x02\u0BBE\u0C04\x07\u028C\x02\x02\u0BBF\u0BC0\x07\u0295" +
		"\x02\x02\u0BC0\u0BC3\x07\x83\x02\x02\u0BC1\u0BC4\x05\u026E\u0138\x02\u0BC2" +
		"\u0BC4\x07\b\x02\x02\u0BC3\u0BC1\x03\x02\x02\x02\u0BC3\u0BC2\x03\x02\x02" +
		"\x02\u0BC4\u0C04\x03\x02\x02\x02\u0BC5\u0BC6\x07\u016D\x02\x02\u0BC6\u0BC7" +
		"\x07\x83\x02\x02\u0BC7\u0C04\x05\u0254\u012B\x02\u0BC8\u0BC9\x07\u0247" +
		"\x02\x02\u0BC9\u0BCA\x07\x83\x02\x02\u0BCA\u0BCB\x05\u026E\u0138\x02\u0BCB" +
		"\u0BCC\x07Y\x02\x02\u0BCC\u0BCD\x07\u0484\x02\x02\u0BCD\u0BD2\x05~@\x02" +
		"\u0BCE\u0BCF\x07\u0486\x02\x02\u0BCF\u0BD1\x05~@\x02\u0BD0\u0BCE\x03\x02" +
		"\x02\x02\u0BD1\u0BD4\x03\x02\x02\x02\u0BD2\u0BD0\x03\x02\x02\x02\u0BD2" +
		"\u0BD3\x03\x02\x02\x02\u0BD3\u0BD5\x03\x02\x02\x02\u0BD4\u0BD2\x03\x02" +
		"\x02\x02\u0BD5\u0BD6\x07\u0485\x02\x02\u0BD6\u0C04\x03\x02\x02\x02\u0BD7" +
		"\u0BD8\x07\u01A4\x02\x02\u0BD8\u0BD9\x07\x83\x02\x02\u0BD9\u0BDA\x05\u024E" +
		"\u0128\x02\u0BDA\u0BDB\x07\xC2\x02\x02\u0BDB\u0BDC\x07\xAE\x02\x02\u0BDC" +
		"\u0BDF\x05\u0230\u0119\x02\u0BDD\u0BDE\t*\x02\x02\u0BDE\u0BE0\x07\u02A2" +
		"\x02\x02\u0BDF\u0BDD\x03\x02\x02\x02\u0BDF\u0BE0\x03\x02\x02\x02\u0BE0" +
		"\u0C04\x03\x02\x02\x02\u0BE1\u0BE2\x07\v\x02\x02\u0BE2\u0BE5\x07\x83\x02" +
		"\x02\u0BE3\u0BE6\x05\u026E\u0138\x02\u0BE4\u0BE6\x07\b\x02\x02\u0BE5\u0BE3" +
		"\x03\x02\x02\x02\u0BE5\u0BE4\x03\x02\x02\x02\u0BE6\u0C04\x03\x02\x02\x02" +
		"\u0BE7\u0BE8\x07\x1D\x02\x02\u0BE8\u0BEB\x07\x83\x02\x02\u0BE9\u0BEC\x05" +
		"\u026E\u0138\x02\u0BEA\u0BEC\x07\b\x02\x02\u0BEB\u0BE9\x03\x02\x02\x02" +
		"\u0BEB\u0BEA\x03\x02\x02\x02\u0BEC\u0C04\x03\x02\x02\x02\u0BED\u0BEE\x07" +
		"y\x02\x02\u0BEE\u0BF1\x07\x83\x02\x02\u0BEF\u0BF2\x05\u026E\u0138\x02" +
		"\u0BF0\u0BF2\x07\b\x02\x02\u0BF1\u0BEF\x03\x02\x02\x02\u0BF1\u0BF0\x03" +
		"\x02\x02\x02\u0BF2\u0C04\x03\x02\x02\x02\u0BF3\u0BF4\x07\u023D\x02\x02" +
		"\u0BF4\u0BF7\x07\x83\x02\x02\u0BF5\u0BF8\x05\u026E\u0138\x02\u0BF6\u0BF8" +
		"\x07\b\x02\x02\u0BF7\u0BF5\x03\x02\x02\x02\u0BF7\u0BF6\x03\x02\x02\x02" +
		"\u0BF8\u0C04\x03\x02\x02\x02\u0BF9\u0BFA\x07\u0248\x02\x02\u0BFA\u0BFD" +
		"\x07\x83\x02\x02\u0BFB\u0BFE\x05\u026E\u0138\x02\u0BFC\u0BFE\x07\b\x02" +
		"\x02\u0BFD\u0BFB\x03\x02\x02\x02\u0BFD\u0BFC\x03\x02\x02\x02\u0BFE\u0C04" +
		"\x03\x02\x02\x02\u0BFF\u0C00\x07\u0246\x02\x02\u0C00\u0C04\x07\u0228\x02" +
		"\x02\u0C01\u0C02\x07\u029E\x02\x02\u0C02\u0C04\x07\u0228\x02\x02\u0C03" +
		"\u0B9B\x03\x02\x02\x02\u0C03\u0BAB\x03\x02\x02\x02\u0C03\u0BB1\x03\x02" +
		"\x02\x02\u0C03\u0BB8\x03\x02\x02\x02\u0C03\u0BBF\x03\x02\x02\x02\u0C03" +
		"\u0BC5\x03\x02\x02\x02\u0C03\u0BC8\x03\x02\x02\x02\u0C03\u0BD7\x03\x02" +
		"\x02\x02\u0C03\u0BE1\x03\x02\x02\x02\u0C03\u0BE7\x03\x02\x02\x02\u0C03" +
		"\u0BED\x03\x02\x02\x02\u0C03\u0BF3\x03\x02\x02\x02\u0C03\u0BF9\x03\x02" +
		"\x02\x02\u0C03\u0BFF\x03\x02\x02\x02\u0C03\u0C01\x03\x02\x02\x02\u0C04" +
		"\xA1\x03\x02\x02\x02\u0C05\u0C06\x076\x02\x02\u0C06\u0C08\t\x02\x02\x02" +
		"\u0C07\u0C09\x05\u0284\u0143\x02\u0C08\u0C07\x03\x02\x02\x02\u0C08\u0C09" +
		"\x03\x02\x02\x02\u0C09\u0C0A\x03\x02\x02\x02\u0C0A\u0C0B\x05\u024E\u0128" +
		"\x02\u0C0B\xA3\x03\x02\x02\x02\u0C0C\u0C0D\x076\x02\x02\u0C0D\u0C0F\x07" +
		"\u01A1\x02\x02\u0C0E\u0C10\x05\u0284\u0143\x02\u0C0F\u0C0E\x03\x02\x02" +
		"\x02\u0C0F\u0C10\x03\x02\x02\x02\u0C10\u0C11\x03\x02\x02\x02\u0C11\u0C12" +
		"\x05\u022E\u0118\x02\u0C12\xA5\x03\x02\x02\x02\u0C13\u0C14\x076\x02\x02" +
		"\u0C14\u0C16\x07S\x02\x02\u0C15\u0C17\x05\u0284\u0143\x02\u0C16\u0C15" +
		"\x03\x02\x02\x02\u0C16\u0C17\x03\x02\x02\x02\u0C17\u0C19\x03\x02\x02\x02" +
		"\u0C18\u0C1A\t\x03\x02\x02\u0C19\u0C18\x03\x02\x02\x02\u0C19\u0C1A\x03" +
		"\x02\x02\x02\u0C1A\u0C1B\x03\x02\x02\x02\u0C1B\u0C1C\x05\u024E\u0128\x02" +
		"\u0C1C\u0C1D\x07x\x02\x02\u0C1D\u0C2A\x05\u0230\u0119\x02\u0C1E\u0C20" +
		"\x07\u0152\x02\x02\u0C1F\u0C21\x07\u047B\x02\x02\u0C20\u0C1F\x03\x02\x02" +
		"\x02\u0C20\u0C21\x03\x02\x02\x02\u0C21\u0C22\x03\x02\x02\x02\u0C22\u0C29" +
		"\t+\x02\x02\u0C23\u0C25\x07i\x02\x02\u0C24\u0C26\x07\u047B\x02\x02\u0C25" +
		"\u0C24\x03\x02\x02\x02\u0C25\u0C26\x03\x02\x02\x02\u0C26\u0C27\x03\x02" +
		"\x02\x02\u0C27\u0C29\t\x06\x02\x02\u0C28\u0C1E\x03\x02\x02\x02\u0C28\u0C23" +
		"\x03\x02\x02\x02\u0C29\u0C2C\x03\x02\x02\x02\u0C2A\u0C28\x03\x02\x02\x02" +
		"\u0C2A\u0C2B\x03\x02\x02\x02\u0C2B\u0C2E\x03\x02\x02\x02\u0C2C\u0C2A\x03" +
		"\x02\x02\x02\u0C2D\u0C2F\x05\u028A\u0146\x02\u0C2E\u0C2D\x03\x02\x02\x02" +
		"\u0C2E\u0C2F\x03\x02\x02\x02\u0C2F\xA7\x03\x02\x02\x02\u0C30\u0C31\x07" +
		"6\x02\x02\u0C31\u0C32\x07\u01DE\x02\x02\u0C32\u0C33\x07K\x02\x02\u0C33" +
		"\u0C34\x05\u024E\u0128\x02\u0C34\u0C35\x07\u019B\x02\x02\u0C35\u0C36\x07" +
		"\u047B\x02\x02\u0C36\u0C37\x05\u0240\u0121\x02\u0C37\xA9\x03\x02\x02\x02" +
		"\u0C38\u0C39\x076\x02\x02\u0C39\u0C3B\x07\x86\x02\x02\u0C3A\u0C3C\x05" +
		"\u0284\u0143\x02\u0C3B\u0C3A\x03\x02\x02\x02\u0C3B\u0C3C\x03\x02\x02\x02" +
		"\u0C3C\u0C3D\x03\x02\x02\x02\u0C3D\u0C3E\x05\u022E\u0118\x02\u0C3E\xAB" +
		"\x03\x02\x02\x02\u0C3F\u0C40\x076\x02\x02\u0C40\u0C42\x07\u01B7\x02\x02" +
		"\u0C41\u0C43\x05\u0284\u0143\x02\u0C42\u0C41\x03\x02\x02\x02\u0C42\u0C43" +
		"\x03\x02\x02\x02\u0C43\u0C44\x03\x02\x02\x02\u0C44\u0C45\x05\u022E\u0118" +
		"\x02\u0C45\xAD\x03\x02\x02\x02\u0C46\u0C47\x076\x02\x02\u0C47\u0C49\x07" +
		"\u0264\x02\x02\u0C48\u0C4A\x05\u0284\u0143\x02\u0C49\u0C48\x03\x02\x02" +
		"\x02\u0C49\u0C4A\x03\x02\x02\x02\u0C4A\u0C4B\x03\x02\x02\x02\u0C4B\u0C4C" +
		"\x05\u024E\u0128\x02\u0C4C\xAF\x03\x02\x02\x02\u0C4D\u0C4F\x076\x02\x02" +
		"\u0C4E\u0C50\x07\u028E\x02\x02\u0C4F\u0C4E\x03\x02\x02\x02\u0C4F\u0C50" +
		"\x03\x02\x02\x02\u0C50\u0C51\x03\x02\x02\x02\u0C51\u0C53\x07\xAE\x02\x02" +
		"\u0C52\u0C54\x05\u0284\u0143\x02\u0C53\u0C52\x03\x02\x02\x02\u0C53\u0C54" +
		"\x03\x02\x02\x02\u0C54\u0C55\x03\x02\x02\x02\u0C55\u0C57\x05\u0270\u0139" +
		"\x02\u0C56\u0C58\x05\u028A\u0146\x02\u0C57\u0C56\x03\x02\x02\x02\u0C57" +
		"\u0C58\x03\x02\x02\x02\u0C58\u0C5A\x03\x02\x02\x02\u0C59\u0C5B\t,\x02" +
		"\x02\u0C5A\u0C59\x03\x02\x02\x02\u0C5A\u0C5B\x03\x02\x02\x02\u0C5B\xB1" +
		"\x03\x02\x02\x02\u0C5C\u0C5D\x076\x02\x02\u0C5D\u0C5E\x07\u028C\x02\x02" +
		"\u0C5E\u0C64\x05\u024E\u0128\x02\u0C5F\u0C61\x07\u019B\x02\x02\u0C60\u0C62" +
		"\x07\u047B\x02\x02\u0C61\u0C60\x03\x02\x02\x02\u0C61\u0C62\x03\x02\x02" +
		"\x02\u0C62\u0C63\x03\x02\x02\x02\u0C63\u0C65\x05\u0240\u0121\x02\u0C64" +
		"\u0C5F\x03\x02\x02\x02\u0C64\u0C65\x03\x02\x02\x02\u0C65\xB3\x03\x02\x02" +
		"\x02\u0C66\u0C67\x076\x02\x02\u0C67\u0C69\x07\xB3\x02\x02\u0C68\u0C6A" +
		"\x05\u0284\u0143\x02\u0C69\u0C68\x03\x02\x02\x02\u0C69\u0C6A\x03\x02\x02" +
		"\x02\u0C6A\u0C6B\x03\x02\x02\x02\u0C6B\u0C6C\x05\u022E\u0118\x02\u0C6C" +
		"\xB5\x03\x02\x02\x02\u0C6D\u0C6E\x076\x02\x02\u0C6E\u0C70\x07\u02A5\x02" +
		"\x02\u0C6F\u0C71\x05\u0284\u0143\x02\u0C70\u0C6F\x03\x02\x02\x02\u0C70" +
		"\u0C71\x03\x02\x02\x02\u0C71\u0C72\x03\x02\x02\x02\u0C72\u0C77\x05\u022E" +
		"\u0118\x02\u0C73\u0C74\x07\u0486\x02\x02\u0C74\u0C76\x05\u022E\u0118\x02" +
		"\u0C75\u0C73\x03\x02\x02\x02\u0C76\u0C79\x03\x02\x02\x02\u0C77\u0C75\x03" +
		"\x02\x02\x02\u0C77\u0C78\x03\x02\x02\x02\u0C78\u0C7B\x03\x02\x02\x02\u0C79" +
		"\u0C77\x03\x02\x02\x02\u0C7A\u0C7C\t,\x02\x02\u0C7B\u0C7A\x03\x02\x02" +
		"\x02\u0C7B\u0C7C\x03\x02\x02\x02\u0C7C\xB7\x03\x02\x02\x02\u0C7D\u0C7E" +
		"\x076\x02\x02\u0C7E\u0C80\x07\u0258\x02\x02\u0C7F\u0C81\x05\u0284\u0143" +
		"\x02\u0C80\u0C7F\x03\x02\x02\x02\u0C80\u0C81\x03\x02\x02\x02\u0C81\u0C82" +
		"\x03\x02\x02\x02\u0C82\u0C87\x05\u0232\u011A\x02\u0C83\u0C84\x07\u0486" +
		"\x02\x02\u0C84\u0C86\x05\u0232\u011A\x02\u0C85\u0C83\x03\x02\x02\x02\u0C86" +
		"\u0C89\x03\x02\x02\x02\u0C87\u0C85\x03\x02\x02\x02\u0C87\u0C88\x03\x02" +
		"\x02\x02\u0C88\xB9\x03\x02\x02\x02\u0C89\u0C87\x03\x02\x02\x02\u0C8A\u0C8B" +
		"\x07\x9C\x02\x02\u0C8B\u0C8C\x07-\x02\x02\u0C8C\u0C97\x07\u0258\x02\x02" +
		"\u0C8D\u0C98\x07\u0214\x02\x02\u0C8E\u0C98\x07\b\x02\x02\u0C8F\u0C94\x05" +
		"\u0232\u011A\x02\u0C90\u0C91\x07\u0486\x02\x02\u0C91\u0C93\x05\u0232\u011A" +
		"\x02\u0C92\u0C90\x03\x02\x02\x02\u0C93\u0C96\x03\x02\x02\x02\u0C94\u0C92" +
		"\x03\x02\x02\x02\u0C94\u0C95\x03\x02\x02\x02\u0C95\u0C98\x03\x02\x02\x02" +
		"\u0C96\u0C94\x03\x02\x02\x02\u0C97\u0C8D\x03\x02\x02\x02\u0C97\u0C8E\x03" +
		"\x02\x02\x02\u0C97\u0C8F\x03\x02\x02\x02\u0C98\u0C99\x03\x02\x02\x02\u0C99" +
		"\u0C9C\x07\xB1\x02\x02\u0C9A\u0C9D\x05\u0238\u011D\x02\u0C9B\u0C9D\x05" +
		"\u024E\u0128\x02\u0C9C\u0C9A\x03\x02\x02\x02\u0C9C\u0C9B\x03\x02\x02\x02" +
		"\u0C9D\u0CA5\x03\x02\x02\x02\u0C9E\u0CA1\x07\u0486\x02\x02\u0C9F\u0CA2" +
		"\x05\u0238\u011D\x02\u0CA0\u0CA2\x05\u024E\u0128\x02\u0CA1\u0C9F\x03\x02" +
		"\x02\x02\u0CA1\u0CA0\x03\x02\x02\x02\u0CA2\u0CA4\x03\x02\x02\x02\u0CA3" +
		"\u0C9E\x03\x02\x02\x02\u0CA4\u0CA7\x03\x02\x02\x02\u0CA5\u0CA3\x03\x02" +
		"\x02\x02\u0CA5\u0CA6\x03\x02\x02\x02\u0CA6\u0CAC\x03\x02\x02\x02\u0CA7" +
		"\u0CA5\x03\x02\x02\x02\u0CA8\u0CA9\x07\x9C\x02\x02\u0CA9\u0CAA\x07\u0258" +
		"\x02\x02\u0CAA\u0CAC\x05\u01BC\xDF\x02\u0CAB\u0C8A\x03\x02\x02\x02\u0CAB" +
		"\u0CA8\x03\x02\x02\x02\u0CAC\xBB\x03\x02\x02\x02\u0CAD\u0CAF\x076\x02" +
		"\x02\u0CAE\u0CB0\x07\u028E\x02\x02\u0CAF\u0CAE\x03\x02";
	private static readonly _serializedATNSegment8: string =
		"\x02\x02\u0CAF\u0CB0\x03\x02\x02\x02\u0CB0\u0CB1\x03\x02\x02\x02\u0CB1" +
		"\u0CB3\x07\u0263\x02\x02\u0CB2\u0CB4\x05\u0284\u0143\x02\u0CB3\u0CB2\x03" +
		"\x02\x02\x02\u0CB3\u0CB4\x03\x02\x02\x02\u0CB4\u0CB6\x03\x02\x02\x02\u0CB5" +
		"\u0CB7\x07\x05\x02\x02\u0CB6\u0CB5\x03\x02\x02\x02\u0CB6\u0CB7\x03\x02" +
		"\x02\x02\u0CB7\u0CB8\x03\x02\x02\x02\u0CB8\u0CBD\x05\u022E\u0118\x02\u0CB9" +
		"\u0CBA\x07\u0486\x02\x02\u0CBA\u0CBC\x05\u022E\u0118\x02\u0CBB\u0CB9\x03" +
		"\x02\x02\x02\u0CBC\u0CBF\x03\x02\x02\x02\u0CBD\u0CBB\x03\x02\x02\x02\u0CBD" +
		"\u0CBE\x03\x02\x02\x02\u0CBE\xBD\x03\x02\x02\x02\u0CBF\u0CBD\x03\x02\x02" +
		"\x02\u0CC0\u0CC1\x07\x8E\x02\x02\u0CC1\u0CC2\x07\xAE\x02\x02\u0CC2\u0CC7" +
		"\x05\xC0a\x02\u0CC3\u0CC4\x07\u0486\x02\x02\u0CC4\u0CC6\x05\xC0a\x02\u0CC5" +
		"\u0CC3\x03\x02\x02\x02\u0CC6\u0CC9\x03\x02\x02\x02\u0CC7\u0CC5\x03\x02" +
		"\x02\x02\u0CC7\u0CC8\x03\x02\x02\x02\u0CC8\xBF\x03\x02\x02\x02\u0CC9\u0CC7" +
		"\x03\x02\x02\x02\u0CCA\u0CCC\x05\u0230\u0119\x02\u0CCB\u0CCD\x05\u028A" +
		"\u0146\x02\u0CCC\u0CCB\x03\x02\x02\x02\u0CCC\u0CCD\x03\x02\x02\x02\u0CCD" +
		"\u0CCE\x03\x02\x02\x02\u0CCE\u0CCF\x07\xB1\x02\x02\u0CCF\u0CD0\x05\u0230" +
		"\u0119\x02\u0CD0\xC1\x03\x02\x02\x02\u0CD1\u0CD3\x07\u0295\x02\x02\u0CD2" +
		"\u0CD4\x07\xAE\x02\x02\u0CD3\u0CD2\x03\x02\x02\x02\u0CD3\u0CD4\x03\x02" +
		"\x02\x02\u0CD4\u0CD5\x03\x02\x02\x02\u0CD5\u0CD7\x05\u0230\u0119\x02\u0CD6" +
		"\u0CD8\x05\u028A\u0146\x02\u0CD7\u0CD6\x03\x02\x02\x02\u0CD7\u0CD8\x03" +
		"\x02\x02\x02\u0CD8\xC3\x03\x02\x02\x02\u0CD9\u0CDA\x07\x17\x02\x02\u0CDA" +
		"\u0CE1\x05\u022E\u0118\x02\u0CDB\u0CDE\x07\u0484\x02\x02\u0CDC\u0CDF\x05" +
		"\u0278\u013D\x02\u0CDD\u0CDF\x05\u0274\u013B\x02\u0CDE\u0CDC\x03\x02\x02" +
		"\x02\u0CDE\u0CDD\x03\x02\x02\x02\u0CDE\u0CDF\x03\x02\x02\x02\u0CDF\u0CE0" +
		"\x03\x02\x02\x02\u0CE0\u0CE2\x07\u0485\x02\x02\u0CE1\u0CDB\x03\x02\x02" +
		"\x02\u0CE1\u0CE2\x03\x02\x02\x02\u0CE2\xC5\x03\x02\x02\x02\u0CE3\u0CE6" +
		"\x05\xE2r\x02\u0CE4\u0CE6\x05\xE4s\x02\u0CE5\u0CE3\x03\x02\x02\x02\u0CE5" +
		"\u0CE4\x03\x02\x02\x02\u0CE6\xC7\x03\x02\x02\x02\u0CE7\u0CE8\x07\u0191" +
		"\x02\x02\u0CE8\u0CE9\x05\u0274\u013B\x02\u0CE9\xC9\x03\x02\x02\x02\u0CEA" +
		"\u0CEF\x05\xE6t\x02\u0CEB\u0CEF\x05\xE8u\x02\u0CEC\u0CEF\x05\xEAv\x02" +
		"\u0CED\u0CEF\x05\xECw\x02\u0CEE\u0CEA\x03\x02\x02\x02\u0CEE\u0CEB\x03" +
		"\x02\x02\x02\u0CEE\u0CEC\x03\x02\x02\x02\u0CEE\u0CED\x03\x02\x02\x02\u0CEF" +
		"\xCB\x03\x02\x02\x02\u0CF0\u0CF2\x07W\x02\x02\u0CF1\u0CF3\t-\x02\x02\u0CF2" +
		"\u0CF1\x03\x02\x02\x02\u0CF2\u0CF3\x03\x02\x02\x02\u0CF3\u0CF5\x03\x02" +
		"\x02\x02\u0CF4\u0CF6\x07P\x02\x02\u0CF5\u0CF4\x03\x02\x02\x02\u0CF5\u0CF6" +
		"\x03\x02\x02\x02\u0CF6\u0CF8\x03\x02\x02\x02\u0CF7\u0CF9\x07Y\x02\x02" +
		"\u0CF8\u0CF7\x03\x02\x02\x02\u0CF8\u0CF9\x03\x02\x02\x02\u0CF9\u0CFA\x03" +
		"\x02\x02\x02\u0CFA\u0D01\x05\u0230\u0119\x02\u0CFB\u0CFC\x07\x83\x02\x02" +
		"\u0CFC\u0CFE\x07\u0484\x02\x02\u0CFD\u0CFF\x05\u026E\u0138\x02\u0CFE\u0CFD" +
		"\x03\x02\x02\x02\u0CFE\u0CFF\x03\x02\x02\x02\u0CFF\u0D00\x03\x02\x02\x02" +
		"\u0D00\u0D02\x07\u0485\x02\x02\u0D01\u0CFB\x03\x02\x02\x02\u0D01\u0D02" +
		"\x03\x02\x02\x02\u0D02\u0D13\x03\x02\x02\x02\u0D03\u0D04\x07\u0484\x02" +
		"\x02\u0D04\u0D05\x05\u026E\u0138\x02\u0D05\u0D06\x07\u0485\x02\x02\u0D06" +
		"\u0D08\x03\x02\x02\x02\u0D07\u0D03\x03\x02\x02\x02\u0D07\u0D08\x03\x02" +
		"\x02\x02\u0D08\u0D09\x03\x02\x02\x02\u0D09\u0D14\x05\xDAn\x02\u0D0A\u0D0B" +
		"\x07\x9C\x02\x02\u0D0B\u0D10\x05\xDCo\x02\u0D0C\u0D0D\x07\u0486\x02\x02" +
		"\u0D0D\u0D0F\x05\xDCo\x02\u0D0E\u0D0C\x03\x02\x02\x02\u0D0F\u0D12\x03" +
		"\x02\x02\x02\u0D10\u0D0E\x03\x02\x02\x02\u0D10\u0D11\x03\x02\x02\x02\u0D11" +
		"\u0D14\x03\x02\x02\x02\u0D12\u0D10\x03\x02\x02\x02\u0D13\u0D07\x03\x02" +
		"\x02\x02\u0D13\u0D0A\x03\x02\x02\x02\u0D14\u0D21\x03\x02\x02\x02\u0D15" +
		"\u0D16\x07x\x02\x02\u0D16\u0D17\x07\u0193\x02\x02\u0D17\u0D18\x07]\x02" +
		"\x02\u0D18\u0D19\x07\xBA\x02\x02\u0D19\u0D1E\x05\xDCo\x02\u0D1A\u0D1B" +
		"\x07\u0486\x02\x02\u0D1B\u0D1D\x05\xDCo\x02\u0D1C\u0D1A\x03\x02\x02\x02" +
		"\u0D1D\u0D20\x03\x02\x02\x02\u0D1E\u0D1C\x03\x02\x02\x02\u0D1E\u0D1F\x03" +
		"\x02\x02\x02\u0D1F\u0D22\x03\x02\x02\x02\u0D20\u0D1E\x03\x02\x02\x02\u0D21" +
		"\u0D15\x03\x02\x02\x02\u0D21\u0D22\x03\x02\x02\x02\u0D22\xCD\x03\x02\x02" +
		"\x02\u0D23\u0D24\x07h\x02\x02\u0D24\u0D26\x07\u0186\x02\x02\u0D25\u0D27" +
		"\t.\x02\x02\u0D26\u0D25\x03\x02\x02\x02\u0D26\u0D27\x03\x02\x02\x02\u0D27" +
		"\u0D29\x03\x02\x02\x02\u0D28\u0D2A\x07\u01DC\x02\x02\u0D29\u0D28\x03\x02" +
		"\x02\x02\u0D29\u0D2A\x03\x02\x02\x02\u0D2A\u0D2B\x03\x02\x02\x02\u0D2B" +
		"\u0D2C\x07T\x02\x02\u0D2C\u0D2E\x07\u0493\x02\x02\u0D2D\u0D2F\t\b\x02" +
		"\x02\u0D2E\u0D2D\x03\x02\x02\x02\u0D2E\u0D2F\x03\x02\x02\x02\u0D2F\u0D30" +
		"\x03\x02\x02\x02\u0D30\u0D31\x07Y\x02\x02\u0D31\u0D32\x07\xAE\x02\x02" +
		"\u0D32\u0D38\x05\u0230\u0119\x02\u0D33\u0D34\x07\x83\x02\x02\u0D34\u0D35" +
		"\x07\u0484\x02\x02\u0D35\u0D36\x05\u026E\u0138\x02\u0D36\u0D37\x07\u0485" +
		"\x02\x02\u0D37\u0D39\x03\x02\x02\x02\u0D38\u0D33\x03\x02\x02\x02\u0D38" +
		"\u0D39\x03\x02\x02\x02\u0D39\u0D3D\x03\x02\x02\x02\u0D3A\u0D3B\x07\x1C" +
		"\x02\x02\u0D3B\u0D3C\x07\x9C\x02\x02\u0D3C\u0D3E\x05\u023C\u011F\x02\u0D3D" +
		"\u0D3A\x03\x02\x02\x02\u0D3D\u0D3E\x03\x02\x02\x02\u0D3E\u0D45\x03\x02" +
		"\x02\x02\u0D3F\u0D41\t/\x02\x02\u0D40\u0D42\x05\u0122\x92\x02\u0D41\u0D40" +
		"\x03\x02\x02\x02\u0D42\u0D43\x03\x02\x02\x02\u0D43\u0D41\x03\x02\x02\x02" +
		"\u0D43\u0D44\x03\x02\x02\x02\u0D44\u0D46\x03\x02\x02\x02\u0D45\u0D3F\x03" +
		"\x02\x02\x02\u0D45\u0D46\x03\x02\x02\x02\u0D46\u0D4D\x03\x02\x02\x02\u0D47" +
		"\u0D49\x07g\x02\x02\u0D48\u0D4A\x05\u0124\x93\x02\u0D49\u0D48\x03\x02" +
		"\x02\x02\u0D4A\u0D4B\x03\x02\x02\x02\u0D4B\u0D49\x03\x02\x02\x02\u0D4B" +
		"\u0D4C\x03\x02\x02\x02\u0D4C\u0D4E\x03\x02\x02\x02\u0D4D\u0D47\x03\x02" +
		"\x02\x02\u0D4D\u0D4E\x03\x02\x02\x02\u0D4E\u0D53\x03\x02\x02\x02\u0D4F" +
		"\u0D50\x07P\x02\x02\u0D50\u0D51\x05\u0254\u012B\x02\u0D51\u0D52\t0\x02" +
		"\x02\u0D52\u0D54\x03\x02\x02\x02\u0D53\u0D4F\x03\x02\x02\x02\u0D53\u0D54" +
		"\x03\x02\x02\x02\u0D54\u0D60\x03\x02\x02\x02\u0D55\u0D56\x07\u0484\x02" +
		"\x02\u0D56\u0D5B\x05\xDEp\x02\u0D57\u0D58\x07\u0486\x02\x02\u0D58\u0D5A" +
		"\x05\xDEp\x02\u0D59\u0D57\x03\x02\x02\x02\u0D5A\u0D5D\x03\x02\x02\x02" +
		"\u0D5B\u0D59\x03\x02\x02\x02\u0D5B\u0D5C\x03\x02\x02\x02\u0D5C\u0D5E\x03" +
		"\x02\x02\x02\u0D5D\u0D5B\x03\x02\x02\x02\u0D5E\u0D5F\x07\u0485\x02\x02" +
		"\u0D5F\u0D61\x03\x02\x02\x02\u0D60\u0D55\x03\x02\x02\x02\u0D60\u0D61\x03" +
		"\x02\x02\x02\u0D61\u0D6B\x03\x02\x02\x02\u0D62\u0D63\x07\x9C\x02\x02\u0D63" +
		"\u0D68\x05\xDCo\x02\u0D64\u0D65\x07\u0486\x02\x02\u0D65\u0D67\x05\xDC" +
		"o\x02\u0D66\u0D64\x03\x02\x02\x02\u0D67\u0D6A\x03\x02\x02\x02\u0D68\u0D66" +
		"\x03\x02\x02\x02\u0D68\u0D69\x03\x02\x02\x02\u0D69\u0D6C\x03\x02\x02\x02" +
		"\u0D6A\u0D68\x03\x02\x02\x02\u0D6B\u0D62\x03\x02\x02\x02\u0D6B\u0D6C\x03" +
		"\x02\x02\x02\u0D6C\xCF\x03\x02\x02\x02\u0D6D\u0D6E\x07h\x02\x02\u0D6E" +
		"\u0D70\x07\u02B2\x02\x02\u0D6F\u0D71\t.\x02\x02\u0D70\u0D6F\x03\x02\x02" +
		"\x02\u0D70\u0D71\x03\x02\x02\x02\u0D71\u0D73\x03\x02\x02\x02\u0D72\u0D74" +
		"\x07\u01DC\x02\x02\u0D73\u0D72\x03\x02\x02\x02\u0D73\u0D74\x03\x02\x02" +
		"\x02\u0D74\u0D75\x03\x02\x02\x02\u0D75\u0D76\x07T\x02\x02\u0D76\u0D78" +
		"\x07\u0493\x02\x02\u0D77\u0D79\t\b\x02\x02\u0D78\u0D77\x03\x02\x02\x02" +
		"\u0D78\u0D79\x03\x02\x02\x02\u0D79\u0D7A\x03\x02\x02\x02\u0D7A\u0D7B\x07" +
		"Y\x02\x02\u0D7B\u0D7C\x07\xAE\x02\x02\u0D7C\u0D80\x05\u0230\u0119\x02" +
		"\u0D7D\u0D7E\x07\x1C\x02\x02\u0D7E\u0D7F\x07\x9C\x02\x02\u0D7F\u0D81\x05" +
		"\u023C\u011F\x02\u0D80\u0D7D\x03\x02\x02\x02\u0D80\u0D81\x03\x02\x02\x02" +
		"\u0D81\u0D88\x03\x02\x02\x02\u0D82\u0D83\x07\u025D\x02\x02\u0D83\u0D84" +
		"\x07\u01C2\x02\x02\u0D84\u0D85\x07\x16\x02\x02\u0D85\u0D86\x07\u047D\x02" +
		"\x02\u0D86\u0D87\x07\u0493\x02\x02\u0D87\u0D89\x07\u047C\x02\x02\u0D88" +
		"\u0D82\x03\x02\x02\x02\u0D88\u0D89\x03\x02\x02\x02\u0D89\u0D8E\x03\x02" +
		"\x02\x02\u0D8A\u0D8B\x07P\x02\x02\u0D8B\u0D8C\x05\u0254\u012B\x02\u0D8C" +
		"\u0D8D\t0\x02\x02\u0D8D\u0D8F\x03\x02\x02\x02\u0D8E\u0D8A\x03\x02\x02" +
		"\x02\u0D8E\u0D8F\x03\x02\x02\x02\u0D8F\u0D9B\x03\x02\x02\x02\u0D90\u0D91" +
		"\x07\u0484\x02\x02\u0D91\u0D96\x05\xDEp\x02\u0D92\u0D93\x07\u0486\x02" +
		"\x02\u0D93\u0D95\x05\xDEp\x02\u0D94\u0D92\x03\x02\x02\x02\u0D95\u0D98" +
		"\x03\x02\x02\x02\u0D96\u0D94\x03\x02\x02\x02\u0D96\u0D97\x03\x02\x02\x02" +
		"\u0D97\u0D99\x03\x02\x02\x02\u0D98\u0D96\x03\x02\x02\x02\u0D99\u0D9A\x07" +
		"\u0485\x02\x02\u0D9A\u0D9C\x03\x02\x02\x02\u0D9B\u0D90\x03\x02\x02\x02" +
		"\u0D9B\u0D9C\x03\x02\x02\x02\u0D9C\u0DA6\x03\x02\x02\x02\u0D9D\u0D9E\x07" +
		"\x9C\x02\x02\u0D9E\u0DA3\x05\xDCo\x02\u0D9F\u0DA0\x07\u0486\x02\x02\u0DA0" +
		"\u0DA2\x05\xDCo\x02\u0DA1\u0D9F\x03\x02\x02\x02\u0DA2\u0DA5\x03\x02\x02" +
		"\x02\u0DA3\u0DA1\x03\x02\x02\x02\u0DA3\u0DA4\x03\x02\x02\x02\u0DA4\u0DA7" +
		"\x03\x02\x02\x02\u0DA5\u0DA3\x03\x02\x02\x02\u0DA6\u0D9D\x03\x02\x02\x02" +
		"\u0DA6\u0DA7\x03\x02\x02\x02\u0DA7\xD1\x03\x02\x02\x02\u0DA8\u0DAA\x07" +
		"\x90\x02\x02\u0DA9\u0DAB\t1\x02\x02\u0DAA\u0DA9\x03\x02\x02\x02\u0DAA" +
		"\u0DAB\x03\x02\x02\x02\u0DAB\u0DAD\x03\x02\x02\x02\u0DAC\u0DAE\x07Y\x02" +
		"\x02\u0DAD\u0DAC\x03\x02\x02\x02\u0DAD\u0DAE\x03\x02\x02\x02\u0DAE\u0DAF" +
		"\x03\x02\x02\x02\u0DAF\u0DB5\x05\u0230\u0119\x02\u0DB0\u0DB1\x07\x83\x02" +
		"\x02\u0DB1\u0DB2\x07\u0484\x02\x02\u0DB2\u0DB3\x05\u026E\u0138\x02\u0DB3" +
		"\u0DB4\x07\u0485\x02\x02\u0DB4\u0DB6\x03\x02\x02\x02\u0DB5\u0DB0\x03\x02" +
		"\x02\x02\u0DB5\u0DB6\x03\x02\x02\x02\u0DB6\u0DC7\x03\x02\x02\x02\u0DB7" +
		"\u0DB8\x07\u0484\x02\x02\u0DB8\u0DB9\x05\u026E\u0138\x02\u0DB9\u0DBA\x07" +
		"\u0485\x02\x02\u0DBA\u0DBC\x03\x02\x02\x02\u0DBB\u0DB7\x03\x02\x02\x02" +
		"\u0DBB\u0DBC\x03\x02\x02\x02\u0DBC\u0DBD\x03\x02\x02\x02\u0DBD\u0DC8\x05" +
		"\xDAn\x02\u0DBE\u0DBF\x07\x9C\x02\x02\u0DBF\u0DC4\x05\xDCo\x02\u0DC0\u0DC1" +
		"\x07\u0486\x02\x02\u0DC1\u0DC3\x05\xDCo\x02\u0DC2\u0DC0\x03\x02\x02\x02" +
		"\u0DC3\u0DC6\x03\x02\x02\x02\u0DC4\u0DC2\x03\x02\x02\x02\u0DC4\u0DC5\x03" +
		"\x02\x02\x02\u0DC5\u0DC8\x03\x02\x02\x02\u0DC6\u0DC4\x03\x02\x02\x02\u0DC7" +
		"\u0DBB\x03\x02\x02\x02\u0DC7\u0DBE\x03\x02\x02\x02\u0DC8\xD3\x03\x02\x02" +
		"\x02\u0DC9\u0DCB\x05\u0106\x84\x02\u0DCA\u0DCC\x05\xE0q\x02\u0DCB\u0DCA" +
		"\x03\x02\x02\x02\u0DCB\u0DCC\x03\x02\x02\x02\u0DCC\u0E08\x03\x02\x02\x02" +
		"\u0DCD\u0DCF\x05\u0102\x82\x02\u0DCE\u0DD0\x05\xE0q\x02\u0DCF\u0DCE\x03" +
		"\x02\x02\x02\u0DCF\u0DD0\x03\x02\x02\x02\u0DD0\u0E08\x03\x02\x02\x02\u0DD1" +
		"\u0DD3\x05\u0108\x85\x02\u0DD2\u0DD4\x05\u010C\x87\x02\u0DD3\u0DD2\x03" +
		"\x02\x02\x02\u0DD4\u0DD5\x03\x02\x02\x02\u0DD5\u0DD3\x03\x02\x02\x02\u0DD5" +
		"\u0DD6\x03\x02\x02\x02\u0DD6\u0DDF\x03\x02\x02\x02\u0DD7\u0DD9\x07\xB6" +
		"\x02\x02\u0DD8\u0DDA\t2\x02\x02\u0DD9\u0DD8\x03\x02\x02\x02\u0DD9\u0DDA" +
		"\x03\x02\x02\x02\u0DDA\u0DDD\x03\x02\x02\x02\u0DDB\u0DDE\x05\u0106\x84" +
		"\x02\u0DDC\u0DDE\x05\u0102\x82\x02\u0DDD\u0DDB\x03\x02\x02\x02\u0DDD\u0DDC" +
		"\x03\x02\x02\x02\u0DDE\u0DE0\x03\x02\x02\x02\u0DDF\u0DD7\x03\x02\x02\x02" +
		"\u0DDF\u0DE0\x03\x02\x02\x02\u0DE0\u0DE2\x03\x02\x02\x02\u0DE1\u0DE3\x05" +
		"\xF2z\x02\u0DE2\u0DE1\x03\x02\x02\x02\u0DE2\u0DE3\x03\x02\x02\x02\u0DE3" +
		"\u0DE5\x03\x02\x02\x02\u0DE4\u0DE6\x05\u0130\x99\x02\u0DE5\u0DE4\x03\x02" +
		"\x02\x02\u0DE5\u0DE6\x03\x02\x02\x02\u0DE6\u0DE8\x03\x02\x02\x02\u0DE7" +
		"\u0DE9\x05\xE0q\x02\u0DE8\u0DE7\x03\x02\x02\x02\u0DE8\u0DE9\x03\x02\x02" +
		"\x02\u0DE9\u0E08\x03\x02\x02\x02\u0DEA\u0DEC\x05\u0104\x83\x02\u0DEB\u0DED" +
		"\x05\u010A\x86\x02\u0DEC\u0DEB\x03\x02\x02\x02\u0DED\u0DEE\x03\x02\x02" +
		"\x02\u0DEE\u0DEC\x03\x02\x02\x02\u0DEE\u0DEF\x03\x02\x02\x02\u0DEF\u0DF5" +
		"\x03\x02\x02\x02\u0DF0\u0DF2\x07\xB6\x02\x02\u0DF1\u0DF3\t2\x02\x02\u0DF2" +
		"\u0DF1\x03\x02\x02\x02\u0DF2\u0DF3\x03\x02\x02\x02\u0DF3\u0DF4\x03\x02" +
		"\x02\x02\u0DF4\u0DF6\x05\u0102\x82\x02\u0DF5\u0DF0\x03\x02\x02\x02\u0DF5" +
		"\u0DF6\x03\x02\x02\x02\u0DF6\u0DF8\x03\x02\x02\x02\u0DF7\u0DF9\x05\xF2" +
		"z\x02\u0DF8\u0DF7\x03\x02\x02\x02\u0DF8\u0DF9\x03\x02\x02\x02\u0DF9\u0DFB" +
		"\x03\x02\x02\x02\u0DFA\u0DFC\x05\u0130\x99\x02\u0DFB\u0DFA\x03\x02\x02" +
		"\x02\u0DFB\u0DFC\x03\x02\x02\x02\u0DFC\u0DFE\x03\x02\x02\x02\u0DFD\u0DFF" +
		"\x05\xE0q\x02\u0DFE\u0DFD\x03\x02\x02\x02\u0DFE\u0DFF\x03\x02\x02\x02" +
		"\u0DFF\u0E08\x03\x02\x02\x02\u0E00\u0E03\x05\u0108\x85\x02\u0E01\u0E02" +
		"\x07\u0486\x02\x02\u0E02\u0E04\x05\u010E\x88\x02\u0E03\u0E01\x03\x02\x02" +
		"\x02\u0E04\u0E05\x03\x02\x02\x02\u0E05\u0E03\x03\x02\x02\x02\u0E05\u0E06" +
		"\x03\x02\x02\x02\u0E06\u0E08\x03\x02\x02\x02\u0E07\u0DC9\x03\x02\x02\x02" +
		"\u0E07\u0DCD\x03\x02\x02\x02\u0E07\u0DD1\x03\x02\x02\x02\u0E07\u0DEA\x03" +
		"\x02\x02\x02\u0E07\u0E00\x03\x02\x02\x02\u0E08\xD5\x03\x02\x02\x02\u0E09" +
		"\u0E0C\x05\xEEx\x02\u0E0A\u0E0C\x05\xF0y\x02\u0E0B\u0E09\x03\x02\x02\x02" +
		"\u0E0B\u0E0A\x03\x02\x02\x02\u0E0C\xD7\x03\x02\x02\x02\u0E0D\u0E0E\x07" +
		"\xBE\x02\x02\u0E0E\u0E10\x07\u0484\x02\x02\u0E0F\u0E11\x05\u0276\u013C" +
		"\x02\u0E10\u0E0F\x03\x02\x02\x02\u0E10\u0E11\x03\x02\x02\x02\u0E11\u0E12" +
		"\x03\x02\x02\x02\u0E12\u0E1B\x07\u0485\x02\x02\u0E13\u0E14\x07\u0486\x02" +
		"\x02\u0E14\u0E16\x07\u0484\x02\x02\u0E15\u0E17\x05\u0276\u013C\x02\u0E16" +
		"\u0E15\x03\x02\x02\x02\u0E16\u0E17\x03\x02\x02\x02\u0E17\u0E18\x03\x02" +
		"\x02\x02\u0E18\u0E1A\x07\u0485\x02\x02\u0E19\u0E13\x03\x02\x02\x02\u0E1A" +
		"\u0E1D\x03\x02\x02\x02\u0E1B\u0E19\x03\x02\x02\x02\u0E1B\u0E1C\x03\x02" +
		"\x02\x02\u0E1C\xD9\x03\x02\x02\x02\u0E1D\u0E1B\x03\x02\x02\x02\u0E1E\u0E31" +
		"\x05\xD4k\x02\u0E1F\u0E20\t3\x02\x02\u0E20\u0E22\x07\u0484\x02\x02\u0E21" +
		"\u0E23\x05\u0276\u013C\x02\u0E22\u0E21\x03\x02\x02\x02\u0E22\u0E23\x03" +
		"\x02\x02\x02\u0E23\u0E24\x03\x02\x02\x02\u0E24\u0E2D\x07\u0485\x02\x02" +
		"\u0E25\u0E26\x07\u0486\x02\x02\u0E26\u0E28\x07\u0484\x02\x02\u0E27\u0E29" +
		"\x05\u0276\u013C\x02\u0E28\u0E27\x03\x02\x02\x02\u0E28\u0E29\x03\x02\x02" +
		"\x02\u0E29\u0E2A\x03\x02\x02\x02\u0E2A\u0E2C\x07\u0485\x02\x02\u0E2B\u0E25" +
		"\x03\x02\x02\x02\u0E2C\u0E2F\x03\x02\x02\x02\u0E2D\u0E2B\x03\x02\x02\x02" +
		"\u0E2D\u0E2E\x03\x02\x02\x02\u0E2E\u0E31\x03\x02\x02\x02\u0E2F\u0E2D\x03" +
		"\x02\x02\x02\u0E30\u0E1E\x03\x02\x02\x02\u0E30\u0E1F\x03\x02\x02\x02\u0E31" +
		"\xDB\x03\x02\x02\x02\u0E32\u0E33\x05\u0234\u011B\x02\u0E33\u0E36\x07\u047B" +
		"\x02\x02\u0E34\u0E37\x05\u02B6\u015C\x02\u0E35\u0E37\x07-\x02\x02\u0E36" +
		"\u0E34\x03\x02\x02\x02\u0E36\u0E35\x03\x02\x02\x02\u0E37\xDD\x03\x02\x02" +
		"\x02\u0E38\u0E3B\x05\u024E\u0128\x02\u0E39\u0E3B\x07\u04A0\x02\x02\u0E3A" +
		"\u0E38\x03\x02\x02\x02\u0E3A\u0E39\x03\x02\x02\x02\u0E3B\xDF\x03\x02\x02" +
		"\x02\u0E3C\u0E3D\x07C\x02\x02\u0E3D\u0E43\x07\xBA\x02\x02\u0E3E\u0E3F" +
		"\x07i\x02\x02\u0E3F\u0E40\x07R\x02\x02\u0E40\u0E41\x07\u0266\x02\x02\u0E41" +
		"\u0E43\x07\u0202\x02\x02\u0E42\u0E3C\x03\x02\x02\x02\u0E42\u0E3E\x03\x02" +
		"\x02\x02\u0E43\u0E45\x03\x02\x02\x02\u0E44\u0E46\x05\u028C\u0147\x02\u0E45" +
		"\u0E44\x03\x02\x02\x02\u0E45\u0E46\x03\x02\x02\x02\u0E46\xE1\x03\x02\x02" +
		"\x02\u0E47\u0E49\x07/\x02\x02\u0E48\u0E4A\x07l\x02\x02\u0E49\u0E48\x03" +
		"\x02\x02\x02\u0E49\u0E4A\x03\x02\x02\x02\u0E4A\u0E4C\x03\x02\x02\x02\u0E4B" +
		"\u0E4D\x07\u023C\x02\x02\u0E4C\u0E4B\x03\x02\x02\x02\u0E4C\u0E4D\x03\x02" +
		"\x02\x02\u0E4D\u0E4F\x03\x02\x02\x02\u0E4E\u0E50\x07P\x02\x02\u0E4F\u0E4E" +
		"\x03\x02\x02\x02\u0E4F\u0E50\x03\x02\x02\x02\u0E50\u0E51\x03\x02\x02\x02" +
		"\u0E51\u0E52\x07F\x02\x02\u0E52\u0E58\x05\u0230\u0119\x02\u0E53\u0E54" +
		"\x07\x83\x02\x02\u0E54\u0E55\x07\u0484\x02\x02\u0E55\u0E56\x05\u026E\u0138" +
		"\x02\u0E56\u0E57\x07\u0485\x02\x02\u0E57\u0E59\x03\x02\x02\x02\u0E58\u0E53" +
		"\x03\x02\x02\x02\u0E58\u0E59\x03\x02\x02\x02\u0E59\u0E5C\x03\x02\x02\x02" +
		"\u0E5A\u0E5B\x07\xC0\x02\x02\u0E5B\u0E5D\x05\u02B6\u015C\x02\u0E5C\u0E5A" +
		"\x03\x02\x02\x02\u0E5C\u0E5D\x03\x02\x02\x02\u0E5D\u0E5F\x03\x02\x02\x02" +
		"\u0E5E\u0E60\x05\xF2z\x02\u0E5F\u0E5E\x03\x02\x02\x02\u0E5F\u0E60\x03" +
		"\x02\x02\x02\u0E60\u0E63\x03\x02\x02\x02\u0E61\u0E62\x07e\x02\x02\u0E62" +
		"\u0E64\x05\u0132\x9A\x02\u0E63\u0E61\x03\x02\x02\x02\u0E63\u0E64\x03\x02" +
		"\x02\x02\u0E64\xE3\x03\x02\x02\x02\u0E65\u0E67\x07/\x02\x02\u0E66\u0E68" +
		"\x07l\x02\x02\u0E67\u0E66\x03\x02\x02\x02\u0E67\u0E68\x03\x02\x02\x02" +
		"\u0E68\u0E6A\x03\x02\x02\x02\u0E69\u0E6B\x07\u023C\x02\x02\u0E6A\u0E69" +
		"\x03\x02\x02\x02\u0E6A\u0E6B\x03\x02\x02\x02\u0E6B\u0E6D\x03\x02\x02\x02" +
		"\u0E6C\u0E6E\x07P\x02\x02\u0E6D\u0E6C\x03\x02\x02\x02\u0E6D\u0E6E\x03" +
		"\x02\x02\x02\u0E6E\u0E96\x03\x02\x02\x02\u0E6F\u0E72\x05\u0230\u0119\x02" +
		"\u0E70\u0E71\x07\u0483\x02\x02\u0E71\u0E73\x07\u0474\x02\x02\u0E72\u0E70" +
		"\x03\x02\x02\x02\u0E72\u0E73\x03\x02\x02\x02\u0E73\u0E7C\x03\x02\x02\x02" +
		"\u0E74\u0E75\x07\u0486\x02\x02\u0E75\u0E78\x05\u0230\u0119\x02\u0E76\u0E77" +
		"\x07\u0483\x02\x02\u0E77\u0E79\x07\u0474\x02\x02\u0E78\u0E76\x03\x02\x02" +
		"\x02\u0E78\u0E79\x03\x02\x02\x02\u0E79\u0E7B\x03\x02\x02\x02\u0E7A\u0E74" +
		"\x03\x02\x02\x02\u0E7B\u0E7E\x03\x02\x02\x02\u0E7C\u0E7A\x03\x02\x02\x02" +
		"\u0E7C\u0E7D\x03\x02\x02\x02\u0E7D\u0E7F\x03\x02\x02\x02\u0E7E\u0E7C\x03" +
		"\x02\x02\x02\u0E7F\u0E80\x07F\x02\x02\u0E80\u0E81\x05\xF6|\x02\u0E81\u0E97" +
		"\x03\x02\x02\x02\u0E82\u0E83\x07F\x02\x02\u0E83\u0E86\x05\u0230\u0119" +
		"\x02\u0E84\u0E85\x07\u0483\x02\x02\u0E85\u0E87\x07\u0474\x02\x02\u0E86" +
		"\u0E84\x03\x02\x02\x02\u0E86\u0E87\x03\x02\x02\x02\u0E87\u0E90\x03\x02" +
		"\x02\x02\u0E88\u0E89\x07\u0486\x02\x02\u0E89\u0E8C\x05\u0230\u0119\x02" +
		"\u0E8A\u0E8B\x07\u0483\x02\x02\u0E8B\u0E8D\x07\u0474\x02\x02\u0E8C\u0E8A" +
		"\x03\x02\x02\x02\u0E8C\u0E8D\x03\x02\x02\x02\u0E8D\u0E8F\x03\x02\x02\x02" +
		"\u0E8E\u0E88\x03\x02\x02\x02\u0E8F\u0E92\x03\x02\x02\x02\u0E90\u0E8E\x03" +
		"\x02\x02\x02\u0E90\u0E91\x03\x02\x02\x02\u0E91\u0E93\x03\x02\x02\x02\u0E92" +
		"\u0E90\x03\x02\x02\x02\u0E93\u0E94\x07\xBD\x02\x02\u0E94\u0E95\x05\xF6" +
		"|\x02\u0E95\u0E97\x03\x02\x02\x02\u0E96\u0E6F\x03\x02\x02\x02\u0E96\u0E82" +
		"\x03\x02\x02\x02\u0E97\u0E9A\x03\x02\x02\x02\u0E98\u0E99\x07\xC0\x02\x02" +
		"\u0E99\u0E9B\x05\u02B6\u015C\x02\u0E9A\u0E98\x03\x02\x02\x02\u0E9A\u0E9B" +
		"\x03\x02\x02\x02\u0E9B\xE5\x03\x02\x02\x02\u0E9C\u0E9D\x07\u01BC\x02\x02" +
		"\u0E9D\u0E9E\x05\u0230\u0119\x02\u0E9E\u0EA3\x07\u021E\x02\x02\u0E9F\u0EA1" +
		"\x07\x0E\x02\x02\u0EA0\u0E9F\x03\x02\x02\x02\u0EA0\u0EA1\x03\x02\x02\x02" +
		"\u0EA1\u0EA2\x03\x02\x02\x02\u0EA2\u0EA4\x05\u024E\u0128\x02\u0EA3\u0EA0" +
		"\x03\x02\x02\x02\u0EA3\u0EA4\x03\x02\x02\x02\u0EA4\xE7\x03\x02\x02\x02" +
		"\u0EA5\u0EA6\x07\u01BC\x02\x02\u0EA6\u0EA7\x05\u0230\u0119\x02\u0EA7\u0EA8" +
		"\x07\x89\x02\x02\u0EA8\u0EAF\x05\u024E\u0128\x02\u0EA9\u0EAA\x05\u02BE" +
		"\u0160\x02\u0EAA\u0EAB\x07\u0484\x02\x02\u0EAB\u0EAC\x05\u0278\u013D\x02" +
		"\u0EAC\u0EAD\x07\u0485\x02\x02\u0EAD\u0EB0\x03\x02\x02\x02\u0EAE\u0EB0" +
		"\t4\x02\x02\u0EAF\u0EA9\x03\x02\x02\x02\u0EAF\u0EAE\x03\x02\x02\x02\u0EB0" +
		"\u0EB3\x03\x02\x02\x02\u0EB1\u0EB2\x07\xC0\x02\x02\u0EB2\u0EB4\x05\u02B6" +
		"\u015C\x02\u0EB3\u0EB1\x03\x02\x02\x02\u0EB3\u0EB4\x03\x02\x02\x02\u0EB4" +
		"\u0EB7\x03\x02\x02\x02\u0EB5\u0EB6\x07e\x02\x02\u0EB6\u0EB8\x05\u0132" +
		"\x9A\x02\u0EB7\u0EB5\x03\x02\x02\x02\u0EB7\u0EB8\x03\x02\x02\x02\u0EB8" +
		"\xE9\x03\x02\x02\x02\u0EB9\u0EBA\x07\u01BC\x02\x02\u0EBA\u0EBB\x05\u0230" +
		"\u0119\x02\u0EBB\u0EBC\x07\x89\x02\x02\u0EBC\u0EBF\t5\x02\x02\u0EBD\u0EBE" +
		"\x07\xC0\x02\x02\u0EBE\u0EC0\x05\u02B6\u015C\x02\u0EBF\u0EBD\x03\x02\x02" +
		"\x02\u0EBF\u0EC0\x03\x02\x02\x02\u0EC0\u0EC3\x03\x02\x02\x02\u0EC1\u0EC2" +
		"\x07e\x02\x02\u0EC2\u0EC4\x05\u0132\x9A\x02\u0EC3\u0EC1\x03\x02\x02\x02" +
		"\u0EC3\u0EC4\x03\x02\x02\x02\u0EC4\xEB\x03\x02\x02\x02\u0EC5\u0EC6\x07" +
		"\u01BC\x02\x02\u0EC6\u0EC7\x05\u0230\u0119\x02\u0EC7\u0EC8\x07\u016B\x02" +
		"\x02\u0EC8\xED\x03\x02\x02\x02\u0EC9\u0ECB\x07\xBA\x02\x02\u0ECA\u0ECC" +
		"\x07l\x02\x02\u0ECB\u0ECA\x03\x02\x02\x02\u0ECB\u0ECC\x03\x02\x02\x02" +
		"\u0ECC\u0ECE\x03\x02\x02\x02\u0ECD\u0ECF\x07P\x02\x02\u0ECE\u0ECD\x03" +
		"\x02\x02\x02\u0ECE\u0ECF\x03\x02\x02\x02\u0ECF\u0ED0\x03\x02\x02\x02\u0ED0" +
		"\u0ED5\x05\u0230\u0119\x02\u0ED1\u0ED3\x07\x0E\x02\x02\u0ED2\u0ED1\x03" +
		"\x02\x02\x02\u0ED2\u0ED3\x03\x02\x02\x02\u0ED3\u0ED4\x03\x02\x02\x02\u0ED4" +
		"\u0ED6\x05\u024E\u0128\x02\u0ED5\u0ED2\x03\x02\x02\x02\u0ED5\u0ED6\x03" +
		"\x02\x02\x02\u0ED6\u0ED7\x03\x02\x02\x02\u0ED7\u0ED8\x07\x9C\x02\x02\u0ED8" +
		"\u0EDD\x05\xDCo\x02\u0ED9\u0EDA\x07\u0486\x02\x02\u0EDA\u0EDC\x05\xDC" +
		"o\x02\u0EDB\u0ED9\x03\x02\x02\x02\u0EDC\u0EDF\x03\x02\x02\x02\u0EDD\u0EDB" +
		"\x03\x02\x02\x02\u0EDD\u0EDE\x03\x02\x02\x02\u0EDE\u0EE2\x03\x02\x02\x02" +
		"\u0EDF\u0EDD\x03\x02\x02\x02\u0EE0\u0EE1\x07\xC0\x02\x02\u0EE1\u0EE3\x05" +
		"\u02B6\u015C\x02\u0EE2\u0EE0\x03\x02\x02\x02\u0EE2\u0EE3\x03\x02\x02\x02" +
		"\u0EE3\u0EE5\x03\x02\x02\x02\u0EE4\u0EE6\x05\xF2z\x02\u0EE5\u0EE4\x03" +
		"\x02\x02\x02\u0EE5\u0EE6\x03\x02\x02\x02\u0EE6\u0EE8\x03\x02\x02\x02\u0EE7" +
		"\u0EE9\x05\u0130\x99\x02\u0EE8\u0EE7\x03\x02\x02\x02\u0EE8\u0EE9\x03\x02" +
		"\x02\x02\u0EE9\xEF\x03\x02\x02\x02\u0EEA\u0EEC\x07\xBA\x02\x02\u0EEB\u0EED" +
		"\x07l\x02\x02\u0EEC\u0EEB\x03\x02\x02\x02\u0EEC\u0EED\x03\x02\x02\x02" +
		"\u0EED\u0EEF\x03\x02\x02\x02\u0EEE\u0EF0\x07P\x02\x02\u0EEF\u0EEE\x03" +
		"\x02\x02\x02\u0EEF\u0EF0\x03\x02\x02\x02\u0EF0\u0EF1\x03\x02\x02\x02\u0EF1" +
		"\u0EF2\x05\xF6|\x02\u0EF2\u0EF3\x07\x9C\x02\x02\u0EF3\u0EF8\x05\xDCo\x02" +
		"\u0EF4\u0EF5\x07\u0486\x02\x02\u0EF5\u0EF7\x05\xDCo\x02\u0EF6\u0EF4\x03" +
		"\x02\x02\x02\u0EF7\u0EFA\x03\x02\x02\x02\u0EF8\u0EF6\x03\x02\x02\x02\u0EF8" +
		"\u0EF9\x03\x02\x02\x02\u0EF9\u0EFD\x03\x02\x02\x02\u0EFA\u0EF8\x03\x02" +
		"\x02\x02\u0EFB\u0EFC\x07\xC0\x02\x02\u0EFC\u0EFE\x05\u02B6\u015C\x02\u0EFD" +
		"\u0EFB\x03\x02\x02\x02\u0EFD\u0EFE\x03\x02\x02\x02\u0EFE\xF1\x03\x02\x02" +
		"\x02\u0EFF\u0F00\x07~\x02\x02\u0F00\u0F01\x07\x16\x02\x02\u0F01\u0F06" +
		"\x05\xF4{\x02\u0F02\u0F03\x07\u0486\x02\x02\u0F03\u0F05\x05\xF4{\x02\u0F04" +
		"\u0F02\x03\x02\x02\x02\u0F05\u0F08\x03\x02\x02\x02\u0F06\u0F04\x03\x02" +
		"\x02\x02\u0F06\u0F07\x03\x02\x02\x02\u0F07\xF3\x03\x02\x02\x02\u0F08\u0F06" +
		"\x03\x02\x02\x02\u0F09\u0F0B\x05\u02B6\u015C\x02\u0F0A\u0F0C\t6\x02\x02" +
		"\u0F0B\u0F0A\x03\x02\x02\x02\u0F0B\u0F0C\x03\x02\x02\x02\u0F0C\xF5\x03" +
		"\x02\x02\x02\u0F0D\u0F12\x05\xF8}\x02\u0F0E\u0F0F\x07\u0486\x02\x02\u0F0F" +
		"\u0F11\x05\xF8}\x02\u0F10\u0F0E\x03\x02\x02\x02\u0F11\u0F14\x03\x02\x02" +
		"\x02\u0F12\u0F10\x03\x02\x02\x02\u0F12\u0F13\x03\x02\x02\x02\u0F13\xF7" +
		"\x03\x02\x02\x02\u0F14\u0F12\x03\x02\x02\x02\u0F15\u0F19\x05\xFA~\x02" +
		"\u0F16\u0F18\x05\u0100\x81\x02\u0F17\u0F16\x03\x02\x02\x02\u0F18\u0F1B" +
		"\x03\x02\x02\x02\u0F19\u0F17\x03\x02\x02\x02\u0F19\u0F1A\x03\x02\x02\x02" +
		"\u0F1A\u0F28\x03\x02\x02\x02\u0F1B\u0F19\x03\x02\x02\x02\u0F1C\u0F1D\x07" +
		"\u0484\x02\x02\u0F1D\u0F21\x05\xFA~\x02\u0F1E\u0F20\x05\u0100\x81\x02" +
		"\u0F1F\u0F1E\x03\x02\x02\x02\u0F20\u0F23\x03\x02\x02\x02\u0F21\u0F1F\x03" +
		"\x02\x02\x02\u0F21\u0F22\x03\x02\x02\x02\u0F22\u0F24\x03\x02\x02\x02\u0F23" +
		"\u0F21\x03\x02\x02\x02\u0F24\u0F25\x07\u0485\x02\x02\u0F25\u0F28\x03\x02" +
		"\x02\x02\u0F26\u0F28\x05\u0110\x89\x02\u0F27\u0F15\x03\x02\x02\x02\u0F27" +
		"\u0F1C\x03\x02\x02\x02\u0F27\u0F26\x03\x02\x02\x02\u0F28\xF9\x03\x02\x02" +
		"\x02\u0F29\u0F2F\x05\u0230\u0119\x02\u0F2A\u0F2B\x07\x83\x02\x02\u0F2B" +
		"\u0F2C\x07\u0484\x02\x02\u0F2C\u0F2D\x05\u026E\u0138\x02\u0F2D\u0F2E\x07" +
		"\u0485\x02\x02\u0F2E\u0F30\x03\x02\x02\x02\u0F2F\u0F2A\x03\x02\x02\x02" +
		"\u0F2F\u0F30\x03\x02\x02\x02\u0F30\u0F35\x03\x02\x02\x02\u0F31\u0F33\x07" +
		"\x0E\x02\x02\u0F32\u0F31\x03\x02\x02\x02\u0F32\u0F33\x03\x02\x02\x02\u0F33" +
		"\u0F34\x03\x02\x02\x02\u0F34\u0F36\x05\u024E\u0128\x02\u0F35\u0F32\x03" +
		"\x02\x02\x02\u0F35\u0F36\x03\x02\x02\x02\u0F36\u0F3F\x03\x02\x02\x02\u0F37" +
		"\u0F3C\x05\xFC\x7F\x02\u0F38\u0F39\x07\u0486\x02\x02\u0F39\u0F3B\x05\xFC" +
		"\x7F\x02\u0F3A\u0F38\x03\x02\x02\x02\u0F3B\u0F3E\x03\x02\x02\x02\u0F3C" +
		"\u0F3A\x03\x02\x02\x02\u0F3C\u0F3D\x03\x02\x02\x02\u0F3D\u0F40\x03\x02" +
		"\x02\x02\u0F3E\u0F3C\x03\x02\x02\x02\u0F3F\u0F37\x03\x02\x02\x02\u0F3F" +
		"\u0F40\x03\x02\x02\x02\u0F40\u0F52\x03\x02\x02\x02\u0F41\u0F47\x05\xD4" +
		"k\x02\u0F42\u0F43\x07\u0484\x02\x02\u0F43\u0F44\x05\xD4k\x02\u0F44\u0F45" +
		"\x07\u0485\x02\x02\u0F45\u0F47\x03\x02\x02\x02\u0F46\u0F41\x03\x02\x02" +
		"\x02\u0F46\u0F42\x03\x02\x02\x02\u0F47\u0F49\x03\x02\x02\x02\u0F48\u0F4A" +
		"\x07\x0E\x02\x02\u0F49\u0F48\x03\x02\x02\x02\u0F49\u0F4A\x03\x02\x02\x02" +
		"\u0F4A\u0F4B\x03\x02\x02\x02\u0F4B\u0F4C\x05\u024E\u0128\x02\u0F4C\u0F52" +
		"\x03\x02\x02\x02\u0F4D\u0F4E\x07\u0484\x02\x02\u0F4E\u0F4F\x05\xF6|\x02" +
		"\u0F4F\u0F50\x07\u0485\x02\x02\u0F50\u0F52\x03\x02\x02\x02\u0F51\u0F29" +
		"\x03\x02\x02\x02\u0F51\u0F46\x03\x02\x02\x02\u0F51\u0F4D\x03\x02\x02\x02" +
		"\u0F52\xFB\x03\x02\x02\x02\u0F53\u0F54\t7\x02\x02\u0F54\u0F57\t\x19\x02" +
		"\x02\u0F55\u0F56\x07C\x02\x02\u0F56\u0F58\x05\xFE\x80\x02\u0F57\u0F55" +
		"\x03\x02\x02\x02\u0F57\u0F58\x03\x02\x02\x02\u0F58\u0F59\x03\x02\x02\x02" +
		"\u0F59\u0F5A\x07\u0484\x02\x02\u0F5A\u0F5B\x05\u026E\u0138\x02\u0F5B\u0F5C" +
		"\x07\u0485\x02\x02\u0F5C\xFD\x03\x02\x02\x02\u0F5D\u0F63\x07\\\x02\x02" +
		"\u0F5E\u0F5F\x07~\x02\x02\u0F5F\u0F63\x07\x16\x02\x02\u0F60\u0F61\x07" +
		"K\x02\x02\u0F61\u0F63\x07\x16\x02\x02\u0F62\u0F5D\x03\x02\x02\x02\u0F62" +
		"\u0F5E\x03\x02\x02\x02";
	private static readonly _serializedATNSegment9: string =
		"\u0F62\u0F60\x03\x02\x02\x02\u0F63\xFF\x03\x02\x02\x02\u0F64\u0F66\t8" +
		"\x02\x02\u0F65\u0F64\x03\x02\x02\x02\u0F65\u0F66\x03\x02\x02\x02\u0F66" +
		"\u0F67\x03\x02\x02\x02\u0F67\u0F69\x07\\\x02\x02\u0F68\u0F6A\x07`\x02" +
		"\x02\u0F69\u0F68\x03\x02\x02\x02\u0F69\u0F6A\x03\x02\x02\x02\u0F6A\u0F6B" +
		"\x03\x02\x02\x02\u0F6B\u0F73\x05\xFA~\x02\u0F6C\u0F6D\x07x\x02\x02\u0F6D" +
		"\u0F74\x05\u02B6\u015C\x02\u0F6E\u0F6F\x07\xBD\x02\x02\u0F6F\u0F70\x07" +
		"\u0484\x02\x02\u0F70\u0F71\x05\u026E\u0138\x02\u0F71\u0F72\x07\u0485\x02" +
		"\x02\u0F72\u0F74\x03\x02\x02\x02\u0F73\u0F6C\x03\x02\x02\x02\u0F73\u0F6E" +
		"\x03\x02\x02\x02\u0F73\u0F74\x03\x02\x02\x02\u0F74\u0F97\x03\x02\x02\x02" +
		"\u0F75\u0F76\x07\xAD\x02\x02\u0F76\u0F79\x05\xFA~\x02\u0F77\u0F78\x07" +
		"x\x02\x02\u0F78\u0F7A\x05\u02B6\u015C\x02\u0F79\u0F77\x03\x02\x02\x02" +
		"\u0F79\u0F7A\x03\x02\x02\x02\u0F7A\u0F97\x03\x02\x02\x02\u0F7B\u0F7D\t" +
		"9\x02\x02\u0F7C\u0F7E\x07\x80\x02\x02\u0F7D\u0F7C\x03\x02\x02\x02\u0F7D" +
		"\u0F7E\x03\x02\x02\x02\u0F7E\u0F7F\x03\x02\x02\x02\u0F7F\u0F81\x07\\\x02" +
		"\x02\u0F80\u0F82\x07`\x02\x02\u0F81\u0F80\x03\x02\x02\x02\u0F81\u0F82" +
		"\x03\x02\x02\x02\u0F82\u0F83\x03\x02\x02\x02\u0F83\u0F8B\x05\xFA~\x02" +
		"\u0F84\u0F85\x07x\x02\x02\u0F85\u0F8C\x05\u02B6\u015C\x02\u0F86\u0F87" +
		"\x07\xBD\x02\x02\u0F87\u0F88\x07\u0484\x02\x02\u0F88\u0F89\x05\u026E\u0138" +
		"\x02\u0F89\u0F8A\x07\u0485\x02\x02\u0F8A\u0F8C\x03\x02\x02\x02\u0F8B\u0F84" +
		"\x03\x02\x02\x02\u0F8B\u0F86\x03\x02\x02\x02\u0F8C\u0F97\x03\x02\x02\x02" +
		"\u0F8D\u0F92\x07s\x02\x02\u0F8E\u0F90\t9\x02\x02\u0F8F\u0F91\x07\x80\x02" +
		"\x02\u0F90\u0F8F\x03\x02\x02\x02\u0F90\u0F91\x03\x02\x02\x02\u0F91\u0F93" +
		"\x03\x02\x02\x02\u0F92\u0F8E\x03\x02\x02\x02\u0F92\u0F93\x03\x02\x02\x02" +
		"\u0F93\u0F94\x03\x02\x02\x02\u0F94\u0F95\x07\\\x02\x02\u0F95\u0F97\x05" +
		"\xFA~\x02\u0F96\u0F65\x03\x02\x02\x02\u0F96\u0F75\x03\x02\x02\x02\u0F96" +
		"\u0F7B\x03\x02\x02\x02\u0F96\u0F8D\x03\x02\x02\x02\u0F97\u0101\x03\x02" +
		"\x02\x02\u0F98\u0F99\x07\u0484\x02\x02\u0F99\u0F9A\x05\u0106\x84\x02\u0F9A" +
		"\u0F9B\x07\u0485\x02\x02\u0F9B\u0FA1\x03\x02\x02\x02\u0F9C\u0F9D\x07\u0484" +
		"\x02\x02\u0F9D\u0F9E\x05\u0102\x82\x02\u0F9E\u0F9F\x07\u0485\x02\x02\u0F9F" +
		"\u0FA1\x03\x02\x02\x02\u0FA0\u0F98\x03\x02\x02\x02\u0FA0\u0F9C\x03\x02" +
		"\x02\x02\u0FA1\u0103\x03\x02\x02\x02\u0FA2\u0FA3\x07\u0484\x02\x02\u0FA3" +
		"\u0FA4\x05\u0108\x85\x02\u0FA4\u0FA5\x07\u0485\x02\x02\u0FA5\u0FAB\x03" +
		"\x02\x02\x02\u0FA6\u0FA7\x07\u0484\x02\x02\u0FA7\u0FA8\x05\u0104\x83\x02" +
		"\u0FA8\u0FA9\x07\u0485\x02\x02\u0FA9\u0FAB\x03\x02\x02\x02\u0FAA\u0FA2" +
		"\x03\x02\x02\x02\u0FAA\u0FA6\x03\x02\x02\x02\u0FAB\u0105\x03\x02\x02\x02" +
		"\u0FAC\u0FB0\x07\x9B\x02\x02\u0FAD\u0FAF\x05\u011A\x8E\x02\u0FAE\u0FAD" +
		"\x03\x02\x02\x02\u0FAF\u0FB2\x03\x02\x02\x02\u0FB0\u0FAE\x03\x02\x02\x02" +
		"\u0FB0\u0FB1\x03\x02\x02\x02\u0FB1\u0FB3\x03\x02\x02\x02\u0FB2\u0FB0\x03" +
		"\x02\x02\x02\u0FB3\u0FB5\x05\u011C\x8F\x02\u0FB4\u0FB6\x05\u0120\x91\x02" +
		"\u0FB5\u0FB4\x03\x02\x02\x02\u0FB5\u0FB6\x03\x02\x02\x02\u0FB6\u0FB8\x03" +
		"\x02\x02\x02\u0FB7\u0FB9\x05\u0126\x94\x02\u0FB8\u0FB7\x03\x02\x02\x02" +
		"\u0FB8\u0FB9\x03\x02\x02\x02\u0FB9\u0FBB\x03\x02\x02\x02\u0FBA\u0FBC\x05" +
		"\u0128\x95\x02\u0FBB\u0FBA\x03\x02\x02\x02\u0FBB\u0FBC\x03\x02\x02\x02" +
		"\u0FBC\u0FBE\x03\x02\x02\x02\u0FBD\u0FBF\x05\u012A\x96\x02\u0FBE\u0FBD" +
		"\x03\x02\x02\x02\u0FBE\u0FBF\x03\x02\x02\x02\u0FBF\u0FC1\x03\x02\x02\x02" +
		"\u0FC0\u0FC2\x05\u012C\x97\x02\u0FC1\u0FC0\x03\x02\x02\x02\u0FC1\u0FC2" +
		"\x03\x02\x02\x02\u0FC2\u0FC4\x03\x02\x02\x02\u0FC3\u0FC5\x05\xF2z\x02" +
		"\u0FC4\u0FC3\x03\x02\x02\x02\u0FC4\u0FC5\x03\x02\x02\x02\u0FC5\u0FC7\x03" +
		"\x02\x02\x02\u0FC6\u0FC8\x05\u0130\x99\x02\u0FC7\u0FC6\x03\x02\x02\x02" +
		"\u0FC7\u0FC8\x03\x02\x02\x02\u0FC8\u0FE7\x03\x02\x02\x02\u0FC9\u0FCD\x07" +
		"\x9B\x02\x02\u0FCA\u0FCC\x05\u011A\x8E\x02\u0FCB\u0FCA\x03\x02\x02\x02" +
		"\u0FCC\u0FCF\x03\x02\x02\x02\u0FCD\u0FCB\x03\x02\x02\x02\u0FCD\u0FCE\x03" +
		"\x02\x02\x02\u0FCE\u0FD0\x03\x02\x02\x02\u0FCF\u0FCD\x03\x02\x02\x02\u0FD0" +
		"\u0FD2\x05\u011C\x8F\x02\u0FD1\u0FD3\x05\u0126\x94\x02\u0FD2\u0FD1\x03" +
		"\x02\x02\x02\u0FD2\u0FD3\x03\x02\x02\x02\u0FD3\u0FD5\x03\x02\x02\x02\u0FD4" +
		"\u0FD6\x05\u0128\x95\x02\u0FD5\u0FD4\x03\x02\x02\x02\u0FD5\u0FD6\x03\x02" +
		"\x02\x02\u0FD6\u0FD8\x03\x02\x02\x02\u0FD7\u0FD9\x05\u012A\x96\x02\u0FD8" +
		"\u0FD7\x03\x02\x02\x02\u0FD8\u0FD9\x03\x02\x02\x02\u0FD9\u0FDB\x03\x02" +
		"\x02\x02\u0FDA\u0FDC\x05\u012C\x97\x02\u0FDB\u0FDA\x03\x02\x02\x02\u0FDB" +
		"\u0FDC\x03\x02\x02\x02\u0FDC\u0FDE\x03\x02\x02\x02\u0FDD\u0FDF\x05\xF2" +
		"z\x02\u0FDE\u0FDD\x03\x02\x02\x02\u0FDE\u0FDF\x03\x02\x02\x02\u0FDF\u0FE1" +
		"\x03\x02\x02\x02\u0FE0\u0FE2\x05\u0130\x99\x02\u0FE1\u0FE0\x03\x02\x02" +
		"\x02\u0FE1\u0FE2\x03\x02\x02\x02\u0FE2\u0FE4\x03\x02\x02\x02\u0FE3\u0FE5" +
		"\x05\u0120\x91\x02\u0FE4\u0FE3\x03\x02\x02\x02\u0FE4\u0FE5\x03\x02\x02" +
		"\x02\u0FE5\u0FE7\x03\x02\x02\x02\u0FE6\u0FAC\x03\x02\x02\x02\u0FE6\u0FC9" +
		"\x03\x02\x02\x02\u0FE7\u0107\x03\x02\x02\x02\u0FE8\u0FEC\x07\x9B\x02\x02" +
		"\u0FE9\u0FEB\x05\u011A\x8E\x02\u0FEA\u0FE9\x03\x02\x02\x02\u0FEB\u0FEE" +
		"\x03\x02\x02\x02\u0FEC\u0FEA\x03\x02\x02\x02\u0FEC\u0FED\x03\x02\x02\x02" +
		"\u0FED\u0FEF\x03\x02\x02\x02\u0FEE\u0FEC\x03\x02\x02\x02\u0FEF\u0FF1\x05" +
		"\u011C\x8F\x02\u0FF0\u0FF2\x05\u0126\x94\x02\u0FF1\u0FF0\x03\x02\x02\x02" +
		"\u0FF1\u0FF2\x03\x02\x02\x02\u0FF2\u0FF4\x03\x02\x02\x02\u0FF3\u0FF5\x05" +
		"\u0128\x95\x02\u0FF4\u0FF3\x03\x02\x02\x02\u0FF4\u0FF5\x03\x02\x02\x02" +
		"\u0FF5\u0FF7\x03\x02\x02\x02\u0FF6\u0FF8\x05\u012A\x96\x02\u0FF7\u0FF6" +
		"\x03\x02\x02\x02\u0FF7\u0FF8\x03\x02\x02\x02\u0FF8\u0FFA\x03\x02\x02\x02" +
		"\u0FF9\u0FFB\x05\u012C\x97\x02\u0FFA\u0FF9\x03\x02\x02\x02\u0FFA\u0FFB" +
		"\x03\x02\x02\x02\u0FFB\u0FFD\x03\x02\x02\x02\u0FFC\u0FFE\x05\xF2z\x02" +
		"\u0FFD\u0FFC\x03\x02\x02\x02\u0FFD\u0FFE\x03\x02\x02\x02\u0FFE\u1000\x03" +
		"\x02\x02\x02\u0FFF\u1001\x05\u0130\x99\x02\u1000\u0FFF\x03\x02\x02\x02" +
		"\u1000\u1001\x03\x02\x02\x02\u1001\u0109\x03\x02\x02\x02\u1002\u1004\x07" +
		"\xB6\x02\x02\u1003\u1005\t2\x02\x02\u1004\u1003\x03\x02\x02\x02\u1004" +
		"\u1005\x03\x02\x02\x02\u1005\u1006\x03\x02\x02\x02\u1006\u1007\x05\u0104" +
		"\x83\x02\u1007\u010B\x03\x02\x02\x02\u1008\u100A\x07\xB6\x02\x02\u1009" +
		"\u100B\t2\x02\x02\u100A\u1009\x03\x02\x02\x02\u100A\u100B\x03\x02\x02" +
		"\x02\u100B\u100E\x03\x02\x02\x02\u100C\u100F\x05\u0108\x85\x02\u100D\u100F" +
		"\x05\u0104\x83\x02\u100E\u100C\x03\x02\x02\x02\u100E\u100D\x03\x02\x02" +
		"\x02\u100F\u010D\x03\x02\x02\x02\u1010\u101F\x07`\x02\x02\u1011\u1020" +
		"\x05\u0108\x85\x02\u1012\u1020\x05\u0104\x83\x02\u1013\u1016\x07\u0484" +
		"\x02\x02\u1014\u1017\x05\u0108\x85\x02\u1015\u1017\x05\u0104\x83\x02\u1016" +
		"\u1014\x03\x02\x02\x02\u1016\u1015\x03\x02\x02\x02\u1017\u1018\x03\x02" +
		"\x02\x02\u1018\u101D\x07\u0485\x02\x02\u1019\u101B\x07\x0E\x02\x02\u101A" +
		"\u1019\x03\x02\x02\x02\u101A\u101B\x03\x02\x02\x02\u101B\u101C\x03\x02" +
		"\x02\x02\u101C\u101E\x05\u024E\u0128\x02\u101D\u101A\x03\x02\x02\x02\u101D" +
		"\u101E\x03\x02\x02\x02\u101E\u1020\x03\x02\x02\x02\u101F\u1011\x03\x02" +
		"\x02\x02\u101F\u1012\x03\x02\x02\x02\u101F\u1013\x03\x02\x02\x02\u1020" +
		"\u010F\x03\x02\x02\x02\u1021\u1022\x07\u0118\x02\x02\u1022\u1023\x07\u0484" +
		"\x02\x02\u1023\u1024\x07\u0493\x02\x02\u1024\u1025\x07\u0486\x02\x02\u1025" +
		"\u1026\x07\u0493\x02\x02\u1026\u1027\x07\u016F\x02\x02\u1027\u1028\x07" +
		"\u0484\x02\x02\u1028\u1029\x05\u0112\x8A\x02\u1029\u102A\x07\u0485\x02" +
		"\x02\u102A\u102F\x07\u0485\x02\x02\u102B\u102D\x07\x0E\x02\x02\u102C\u102B" +
		"\x03\x02\x02\x02\u102C\u102D\x03\x02\x02\x02\u102D\u102E\x03\x02\x02\x02" +
		"\u102E\u1030\x05\u024E\u0128\x02\u102F\u102C\x03\x02\x02\x02\u102F\u1030" +
		"\x03\x02\x02\x02\u1030\u0111\x03\x02\x02\x02\u1031\u1036\x05\u0114\x8B" +
		"\x02\u1032\u1033\x07\u0486\x02\x02\u1033\u1035\x05\u0114\x8B\x02\u1034" +
		"\u1032\x03\x02\x02\x02\u1035\u1038\x03\x02\x02\x02\u1036\u1034\x03\x02" +
		"\x02\x02\u1036\u1037\x03\x02\x02\x02\u1037\u0113\x03\x02\x02\x02\u1038" +
		"\u1036\x03\x02\x02\x02\u1039\u104A\x05\u0234\u011B\x02\u103A\u103B\x07" +
		"C\x02\x02\u103B\u104B\x07\u011E\x02\x02\u103C\u1048\x05\u0262\u0132\x02" +
		"\u103D\u103E\x07\u011F\x02\x02\u103E\u1040\x07\u0493\x02\x02\u103F\u1041" +
		"\x05\u0116\x8C\x02\u1040\u103F\x03\x02\x02\x02\u1040\u1041\x03\x02\x02" +
		"\x02\u1041\u1043\x03\x02\x02\x02\u1042\u1044\x05\u0118\x8D\x02\u1043\u1042" +
		"\x03\x02\x02\x02\u1043\u1044\x03\x02\x02\x02\u1044\u1049\x03\x02\x02\x02" +
		"\u1045\u1046\x07>\x02\x02\u1046\u1047\x07\u011F\x02\x02\u1047\u1049\x07" +
		"\u0493\x02\x02\u1048\u103D\x03\x02\x02\x02\u1048\u1045\x03\x02\x02\x02" +
		"\u1049\u104B\x03\x02\x02\x02\u104A\u103A\x03\x02\x02\x02\u104A\u103C\x03" +
		"\x02\x02\x02\u104B\u1057\x03\x02\x02\x02\u104C\u104E\x07\u011D\x02\x02" +
		"\u104D\u104F\x07\u011F\x02\x02\u104E\u104D\x03\x02\x02\x02\u104E\u104F" +
		"\x03\x02\x02\x02\u104F\u1050\x03\x02\x02\x02\u1050\u1051\x07\u0493\x02" +
		"\x02\u1051\u1052\x07\u016F\x02\x02\u1052\u1053\x07\u0484\x02\x02\u1053" +
		"\u1054\x05\u0112\x8A\x02\u1054\u1055\x07\u0485\x02\x02\u1055\u1057\x03" +
		"\x02\x02\x02\u1056\u1039\x03\x02\x02\x02\u1056\u104C\x03\x02\x02\x02\u1057" +
		"\u0115\x03\x02\x02\x02\u1058\u105D\x07v\x02\x02\u1059\u105D\x07\u019D" +
		"\x02\x02\u105A\u105B\x07-\x02\x02\u105B\u105D\x05\u027E\u0140\x02\u105C" +
		"\u1058\x03\x02\x02\x02\u105C\u1059\x03\x02\x02\x02\u105C\u105A\x03\x02" +
		"\x02\x02\u105D\u105E\x03\x02\x02\x02\u105E\u105F\x07x\x02\x02\u105F\u1060" +
		"\x07:\x02\x02\u1060\u0117\x03\x02\x02\x02\u1061\u1066\x07v\x02\x02\u1062" +
		"\u1066\x07\u019D\x02\x02\u1063\u1064\x07-\x02\x02\u1064\u1066\x05\u027E" +
		"\u0140\x02\u1065\u1061\x03\x02\x02\x02\u1065\u1062\x03\x02\x02\x02\u1065" +
		"\u1063\x03\x02\x02\x02\u1066\u1067\x03\x02\x02\x02\u1067\u1068\x07x\x02" +
		"\x02\u1068\u1069\x07\u019D\x02\x02\u1069\u0119\x03\x02\x02\x02\u106A\u1073" +
		"\t:\x02\x02\u106B\u1073\x07M\x02\x02\u106C\u1073\x07\xAD\x02\x02\u106D" +
		"\u1073\x07\xA8\x02\x02\u106E\u1073\x07\xA6\x02\x02\u106F\u1073\x07\u0276" +
		"\x02\x02\u1070\u1073\t;\x02\x02\u1071\u1073\x07\xA7\x02\x02\u1072\u106A" +
		"\x03\x02\x02\x02\u1072\u106B\x03\x02\x02\x02\u1072\u106C\x03\x02\x02\x02" +
		"\u1072\u106D\x03\x02\x02\x02\u1072\u106E\x03\x02\x02\x02\u1072\u106F\x03" +
		"\x02\x02\x02\u1072\u1070\x03\x02\x02\x02\u1072\u1071\x03\x02\x02\x02\u1073" +
		"\u011B\x03\x02\x02\x02\u1074\u1077\x07\u0474\x02\x02\u1075\u1077\x05\u011E" +
		"\x90\x02\u1076\u1074\x03\x02\x02\x02\u1076\u1075\x03\x02\x02\x02\u1077" +
		"\u107C\x03\x02\x02\x02\u1078\u1079\x07\u0486\x02\x02\u1079\u107B\x05\u011E" +
		"\x90\x02\u107A\u1078\x03\x02\x02\x02\u107B\u107E\x03\x02\x02\x02\u107C" +
		"\u107A\x03\x02\x02\x02\u107C\u107D\x03\x02\x02\x02\u107D\u011D\x03\x02" +
		"\x02\x02\u107E\u107C\x03\x02\x02\x02\u107F\u1080\x05\u022E\u0118\x02\u1080" +
		"\u1081\x07\u0483\x02\x02\u1081\u1082\x07\u0474\x02\x02\u1082\u109D\x03" +
		"\x02\x02\x02\u1083\u1088\x05\u0234\u011B\x02\u1084\u1086\x07\x0E\x02\x02" +
		"\u1085\u1084\x03\x02\x02\x02\u1085\u1086\x03\x02\x02\x02\u1086\u1087\x03" +
		"\x02\x02\x02\u1087\u1089\x05\u024E\u0128\x02\u1088\u1085\x03\x02\x02\x02" +
		"\u1088\u1089\x03\x02\x02\x02\u1089\u109D\x03\x02\x02\x02\u108A\u108F\x05" +
		"\u028E\u0148\x02\u108B\u108D\x07\x0E\x02\x02\u108C\u108B\x03\x02\x02\x02" +
		"\u108C\u108D\x03\x02\x02\x02\u108D\u108E\x03\x02\x02\x02\u108E\u1090\x05" +
		"\u024E\u0128\x02\u108F\u108C\x03\x02\x02\x02\u108F\u1090\x03\x02\x02\x02" +
		"\u1090\u109D\x03\x02\x02\x02\u1091\u1092\x07\u04A0\x02\x02\u1092\u1094" +
		"\x07\u046B\x02\x02\u1093\u1091\x03\x02\x02\x02\u1093\u1094\x03\x02\x02" +
		"\x02\u1094\u1095\x03\x02\x02\x02\u1095\u109A\x05\u02B6\u015C\x02\u1096" +
		"\u1098\x07\x0E\x02\x02\u1097\u1096\x03\x02\x02\x02\u1097\u1098\x03\x02" +
		"\x02\x02\u1098\u1099\x03\x02\x02\x02\u1099\u109B\x05\u024E\u0128\x02\u109A" +
		"\u1097\x03\x02\x02\x02\u109A\u109B\x03\x02\x02\x02\u109B\u109D\x03\x02" +
		"\x02\x02\u109C\u107F\x03\x02\x02\x02\u109C\u1083\x03\x02\x02\x02\u109C" +
		"\u108A\x03\x02\x02\x02\u109C\u1093\x03\x02\x02\x02\u109D\u011F\x03\x02" +
		"\x02\x02\u109E\u109F\x07Y\x02\x02\u109F\u10A4\x05\xDEp\x02\u10A0\u10A1" +
		"\x07\u0486\x02\x02\u10A1\u10A3\x05\xDEp\x02\u10A2\u10A0\x03\x02\x02\x02" +
		"\u10A3\u10A6\x03\x02\x02\x02\u10A4\u10A2\x03\x02\x02\x02\u10A4\u10A5\x03" +
		"\x02\x02\x02\u10A5\u10C3\x03\x02\x02\x02\u10A6\u10A4\x03\x02\x02\x02\u10A7" +
		"\u10A8\x07Y\x02\x02\u10A8\u10A9\x07\u0192\x02\x02\u10A9\u10C3\x07\u0493" +
		"\x02\x02\u10AA\u10AB\x07Y\x02\x02\u10AB\u10AC\x07\x81\x02\x02\u10AC\u10B0" +
		"\x07\u0493\x02\x02\u10AD\u10AE\x07\x1C\x02\x02\u10AE\u10AF\x07\x9C\x02" +
		"\x02\u10AF\u10B1\x05\u023C\u011F\x02\u10B0\u10AD\x03\x02\x02\x02\u10B0" +
		"\u10B1\x03\x02\x02\x02\u10B1\u10B8\x03\x02\x02\x02\u10B2\u10B4\t/\x02" +
		"\x02\u10B3\u10B5\x05\u0122\x92\x02\u10B4\u10B3\x03\x02\x02\x02\u10B5\u10B6" +
		"\x03\x02\x02\x02\u10B6\u10B4\x03\x02\x02\x02\u10B6\u10B7\x03\x02\x02\x02" +
		"\u10B7\u10B9\x03\x02\x02\x02\u10B8\u10B2\x03\x02\x02\x02\u10B8\u10B9\x03" +
		"\x02\x02\x02\u10B9\u10C0\x03\x02\x02\x02\u10BA\u10BC\x07g\x02\x02\u10BB" +
		"\u10BD\x05\u0124\x93\x02\u10BC\u10BB\x03\x02\x02\x02\u10BD\u10BE\x03\x02" +
		"\x02\x02\u10BE\u10BC\x03\x02\x02\x02\u10BE\u10BF\x03\x02\x02\x02\u10BF" +
		"\u10C1\x03\x02\x02\x02\u10C0\u10BA\x03\x02\x02\x02\u10C0\u10C1\x03\x02" +
		"\x02\x02\u10C1\u10C3\x03\x02\x02\x02\u10C2\u109E\x03\x02\x02\x02\u10C2" +
		"\u10A7\x03\x02\x02\x02\u10C2\u10AA\x03\x02\x02\x02\u10C3\u0121\x03\x02" +
		"\x02\x02\u10C4\u10C5\x07\xAF\x02\x02\u10C5\u10C6\x07\x16\x02\x02\u10C6" +
		"\u10D1\x07\u0493\x02\x02\u10C7\u10C9\x07|\x02\x02\u10C8\u10C7\x03\x02" +
		"\x02\x02\u10C8\u10C9\x03\x02\x02\x02\u10C9\u10CA\x03\x02\x02\x02\u10CA" +
		"\u10CB\x07;\x02\x02\u10CB\u10CC\x07\x16\x02\x02\u10CC\u10D1\x07\u0493" +
		"\x02\x02\u10CD\u10CE\x07<\x02\x02\u10CE\u10CF\x07\x16\x02\x02\u10CF\u10D1" +
		"\x07\u0493\x02\x02\u10D0\u10C4\x03\x02\x02\x02\u10D0\u10C8\x03\x02\x02" +
		"\x02\u10D0\u10CD\x03\x02\x02\x02\u10D1\u0123\x03\x02\x02\x02\u10D2\u10D3" +
		"\x07\xAB\x02\x02\u10D3\u10D4\x07\x16\x02\x02\u10D4\u10D9\x07\u0493\x02" +
		"\x02\u10D5\u10D6\x07\xAF\x02\x02\u10D6\u10D7\x07\x16\x02\x02\u10D7\u10D9" +
		"\x07\u0493\x02\x02\u10D8\u10D2\x03\x02\x02\x02\u10D8\u10D5\x03\x02\x02" +
		"\x02\u10D9\u0125\x03\x02\x02\x02\u10DA\u10DB\x07F\x02\x02\u10DB\u10DD" +
		"\x05\xF6|\x02\u10DC\u10DA\x03\x02\x02\x02\u10DC\u10DD\x03\x02\x02\x02" +
		"\u10DD\u10E0\x03\x02\x02\x02\u10DE\u10DF\x07\xC0\x02\x02\u10DF\u10E1\x05" +
		"\u02B6\u015C\x02\u10E0\u10DE\x03\x02\x02\x02\u10E0\u10E1\x03\x02\x02\x02" +
		"\u10E1\u0127\x03\x02\x02\x02\u10E2\u10E3\x07K\x02\x02\u10E3\u10E4\x07" +
		"\x16\x02\x02\u10E4\u10E9\x05\u012E\x98\x02\u10E5\u10E6\x07\u0486\x02\x02" +
		"\u10E6\u10E8\x05\u012E\x98\x02\u10E7\u10E5\x03\x02\x02\x02\u10E8\u10EB" +
		"\x03\x02\x02\x02\u10E9\u10E7\x03\x02\x02\x02\u10E9\u10EA\x03\x02\x02\x02" +
		"\u10EA\u10EE\x03\x02\x02\x02\u10EB\u10E9\x03\x02\x02\x02\u10EC\u10ED\x07" +
		"\xC2\x02\x02\u10ED\u10EF\x07\u025A\x02\x02\u10EE\u10EC\x03\x02\x02\x02" +
		"\u10EE\u10EF\x03\x02\x02\x02\u10EF\u0129\x03\x02\x02\x02\u10F0\u10F1\x07" +
		"L\x02\x02\u10F1\u10F2\x05\u02B6\u015C\x02\u10F2\u012B\x03\x02\x02\x02" +
		"\u10F3\u10F4\x07\u02AA\x02\x02\u10F4\u10F5\x05\u02A0\u0151\x02\u10F5\u10F6" +
		"\x07\x0E\x02\x02\u10F6\u10F7\x07\u0484\x02\x02\u10F7\u10F8\x05\u029E\u0150" +
		"\x02\u10F8\u1102\x07\u0485\x02\x02\u10F9\u10FA\x07\u0486\x02\x02\u10FA" +
		"\u10FB\x05\u02A0\u0151\x02\u10FB\u10FC\x07\x0E\x02\x02\u10FC\u10FD\x07" +
		"\u0484\x02\x02\u10FD\u10FE\x05\u029E\u0150\x02\u10FE\u10FF\x07\u0485\x02" +
		"\x02\u10FF\u1101\x03\x02\x02\x02\u1100\u10F9\x03\x02\x02\x02\u1101\u1104" +
		"\x03\x02\x02\x02\u1102\u1100\x03\x02\x02\x02\u1102\u1103\x03\x02\x02\x02" +
		"\u1103\u012D\x03\x02\x02\x02\u1104\u1102\x03\x02\x02\x02\u1105\u1107\x05" +
		"\u02B6\u015C\x02\u1106\u1108\t6\x02\x02\u1107\u1106\x03\x02\x02\x02\u1107" +
		"\u1108\x03\x02\x02\x02\u1108\u012F\x03\x02\x02\x02\u1109\u1114\x07e\x02" +
		"\x02\u110A\u110B\x05\u0132\x9A\x02\u110B\u110C\x07\u0486\x02\x02\u110C" +
		"\u110E\x03\x02\x02\x02\u110D\u110A\x03\x02\x02\x02\u110D\u110E\x03\x02" +
		"\x02\x02\u110E\u110F\x03\x02\x02\x02\u110F\u1115\x05\u0132\x9A\x02\u1110" +
		"\u1111\x05\u0132\x9A\x02\u1111\u1112\x07\u0217\x02\x02\u1112\u1113\x05" +
		"\u0132\x9A\x02\u1113\u1115\x03\x02\x02\x02\u1114\u110D\x03\x02\x02\x02" +
		"\u1114\u1110\x03\x02\x02\x02\u1115\u0131\x03\x02\x02\x02\u1116\u111A\x05" +
		"\u0254\u012B\x02\u1117\u111A\x05\u023A\u011E\x02\u1118\u111A\x05\u0250" +
		"\u0129\x02\u1119\u1116\x03\x02\x02\x02\u1119\u1117\x03\x02\x02\x02\u1119" +
		"\u1118\x03\x02\x02\x02\u111A\u0133\x03\x02\x02\x02\u111B\u111C\x07\u027A" +
		"\x02\x02\u111C\u1125\x07\u0292\x02\x02\u111D\u1122\x05\u014A\xA6\x02\u111E" +
		"\u111F\x07\u0486\x02\x02\u111F\u1121\x05\u014A\xA6\x02\u1120\u111E\x03" +
		"\x02\x02\x02\u1121\u1124\x03\x02\x02\x02\u1122\u1120\x03\x02\x02\x02\u1122" +
		"\u1123\x03\x02\x02\x02\u1123\u1126\x03\x02\x02\x02\u1124\u1122\x03\x02" +
		"\x02\x02\u1125\u111D\x03\x02\x02\x02\u1125\u1126\x03\x02\x02\x02\u1126" +
		"\u0135\x03\x02\x02\x02\u1127\u1129\x07\u015A\x02\x02\u1128\u112A\x07\u02AC" +
		"\x02\x02\u1129\u1128\x03\x02\x02\x02\u1129\u112A\x03\x02\x02\x02\u112A" +
		"\u0137\x03\x02\x02\x02\u112B\u112D\x07\u0173\x02\x02\u112C\u112E\x07\u02AC" +
		"\x02\x02\u112D\u112C\x03\x02\x02\x02\u112D\u112E\x03\x02\x02\x02\u112E" +
		"\u1134\x03\x02\x02\x02\u112F\u1131\x07\f\x02\x02\u1130\u1132\x07\u020C" +
		"\x02\x02\u1131\u1130\x03\x02\x02\x02\u1131\u1132\x03\x02\x02\x02\u1132" +
		"\u1133\x03\x02\x02\x02\u1133\u1135\x07\u0163\x02\x02\u1134\u112F\x03\x02" +
		"\x02\x02\u1134\u1135\x03\x02\x02\x02\u1135\u113A\x03\x02\x02\x02\u1136" +
		"\u1138\x07\u020C\x02\x02\u1137\u1136\x03\x02\x02\x02\u1137\u1138\x03\x02" +
		"\x02\x02\u1138\u1139\x03\x02\x02\x02\u1139\u113B\x07\x8D\x02\x02\u113A" +
		"\u1137\x03\x02\x02\x02\u113A\u113B\x03\x02\x02\x02\u113B\u0139\x03\x02" +
		"\x02\x02\u113C\u113E\x07\u0259\x02\x02\u113D\u113F\x07\u02AC\x02\x02\u113E" +
		"\u113D\x03\x02\x02\x02\u113E\u113F\x03\x02\x02\x02\u113F\u1145\x03\x02" +
		"\x02\x02\u1140\u1142\x07\f\x02\x02\u1141\u1143\x07\u020C\x02\x02\u1142" +
		"\u1141\x03\x02\x02\x02\u1142\u1143\x03\x02\x02\x02\u1143\u1144\x03\x02" +
		"\x02\x02\u1144\u1146\x07\u0163\x02\x02\u1145\u1140\x03\x02\x02\x02\u1145" +
		"\u1146\x03\x02\x02\x02\u1146\u114B\x03\x02\x02\x02\u1147\u1149\x07\u020C" +
		"\x02\x02\u1148\u1147\x03\x02\x02\x02\u1148\u1149\x03\x02\x02\x02\u1149" +
		"\u114A\x03\x02\x02\x02\u114A\u114C\x07\x8D\x02\x02\u114B\u1148\x03\x02" +
		"\x02\x02\u114B\u114C\x03\x02\x02\x02\u114C\u013B\x03\x02\x02\x02\u114D" +
		"\u114E\x07\u0260\x02\x02\u114E\u114F\x05\u024E\u0128\x02\u114F\u013D\x03" +
		"\x02\x02\x02\u1150\u1152\x07\u0259\x02\x02\u1151\u1153\x07\u02AC\x02\x02" +
		"\u1152\u1151\x03\x02\x02\x02\u1152\u1153\x03\x02\x02\x02\u1153\u1154\x03" +
		"\x02\x02\x02\u1154\u1156\x07\xB1\x02\x02\u1155\u1157\x07\u0260\x02\x02" +
		"\u1156\u1155\x03\x02\x02\x02\u1156\u1157\x03\x02\x02\x02\u1157\u1158\x03" +
		"\x02\x02\x02\u1158\u1159\x05\u024E\u0128\x02\u1159\u013F\x03\x02\x02\x02" +
		"\u115A\u115B\x07\x8D\x02\x02\u115B\u115C\x07\u0260\x02\x02\u115C\u115D" +
		"\x05\u024E\u0128\x02\u115D\u0141\x03\x02\x02\x02\u115E\u115F\x07i\x02" +
		"\x02\u115F\u1160\t<\x02\x02\u1160\u1165\x05\u014C\xA7\x02\u1161\u1162" +
		"\x07\u0486\x02\x02\u1162\u1164\x05\u014C\xA7\x02\u1163\u1161\x03\x02\x02" +
		"\x02\u1164\u1167\x03\x02\x02\x02\u1165\u1163\x03\x02\x02\x02\u1165\u1166" +
		"\x03\x02\x02\x02\u1166\u1169\x03\x02\x02\x02\u1167\u1165\x03\x02\x02\x02" +
		"\u1168\u116A\x05\u028A\u0146\x02\u1169\u1168\x03\x02\x02\x02\u1169\u116A" +
		"\x03\x02\x02\x02\u116A\u0143\x03\x02\x02\x02\u116B\u116C\x07\xB8\x02\x02" +
		"\u116C\u116D\x07\u02EF\x02\x02\u116D\u0145\x03\x02\x02\x02\u116E\u116F" +
		"\x07\x9C\x02\x02\u116F\u1170\x07\u0156\x02\x02\u1170\u1171\x07\u047B\x02" +
		"\x02\u1171\u1172\t\x1D\x02\x02\u1172\u0147\x03\x02\x02\x02\u1173\u1175" +
		"\x07\x9C\x02\x02\u1174\u1176\t=\x02\x02\u1175\u1174\x03\x02\x02\x02\u1175" +
		"\u1176\x03\x02\x02\x02\u1176\u1177\x03\x02\x02\x02\u1177\u1178\x07\u0292" +
		"\x02\x02\u1178\u117D\x05\u0150\xA9\x02\u1179\u117A\x07\u0486\x02\x02\u117A" +
		"\u117C\x05\u0150\xA9\x02\u117B\u1179\x03\x02\x02\x02\u117C\u117F\x03\x02" +
		"\x02\x02\u117D\u117B\x03\x02\x02\x02\u117D\u117E\x03\x02\x02\x02\u117E" +
		"\u0149\x03\x02\x02\x02\u117F\u117D\x03\x02\x02\x02\u1180\u1181\x07\xC2" +
		"\x02\x02\u1181\u1182\x07\u017B\x02\x02\u1182\u1188\x07\u026D\x02\x02\u1183" +
		"\u1184\x07\x89\x02\x02\u1184\u1188\x07\xC3\x02\x02\u1185\u1186\x07\x89" +
		"\x02\x02\u1186\u1188\x07\u021D\x02\x02\u1187\u1180\x03\x02\x02\x02\u1187" +
		"\u1183\x03\x02\x02\x02\u1187\u1185\x03\x02\x02\x02\u1188\u014B\x03\x02" +
		"\x02\x02\u1189\u118E\x05\u0230\u0119\x02\u118A\u118C\x07\x0E\x02\x02\u118B" +
		"\u118A\x03\x02\x02\x02\u118B\u118C\x03\x02\x02\x02\u118C\u118D\x03\x02" +
		"\x02\x02\u118D\u118F\x05\u024E\u0128\x02\u118E\u118B\x03\x02\x02\x02\u118E" +
		"\u118F\x03\x02\x02\x02\u118F\u1190\x03\x02\x02\x02\u1190\u1191\x05\u014E" +
		"\xA8\x02\u1191\u014D\x03\x02\x02\x02\u1192\u1194\x07\x89\x02\x02\u1193" +
		"\u1195\x07\u01DC\x02\x02\u1194\u1193\x03\x02\x02\x02\u1194\u1195\x03\x02" +
		"\x02\x02\u1195\u119B\x03\x02\x02\x02\u1196\u1198\x07l\x02\x02\u1197\u1196" +
		"\x03\x02\x02\x02\u1197\u1198\x03\x02\x02\x02\u1198\u1199\x03\x02\x02\x02" +
		"\u1199\u119B\x07\xC3\x02\x02\u119A\u1192\x03\x02\x02\x02\u119A\u1197\x03" +
		"\x02\x02\x02\u119B\u014F\x03\x02\x02\x02\u119C\u119D\x07\u01D2\x02\x02" +
		"\u119D\u119E\x07\u01DA\x02\x02\u119E\u11A4\x05\u0152\xAA\x02\u119F\u11A0" +
		"\x07\x89\x02\x02\u11A0\u11A4\x07\xC3\x02\x02\u11A1\u11A2\x07\x89\x02\x02" +
		"\u11A2\u11A4\x07\u021D\x02\x02\u11A3\u119C\x03\x02\x02\x02\u11A3\u119F" +
		"\x03\x02\x02\x02\u11A3\u11A1\x03\x02\x02\x02\u11A4\u0151\x03\x02\x02\x02" +
		"\u11A5\u11A6\x07\u0328\x02\x02\u11A6\u11AD\x07\x89\x02\x02\u11A7\u11A8" +
		"\x07\x89\x02\x02\u11A8\u11AD\x07\u0329\x02\x02\u11A9\u11AA\x07\x89\x02" +
		"\x02\u11AA\u11AD\x07\u032A\x02\x02\u11AB\u11AD\x07\u032B\x02\x02\u11AC" +
		"\u11A5\x03\x02\x02\x02\u11AC\u11A7\x03\x02\x02\x02\u11AC\u11A9\x03\x02" +
		"\x02\x02\u11AC\u11AB\x03\x02\x02\x02\u11AD\u0153\x03\x02\x02\x02\u11AE" +
		"\u11AF\x07\x1B\x02\x02\u11AF\u11B0\x07\u01E0\x02\x02\u11B0\u11B1\x07\xB1" +
		"\x02\x02\u11B1\u11B6\x05\u0166\xB4\x02\u11B2\u11B3\x07\u0486\x02\x02\u11B3" +
		"\u11B5\x05\u0166\xB4\x02\u11B4\u11B2\x03\x02\x02\x02\u11B5\u11B8\x03\x02" +
		"\x02\x02\u11B6\u11B4\x03\x02\x02\x02\u11B6\u11B7\x03\x02\x02\x02\u11B7" +
		"\u11BA\x03\x02\x02\x02\u11B8\u11B6\x03\x02\x02\x02\u11B9\u11BB\x05\u016E" +
		"\xB8\x02\u11BA\u11B9\x03\x02\x02\x02\u11BA\u11BB\x03\x02\x02\x02\u11BB" +
		"\u0155\x03\x02\x02\x02\u11BC\u11BD\x07\x1B\x02\x02\u11BD\u11BE\x07\u0250" +
		"\x02\x02\u11BE\u11BF\x07\u01AF\x02\x02\u11BF\u11C4\x05\u0170\xB9\x02\u11C0" +
		"\u11C1\x07\u0486\x02\x02\u11C1\u11C3\x05\u0170\xB9\x02\u11C2\u11C0\x03" +
		"\x02\x02\x02\u11C3\u11C6\x03\x02\x02\x02\u11C4\u11C2\x03\x02\x02\x02\u11C4" +
		"\u11C5\x03\x02\x02\x02\u11C5\u0157\x03\x02\x02\x02\u11C6\u11C4\x03\x02" +
		"\x02\x02\u11C7\u11C8\x07\x87\x02\x02\u11C8\u11C9\t>\x02\x02\u11C9\u11CE" +
		"\x07\u01DF\x02\x02\u11CA\u11CB\x07\xB1\x02\x02\u11CB\u11CF\x07\u0493\x02" +
		"\x02\u11CC\u11CD\x07\x11\x02\x02\u11CD\u11CF\x07\u0493\x02\x02\u11CE\u11CA" +
		"\x03\x02\x02\x02\u11CE\u11CC\x03\x02\x02\x02\u11CF\u0159\x03\x02\x02\x02" +
		"\u11D0\u11D1\x07\u0251\x02\x02\u11D1\u11D2\x07\u01E0\x02\x02\u11D2\u015B" +
		"\x03\x02\x02\x02\u11D3\u11D4\x07\u0251\x02\x02\u11D4\u11D6\x07\u026A\x02" +
		"\x02\u11D5\u11D7\x07\b\x02\x02\u11D6\u11D5\x03\x02\x02\x02\u11D6\u11D7" +
		"\x03\x02\x02\x02\u11D7\u11D9\x03\x02\x02\x02\u11D8\u11DA\x05\u016E\xB8" +
		"\x02\u11D9\u11D8\x03\x02\x02\x02\u11D9\u11DA\x03\x02\x02\x02\u11DA\u015D" +
		"\x03\x02\x02\x02\u11DB\u11DC\x07\u027A\x02\x02\u11DC\u11E5\x07\u026A\x02" +
		"\x02\u11DD\u11E2\x05\u0174\xBB\x02\u11DE\u11DF\x07\u0486\x02\x02\u11DF" +
		"\u11E1\x05\u0174\xBB\x02\u11E0\u11DE\x03\x02\x02\x02\u11E1\u11E4\x03\x02" +
		"\x02\x02\u11E2\u11E0\x03\x02\x02\x02\u11E2\u11E3\x03\x02\x02\x02\u11E3" +
		"\u11E6\x03\x02\x02\x02\u11E4\u11E2\x03\x02\x02\x02\u11E5\u11DD\x03\x02" +
		"\x02\x02\u11E5\u11E6\x03\x02\x02\x02\u11E6\u11E9\x03\x02\x02\x02\u11E7" +
		"\u11E8\x07\u029D\x02\x02\u11E8\u11EA\x05\u0176\xBC\x02\u11E9\u11E7\x03" +
		"\x02\x02\x02\u11E9\u11EA\x03\x02\x02\x02\u11EA\u11EE\x03\x02\x02\x02\u11EB" +
		"\u11ED\x05\u0178\xBD\x02\u11EC\u11EB\x03\x02\x02\x02\u11ED\u11F0\x03\x02" +
		"\x02\x02\u11EE\u11EC\x03\x02\x02\x02\u11EE\u11EF\x03\x02\x02\x02\u11EF" +
		"\u11F2\x03\x02\x02\x02\u11F0\u11EE\x03\x02\x02\x02\u11F1\u11F3\x05\u016E" +
		"\xB8\x02\u11F2\u11F1\x03\x02\x02\x02\u11F2\u11F3\x03\x02\x02\x02\u11F3" +
		"\u015F\x03\x02\x02\x02\u11F4\u11F5\x07\u0280\x02\x02\u11F5\u11FE\x07\u026A" +
		"\x02\x02\u11F6\u11FB\x05\u0174\xBB\x02\u11F7\u11F8\x07\u0486\x02\x02\u11F8" +
		"\u11FA\x05\u0174\xBB\x02\u11F9\u11F7\x03\x02\x02\x02\u11FA\u11FD\x03\x02" +
		"\x02\x02\u11FB\u11F9\x03\x02\x02\x02\u11FB\u11FC\x03\x02\x02\x02\u11FC" +
		"\u11FF\x03\x02\x02\x02\u11FD\u11FB\x03\x02\x02\x02\u11FE\u11F6\x03\x02" +
		"\x02\x02\u11FE\u11FF\x03\x02\x02\x02\u11FF\u0161\x03\x02\x02\x02\u1200" +
		"\u1201\x07\u027A\x02\x02\u1201\u1202\x07\u01BB\x02\x02\u1202\u0163\x03" +
		"\x02\x02\x02\u1203\u1204\x07\u0280\x02\x02\u1204\u1205\x07\u01BB\x02\x02" +
		"\u1205\u0165\x03\x02\x02\x02\u1206\u1207\x05\u0168\xB5\x02\u1207\u1208" +
		"\x07\u047B\x02\x02\u1208\u1209\x07\u0493\x02\x02\u1209\u1224\x03\x02\x02" +
		"\x02\u120A\u120B\x05\u016A\xB6\x02\u120B\u120C\x07\u047B\x02\x02\u120C" +
		"\u120D\x05\u0254\u012B\x02\u120D\u1224\x03\x02\x02\x02\u120E\u120F\x05" +
		"\u016C\xB7\x02\u120F\u1210\x07\u047B\x02\x02\u1210\u1211\t\x1D\x02\x02" +
		"\u1211\u1224\x03\x02\x02\x02\u1212\u1213";
	private static readonly _serializedATNSegment10: string =
		"\x07\u01E4\x02\x02\u1213\u1214\x07\u047B\x02\x02\u1214\u1224\x07\u0496" +
		"\x02\x02\u1215\u1216\x07\u01C3\x02\x02\u1216\u1217\x07\u047B\x02\x02\u1217" +
		"\u1220\x07\u0484\x02\x02\u1218\u121D\x05\u024E\u0128\x02\u1219\u121A\x07" +
		"\u0486\x02\x02\u121A\u121C\x05\u024E\u0128\x02\u121B\u1219\x03\x02\x02" +
		"\x02\u121C\u121F\x03\x02\x02\x02\u121D\u121B\x03\x02\x02\x02\u121D\u121E" +
		"\x03\x02\x02\x02\u121E\u1221\x03\x02\x02\x02\u121F\u121D\x03\x02\x02\x02" +
		"\u1220\u1218\x03\x02\x02\x02\u1220\u1221\x03\x02\x02\x02\u1221\u1222\x03" +
		"\x02\x02\x02\u1222\u1224\x07\u0485\x02\x02\u1223\u1206\x03\x02\x02\x02" +
		"\u1223\u120A\x03\x02\x02\x02\u1223\u120E\x03\x02\x02\x02\u1223\u1212\x03" +
		"\x02\x02\x02\u1223\u1215\x03\x02\x02\x02\u1224\u0167\x03\x02\x02\x02\u1225" +
		"\u1226\t?\x02\x02\u1226\u0169\x03\x02\x02\x02\u1227\u1228\t@\x02\x02\u1228" +
		"\u016B\x03\x02\x02\x02\u1229\u122A\tA\x02\x02\u122A\u016D\x03\x02\x02" +
		"\x02\u122B\u122C\x07C\x02\x02\u122C\u122D\x07\u0165\x02\x02\u122D\u122E" +
		"\x07\u0493\x02\x02\u122E\u016F\x03\x02\x02\x02\u122F\u1230\x07\u0249\x02" +
		"\x02\u1230\u1231\x07\u047B\x02\x02\u1231\u1232\x07\u0484\x02\x02\u1232" +
		"\u1233\x05\u026E\u0138\x02\u1233\u1234\x07\u0485\x02\x02\u1234\u1261\x03" +
		"\x02\x02\x02\u1235\u1236\x07\u024B\x02\x02\u1236\u1237\x07\u047B\x02\x02" +
		"\u1237\u1238\x07\u0484\x02\x02\u1238\u1239\x05\u026E\u0138\x02\u1239\u123A" +
		"\x07\u0485\x02\x02\u123A\u1261\x03\x02\x02\x02\u123B\u123C\x07\u024A\x02" +
		"\x02\u123C\u123D\x07\u047B\x02\x02\u123D\u123E\x07\u0484\x02\x02\u123E" +
		"\u123F\x05\u0270\u0139\x02\u123F\u1240\x07\u0485\x02\x02\u1240\u1261\x03" +
		"\x02\x02\x02\u1241\u1242\x07\u024C\x02\x02\u1242\u1243\x07\u047B\x02\x02" +
		"\u1243\u1244\x07\u0484\x02\x02\u1244\u1245\x05\u0270\u0139\x02\u1245\u1246" +
		"\x07\u0485\x02\x02\u1246\u1261\x03\x02\x02\x02\u1247\u1248\x07\u024E\x02" +
		"\x02\u1248\u1249\x07\u047B\x02\x02\u1249\u124A\x07\u0484\x02\x02\u124A" +
		"\u124B\x05\u027A\u013E\x02\u124B\u124C\x07\u0485\x02\x02\u124C\u1261\x03" +
		"\x02\x02\x02\u124D\u124E\x07\u024F\x02\x02\u124E\u124F\x07\u047B\x02\x02" +
		"\u124F\u1250\x07\u0484\x02\x02\u1250\u1251\x05\u027A\u013E\x02\u1251\u1252" +
		"\x07\u0485\x02\x02\u1252\u1261\x03\x02\x02\x02\u1253\u1254\x07\u024D\x02" +
		"\x02\u1254\u1255\x07\u047B\x02\x02\u1255\u1256\x07\u0484\x02\x02\u1256" +
		"\u125B\x05\u0172\xBA\x02\u1257\u1258\x07\u0486\x02\x02\u1258\u125A\x05" +
		"\u0172\xBA\x02\u1259\u1257\x03\x02\x02\x02\u125A\u125D\x03\x02\x02\x02" +
		"\u125B\u1259\x03\x02\x02\x02\u125B\u125C\x03\x02\x02\x02\u125C\u125E\x03" +
		"\x02\x02\x02\u125D\u125B\x03\x02\x02\x02\u125E\u125F\x07\u0485\x02\x02" +
		"\u125F\u1261\x03\x02\x02\x02\u1260\u122F\x03\x02\x02\x02\u1260\u1235\x03" +
		"\x02\x02\x02\u1260\u123B\x03\x02\x02\x02\u1260\u1241\x03\x02\x02\x02\u1260" +
		"\u1247\x03\x02\x02\x02\u1260\u124D\x03\x02\x02\x02\u1260\u1253\x03\x02" +
		"\x02\x02\u1261\u0171\x03\x02\x02\x02\u1262\u1263\x07\u0484\x02\x02\u1263" +
		"\u1264\x05\u0230\u0119\x02\u1264\u1265\x07\u0486\x02\x02\u1265\u1266\x05" +
		"\u0230\u0119\x02\u1266\u1267\x07\u0485\x02\x02\u1267\u0173\x03\x02\x02" +
		"\x02\u1268\u1269\tB\x02\x02\u1269\u0175\x03\x02\x02\x02\u126A\u126B\t" +
		"C\x02\x02\u126B\u126C\x07\u047B\x02\x02\u126C\u127D\x05\u017A\xBE\x02" +
		"\u126D\u126E\x07\u01E6\x02\x02\u126E\u126F\x07\u047B\x02\x02\u126F\u1270" +
		"\x07\u0493\x02\x02\u1270\u1271\x07\u0486\x02\x02\u1271\u1272\x07\u01E7" +
		"\x02\x02\u1272\u1273\x07\u047B\x02\x02\u1273\u127D\x05\u0254\u012B\x02" +
		"\u1274\u1275\x07\u0243\x02\x02\u1275\u1276\x07\u047B\x02\x02\u1276\u1277" +
		"\x07\u0493\x02\x02\u1277\u1278\x07\u0486\x02\x02\u1278\u1279\x07\u0244" +
		"\x02\x02\u1279\u127A\x07\u047B\x02\x02\u127A\u127D\x05\u0254\u012B\x02" +
		"\u127B\u127D\x07\u0274\x02\x02\u127C\u126A\x03\x02\x02\x02\u127C\u126D" +
		"\x03\x02\x02\x02\u127C\u1274\x03\x02\x02\x02\u127C\u127B\x03\x02\x02\x02" +
		"\u127D\u0177\x03\x02\x02\x02\u127E\u127F\x07\u029F\x02\x02\u127F\u1280" +
		"\x07\u047B\x02\x02\u1280\u128B\x07\u0493\x02\x02\u1281\u1282\x07\u022A" +
		"\x02\x02\u1282\u1283\x07\u047B\x02\x02\u1283\u128B\x07\u0493\x02\x02\u1284" +
		"\u1285\x07\u0189\x02\x02\u1285\u1286\x07\u047B\x02\x02\u1286\u128B\x07" +
		"\u0493\x02\x02\u1287\u1288\x07\u022E\x02\x02\u1288\u1289\x07\u047B\x02" +
		"\x02\u1289\u128B\x07\u0493\x02\x02\u128A\u127E\x03\x02\x02\x02\u128A\u1281" +
		"\x03\x02\x02\x02\u128A\u1284\x03\x02\x02\x02\u128A\u1287\x03\x02\x02\x02" +
		"\u128B\u0179\x03\x02\x02\x02\u128C\u1291\x05\u0246\u0124\x02\u128D\u128E" +
		"\x07\u0486\x02\x02\u128E\u1290\x05\u0246\u0124\x02\u128F\u128D\x03\x02" +
		"\x02\x02\u1290\u1293\x03\x02\x02\x02\u1291\u128F\x03\x02\x02\x02\u1291" +
		"\u1292\x03\x02\x02\x02\u1292\u1296\x03\x02\x02\x02\u1293\u1291\x03\x02" +
		"\x02\x02\u1294\u1296\x07\u0493\x02\x02\u1295\u128C\x03\x02\x02\x02\u1295" +
		"\u1294\x03\x02\x02\x02\u1296\u017B\x03\x02\x02\x02\u1297\u1298\x07\u02B1" +
		"\x02\x02\u1298\u1299\tD\x02\x02\u1299\u129B\x05\u0248\u0125\x02\u129A" +
		"\u129C\tE\x02\x02\u129B\u129A\x03\x02\x02\x02\u129B\u129C\x03\x02\x02" +
		"\x02\u129C\u017D\x03\x02\x02\x02\u129D\u129E\x07\u02B1\x02\x02\u129E\u129F" +
		"\x07\u0199\x02\x02\u129F\u12A5\x05\u0248\u0125\x02\u12A0\u12A3\x07\u0288" +
		"\x02\x02\u12A1\u12A2\x07C\x02\x02\u12A2\u12A4\x07\u0200\x02\x02\u12A3" +
		"\u12A1\x03\x02\x02\x02\u12A3\u12A4\x03\x02\x02\x02\u12A4\u12A6\x03\x02" +
		"\x02\x02\u12A5\u12A0\x03\x02\x02\x02\u12A5\u12A6\x03\x02\x02\x02\u12A6" +
		"\u017F\x03\x02\x02\x02\u12A7\u12A8\x07\u02B1\x02\x02\u12A8\u12A9\x07\u0233" +
		"\x02\x02\u12A9\u12AA\x05\u0248\u0125\x02\u12AA\u0181\x03\x02\x02\x02\u12AB" +
		"\u12AC\x07\u02B1\x02\x02\u12AC\u12AD\x07\u0173\x02\x02\u12AD\u12B0\x05" +
		"\u0248\u0125\x02\u12AE\u12AF\x07\u021B\x02\x02\u12AF\u12B1\x07\u022C\x02" +
		"\x02\u12B0\u12AE\x03\x02\x02\x02\u12B0\u12B1\x03\x02\x02\x02\u12B1\u0183" +
		"\x03\x02\x02\x02\u12B2\u12B3\x07\u02B1\x02\x02\u12B3\u12B4\x07\u0259\x02" +
		"\x02\u12B4\u12B5\x05\u0248\u0125\x02\u12B5\u0185\x03\x02\x02\x02\u12B6" +
		"\u12B7\x07\u02B1\x02\x02\u12B7\u12BA\x07\u023E\x02\x02\u12B8\u12B9\x07" +
		"#\x02\x02\u12B9\u12BB\x05\u0248\u0125\x02\u12BA\u12B8\x03\x02\x02\x02" +
		"\u12BA\u12BB\x03\x02\x02\x02\u12BB\u0187\x03\x02\x02\x02\u12BC\u12BD\x07" +
		"\u0233\x02\x02\u12BD\u12BE\x05\u024E\u0128\x02\u12BE\u12C1\x07F\x02\x02" +
		"\u12BF\u12C2\x07\u0493\x02\x02\u12C0\u12C2\x07\u04A0\x02\x02\u12C1\u12BF" +
		"\x03\x02\x02\x02\u12C1\u12C0\x03\x02\x02\x02\u12C2\u0189\x03\x02\x02\x02" +
		"\u12C3\u12C4\x07\u02CE\x02\x02\u12C4\u12C7\x05\u024E\u0128\x02\u12C5\u12C6" +
		"\x07\xBD\x02\x02\u12C6\u12C8\x05\u027C\u013F\x02\u12C7\u12C5\x03\x02\x02" +
		"\x02\u12C7\u12C8\x03\x02\x02\x02\u12C8\u018B\x03\x02\x02\x02\u12C9\u12CA" +
		"\tF\x02\x02\u12CA\u12CB\x07\u0233\x02\x02\u12CB\u12CC\x05\u024E\u0128" +
		"\x02\u12CC\u018D\x03\x02\x02\x02\u12CD\u12D0\x05\u0190\xC9\x02\u12CE\u12D0" +
		"\x05\x06\x04\x02\u12CF\u12CD\x03\x02\x02\x02\u12CF\u12CE\x03\x02\x02\x02" +
		"\u12D0\u018F\x03\x02\x02\x02\u12D1\u12D2\x05\u024E\u0128\x02\u12D2\u12D3" +
		"\x07\u048F\x02\x02\u12D3\u12D5\x03\x02\x02\x02\u12D4\u12D1\x03\x02\x02" +
		"\x02\u12D4\u12D5\x03\x02\x02\x02\u12D5\u12D6\x03\x02\x02\x02\u12D6\u12FD" +
		"\x07\u015A\x02\x02\u12D7\u12D8\x05\u01A4\xD3\x02\u12D8\u12D9\x07\u0487" +
		"\x02\x02\u12D9\u12DB\x03\x02\x02\x02\u12DA\u12D7\x03\x02\x02\x02\u12DB" +
		"\u12DE\x03\x02\x02\x02\u12DC\u12DA\x03\x02\x02\x02\u12DC\u12DD\x03\x02" +
		"\x02\x02\u12DD\u12E4\x03\x02\x02\x02\u12DE\u12DC\x03\x02\x02\x02\u12DF" +
		"\u12E0\x05\u01A6\xD4\x02\u12E0\u12E1\x07\u0487\x02\x02\u12E1\u12E3\x03" +
		"\x02\x02\x02\u12E2\u12DF\x03\x02\x02\x02\u12E3\u12E6\x03\x02\x02\x02\u12E4" +
		"\u12E2\x03\x02\x02\x02\u12E4\u12E5\x03\x02\x02\x02\u12E5\u12EC\x03\x02" +
		"\x02\x02\u12E6\u12E4\x03\x02\x02\x02\u12E7\u12E8\x05\u01A8\xD5\x02\u12E8" +
		"\u12E9\x07\u0487\x02\x02\u12E9\u12EB\x03\x02\x02\x02\u12EA\u12E7\x03\x02" +
		"\x02\x02\u12EB\u12EE\x03\x02\x02\x02\u12EC\u12EA\x03\x02\x02\x02\u12EC" +
		"\u12ED\x03\x02\x02\x02\u12ED\u12F4\x03\x02\x02\x02\u12EE\u12EC\x03\x02" +
		"\x02\x02\u12EF\u12F0\x05\u01AA\xD6\x02\u12F0\u12F1\x07\u0487\x02\x02\u12F1" +
		"\u12F3\x03\x02\x02\x02\u12F2\u12EF\x03\x02\x02\x02\u12F3\u12F6\x03\x02" +
		"\x02\x02\u12F4\u12F2\x03\x02\x02\x02\u12F4\u12F5\x03\x02\x02\x02\u12F5" +
		"\u12FA\x03\x02\x02\x02\u12F6\u12F4\x03\x02\x02\x02\u12F7\u12F9\x05\u01AE" +
		"\xD8\x02\u12F8\u12F7\x03\x02\x02\x02\u12F9\u12FC\x03\x02\x02\x02\u12FA" +
		"\u12F8\x03\x02\x02\x02\u12FA\u12FB\x03\x02\x02\x02\u12FB\u12FE\x03\x02" +
		"\x02\x02\u12FC\u12FA\x03\x02\x02\x02\u12FD\u12DC\x03\x02\x02\x02\u12FD" +
		"\u12FE\x03\x02\x02\x02\u12FE\u12FF\x03\x02\x02\x02\u12FF\u1301\x07\u0199" +
		"\x02\x02\u1300\u1302\x05\u024E\u0128\x02\u1301\u1300\x03\x02\x02\x02\u1301" +
		"\u1302\x03\x02\x02\x02\u1302\u0191\x03\x02\x02\x02\u1303\u1306\x07\x19" +
		"\x02\x02\u1304\u1307\x05\u024E\u0128\x02\u1305\u1307\x05\u02B6\u015C\x02" +
		"\u1306\u1304\x03\x02\x02\x02\u1306\u1305\x03\x02\x02\x02\u1306\u1307\x03" +
		"\x02\x02\x02\u1307\u1309\x03\x02\x02\x02\u1308\u130A\x05\u01B0\xD9\x02" +
		"\u1309\u1308\x03\x02\x02\x02\u130A\u130B\x03\x02\x02\x02\u130B\u1309\x03" +
		"\x02\x02\x02\u130B\u130C\x03\x02\x02\x02\u130C\u1313\x03\x02\x02\x02\u130D" +
		"\u130F\x078\x02\x02\u130E\u1310\x05\u01AE\xD8\x02\u130F\u130E\x03\x02" +
		"\x02\x02\u1310\u1311\x03\x02\x02\x02\u1311\u130F\x03\x02\x02\x02\u1311" +
		"\u1312\x03\x02\x02\x02\u1312\u1314\x03\x02\x02\x02\u1313\u130D\x03\x02" +
		"\x02\x02\u1313\u1314\x03\x02\x02\x02\u1314\u1315\x03\x02\x02\x02\u1315" +
		"\u1316\x07\u0199\x02\x02\u1316\u1317\x07\x19\x02\x02\u1317\u0193\x03\x02" +
		"\x02\x02\u1318\u1319\x07O\x02\x02\u1319\u131A\x05\u02B6\u015C\x02\u131A" +
		"\u131C\x07\xB0\x02\x02\u131B\u131D\x05\u01AE\xD8\x02\u131C\u131B\x03\x02" +
		"\x02\x02\u131D\u131E\x03\x02\x02\x02\u131E\u131C\x03\x02\x02\x02\u131E" +
		"\u131F\x03\x02\x02\x02\u131F\u1323\x03\x02\x02\x02\u1320\u1322\x05\u01B2" +
		"\xDA\x02\u1321\u1320\x03\x02\x02\x02\u1322\u1325\x03\x02\x02\x02\u1323" +
		"\u1321\x03\x02\x02\x02\u1323\u1324\x03\x02\x02\x02\u1324\u132C\x03\x02" +
		"\x02\x02\u1325\u1323\x03\x02\x02\x02\u1326\u1328\x078\x02\x02\u1327\u1329" +
		"\x05\u01AE\xD8\x02\u1328\u1327\x03\x02\x02\x02\u1329\u132A\x03\x02\x02" +
		"\x02\u132A\u1328\x03\x02\x02\x02\u132A\u132B\x03\x02\x02\x02\u132B\u132D" +
		"\x03\x02\x02\x02\u132C\u1326\x03\x02\x02\x02\u132C\u132D\x03\x02\x02\x02" +
		"\u132D\u132E\x03\x02\x02\x02\u132E\u132F\x07\u0199\x02\x02\u132F\u1330" +
		"\x07O\x02\x02\u1330\u0195\x03\x02\x02\x02\u1331\u1332\x07[\x02\x02\u1332" +
		"\u1333\x05\u024E\u0128\x02\u1333\u0197\x03\x02\x02\x02\u1334\u1335\x07" +
		"b\x02\x02\u1335\u1336\x05\u024E\u0128\x02\u1336\u0199\x03\x02\x02\x02" +
		"\u1337\u1338\x05\u024E\u0128\x02\u1338\u1339\x07\u048F\x02\x02\u1339\u133B" +
		"\x03\x02\x02\x02\u133A\u1337\x03\x02\x02\x02\u133A\u133B\x03\x02\x02\x02" +
		"\u133B\u133C\x03\x02\x02\x02\u133C\u133E\x07k\x02\x02\u133D\u133F\x05" +
		"\u01AE\xD8\x02\u133E\u133D\x03\x02\x02\x02\u133F\u1340\x03\x02\x02\x02" +
		"\u1340\u133E\x03\x02\x02\x02\u1340\u1341\x03\x02\x02\x02\u1341\u1342\x03" +
		"\x02\x02\x02\u1342\u1343\x07\u0199\x02\x02\u1343\u1345\x07k\x02\x02\u1344" +
		"\u1346\x05\u024E\u0128\x02\u1345\u1344\x03\x02\x02\x02\u1345\u1346\x03" +
		"\x02\x02\x02\u1346\u019B\x03\x02\x02\x02\u1347\u1348\x05\u024E\u0128\x02" +
		"\u1348\u1349\x07\u048F\x02\x02\u1349\u134B\x03\x02\x02\x02\u134A\u1347" +
		"\x03\x02\x02\x02\u134A\u134B\x03\x02\x02\x02\u134B\u134C\x03\x02\x02\x02" +
		"\u134C\u134E\x07\x8F\x02\x02\u134D\u134F\x05\u01AE\xD8\x02\u134E\u134D" +
		"\x03\x02\x02\x02\u134F\u1350\x03\x02\x02\x02\u1350\u134E\x03\x02\x02\x02" +
		"\u1350\u1351\x03\x02\x02\x02\u1351\u1352\x03\x02\x02\x02\u1352\u1353\x07" +
		"\u029D\x02\x02\u1353\u1354\x05\u02B6\u015C\x02\u1354\u1355\x07\u0199\x02" +
		"\x02\u1355\u1357\x07\x8F\x02\x02\u1356\u1358\x05\u024E\u0128\x02\u1357" +
		"\u1356\x03\x02\x02\x02\u1357\u1358\x03\x02\x02\x02\u1358\u019D\x03\x02" +
		"\x02\x02\u1359\u135A\x07\x95\x02\x02\u135A\u135B\x05\u02B6\u015C\x02\u135B" +
		"\u019F\x03\x02\x02\x02\u135C\u135D\x05\u024E\u0128\x02\u135D\u135E\x07" +
		"\u048F\x02\x02\u135E\u1360\x03\x02\x02\x02\u135F\u135C\x03\x02\x02\x02" +
		"\u135F\u1360\x03\x02\x02\x02\u1360\u1361\x03\x02\x02\x02\u1361\u1362\x07" +
		"\xC1\x02\x02\u1362\u1363\x05\u02B6\u015C\x02\u1363\u1365\x07\u0191\x02" +
		"\x02\u1364\u1366\x05\u01AE\xD8\x02\u1365\u1364\x03\x02\x02\x02\u1366\u1367" +
		"\x03\x02\x02\x02\u1367\u1365\x03\x02\x02\x02\u1367\u1368\x03\x02\x02\x02" +
		"\u1368\u1369\x03\x02\x02\x02\u1369\u136A\x07\u0199\x02\x02\u136A\u136C" +
		"\x07\xC1\x02\x02\u136B\u136D\x05\u024E\u0128\x02\u136C\u136B\x03\x02\x02" +
		"\x02\u136C\u136D\x03\x02\x02\x02\u136D\u01A1\x03\x02\x02\x02\u136E\u136F" +
		"\x07\u016B\x02\x02\u136F\u137E\x05\u024E\u0128\x02\u1370\u1375\x07B\x02" +
		"\x02\u1371\u1373\x07\u020B\x02\x02\u1372\u1371\x03\x02\x02\x02\u1372\u1373" +
		"\x03\x02\x02\x02\u1373\u1374\x03\x02\x02\x02\u1374\u1376\x07F\x02\x02" +
		"\u1375\u1372\x03\x02\x02\x02\u1375\u1376\x03\x02\x02\x02\u1376\u1377\x03" +
		"\x02\x02\x02\u1377\u1378\x05\u024E\u0128\x02\u1378\u1379\x07Y\x02\x02" +
		"\u1379\u137A\x05\u026E\u0138\x02\u137A\u137E\x03\x02\x02\x02\u137B\u137C" +
		"\x07\u021E\x02\x02\u137C\u137E\x05\u024E\u0128\x02\u137D\u136E\x03\x02" +
		"\x02\x02\u137D\u1370\x03\x02\x02\x02\u137D\u137B\x03\x02\x02\x02\u137E" +
		"\u01A3\x03\x02\x02\x02\u137F\u1380\x07,\x02\x02\u1380\u1381\x05\u026E" +
		"\u0138\x02\u1381\u1384\x05\u0262\u0132\x02\u1382\u1383\x07-\x02\x02\u1383" +
		"\u1385\x05\u02B6\u015C\x02\u1384\u1382\x03\x02\x02\x02\u1384\u1385\x03" +
		"\x02\x02\x02\u1385\u01A5\x03\x02\x02\x02\u1386\u1387\x07,\x02\x02\u1387" +
		"\u1388\x05\u024E\u0128\x02\u1388\u1389\x07 \x02\x02\u1389\u1390\x07C\x02" +
		"\x02\u138A\u1391\x05\u0254\u012B\x02\u138B\u138D\x07\xA4\x02\x02\u138C" +
		"\u138E\x07\u02A3\x02\x02\u138D\u138C\x03\x02\x02\x02\u138D\u138E\x03\x02" +
		"\x02\x02\u138E\u138F\x03\x02\x02\x02\u138F\u1391\x07\u0493\x02\x02\u1390" +
		"\u138A\x03\x02\x02\x02\u1390\u138B\x03\x02\x02\x02\u1391\u01A7\x03\x02" +
		"\x02\x02\u1392\u1393\x07,\x02\x02\u1393\u1394\x05\u024E\u0128\x02\u1394" +
		"\u1395\x07)\x02\x02\u1395\u1396\x07C\x02\x02\u1396\u1397\x05\xD4k\x02" +
		"\u1397\u01A9\x03\x02\x02\x02\u1398\u1399\x07,\x02\x02\u1399\u139A\tG\x02" +
		"\x02\u139A\u139B\x07\u01BC\x02\x02\u139B\u139C\x07C\x02\x02\u139C\u13A1" +
		"\x05\u01AC\xD7\x02\u139D\u139E\x07\u0486\x02\x02\u139E\u13A0\x05\u01AC" +
		"\xD7\x02\u139F\u139D\x03\x02\x02\x02\u13A0\u13A3\x03\x02\x02\x02\u13A1" +
		"\u139F\x03\x02\x02\x02\u13A1\u13A2\x03\x02\x02\x02\u13A2\u13A4\x03\x02" +
		"\x02\x02\u13A3\u13A1\x03\x02\x02\x02\u13A4\u13A5\x05\u018E\xC8\x02\u13A5" +
		"\u01AB\x03\x02\x02\x02\u13A6\u13B2\x05\u0254\u012B\x02\u13A7\u13A9\x07" +
		"\xA4\x02\x02\u13A8\u13AA\x07\u02A3\x02\x02\u13A9\u13A8\x03\x02\x02\x02" +
		"\u13A9\u13AA\x03\x02\x02\x02\u13AA\u13AB\x03\x02\x02\x02\u13AB\u13B2\x07" +
		"\u0493\x02\x02\u13AC\u13B2\x05\u024E\u0128\x02\u13AD\u13B2\x07\xA5\x02" +
		"\x02\u13AE\u13AF\x07t\x02\x02\u13AF\u13B2\x07\u01B5\x02\x02\u13B0\u13B2" +
		"\x07\xA3\x02\x02\u13B1\u13A6\x03\x02\x02\x02\u13B1\u13A7\x03\x02\x02\x02" +
		"\u13B1\u13AC\x03\x02\x02\x02\u13B1\u13AD\x03\x02\x02\x02\u13B1\u13AE\x03" +
		"\x02\x02\x02\u13B1\u13B0\x03\x02\x02\x02\u13B2\u01AD\x03\x02\x02\x02\u13B3" +
		"\u13B6\x05\x16\f\x02\u13B4\u13B6\x05\x06\x04\x02\u13B5\u13B3\x03\x02\x02" +
		"\x02\u13B5\u13B4\x03\x02\x02\x02\u13B6\u13B7\x03\x02\x02\x02\u13B7\u13B8" +
		"\x07\u0487\x02\x02\u13B8\u01AF\x03\x02\x02\x02\u13B9\u13BC\x07\xBF\x02" +
		"\x02\u13BA\u13BD\x05\u0260\u0131\x02\u13BB\u13BD\x05\u02B6\u015C\x02\u13BC" +
		"\u13BA\x03\x02\x02\x02\u13BC\u13BB\x03\x02\x02\x02\u13BD\u13BE\x03\x02" +
		"\x02\x02\u13BE\u13C0\x07\xB0\x02\x02\u13BF\u13C1\x05\u01AE\xD8\x02\u13C0" +
		"\u13BF\x03\x02\x02\x02\u13C1\u13C2\x03\x02\x02\x02\u13C2\u13C0\x03\x02" +
		"\x02\x02\u13C2\u13C3\x03\x02\x02\x02\u13C3\u01B1\x03\x02\x02\x02\u13C4" +
		"\u13C5\x079\x02\x02\u13C5\u13C6\x05\u02B6\u015C\x02\u13C6\u13C8\x07\xB0" +
		"\x02\x02\u13C7\u13C9\x05\u01AE\xD8\x02\u13C8\u13C7\x03\x02\x02\x02\u13C9" +
		"\u13CA\x03\x02\x02\x02\u13CA\u13C8\x03\x02\x02\x02\u13CA\u13CB\x03\x02" +
		"\x02\x02\u13CB\u01B3\x03\x02\x02\x02\u13CC\u13CD\x07\t\x02\x02\u13CD\u13CE" +
		"\x07\u029F\x02\x02\u13CE\u13D3\x05\u01C8\xE5\x02\u13CF\u13D0\x07\u0486" +
		"\x02\x02\u13D0\u13D2\x05\u01C8\xE5\x02\u13D1\u13CF\x03\x02\x02\x02\u13D2" +
		"\u13D5\x03\x02\x02\x02\u13D3\u13D1\x03\x02\x02\x02\u13D3\u13D4\x03\x02" +
		"\x02\x02\u13D4\u1409\x03\x02\x02\x02\u13D5\u13D3\x03\x02\x02\x02\u13D6" +
		"\u13D7\x07\t\x02\x02\u13D7\u13D9\x07\u029F\x02\x02\u13D8\u13DA\x05\u0284" +
		"\u0143\x02\u13D9\u13D8\x03\x02\x02\x02\u13D9\u13DA\x03\x02\x02\x02\u13DA" +
		"\u13DB\x03\x02\x02\x02\u13DB\u13E0\x05\u01CA\xE6\x02\u13DC\u13DD\x07\u0486" +
		"\x02\x02\u13DD\u13DF\x05\u01CA\xE6\x02\u13DE\u13DC\x03\x02\x02\x02\u13DF" +
		"\u13E2\x03\x02\x02\x02\u13E0\u13DE\x03\x02\x02\x02\u13E0\u13E1\x03\x02" +
		"\x02\x02\u13E1\u13F1\x03\x02\x02\x02\u13E2\u13E0\x03\x02\x02\x02\u13E3" +
		"\u13EF\x07\x91\x02\x02\u13E4\u13F0\x07\u0214\x02\x02\u13E5\u13EC\x05\u01CE" +
		"\xE8\x02\u13E6\u13E8\x07\f\x02\x02\u13E7\u13E6\x03\x02\x02\x02\u13E7\u13E8" +
		"\x03\x02\x02\x02\u13E8\u13E9\x03\x02\x02\x02\u13E9\u13EB\x05\u01CE\xE8" +
		"\x02\u13EA\u13E7\x03\x02\x02\x02\u13EB\u13EE\x03\x02\x02\x02\u13EC\u13EA" +
		"\x03\x02\x02\x02\u13EC\u13ED\x03\x02\x02\x02\u13ED\u13F0\x03\x02\x02\x02" +
		"\u13EE\u13EC\x03\x02\x02\x02\u13EF\u13E4\x03\x02\x02\x02\u13EF\u13E5\x03" +
		"\x02\x02\x02\u13F0\u13F2\x03\x02\x02\x02\u13F1\u13E3\x03\x02\x02\x02\u13F1" +
		"\u13F2\x03\x02\x02\x02\u13F2\u13F9\x03\x02\x02\x02\u13F3\u13F5\x07\xC2" +
		"\x02\x02\u13F4\u13F6\x05\u01D0\xE9\x02\u13F5\u13F4\x03\x02\x02\x02\u13F6" +
		"\u13F7\x03\x02\x02\x02\u13F7\u13F5\x03\x02\x02\x02\u13F7\u13F8\x03\x02" +
		"\x02\x02\u13F8\u13FA\x03\x02\x02\x02\u13F9\u13F3\x03\x02\x02\x02\u13F9" +
		"\u13FA\x03\x02\x02\x02\u13FA\u13FF\x03\x02\x02\x02\u13FB\u13FE\x05\u01D2" +
		"\xEA\x02\u13FC\u13FE\x05\u01D4\xEB\x02\u13FD\u13FB\x03\x02\x02\x02\u13FD" +
		"\u13FC\x03\x02\x02\x02\u13FE\u1401\x03\x02\x02\x02\u13FF\u13FD\x03\x02" +
		"\x02\x02\u13FF\u1400\x03\x02\x02\x02\u1400\u1406\x03\x02\x02\x02\u1401" +
		"\u13FF\x03\x02\x02\x02\u1402\u1403\x07\u0172\x02\x02\u1403\u1407\x07\u0493" +
		"\x02\x02\u1404\u1405\x07\x10\x02\x02\u1405\u1407\x07\u0493\x02\x02\u1406" +
		"\u1402\x03\x02\x02\x02\u1406\u1404\x03\x02\x02\x02\u1406\u1407\x03\x02" +
		"\x02\x02\u1407\u1409\x03\x02\x02\x02\u1408\u13CC\x03\x02\x02\x02\u1408" +
		"\u13D6\x03\x02\x02\x02\u1409\u01B5\x03\x02\x02\x02\u140A\u140B\x07$\x02" +
		"\x02\u140B\u140C\x07\u029F\x02\x02\u140C\u1411\x05\u01CA\xE6\x02\u140D" +
		"\u140E\x07\u0486\x02\x02\u140E\u1410\x05\u01CA\xE6\x02\u140F\u140D\x03" +
		"\x02\x02\x02\u1410\u1413\x03\x02\x02\x02\u1411\u140F\x03\x02\x02\x02\u1411" +
		"\u1412\x03\x02\x02\x02\u1412\u1447\x03\x02\x02\x02\u1413\u1411\x03\x02" +
		"\x02\x02\u1414\u1415\x07$\x02\x02\u1415\u1417\x07\u029F\x02\x02\u1416" +
		"\u1418\x05\u0286\u0144\x02\u1417\u1416\x03\x02\x02\x02\u1417\u1418\x03" +
		"\x02\x02\x02\u1418\u1419\x03\x02\x02\x02\u1419\u141E\x05\u01CA\xE6\x02" +
		"\u141A\u141B\x07\u0486\x02\x02\u141B\u141D\x05\u01CA\xE6\x02\u141C\u141A" +
		"\x03\x02\x02\x02\u141D\u1420\x03\x02\x02\x02\u141E\u141C\x03\x02\x02\x02" +
		"\u141E\u141F\x03\x02\x02\x02\u141F\u142F\x03\x02\x02\x02\u1420\u141E\x03" +
		"\x02\x02\x02\u1421\u142D\x07\x91\x02\x02\u1422\u142E\x07\u0214\x02\x02" +
		"\u1423\u142A\x05\u01CE\xE8\x02\u1424\u1426\x07\f\x02\x02\u1425\u1424\x03" +
		"\x02\x02\x02\u1425\u1426\x03\x02\x02\x02\u1426\u1427\x03\x02\x02\x02\u1427" +
		"\u1429\x05\u01CE\xE8\x02\u1428\u1425\x03\x02\x02\x02\u1429\u142C\x03\x02" +
		"\x02\x02\u142A\u1428\x03\x02\x02\x02\u142A\u142B\x03\x02\x02\x02\u142B" +
		"\u142E\x03\x02\x02\x02\u142C\u142A\x03\x02\x02\x02\u142D\u1422\x03\x02" +
		"\x02\x02\u142D\u1423\x03\x02\x02\x02\u142E\u1430\x03\x02\x02\x02\u142F" +
		"\u1421\x03\x02\x02\x02\u142F\u1430\x03\x02\x02\x02\u1430\u1437\x03\x02" +
		"\x02\x02\u1431\u1433\x07\xC2\x02\x02\u1432\u1434\x05\u01D0\xE9\x02\u1433" +
		"\u1432\x03\x02\x02\x02\u1434\u1435\x03\x02\x02\x02\u1435\u1433\x03\x02" +
		"\x02\x02\u1435\u1436\x03\x02\x02\x02\u1436\u1438\x03\x02\x02\x02\u1437" +
		"\u1431\x03\x02\x02\x02\u1437\u1438\x03\x02\x02\x02\u1438\u143D\x03\x02" +
		"\x02\x02\u1439\u143C\x05\u01D2\xEA\x02\u143A\u143C\x05\u01D4\xEB\x02\u143B" +
		"\u1439\x03\x02\x02\x02\u143B\u143A\x03\x02\x02\x02\u143C\u143F\x03\x02" +
		"\x02\x02\u143D\u143B\x03\x02\x02\x02\u143D\u143E\x03\x02\x02\x02\u143E" +
		"\u1444\x03\x02\x02\x02\u143F\u143D\x03\x02\x02\x02\u1440\u1441\x07\u0172" +
		"\x02\x02\u1441\u1445\x07\u0493\x02\x02\u1442\u1443\x07\x10\x02\x02\u1443" +
		"\u1445\x07\u0493\x02\x02\u1444\u1440\x03\x02\x02\x02\u1444\u1442\x03\x02" +
		"\x02\x02\u1444\u1445\x03\x02\x02\x02\u1445\u1447\x03\x02\x02\x02\u1446" +
		"\u140A\x03\x02\x02\x02\u1446\u1414\x03\x02\x02\x02\u1447\u01B7\x03\x02" +
		"\x02\x02\u1448\u1449\x076\x02\x02\u1449\u144B\x07\u029F\x02\x02\u144A" +
		"\u144C\x05\u0284\u0143\x02\u144B\u144A\x03\x02\x02\x02\u144B\u144C\x03" +
		"\x02\x02\x02\u144C\u144D\x03\x02\x02\x02\u144D\u1452\x05\u0238\u011D\x02" +
		"\u144E\u144F\x07\u0486\x02\x02\u144F\u1451\x05\u0238\u011D\x02\u1450\u144E" +
		"\x03\x02\x02\x02\u1451\u1454\x03\x02\x02\x02\u1452\u1450\x03\x02\x02\x02" +
		"\u1452\u1453\x03\x02\x02\x02\u1453\u01B9\x03\x02\x02\x02\u1454\u1452\x03" +
		"\x02\x02\x02\u1455\u1456\x07J\x02\x02\u1456\u145B\x05\u01D6\xEC\x02\u1457" +
		"\u1458\x07\u0486\x02\x02\u1458\u145A\x05\u01D6\xEC\x02\u1459\u1457\x03" +
		"\x02\x02\x02\u145A\u145D\x03\x02\x02\x02\u145B\u1459\x03\x02\x02\x02\u145B" +
		"\u145C\x03\x02\x02\x02\u145C\u145E\x03\x02\x02\x02\u145D\u145B\x03\x02" +
		"\x02\x02\u145E\u1460\x07x\x02\x02\u145F\u1461\tH\x02\x02\u1460\u145F\x03" +
		"\x02\x02\x02\u1460\u1461\x03\x02\x02\x02\u1461\u1462\x03\x02\x02\x02\u1462" +
		"\u1463\x05\u01DA\xEE\x02\u1463\u1464\x07\xB1\x02\x02\u1464\u1469\x05\u01CA" +
		"\xE6\x02\u1465\u1466\x07\u0486\x02\x02\u1466\u1468\x05\u01CA\xE6\x02\u1467" +
		"\u1465\x03\x02\x02\x02\u1468\u146B\x03\x02\x02\x02\u1469\u1467\x03\x02" +
		"\x02\x02\u1469\u146A\x03\x02\x02\x02\u146A\u147A\x03\x02\x02\x02\u146B" +
		"\u1469\x03\x02\x02\x02\u146C\u1478\x07\x91\x02\x02\u146D\u1479\x07\u0214" +
		"\x02\x02\u146E\u1475\x05\u01CE\xE8\x02\u146F\u1471\x07\f\x02\x02\u1470" +
		"\u146F\x03\x02\x02\x02\u1470\u1471\x03\x02\x02\x02\u1471\u1472\x03\x02" +
		"\x02\x02\u1472\u1474\x05\u01CE\xE8\x02\u1473\u1470\x03\x02\x02\x02\u1474" +
		"\u1477\x03\x02\x02\x02\u1475\u1473\x03\x02\x02\x02\u1475\u1476\x03\x02" +
		"\x02\x02\u1476\u1479\x03\x02\x02\x02\u1477\u1475\x03\x02\x02\x02\u1478" +
		"\u146D\x03\x02\x02\x02\u1478\u146E\x03\x02\x02\x02\u1479\u147B\x03\x02" +
		"\x02\x02\u147A\u146C\x03\x02\x02\x02\u147A\u147B\x03\x02\x02\x02\u147B" +
		"\u1485\x03\x02\x02\x02\u147C\u1482\x07\xC2\x02\x02\u147D\u147E\x07J\x02" +
		"\x02\u147E\u1481\x07z\x02\x02\u147F\u1481\x05\u01D0\xE9\x02\u1480\u147D" +
		"\x03\x02\x02\x02\u1480\u147F\x03\x02\x02\x02\u1481\u1484\x03\x02\x02\x02" +
		"\u1482\u1480\x03\x02\x02\x02\u1482\u1483\x03\x02\x02\x02\u1483\u1486\x03" +
		"\x02\x02\x02\u1484\u1482\x03\x02\x02\x02\u1485\u147C\x03\x02\x02\x02\u1485" +
		"\u1486\x03\x02\x02\x02\u1486\u148D\x03\x02\x02\x02\u1487\u1488\x07\x0E" +
		"\x02\x02\u1488\u1489\x05\u0238\u011D\x02\u1489\u148A\x07\xC2\x02\x02\u148A" +
		"\u148B\x07\u0258\x02\x02\u148B\u148C\x05\u01BC\xDF\x02\u148C\u148E\x03" +
		"\x02\x02\x02\u148D\u1487\x03\x02\x02\x02\u148D\u148E\x03\x02\x02\x02\u148E" +
		"\u14B3\x03\x02\x02\x02\u148F\u1492\x07J\x02\x02\u1490\u1493\x05\u0238" +
		"\u011D\x02\u1491\u1493\x05\u024E\u0128\x02\u1492\u1490\x03\x02\x02\x02" +
		"\u1492\u1491\x03\x02\x02\x02\u1493\u149B\x03\x02\x02\x02\u1494\u1497\x07" +
		"\u0486\x02\x02\u1495\u1498\x05\u0238\u011D\x02\u1496\u1498\x05\u024E\u0128" +
		"\x02\u1497\u1495\x03\x02\x02\x02\u1497\u1496\x03\x02\x02\x02\u1498\u149A" +
		"\x03\x02\x02\x02\u1499\u1494\x03\x02\x02\x02\u149A\u149D\x03\x02\x02\x02" +
		"\u149B\u1499\x03\x02\x02\x02\u149B\u149C\x03\x02\x02\x02\u149C\u149E\x03" +
		"\x02\x02\x02\u149D\u149B\x03\x02\x02\x02\u149E\u14A1\x07\xB1\x02\x02\u149F" +
		"\u14A2\x05\u0238\u011D\x02\u14A0\u14A2\x05\u024E\u0128\x02\u14A1\u149F" +
		"\x03\x02\x02\x02\u14A1\u14A0\x03\x02\x02\x02\u14A2\u14AA\x03\x02\x02\x02" +
		"\u14A3\u14A6\x07\u0486\x02\x02\u14A4\u14A7\x05\u0238\u011D\x02\u14A5\u14A7" +
		"\x05\u024E\u0128\x02\u14A6\u14A4\x03\x02\x02\x02\u14A6\u14A5\x03\x02\x02" +
		"\x02\u14A7\u14A9\x03\x02\x02\x02\u14A8\u14A3\x03\x02\x02\x02\u14A9\u14AC" +
		"\x03\x02\x02\x02\u14AA\u14A8\x03\x02\x02\x02\u14AA\u14AB\x03\x02\x02\x02" +
		"\u14AB\u14B0\x03\x02\x02\x02\u14AC\u14AA\x03\x02\x02\x02\u14AD\u14AE\x07" +
		"\xC2\x02\x02\u14AE\u14AF\x07\u02C5\x02\x02\u14AF\u14B1\x07z\x02\x02\u14B0" +
		"\u14AD\x03\x02\x02\x02\u14B0\u14B1\x03\x02\x02\x02\u14B1\u14B3\x03\x02" +
		"\x02\x02\u14B2\u1455\x03\x02\x02\x02\u14B2\u148F\x03\x02\x02\x02\u14B3" +
		"\u01BB\x03\x02\x02\x02\u14B4\u14CB\x07-\x02\x02\u14B5\u14CB\x07\u0214" +
		"\x02\x02\u14B6\u14C0\x07\b\x02\x02\u14B7\u14B8\x07=\x02\x02\u14B8\u14BD" +
		"\x05\u0238\u011D\x02\u14B9\u14BA\x07\u0486\x02\x02\u14BA\u14BC\x05\u0238" +
		"\u011D\x02\u14BB\u14B9\x03\x02\x02\x02\u14BC\u14BF\x03\x02\x02\x02\u14BD" +
		"\u14BB\x03\x02\x02\x02\u14BD\u14BE\x03\x02\x02\x02\u14BE\u14C1\x03\x02" +
		"\x02\x02\u14BF\u14BD\x03\x02\x02\x02\u14C0\u14B7\x03\x02\x02\x02\u14C0" +
		"\u14C1\x03\x02\x02\x02\u14C1\u14CB\x03\x02\x02\x02\u14C2\u14C7\x05\u0238" +
		"\u011D\x02\u14C3\u14C4\x07\u0486\x02\x02\u14C4\u14C6\x05\u0238\u011D\x02" +
		"\u14C5\u14C3\x03\x02\x02\x02\u14C6\u14C9\x03\x02\x02\x02\u14C7\u14C5\x03" +
		"\x02\x02\x02\u14C7\u14C8\x03\x02\x02\x02\u14C8\u14CB\x03\x02\x02\x02\u14C9" +
		"\u14C7\x03\x02\x02\x02\u14CA\u14B4\x03\x02\x02\x02\u14CA\u14B5\x03\x02" +
		"\x02\x02\u14CA\u14B6\x03\x02\x02\x02\u14CA\u14C2\x03\x02\x02\x02\u14CB" +
		"\u01BD\x03\x02\x02\x02\u14CC\u14CD\x07J\x02\x02\u14CD\u14CE\x07\u0239" +
		"\x02\x02\u14CE\u14CF\x07x\x02\x02\u14CF\u14D0\x05\u0238\u011D\x02\u14D0" +
		"\u14D1\x07\xB1\x02\x02\u14D1\u14D6\x05\u0238\u011D\x02\u14D2\u14D3\x07" +
		"\u0486\x02\x02\u14D3\u14D5\x05\u0238";
	private static readonly _serializedATNSegment11: string =
		"\u011D\x02\u14D4\u14D2\x03\x02\x02\x02\u14D5\u14D8\x03\x02\x02\x02\u14D6" +
		"\u14D4\x03\x02\x02\x02\u14D6\u14D7\x03\x02\x02\x02\u14D7\u14DC\x03\x02" +
		"\x02\x02\u14D8\u14D6\x03\x02\x02\x02\u14D9\u14DA\x07\xC2\x02\x02\u14DA" +
		"\u14DB\x07J\x02\x02\u14DB\u14DD\x07z\x02\x02\u14DC\u14D9\x03\x02\x02\x02" +
		"\u14DC\u14DD\x03\x02\x02\x02\u14DD\u01BF\x03\x02\x02\x02\u14DE\u14DF\x07" +
		"\x8E\x02\x02\u14DF\u14E0\x07\u029F\x02\x02\u14E0\u14E5\x05\u01DC\xEF\x02" +
		"\u14E1\u14E2\x07\u0486\x02\x02\u14E2\u14E4\x05\u01DC\xEF\x02\u14E3\u14E1" +
		"\x03\x02\x02\x02\u14E4\u14E7\x03\x02\x02\x02\u14E5\u14E3\x03\x02\x02\x02" +
		"\u14E5\u14E6\x03\x02\x02\x02\u14E6\u01C1\x03\x02\x02\x02\u14E7\u14E5\x03" +
		"\x02\x02\x02\u14E8\u14E9\x07\x96\x02\x02\u14E9\u14EE\x05\u01D6\xEC\x02" +
		"\u14EA\u14EB\x07\u0486\x02\x02\u14EB\u14ED\x05\u01D6\xEC\x02\u14EC\u14EA" +
		"\x03\x02\x02\x02\u14ED\u14F0\x03\x02\x02\x02\u14EE\u14EC\x03\x02\x02\x02" +
		"\u14EE\u14EF\x03\x02\x02\x02\u14EF\u14F1\x03\x02\x02\x02\u14F0\u14EE\x03" +
		"\x02\x02\x02\u14F1\u14F3\x07x\x02\x02\u14F2\u14F4\tH\x02\x02\u14F3\u14F2" +
		"\x03\x02\x02\x02\u14F3\u14F4\x03\x02\x02\x02\u14F4\u14F5\x03\x02\x02\x02" +
		"\u14F5\u14F6\x05\u01DA\xEE\x02\u14F6\u14F7\x07F\x02\x02\u14F7\u14FC\x05" +
		"\u0238\u011D\x02\u14F8\u14F9\x07\u0486\x02\x02\u14F9\u14FB\x05\u0238\u011D" +
		"\x02\u14FA\u14F8\x03\x02\x02\x02\u14FB\u14FE\x03\x02\x02\x02\u14FC\u14FA" +
		"\x03\x02\x02\x02\u14FC\u14FD\x03\x02\x02\x02\u14FD\u1529\x03\x02\x02\x02" +
		"\u14FE\u14FC\x03\x02\x02\x02\u14FF\u1500\x07\x96\x02\x02\u1500\u1502\x07" +
		"\b\x02\x02\u1501\u1503\x07\u02DE\x02\x02\u1502\u1501\x03\x02\x02\x02\u1502" +
		"\u1503\x03\x02\x02\x02\u1503\u1504\x03\x02\x02\x02\u1504\u1505\x07\u0486" +
		"\x02\x02\u1505\u1506\x07J\x02\x02\u1506\u1507\x07z\x02\x02\u1507\u1508" +
		"\x07F\x02\x02\u1508\u150D\x05\u0238\u011D\x02\u1509\u150A\x07\u0486\x02" +
		"\x02\u150A\u150C\x05\u0238\u011D\x02\u150B\u1509\x03\x02\x02\x02\u150C" +
		"\u150F\x03\x02\x02\x02\u150D\u150B\x03\x02\x02\x02\u150D\u150E\x03\x02" +
		"\x02\x02\u150E\u1529\x03\x02\x02\x02\u150F\u150D\x03\x02\x02\x02\u1510" +
		"\u1511\x07\x96\x02\x02\u1511\u1516\x05\u024E\u0128\x02\u1512\u1513\x07" +
		"\u0486\x02\x02\u1513\u1515\x05\u024E\u0128\x02\u1514\u1512\x03\x02\x02" +
		"\x02\u1515\u1518\x03\x02\x02\x02\u1516\u1514\x03\x02\x02\x02\u1516\u1517" +
		"\x03\x02\x02\x02\u1517\u1519\x03\x02\x02\x02\u1518\u1516\x03\x02\x02\x02" +
		"\u1519\u151C\x07F\x02\x02\u151A\u151D\x05\u0238\u011D\x02\u151B\u151D" +
		"\x05\u024E\u0128\x02\u151C\u151A\x03\x02\x02\x02\u151C\u151B\x03\x02\x02" +
		"\x02\u151D\u1525\x03\x02\x02\x02\u151E\u1521\x07\u0486\x02\x02\u151F\u1522" +
		"\x05\u0238\u011D\x02\u1520\u1522\x05\u024E\u0128\x02\u1521\u151F\x03\x02" +
		"\x02\x02\u1521\u1520\x03\x02\x02\x02\u1522\u1524\x03\x02\x02\x02\u1523" +
		"\u151E\x03\x02\x02\x02\u1524\u1527\x03\x02\x02\x02\u1525\u1523\x03\x02" +
		"\x02\x02\u1525\u1526\x03\x02\x02\x02\u1526\u1529\x03\x02\x02\x02\u1527" +
		"\u1525\x03\x02\x02\x02\u1528\u14E8\x03\x02\x02\x02\u1528\u14FF\x03\x02" +
		"\x02\x02\u1528\u1510\x03\x02\x02\x02\u1529\u01C3\x03\x02\x02\x02\u152A" +
		"\u152B\x07\x96\x02\x02\u152B\u152C\x07\u0239\x02\x02\u152C\u152D\x07x" +
		"\x02\x02\u152D\u152E\x05\u0238\u011D\x02\u152E\u152F\x07F\x02\x02\u152F" +
		"\u1534\x05\u0238\u011D\x02\u1530\u1531\x07\u0486\x02\x02\u1531\u1533\x05" +
		"\u0238\u011D\x02\u1532\u1530\x03\x02\x02\x02\u1533\u1536\x03\x02\x02\x02" +
		"\u1534\u1532\x03\x02\x02\x02\u1534\u1535\x03\x02\x02\x02\u1535\u01C5\x03" +
		"\x02\x02\x02\u1536\u1534\x03\x02\x02\x02\u1537\u1538\x07\x9C\x02\x02\u1538" +
		"\u153B\x07\u022A\x02\x02\u1539\u153A\x07C\x02\x02\u153A\u153C\x05\u0238" +
		"\u011D\x02\u153B\u1539\x03\x02\x02\x02\u153B\u153C\x03\x02\x02\x02\u153C" +
		"\u153D\x03\x02\x02\x02\u153D\u1540\x07\u047B\x02\x02\u153E\u1541\x05\u02B0" +
		"\u0159\x02\u153F\u1541\x07\u0493\x02\x02\u1540\u153E\x03\x02\x02\x02\u1540" +
		"\u153F\x03\x02\x02\x02\u1541\u01C7\x03\x02\x02\x02\u1542\u1543\x05\u0238" +
		"\u011D\x02\u1543\u1544\x05\u01D2\xEA\x02\u1544\u01C9\x03\x02\x02\x02\u1545" +
		"\u1546\x05\u0238\u011D\x02\u1546\u1547\x07\u01C2\x02\x02\u1547\u1548\x07" +
		"\x16\x02\x02\u1548\u1549\x07\u022A\x02\x02\u1549\u154A\x07\u0493\x02\x02" +
		"\u154A\u1561\x03\x02\x02\x02\u154B\u154C\x05\u0238\u011D\x02\u154C\u154D" +
		"\x07\u01C2\x02\x02\u154D\u154E\x07\x16\x02\x02\u154E\u1552\x07\u0493\x02" +
		"\x02\u154F\u1550\x07\x94\x02\x02\u1550\u1551\x07&\x02\x02\u1551\u1553" +
		"\x07\u022A\x02\x02\u1552\u154F\x03\x02\x02\x02\u1552\u1553\x03\x02\x02" +
		"\x02\u1553\u1561\x03\x02\x02\x02\u1554\u1555\x05\u0238\u011D\x02\u1555" +
		"\u1556\x07\u01C2\x02\x02\u1556\u1557\tI\x02\x02\u1557\u155C\x05\u01CC" +
		"\xE7\x02\u1558\u1559\x07}\x02\x02\u1559\u155B\x05\u01CC\xE7\x02\u155A" +
		"\u1558\x03\x02\x02\x02\u155B\u155E\x03\x02\x02\x02\u155C\u155A\x03\x02" +
		"\x02\x02\u155C\u155D\x03\x02\x02\x02\u155D\u1561\x03\x02\x02\x02\u155E" +
		"\u155C\x03\x02\x02\x02\u155F\u1561\x05\u0238\u011D\x02\u1560\u1545\x03" +
		"\x02\x02\x02\u1560\u154B\x03\x02\x02\x02\u1560\u1554\x03\x02\x02\x02\u1560" +
		"\u155F\x03\x02\x02\x02\u1561\u01CB\x03\x02\x02\x02\u1562\u1565\x05\u024C" +
		"\u0127\x02\u1563\u1564\tJ\x02\x02\u1564\u1566\x07\u0493\x02\x02\u1565" +
		"\u1563\x03\x02\x02\x02\u1565\u1566\x03\x02\x02\x02\u1566\u156C\x03\x02" +
		"\x02\x02\u1567\u1568\x05\u024C\u0127\x02\u1568\u1569\tK\x02\x02\u1569" +
		"\u156A\x05\u02B0\u0159\x02\u156A\u156C\x03\x02\x02\x02\u156B\u1562\x03" +
		"\x02\x02\x02\u156B\u1567\x03\x02\x02\x02\u156C\u01CD\x03\x02\x02\x02\u156D" +
		"\u1576\x07\xA9\x02\x02\u156E\u1576\x07\u02B0\x02\x02\u156F\u1570\x07\u0168" +
		"\x02\x02\u1570\u1576\x07\u0493\x02\x02\u1571\u1572\x07\u01D3\x02\x02\u1572" +
		"\u1576\x07\u0493\x02\x02\u1573\u1574\x07\u0285\x02\x02\u1574\u1576\x07" +
		"\u0493\x02\x02\u1575\u156D\x03\x02\x02\x02\u1575\u156E\x03\x02\x02\x02" +
		"\u1575\u156F\x03\x02\x02\x02\u1575\u1571\x03\x02\x02\x02\u1575\u1573\x03" +
		"\x02\x02\x02\u1576\u01CF\x03\x02\x02\x02\u1577\u1578\x07\u01F6\x02\x02" +
		"\u1578\u1580\x05\u0254\u012B\x02\u1579\u157A\x07\u01F9\x02\x02\u157A\u1580" +
		"\x05\u0254\u012B\x02\u157B\u157C\x07\u01F5\x02\x02\u157C\u1580\x05\u0254" +
		"\u012B\x02\u157D\u157E\x07\u01FA\x02\x02\u157E\u1580\x05\u0254\u012B\x02" +
		"\u157F\u1577\x03\x02\x02\x02\u157F\u1579\x03\x02\x02\x02\u157F\u157B\x03" +
		"\x02\x02\x02\u157F\u157D\x03\x02\x02\x02\u1580\u01D1\x03\x02\x02\x02\u1581" +
		"\u1582\x07\u022A\x02\x02\u1582\u1589\x07\u01A6\x02\x02\u1583\u158A\x07" +
		"-\x02\x02\u1584\u158A\x07\u020A\x02\x02\u1585\u1586\x07X\x02\x02\u1586" +
		"\u1587\x05\u0254\u012B\x02\u1587\u1588\x07\u02BB\x02\x02\u1588\u158A\x03" +
		"\x02\x02\x02\u1589\u1583\x03\x02\x02\x02\u1589\u1584\x03\x02\x02\x02\u1589" +
		"\u1585\x03\x02\x02\x02\u1589\u158A\x03\x02\x02\x02\u158A\u15A8\x03\x02" +
		"\x02\x02\u158B\u158C\x07\u022A\x02\x02\u158C\u158F\x07\u01BF\x02\x02\u158D" +
		"\u1590\x07-\x02\x02\u158E\u1590\x05\u0254\u012B\x02\u158F\u158D\x03\x02" +
		"\x02\x02\u158F\u158E\x03\x02\x02\x02\u1590\u15A8\x03\x02\x02\x02\u1591" +
		"\u1592\x07\u022A\x02\x02\u1592\u1593\x07\u0257\x02\x02\u1593\u1598\x07" +
		"X\x02\x02\u1594\u1599\x07-\x02\x02\u1595\u1596\x05\u0254\u012B\x02\u1596" +
		"\u1597\x07\u02BB\x02\x02\u1597\u1599\x03\x02\x02\x02\u1598\u1594\x03\x02" +
		"\x02\x02\u1598\u1595\x03\x02\x02\x02\u1599\u15A8\x03\x02\x02\x02\u159A" +
		"\u159B\x07\u022A\x02\x02\u159B\u159C\x07\x91\x02\x02\u159C\u159E\x07&" +
		"\x02\x02\u159D\u159F\tL\x02\x02\u159E\u159D\x03\x02\x02\x02\u159E\u159F" +
		"\x03\x02\x02\x02\u159F\u15A8\x03\x02\x02\x02\u15A0\u15A1\x07\u01AA\x02" +
		"\x02\u15A1\u15A8\x05\u0254\u012B\x02\u15A2\u15A5\x07\u022B\x02\x02\u15A3" +
		"\u15A6\x05\u0254\u012B\x02\u15A4\u15A6\x07\u0297\x02\x02\u15A5\u15A3\x03" +
		"\x02\x02\x02\u15A5\u15A4\x03\x02\x02\x02\u15A6\u15A8\x03\x02\x02\x02\u15A7" +
		"\u1581\x03\x02\x02\x02\u15A7\u158B\x03\x02\x02\x02\u15A7\u1591\x03\x02" +
		"\x02\x02\u15A7\u159A\x03\x02\x02\x02\u15A7\u15A0\x03\x02\x02\x02\u15A7" +
		"\u15A2\x03\x02\x02\x02\u15A8\u01D3\x03\x02\x02\x02\u15A9\u15AA\x07\u014E" +
		"\x02\x02\u15AA\u15AB\tM\x02\x02\u15AB\u01D5\x03\x02\x02\x02\u15AC\u15B1" +
		"\x05\u01D8\xED\x02\u15AD\u15AE\x07\u0484\x02\x02\u15AE\u15AF\x05\u026E" +
		"\u0138\x02\u15AF\u15B0\x07\u0485\x02\x02\u15B0\u15B2\x03\x02\x02\x02\u15B1" +
		"\u15AD\x03\x02\x02\x02\u15B1\u15B2\x03\x02\x02\x02\u15B2\u01D7\x03\x02" +
		"\x02\x02\u15B3\u15B5\x07\b\x02\x02\u15B4\u15B6\x07\u02DE\x02\x02\u15B5" +
		"\u15B4\x03\x02\x02\x02\u15B5\u15B6\x03\x02\x02\x02\u15B6\u162C\x03\x02" +
		"\x02\x02\u15B7\u15B9\x07\t\x02\x02\u15B8\u15BA\x07\u02E6\x02\x02\u15B9" +
		"\u15B8\x03\x02\x02\x02\u15B9\u15BA\x03\x02\x02\x02\u15BA\u162C\x03\x02" +
		"\x02\x02\u15BB\u15C3\x07$\x02\x02\u15BC\u15BD\x07\u028E\x02\x02\u15BD" +
		"\u15C4\x07\u02EF\x02\x02\u15BE\u15C4\x07\u02E6\x02\x02\u15BF\u15C4\x07" +
		"\u02A5\x02\x02\u15C0\u15C4\x07\u029F\x02\x02\u15C1\u15C4\x07\u028C\x02" +
		"\x02\u15C2\u15C4\x07\u0258\x02\x02\u15C3\u15BC\x03\x02\x02\x02\u15C3\u15BE" +
		"\x03\x02\x02\x02\u15C3\u15BF\x03\x02\x02\x02\u15C3\u15C0\x03\x02\x02\x02" +
		"\u15C3\u15C1\x03\x02\x02\x02\u15C3\u15C2\x03\x02\x02\x02\u15C3\u15C4\x03" +
		"\x02\x02\x02\u15C4\u162C\x03\x02\x02\x02\u15C5\u162C\x07/\x02\x02\u15C6" +
		"\u15C8\x076\x02\x02\u15C7\u15C9\x07\u0258\x02\x02\u15C8\u15C7\x03\x02" +
		"\x02\x02\u15C8\u15C9\x03\x02\x02\x02\u15C9\u162C\x03\x02\x02\x02\u15CA" +
		"\u162C\x07\u01A1\x02\x02\u15CB\u162C\x07\u02CE\x02\x02\u15CC\u162C\x07" +
		"\u02CF\x02\x02\u15CD\u15CE\x07J\x02\x02\u15CE\u162C\x07z\x02\x02\u15CF" +
		"\u162C\x07S\x02\x02\u15D0\u162C\x07W\x02\x02\u15D1\u15D2\x07i\x02\x02" +
		"\u15D2\u162C\x07\u02EF\x02\x02\u15D3\u162C\x07\u02DF\x02\x02\u15D4\u162C" +
		"\x07\u0239\x02\x02\u15D5\u162C\x07\x8B\x02\x02\u15D6\u162C\x07\u02E0\x02" +
		"\x02\u15D7\u15D8\x07\u0250\x02\x02\u15D8\u15DA\tN\x02\x02\u15D9\u15DB" +
		"\x07\u02C5\x02\x02\u15DA\u15D9\x03\x02\x02\x02\u15DA\u15DB\x03\x02\x02" +
		"\x02\u15DB\u162C\x03\x02\x02\x02\u15DC\u162C\x07\x9B\x02\x02\u15DD\u15DE" +
		"\x07\x9E\x02\x02\u15DE\u162C\tO\x02\x02\u15DF\u162C\x07\u02EC\x02\x02" +
		"\u15E0\u162C\x07\u02ED\x02\x02\u15E1\u162C\x07\xB3\x02\x02\u15E2\u162C" +
		"\x07\xBA\x02\x02\u15E3\u162C\x07\xBB\x02\x02\u15E4\u162C\x07\u02C6\x02" +
		"\x02\u15E5\u162C\x07\u02C7\x02\x02\u15E6\u162C\x07\u02C8\x02\x02\u15E7" +
		"\u162C\x07\u02C9\x02\x02\u15E8\u162C\x07\u02CA\x02\x02\u15E9\u162C\x07" +
		"\u02CB\x02\x02\u15EA\u162C\x07\u02CC\x02\x02\u15EB\u162C\x07\u02CD\x02" +
		"\x02\u15EC\u162C\x07\u02D0\x02\x02\u15ED\u162C\x07\u02D1\x02\x02\u15EE" +
		"\u162C\x07\u02D2\x02\x02\u15EF\u162C\x07\u02D3\x02\x02\u15F0\u162C\x07" +
		"\u02D4\x02\x02\u15F1\u162C\x07\u02D5\x02\x02\u15F2\u162C\x07\u02D6\x02" +
		"\x02\u15F3\u162C\x07\u02D7\x02\x02\u15F4\u162C\x07\u02D8\x02\x02\u15F5" +
		"\u162C\x07\u02DB\x02\x02\u15F6\u162C\x07\u02DC\x02\x02\u15F7\u162C\x07" +
		"\u02DD\x02\x02\u15F8\u162C\x07\u02E1\x02\x02\u15F9\u162C\x07\u02E2\x02" +
		"\x02\u15FA\u162C\x07\u02E3\x02\x02\u15FB\u162C\x07\u02E4\x02\x02\u15FC" +
		"\u162C\x07\u02E5\x02\x02\u15FD\u162C\x07\u02E8\x02\x02\u15FE\u162C\x07" +
		"\u02E9\x02\x02\u15FF\u162C\x07\u02EA\x02\x02\u1600\u162C\x07\u02EB\x02" +
		"\x02\u1601\u162C\x07\u043D\x02\x02\u1602\u162C\x07\u02EE\x02\x02\u1603" +
		"\u162C\x07\u02F0\x02\x02\u1604\u162C\x07\u02F1\x02\x02\u1605\u162C\x07" +
		"\u02F2\x02\x02\u1606\u162C\x07\u0461\x02\x02\u1607\u162C\x07\u0462\x02" +
		"\x02\u1608\u162C\x07\u0463\x02\x02\u1609\u162C\x07\u0464\x02\x02\u160A" +
		"\u162C\x07\u0467\x02\x02\u160B\u160C\x07\u015B\x02\x02\u160C\u162C\tP" +
		"\x02\x02\u160D\u160E\x07\u031F\x02\x02\u160E\u162C\x07\u02C5\x02\x02\u160F" +
		"\u1610\x07\x89\x02\x02\u1610\u1613\x07\u021D\x02\x02\u1611\u1613\x07\u0469" +
		"\x02\x02\u1612\u160F\x03\x02\x02\x02\u1612\u1611\x03\x02\x02\x02\u1613" +
		"\u1614\x03\x02\x02\x02\u1614\u162C\x07\u02C5\x02\x02\u1615\u1616\x07\u02C5" +
		"\x02\x02\u1616\u162C\x07z\x02\x02\u1617\u1618\x07\u017A\x02\x02\u1618" +
		"\u162C\x07\u02C5\x02\x02\u1619\u161A\x07/\x02\x02\u161A\u162C\x07\u01BF" +
		"\x02\x02\u161B\u161C\x07\u0465\x02\x02\u161C\u162C\x07\u0468\x02\x02\u161D" +
		"\u161E\x07J\x02\x02\u161E\u162C\x07z\x02\x02\u161F\u1620\x07\x9C\x02\x02" +
		"\u1620\u162C\x07\u029F\x02\x02\u1621\u1622\x07\u026A\x02\x02\u1622\u162C" +
		"\x07\u0468\x02\x02\u1623\u1624\x07h\x02\x02\u1624\u1625\x07F\x02\x02\u1625" +
		"\u162C\x07\u02E7\x02\x02\u1626\u1627\x07\x9B\x02\x02\u1627\u1628\x07Y" +
		"\x02\x02\u1628\u162C\x07\u02E7\x02\x02\u1629\u162A\x07\u02D9\x02\x02\u162A" +
		"\u162C\x07\u02DA\x02\x02\u162B\u15B3\x03\x02\x02\x02\u162B\u15B7\x03\x02" +
		"\x02\x02\u162B\u15BB\x03\x02\x02\x02\u162B\u15C5\x03\x02\x02\x02\u162B" +
		"\u15C6\x03\x02\x02\x02\u162B\u15CA\x03\x02\x02\x02\u162B\u15CB\x03\x02" +
		"\x02\x02\u162B\u15CC\x03\x02\x02\x02\u162B\u15CD\x03\x02\x02\x02\u162B" +
		"\u15CF\x03\x02\x02\x02\u162B\u15D0\x03\x02\x02\x02\u162B\u15D1\x03\x02" +
		"\x02\x02\u162B\u15D3\x03\x02\x02\x02\u162B\u15D4\x03\x02\x02\x02\u162B" +
		"\u15D5\x03\x02\x02\x02\u162B\u15D6\x03\x02\x02\x02\u162B\u15D7\x03\x02" +
		"\x02\x02\u162B\u15DC\x03\x02\x02\x02\u162B\u15DD\x03\x02\x02\x02\u162B" +
		"\u15DF\x03\x02\x02\x02\u162B\u15E0\x03\x02\x02\x02\u162B\u15E1\x03\x02" +
		"\x02\x02\u162B\u15E2\x03\x02\x02\x02\u162B\u15E3\x03\x02\x02\x02\u162B" +
		"\u15E4\x03\x02\x02\x02\u162B\u15E5\x03\x02\x02\x02\u162B\u15E6\x03\x02" +
		"\x02\x02\u162B\u15E7\x03\x02\x02\x02\u162B\u15E8\x03\x02\x02\x02\u162B" +
		"\u15E9\x03\x02\x02\x02\u162B\u15EA\x03\x02\x02\x02\u162B\u15EB\x03\x02" +
		"\x02\x02\u162B\u15EC\x03\x02\x02\x02\u162B\u15ED\x03\x02\x02\x02\u162B" +
		"\u15EE\x03\x02\x02\x02\u162B\u15EF\x03\x02\x02\x02\u162B\u15F0\x03\x02" +
		"\x02\x02\u162B\u15F1\x03\x02\x02\x02\u162B\u15F2\x03\x02\x02\x02\u162B" +
		"\u15F3\x03\x02\x02\x02\u162B\u15F4\x03\x02\x02\x02\u162B\u15F5\x03\x02" +
		"\x02\x02\u162B\u15F6\x03\x02\x02\x02\u162B\u15F7\x03\x02\x02\x02\u162B" +
		"\u15F8\x03\x02\x02\x02\u162B\u15F9\x03\x02\x02\x02\u162B\u15FA\x03\x02" +
		"\x02\x02\u162B\u15FB\x03\x02\x02\x02\u162B\u15FC\x03\x02\x02\x02\u162B" +
		"\u15FD\x03\x02\x02\x02\u162B\u15FE\x03\x02\x02\x02\u162B\u15FF\x03\x02" +
		"\x02\x02\u162B\u1600\x03\x02\x02\x02\u162B\u1601\x03\x02\x02\x02\u162B" +
		"\u1602\x03\x02\x02\x02\u162B\u1603\x03\x02\x02\x02\u162B\u1604\x03\x02" +
		"\x02\x02\u162B\u1605\x03\x02\x02\x02\u162B\u1606\x03\x02\x02\x02\u162B" +
		"\u1607\x03\x02\x02\x02\u162B\u1608\x03\x02\x02\x02\u162B\u1609\x03\x02" +
		"\x02\x02\u162B\u160A\x03\x02\x02\x02\u162B\u160B\x03\x02\x02\x02\u162B" +
		"\u160D\x03\x02\x02\x02\u162B\u1612\x03\x02\x02\x02\u162B\u1615\x03\x02" +
		"\x02\x02\u162B\u1617\x03\x02\x02\x02\u162B\u1619\x03\x02\x02\x02\u162B" +
		"\u161B\x03\x02\x02\x02\u162B\u161D\x03\x02\x02\x02\u162B\u161F\x03\x02" +
		"\x02\x02\u162B\u1621\x03\x02\x02\x02\u162B\u1623\x03\x02\x02\x02\u162B" +
		"\u1626\x03\x02\x02\x02\u162B\u1629\x03\x02\x02\x02\u162C\u01D9\x03\x02" +
		"\x02\x02\u162D\u163E\x07\u0474\x02\x02\u162E\u162F\x07\u0474\x02\x02\u162F" +
		"\u1630\x07\u0483\x02\x02\u1630\u163E\x07\u0474\x02\x02\u1631\u1632\x05" +
		"\u024E\u0128\x02\u1632\u1633\x07\u0483\x02\x02\u1633\u1634\x07\u0474\x02" +
		"\x02\u1634\u163E\x03\x02\x02\x02\u1635\u1636\x05\u024E\u0128\x02\u1636" +
		"\u1637\x07\u0483\x02\x02\u1637\u1638\x05\u024E\u0128\x02\u1638\u163E\x03" +
		"\x02\x02\x02\u1639\u163A\x05\u024E\u0128\x02\u163A\u163B\x05\u0252\u012A" +
		"\x02\u163B\u163E\x03\x02\x02\x02\u163C\u163E\x05\u024E\u0128\x02\u163D" +
		"\u162D\x03\x02\x02\x02\u163D\u162E\x03\x02\x02\x02\u163D\u1631\x03\x02" +
		"\x02\x02\u163D\u1635\x03\x02\x02\x02\u163D\u1639\x03\x02\x02\x02\u163D" +
		"\u163C\x03\x02\x02\x02\u163E\u01DB\x03\x02\x02\x02\u163F\u1640\x05\u0238" +
		"\u011D\x02\u1640\u1641\x07\xB1\x02\x02\u1641\u1642\x05\u0238\u011D\x02" +
		"\u1642\u01DD\x03\x02\x02\x02\u1643\u1645\x07\v\x02\x02\u1644\u1646\tQ" +
		"\x02\x02\u1645\u1644\x03\x02\x02\x02\u1645\u1646\x03\x02\x02\x02\u1646" +
		"\u1647\x03\x02\x02\x02\u1647\u1648\t<\x02\x02\u1648\u165A\x05\u0270\u0139" +
		"\x02\u1649\u164A\x07\xBA\x02\x02\u164A\u164B\x07N\x02\x02\u164B\u164C" +
		"\x07x\x02\x02\u164C\u1651\x05\u0234\u011B\x02\u164D\u164E\x07\u0486\x02" +
		"\x02\u164E\u1650\x05\u0234\u011B\x02\u164F\u164D\x03\x02\x02\x02\u1650" +
		"\u1653\x03\x02\x02\x02\u1651\u164F\x03\x02\x02\x02\u1651\u1652\x03\x02" +
		"\x02\x02\u1652\u1658\x03\x02\x02\x02\u1653\u1651\x03\x02\x02\x02\u1654" +
		"\u1655\x07\xC2\x02\x02\u1655\u1656\x05\u0254\u012B\x02\u1656\u1657\x07" +
		"\x15\x02\x02\u1657\u1659\x03\x02\x02\x02\u1658\u1654\x03\x02\x02\x02\u1658" +
		"\u1659\x03\x02\x02\x02\u1659\u165B\x03\x02\x02\x02\u165A\u1649\x03\x02" +
		"\x02\x02\u165A\u165B\x03\x02\x02\x02\u165B\u1667\x03\x02\x02\x02\u165C" +
		"\u165D\x076\x02\x02\u165D\u165E\x07N\x02\x02\u165E\u165F\x07x\x02\x02" +
		"\u165F\u1664\x05\u0234\u011B\x02\u1660\u1661\x07\u0486\x02\x02\u1661\u1663" +
		"\x05\u0234\u011B\x02\u1662\u1660\x03\x02\x02\x02\u1663\u1666\x03\x02\x02" +
		"\x02\u1664\u1662\x03\x02\x02\x02\u1664\u1665\x03\x02\x02\x02\u1665\u1668" +
		"\x03\x02\x02\x02\u1666\u1664\x03\x02\x02\x02\u1667\u165C\x03\x02\x02\x02" +
		"\u1667\u1668\x03\x02\x02\x02\u1668\u01DF\x03\x02\x02\x02\u1669\u166A\x07" +
		"\x1D\x02\x02\u166A\u166B\x07\xAE\x02\x02\u166B\u166F\x05\u0270\u0139\x02" +
		"\u166C\u166E\x05\u01E8\xF5\x02\u166D\u166C\x03\x02\x02\x02\u166E\u1671" +
		"\x03\x02\x02\x02\u166F\u166D\x03\x02\x02\x02\u166F\u1670\x03\x02\x02\x02" +
		"\u1670\u01E1\x03\x02\x02\x02\u1671\u166F\x03\x02\x02\x02\u1672\u1673\x07" +
		"\u0166\x02\x02\u1673\u1674\x07\xAE\x02\x02\u1674\u1676\x05\u0270\u0139" +
		"\x02\u1675\u1677\tR\x02\x02\u1676\u1675\x03\x02\x02\x02\u1676\u1677\x03" +
		"\x02\x02\x02\u1677\u01E3\x03\x02\x02\x02\u1678\u167A\x07y\x02\x02\u1679" +
		"\u167B\tQ\x02\x02\u167A\u1679\x03\x02\x02\x02\u167A\u167B\x03\x02\x02" +
		"\x02\u167B\u167C\x03\x02\x02\x02\u167C\u167D\t<\x02\x02\u167D\u167F\x05" +
		"\u0270\u0139\x02\u167E\u1680\x05\u028A\u0146\x02\u167F\u167E\x03\x02\x02" +
		"\x02\u167F\u1680\x03\x02\x02\x02\u1680\u01E5\x03\x02\x02\x02\u1681\u1683" +
		"\x07\u0248\x02\x02\u1682\u1684\tQ\x02\x02\u1683\u1682\x03\x02\x02\x02" +
		"\u1683\u1684\x03\x02\x02\x02\u1684\u1685\x03\x02\x02\x02\u1685\u1686\x07" +
		"\xAE\x02\x02\u1686\u1688\x05\u0270\u0139\x02\u1687\u1689\x07\u023C\x02" +
		"\x02\u1688\u1687\x03\x02\x02\x02\u1688\u1689\x03\x02\x02\x02\u1689\u168B" +
		"\x03\x02\x02\x02\u168A\u168C\x07\u01A8\x02\x02\u168B\u168A\x03\x02\x02" +
		"\x02\u168B\u168C\x03\x02\x02\x02\u168C\u168E\x03\x02\x02\x02\u168D\u168F" +
		"\x07\u02A0\x02\x02\u168E\u168D\x03\x02\x02\x02\u168E\u168F\x03\x02\x02" +
		"\x02\u168F\u01E7\x03\x02\x02\x02\u1690\u1691\x07C\x02\x02\u1691\u1698" +
		"\x07\u029E\x02\x02\u1692\u1698\x07\u023C\x02\x02\u1693\u1698\x07\u01AB" +
		"\x02\x02\u1694\u1698\x07\u01FB\x02\x02\u1695\u1698\x07\u01A8\x02\x02\u1696" +
		"\u1698\x07\u0164\x02\x02\u1697\u1690\x03\x02\x02\x02\u1697\u1692\x03\x02" +
		"\x02\x02\u1697\u1693\x03\x02\x02\x02\u1697\u1694\x03\x02\x02\x02\u1697" +
		"\u1695\x03\x02\x02\x02\u1697\u1696\x03\x02\x02\x02\u1698\u01E9\x03\x02" +
		"\x02\x02\u1699\u169B\x07$\x02\x02\u169A\u169C\x05\u0288\u0145\x02\u169B" +
		"\u169A\x03\x02\x02\x02\u169B\u169C\x03\x02\x02\x02\u169C\u169E\x03\x02" +
		"\x02\x02\u169D\u169F\x07\u0151\x02\x02\u169E\u169D\x03\x02\x02\x02\u169E" +
		"\u169F\x03\x02\x02\x02\u169F\u16A0\x03\x02\x02\x02\u16A0\u16A2\x07\u01B7" +
		"\x02\x02\u16A1\u16A3\x05\u0286\u0144\x02\u16A2\u16A1\x03\x02\x02\x02\u16A2" +
		"\u16A3\x03\x02\x02\x02\u16A3\u16A4\x03\x02\x02\x02\u16A4\u16A5\x05\u024E" +
		"\u0128\x02\u16A5\u16A6\x07\u0256\x02\x02\u16A6\u16A7\tS\x02\x02\u16A7" +
		"\u16A8\x07\u0270\x02\x02\u16A8\u16A9\x07\u0493\x02\x02\u16A9\u01EB\x03" +
		"\x02\x02\x02\u16AA\u16AB\x07\u01CA\x02\x02\u16AB\u16AC\x07\u022D\x02\x02" +
		"\u16AC\u16AD\x05\u024E\u0128\x02\u16AD\u16AE\x07\u0270\x02\x02\u16AE\u16AF" +
		"\x07\u0493\x02\x02\u16AF\u01ED\x03\x02\x02\x02\u16B0\u16B1\x07\u029B\x02" +
		"\x02\u16B1\u16B2\x07\u022D\x02\x02\u16B2\u16B3\x05\u024E\u0128\x02\u16B3" +
		"\u01EF\x03\x02\x02\x02\u16B4\u16B5\x07\x9C\x02\x02\u16B5\u16B6\x05\u01F6" +
		"\xFC\x02\u16B6\u16B9\tT\x02\x02\u16B7\u16BA\x05\u02B6\u015C\x02\u16B8" +
		"\u16BA\x07x\x02\x02\u16B9\u16B7\x03\x02\x02\x02\u16B9\u16B8\x03\x02\x02" +
		"\x02\u16BA\u16C4\x03\x02\x02\x02\u16BB\u16BC\x07\u0486\x02\x02\u16BC\u16BD" +
		"\x05\u01F6\xFC\x02\u16BD\u16C0\tT\x02\x02\u16BE\u16C1\x05\u02B6\u015C" +
		"\x02\u16BF\u16C1\x07x\x02\x02\u16C0\u16BE\x03\x02\x02\x02\u16C0\u16BF" +
		"\x03\x02\x02\x02\u16C1\u16C3\x03\x02\x02\x02\u16C2\u16BB\x03\x02\x02\x02" +
		"\u16C3\u16C6\x03\x02\x02\x02\u16C4\u16C2\x03\x02\x02\x02\u16C4\u16C5\x03" +
		"\x02\x02\x02\u16C5\u16E9\x03\x02\x02\x02\u16C6\u16C4\x03\x02\x02\x02\u16C7" +
		"\u16C8\x07\x9C\x02\x02\u16C8\u16CB\x05D#\x02\u16C9\u16CC\x05\u023C\u011F" +
		"\x02\u16CA\u16CC\x07-\x02\x02\u16CB\u16C9\x03\x02\x02\x02\u16CB\u16CA" +
		"\x03\x02\x02\x02\u16CC\u16E9\x03\x02\x02\x02\u16CD\u16CE\x07\x9C\x02\x02" +
		"\u16CE\u16D5\x07\u0208\x02\x02\u16CF\u16D2\x05\u023C\u011F\x02\u16D0\u16D1" +
		"\x07\x1E\x02\x02\u16D1\u16D3\x05\u023E\u0120\x02\u16D2\u16D0\x03\x02\x02" +
		"\x02\u16D2\u16D3\x03\x02\x02\x02\u16D3\u16D6\x03\x02\x02\x02\u16D4\u16D6" +
		"\x07-\x02\x02\u16D5\u16CF\x03\x02\x02\x02\u16D5\u16D4\x03\x02\x02\x02" +
		"\u16D6\u16E9\x03\x02\x02\x02\u16D7\u16E9\x05\u01C6\xE4\x02\u16D8\u16E9" +
		"\x05\u0148\xA5\x02\u16D9\u16E9\x05\u0146\xA4\x02\u16DA\u16DB\x07\x9C\x02" +
		"\x02\u16DB\u16DC\x05\u022E\u0118\x02\u16DC\u16DD\tT\x02\x02\u16DD\u16E5" +
		"\x05\u02B6\u015C\x02\u16DE\u16DF\x07\u0486\x02\x02\u16DF\u16E0\x05\u022E" +
		"\u0118\x02\u16E0\u16E1\tT\x02\x02\u16E1\u16E2\x05\u02B6\u015C\x02\u16E2" +
		"\u16E4\x03\x02\x02\x02\u16E3\u16DE\x03\x02\x02\x02\u16E4\u16E7\x03\x02" +
		"\x02\x02\u16E5\u16E3\x03\x02\x02\x02\u16E5\u16E6\x03\x02\x02\x02\u16E6" +
		"\u16E9\x03\x02\x02\x02\u16E7\u16E5\x03\x02\x02\x02\u16E8\u16B4\x03\x02" +
		"\x02\x02\u16E8\u16C7\x03\x02\x02\x02\u16E8\u16CD\x03\x02\x02\x02\u16E8" +
		"\u16D7\x03\x02\x02\x02\u16E8\u16D8\x03\x02\x02\x02\u16E8\u16D9\x03\x02" +
		"\x02\x02\u16E8\u16DA\x03\x02\x02\x02\u16E9\u01F1\x03\x02\x02\x02\u16EA" +
		"\u16EB\x07\x9E\x02\x02\u16EB\u16EC\t>\x02\x02\u16EC\u17AA\x07\u01DF\x02" +
		"\x02\u16ED\u16EE\x07\x9E\x02\x02\u16EE\u16EF\x07\u015B\x02\x02\u16EF\u16F2" +
		"\x07\u01A2\x02\x02\u16F0\u16F1\x07R\x02\x02\u16F1\u16F3\x07\u0493\x02" +
		"\x02\u16F2\u16F0\x03\x02\x02\x02\u16F2\u16F3\x03\x02\x02\x02\u16F3\u16F6" +
		"\x03\x02\x02\x02\u16F4\u16F5\x07F\x02\x02\u16F5\u16F7\x05\u0254\u012B" +
		"\x02\u16F6\u16F4\x03\x02\x02\x02\u16F6\u16F7\x03\x02\x02\x02\u16F7\u16F9" +
		"\x03\x02\x02\x02\u16F8\u16FA\x05\u0130\x99\x02\u16F9\u16F8\x03\x02\x02" +
		"\x02\u16F9\u16FA\x03\x02\x02\x02\u16FA\u17AA\x03\x02\x02\x02\u16FB\u16FC" +
		"\x07\x9E\x02\x02\u16FC\u16FE\x07\u0245\x02\x02\u16FD\u16FF\x07\u0493\x02" +
		"\x02\u16FE\u16FD\x03\x02\x02\x02\u16FE\u16FF\x03\x02\x02\x02\u16FF\u1700" +
		"\x03\x02\x02\x02\u1700\u1703\x07\u01A2\x02\x02\u1701\u1702\x07R\x02\x02" +
		"\u1702\u1704\x07\u0493\x02\x02\u1703\u1701\x03\x02\x02\x02\u1703\u1704" +
		"\x03\x02\x02\x02\u1704\u1707\x03\x02\x02\x02\u1705\u1706\x07F\x02\x02" +
		"\u1706\u1708\x05\u0254\u012B\x02\u1707\u1705\x03\x02\x02\x02\u1707\u1708" +
		"\x03\x02\x02\x02\u1708\u170A\x03\x02\x02\x02\u1709\u170B\x05\u0130\x99" +
		"\x02\u170A\u1709\x03\x02\x02\x02\u170A\u170B\x03\x02\x02\x02\u170B\u170F" +
		"\x03\x02\x02\x02\u170C\u170D\x07C\x02\x02\u170D\u170E\x07\u0165\x02\x02" +
		"\u170E\u1710\x07\u0493\x02\x02\u170F\u170C\x03\x02\x02\x02\u170F\u1710" +
		"\x03\x02\x02\x02\u1710\u17AA\x03\x02\x02\x02\u1711\u1712\x07\x9E\x02\x02" +
		"\u1712\u1714\x05\u01F8\xFD\x02\u1713\u1715\x05\u01FA\xFE\x02\u1714\u1713" +
		"\x03\x02\x02\x02\u1714\u1715\x03\x02\x02\x02\u1715\u17AA\x03\x02\x02\x02" +
		"\u1716\u1718\x07\x9E\x02\x02\u1717\u1719\x07\u01B6\x02\x02\u1718\u1717" +
		"\x03\x02\x02\x02\u1718\u1719\x03\x02\x02\x02\u1719\u171A\x03\x02\x02\x02" +
		"\u171A\u171B\t/\x02\x02\u171B\u171C\tU\x02\x02\u171C\u171F\x05\u0230\u0119" +
		"\x02\u171D\u171E\tU\x02\x02\u171E\u1720\x05\u024E\u0128\x02\u171F\u171D" +
		"\x03\x02\x02\x02\u171F\u1720\x03\x02\x02\x02\u1720\u1722\x03\x02\x02\x02" +
		"\u1721\u1723\x05\u01FA\xFE\x02\u1722\u1721\x03\x02\x02\x02\u1722\u1723" +
		"\x03\x02\x02\x02\u1723\u17AA\x03\x02\x02\x02\u1724\u1725\x07\x9E\x02\x02" +
		"\u1725\u1726\x07$\x02\x02\u1726\u1728\t\x02\x02\x02\u1727\u1729\x05\u0286" +
		"\u0144\x02\u1728\u1727\x03\x02\x02\x02\u1728\u1729\x03\x02\x02\x02\u1729" +
		"\u172A\x03\x02\x02\x02\u172A\u17AA\x05\u024E\u0128\x02\u172B\u172C\x07" +
		"\x9E\x02\x02\u172C\u172D\x07$\x02\x02\u172D\u172E\tV\x02\x02\u172E\u17AA" +
		"\x05\u022E\u0118\x02\u172F\u1730\x07\x9E\x02\x02\u1730\u1731\x07$\x02" +
		"\x02\u1731\u1733\x07\x85\x02\x02\u1732\u1734\x07\x13\x02\x02\u1733\u1732" +
		"\x03\x02\x02\x02\u1733\u1734\x03\x02\x02\x02\u1734\u1735\x03\x02\x02\x02" +
		"\u1735\u17AA\x05\u022E\u0118\x02\u1736\u1737\x07\x9E\x02\x02\u1737\u1738" +
		"\x07$\x02\x02\u1738\u1739\x07\u029F\x02\x02\u1739\u17AA\x05\u0238\u011D" +
		"\x02\u173A\u173B\x07\x9E\x02\x02\u173B\u173C\x07\u019B\x02\x02\u173C\u173D" +
		"\x05\u0240\u0121\x02\u173D\u173E\tW\x02\x02\u173E\u17AA\x03\x02\x02\x02" +
		"\u173F\u1740\x07\x9E\x02\x02\u1740\u1741\x07\u0320\x02\x02\u1741\u17AA" +
		"\x07\u027F\x02\x02\u1742\u1743\x07\x9E\x02\x02\u1743\u17AA\x05\u01FC\xFF" +
		"\x02\u1744\u1745\x07\x9E\x02\x02\u1745\u1747\tX\x02\x02\u1746\u1748\x05" +
		"\u0130\x99\x02\u1747\u1746\x03\x02\x02\x02\u1747\u1748\x03\x02\x02\x02" +
		"\u1748\u17AA\x03\x02\x02\x02\u1749\u174A\x07\x9E\x02\x02\u174A\u174B\x07" +
		"\u0124\x02\x02\u174B\u174C\x07\u0484\x02\x02\u174C\u174D\x07\u0474\x02" +
		"\x02\u174D\u174E\x07\u0485\x02\x02\u174E\u17AA\tX\x02\x02\u174F\u1750" +
		"\x07\x9E\x02\x02\u1750\u1753\x05\u01FE\u0100\x02\u1751\u1752\tU\x02\x02" +
		"\u1752\u1754\x05\u024E\u0128\x02\u1753\u1751\x03\x02\x02\x02\u1753\u1754" +
		"\x03\x02\x02\x02\u1754\u1756\x03\x02\x02\x02\u1755\u1757\x05\u01FA\xFE" +
		"\x02\u1756\u1755\x03\x02\x02\x02\u1756\u1757\x03\x02\x02\x02\u1757\u17AA" +
		"\x03\x02\x02\x02\u1758\u1759\x07\x9E\x02\x02\u1759\u175A\tY\x02\x02";
	private static readonly _serializedATNSegment12: string =
		"\u175A\u175B\x07\u016E\x02\x02\u175B\u17AA\x05\u022E\u0118\x02\u175C\u175D" +
		"\x07\x9E\x02\x02\u175D\u1760\x07\u01BA\x02\x02\u175E\u175F\x07C\x02\x02" +
		"\u175F\u1761\x05\u0238\u011D\x02\u1760\u175E\x03\x02\x02\x02\u1760\u1761" +
		"\x03\x02\x02\x02\u1761\u17AA\x03\x02\x02\x02\u1762\u1763\x07\x9E\x02\x02" +
		"\u1763\u1764\tZ\x02\x02\u1764\u1765\tU\x02\x02\u1765\u1768\x05\u0230\u0119" +
		"\x02\u1766\u1767\tU\x02\x02\u1767\u1769\x05\u024E\u0128\x02\u1768\u1766" +
		"\x03\x02\x02\x02\u1768\u1769\x03\x02\x02\x02\u1769\u176C\x03\x02\x02\x02" +
		"\u176A\u176B\x07\xC0\x02\x02\u176B\u176D\x05\u02B6\u015C\x02\u176C\u176A" +
		"\x03\x02\x02\x02\u176C\u176D\x03\x02\x02\x02\u176D\u17AA\x03\x02\x02\x02" +
		"\u176E\u176F\x07\x9E\x02\x02\u176F\u1770\x07\u021E\x02\x02\u1770\u1773" +
		"\x07\u02EF\x02\x02\u1771\u1772\tU\x02\x02\u1772\u1774\x05\u022E\u0118" +
		"\x02\u1773\u1771\x03\x02\x02\x02\u1773\u1774\x03\x02\x02\x02\u1774\u1776" +
		"\x03\x02\x02\x02\u1775\u1777\x05\u01FA\xFE\x02\u1776\u1775\x03\x02\x02" +
		"\x02\u1776\u1777\x03\x02\x02\x02\u1777\u17AA\x03\x02\x02\x02\u1778\u1779" +
		"\x07\x9E\x02\x02\u1779\u1782\x07\u0237\x02\x02\u177A\u177F\x05\u0200\u0101" +
		"\x02\u177B\u177C\x07\u0486\x02\x02\u177C\u177E\x05\u0200\u0101\x02\u177D" +
		"\u177B\x03\x02\x02\x02\u177E\u1781\x03\x02\x02\x02\u177F\u177D\x03\x02" +
		"\x02\x02\u177F\u1780\x03\x02\x02\x02\u1780\u1783\x03\x02\x02\x02\u1781" +
		"\u177F\x03\x02\x02\x02\u1782\u177A\x03\x02\x02\x02\u1782\u1783\x03\x02" +
		"\x02\x02\u1783\u1787\x03\x02\x02\x02\u1784\u1785\x07C\x02\x02\u1785\u1786" +
		"\x07\u023A\x02\x02\u1786\u1788\x05\u0254\u012B\x02\u1787\u1784\x03\x02" +
		"\x02\x02\u1787\u1788\x03\x02\x02\x02\u1788\u178A\x03\x02\x02\x02\u1789" +
		"\u178B\x05\u0130\x99\x02\u178A\u1789\x03\x02\x02\x02\u178A\u178B\x03\x02" +
		"\x02\x02\u178B\u17AA\x03\x02\x02\x02\u178C\u178D\x07\x9E\x02\x02\u178D" +
		"\u178F\t[\x02\x02\u178E\u1790\x07\u0493\x02\x02\u178F\u178E\x03\x02\x02" +
		"\x02\u178F\u1790\x03\x02\x02\x02\u1790\u1791\x03\x02\x02\x02\u1791\u1795" +
		"\x07\u027F\x02\x02\u1792\u1793\x07C\x02\x02\u1793\u1794\x07\u0165\x02" +
		"\x02\u1794\u1796\x07\u0493\x02\x02\u1795\u1792\x03\x02\x02\x02\u1795\u1796" +
		"\x03\x02\x02\x02\u1796\u17AA\x03\x02\x02\x02\u1797\u1798\x07\x9E\x02\x02" +
		"\u1798\u17AA\t\\\x02\x02\u1799\u179A\x07\x9E\x02\x02\u179A\u179C\x07@" +
		"\x02\x02\u179B\u179D\x05\u021C\u010F\x02\u179C\u179B\x03\x02\x02\x02\u179C" +
		"\u179D\x03\x02\x02\x02\u179D\u179E\x03\x02\x02\x02\u179E\u179F\x07C\x02" +
		"\x02\u179F\u17AA\x05\u0254\u012B\x02\u17A0\u17A1\x07\x9E\x02\x02\u17A1" +
		"\u17A3\x07\x85\x02\x02\u17A2\u17A4\x07\x13\x02\x02\u17A3\u17A2\x03\x02" +
		"\x02\x02\u17A3\u17A4\x03\x02\x02\x02\u17A4\u17A5\x03\x02\x02\x02\u17A5" +
		"\u17A7\x07\u027F\x02\x02\u17A6\u17A8\x05\u01FA\xFE\x02\u17A7\u17A6\x03" +
		"\x02\x02\x02\u17A7\u17A8\x03\x02\x02\x02\u17A8\u17AA\x03\x02\x02\x02\u17A9" +
		"\u16EA\x03\x02\x02\x02\u17A9\u16ED\x03\x02\x02\x02\u17A9\u16FB\x03\x02" +
		"\x02\x02\u17A9\u1711\x03\x02\x02\x02\u17A9\u1716\x03\x02\x02\x02\u17A9" +
		"\u1724\x03\x02\x02\x02\u17A9\u172B\x03\x02\x02\x02\u17A9\u172F\x03\x02" +
		"\x02\x02\u17A9\u1736\x03\x02\x02\x02\u17A9\u173A\x03\x02\x02\x02\u17A9" +
		"\u173F\x03\x02\x02\x02\u17A9\u1742\x03\x02\x02\x02\u17A9\u1744\x03\x02" +
		"\x02\x02\u17A9\u1749\x03\x02\x02\x02\u17A9\u174F\x03\x02\x02\x02\u17A9" +
		"\u1758\x03\x02\x02\x02\u17A9\u175C\x03\x02\x02\x02\u17A9\u1762\x03\x02" +
		"\x02\x02\u17A9\u176E\x03\x02\x02\x02\u17A9\u1778\x03\x02\x02\x02\u17A9" +
		"\u178C\x03\x02\x02\x02\u17A9\u1797\x03\x02\x02\x02\u17A9\u1799\x03\x02" +
		"\x02\x02\u17A9\u17A0\x03\x02\x02\x02\u17AA\u01F3\x03\x02\x02\x02\u17AB" +
		"\u17AD\x07@\x02\x02\u17AC\u17AE\x05\u021C\u010F\x02\u17AD\u17AC\x03\x02" +
		"\x02\x02\u17AD\u17AE\x03\x02\x02\x02\u17AE\u17AF\x03\x02\x02\x02\u17AF" +
		"\u17B0\x07C\x02\x02\u17B0\u17B1\x07\u017A\x02\x02\u17B1\u17B2\x05\u0254" +
		"\u012B\x02\u17B2\u01F5\x03\x02\x02\x02\u17B3\u17BE\x07\u04A0\x02\x02\u17B4" +
		"\u17BE\x07\u04A1\x02\x02\u17B5\u17B6\x07\u0488\x02\x02\u17B6\u17B8\x07" +
		"\u0488\x02\x02\u17B7\u17B5\x03\x02\x02\x02\u17B7\u17B8\x03\x02\x02\x02" +
		"\u17B8\u17B9\x03\x02\x02\x02\u17B9\u17BB\t]\x02\x02\u17BA\u17B7\x03\x02" +
		"\x02\x02\u17BA\u17BB\x03\x02\x02\x02\u17BB\u17BC\x03\x02\x02\x02\u17BC" +
		"\u17BE\x05\u024E\u0128\x02\u17BD\u17B3\x03\x02\x02\x02\u17BD\u17B4\x03" +
		"\x02\x02\x02\u17BD\u17BA\x03\x02\x02\x02\u17BE\u01F7\x03\x02\x02\x02\u17BF" +
		"\u17C0\x07\x1C\x02\x02\u17C0\u17CD\x07\x9C\x02\x02\u17C1\u17CD\x07\u0355" +
		"\x02\x02\u17C2\u17CD\x07+\x02\x02\u17C3\u17CD\x07\x9A\x02\x02\u17C4\u17C5" +
		"\x07\u01B7\x02\x02\u17C5\u17CD\x07\u027F\x02\x02\u17C6\u17C7\x07\x86\x02" +
		"\x02\u17C7\u17CD\x07\u027F\x02\x02\u17C8\u17CA\t=\x02\x02\u17C9\u17C8" +
		"\x03\x02\x02\x02\u17C9\u17CA\x03\x02\x02\x02\u17CA\u17CB\x03\x02\x02\x02" +
		"\u17CB\u17CD\t^\x02\x02\u17CC\u17BF\x03\x02\x02\x02\u17CC\u17C1\x03\x02" +
		"\x02\x02\u17CC\u17C2\x03\x02\x02\x02\u17CC\u17C3\x03\x02\x02\x02\u17CC" +
		"\u17C4\x03\x02\x02\x02\u17CC\u17C6\x03\x02\x02\x02\u17CC\u17C9\x03\x02" +
		"\x02\x02\u17CD\u01F9\x03\x02\x02\x02\u17CE\u17CF\x07d\x02\x02\u17CF\u17D3" +
		"\x07\u0493\x02\x02\u17D0\u17D1\x07\xC0\x02\x02\u17D1\u17D3\x05\u02B6\u015C" +
		"\x02\u17D2\u17CE\x03\x02\x02\x02\u17D2\u17D0\x03\x02\x02\x02\u17D3\u01FB" +
		"\x03\x02\x02\x02\u17D4\u17D6\x07\u0281\x02\x02\u17D5\u17D4\x03\x02\x02" +
		"\x02\u17D5\u17D6\x03\x02\x02\x02\u17D6\u17D7\x03\x02\x02\x02\u17D7\u17F6" +
		"\x07\u019C\x02\x02\u17D8\u17D9\t_\x02\x02\u17D9\u17F6\x07\u027F\x02\x02" +
		"\u17DA\u17E0\x07\u022F\x02\x02\u17DB\u17DE\x07\u0270\x02\x02\u17DC\u17DF" +
		"\x07\u0493\x02\x02\u17DD\u17DF\x05\u01FA\xFE\x02\u17DE\u17DC\x03\x02\x02" +
		"\x02\u17DE\u17DD\x03\x02\x02\x02\u17DF\u17E1\x03\x02\x02\x02\u17E0\u17DB" +
		"\x03\x02\x02\x02\u17E0\u17E1\x03\x02\x02\x02\u17E1\u17F6\x03\x02\x02\x02" +
		"\u17E2\u17F6\x07\u02DE\x02\x02\u17E3\u17E5\x07\u01B6\x02\x02\u17E4\u17E3" +
		"\x03\x02\x02\x02\u17E4\u17E5\x03\x02\x02\x02\u17E5\u17E6\x03\x02\x02\x02" +
		"\u17E6\u17F6\x07\u0236\x02\x02\u17E7\u17F6\x07\u0238\x02\x02\u17E8\u17F6" +
		"\x07\u01DD\x02\x02\u17E9\u17EA\t[\x02\x02\u17EA\u17F6\x07\u01C1\x02\x02" +
		"\u17EB\u17F6\x07\u0155\x02\x02\u17EC\u17F6\x07\u0181\x02\x02\u17ED\u17F6" +
		"\x07\u023B\x02\x02\u17EE\u17EF\x07\b\x02\x02\u17EF\u17F0\t`\x02\x02\u17F0" +
		"\u17F6\x07\u027F\x02\x02\u17F1\u17F6\x07\u02AE\x02\x02\u17F2\u17F6\x07" +
		"\u02AF\x02\x02\u17F3\u17F4\x07\xAE\x02\x02\u17F4\u17F6\x07\u0296\x02\x02" +
		"\u17F5\u17D5\x03\x02\x02\x02\u17F5\u17D8\x03\x02\x02\x02\u17F5\u17DA\x03" +
		"\x02\x02\x02\u17F5\u17E2\x03\x02\x02\x02\u17F5\u17E4\x03\x02\x02\x02\u17F5" +
		"\u17E7\x03\x02\x02\x02\u17F5\u17E8\x03\x02\x02\x02\u17F5\u17E9\x03\x02" +
		"\x02\x02\u17F5\u17EB\x03\x02\x02\x02\u17F5\u17EC\x03\x02\x02\x02\u17F5" +
		"\u17ED\x03\x02\x02\x02\u17F5\u17EE\x03\x02\x02\x02\u17F5\u17F1\x03\x02" +
		"\x02\x02\u17F5\u17F2\x03\x02\x02\x02\u17F5\u17F3\x03\x02\x02\x02\u17F6" +
		"\u01FD\x03\x02\x02\x02\u17F7\u1800\x07\u01A2\x02\x02\u17F8\u17F9\x07\xAE" +
		"\x02\x02\u17F9\u1800\x07\u027F\x02\x02\u17FA\u17FC\x07\u01B6\x02\x02\u17FB" +
		"\u17FA\x03\x02\x02\x02\u17FB\u17FC\x03\x02\x02\x02\u17FC\u17FD\x03\x02" +
		"\x02\x02\u17FD\u1800\x07\u02EF\x02\x02\u17FE\u1800\x07\u0294\x02\x02\u17FF" +
		"\u17F7\x03\x02\x02\x02\u17FF\u17F8\x03\x02\x02\x02\u17FF\u17FB\x03\x02" +
		"\x02\x02\u17FF\u17FE\x03\x02\x02\x02\u1800\u01FF\x03\x02\x02\x02\u1801" +
		"\u180E\x07\b\x02\x02\u1802\u1803\x07\u015D\x02\x02\u1803\u180E\x07\u01CF" +
		"\x02\x02\u1804\u1805\x07\u0180\x02\x02\u1805\u180E\x07\u028A\x02\x02\u1806" +
		"\u180E\x07\u0183\x02\x02\u1807\u180E\x07\u01D1\x02\x02\u1808\u180E\x07" +
		"\u0321\x02\x02\u1809\u180A\x07\u0223\x02\x02\u180A\u180E\x07\u01AC\x02" +
		"\x02\u180B\u180E\x07\u0272\x02\x02\u180C\u180E\x07\u0289\x02\x02\u180D" +
		"\u1801\x03\x02\x02\x02\u180D\u1802\x03\x02\x02\x02\u180D\u1804\x03\x02" +
		"\x02\x02\u180D\u1806\x03\x02\x02\x02\u180D\u1807\x03\x02\x02\x02\u180D" +
		"\u1808\x03\x02\x02\x02\u180D\u1809\x03\x02\x02\x02\u180D\u180B\x03\x02" +
		"\x02\x02\u180D\u180C\x03\x02\x02\x02\u180E\u0201\x03\x02\x02\x02\u180F" +
		"\u1810\x07\u015B\x02\x02\u1810\u1811\x07\u0493\x02\x02\u1811\u0203\x03" +
		"\x02\x02\x02\u1812\u1813\x07\u0161\x02\x02\u1813\u1814\x07S\x02\x02\u1814" +
		"\u1819\x05\u0210\u0109\x02\u1815\u1816\x07\u0486\x02\x02\u1816\u1818\x05" +
		"\u0210\u0109\x02\u1817\u1815\x03\x02\x02\x02\u1818\u181B\x03\x02\x02\x02" +
		"\u1819\u1817\x03\x02\x02\x02\u1819\u181A\x03\x02\x02\x02\u181A\u1823\x03" +
		"\x02\x02\x02\u181B\u1819\x03\x02\x02\x02\u181C\u181D\x07\x83\x02\x02\u181D" +
		"\u1820\x07\u0484\x02\x02\u181E\u1821\x05\u026E\u0138\x02\u181F\u1821\x07" +
		"\b\x02\x02\u1820\u181E\x03\x02\x02\x02\u1820\u181F\x03\x02\x02\x02\u1821" +
		"\u1822\x03\x02\x02\x02\u1822\u1824\x07\u0485\x02\x02\u1823\u181C\x03\x02" +
		"\x02\x02\u1823\u1824\x03\x02\x02\x02\u1824\u1825\x03\x02\x02\x02\u1825" +
		"\u1826\x07R\x02\x02\u1826\u1827\x05\u024E\u0128\x02\u1827\u0205\x03\x02" +
		"\x02\x02\u1828\u182A\x07\u01B2\x02\x02\u1829\u182B\tQ\x02\x02\u182A\u1829" +
		"\x03\x02\x02\x02\u182A\u182B\x03\x02\x02\x02\u182B\u182C\x03\x02\x02\x02" +
		"\u182C\u1831\x05\u0212\u010A\x02\u182D\u182E\x07\u0486\x02\x02\u182E\u1830" +
		"\x05\u0212\u010A\x02\u182F\u182D\x03\x02\x02\x02\u1830\u1833\x03\x02\x02" +
		"\x02\u1831\u182F\x03\x02\x02\x02\u1831\u1832\x03\x02\x02\x02\u1832\u1837" +
		"\x03\x02\x02\x02\u1833\u1831\x03\x02\x02\x02\u1834\u1835\x07\u01B2\x02" +
		"\x02\u1835\u1837\t\\\x02\x02\u1836\u1828\x03\x02\x02\x02\u1836\u1834\x03" +
		"\x02\x02\x02\u1837\u0207\x03\x02\x02\x02\u1838\u183A\x07_\x02\x02\u1839" +
		"\u183B\ta\x02\x02\u183A\u1839\x03\x02\x02\x02\u183A\u183B\x03\x02\x02" +
		"\x02\u183B\u183C\x03\x02\x02\x02\u183C\u183D\x05\u02B6\u015C\x02\u183D" +
		"\u0209\x03\x02\x02\x02\u183E\u183F\x07h\x02\x02\u183F\u1840\x07S\x02\x02" +
		"\u1840\u1841\x07Y\x02\x02\u1841\u1842\x07\u0161\x02\x02\u1842\u1847\x05" +
		"\u0216\u010C\x02\u1843\u1844\x07\u0486\x02\x02\u1844\u1846\x05\u0216\u010C" +
		"\x02\u1845\u1843\x03\x02\x02\x02\u1846\u1849\x03\x02\x02\x02\u1847\u1845" +
		"\x03\x02\x02\x02\u1847\u1848\x03\x02\x02\x02\u1848\u020B\x03\x02\x02\x02" +
		"\u1849\u1847\x03\x02\x02\x02\u184A\u184B\x07\u0251\x02\x02\u184B\u184C" +
		"\x07\u023A\x02\x02\u184C\u184D\x07\u0161\x02\x02\u184D\u020D\x03\x02\x02" +
		"\x02\u184E\u184F\x07\u02EC\x02\x02\u184F\u020F\x03\x02\x02\x02\u1850\u1858" +
		"\x05\u0230\u0119\x02\u1851\u1853\t\x19\x02\x02\u1852\u1851\x03\x02\x02" +
		"\x02\u1852\u1853\x03\x02\x02\x02\u1853\u1854\x03\x02\x02\x02\u1854\u1855" +
		"\x07\u0484\x02\x02\u1855\u1856\x05\u026E\u0138\x02\u1856\u1857\x07\u0485" +
		"\x02\x02\u1857\u1859\x03\x02\x02\x02\u1858\u1852\x03\x02\x02\x02\u1858" +
		"\u1859\x03\x02\x02\x02\u1859\u0211\x03\x02\x02\x02\u185A\u186D\x07\u018C" +
		"\x02\x02\u185B\u186D\x07\u01C1\x02\x02\u185C\u185E\tb\x02\x02\u185D\u185C" +
		"\x03\x02\x02\x02\u185D\u185E\x03\x02\x02\x02\u185E\u185F\x03\x02\x02\x02" +
		"\u185F\u186D\x07\u01DF\x02\x02\u1860\u186D\x07\u021F\x02\x02\u1861\u186D" +
		"\x07\u02DE\x02\x02\u1862\u1863\x07\u023A\x02\x02\u1863\u186D\x07\u0161" +
		"\x02\x02\u1864\u186D\x07\u027F\x02\x02\u1865\u186D\x07\u02A1\x02\x02\u1866" +
		"\u186A\x07\u02EF\x02\x02\u1867\u1868\x07\xC2\x02\x02\u1868\u1869\x07\x89" +
		"\x02\x02\u1869\u186B\x07i\x02\x02\u186A\u1867\x03\x02\x02\x02\u186A\u186B" +
		"\x03\x02\x02\x02\u186B\u186D\x03\x02\x02\x02\u186C\u185A\x03\x02\x02\x02" +
		"\u186C\u185B\x03\x02\x02\x02\u186C\u185D\x03\x02\x02\x02\u186C\u1860\x03" +
		"\x02\x02\x02\u186C\u1861\x03\x02\x02\x02\u186C\u1862\x03\x02\x02\x02\u186C" +
		"\u1864\x03\x02\x02\x02\u186C\u1865\x03\x02\x02\x02\u186C\u1866\x03\x02" +
		"\x02\x02\u186D\u187B\x03\x02\x02\x02\u186E\u186F\x07\u0242\x02\x02\u186F" +
		"\u1871\x07\u01DF\x02\x02\u1870\u1872\x05\u016E\xB8\x02\u1871\u1870\x03" +
		"\x02\x02\x02\u1871\u1872\x03\x02\x02\x02\u1872\u187B\x03\x02\x02\x02\u1873" +
		"\u1875\t<\x02\x02\u1874\u1876\x05\u0270\u0139\x02\u1875\u1874\x03\x02" +
		"\x02\x02\u1875\u1876\x03\x02\x02\x02\u1876\u1878\x03\x02\x02\x02\u1877" +
		"\u1879\x05\u0214\u010B\x02\u1878\u1877\x03\x02\x02\x02\u1878\u1879\x03" +
		"\x02\x02\x02\u1879\u187B\x03\x02\x02\x02\u187A\u186C\x03\x02\x02\x02\u187A" +
		"\u186E\x03\x02\x02\x02\u187A\u1873\x03\x02\x02\x02\u187B\u0213\x03\x02" +
		"\x02\x02\u187C\u187D\x07\xC2\x02\x02\u187D\u187E\x07\x89\x02\x02\u187E" +
		"\u1882\x07i\x02\x02\u187F\u1880\x07C\x02\x02\u1880\u1882\x07\u01A7\x02" +
		"\x02\u1881\u187C\x03\x02\x02\x02\u1881\u187F\x03\x02\x02\x02\u1882\u0215" +
		"\x03\x02\x02\x02\u1883\u188B\x05\u0230\u0119\x02\u1884\u1885\x07\x83\x02" +
		"\x02\u1885\u1888\x07\u0484\x02\x02\u1886\u1889\x05\u026E\u0138\x02\u1887" +
		"\u1889\x07\b\x02\x02\u1888\u1886\x03\x02\x02\x02\u1888\u1887\x03\x02\x02" +
		"\x02\u1889\u188A\x03\x02\x02\x02\u188A\u188C\x07\u0485\x02\x02\u188B\u1884" +
		"\x03\x02\x02\x02\u188B\u188C\x03\x02\x02\x02\u188C\u1894\x03\x02\x02\x02" +
		"\u188D\u188F\t\x19\x02\x02\u188E\u188D\x03\x02\x02\x02\u188E\u188F\x03" +
		"\x02\x02\x02\u188F\u1890\x03\x02\x02\x02\u1890\u1891\x07\u0484\x02\x02" +
		"\u1891\u1892\x05\u026E\u0138\x02\u1892\u1893\x07\u0485\x02\x02\u1893\u1895" +
		"\x03\x02\x02\x02\u1894\u188E\x03\x02\x02\x02\u1894\u1895\x03\x02\x02\x02" +
		"\u1895\u1898\x03\x02\x02\x02\u1896\u1897\x07P\x02\x02\u1897\u1899\x07" +
		"\u01D8\x02\x02\u1898\u1896\x03\x02\x02\x02\u1898\u1899\x03\x02\x02\x02" +
		"\u1899\u0217\x03\x02\x02\x02\u189A\u189B\tc\x02\x02\u189B\u189E\x05\u0230" +
		"\u0119\x02\u189C\u189F\x05\u024E\u0128\x02\u189D\u189F\x07\u0493\x02\x02" +
		"\u189E\u189C\x03\x02\x02\x02\u189E\u189D\x03\x02\x02\x02\u189E\u189F\x03" +
		"\x02\x02\x02\u189F\u0219\x03\x02\x02\x02\u18A0\u18A4\tc\x02\x02\u18A1" +
		"\u18A2\td\x02\x02\u18A2\u18A3\x07\u047B\x02\x02\u18A3\u18A5\te\x02\x02" +
		"\u18A4\u18A1\x03\x02\x02\x02\u18A4\u18A5\x03\x02\x02\x02\u18A5\u18A6\x03" +
		"\x02\x02\x02\u18A6\u18A7\x05\u022C\u0117\x02\u18A7\u021B\x03\x02\x02\x02" +
		"\u18A8\u18A9\x07\u037E\x02\x02\u18A9\u18AA\x07\u047B\x02\x02\u18AA\u18AB" +
		"\x07\u01D4\x02\x02\u18AB\u021D\x03\x02\x02\x02\u18AC\u18AD\x07\u01BE\x02" +
		"\x02\u18AD\u18AE\x07\u0493\x02\x02\u18AE\u021F\x03\x02\x02\x02\u18AF\u18B0" +
		"\x07\xBC\x02\x02\u18B0\u18B1\x05\u024E\u0128\x02\u18B1\u0221\x03\x02\x02" +
		"\x02\u18B2\u18BA\x07\x9F\x02\x02\u18B3\u18B5\x07\xA4\x02\x02\u18B4\u18B6" +
		"\x07\u02A3\x02\x02\u18B5\u18B4\x03\x02\x02\x02\u18B5\u18B6\x03\x02\x02" +
		"\x02\u18B6\u18B7\x03\x02\x02\x02\u18B7\u18BB\x05\u0258\u012D\x02\u18B8" +
		"\u18BB\x07\u049B\x02\x02\u18B9\u18BB\x07\u049C\x02\x02\u18BA\u18B3\x03" +
		"\x02\x02\x02\u18BA\u18B8\x03\x02\x02\x02\u18BA\u18B9\x03\x02\x02\x02\u18BB" +
		"\u18C5\x03\x02\x02\x02\u18BC\u18BD\x07\x9C\x02\x02\u18BD\u18C2\x05\u0226" +
		"\u0114\x02\u18BE\u18BF\x07\u0486\x02\x02\u18BF\u18C1\x05\u0226\u0114\x02" +
		"\u18C0\u18BE\x03\x02\x02\x02\u18C1\u18C4\x03\x02\x02\x02\u18C2\u18C0\x03" +
		"\x02\x02\x02\u18C2\u18C3\x03\x02\x02\x02\u18C3\u18C6\x03\x02\x02\x02\u18C4" +
		"\u18C2\x03\x02\x02\x02\u18C5\u18BC\x03\x02\x02\x02\u18C5\u18C6\x03\x02" +
		"\x02\x02\u18C6\u0223\x03\x02\x02\x02\u18C7\u18CF\x07\x92\x02\x02\u18C8" +
		"\u18CA\x07\xA4\x02\x02\u18C9\u18CB\x07\u02A3\x02\x02\u18CA\u18C9\x03\x02" +
		"\x02\x02\u18CA\u18CB\x03\x02\x02\x02\u18CB\u18CC\x03\x02\x02\x02\u18CC" +
		"\u18D0\x05\u0258\u012D\x02\u18CD\u18D0\x07\u049B\x02\x02\u18CE\u18D0\x07" +
		"\u049C\x02\x02\u18CF\u18C8\x03\x02\x02\x02\u18CF\u18CD\x03\x02\x02\x02" +
		"\u18CF\u18CE\x03\x02\x02\x02\u18CF\u18D0\x03\x02\x02\x02\u18D0\u18DA\x03" +
		"\x02\x02\x02\u18D1\u18D2\x07\x9C\x02\x02\u18D2\u18D7\x05\u0226\u0114\x02" +
		"\u18D3\u18D4\x07\u0486\x02\x02\u18D4\u18D6\x05\u0226\u0114\x02\u18D5\u18D3" +
		"\x03\x02\x02\x02\u18D6\u18D9\x03\x02\x02\x02\u18D7\u18D5\x03\x02\x02\x02" +
		"\u18D7\u18D8\x03\x02\x02\x02\u18D8\u18DB\x03\x02\x02\x02\u18D9\u18D7\x03" +
		"\x02\x02\x02\u18DA\u18D1\x03\x02\x02\x02\u18DA\u18DB\x03\x02\x02\x02\u18DB" +
		"\u0225\x03\x02\x02\x02\u18DC\u18DD\tf\x02\x02\u18DD\u18E2\x07\u047B\x02" +
		"\x02\u18DE\u18E3\x05\u0258\u012D\x02\u18DF\u18E3\x07\u0494\x02\x02\u18E0" +
		"\u18E3\x05\u023A\u011E\x02\u18E1\u18E3\x05\u0250\u0129\x02\u18E2\u18DE" +
		"\x03\x02\x02\x02\u18E2\u18DF\x03\x02\x02\x02\u18E2\u18E0\x03\x02\x02\x02" +
		"\u18E2\u18E1\x03\x02\x02\x02\u18E3\u0227\x03\x02\x02\x02\u18E4\u18E6\x07" +
		"I\x02\x02\u18E5\u18E7\tg\x02\x02\u18E6\u18E5\x03\x02\x02\x02\u18E6\u18E7" +
		"\x03\x02\x02\x02\u18E7\u18E8\x03\x02\x02\x02\u18E8\u1908\x073\x02\x02" +
		"\u18E9\u18EA\x05\u01F6\xFC\x02\u18EA\u18EB\x07\u047B\x02\x02\u18EB\u18F3" +
		"\th\x02\x02\u18EC\u18ED\x07\u0486\x02\x02\u18ED\u18EE\x05\u01F6\xFC\x02" +
		"\u18EE\u18EF\x07\u047B\x02\x02\u18EF\u18F0\th\x02\x02\u18F0\u18F2\x03" +
		"\x02\x02\x02\u18F1\u18EC\x03\x02\x02\x02\u18F2\u18F5\x03\x02\x02\x02\u18F3" +
		"\u18F1\x03\x02\x02\x02\u18F3\u18F4\x03\x02\x02\x02\u18F4\u1909\x03\x02" +
		"\x02\x02\u18F5\u18F3\x03\x02\x02\x02\u18F6\u18F9\x07 \x02\x02\u18F7\u18FA" +
		"\x05\u0254\u012B\x02\u18F8\u18FA\x05\u01F6\xFC\x02\u18F9\u18F7\x03\x02" +
		"\x02\x02\u18F9\u18F8\x03\x02\x02\x02\u18FA\u18FB\x03\x02\x02\x02\u18FB" +
		"\u18FC\x05\u01F6\xFC\x02\u18FC\u18FD\x07\u047B\x02\x02\u18FD\u1905\x05" +
		"\u022A\u0116\x02\u18FE\u18FF\x07\u0486\x02\x02\u18FF\u1900\x05\u01F6\xFC" +
		"\x02\u1900\u1901\x07\u047B\x02\x02\u1901\u1902\x05\u022A\u0116\x02\u1902" +
		"\u1904\x03\x02\x02\x02\u1903\u18FE\x03\x02\x02\x02\u1904\u1907\x03\x02" +
		"\x02\x02\u1905\u1903\x03\x02\x02\x02\u1905\u1906\x03\x02\x02\x02\u1906" +
		"\u1909\x03\x02\x02\x02\u1907\u1905\x03\x02\x02\x02\u1908\u18E9\x03\x02" +
		"\x02\x02\u1908\u18F6\x03\x02\x02\x02\u1909\u0229\x03\x02\x02\x02\u190A" +
		"\u190B\ti\x02\x02\u190B\u022B\x03\x02\x02\x02\u190C\u1912\x05\xD4k\x02" +
		"\u190D\u1912\x05\xC6d\x02\u190E\u1912\x05\xCCg\x02\u190F\u1912\x05\xD2" +
		"j\x02\u1910\u1912\x05\xD6l\x02\u1911\u190C\x03\x02\x02\x02\u1911\u190D" +
		"\x03\x02\x02\x02\u1911\u190E\x03\x02\x02\x02\u1911\u190F\x03\x02\x02\x02" +
		"\u1911\u1910\x03\x02\x02\x02\u1912\u1917\x03\x02\x02\x02\u1913\u1914\x07" +
		"C\x02\x02\u1914\u1915\x07\u017A\x02\x02\u1915\u1917\x05\u024E\u0128\x02" +
		"\u1916\u1911\x03\x02\x02\x02\u1916\u1913\x03\x02\x02\x02\u1917\u022D\x03" +
		"\x02\x02\x02\u1918\u191C\x05\u024E\u0128\x02\u1919\u191D\x07\u049A\x02" +
		"\x02\u191A\u191B\x07\u0483\x02\x02\u191B\u191D\x05\u024E\u0128\x02\u191C" +
		"\u1919\x03\x02\x02\x02\u191C\u191A\x03\x02\x02\x02\u191C\u191D\x03\x02" +
		"\x02\x02\u191D\u022F\x03\x02\x02\x02\u191E\u191F\x05\u022E\u0118\x02\u191F" +
		"\u0231\x03\x02\x02\x02\u1920\u1923\x05\u0238\u011D\x02\u1921\u1923\x05" +
		"\u024E\u0128\x02\u1922\u1920\x03\x02\x02\x02\u1922\u1921\x03\x02\x02\x02" +
		"\u1923\u0233\x03\x02\x02\x02\u1924\u1929\x05\u024E\u0128\x02\u1925\u1927" +
		"\x05\u0252\u012A\x02\u1926\u1928\x05\u0252\u012A\x02\u1927\u1926\x03\x02" +
		"\x02\x02\u1927\u1928\x03\x02\x02\x02\u1928\u192A\x03\x02\x02\x02\u1929" +
		"\u1925\x03\x02\x02\x02\u1929\u192A\x03\x02\x02\x02\u192A\u1931\x03\x02" +
		"\x02\x02\u192B\u192C\v\x02\x02\x02\u192C\u192E\x05\u0252\u012A\x02\u192D" +
		"\u192F\x05\u0252\u012A\x02\u192E\u192D\x03\x02\x02\x02\u192E\u192F\x03" +
		"\x02\x02\x02\u192F\u1931\x03\x02\x02\x02\u1930\u1924\x03\x02\x02\x02\u1930" +
		"\u192B\x03\x02\x02\x02\u1931\u0235\x03\x02\x02\x02\u1932\u1935\x05\u024E" +
		"\u0128\x02\u1933\u1935\x07\u0493\x02\x02\u1934\u1932\x03\x02\x02\x02\u1934" +
		"\u1933\x03\x02\x02\x02\u1935\u193A\x03\x02\x02\x02\u1936\u1937\x07\u0484" +
		"\x02\x02\u1937\u1938\x05\u0254\u012B\x02\u1938\u1939\x07\u0485\x02\x02" +
		"\u1939\u193B\x03\x02\x02\x02\u193A\u1936\x03\x02\x02\x02\u193A\u193B\x03" +
		"\x02\x02\x02\u193B\u193E\x03\x02\x02\x02\u193C\u193E\x05\u02B6\u015C\x02" +
		"\u193D\u1934\x03\x02\x02\x02\u193D\u193C\x03\x02\x02\x02\u193E\u1940\x03" +
		"\x02\x02\x02\u193F\u1941\t6\x02\x02\u1940\u193F\x03\x02\x02\x02\u1940" +
		"\u1941\x03\x02\x02\x02\u1941\u0237\x03\x02\x02\x02\u1942\u194A\x07\u049D" +
		"\x02\x02\u1943\u194A\x07\u049F\x02\x02\u1944\u194A\x07\u049B\x02\x02\u1945" +
		"\u194A\x07\u0493\x02\x02\u1946\u194A\x07\u02C5\x02\x02\u1947\u194A\x05" +
		"\u02D2\u016A\x02\u1948\u194A\x05F$\x02\u1949\u1942\x03\x02\x02\x02\u1949" +
		"\u1943\x03\x02\x02\x02\u1949\u1944\x03\x02\x02\x02\u1949\u1945\x03\x02" +
		"\x02\x02\u1949\u1946\x03\x02\x02\x02\u1949\u1947\x03\x02\x02\x02\u1949" +
		"\u1948\x03\x02\x02\x02\u194A\u0239\x03\x02\x02\x02\u194B\u194C\tj\x02" +
		"\x02\u194C\u023B\x03\x02\x02\x02\u194D\u1952\x07\xE4\x02\x02\u194E\u1952" +
		"\x05\u02C8\u0165\x02\u194F\u1952\x07\u0493\x02\x02\u1950\u1952\x07\u0490" +
		"\x02\x02\u1951\u194D\x03\x02\x02\x02\u1951\u194E\x03\x02\x02\x02\u1951" +
		"\u194F\x03\x02\x02\x02\u1951\u1950\x03\x02\x02\x02\u1952\u023D\x03\x02" +
		"\x02\x02\u1953\u1956\x05\u024E\u0128\x02\u1954\u1956\x07\u0493\x02\x02" +
		"\u1955\u1953\x03\x02\x02\x02\u1955\u1954\x03\x02\x02\x02\u1956\u023F\x03" +
		"\x02\x02\x02\u1957\u195B\x05\u0242\u0122\x02\u1958\u195B\x07\u049B\x02" +
		"\x02\u1959\u195B\x07\u0493\x02\x02\u195A\u1957\x03\x02\x02\x02\u195A\u1958" +
		"\x03\x02\x02\x02\u195A\u1959\x03\x02\x02\x02\u195B\u0241\x03\x02\x02\x02" +
		"\u195C\u195D\tk\x02\x02\u195D\u0243\x03\x02\x02\x02\u195E\u195F\tl\x02" +
		"\x02\u195F\u0245\x03\x02\x02\x02\u1960\u1961\x05\u0254\u012B\x02\u1961" +
		"\u1962\x07\u0478\x02\x02\u1962\u1963\x05\u0254\u012B\x02\u1963\u1964\x07" +
		"\u0478\x02\x02\u1964\u1965\x05\u0254\u012B\x02\u1965\u1966\x07\u0478\x02" +
		"\x02\u1966\u1967\x05\u0254\u012B\x02\u1967\u1968\x07\u0478\x02\x02\u1968" +
		"\u196E\x05\u0254\u012B\x02\u1969\u196A\x07\u048F\x02\x02\u196A\u196B\x05" +
		"\u0254\u012B\x02\u196B\u196C\x07\u0478\x02\x02\u196C\u196D\x05\u0254\u012B" +
		"\x02\u196D\u196F\x03\x02\x02\x02\u196E\u1969\x03\x02\x02\x02\u196F\u1970" +
		"\x03\x02\x02\x02\u1970\u196E\x03\x02\x02\x02\u1970\u1971\x03\x02\x02\x02" +
		"\u1971\u0247\x03\x02\x02\x02\u1972\u1979\x05\u024A\u0126\x02\u1973\u1974" +
		"\x07\u0486\x02\x02\u1974\u1977\x05\u024A\u0126\x02\u1975\u1976\x07\u0486" +
		"\x02\x02\u1976\u1978\x05\u0254\u012B\x02\u1977\u1975\x03\x02\x02\x02\u1977" +
		"\u1978\x03\x02\x02\x02\u1978\u197A\x03\x02\x02\x02\u1979\u1973\x03\x02" +
		"\x02\x02\u1979\u197A\x03\x02\x02\x02\u197A\u0249\x03\x02\x02\x02\u197B" +
		"\u1983\x07\u0493\x02\x02\u197C\u1983\x07\u0498\x02\x02\u197D\u197F\x07" +
		"\u0495\x02\x02\u197E\u197D\x03\x02\x02\x02\u197F\u1980\x03\x02\x02\x02" +
		"\u1980\u197E\x03\x02\x02\x02\u1980\u1981\x03\x02\x02\x02\u1981\u1983\x03" +
		"\x02\x02\x02\u1982\u197B\x03\x02\x02\x02\u1982\u197C\x03\x02\x02\x02\u1982" +
		"\u197E\x03\x02\x02\x02\u1983\u024B\x03\x02\x02\x02\u1984\u1987\x05\u024E" +
		"\u0128\x02\u1985\u1987\x07\u0493\x02\x02\u1986\u1984\x03\x02\x02\x02\u1986" +
		"\u1985\x03\x02\x02\x02\u1987\u024D\x03\x02\x02\x02\u1988\u198C\x05\u0250" +
		"\u0129\x02\u1989\u198C\x07\u0490\x02\x02\u198A\u198C\x07\u0493\x02\x02" +
		"\u198B\u1988\x03\x02\x02\x02\u198B\u1989\x03\x02\x02\x02\u198B\u198A\x03" +
		"\x02\x02\x02\u198C\u024F\x03\x02\x02\x02\u198D\u1997\x07\u049B\x02\x02" +
		"\u198E\u1997\x05\u02C8\u0165\x02\u198F\u1997\x05\u02CA\u0166\x02\u1990" +
		"\u1997\x05\u0242\u0122\x02\u1991\u1997\x05\u02CC\u0167\x02\u1992\u1997" +
		"\x05\u02CE\u0168\x02\u1993\u1997\x05\u02D0\u0169\x02\u1994\u1997\x05\u02D2" +
		"\u016A\x02\u1995\u1997\x05\u02AE\u0158\x02\u1996\u198D\x03\x02\x02\x02" +
		"\u1996\u198E\x03\x02\x02\x02\u1996\u198F\x03\x02\x02\x02\u1996\u1990\x03" +
		"\x02\x02\x02\u1996\u1991\x03\x02\x02\x02\u1996\u1992\x03\x02\x02\x02\u1996" +
		"\u1993\x03\x02\x02\x02\u1996\u1994\x03\x02\x02\x02\u1996\u1995\x03\x02" +
		"\x02\x02\u1997\u0251\x03\x02\x02\x02\u1998\u199C\x07\u049A\x02\x02\u1999" +
		"\u199A\x07\u0483\x02\x02\u199A\u199C\x05\u024E\u0128\x02\u199B\u1998\x03" +
		"\x02\x02\x02\u199B\u1999\x03\x02\x02\x02\u199C\u0253\x03\x02\x02\x02\u199D" +
		"\u199E\tm\x02\x02\u199E\u0255\x03\x02\x02\x02\u199F\u19A2\x07\u0491\x02" +
		"\x02\u19A0\u19A2\x05\u0254\u012B\x02\u19A1\u199F\x03\x02\x02\x02\u19A1" +
		"\u19A0\x03\x02\x02\x02\u19A2\u0257\x03\x02\x02\x02\u19A3\u19A5\x07\u0499" +
		"\x02\x02\u19A4\u19A3\x03\x02\x02\x02\u19A4\u19A5\x03\x02\x02\x02\u19A5" +
		"\u19A6\x03\x02\x02\x02\u19A6\u19A9\x07\u0493\x02\x02\u19A7\u19A9\x07\u0492" +
		"\x02\x02\u19A8\u19A4\x03\x02\x02\x02\u19A8\u19A7\x03\x02\x02\x02\u19A9" +
		"\u19AB\x03\x02\x02\x02\u19AA\u19AC\x07\u0493\x02\x02\u19AB\u19AA\x03\x02" +
		"\x02\x02\u19AC\u19AD\x03\x02\x02\x02\u19AD\u19AB\x03\x02\x02\x02\u19AD" +
		"\u19AE\x03\x02\x02\x02\u19AE\u19BB\x03\x02\x02\x02\u19AF\u19B1\x07\u0499" +
		"\x02\x02\u19B0\u19AF\x03\x02\x02\x02\u19B0\u19B1\x03\x02\x02\x02\u19B1" +
		"\u19B2\x03\x02\x02\x02\u19B2\u19B5\x07\u0493\x02\x02\u19B3\u19B5\x07\u0492" +
		"\x02\x02\u19B4\u19B0\x03\x02\x02\x02\u19B4\u19B3\x03\x02\x02\x02\u19B5" +
		"\u19B8\x03\x02\x02\x02\u19B6\u19B7\x07\x1E\x02\x02\u19B7\u19B9\x05\u023E" +
		"\u0120\x02\u19B8\u19B6\x03\x02\x02\x02\u19B8\u19B9\x03\x02\x02\x02\u19B9" +
		"\u19BB\x03\x02\x02\x02\u19BA\u19A8\x03\x02\x02\x02\u19BA\u19B4\x03\x02" +
		"\x02\x02\u19BB\u0259\x03\x02\x02\x02\u19BC\u19BD\tn\x02\x02\u19BD\u025B" +
		"\x03\x02\x02\x02\u19BE\u19C0\x07\u0499\x02\x02\u19BF\u19BE\x03\x02\x02" +
		"\x02\u19BF\u19C0\x03\x02\x02\x02\u19C0\u19C1\x03\x02\x02\x02\u19C1\u19C2" +
		"\x07\u0495\x02\x02\u19C2\u025D\x03\x02\x02\x02\u19C3\u19C5\x07t\x02\x02" +
		"\u19C4\u19C3\x03\x02\x02\x02\u19C4\u19C5\x03\x02\x02\x02\u19C5\u19C6\x03" +
		"\x02\x02\x02\u19C6\u19C7\to\x02\x02\u19C7\u025F\x03\x02\x02\x02\u19C8" +
		"\u19D5\x05\u0258\u012D\x02\u19C9\u19D5\x05\u0254\u012B\x02\u19CA\u19CB" +
		"\x07\u0478\x02\x02\u19CB\u19D5\x05\u0254\u012B\x02\u19CC\u19D5\x05\u025C" +
		"\u012F\x02\u19CD\u19D5\x05\u025A\u012E\x02\u19CE\u19D5\x07\u0496\x02\x02" +
		"\u19CF\u19D5\x07\u0498\x02\x02\u19D0\u19D2\x07t\x02\x02\u19D1\u19D0\x03" +
		"\x02\x02\x02\u19D1\u19D2\x03\x02\x02\x02\u19D2\u19D3\x03\x02\x02\x02\u19D3" +
		"\u19D5\to\x02\x02\u19D4\u19C8\x03\x02\x02\x02\u19D4\u19C9\x03\x02\x02" +
		"\x02\u19D4\u19CA\x03\x02\x02\x02\u19D4\u19CC\x03\x02\x02\x02\u19D4\u19CD" +
		"\x03\x02\x02\x02\u19D4\u19CE\x03\x02\x02\x02\u19D4\u19CF\x03\x02\x02\x02" +
		"\u19D4\u19D1\x03\x02\x02\x02\u19D5\u0261\x03\x02\x02\x02\u19D6\u19D8";
	private static readonly _serializedATNSegment13: string =
		"\tp\x02\x02\u19D7\u19D9\x07\xF0\x02\x02\u19D8\u19D7\x03\x02\x02\x02\u19D8" +
		"\u19D9\x03\x02\x02\x02\u19D9\u19DB\x03\x02\x02\x02\u19DA\u19DC\x05\u0268" +
		"\u0135\x02\u19DB\u19DA\x03\x02\x02\x02\u19DB\u19DC\x03\x02\x02\x02\u19DC" +
		"\u19DE\x03\x02\x02\x02\u19DD\u19DF\x07\xE4\x02\x02\u19DE\u19DD\x03\x02" +
		"\x02\x02\u19DE\u19DF\x03\x02\x02\x02\u19DF\u19E3\x03\x02\x02\x02\u19E0" +
		"\u19E1\x05D#\x02\u19E1\u19E2\x05\u023C\u011F\x02\u19E2\u19E4\x03\x02\x02" +
		"\x02\u19E3\u19E0\x03\x02\x02\x02\u19E3\u19E4\x03\x02\x02\x02\u19E4\u19E8" +
		"\x03\x02\x02\x02\u19E5\u19E6\x07\x1E\x02\x02\u19E6\u19E9\x05\u023E\u0120" +
		"\x02\u19E7\u19E9\x07\xE4\x02\x02\u19E8\u19E5\x03\x02\x02\x02\u19E8\u19E7" +
		"\x03\x02\x02\x02\u19E8\u19E9\x03\x02\x02\x02\u19E9\u1A51\x03\x02\x02\x02" +
		"\u19EA\u19EB\x07\xE3\x02\x02\u19EB\u19ED\tq\x02\x02\u19EC\u19EE\x05\u0268" +
		"\u0135\x02\u19ED\u19EC\x03\x02\x02\x02\u19ED\u19EE\x03\x02\x02\x02\u19EE" +
		"\u19F0\x03\x02\x02\x02\u19EF\u19F1\x07\xE4\x02\x02\u19F0\u19EF\x03\x02" +
		"\x02\x02\u19F0\u19F1\x03\x02\x02\x02\u19F1\u1A51\x03\x02\x02\x02\u19F2" +
		"\u19F3\x07\u0209\x02\x02\u19F3\u19F5\x07\xE1\x02\x02\u19F4\u19F6\x05\u0268" +
		"\u0135\x02\u19F5\u19F4\x03\x02\x02\x02\u19F5\u19F6\x03\x02\x02\x02\u19F6" +
		"\u19F8\x03\x02\x02\x02\u19F7\u19F9\x07\xE4\x02\x02\u19F8\u19F7\x03\x02" +
		"\x02\x02\u19F8\u19F9\x03\x02\x02\x02\u19F9\u1A51\x03\x02\x02\x02\u19FA" +
		"\u19FB\x07\xE3\x02\x02\u19FB\u19FC\tr\x02\x02\u19FC\u19FE\x07\xF0\x02" +
		"\x02\u19FD\u19FF\x05\u0268\u0135\x02\u19FE\u19FD\x03\x02\x02\x02\u19FE" +
		"\u19FF\x03\x02\x02\x02\u19FF\u1A01\x03\x02\x02\x02\u1A00\u1A02\x07\xE4" +
		"\x02\x02\u1A01\u1A00\x03\x02\x02\x02\u1A01\u1A02\x03\x02\x02\x02\u1A02" +
		"\u1A51\x03\x02\x02\x02\u1A03\u1A05\ts\x02\x02\u1A04\u1A06\x05\u0268\u0135" +
		"\x02\u1A05\u1A04\x03\x02\x02\x02\u1A05\u1A06\x03\x02\x02\x02\u1A06\u1A0A" +
		"\x03\x02\x02\x02\u1A07\u1A09\tt\x02\x02\u1A08\u1A07\x03\x02\x02\x02\u1A09" +
		"\u1A0C\x03\x02\x02\x02\u1A0A\u1A08\x03\x02\x02\x02\u1A0A\u1A0B\x03\x02" +
		"\x02\x02\u1A0B\u1A51\x03\x02\x02\x02\u1A0C\u1A0A\x03\x02\x02\x02\u1A0D" +
		"\u1A0F\x07\xD2\x02\x02\u1A0E\u1A10\x05\u026A\u0136\x02\u1A0F\u1A0E\x03" +
		"\x02\x02\x02\u1A0F\u1A10\x03\x02\x02\x02\u1A10\u1A14\x03\x02\x02\x02\u1A11" +
		"\u1A13\tt\x02\x02\u1A12\u1A11\x03\x02\x02\x02\u1A13\u1A16\x03\x02\x02" +
		"\x02\u1A14\u1A12\x03\x02\x02\x02\u1A14\u1A15\x03\x02\x02\x02\u1A15\u1A51" +
		"\x03\x02\x02\x02\u1A16\u1A14\x03\x02\x02\x02\u1A17\u1A19\x07\xD3\x02\x02" +
		"\u1A18\u1A1A\x07\xD4\x02\x02\u1A19\u1A18\x03\x02\x02\x02\u1A19\u1A1A\x03" +
		"\x02\x02\x02\u1A1A\u1A1C\x03\x02\x02\x02\u1A1B\u1A1D\x05\u026A\u0136\x02" +
		"\u1A1C\u1A1B\x03\x02\x02\x02\u1A1C\u1A1D\x03\x02\x02\x02\u1A1D\u1A21\x03" +
		"\x02\x02\x02\u1A1E\u1A20\tt\x02\x02\u1A1F\u1A1E\x03\x02\x02\x02\u1A20" +
		"\u1A23\x03\x02\x02\x02\u1A21\u1A1F\x03\x02\x02\x02\u1A21\u1A22\x03\x02" +
		"\x02\x02\u1A22\u1A51\x03\x02\x02\x02\u1A23\u1A21\x03\x02\x02\x02\u1A24" +
		"\u1A26\tu\x02\x02\u1A25\u1A27\x05\u026C\u0137\x02\u1A26\u1A25\x03\x02" +
		"\x02\x02\u1A26\u1A27\x03\x02\x02\x02\u1A27\u1A2B\x03\x02\x02\x02\u1A28" +
		"\u1A2A\tt\x02\x02\u1A29\u1A28\x03\x02\x02\x02\u1A2A\u1A2D\x03\x02\x02" +
		"\x02\u1A2B\u1A29\x03\x02\x02\x02\u1A2B\u1A2C\x03\x02\x02\x02\u1A2C\u1A51" +
		"\x03\x02\x02\x02\u1A2D\u1A2B\x03\x02\x02\x02\u1A2E\u1A51\tv\x02\x02\u1A2F" +
		"\u1A31\tw\x02\x02\u1A30\u1A32\x05\u0268\u0135\x02\u1A31\u1A30\x03\x02" +
		"\x02\x02\u1A31\u1A32\x03\x02\x02\x02\u1A32\u1A51\x03\x02\x02\x02\u1A33" +
		"\u1A34\tx\x02\x02\u1A34\u1A36\x05\u0264\u0133\x02\u1A35\u1A37\x07\xE4" +
		"\x02\x02\u1A36\u1A35\x03\x02\x02\x02\u1A36\u1A37\x03\x02\x02\x02\u1A37" +
		"\u1A3B\x03\x02\x02\x02\u1A38\u1A39\x05D#\x02\u1A39\u1A3A\x05\u023C\u011F" +
		"\x02\u1A3A\u1A3C\x03\x02\x02\x02\u1A3B\u1A38\x03\x02\x02\x02\u1A3B\u1A3C" +
		"\x03\x02\x02\x02\u1A3C\u1A51\x03\x02\x02\x02\u1A3D\u1A51\ty\x02\x02\u1A3E" +
		"\u1A40\x07\xE9\x02\x02\u1A3F\u1A41\x07\xE1\x02\x02\u1A40\u1A3F\x03\x02" +
		"\x02\x02\u1A40\u1A41\x03\x02\x02\x02\u1A41\u1A43\x03\x02\x02\x02\u1A42" +
		"\u1A44\x07\xE4\x02\x02\u1A43\u1A42\x03\x02\x02\x02\u1A43\u1A44\x03\x02" +
		"\x02\x02\u1A44\u1A48\x03\x02\x02\x02\u1A45\u1A46\x05D#\x02\u1A46\u1A47" +
		"\x05\u023C\u011F\x02\u1A47\u1A49\x03\x02\x02\x02\u1A48\u1A45\x03\x02\x02" +
		"\x02\u1A48\u1A49\x03\x02\x02\x02\u1A49\u1A4C\x03\x02\x02\x02\u1A4A\u1A4B" +
		"\x07\x1E\x02\x02\u1A4B\u1A4D\x05\u023E\u0120\x02\u1A4C\u1A4A\x03\x02\x02" +
		"\x02\u1A4C\u1A4D\x03\x02\x02\x02\u1A4D\u1A51\x03\x02\x02\x02\u1A4E\u1A4F" +
		"\x07\xE9\x02\x02\u1A4F\u1A51\x07\xE5\x02\x02\u1A50\u19D6\x03\x02\x02\x02" +
		"\u1A50\u19EA\x03\x02\x02\x02\u1A50\u19F2\x03\x02\x02\x02\u1A50\u19FA\x03" +
		"\x02\x02\x02\u1A50\u1A03\x03\x02\x02\x02\u1A50\u1A0D\x03\x02\x02\x02\u1A50" +
		"\u1A17\x03\x02\x02\x02\u1A50\u1A24\x03\x02\x02\x02\u1A50\u1A2E\x03\x02" +
		"\x02\x02\u1A50\u1A2F\x03\x02\x02\x02\u1A50\u1A33\x03\x02\x02\x02\u1A50" +
		"\u1A3D\x03\x02\x02\x02\u1A50\u1A3E\x03\x02\x02\x02\u1A50\u1A4E\x03\x02" +
		"\x02\x02\u1A51\u0263\x03\x02\x02\x02\u1A52\u1A53\x07\u0484\x02\x02\u1A53" +
		"\u1A58\x07\u0493\x02\x02\u1A54\u1A55\x07\u0486\x02\x02\u1A55\u1A57\x07" +
		"\u0493\x02\x02\u1A56\u1A54\x03\x02\x02\x02\u1A57\u1A5A\x03\x02\x02\x02" +
		"\u1A58\u1A56\x03\x02\x02\x02\u1A58\u1A59\x03\x02\x02\x02\u1A59\u1A5B\x03" +
		"\x02\x02\x02\u1A5A\u1A58\x03\x02\x02\x02\u1A5B\u1A5C\x07\u0485\x02\x02" +
		"\u1A5C\u0265\x03\x02\x02\x02\u1A5D\u1A5F\tz\x02\x02\u1A5E\u1A60\x05\u0268" +
		"\u0135\x02\u1A5F\u1A5E\x03\x02\x02\x02\u1A5F\u1A60\x03\x02\x02\x02\u1A60" +
		"\u1A74\x03\x02\x02\x02\u1A61\u1A63\x07\xE0\x02\x02\u1A62\u1A64\x05\u0268" +
		"\u0135\x02\u1A63\u1A62\x03\x02\x02\x02\u1A63\u1A64\x03\x02\x02\x02\u1A64" +
		"\u1A68\x03\x02\x02\x02\u1A65\u1A66\x05D#\x02\u1A66\u1A67\x05\u023C\u011F" +
		"\x02\u1A67\u1A69\x03\x02\x02\x02\u1A68\u1A65\x03\x02\x02\x02\u1A68\u1A69" +
		"\x03\x02\x02\x02\u1A69\u1A74\x03\x02\x02\x02\u1A6A\u1A74\t{\x02\x02\u1A6B" +
		"\u1A6D\x07\xD8\x02\x02\u1A6C\u1A6E\x05\u026C\u0137\x02\u1A6D\u1A6C\x03" +
		"\x02\x02\x02\u1A6D\u1A6E\x03\x02\x02\x02\u1A6E\u1A74\x03\x02\x02\x02\u1A6F" +
		"\u1A71\t|\x02\x02\u1A70\u1A72\x07\xD0\x02\x02\u1A71\u1A70\x03\x02\x02" +
		"\x02\u1A71\u1A72\x03\x02\x02\x02\u1A72\u1A74\x03\x02\x02\x02\u1A73\u1A5D" +
		"\x03\x02\x02\x02\u1A73\u1A61\x03\x02\x02\x02\u1A73\u1A6A\x03\x02\x02\x02" +
		"\u1A73\u1A6B\x03\x02\x02\x02\u1A73\u1A6F\x03\x02\x02\x02\u1A74\u1A76\x03" +
		"\x02\x02\x02\u1A75\u1A77\x07\r\x02\x02\u1A76\u1A75\x03\x02\x02\x02\u1A76" +
		"\u1A77\x03\x02\x02\x02\u1A77\u0267\x03\x02\x02\x02\u1A78\u1A79\x07\u0484" +
		"\x02\x02\u1A79\u1A7A\x05\u0254\u012B\x02\u1A7A\u1A7B\x07\u0485\x02\x02" +
		"\u1A7B\u0269\x03\x02\x02\x02\u1A7C\u1A7D\x07\u0484\x02\x02\u1A7D\u1A7E" +
		"\x05\u0254\u012B\x02\u1A7E\u1A7F\x07\u0486\x02\x02\u1A7F\u1A80\x05\u0254" +
		"\u012B\x02\u1A80\u1A81\x07\u0485\x02\x02\u1A81\u026B\x03\x02\x02\x02\u1A82" +
		"\u1A83\x07\u0484\x02\x02\u1A83\u1A86\x05\u0254\u012B\x02\u1A84\u1A85\x07" +
		"\u0486\x02\x02\u1A85\u1A87\x05\u0254\u012B\x02\u1A86\u1A84\x03\x02\x02" +
		"\x02\u1A86\u1A87\x03\x02\x02\x02\u1A87\u1A88\x03\x02\x02\x02\u1A88\u1A89" +
		"\x07\u0485\x02\x02\u1A89\u026D\x03\x02\x02\x02\u1A8A\u1A8F\x05\u024E\u0128" +
		"\x02\u1A8B\u1A8C\x07\u0486\x02\x02\u1A8C\u1A8E\x05\u024E\u0128\x02\u1A8D" +
		"\u1A8B\x03\x02\x02\x02\u1A8E\u1A91\x03\x02\x02\x02\u1A8F\u1A8D\x03\x02" +
		"\x02\x02\u1A8F\u1A90\x03\x02\x02\x02\u1A90\u026F\x03\x02\x02\x02\u1A91" +
		"\u1A8F\x03\x02\x02\x02\u1A92\u1A97\x05\u0230\u0119\x02\u1A93\u1A94\x07" +
		"\u0486\x02\x02\u1A94\u1A96\x05\u0230\u0119\x02\u1A95\u1A93\x03\x02\x02" +
		"\x02\u1A96\u1A99\x03\x02\x02\x02\u1A97\u1A95\x03\x02\x02\x02\u1A97\u1A98" +
		"\x03\x02\x02\x02\u1A98\u0271\x03\x02\x02\x02\u1A99\u1A97\x03\x02\x02\x02" +
		"\u1A9A\u1A9B\x07\u0484\x02\x02\u1A9B\u1AA0\x05\u0236\u011C\x02\u1A9C\u1A9D" +
		"\x07\u0486\x02\x02\u1A9D\u1A9F\x05\u0236\u011C\x02\u1A9E\u1A9C\x03\x02" +
		"\x02\x02\u1A9F\u1AA2\x03\x02\x02\x02\u1AA0\u1A9E\x03\x02\x02\x02\u1AA0" +
		"\u1AA1\x03\x02\x02\x02\u1AA1\u1AA3\x03\x02\x02\x02\u1AA2\u1AA0\x03\x02" +
		"\x02\x02\u1AA3\u1AA4\x07\u0485\x02\x02\u1AA4\u0273\x03\x02\x02\x02\u1AA5" +
		"\u1AAA\x05\u02B6\u015C\x02\u1AA6\u1AA7\x07\u0486\x02\x02\u1AA7\u1AA9\x05" +
		"\u02B6\u015C\x02\u1AA8\u1AA6\x03\x02\x02\x02\u1AA9\u1AAC\x03\x02\x02\x02" +
		"\u1AAA\u1AA8\x03\x02\x02\x02\u1AAA\u1AAB\x03\x02\x02\x02\u1AAB\u0275\x03" +
		"\x02\x02\x02\u1AAC\u1AAA\x03\x02\x02\x02\u1AAD\u1AB2\x05\u0282\u0142\x02" +
		"\u1AAE\u1AAF\x07\u0486\x02\x02\u1AAF\u1AB1\x05\u0282\u0142\x02\u1AB0\u1AAE" +
		"\x03\x02\x02\x02\u1AB1\u1AB4\x03\x02\x02\x02\u1AB2\u1AB0\x03\x02\x02\x02" +
		"\u1AB2\u1AB3\x03\x02\x02\x02\u1AB3\u0277\x03\x02\x02\x02\u1AB4\u1AB2\x03" +
		"\x02\x02\x02\u1AB5\u1ABA\x05\u0260\u0131\x02\u1AB6\u1AB7\x07\u0486\x02" +
		"\x02\u1AB7\u1AB9\x05\u0260\u0131\x02\u1AB8\u1AB6\x03\x02\x02\x02\u1AB9" +
		"\u1ABC\x03\x02\x02\x02\u1ABA\u1AB8\x03\x02\x02\x02\u1ABA\u1ABB\x03\x02" +
		"\x02\x02\u1ABB\u0279\x03\x02\x02\x02\u1ABC\u1ABA\x03\x02\x02\x02\u1ABD" +
		"\u1AC2\x07\u0493\x02\x02\u1ABE\u1ABF\x07\u0486\x02\x02\u1ABF\u1AC1\x07" +
		"\u0493\x02\x02\u1AC0\u1ABE\x03\x02\x02\x02\u1AC1\u1AC4\x03\x02\x02\x02" +
		"\u1AC2\u1AC0\x03\x02\x02\x02\u1AC2\u1AC3\x03\x02\x02\x02\u1AC3\u027B\x03" +
		"\x02\x02\x02\u1AC4\u1AC2\x03\x02\x02\x02\u1AC5\u1ACA\x07\u04A0\x02\x02" +
		"\u1AC6\u1AC7\x07\u0486\x02\x02\u1AC7\u1AC9\x07\u04A0\x02\x02\u1AC8\u1AC6" +
		"\x03\x02\x02\x02\u1AC9\u1ACC\x03\x02\x02\x02\u1ACA\u1AC8\x03\x02\x02\x02" +
		"\u1ACA\u1ACB\x03\x02\x02\x02\u1ACB\u027D\x03\x02\x02\x02\u1ACC\u1ACA\x03" +
		"\x02\x02\x02\u1ACD\u1AF1\x07v\x02\x02\u1ACE\u1ACF\x07\x1A\x02\x02\u1ACF" +
		"\u1AD0\x07\u0484\x02\x02\u1AD0\u1AD1\x05\u02B6\u015C\x02\u1AD1\u1AD2\x07" +
		"\x0E\x02\x02\u1AD2\u1AD3\x05\u0266\u0134\x02\u1AD3\u1AD4\x07\u0485\x02" +
		"\x02\u1AD4\u1AF1\x03\x02\x02\x02\u1AD5\u1AD7\x05\u02BC\u015F\x02\u1AD6" +
		"\u1AD5\x03\x02\x02\x02\u1AD6\u1AD7\x03\x02\x02\x02\u1AD7\u1AD8\x03\x02" +
		"\x02\x02\u1AD8\u1AF1\x05\u0260\u0131\x02\u1AD9\u1ADD\x05\u0280\u0141\x02" +
		"\u1ADA\u1ADB\x07x\x02\x02\u1ADB\u1ADC\x07\xBA\x02\x02\u1ADC\u1ADE\x05" +
		"\u0280\u0141\x02\u1ADD\u1ADA\x03\x02\x02\x02\u1ADD\u1ADE\x03\x02\x02\x02" +
		"\u1ADE\u1AF1\x03\x02\x02\x02\u1ADF\u1AE0\x07\u0484\x02\x02\u1AE0\u1AE1" +
		"\x05\u02B6\u015C\x02\u1AE1\u1AE2\x07\u0485\x02\x02\u1AE2\u1AF1\x03\x02" +
		"\x02\x02\u1AE3\u1AE4\t}\x02\x02\u1AE4\u1AE5\x07\u0484\x02\x02\u1AE5\u1AE6" +
		"\x05\u022E\u0118\x02\u1AE6\u1AE7\x07\u0485\x02\x02\u1AE7\u1AF1\x03\x02" +
		"\x02\x02\u1AE8\u1AE9\x07\u0484\x02\x02\u1AE9\u1AEA\t~\x02\x02\u1AEA\u1AEB" +
		"\x07\u02A3\x02\x02\u1AEB\u1AEC\x07C\x02\x02\u1AEC\u1AED\x05\u022E\u0118" +
		"\x02\u1AED\u1AEE\x07\u0485\x02\x02\u1AEE\u1AF1\x03\x02\x02\x02\u1AEF\u1AF1" +
		"\x05\u02B6\u015C\x02\u1AF0\u1ACD\x03\x02\x02\x02\u1AF0\u1ACE\x03\x02\x02" +
		"\x02\u1AF0\u1AD6\x03\x02\x02\x02\u1AF0\u1AD9\x03\x02\x02\x02\u1AF0\u1ADF" +
		"\x03\x02\x02\x02\u1AF0\u1AE3\x03\x02\x02\x02\u1AF0\u1AE8\x03\x02\x02\x02" +
		"\u1AF0\u1AEF\x03\x02\x02\x02\u1AF1\u027F\x03\x02\x02\x02\u1AF2\u1AF8\t" +
		"\x7F\x02\x02\u1AF3\u1AF5\x07\u0484\x02\x02\u1AF4\u1AF6\x05\u0254\u012B" +
		"\x02\u1AF5\u1AF4\x03\x02\x02\x02\u1AF5\u1AF6\x03\x02\x02\x02\u1AF6\u1AF7" +
		"\x03\x02\x02\x02\u1AF7\u1AF9\x07\u0485\x02\x02\u1AF8\u1AF3\x03\x02\x02" +
		"\x02\u1AF8\u1AF9\x03\x02\x02\x02\u1AF9\u1B01\x03\x02\x02\x02\u1AFA\u1AFB" +
		"\x07\u0145\x02\x02\u1AFB\u1AFD\x07\u0484\x02\x02\u1AFC\u1AFE\x05\u0254" +
		"\u012B\x02\u1AFD\u1AFC\x03\x02\x02\x02\u1AFD\u1AFE\x03\x02\x02\x02\u1AFE" +
		"\u1AFF\x03\x02\x02\x02\u1AFF\u1B01\x07\u0485\x02\x02\u1B00\u1AF2\x03\x02" +
		"\x02\x02\u1B00\u1AFA\x03\x02\x02\x02\u1B01\u0281\x03\x02\x02\x02\u1B02" +
		"\u1B05\x05\u02B6\u015C\x02\u1B03\u1B05\x07-\x02\x02\u1B04\u1B02\x03\x02" +
		"\x02\x02\u1B04\u1B03\x03\x02\x02\x02\u1B05\u0283\x03\x02\x02\x02\u1B06" +
		"\u1B07\x07O\x02\x02\u1B07\u1B08\x07>\x02\x02\u1B08\u0285\x03\x02\x02\x02" +
		"\u1B09\u1B0A\x07O\x02\x02\u1B0A\u1B0B\x07t\x02\x02\u1B0B\u1B0C\x07>\x02" +
		"\x02\u1B0C\u0287\x03\x02\x02\x02\u1B0D\u1B0E\x07}\x02\x02\u1B0E\u1B0F" +
		"\x07\x90\x02\x02\u1B0F\u0289\x03\x02\x02\x02\u1B10\u1B11\x07\u02A8\x02" +
		"\x02\u1B11\u1B14\x05\u0254\u012B\x02\u1B12\u1B14\x07\u0212\x02\x02\u1B13" +
		"\u1B10\x03\x02\x02\x02\u1B13\u1B12\x03\x02\x02\x02\u1B14\u028B\x03\x02" +
		"\x02\x02\u1B15\u1B19\x05\u028A\u0146\x02\u1B16\u1B17\x07\xA0\x02\x02\u1B17" +
		"\u1B19\x07j\x02\x02\u1B18\u1B15\x03\x02\x02\x02\u1B18\u1B16\x03\x02\x02" +
		"\x02\u1B19\u028D\x03\x02\x02\x02\u1B1A\u1B2D\x05\u0290\u0149\x02\u1B1B" +
		"\u1B2D\x05\u0298\u014D\x02\u1B1C\u1B2D\x05\u029A\u014E\x02\u1B1D\u1B1E" +
		"\x05\u02AE\u0158\x02\u1B1E\u1B20\x07\u0484\x02\x02\u1B1F\u1B21\x05\u02B2" +
		"\u015A\x02\u1B20\u1B1F\x03\x02\x02\x02\u1B20\u1B21\x03\x02\x02\x02\u1B21" +
		"\u1B22\x03\x02\x02\x02\u1B22\u1B23\x07\u0485\x02\x02\u1B23\u1B2D\x03\x02" +
		"\x02\x02\u1B24\u1B25\x05\u022E\u0118\x02\u1B25\u1B27\x07\u0484\x02\x02" +
		"\u1B26\u1B28\x05\u02B2\u015A\x02\u1B27\u1B26\x03\x02\x02\x02\u1B27\u1B28" +
		"\x03\x02\x02\x02\u1B28\u1B29\x03\x02\x02\x02\u1B29\u1B2A\x07\u0485\x02" +
		"\x02\u1B2A\u1B2D\x03\x02\x02\x02\u1B2B\u1B2D\x05\u02B0\u0159\x02\u1B2C" +
		"\u1B1A\x03\x02\x02\x02\u1B2C\u1B1B\x03\x02\x02\x02\u1B2C\u1B1C\x03\x02" +
		"\x02\x02\u1B2C\u1B1D\x03\x02\x02\x02\u1B2C\u1B24\x03\x02\x02\x02\u1B2C" +
		"\u1B2B\x03\x02\x02\x02\u1B2D\u028F\x03\x02\x02\x02\u1B2E\u1B31\t\x80\x02" +
		"\x02\u1B2F\u1B30\x07\u0484\x02\x02\u1B30\u1B32\x07\u0485\x02\x02\u1B31" +
		"\u1B2F\x03\x02\x02\x02\u1B31\u1B32\x03\x02\x02\x02\u1B32\u1BE1\x03\x02" +
		"\x02\x02\u1B33\u1B34\x07#\x02\x02\u1B34\u1B35\x07\u0484\x02\x02\u1B35" +
		"\u1B36\x05\u02B6\u015C\x02\u1B36\u1B37\x07\u0486\x02\x02\u1B37\u1B38\x05" +
		"\u0266\u0134\x02\u1B38\u1B39\x07\u0485\x02\x02\u1B39\u1BE1\x03\x02\x02" +
		"\x02\u1B3A\u1B3B\x07#\x02\x02\u1B3B\u1B3C\x07\u0484\x02\x02\u1B3C\u1B3D" +
		"\x05\u02B6\u015C\x02\u1B3D\u1B3E\x07\xBD\x02\x02\u1B3E\u1B3F\x05\u023C" +
		"\u011F\x02\u1B3F\u1B40\x07\u0485\x02\x02\u1B40\u1BE1\x03\x02\x02\x02\u1B41" +
		"\u1B42\x07\x1A\x02\x02\u1B42\u1B43\x07\u0484\x02\x02\u1B43\u1B44\x05\u02B6" +
		"\u015C\x02\u1B44\u1B45\x07\x0E\x02\x02\u1B45\u1B46\x05\u0266\u0134\x02" +
		"\u1B46\u1B47\x07\u0485\x02\x02\u1B47\u1BE1\x03\x02\x02\x02\u1B48\u1B49" +
		"\x07\xBE\x02\x02\u1B49\u1B4A\x07\u0484\x02\x02\u1B4A\u1B4B\x05\u0234\u011B" +
		"\x02\u1B4B\u1B4C\x07\u0485\x02\x02\u1B4C\u1BE1\x03\x02\x02\x02\u1B4D\u1B4E" +
		"\x07\x19\x02\x02\u1B4E\u1B50\x05\u02B6\u015C\x02\u1B4F\u1B51\x05\u0292" +
		"\u014A\x02\u1B50\u1B4F\x03\x02\x02\x02\u1B51\u1B52\x03\x02\x02\x02\u1B52" +
		"\u1B50\x03\x02\x02\x02\u1B52\u1B53\x03\x02\x02\x02\u1B53\u1B56\x03\x02" +
		"\x02\x02\u1B54\u1B55\x078\x02\x02\u1B55\u1B57\x05\u02B4\u015B\x02\u1B56" +
		"\u1B54\x03\x02\x02\x02\u1B56\u1B57\x03\x02\x02\x02\u1B57\u1B58\x03\x02" +
		"\x02\x02\u1B58\u1B59\x07\u0199\x02\x02\u1B59\u1BE1\x03\x02\x02\x02\u1B5A" +
		"\u1B5C\x07\x19\x02\x02\u1B5B\u1B5D\x05\u0292\u014A\x02\u1B5C\u1B5B\x03" +
		"\x02\x02\x02\u1B5D\u1B5E\x03\x02\x02\x02\u1B5E\u1B5C\x03\x02\x02\x02\u1B5E" +
		"\u1B5F\x03\x02\x02\x02\u1B5F\u1B62\x03\x02\x02\x02\u1B60\u1B61\x078\x02" +
		"\x02\u1B61\u1B63\x05\u02B4\u015B\x02\u1B62\u1B60\x03\x02\x02\x02\u1B62" +
		"\u1B63\x03\x02\x02\x02\u1B63\u1B64\x03\x02\x02\x02\u1B64\u1B65\x07\u0199" +
		"\x02\x02\u1B65\u1BE1\x03\x02\x02\x02\u1B66\u1B67\x07\xE0\x02\x02\u1B67" +
		"\u1B68\x07\u0484\x02\x02\u1B68\u1B6B\x05\u02B2\u015A\x02\u1B69\u1B6A\x07" +
		"\xBD\x02\x02\u1B6A\u1B6C\x05\u023C\u011F\x02\u1B6B\u1B69\x03\x02\x02\x02" +
		"\u1B6B\u1B6C\x03\x02\x02\x02\u1B6C\u1B6D\x03\x02\x02\x02\u1B6D\u1B6E\x07" +
		"\u0485\x02\x02\u1B6E\u1BE1\x03\x02\x02\x02\u1B6F\u1B70\x07\u0146\x02\x02" +
		"\u1B70\u1B73\x07\u0484\x02\x02\u1B71\u1B74\x05\u0258\u012D\x02\u1B72\u1B74" +
		"\x05\u02B6\u015C\x02\u1B73\u1B71\x03\x02\x02\x02\u1B73\u1B72\x03\x02\x02" +
		"\x02\u1B74\u1B75\x03\x02\x02\x02\u1B75\u1B78\x07R\x02\x02\u1B76\u1B79" +
		"\x05\u0258\u012D\x02\u1B77\u1B79\x05\u02B6\u015C\x02\u1B78\u1B76\x03\x02" +
		"\x02\x02\u1B78\u1B77\x03\x02\x02\x02\u1B79\u1B7A\x03\x02\x02\x02\u1B7A" +
		"\u1B7B\x07\u0485\x02\x02\u1B7B\u1BE1\x03\x02\x02\x02\u1B7C\u1B7D\t\x81" +
		"\x02\x02\u1B7D\u1B80\x07\u0484\x02\x02\u1B7E\u1B81\x05\u0258\u012D\x02" +
		"\u1B7F\u1B81\x05\u02B6\u015C\x02\u1B80\u1B7E\x03\x02\x02\x02\u1B80\u1B7F" +
		"\x03\x02\x02\x02\u1B81\u1B82\x03\x02\x02\x02\u1B82\u1B85\x07F\x02\x02" +
		"\u1B83\u1B86\x05\u0254\u012B\x02\u1B84\u1B86\x05\u02B6\u015C\x02\u1B85" +
		"\u1B83\x03\x02\x02\x02\u1B85\u1B84\x03\x02\x02\x02\u1B86\u1B8C\x03\x02" +
		"\x02\x02\u1B87\u1B8A\x07C\x02\x02\u1B88\u1B8B\x05\u0254\u012B\x02\u1B89" +
		"\u1B8B\x05\u02B6\u015C\x02\u1B8A\u1B88\x03\x02\x02\x02\u1B8A\u1B89\x03" +
		"\x02\x02\x02\u1B8B\u1B8D\x03\x02\x02\x02\u1B8C\u1B87\x03\x02\x02\x02\u1B8C" +
		"\u1B8D\x03\x02\x02\x02\u1B8D\u1B8E\x03\x02\x02\x02\u1B8E\u1B8F\x07\u0485" +
		"\x02\x02\u1B8F\u1BE1\x03\x02\x02\x02\u1B90\u1B91\x07\u014A\x02\x02\u1B91" +
		"\u1B92\x07\u0484\x02\x02\u1B92\u1B95\t\x82\x02\x02\u1B93\u1B96\x05\u0258" +
		"\u012D\x02\u1B94\u1B96\x05\u02B6\u015C\x02\u1B95\u1B93\x03\x02\x02\x02" +
		"\u1B95\u1B94\x03\x02\x02\x02\u1B95\u1B96\x03\x02\x02\x02\u1B96\u1B97\x03" +
		"\x02\x02\x02\u1B97\u1B9A\x07F\x02\x02\u1B98\u1B9B\x05\u0258\u012D\x02" +
		"\u1B99\u1B9B\x05\u02B6\u015C\x02\u1B9A\u1B98\x03\x02\x02\x02\u1B9A\u1B99" +
		"\x03\x02\x02\x02\u1B9B\u1B9C\x03\x02\x02\x02\u1B9C\u1B9D\x07\u0485\x02" +
		"\x02\u1B9D\u1BE1\x03\x02\x02\x02\u1B9E\u1B9F\x07\u014A\x02\x02\u1B9F\u1BA2" +
		"\x07\u0484\x02\x02\u1BA0\u1BA3\x05\u0258\u012D\x02\u1BA1\u1BA3\x05\u02B6" +
		"\u015C\x02\u1BA2\u1BA0\x03\x02\x02\x02\u1BA2\u1BA1\x03\x02\x02\x02\u1BA3" +
		"\u1BA4\x03\x02\x02\x02\u1BA4\u1BA7\x07F\x02\x02\u1BA5\u1BA8\x05\u0258" +
		"\u012D\x02\u1BA6\u1BA8\x05\u02B6\u015C\x02\u1BA7\u1BA5\x03\x02\x02\x02" +
		"\u1BA7\u1BA6\x03\x02\x02\x02\u1BA8\u1BA9\x03\x02\x02\x02\u1BA9\u1BAA\x07" +
		"\u0485\x02\x02\u1BAA\u1BE1\x03\x02\x02\x02\u1BAB\u1BAC\x07\u0456\x02\x02" +
		"\u1BAC\u1BAF\x07\u0484\x02\x02\u1BAD\u1BB0\x05\u0258\u012D\x02\u1BAE\u1BB0" +
		"\x05\u02B6\u015C\x02\u1BAF\u1BAD\x03\x02\x02\x02\u1BAF\u1BAE\x03\x02\x02" +
		"\x02\u1BB0\u1BB7\x03\x02\x02\x02\u1BB1\u1BB2\x07\x0E\x02\x02\u1BB2\u1BB3" +
		"\t\x83\x02\x02\u1BB3\u1BB4\x07\u0484\x02\x02\u1BB4\u1BB5\x05\u0254\u012B" +
		"\x02\u1BB5\u1BB6\x07\u0485\x02\x02\u1BB6\u1BB8\x03\x02\x02\x02\u1BB7\u1BB1" +
		"\x03\x02\x02\x02\u1BB7\u1BB8\x03\x02\x02\x02\u1BB8\u1BBA\x03\x02\x02\x02" +
		"\u1BB9\u1BBB\x05\u0294\u014B\x02\u1BBA\u1BB9\x03\x02\x02\x02\u1BBA\u1BBB" +
		"\x03\x02\x02\x02\u1BBB\u1BBC\x03\x02\x02\x02\u1BBC\u1BBD\x07\u0485\x02" +
		"\x02\u1BBD\u1BE1\x03\x02\x02\x02\u1BBE\u1BBF\x07\u0143\x02\x02\u1BBF\u1BC0" +
		"\x07\u0484\x02\x02\u1BC0\u1BC1\x05P)\x02\u1BC1\u1BC4\x07F\x02\x02\u1BC2" +
		"\u1BC5\x05\u0258\u012D\x02\u1BC3\u1BC5\x05\u02B6\u015C\x02\u1BC4\u1BC2" +
		"\x03\x02\x02\x02\u1BC4\u1BC3\x03\x02\x02\x02\u1BC5\u1BC6\x03\x02\x02\x02" +
		"\u1BC6\u1BC7\x07\u0485\x02\x02\u1BC7\u1BE1\x03\x02\x02\x02\u1BC8\u1BC9" +
		"\x07\u038D\x02\x02\u1BC9\u1BCA\x07\u0484\x02\x02\u1BCA\u1BCB\t\x84\x02" +
		"\x02\u1BCB\u1BCC\x07\u0486\x02\x02\u1BCC\u1BCD\x05\u0258\u012D\x02\u1BCD" +
		"\u1BCE\x07\u0485\x02\x02\u1BCE\u1BE1\x03\x02\x02\x02\u1BCF\u1BD0\x07\u011C" +
		"\x02\x02\u1BD0\u1BD1\x07\u0484\x02\x02\u1BD1\u1BD2\x05\u02B6\u015C\x02" +
		"\u1BD2\u1BD3\x07\u0486\x02\x02\u1BD3\u1BD6\x05\u02B6\u015C\x02\u1BD4\u1BD5" +
		"\x07\u0255\x02\x02\u1BD5\u1BD7\x05\u0266\u0134\x02\u1BD6\u1BD4\x03\x02" +
		"\x02\x02\u1BD6\u1BD7\x03\x02\x02\x02\u1BD7\u1BD9\x03\x02\x02\x02\u1BD8" +
		"\u1BDA\x05\u0116\x8C\x02\u1BD9\u1BD8\x03\x02\x02\x02\u1BD9\u1BDA\x03\x02" +
		"\x02\x02\u1BDA\u1BDC\x03\x02\x02\x02\u1BDB\u1BDD\x05\u0118\x8D\x02\u1BDC" +
		"\u1BDB\x03\x02\x02\x02\u1BDC\u1BDD\x03\x02\x02\x02\u1BDD\u1BDE\x03\x02" +
		"\x02\x02\u1BDE\u1BDF\x07\u0485\x02\x02\u1BDF\u1BE1\x03\x02\x02\x02\u1BE0" +
		"\u1B2E\x03\x02\x02\x02\u1BE0\u1B33\x03\x02\x02\x02\u1BE0\u1B3A\x03\x02" +
		"\x02\x02\u1BE0\u1B41\x03\x02\x02\x02\u1BE0\u1B48\x03\x02\x02\x02\u1BE0" +
		"\u1B4D\x03\x02\x02\x02\u1BE0\u1B5A\x03\x02\x02\x02\u1BE0\u1B66\x03\x02" +
		"\x02\x02\u1BE0\u1B6F\x03\x02\x02\x02\u1BE0\u1B7C\x03\x02\x02\x02\u1BE0" +
		"\u1B90\x03\x02\x02\x02\u1BE0\u1B9E\x03\x02\x02\x02\u1BE0\u1BAB\x03\x02" +
		"\x02\x02\u1BE0\u1BBE\x03\x02\x02\x02\u1BE0\u1BC8\x03\x02\x02\x02\u1BE0" +
		"\u1BCF\x03\x02\x02\x02\u1BE1\u0291\x03\x02\x02\x02\u1BE2\u1BE3\x07\xBF" +
		"\x02\x02\u1BE3\u1BE4\x05\u02B4\u015B\x02\u1BE4\u1BE5\x07\xB0\x02\x02\u1BE5" +
		"\u1BE6\x05\u02B4\u015B\x02\u1BE6\u0293\x03\x02\x02\x02\u1BE7\u1BE8\x07" +
		"\u01DA\x02\x02\u1BE8\u1BED\x05\u0296\u014C\x02\u1BE9\u1BEA\x07\u0486\x02" +
		"\x02\u1BEA\u1BEC\x05\u0296\u014C\x02\u1BEB\u1BE9\x03\x02\x02\x02\u1BEC" +
		"\u1BEF\x03\x02\x02\x02\u1BED\u1BEB\x03\x02\x02\x02\u1BED\u1BEE\x03\x02" +
		"\x02\x02\u1BEE\u1BF6\x03\x02\x02\x02\u1BEF\u1BED\x03\x02\x02\x02\u1BF0" +
		"\u1BF1\x07\u01DA\x02\x02\u1BF1\u1BF2\x05\u0254\u012B\x02\u1BF2\u1BF3\x07" +
		"\u0478\x02\x02\u1BF3\u1BF4\x05\u0254\u012B\x02\u1BF4\u1BF6\x03\x02\x02" +
		"\x02\u1BF5\u1BE7\x03\x02\x02\x02\u1BF5\u1BF0\x03\x02\x02\x02\u1BF6\u0295" +
		"\x03\x02\x02\x02\u1BF7\u1BF9\x05\u0254\u012B\x02\u1BF8\u1BFA\t\x85\x02" +
		"\x02\u1BF9\u1BF8\x03\x02\x02\x02\u1BF9\u1BFA\x03\x02\x02\x02\u1BFA\u0297" +
		"\x03\x02\x02\x02\u1BFB\u1BFC\t\x86\x02\x02\u1BFC\u1BFE\x07\u0484\x02\x02" +
		"\u1BFD\u1BFF\t2\x02\x02\u1BFE\u1BFD\x03\x02\x02\x02\u1BFE\u1BFF\x03\x02" +
		"\x02\x02\u1BFF\u1C00\x03\x02\x02\x02\u1C00\u1C01\x05\u02B4\u015B\x02\u1C01" +
		"\u1C03\x07\u0485\x02\x02\u1C02\u1C04\x05\u029C\u014F\x02\u1C03\u1C02\x03" +
		"\x02\x02\x02\u1C03\u1C04\x03\x02\x02\x02\u1C04\u1C37\x03\x02\x02\x02\u1C05" +
		"\u1C06\x07\u0124\x02\x02\u1C06\u1C0E\x07\u0484\x02\x02\u1C07\u1C0F\x07" +
		"\u0474\x02\x02\u1C08\u1C0A\x07\b\x02\x02\u1C09\u1C08\x03\x02\x02\x02\u1C09" +
		"\u1C0A\x03\x02\x02\x02\u1C0A\u1C0B\x03\x02\x02\x02\u1C0B\u1C0F\x05\u02B4" +
		"\u015B\x02\u1C0C\u1C0D\x074\x02\x02\u1C0D\u1C0F\x05\u02B2\u015A\x02\u1C0E" +
		"\u1C07\x03\x02\x02\x02\u1C0E\u1C09\x03\x02\x02\x02\u1C0E\u1C0C\x03\x02" +
		"\x02\x02\u1C0F\u1C10\x03\x02\x02\x02\u1C10\u1C12\x07\u0485\x02\x02\u1C11" +
		"\u1C13\x05\u029C\u014F\x02\u1C12\u1C11\x03\x02\x02\x02\u1C12\u1C13\x03" +
		"\x02\x02\x02\u1C13\u1C37\x03\x02\x02\x02\u1C14\u1C15\t\x87\x02\x02\u1C15" +
		"\u1C17\x07\u0484\x02\x02\u1C16\u1C18\x07\b\x02\x02\u1C17\u1C16\x03\x02" +
		"\x02\x02\u1C17\u1C18\x03\x02\x02\x02\u1C18\u1C19\x03\x02\x02\x02\u1C19" +
		"\u1C1A\x05\u02B4\u015B\x02\u1C1A\u1C1C\x07\u0485\x02\x02\u1C1B\u1C1D\x05" +
		"\u029C\u014F\x02\u1C1C\u1C1B\x03\x02\x02\x02\u1C1C\u1C1D\x03\x02\x02\x02" +
		"\u1C1D\u1C37\x03\x02\x02\x02\u1C1E\u1C1F\x07\u0128\x02\x02\u1C1F\u1C21" +
		"\x07\u0484\x02\x02\u1C20\u1C22\x074\x02\x02\u1C21\u1C20\x03\x02\x02\x02" +
		"\u1C21\u1C22\x03\x02\x02\x02\u1C22\u1C23\x03\x02\x02\x02\u1C23\u1C2E\x05" +
		"\u02B2\u015A\x02\u1C24\u1C25\x07~\x02\x02\u1C25\u1C26\x07\x16\x02\x02" +
		"\u1C26\u1C2B\x05\xF4{\x02\u1C27\u1C28\x07\u0486\x02\x02\u1C28\u1C2A\x05" +
		"\xF4{\x02\u1C29\u1C27\x03\x02\x02\x02\u1C2A\u1C2D\x03\x02\x02\x02\u1C2B" +
		"\u1C29\x03\x02\x02\x02\u1C2B\u1C2C\x03\x02\x02\x02\u1C2C\u1C2F\x03\x02" +
		"\x02\x02\u1C2D\u1C2B\x03\x02\x02\x02\u1C2E\u1C24\x03\x02\x02\x02\u1C2E" +
		"\u1C2F\x03\x02\x02\x02\u1C2F\u1C32\x03\x02\x02\x02\u1C30\u1C31\x07\x9D" +
		"\x02\x02\u1C31\u1C33\x07\u0493\x02\x02\u1C32\u1C30\x03\x02\x02\x02\u1C32" +
		"\u1C33\x03\x02\x02\x02\u1C33\u1C34\x03\x02\x02\x02\u1C34\u1C35\x07\u0485" +
		"\x02\x02\u1C35\u1C37\x03\x02\x02\x02\u1C36\u1BFB\x03\x02\x02\x02\u1C36" +
		"\u1C05\x03\x02\x02\x02\u1C36\u1C14\x03\x02\x02\x02\u1C36\u1C1E\x03\x02" +
		"\x02\x02\u1C37\u0299\x03\x02\x02\x02\u1C38\u1C39\t\x88\x02\x02\u1C39\u1C3A" +
		"\x07\u0484\x02\x02\u1C3A\u1C3D\x05\u02B6\u015C\x02\u1C3B\u1C3C\x07\u0486" +
		"\x02\x02\u1C3C\u1C3E\x05\u0254\u012B\x02\u1C3D\u1C3B\x03\x02\x02\x02\u1C3D" +
		"\u1C3E\x03\x02\x02\x02\u1C3E\u1C41\x03\x02\x02\x02\u1C3F\u1C40\x07\u0486" +
		"\x02\x02\u1C40\u1C42\x05\u0254\u012B\x02\u1C41\u1C3F\x03\x02\x02\x02\u1C41" +
		"\u1C42\x03\x02\x02\x02\u1C42\u1C43\x03\x02\x02\x02\u1C43\u1C44\x07\u0485" +
		"\x02\x02\u1C44\u1C45\x05\u029C\u014F\x02\u1C45\u1C5E\x03\x02\x02\x02\u1C46" +
		"\u1C47\t\x89\x02\x02\u1C47\u1C48\x07\u0484\x02\x02\u1C48\u1C49\x05\u02B6" +
		"\u015C\x02\u1C49\u1C4A\x07\u0485\x02\x02\u1C4A\u1C4B\x05\u029C\u014F\x02" +
		"\u1C4B\u1C5E\x03\x02\x02\x02\u1C4C\u1C4D\t\x8A\x02\x02\u1C4D\u1C4E\x07" +
		"\u04A3\x02\x02\u1C4E\u1C5E\x05\u029C\u014F\x02\u1C4F\u1C50\x07\u012F\x02" +
		"\x02\u1C50\u1C51\x07\u0484\x02\x02\u1C51\u1C52\x05\u02B6\u015C\x02\u1C52" +
		"\u1C53\x07\u0486\x02\x02\u1C53\u1C54\x05\u0254\u012B\x02\u1C54\u1C55\x07" +
		"\u0485\x02\x02\u1C55\u1C56\x05\u029C\u014F\x02\u1C56\u1C5E\x03\x02\x02" +
		"\x02\u1C57\u1C58\x07\u012E\x02\x02\u1C58\u1C59\x07\u0484\x02\x02\u1C59" +
		"\u1C5A\x05\u0254\u012B\x02\u1C5A\u1C5B\x07\u0485\x02\x02\u1C5B\u1C5C\x05" +
		"\u029C\u014F\x02\u1C5C\u1C5E\x03\x02\x02\x02\u1C5D\u1C38\x03\x02\x02\x02" +
		"\u1C5D\u1C46\x03\x02\x02\x02\u1C5D\u1C4C\x03\x02\x02\x02\u1C5D\u1C4F\x03" +
		"\x02\x02\x02\u1C5D\u1C57\x03\x02\x02\x02\u1C5E\u029B\x03\x02\x02\x02\u1C5F" +
		"\u1C66\x07\x82\x02\x02\u1C60\u1C62\x07\u0484\x02\x02\u1C61\u1C63\x05\u029E" +
		"\u0150\x02\u1C62\u1C61\x03\x02\x02\x02\u1C62\u1C63\x03\x02\x02\x02\u1C63" +
		"\u1C64\x03\x02\x02\x02\u1C64\u1C67\x07\u0485\x02\x02\u1C65\u1C67\x05\u02A0" +
		"\u0151\x02\u1C66\u1C60\x03\x02\x02\x02\u1C66\u1C65\x03\x02\x02\x02\u1C67" +
		"\u029D\x03\x02\x02\x02\u1C68\u1C6A\x05\u02A0\u0151\x02\u1C69\u1C68\x03" +
		"\x02\x02\x02\u1C69\u1C6A\x03\x02\x02\x02\u1C6A\u1C6C\x03\x02\x02\x02\u1C6B" +
		"\u1C6D\x05\u02AC\u0157\x02\u1C6C\u1C6B\x03\x02\x02\x02\u1C6C\u1C6D\x03" +
		"\x02\x02\x02\u1C6D\u1C6F\x03\x02\x02\x02\u1C6E\u1C70\x05\xF2z\x02\u1C6F" +
		"\u1C6E\x03\x02\x02\x02\u1C6F\u1C70\x03\x02\x02\x02\u1C70\u1C72\x03\x02" +
		"\x02\x02\u1C71\u1C73\x05\u02A2\u0152\x02\u1C72\u1C71\x03\x02\x02\x02\u1C72" +
		"\u1C73\x03\x02\x02\x02\u1C73\u029F\x03\x02\x02\x02\u1C74\u1C75\x05\u024E" +
		"\u0128\x02\u1C75\u02A1\x03\x02\x02\x02\u1C76\u1C77\x05\u02A4\u0153\x02" +
		"\u1C77\u1C78\x05\u02A6\u0154\x02\u1C78\u02A3\x03\x02\x02\x02\u1C79\u1C7A" +
		"\t\x8B\x02\x02\u1C7A\u02A5\x03\x02\x02\x02\u1C7B\u1C7E\x05\u02AA\u0156" +
		"\x02\u1C7C\u1C7E\x05\u02A8\u0155\x02\u1C7D\u1C7B\x03\x02\x02\x02\u1C7D" +
		"\u1C7C\x03\x02";
	private static readonly _serializedATNSegment14: string =
		"\x02\x02\u1C7E\u02A7\x03\x02\x02\x02\u1C7F\u1C80\x07\x12\x02\x02\u1C80" +
		"\u1C81\x05\u02AA\u0156\x02\u1C81\u1C82\x07\f\x02\x02\u1C82\u1C83\x05\u02AA" +
		"\u0156\x02\u1C83\u02A9\x03\x02\x02\x02\u1C84\u1C85\x07&\x02\x02\u1C85" +
		"\u1C8C\x07\u025C\x02\x02\u1C86\u1C87\x07\u0297\x02\x02\u1C87\u1C8C\t\x8C" +
		"\x02\x02\u1C88\u1C89\x05\u02B6\u015C\x02\u1C89\u1C8A\t\x8C\x02\x02\u1C8A" +
		"\u1C8C\x03\x02\x02\x02\u1C8B\u1C84\x03\x02\x02\x02\u1C8B\u1C86\x03\x02" +
		"\x02\x02\u1C8B\u1C88\x03\x02\x02\x02\u1C8C\u02AB\x03\x02\x02\x02\u1C8D" +
		"\u1C8E\x07\x83\x02\x02\u1C8E\u1C8F\x07\x16\x02\x02\u1C8F\u1C94\x05\u02B6" +
		"\u015C\x02\u1C90\u1C91\x07\u0486\x02\x02\u1C91\u1C93\x05\u02B6\u015C\x02" +
		"\u1C92\u1C90\x03\x02\x02\x02\u1C93\u1C96\x03\x02\x02\x02\u1C94\u1C92\x03" +
		"\x02\x02\x02\u1C94\u1C95\x03\x02\x02\x02\u1C95\u02AD\x03\x02\x02\x02\u1C96" +
		"\u1C94\x03\x02\x02\x02\u1C97\u1CAF\x05\u02D4\u016B\x02\u1C98\u1CAF\x07" +
		"\u02F4\x02\x02\u1C99\u1CAF\x07\u013F\x02\x02\u1C9A\u1CAF\x07\u013B\x02" +
		"\x02\u1C9B\u1CAF\x07\u013C\x02\x02\u1C9C\u1CAF\x07\u013D\x02\x02\u1C9D" +
		"\u1CAF\x07\u0140\x02\x02\u1C9E\u1CAF\x07\u0141\x02\x02\u1C9F\u1CAF\x07" +
		"\u0142\x02\x02\u1CA0\u1CAF\x07O\x02\x02\u1CA1\u1CAF\x07W\x02\x02\u1CA2" +
		"\u1CAF\x07\u013E\x02\x02\u1CA3\u1CAF\x07\u0144\x02\x02\u1CA4\u1CAF\x07" +
		"\u01FF\x02\x02\u1CA5\u1CAF\x07\u0145\x02\x02\u1CA6\u1CAF\x07\x90\x02\x02" +
		"\u1CA7\u1CAF\x07\u0147\x02\x02\u1CA8\u1CAF\x07\u0148\x02\x02\u1CA9\u1CAF" +
		"\x07\u0149\x02\x02\u1CAA\u1CAF\x07\u014A\x02\x02\u1CAB\u1CAF\x07\u014B" +
		"\x02\x02\u1CAC\u1CAF\x07\u014C\x02\x02\u1CAD\u1CAF\x07\u014D\x02\x02\u1CAE" +
		"\u1C97\x03\x02\x02\x02\u1CAE\u1C98\x03\x02\x02\x02\u1CAE\u1C99\x03\x02" +
		"\x02\x02\u1CAE\u1C9A\x03\x02\x02\x02\u1CAE\u1C9B\x03\x02\x02\x02\u1CAE" +
		"\u1C9C\x03\x02\x02\x02\u1CAE\u1C9D\x03\x02\x02\x02\u1CAE\u1C9E\x03\x02" +
		"\x02\x02\u1CAE\u1C9F\x03\x02\x02\x02\u1CAE\u1CA0\x03\x02\x02\x02\u1CAE" +
		"\u1CA1\x03\x02\x02\x02\u1CAE\u1CA2\x03\x02\x02\x02\u1CAE\u1CA3\x03\x02" +
		"\x02\x02\u1CAE\u1CA4\x03\x02\x02\x02\u1CAE\u1CA5\x03\x02\x02\x02\u1CAE" +
		"\u1CA6\x03\x02\x02\x02\u1CAE\u1CA7\x03\x02\x02\x02\u1CAE\u1CA8\x03\x02" +
		"\x02\x02\u1CAE\u1CA9\x03\x02\x02\x02\u1CAE\u1CAA\x03\x02\x02\x02\u1CAE" +
		"\u1CAB\x03\x02\x02\x02\u1CAE\u1CAC\x03\x02\x02\x02\u1CAE\u1CAD\x03\x02" +
		"\x02\x02\u1CAF\u02AF\x03\x02\x02\x02\u1CB0\u1CB1\t\x8D\x02\x02\u1CB1\u1CB2" +
		"\x07\u0484\x02\x02\u1CB2\u1CB3\x05\u02B4\u015B\x02\u1CB3\u1CB4\x07\u0485" +
		"\x02\x02\u1CB4\u02B1\x03\x02\x02\x02\u1CB5\u1CBA\x05\u0260\u0131\x02\u1CB6" +
		"\u1CBA\x05\u0234\u011B\x02\u1CB7\u1CBA\x05\u028E\u0148\x02\u1CB8\u1CBA" +
		"\x05\u02B6\u015C\x02\u1CB9\u1CB5\x03\x02\x02\x02\u1CB9\u1CB6\x03\x02\x02" +
		"\x02\u1CB9\u1CB7\x03\x02\x02\x02\u1CB9\u1CB8\x03\x02\x02\x02\u1CBA\u1CC4" +
		"\x03\x02\x02\x02\u1CBB\u1CC0\x07\u0486\x02\x02\u1CBC\u1CC1\x05\u0260\u0131" +
		"\x02\u1CBD\u1CC1\x05\u0234\u011B\x02\u1CBE\u1CC1\x05\u028E\u0148\x02\u1CBF" +
		"\u1CC1\x05\u02B6\u015C\x02\u1CC0\u1CBC\x03\x02\x02\x02\u1CC0\u1CBD\x03" +
		"\x02\x02\x02\u1CC0\u1CBE\x03\x02\x02\x02\u1CC0\u1CBF\x03\x02\x02\x02\u1CC1" +
		"\u1CC3\x03\x02\x02\x02\u1CC2\u1CBB\x03\x02\x02\x02\u1CC3\u1CC6\x03\x02" +
		"\x02\x02\u1CC4\u1CC2\x03\x02\x02\x02\u1CC4\u1CC5\x03\x02\x02\x02\u1CC5" +
		"\u02B3\x03\x02\x02\x02\u1CC6\u1CC4\x03\x02\x02\x02\u1CC7\u1CCC\x05\u0260" +
		"\u0131\x02\u1CC8\u1CCC\x05\u0234\u011B\x02\u1CC9\u1CCC\x05\u028E\u0148" +
		"\x02\u1CCA\u1CCC\x05\u02B6\u015C\x02\u1CCB\u1CC7\x03\x02\x02\x02\u1CCB" +
		"\u1CC8\x03\x02\x02\x02\u1CCB\u1CC9\x03\x02\x02\x02\u1CCB\u1CCA\x03\x02" +
		"\x02\x02\u1CCC\u02B5\x03\x02\x02\x02\u1CCD\u1CCE\b\u015C\x01\x02\u1CCE" +
		"\u1CCF\t\x8E\x02\x02\u1CCF\u1CD9\x05\u02B6\u015C\x06\u1CD0\u1CD1\x05\u02B8" +
		"\u015D\x02\u1CD1\u1CD3\x07Z\x02\x02\u1CD2\u1CD4\x07t\x02\x02\u1CD3\u1CD2" +
		"\x03\x02\x02\x02\u1CD3\u1CD4\x03\x02\x02\x02\u1CD4\u1CD5\x03\x02\x02\x02" +
		"\u1CD5\u1CD6\t\x8F\x02\x02\u1CD6\u1CD9\x03\x02\x02\x02\u1CD7\u1CD9\x05" +
		"\u02B8\u015D\x02\u1CD8\u1CCD\x03\x02\x02\x02\u1CD8\u1CD0\x03\x02\x02\x02" +
		"\u1CD8\u1CD7\x03\x02\x02\x02\u1CD9\u1CE0\x03\x02\x02\x02\u1CDA\u1CDB\f" +
		"\x05\x02\x02\u1CDB\u1CDC\x05\u02C0\u0161\x02\u1CDC\u1CDD\x05\u02B6\u015C" +
		"\x06\u1CDD\u1CDF\x03\x02\x02\x02\u1CDE\u1CDA\x03\x02\x02\x02\u1CDF\u1CE2" +
		"\x03\x02\x02\x02\u1CE0\u1CDE\x03\x02\x02\x02\u1CE0\u1CE1\x03\x02\x02\x02" +
		"\u1CE1\u02B7\x03\x02\x02\x02\u1CE2\u1CE0\x03\x02\x02\x02\u1CE3\u1CE6\b" +
		"\u015D\x01\x02\u1CE4\u1CE5\x07\u04A0\x02\x02\u1CE5\u1CE7\x07\u046B\x02" +
		"\x02\u1CE6\u1CE4\x03\x02\x02\x02\u1CE6\u1CE7\x03\x02\x02\x02\u1CE7\u1CE8" +
		"\x03\x02\x02\x02\u1CE8\u1CE9\x05\u02BA\u015E\x02\u1CE9\u1D2A\x03\x02\x02" +
		"\x02\u1CEA\u1CEB\f\n\x02\x02\u1CEB\u1CEC\x05\u02BE\u0160\x02\u1CEC\u1CED" +
		"\x05\u02B8\u015D\v\u1CED\u1D29\x03\x02\x02\x02\u1CEE\u1CF0\f\b\x02\x02" +
		"\u1CEF\u1CF1\x07t\x02\x02\u1CF0\u1CEF\x03\x02\x02\x02\u1CF0\u1CF1\x03" +
		"\x02\x02\x02\u1CF1\u1CF2\x03\x02\x02\x02\u1CF2\u1CF3\x07\x12\x02\x02\u1CF3" +
		"\u1CF4\x05\u02B8\u015D\x02\u1CF4\u1CF5\x07\f\x02\x02\u1CF5\u1CF6\x05\u02B8" +
		"\u015D\t\u1CF6\u1D29\x03\x02\x02\x02\u1CF7\u1CF8\f\x07\x02\x02\u1CF8\u1CF9" +
		"\x07\u0271\x02\x02\u1CF9\u1CFA\x07d\x02\x02\u1CFA\u1D29\x05\u02B8\u015D" +
		"\b\u1CFB\u1CFD\f\x05\x02\x02\u1CFC\u1CFE\x07t\x02\x02\u1CFD\u1CFC\x03" +
		"\x02\x02\x02\u1CFD\u1CFE\x03\x02\x02\x02\u1CFE\u1CFF\x03\x02\x02\x02\u1CFF" +
		"\u1D00\t\x90\x02\x02\u1D00\u1D29\x05\u02B8\u015D\x06\u1D01\u1D03\f\f\x02" +
		"\x02\u1D02\u1D04\x07t\x02\x02\u1D03\u1D02\x03\x02\x02\x02\u1D03\u1D04" +
		"\x03\x02\x02\x02\u1D04\u1D05\x03\x02\x02\x02\u1D05\u1D06\x07R\x02\x02" +
		"\u1D06\u1D09\x07\u0484\x02\x02\u1D07\u1D0A\x05\xD4k\x02\u1D08\u1D0A\x05" +
		"\u0274\u013B\x02\u1D09\u1D07\x03\x02\x02\x02\u1D09\u1D08\x03\x02\x02\x02" +
		"\u1D0A\u1D0B\x03\x02\x02\x02\u1D0B\u1D0C\x07\u0485\x02\x02\u1D0C\u1D29" +
		"\x03\x02\x02\x02\u1D0D\u1D0E\f\v\x02\x02\u1D0E\u1D0F\x07Z\x02\x02\u1D0F" +
		"\u1D29\x05\u025E\u0130\x02\u1D10\u1D11\f\t\x02\x02\u1D11\u1D12\x05\u02BE" +
		"\u0160\x02\u1D12\u1D13\t\x91\x02\x02\u1D13\u1D14\x07\u0484\x02\x02\u1D14" +
		"\u1D15\x05\xD4k\x02\u1D15\u1D16\x07\u0485\x02\x02\u1D16\u1D29\x03\x02" +
		"\x02\x02\u1D17\u1D19\f\x06\x02\x02\u1D18\u1D1A\x07t\x02\x02\u1D19\u1D18" +
		"\x03\x02\x02\x02\u1D19\u1D1A\x03\x02\x02\x02\u1D1A\u1D1B\x03\x02\x02\x02" +
		"\u1D1B\u1D1C\x07d\x02\x02\u1D1C\u1D1F\x05\u02B8\u015D\x02\u1D1D\u1D1E" +
		"\x07\u019F\x02\x02\u1D1E\u1D20\x07\u0493\x02\x02\u1D1F\u1D1D\x03\x02\x02" +
		"\x02\u1D1F\u1D20\x03\x02\x02\x02\u1D20\u1D29\x03\x02\x02\x02\u1D21\u1D22" +
		"\f\x03\x02\x02\u1D22\u1D23\x07\u01FC\x02\x02\u1D23\u1D24\x07\u0218\x02" +
		"\x02\u1D24\u1D25\x07\u0484\x02\x02\u1D25\u1D26\x05\u02B8\u015D\x02\u1D26" +
		"\u1D27\x07\u0485\x02\x02\u1D27\u1D29\x03\x02\x02\x02\u1D28\u1CEA\x03\x02" +
		"\x02\x02\u1D28\u1CEE\x03\x02\x02\x02\u1D28\u1CF7\x03\x02\x02\x02\u1D28" +
		"\u1CFB\x03\x02\x02\x02\u1D28\u1D01\x03\x02\x02\x02\u1D28\u1D0D\x03\x02" +
		"\x02\x02\u1D28\u1D10\x03\x02\x02\x02\u1D28\u1D17\x03\x02\x02\x02\u1D28" +
		"\u1D21\x03\x02\x02\x02\u1D29\u1D2C\x03\x02\x02\x02\u1D2A\u1D28\x03\x02" +
		"\x02\x02\u1D2A\u1D2B\x03\x02\x02\x02\u1D2B\u02B9\x03\x02\x02\x02\u1D2C" +
		"\u1D2A\x03\x02\x02\x02\u1D2D\u1D2E\b\u015E\x01\x02\u1D2E\u1D5B\x05\u0260" +
		"\u0131\x02\u1D2F\u1D5B\x05\u0234\u011B\x02\u1D30\u1D5B\x05\u028E\u0148" +
		"\x02\u1D31\u1D5B\x05\u023A\u011E\x02\u1D32\u1D33\x05\u02BC\u015F\x02\u1D33" +
		"\u1D34\x05\u02BA\u015E\f\u1D34\u1D5B\x03\x02\x02\x02\u1D35\u1D36\x07\xE4" +
		"\x02\x02\u1D36\u1D5B\x05\u02BA\u015E\v\u1D37\u1D38\x07\u0484\x02\x02\u1D38" +
		"\u1D3D\x05\u02B6\u015C\x02\u1D39\u1D3A\x07\u0486\x02\x02\u1D3A\u1D3C\x05" +
		"\u02B6\u015C\x02\u1D3B\u1D39\x03\x02\x02\x02\u1D3C\u1D3F\x03\x02\x02\x02" +
		"\u1D3D\u1D3B\x03\x02\x02\x02\u1D3D\u1D3E\x03\x02\x02\x02\u1D3E\u1D40\x03" +
		"\x02\x02\x02\u1D3F\u1D3D\x03\x02\x02\x02\u1D40\u1D41\x07\u0485\x02\x02" +
		"\u1D41\u1D5B\x03\x02\x02\x02\u1D42\u1D43\x07\u025C\x02\x02\u1D43\u1D44" +
		"\x07\u0484\x02\x02\u1D44\u1D47\x05\u02B6\u015C\x02\u1D45\u1D46\x07\u0486" +
		"\x02\x02\u1D46\u1D48\x05\u02B6\u015C\x02\u1D47\u1D45\x03\x02\x02\x02\u1D48" +
		"\u1D49\x03\x02\x02\x02\u1D49\u1D47\x03\x02\x02\x02\u1D49\u1D4A\x03\x02" +
		"\x02\x02\u1D4A\u1D4B\x03\x02\x02\x02\u1D4B\u1D4C\x07\u0485\x02\x02\u1D4C" +
		"\u1D5B\x03\x02\x02\x02\u1D4D\u1D4E\x07>\x02\x02\u1D4E\u1D4F\x07\u0484" +
		"\x02\x02\u1D4F\u1D50\x05\xD4k\x02\u1D50\u1D51\x07\u0485\x02\x02\u1D51" +
		"\u1D5B\x03\x02\x02\x02\u1D52\u1D53\x07\u0484\x02\x02\u1D53\u1D54\x05\xD4" +
		"k\x02\u1D54\u1D55\x07\u0485\x02\x02\u1D55\u1D5B\x03\x02\x02\x02\u1D56" +
		"\u1D57\x07X\x02\x02\u1D57\u1D58\x05\u02B6\u015C\x02\u1D58\u1D59\x05P)" +
		"\x02\u1D59\u1D5B\x03\x02\x02\x02\u1D5A\u1D2D\x03\x02\x02\x02\u1D5A\u1D2F" +
		"\x03\x02\x02\x02\u1D5A\u1D30\x03\x02\x02\x02\u1D5A\u1D31\x03\x02\x02\x02" +
		"\u1D5A\u1D32\x03\x02\x02\x02\u1D5A\u1D35\x03\x02\x02\x02\u1D5A\u1D37\x03" +
		"\x02\x02\x02\u1D5A\u1D42\x03\x02\x02\x02\u1D5A\u1D4D\x03\x02\x02\x02\u1D5A" +
		"\u1D52\x03\x02\x02\x02\u1D5A\u1D56\x03\x02\x02\x02\u1D5B\u1D6D\x03\x02" +
		"\x02\x02\u1D5C\u1D5D\f\x05\x02\x02\u1D5D\u1D5E\x05\u02C2\u0162\x02\u1D5E" +
		"\u1D5F\x05\u02BA\u015E\x06\u1D5F\u1D6C\x03\x02\x02\x02\u1D60\u1D61\f\x04" +
		"\x02\x02\u1D61\u1D62\x05\u02C4\u0163\x02\u1D62\u1D63\x05\u02BA\u015E\x05" +
		"\u1D63\u1D6C\x03\x02\x02\x02\u1D64\u1D65\f\x03\x02\x02\u1D65\u1D66\x05" +
		"\u02C6\u0164\x02\u1D66\u1D67\x05\u02BA\u015E\x04\u1D67\u1D6C\x03\x02\x02" +
		"\x02\u1D68\u1D69\f\x0E\x02\x02\u1D69\u1D6A\x07\x1E\x02\x02\u1D6A\u1D6C" +
		"\x05\u023E\u0120\x02\u1D6B\u1D5C\x03\x02\x02\x02\u1D6B\u1D60\x03\x02\x02" +
		"\x02\u1D6B\u1D64\x03\x02\x02\x02\u1D6B\u1D68\x03\x02\x02\x02\u1D6C\u1D6F" +
		"\x03\x02\x02\x02\u1D6D\u1D6B\x03\x02\x02\x02\u1D6D\u1D6E\x03\x02\x02\x02" +
		"\u1D6E\u02BB\x03\x02\x02\x02\u1D6F\u1D6D\x03\x02\x02\x02\u1D70\u1D71\t" +
		"\x92\x02\x02\u1D71\u02BD\x03\x02\x02\x02\u1D72\u1D81\x07\u047B\x02\x02" +
		"\u1D73\u1D81\x07\u047C\x02\x02\u1D74\u1D81\x07\u047D\x02\x02\u1D75\u1D76" +
		"\x07\u047D\x02\x02\u1D76\u1D81\x07\u047B\x02\x02\u1D77\u1D78\x07\u047C" +
		"\x02\x02\u1D78\u1D81\x07\u047B\x02\x02\u1D79\u1D7A\x07\u047D\x02\x02\u1D7A" +
		"\u1D81\x07\u047C\x02\x02\u1D7B\u1D7C\x07\u047E\x02\x02\u1D7C\u1D81\x07" +
		"\u047B\x02\x02\u1D7D\u1D7E\x07\u047D\x02\x02\u1D7E\u1D7F\x07\u047B\x02" +
		"\x02\u1D7F\u1D81\x07\u047C\x02\x02\u1D80\u1D72\x03\x02\x02\x02\u1D80\u1D73" +
		"\x03\x02\x02\x02\u1D80\u1D74\x03\x02\x02\x02\u1D80\u1D75\x03\x02\x02\x02" +
		"\u1D80\u1D77\x03\x02\x02\x02\u1D80\u1D79\x03\x02\x02\x02\u1D80\u1D7B\x03" +
		"\x02\x02\x02\u1D80\u1D7D\x03\x02\x02\x02\u1D81\u02BF\x03\x02\x02\x02\u1D82" +
		"\u1D8A\x07\f\x02\x02\u1D83\u1D84\x07\u0481\x02\x02\u1D84\u1D8A\x07\u0481" +
		"\x02\x02\u1D85\u1D8A\x07\xC4\x02\x02\u1D86\u1D8A\x07}\x02\x02\u1D87\u1D88" +
		"\x07\u0480\x02\x02\u1D88\u1D8A\x07\u0480\x02\x02\u1D89\u1D82\x03\x02\x02" +
		"\x02\u1D89\u1D83\x03\x02\x02\x02\u1D89\u1D85\x03\x02\x02\x02\u1D89\u1D86" +
		"\x03\x02\x02\x02\u1D89\u1D87\x03\x02\x02\x02\u1D8A\u02C1\x03\x02\x02\x02" +
		"\u1D8B\u1D8C\x07\u047D\x02\x02\u1D8C\u1D93\x07\u047D\x02\x02\u1D8D\u1D8E" +
		"\x07\u047C\x02\x02\u1D8E\u1D93\x07\u047C\x02\x02\u1D8F\u1D93\x07\u0481" +
		"\x02\x02\u1D90\u1D93\x07\u0482\x02\x02\u1D91\u1D93\x07\u0480\x02\x02\u1D92" +
		"\u1D8B\x03\x02\x02\x02\u1D92\u1D8D\x03\x02\x02\x02\u1D92\u1D8F\x03\x02" +
		"\x02\x02\u1D92\u1D90\x03\x02\x02\x02\u1D92\u1D91\x03\x02\x02\x02\u1D93" +
		"\u02C3\x03\x02\x02\x02\u1D94\u1D95\t\x93\x02\x02\u1D95\u02C5\x03\x02\x02" +
		"\x02\u1D96\u1D97\x07\u0478\x02\x02\u1D97\u1D9C\x07\u047C\x02\x02\u1D98" +
		"\u1D99\x07\u0478\x02\x02\u1D99\u1D9A\x07\u047C\x02\x02\u1D9A\u1D9C\x07" +
		"\u047C\x02\x02\u1D9B\u1D96\x03\x02\x02\x02\u1D9B\u1D98\x03\x02\x02\x02" +
		"\u1D9C\u02C7\x03\x02\x02\x02\u1D9D\u1D9E\t\x94\x02\x02\u1D9E\u02C9\x03" +
		"\x02\x02\x02\u1D9F\u1DA0\t\x95\x02\x02\u1DA0\u02CB\x03\x02\x02\x02\u1DA1" +
		"\u1DA2\t\x96\x02\x02\u1DA2\u02CD\x03\x02\x02\x02\u1DA3\u1DA4\t\x97\x02" +
		"\x02\u1DA4\u02CF\x03\x02\x02\x02\u1DA5\u1DA6\t\x98\x02\x02\u1DA6\u02D1" +
		"\x03\x02\x02\x02\u1DA7\u1DA8\t\x99\x02\x02\u1DA8\u02D3\x03\x02\x02\x02" +
		"\u1DA9\u1DAA\t\x9A\x02\x02\u1DAA\u02D5\x03\x02\x02\x02\u0462\u02D7\u02DB" +
		"\u02E2\u02E5\u02E8\u02EA\u02F0\u02F3\u02F6\u02F9\u0302\u030F\u033F\u034C" +
		"\u0357\u0368\u036D\u0379\u0395\u039E\u03A3\u03A9\u03AE\u03B2\u03BB\u03BE" +
		"\u03C1\u03C5\u03CC\u03CF\u03D2\u03D6\u03DA\u03E0\u03E5\u03EA\u03EF\u03F2" +
		"\u03F4\u0400\u0403\u0407\u040A\u040E\u0411\u0415\u0418\u041B\u041F\u0422" +
		"\u0426\u042C\u042F\u0435\u043B\u0442\u0449\u044C\u044F\u0453\u0458\u045E" +
		"\u0467\u046C\u0471\u0478\u0489\u0490\u0493\u0497\u04A1\u04A5\u04A8\u04AC" +
		"\u04B0\u04B4\u04B9\u04BC\u04BF\u04C2\u04C5\u04CB\u04CE\u04D2\u04D8\u04DD" +
		"\u04E0\u04E3\u04E5\u04F0\u04F4\u04F7\u0505\u0508\u050C\u050F\u0513\u0516" +
		"\u051A\u051D\u0521\u0524\u0527\u052B\u052E\u0532\u0538\u053B\u0548\u054E" +
		"\u0559\u055E\u0566\u056E\u0573\u0576\u057B\u0583\u0588\u058E\u0593\u0597" +
		"\u0599\u059D\u05A0\u05A4\u05A9\u05AB\u05B0\u05B5\u05BD\u05C5\u05CA\u05D2" +
		"\u05D5\u05D8\u05DC\u05E0\u05E3\u05E7\u05EB\u05EF\u05F5\u05F8\u05FF\u0604" +
		"\u060B\u0612\u0618\u0620\u0623\u062A\u062D\u062F\u0635\u063B\u064C\u0653" +
		"\u065A\u0666\u066B\u0674\u0676\u0679\u0686\u0693\u0698\u06A8\u06B0\u06BA" +
		"\u06C0\u06CC\u06CF\u06D4\u06E1\u06E8\u06EF\u06F1\u06F8\u06FC\u06FE\u0703" +
		"\u0706\u070C\u0711\u0713\u0717\u071A\u071D\u0723\u0728\u072A\u072F\u0736" +
		"\u0738\u073F\u0744\u0748\u074B\u0753\u075B\u075D\u0765\u0769\u076C\u0772" +
		"\u0777\u077A\u0780\u0783\u0787\u078A\u078E\u0793\u0798\u079D\u07A1\u07A5" +
		"\u07A9\u07AD\u07B1\u07B5\u07BA\u07BF\u07C4\u07CA\u07CF\u07D4\u07D9\u07DF" +
		"\u07E4\u07E9\u07EF\u07F4\u07F9\u07FE\u0803\u0808\u080D\u0812\u0819\u081E" +
		"\u0823\u0828\u082C\u0831\u0839\u083E\u0844\u0850\u0857\u0859\u0861\u0866" +
		"\u0869\u0871\u0877\u0887\u0893\u0895\u0898\u08A0\u08A6\u08AC\u08B9\u08C0" +
		"\u08C9\u08CE\u08D9\u08E2\u08E7\u08F3\u08FA\u0903\u0908\u0914\u091B\u0924" +
		"\u0929\u0930\u0939\u093E\u0940\u0945\u094D\u0956\u095A\u095D\u0961\u0966" +
		"\u096C\u0972\u0977\u097C\u0981\u0986\u0989\u098E\u0993\u099D\u09A1\u09A8" +
		"\u09AD\u09B0\u09B5\u09B8\u09BC\u09C0\u09C8\u09DB\u09DE\u09E1\u09E5\u09EF" +
		"\u09FC\u0A03\u0A06\u0A0B\u0A12\u0A15\u0A18\u0A23\u0A26\u0A2A\u0A32\u0A35" +
		"\u0A3A\u0A42\u0A48\u0A4C\u0A51\u0A57\u0A5B\u0A60\u0A65\u0A68\u0A6F\u0A73" +
		"\u0A76\u0A81\u0A89\u0A8C\u0A8F\u0A95\u0A9B\u0A9D\u0AA2\u0AA5\u0AAB\u0AB1" +
		"\u0AB3\u0AB7\u0ABA\u0ABD\u0AC0\u0AC6\u0ACC\u0ACF\u0AD5\u0ADB\u0ADD\u0AE2" +
		"\u0AE5\u0AED\u0AEF\u0AF8\u0AFD\u0B05\u0B09\u0B0C\u0B14\u0B1E\u0B23\u0B26" +
		"\u0B2D\u0B31\u0B34\u0B38\u0B3D\u0B46\u0B58\u0B61\u0B65\u0B71\u0B74\u0B7D" +
		"\u0B88\u0B8B\u0B93\u0B99\u0B9E\u0BA6\u0BAE\u0BB5\u0BBC\u0BC3\u0BD2\u0BDF" +
		"\u0BE5\u0BEB\u0BF1\u0BF7\u0BFD\u0C03\u0C08\u0C0F\u0C16\u0C19\u0C20\u0C25" +
		"\u0C28\u0C2A\u0C2E\u0C3B\u0C42\u0C49\u0C4F\u0C53\u0C57\u0C5A\u0C61\u0C64" +
		"\u0C69\u0C70\u0C77\u0C7B\u0C80\u0C87\u0C94\u0C97\u0C9C\u0CA1\u0CA5\u0CAB" +
		"\u0CAF\u0CB3\u0CB6\u0CBD\u0CC7\u0CCC\u0CD3\u0CD7\u0CDE\u0CE1\u0CE5\u0CEE" +
		"\u0CF2\u0CF5\u0CF8\u0CFE\u0D01\u0D07\u0D10\u0D13\u0D1E\u0D21\u0D26\u0D29" +
		"\u0D2E\u0D38\u0D3D\u0D43\u0D45\u0D4B\u0D4D\u0D53\u0D5B\u0D60\u0D68\u0D6B" +
		"\u0D70\u0D73\u0D78\u0D80\u0D88\u0D8E\u0D96\u0D9B\u0DA3\u0DA6\u0DAA\u0DAD" +
		"\u0DB5\u0DBB\u0DC4\u0DC7\u0DCB\u0DCF\u0DD5\u0DD9\u0DDD\u0DDF\u0DE2\u0DE5" +
		"\u0DE8\u0DEE\u0DF2\u0DF5\u0DF8\u0DFB\u0DFE\u0E05\u0E07\u0E0B\u0E10\u0E16" +
		"\u0E1B\u0E22\u0E28\u0E2D\u0E30\u0E36\u0E3A\u0E42\u0E45\u0E49\u0E4C\u0E4F" +
		"\u0E58\u0E5C\u0E5F\u0E63\u0E67\u0E6A\u0E6D\u0E72\u0E78\u0E7C\u0E86\u0E8C" +
		"\u0E90\u0E96\u0E9A\u0EA0\u0EA3\u0EAF\u0EB3\u0EB7\u0EBF\u0EC3\u0ECB\u0ECE" +
		"\u0ED2\u0ED5\u0EDD\u0EE2\u0EE5\u0EE8\u0EEC\u0EEF\u0EF8\u0EFD\u0F06\u0F0B" +
		"\u0F12\u0F19\u0F21\u0F27\u0F2F\u0F32\u0F35\u0F3C\u0F3F\u0F46\u0F49\u0F51" +
		"\u0F57\u0F62\u0F65\u0F69\u0F73\u0F79\u0F7D\u0F81\u0F8B\u0F90\u0F92\u0F96" +
		"\u0FA0\u0FAA\u0FB0\u0FB5\u0FB8\u0FBB\u0FBE\u0FC1\u0FC4\u0FC7\u0FCD\u0FD2" +
		"\u0FD5\u0FD8\u0FDB\u0FDE\u0FE1\u0FE4\u0FE6\u0FEC\u0FF1\u0FF4\u0FF7\u0FFA" +
		"\u0FFD\u1000\u1004\u100A\u100E\u1016\u101A\u101D\u101F\u102C\u102F\u1036" +
		"\u1040\u1043\u1048\u104A\u104E\u1056\u105C\u1065\u1072\u1076\u107C\u1085" +
		"\u1088\u108C\u108F\u1093\u1097\u109A\u109C\u10A4\u10B0\u10B6\u10B8\u10BE" +
		"\u10C0\u10C2\u10C8\u10D0\u10D8\u10DC\u10E0\u10E9\u10EE\u1102\u1107\u110D" +
		"\u1114\u1119\u1122\u1125\u1129\u112D\u1131\u1134\u1137\u113A\u113E\u1142" +
		"\u1145\u1148\u114B\u1152\u1156\u1165\u1169\u1175\u117D\u1187\u118B\u118E" +
		"\u1194\u1197\u119A\u11A3\u11AC\u11B6\u11BA\u11C4\u11CE\u11D6\u11D9\u11E2" +
		"\u11E5\u11E9\u11EE\u11F2\u11FB\u11FE\u121D\u1220\u1223\u125B\u1260\u127C" +
		"\u128A\u1291\u1295\u129B\u12A3\u12A5\u12B0\u12BA\u12C1\u12C7\u12CF\u12D4" +
		"\u12DC\u12E4\u12EC\u12F4\u12FA\u12FD\u1301\u1306\u130B\u1311\u1313\u131E" +
		"\u1323\u132A\u132C\u133A\u1340\u1345\u134A\u1350\u1357\u135F\u1367\u136C" +
		"\u1372\u1375\u137D\u1384\u138D\u1390\u13A1\u13A9\u13B1\u13B5\u13BC\u13C2" +
		"\u13CA\u13D3\u13D9\u13E0\u13E7\u13EC\u13EF\u13F1\u13F7\u13F9\u13FD\u13FF" +
		"\u1406\u1408\u1411\u1417\u141E\u1425\u142A\u142D\u142F\u1435\u1437\u143B" +
		"\u143D\u1444\u1446\u144B\u1452\u145B\u1460\u1469\u1470\u1475\u1478\u147A" +
		"\u1480\u1482\u1485\u148D\u1492\u1497\u149B\u14A1\u14A6\u14AA\u14B0\u14B2" +
		"\u14BD\u14C0\u14C7\u14CA\u14D6\u14DC\u14E5\u14EE\u14F3\u14FC\u1502\u150D" +
		"\u1516\u151C\u1521\u1525\u1528\u1534\u153B\u1540\u1552\u155C\u1560\u1565" +
		"\u156B\u1575\u157F\u1589\u158F\u1598\u159E\u15A5\u15A7\u15B1\u15B5\u15B9" +
		"\u15C3\u15C8\u15DA\u1612\u162B\u163D\u1645\u1651\u1658\u165A\u1664\u1667" +
		"\u166F\u1676\u167A\u167F\u1683\u1688\u168B\u168E\u1697\u169B\u169E\u16A2" +
		"\u16B9\u16C0\u16C4\u16CB\u16D2\u16D5\u16E5\u16E8\u16F2\u16F6\u16F9\u16FE" +
		"\u1703\u1707\u170A\u170F\u1714\u1718\u171F\u1722\u1728\u1733\u1747\u1753" +
		"\u1756\u1760\u1768\u176C\u1773\u1776\u177F\u1782\u1787\u178A\u178F\u1795" +
		"\u179C\u17A3\u17A7\u17A9\u17AD\u17B7\u17BA\u17BD\u17C9\u17CC\u17D2\u17D5" +
		"\u17DE\u17E0\u17E4\u17F5\u17FB\u17FF\u180D\u1819\u1820\u1823\u182A\u1831" +
		"\u1836\u183A\u1847\u1852\u1858\u185D\u186A\u186C\u1871\u1875\u1878\u187A" +
		"\u1881\u1888\u188B\u188E\u1894\u1898\u189E\u18A4\u18B5\u18BA\u18C2\u18C5" +
		"\u18CA\u18CF\u18D7\u18DA\u18E2\u18E6\u18F3\u18F9\u1905\u1908\u1911\u1916" +
		"\u191C\u1922\u1927\u1929\u192E\u1930\u1934\u193A\u193D\u1940\u1949\u1951" +
		"\u1955\u195A\u1970\u1977\u1979\u1980\u1982\u1986\u198B\u1996\u199B\u19A1" +
		"\u19A4\u19A8\u19AD\u19B0\u19B4\u19B8\u19BA\u19BF\u19C4\u19D1\u19D4\u19D8" +
		"\u19DB\u19DE\u19E3\u19E8\u19ED\u19F0\u19F5\u19F8\u19FE\u1A01\u1A05\u1A0A" +
		"\u1A0F\u1A14\u1A19\u1A1C\u1A21\u1A26\u1A2B\u1A31\u1A36\u1A3B\u1A40\u1A43" +
		"\u1A48\u1A4C\u1A50\u1A58\u1A5F\u1A63\u1A68\u1A6D\u1A71\u1A73\u1A76\u1A86" +
		"\u1A8F\u1A97\u1AA0\u1AAA\u1AB2\u1ABA\u1AC2\u1ACA\u1AD6\u1ADD\u1AF0\u1AF5" +
		"\u1AF8\u1AFD\u1B00\u1B04\u1B13\u1B18\u1B20\u1B27\u1B2C\u1B31\u1B52\u1B56" +
		"\u1B5E\u1B62\u1B6B\u1B73\u1B78\u1B80\u1B85\u1B8A\u1B8C\u1B95\u1B9A\u1BA2" +
		"\u1BA7\u1BAF\u1BB7\u1BBA\u1BC4\u1BD6\u1BD9\u1BDC\u1BE0\u1BED\u1BF5\u1BF9" +
		"\u1BFE\u1C03\u1C09\u1C0E\u1C12\u1C17\u1C1C\u1C21\u1C2B\u1C2E\u1C32\u1C36" +
		"\u1C3D\u1C41\u1C5D\u1C62\u1C66\u1C69\u1C6C\u1C6F\u1C72\u1C7D\u1C8B\u1C94" +
		"\u1CAE\u1CB9\u1CC0\u1CC4\u1CCB\u1CD3\u1CD8\u1CE0\u1CE6\u1CF0\u1CFD\u1D03" +
		"\u1D09\u1D19\u1D1F\u1D28\u1D2A\u1D3D\u1D49\u1D5A\u1D6B\u1D6D\u1D80\u1D89" +
		"\u1D92\u1D9B";
	public static readonly _serializedATN: string = Utils.join(
		[
			MariaDBParser._serializedATNSegment0,
			MariaDBParser._serializedATNSegment1,
			MariaDBParser._serializedATNSegment2,
			MariaDBParser._serializedATNSegment3,
			MariaDBParser._serializedATNSegment4,
			MariaDBParser._serializedATNSegment5,
			MariaDBParser._serializedATNSegment6,
			MariaDBParser._serializedATNSegment7,
			MariaDBParser._serializedATNSegment8,
			MariaDBParser._serializedATNSegment9,
			MariaDBParser._serializedATNSegment10,
			MariaDBParser._serializedATNSegment11,
			MariaDBParser._serializedATNSegment12,
			MariaDBParser._serializedATNSegment13,
			MariaDBParser._serializedATNSegment14,
		],
		"",
	);
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!MariaDBParser.__ATN) {
			MariaDBParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(MariaDBParser._serializedATN));
		}

		return MariaDBParser.__ATN;
	}

}

export class RootContext extends ParserRuleContext {
	public EOF(): TerminalNode { return this.getToken(MariaDBParser.EOF, 0); }
	public sqlStatements(): SqlStatementsContext | undefined {
		return this.tryGetRuleContext(0, SqlStatementsContext);
	}
	public MINUS(): TerminalNode[];
	public MINUS(i: number): TerminalNode;
	public MINUS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.MINUS);
		} else {
			return this.getToken(MariaDBParser.MINUS, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_root; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterRoot) {
			listener.enterRoot(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitRoot) {
			listener.exitRoot(this);
		}
	}
}


export class SqlStatementsContext extends ParserRuleContext {
	public sqlStatement(): SqlStatementContext[];
	public sqlStatement(i: number): SqlStatementContext;
	public sqlStatement(i?: number): SqlStatementContext | SqlStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SqlStatementContext);
		} else {
			return this.getRuleContext(i, SqlStatementContext);
		}
	}
	public emptyStatement_(): EmptyStatement_Context[];
	public emptyStatement_(i: number): EmptyStatement_Context;
	public emptyStatement_(i?: number): EmptyStatement_Context | EmptyStatement_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(EmptyStatement_Context);
		} else {
			return this.getRuleContext(i, EmptyStatement_Context);
		}
	}
	public SEMI(): TerminalNode[];
	public SEMI(i: number): TerminalNode;
	public SEMI(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.SEMI);
		} else {
			return this.getToken(MariaDBParser.SEMI, i);
		}
	}
	public MINUS(): TerminalNode[];
	public MINUS(i: number): TerminalNode;
	public MINUS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.MINUS);
		} else {
			return this.getToken(MariaDBParser.MINUS, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_sqlStatements; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSqlStatements) {
			listener.enterSqlStatements(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSqlStatements) {
			listener.exitSqlStatements(this);
		}
	}
}


export class SqlStatementContext extends ParserRuleContext {
	public ddlStatement(): DdlStatementContext | undefined {
		return this.tryGetRuleContext(0, DdlStatementContext);
	}
	public dmlStatement(): DmlStatementContext | undefined {
		return this.tryGetRuleContext(0, DmlStatementContext);
	}
	public transactionStatement(): TransactionStatementContext | undefined {
		return this.tryGetRuleContext(0, TransactionStatementContext);
	}
	public replicationStatement(): ReplicationStatementContext | undefined {
		return this.tryGetRuleContext(0, ReplicationStatementContext);
	}
	public preparedStatement(): PreparedStatementContext | undefined {
		return this.tryGetRuleContext(0, PreparedStatementContext);
	}
	public administrationStatement(): AdministrationStatementContext | undefined {
		return this.tryGetRuleContext(0, AdministrationStatementContext);
	}
	public utilityStatement(): UtilityStatementContext | undefined {
		return this.tryGetRuleContext(0, UtilityStatementContext);
	}
	public setStatementFor(): SetStatementForContext | undefined {
		return this.tryGetRuleContext(0, SetStatementForContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_sqlStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSqlStatement) {
			listener.enterSqlStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSqlStatement) {
			listener.exitSqlStatement(this);
		}
	}
}


export class SetStatementForContext extends ParserRuleContext {
	public SET(): TerminalNode { return this.getToken(MariaDBParser.SET, 0); }
	public STATEMENT(): TerminalNode { return this.getToken(MariaDBParser.STATEMENT, 0); }
	public ID(): TerminalNode[];
	public ID(i: number): TerminalNode;
	public ID(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.ID);
		} else {
			return this.getToken(MariaDBParser.ID, i);
		}
	}
	public EQUAL_SYMBOL(): TerminalNode[];
	public EQUAL_SYMBOL(i: number): TerminalNode;
	public EQUAL_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.EQUAL_SYMBOL);
		} else {
			return this.getToken(MariaDBParser.EQUAL_SYMBOL, i);
		}
	}
	public constant(): ConstantContext[];
	public constant(i: number): ConstantContext;
	public constant(i?: number): ConstantContext | ConstantContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ConstantContext);
		} else {
			return this.getRuleContext(i, ConstantContext);
		}
	}
	public FOR(): TerminalNode { return this.getToken(MariaDBParser.FOR, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_setStatementFor; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSetStatementFor) {
			listener.enterSetStatementFor(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSetStatementFor) {
			listener.exitSetStatementFor(this);
		}
	}
}


export class EmptyStatement_Context extends ParserRuleContext {
	public SEMI(): TerminalNode { return this.getToken(MariaDBParser.SEMI, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_emptyStatement_; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterEmptyStatement_) {
			listener.enterEmptyStatement_(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitEmptyStatement_) {
			listener.exitEmptyStatement_(this);
		}
	}
}


export class DdlStatementContext extends ParserRuleContext {
	public createDatabase(): CreateDatabaseContext | undefined {
		return this.tryGetRuleContext(0, CreateDatabaseContext);
	}
	public createEvent(): CreateEventContext | undefined {
		return this.tryGetRuleContext(0, CreateEventContext);
	}
	public createIndex(): CreateIndexContext | undefined {
		return this.tryGetRuleContext(0, CreateIndexContext);
	}
	public createLogfileGroup(): CreateLogfileGroupContext | undefined {
		return this.tryGetRuleContext(0, CreateLogfileGroupContext);
	}
	public createProcedure(): CreateProcedureContext | undefined {
		return this.tryGetRuleContext(0, CreateProcedureContext);
	}
	public createFunction(): CreateFunctionContext | undefined {
		return this.tryGetRuleContext(0, CreateFunctionContext);
	}
	public createServer(): CreateServerContext | undefined {
		return this.tryGetRuleContext(0, CreateServerContext);
	}
	public createTable(): CreateTableContext | undefined {
		return this.tryGetRuleContext(0, CreateTableContext);
	}
	public createTablespaceInnodb(): CreateTablespaceInnodbContext | undefined {
		return this.tryGetRuleContext(0, CreateTablespaceInnodbContext);
	}
	public createTablespaceNdb(): CreateTablespaceNdbContext | undefined {
		return this.tryGetRuleContext(0, CreateTablespaceNdbContext);
	}
	public createTrigger(): CreateTriggerContext | undefined {
		return this.tryGetRuleContext(0, CreateTriggerContext);
	}
	public createView(): CreateViewContext | undefined {
		return this.tryGetRuleContext(0, CreateViewContext);
	}
	public createRole(): CreateRoleContext | undefined {
		return this.tryGetRuleContext(0, CreateRoleContext);
	}
	public createSequence(): CreateSequenceContext | undefined {
		return this.tryGetRuleContext(0, CreateSequenceContext);
	}
	public alterDatabase(): AlterDatabaseContext | undefined {
		return this.tryGetRuleContext(0, AlterDatabaseContext);
	}
	public alterEvent(): AlterEventContext | undefined {
		return this.tryGetRuleContext(0, AlterEventContext);
	}
	public alterFunction(): AlterFunctionContext | undefined {
		return this.tryGetRuleContext(0, AlterFunctionContext);
	}
	public alterInstance(): AlterInstanceContext | undefined {
		return this.tryGetRuleContext(0, AlterInstanceContext);
	}
	public alterLogfileGroup(): AlterLogfileGroupContext | undefined {
		return this.tryGetRuleContext(0, AlterLogfileGroupContext);
	}
	public alterProcedure(): AlterProcedureContext | undefined {
		return this.tryGetRuleContext(0, AlterProcedureContext);
	}
	public alterServer(): AlterServerContext | undefined {
		return this.tryGetRuleContext(0, AlterServerContext);
	}
	public alterTable(): AlterTableContext | undefined {
		return this.tryGetRuleContext(0, AlterTableContext);
	}
	public alterTablespace(): AlterTablespaceContext | undefined {
		return this.tryGetRuleContext(0, AlterTablespaceContext);
	}
	public alterView(): AlterViewContext | undefined {
		return this.tryGetRuleContext(0, AlterViewContext);
	}
	public alterSequence(): AlterSequenceContext | undefined {
		return this.tryGetRuleContext(0, AlterSequenceContext);
	}
	public dropDatabase(): DropDatabaseContext | undefined {
		return this.tryGetRuleContext(0, DropDatabaseContext);
	}
	public dropEvent(): DropEventContext | undefined {
		return this.tryGetRuleContext(0, DropEventContext);
	}
	public dropIndex(): DropIndexContext | undefined {
		return this.tryGetRuleContext(0, DropIndexContext);
	}
	public dropLogfileGroup(): DropLogfileGroupContext | undefined {
		return this.tryGetRuleContext(0, DropLogfileGroupContext);
	}
	public dropProcedure(): DropProcedureContext | undefined {
		return this.tryGetRuleContext(0, DropProcedureContext);
	}
	public dropFunction(): DropFunctionContext | undefined {
		return this.tryGetRuleContext(0, DropFunctionContext);
	}
	public dropServer(): DropServerContext | undefined {
		return this.tryGetRuleContext(0, DropServerContext);
	}
	public dropTable(): DropTableContext | undefined {
		return this.tryGetRuleContext(0, DropTableContext);
	}
	public dropTablespace(): DropTablespaceContext | undefined {
		return this.tryGetRuleContext(0, DropTablespaceContext);
	}
	public dropTrigger(): DropTriggerContext | undefined {
		return this.tryGetRuleContext(0, DropTriggerContext);
	}
	public dropView(): DropViewContext | undefined {
		return this.tryGetRuleContext(0, DropViewContext);
	}
	public dropRole(): DropRoleContext | undefined {
		return this.tryGetRuleContext(0, DropRoleContext);
	}
	public dropSequence(): DropSequenceContext | undefined {
		return this.tryGetRuleContext(0, DropSequenceContext);
	}
	public setRole(): SetRoleContext | undefined {
		return this.tryGetRuleContext(0, SetRoleContext);
	}
	public renameTable(): RenameTableContext | undefined {
		return this.tryGetRuleContext(0, RenameTableContext);
	}
	public truncateTable(): TruncateTableContext | undefined {
		return this.tryGetRuleContext(0, TruncateTableContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_ddlStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDdlStatement) {
			listener.enterDdlStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDdlStatement) {
			listener.exitDdlStatement(this);
		}
	}
}


export class DmlStatementContext extends ParserRuleContext {
	public selectStatement(): SelectStatementContext | undefined {
		return this.tryGetRuleContext(0, SelectStatementContext);
	}
	public insertStatement(): InsertStatementContext | undefined {
		return this.tryGetRuleContext(0, InsertStatementContext);
	}
	public updateStatement(): UpdateStatementContext | undefined {
		return this.tryGetRuleContext(0, UpdateStatementContext);
	}
	public deleteStatement(): DeleteStatementContext | undefined {
		return this.tryGetRuleContext(0, DeleteStatementContext);
	}
	public replaceStatement(): ReplaceStatementContext | undefined {
		return this.tryGetRuleContext(0, ReplaceStatementContext);
	}
	public callStatement(): CallStatementContext | undefined {
		return this.tryGetRuleContext(0, CallStatementContext);
	}
	public loadDataStatement(): LoadDataStatementContext | undefined {
		return this.tryGetRuleContext(0, LoadDataStatementContext);
	}
	public loadXmlStatement(): LoadXmlStatementContext | undefined {
		return this.tryGetRuleContext(0, LoadXmlStatementContext);
	}
	public doStatement(): DoStatementContext | undefined {
		return this.tryGetRuleContext(0, DoStatementContext);
	}
	public handlerStatement(): HandlerStatementContext | undefined {
		return this.tryGetRuleContext(0, HandlerStatementContext);
	}
	public valuesStatement(): ValuesStatementContext | undefined {
		return this.tryGetRuleContext(0, ValuesStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_dmlStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDmlStatement) {
			listener.enterDmlStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDmlStatement) {
			listener.exitDmlStatement(this);
		}
	}
}


export class TransactionStatementContext extends ParserRuleContext {
	public startTransaction(): StartTransactionContext | undefined {
		return this.tryGetRuleContext(0, StartTransactionContext);
	}
	public beginWork(): BeginWorkContext | undefined {
		return this.tryGetRuleContext(0, BeginWorkContext);
	}
	public commitWork(): CommitWorkContext | undefined {
		return this.tryGetRuleContext(0, CommitWorkContext);
	}
	public rollbackWork(): RollbackWorkContext | undefined {
		return this.tryGetRuleContext(0, RollbackWorkContext);
	}
	public savepointStatement(): SavepointStatementContext | undefined {
		return this.tryGetRuleContext(0, SavepointStatementContext);
	}
	public rollbackStatement(): RollbackStatementContext | undefined {
		return this.tryGetRuleContext(0, RollbackStatementContext);
	}
	public releaseStatement(): ReleaseStatementContext | undefined {
		return this.tryGetRuleContext(0, ReleaseStatementContext);
	}
	public lockTables(): LockTablesContext | undefined {
		return this.tryGetRuleContext(0, LockTablesContext);
	}
	public unlockTables(): UnlockTablesContext | undefined {
		return this.tryGetRuleContext(0, UnlockTablesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_transactionStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTransactionStatement) {
			listener.enterTransactionStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTransactionStatement) {
			listener.exitTransactionStatement(this);
		}
	}
}


export class ReplicationStatementContext extends ParserRuleContext {
	public changeMaster(): ChangeMasterContext | undefined {
		return this.tryGetRuleContext(0, ChangeMasterContext);
	}
	public changeReplicationFilter(): ChangeReplicationFilterContext | undefined {
		return this.tryGetRuleContext(0, ChangeReplicationFilterContext);
	}
	public purgeBinaryLogs(): PurgeBinaryLogsContext | undefined {
		return this.tryGetRuleContext(0, PurgeBinaryLogsContext);
	}
	public resetMaster(): ResetMasterContext | undefined {
		return this.tryGetRuleContext(0, ResetMasterContext);
	}
	public resetSlave(): ResetSlaveContext | undefined {
		return this.tryGetRuleContext(0, ResetSlaveContext);
	}
	public startSlave(): StartSlaveContext | undefined {
		return this.tryGetRuleContext(0, StartSlaveContext);
	}
	public stopSlave(): StopSlaveContext | undefined {
		return this.tryGetRuleContext(0, StopSlaveContext);
	}
	public startGroupReplication(): StartGroupReplicationContext | undefined {
		return this.tryGetRuleContext(0, StartGroupReplicationContext);
	}
	public stopGroupReplication(): StopGroupReplicationContext | undefined {
		return this.tryGetRuleContext(0, StopGroupReplicationContext);
	}
	public xaStartTransaction(): XaStartTransactionContext | undefined {
		return this.tryGetRuleContext(0, XaStartTransactionContext);
	}
	public xaEndTransaction(): XaEndTransactionContext | undefined {
		return this.tryGetRuleContext(0, XaEndTransactionContext);
	}
	public xaPrepareStatement(): XaPrepareStatementContext | undefined {
		return this.tryGetRuleContext(0, XaPrepareStatementContext);
	}
	public xaCommitWork(): XaCommitWorkContext | undefined {
		return this.tryGetRuleContext(0, XaCommitWorkContext);
	}
	public xaRollbackWork(): XaRollbackWorkContext | undefined {
		return this.tryGetRuleContext(0, XaRollbackWorkContext);
	}
	public xaRecoverWork(): XaRecoverWorkContext | undefined {
		return this.tryGetRuleContext(0, XaRecoverWorkContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_replicationStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterReplicationStatement) {
			listener.enterReplicationStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitReplicationStatement) {
			listener.exitReplicationStatement(this);
		}
	}
}


export class PreparedStatementContext extends ParserRuleContext {
	public prepareStatement(): PrepareStatementContext | undefined {
		return this.tryGetRuleContext(0, PrepareStatementContext);
	}
	public executeStatement(): ExecuteStatementContext | undefined {
		return this.tryGetRuleContext(0, ExecuteStatementContext);
	}
	public deallocatePrepare(): DeallocatePrepareContext | undefined {
		return this.tryGetRuleContext(0, DeallocatePrepareContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_preparedStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterPreparedStatement) {
			listener.enterPreparedStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitPreparedStatement) {
			listener.exitPreparedStatement(this);
		}
	}
}


export class CompoundStatementContext extends ParserRuleContext {
	public blockStatement(): BlockStatementContext | undefined {
		return this.tryGetRuleContext(0, BlockStatementContext);
	}
	public caseStatement(): CaseStatementContext | undefined {
		return this.tryGetRuleContext(0, CaseStatementContext);
	}
	public ifStatement(): IfStatementContext | undefined {
		return this.tryGetRuleContext(0, IfStatementContext);
	}
	public leaveStatement(): LeaveStatementContext | undefined {
		return this.tryGetRuleContext(0, LeaveStatementContext);
	}
	public loopStatement(): LoopStatementContext | undefined {
		return this.tryGetRuleContext(0, LoopStatementContext);
	}
	public repeatStatement(): RepeatStatementContext | undefined {
		return this.tryGetRuleContext(0, RepeatStatementContext);
	}
	public whileStatement(): WhileStatementContext | undefined {
		return this.tryGetRuleContext(0, WhileStatementContext);
	}
	public iterateStatement(): IterateStatementContext | undefined {
		return this.tryGetRuleContext(0, IterateStatementContext);
	}
	public returnStatement(): ReturnStatementContext | undefined {
		return this.tryGetRuleContext(0, ReturnStatementContext);
	}
	public cursorStatement(): CursorStatementContext | undefined {
		return this.tryGetRuleContext(0, CursorStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_compoundStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCompoundStatement) {
			listener.enterCompoundStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCompoundStatement) {
			listener.exitCompoundStatement(this);
		}
	}
}


export class AdministrationStatementContext extends ParserRuleContext {
	public alterUser(): AlterUserContext | undefined {
		return this.tryGetRuleContext(0, AlterUserContext);
	}
	public createUser(): CreateUserContext | undefined {
		return this.tryGetRuleContext(0, CreateUserContext);
	}
	public dropUser(): DropUserContext | undefined {
		return this.tryGetRuleContext(0, DropUserContext);
	}
	public grantStatement(): GrantStatementContext | undefined {
		return this.tryGetRuleContext(0, GrantStatementContext);
	}
	public grantProxy(): GrantProxyContext | undefined {
		return this.tryGetRuleContext(0, GrantProxyContext);
	}
	public renameUser(): RenameUserContext | undefined {
		return this.tryGetRuleContext(0, RenameUserContext);
	}
	public revokeStatement(): RevokeStatementContext | undefined {
		return this.tryGetRuleContext(0, RevokeStatementContext);
	}
	public revokeProxy(): RevokeProxyContext | undefined {
		return this.tryGetRuleContext(0, RevokeProxyContext);
	}
	public analyzeTable(): AnalyzeTableContext | undefined {
		return this.tryGetRuleContext(0, AnalyzeTableContext);
	}
	public checkTable(): CheckTableContext | undefined {
		return this.tryGetRuleContext(0, CheckTableContext);
	}
	public checksumTable(): ChecksumTableContext | undefined {
		return this.tryGetRuleContext(0, ChecksumTableContext);
	}
	public optimizeTable(): OptimizeTableContext | undefined {
		return this.tryGetRuleContext(0, OptimizeTableContext);
	}
	public repairTable(): RepairTableContext | undefined {
		return this.tryGetRuleContext(0, RepairTableContext);
	}
	public createUdfunction(): CreateUdfunctionContext | undefined {
		return this.tryGetRuleContext(0, CreateUdfunctionContext);
	}
	public installPlugin(): InstallPluginContext | undefined {
		return this.tryGetRuleContext(0, InstallPluginContext);
	}
	public uninstallPlugin(): UninstallPluginContext | undefined {
		return this.tryGetRuleContext(0, UninstallPluginContext);
	}
	public setStatement(): SetStatementContext | undefined {
		return this.tryGetRuleContext(0, SetStatementContext);
	}
	public showStatement(): ShowStatementContext | undefined {
		return this.tryGetRuleContext(0, ShowStatementContext);
	}
	public binlogStatement(): BinlogStatementContext | undefined {
		return this.tryGetRuleContext(0, BinlogStatementContext);
	}
	public cacheIndexStatement(): CacheIndexStatementContext | undefined {
		return this.tryGetRuleContext(0, CacheIndexStatementContext);
	}
	public flushStatement(): FlushStatementContext | undefined {
		return this.tryGetRuleContext(0, FlushStatementContext);
	}
	public killStatement(): KillStatementContext | undefined {
		return this.tryGetRuleContext(0, KillStatementContext);
	}
	public loadIndexIntoCache(): LoadIndexIntoCacheContext | undefined {
		return this.tryGetRuleContext(0, LoadIndexIntoCacheContext);
	}
	public resetStatement(): ResetStatementContext | undefined {
		return this.tryGetRuleContext(0, ResetStatementContext);
	}
	public shutdownStatement(): ShutdownStatementContext | undefined {
		return this.tryGetRuleContext(0, ShutdownStatementContext);
	}
	public explainStatement(): ExplainStatementContext | undefined {
		return this.tryGetRuleContext(0, ExplainStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_administrationStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAdministrationStatement) {
			listener.enterAdministrationStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAdministrationStatement) {
			listener.exitAdministrationStatement(this);
		}
	}
}


export class UtilityStatementContext extends ParserRuleContext {
	public simpleDescribeStatement(): SimpleDescribeStatementContext | undefined {
		return this.tryGetRuleContext(0, SimpleDescribeStatementContext);
	}
	public fullDescribeStatement(): FullDescribeStatementContext | undefined {
		return this.tryGetRuleContext(0, FullDescribeStatementContext);
	}
	public helpStatement(): HelpStatementContext | undefined {
		return this.tryGetRuleContext(0, HelpStatementContext);
	}
	public useStatement(): UseStatementContext | undefined {
		return this.tryGetRuleContext(0, UseStatementContext);
	}
	public signalStatement(): SignalStatementContext | undefined {
		return this.tryGetRuleContext(0, SignalStatementContext);
	}
	public resignalStatement(): ResignalStatementContext | undefined {
		return this.tryGetRuleContext(0, ResignalStatementContext);
	}
	public diagnosticsStatement(): DiagnosticsStatementContext | undefined {
		return this.tryGetRuleContext(0, DiagnosticsStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_utilityStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterUtilityStatement) {
			listener.enterUtilityStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitUtilityStatement) {
			listener.exitUtilityStatement(this);
		}
	}
}


export class CreateDatabaseContext extends ParserRuleContext {
	public _dbFormat!: Token;
	public CREATE(): TerminalNode { return this.getToken(MariaDBParser.CREATE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DATABASE, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SCHEMA, 0); }
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	public createDatabaseOption(): CreateDatabaseOptionContext[];
	public createDatabaseOption(i: number): CreateDatabaseOptionContext;
	public createDatabaseOption(i?: number): CreateDatabaseOptionContext | CreateDatabaseOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CreateDatabaseOptionContext);
		} else {
			return this.getRuleContext(i, CreateDatabaseOptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_createDatabase; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCreateDatabase) {
			listener.enterCreateDatabase(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCreateDatabase) {
			listener.exitCreateDatabase(this);
		}
	}
}


export class CreateEventContext extends ParserRuleContext {
	public CREATE(): TerminalNode { return this.getToken(MariaDBParser.CREATE, 0); }
	public EVENT(): TerminalNode { return this.getToken(MariaDBParser.EVENT, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.ON);
		} else {
			return this.getToken(MariaDBParser.ON, i);
		}
	}
	public SCHEDULE(): TerminalNode { return this.getToken(MariaDBParser.SCHEDULE, 0); }
	public scheduleExpression(): ScheduleExpressionContext {
		return this.getRuleContext(0, ScheduleExpressionContext);
	}
	public DO(): TerminalNode { return this.getToken(MariaDBParser.DO, 0); }
	public routineBody(): RoutineBodyContext {
		return this.getRuleContext(0, RoutineBodyContext);
	}
	public ownerStatement(): OwnerStatementContext | undefined {
		return this.tryGetRuleContext(0, OwnerStatementContext);
	}
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	public COMPLETION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COMPLETION, 0); }
	public PRESERVE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PRESERVE, 0); }
	public enableType(): EnableTypeContext | undefined {
		return this.tryGetRuleContext(0, EnableTypeContext);
	}
	public COMMENT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COMMENT, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_LITERAL, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_createEvent; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCreateEvent) {
			listener.enterCreateEvent(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCreateEvent) {
			listener.exitCreateEvent(this);
		}
	}
}


export class CreateIndexContext extends ParserRuleContext {
	public _intimeAction!: Token;
	public _indexCategory!: Token;
	public _algType!: Token;
	public _lockType!: Token;
	public CREATE(): TerminalNode { return this.getToken(MariaDBParser.CREATE, 0); }
	public INDEX(): TerminalNode { return this.getToken(MariaDBParser.INDEX, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public ON(): TerminalNode { return this.getToken(MariaDBParser.ON, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getRuleContext(0, IndexColumnNamesContext);
	}
	public orReplace(): OrReplaceContext | undefined {
		return this.tryGetRuleContext(0, OrReplaceContext);
	}
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	public indexType(): IndexTypeContext | undefined {
		return this.tryGetRuleContext(0, IndexTypeContext);
	}
	public waitNowaitClause(): WaitNowaitClauseContext | undefined {
		return this.tryGetRuleContext(0, WaitNowaitClauseContext);
	}
	public indexOption(): IndexOptionContext[];
	public indexOption(i: number): IndexOptionContext;
	public indexOption(i?: number): IndexOptionContext | IndexOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexOptionContext);
		} else {
			return this.getRuleContext(i, IndexOptionContext);
		}
	}
	public ALGORITHM(): TerminalNode[];
	public ALGORITHM(i: number): TerminalNode;
	public ALGORITHM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.ALGORITHM);
		} else {
			return this.getToken(MariaDBParser.ALGORITHM, i);
		}
	}
	public LOCK(): TerminalNode[];
	public LOCK(i: number): TerminalNode;
	public LOCK(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.LOCK);
		} else {
			return this.getToken(MariaDBParser.LOCK, i);
		}
	}
	public ONLINE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ONLINE, 0); }
	public OFFLINE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.OFFLINE, 0); }
	public UNIQUE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UNIQUE, 0); }
	public FULLTEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FULLTEXT, 0); }
	public SPATIAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SPATIAL, 0); }
	public DEFAULT(): TerminalNode[];
	public DEFAULT(i: number): TerminalNode;
	public DEFAULT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.DEFAULT);
		} else {
			return this.getToken(MariaDBParser.DEFAULT, i);
		}
	}
	public INPLACE(): TerminalNode[];
	public INPLACE(i: number): TerminalNode;
	public INPLACE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.INPLACE);
		} else {
			return this.getToken(MariaDBParser.INPLACE, i);
		}
	}
	public COPY(): TerminalNode[];
	public COPY(i: number): TerminalNode;
	public COPY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COPY);
		} else {
			return this.getToken(MariaDBParser.COPY, i);
		}
	}
	public NOCOPY(): TerminalNode[];
	public NOCOPY(i: number): TerminalNode;
	public NOCOPY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.NOCOPY);
		} else {
			return this.getToken(MariaDBParser.NOCOPY, i);
		}
	}
	public INSTANT(): TerminalNode[];
	public INSTANT(i: number): TerminalNode;
	public INSTANT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.INSTANT);
		} else {
			return this.getToken(MariaDBParser.INSTANT, i);
		}
	}
	public NONE(): TerminalNode[];
	public NONE(i: number): TerminalNode;
	public NONE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.NONE);
		} else {
			return this.getToken(MariaDBParser.NONE, i);
		}
	}
	public SHARED(): TerminalNode[];
	public SHARED(i: number): TerminalNode;
	public SHARED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.SHARED);
		} else {
			return this.getToken(MariaDBParser.SHARED, i);
		}
	}
	public EXCLUSIVE(): TerminalNode[];
	public EXCLUSIVE(i: number): TerminalNode;
	public EXCLUSIVE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.EXCLUSIVE);
		} else {
			return this.getToken(MariaDBParser.EXCLUSIVE, i);
		}
	}
	public EQUAL_SYMBOL(): TerminalNode[];
	public EQUAL_SYMBOL(i: number): TerminalNode;
	public EQUAL_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.EQUAL_SYMBOL);
		} else {
			return this.getToken(MariaDBParser.EQUAL_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_createIndex; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCreateIndex) {
			listener.enterCreateIndex(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCreateIndex) {
			listener.exitCreateIndex(this);
		}
	}
}


export class CreateLogfileGroupContext extends ParserRuleContext {
	public _undoFile!: Token;
	public _initSize!: FileSizeLiteralContext;
	public _undoSize!: FileSizeLiteralContext;
	public _redoSize!: FileSizeLiteralContext;
	public _comment!: Token;
	public CREATE(): TerminalNode { return this.getToken(MariaDBParser.CREATE, 0); }
	public LOGFILE(): TerminalNode { return this.getToken(MariaDBParser.LOGFILE, 0); }
	public GROUP(): TerminalNode { return this.getToken(MariaDBParser.GROUP, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public ADD(): TerminalNode { return this.getToken(MariaDBParser.ADD, 0); }
	public UNDOFILE(): TerminalNode { return this.getToken(MariaDBParser.UNDOFILE, 0); }
	public ENGINE(): TerminalNode { return this.getToken(MariaDBParser.ENGINE, 0); }
	public engineName(): EngineNameContext {
		return this.getRuleContext(0, EngineNameContext);
	}
	public STRING_LITERAL(): TerminalNode[];
	public STRING_LITERAL(i: number): TerminalNode;
	public STRING_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.STRING_LITERAL);
		} else {
			return this.getToken(MariaDBParser.STRING_LITERAL, i);
		}
	}
	public INITIAL_SIZE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INITIAL_SIZE, 0); }
	public UNDO_BUFFER_SIZE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UNDO_BUFFER_SIZE, 0); }
	public REDO_BUFFER_SIZE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REDO_BUFFER_SIZE, 0); }
	public NODEGROUP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NODEGROUP, 0); }
	public WAIT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WAIT, 0); }
	public COMMENT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COMMENT, 0); }
	public EQUAL_SYMBOL(): TerminalNode[];
	public EQUAL_SYMBOL(i: number): TerminalNode;
	public EQUAL_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.EQUAL_SYMBOL);
		} else {
			return this.getToken(MariaDBParser.EQUAL_SYMBOL, i);
		}
	}
	public fileSizeLiteral(): FileSizeLiteralContext[];
	public fileSizeLiteral(i: number): FileSizeLiteralContext;
	public fileSizeLiteral(i?: number): FileSizeLiteralContext | FileSizeLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FileSizeLiteralContext);
		} else {
			return this.getRuleContext(i, FileSizeLiteralContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_createLogfileGroup; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCreateLogfileGroup) {
			listener.enterCreateLogfileGroup(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCreateLogfileGroup) {
			listener.exitCreateLogfileGroup(this);
		}
	}
}


export class CreateProcedureContext extends ParserRuleContext {
	public CREATE(): TerminalNode { return this.getToken(MariaDBParser.CREATE, 0); }
	public PROCEDURE(): TerminalNode { return this.getToken(MariaDBParser.PROCEDURE, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public routineBody(): RoutineBodyContext {
		return this.getRuleContext(0, RoutineBodyContext);
	}
	public orReplace(): OrReplaceContext | undefined {
		return this.tryGetRuleContext(0, OrReplaceContext);
	}
	public ownerStatement(): OwnerStatementContext | undefined {
		return this.tryGetRuleContext(0, OwnerStatementContext);
	}
	public procedureParameter(): ProcedureParameterContext[];
	public procedureParameter(i: number): ProcedureParameterContext;
	public procedureParameter(i?: number): ProcedureParameterContext | ProcedureParameterContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureParameterContext);
		} else {
			return this.getRuleContext(i, ProcedureParameterContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	public routineOption(): RoutineOptionContext[];
	public routineOption(i: number): RoutineOptionContext;
	public routineOption(i?: number): RoutineOptionContext | RoutineOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RoutineOptionContext);
		} else {
			return this.getRuleContext(i, RoutineOptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_createProcedure; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCreateProcedure) {
			listener.enterCreateProcedure(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCreateProcedure) {
			listener.exitCreateProcedure(this);
		}
	}
}


export class CreateFunctionContext extends ParserRuleContext {
	public CREATE(): TerminalNode { return this.getToken(MariaDBParser.CREATE, 0); }
	public FUNCTION(): TerminalNode { return this.getToken(MariaDBParser.FUNCTION, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public RETURNS(): TerminalNode { return this.getToken(MariaDBParser.RETURNS, 0); }
	public dataType(): DataTypeContext {
		return this.getRuleContext(0, DataTypeContext);
	}
	public routineBody(): RoutineBodyContext | undefined {
		return this.tryGetRuleContext(0, RoutineBodyContext);
	}
	public returnStatement(): ReturnStatementContext | undefined {
		return this.tryGetRuleContext(0, ReturnStatementContext);
	}
	public orReplace(): OrReplaceContext | undefined {
		return this.tryGetRuleContext(0, OrReplaceContext);
	}
	public ownerStatement(): OwnerStatementContext | undefined {
		return this.tryGetRuleContext(0, OwnerStatementContext);
	}
	public AGGREGATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AGGREGATE, 0); }
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	public functionParameter(): FunctionParameterContext[];
	public functionParameter(i: number): FunctionParameterContext;
	public functionParameter(i?: number): FunctionParameterContext | FunctionParameterContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FunctionParameterContext);
		} else {
			return this.getRuleContext(i, FunctionParameterContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	public routineOption(): RoutineOptionContext[];
	public routineOption(i: number): RoutineOptionContext;
	public routineOption(i?: number): RoutineOptionContext | RoutineOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RoutineOptionContext);
		} else {
			return this.getRuleContext(i, RoutineOptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_createFunction; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCreateFunction) {
			listener.enterCreateFunction(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCreateFunction) {
			listener.exitCreateFunction(this);
		}
	}
}


export class CreateRoleContext extends ParserRuleContext {
	public CREATE(): TerminalNode { return this.getToken(MariaDBParser.CREATE, 0); }
	public ROLE(): TerminalNode { return this.getToken(MariaDBParser.ROLE, 0); }
	public roleName(): RoleNameContext[];
	public roleName(i: number): RoleNameContext;
	public roleName(i?: number): RoleNameContext | RoleNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RoleNameContext);
		} else {
			return this.getRuleContext(i, RoleNameContext);
		}
	}
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_createRole; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCreateRole) {
			listener.enterCreateRole(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCreateRole) {
			listener.exitCreateRole(this);
		}
	}
}


export class CreateServerContext extends ParserRuleContext {
	public _wrapperName!: Token;
	public CREATE(): TerminalNode { return this.getToken(MariaDBParser.CREATE, 0); }
	public SERVER(): TerminalNode { return this.getToken(MariaDBParser.SERVER, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public FOREIGN(): TerminalNode { return this.getToken(MariaDBParser.FOREIGN, 0); }
	public DATA(): TerminalNode { return this.getToken(MariaDBParser.DATA, 0); }
	public WRAPPER(): TerminalNode { return this.getToken(MariaDBParser.WRAPPER, 0); }
	public OPTIONS(): TerminalNode { return this.getToken(MariaDBParser.OPTIONS, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public serverOption(): ServerOptionContext[];
	public serverOption(i: number): ServerOptionContext;
	public serverOption(i?: number): ServerOptionContext | ServerOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ServerOptionContext);
		} else {
			return this.getRuleContext(i, ServerOptionContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public MYSQL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MYSQL, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_LITERAL, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_createServer; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCreateServer) {
			listener.enterCreateServer(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCreateServer) {
			listener.exitCreateServer(this);
		}
	}
}


export class CreateTableContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_createTable; }
	public copyFrom(ctx: CreateTableContext): void {
		super.copyFrom(ctx);
	}
}
export class CopyCreateTableContext extends CreateTableContext {
	public _parenthesisTable!: TableNameContext;
	public CREATE(): TerminalNode { return this.getToken(MariaDBParser.CREATE, 0); }
	public TABLE(): TerminalNode { return this.getToken(MariaDBParser.TABLE, 0); }
	public tableName(): TableNameContext[];
	public tableName(i: number): TableNameContext;
	public tableName(i?: number): TableNameContext | TableNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableNameContext);
		} else {
			return this.getRuleContext(i, TableNameContext);
		}
	}
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LIKE, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RR_BRACKET, 0); }
	public orReplace(): OrReplaceContext | undefined {
		return this.tryGetRuleContext(0, OrReplaceContext);
	}
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TEMPORARY, 0); }
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	constructor(ctx: CreateTableContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCopyCreateTable) {
			listener.enterCopyCreateTable(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCopyCreateTable) {
			listener.exitCopyCreateTable(this);
		}
	}
}
export class QueryCreateTableContext extends CreateTableContext {
	public _keyViolate!: Token;
	public CREATE(): TerminalNode { return this.getToken(MariaDBParser.CREATE, 0); }
	public TABLE(): TerminalNode { return this.getToken(MariaDBParser.TABLE, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public selectStatement(): SelectStatementContext {
		return this.getRuleContext(0, SelectStatementContext);
	}
	public orReplace(): OrReplaceContext | undefined {
		return this.tryGetRuleContext(0, OrReplaceContext);
	}
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TEMPORARY, 0); }
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	public createDefinitions(): CreateDefinitionsContext | undefined {
		return this.tryGetRuleContext(0, CreateDefinitionsContext);
	}
	public tableOption(): TableOptionContext[];
	public tableOption(i: number): TableOptionContext;
	public tableOption(i?: number): TableOptionContext | TableOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableOptionContext);
		} else {
			return this.getRuleContext(i, TableOptionContext);
		}
	}
	public partitionDefinitions(): PartitionDefinitionsContext | undefined {
		return this.tryGetRuleContext(0, PartitionDefinitionsContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AS, 0); }
	public IGNORE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.IGNORE, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REPLACE, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(ctx: CreateTableContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterQueryCreateTable) {
			listener.enterQueryCreateTable(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitQueryCreateTable) {
			listener.exitQueryCreateTable(this);
		}
	}
}
export class ColumnCreateTableContext extends CreateTableContext {
	public CREATE(): TerminalNode { return this.getToken(MariaDBParser.CREATE, 0); }
	public TABLE(): TerminalNode { return this.getToken(MariaDBParser.TABLE, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public createDefinitions(): CreateDefinitionsContext {
		return this.getRuleContext(0, CreateDefinitionsContext);
	}
	public orReplace(): OrReplaceContext | undefined {
		return this.tryGetRuleContext(0, OrReplaceContext);
	}
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TEMPORARY, 0); }
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	public tableOption(): TableOptionContext[];
	public tableOption(i: number): TableOptionContext;
	public tableOption(i?: number): TableOptionContext | TableOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableOptionContext);
		} else {
			return this.getRuleContext(i, TableOptionContext);
		}
	}
	public partitionDefinitions(): PartitionDefinitionsContext | undefined {
		return this.tryGetRuleContext(0, PartitionDefinitionsContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(ctx: CreateTableContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterColumnCreateTable) {
			listener.enterColumnCreateTable(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitColumnCreateTable) {
			listener.exitColumnCreateTable(this);
		}
	}
}


export class CreateTablespaceInnodbContext extends ParserRuleContext {
	public _datafile!: Token;
	public _fileBlockSize!: FileSizeLiteralContext;
	public CREATE(): TerminalNode { return this.getToken(MariaDBParser.CREATE, 0); }
	public TABLESPACE(): TerminalNode { return this.getToken(MariaDBParser.TABLESPACE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public ADD(): TerminalNode { return this.getToken(MariaDBParser.ADD, 0); }
	public DATAFILE(): TerminalNode { return this.getToken(MariaDBParser.DATAFILE, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.STRING_LITERAL, 0); }
	public FILE_BLOCK_SIZE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FILE_BLOCK_SIZE, 0); }
	public EQUAL_SYMBOL(): TerminalNode[];
	public EQUAL_SYMBOL(i: number): TerminalNode;
	public EQUAL_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.EQUAL_SYMBOL);
		} else {
			return this.getToken(MariaDBParser.EQUAL_SYMBOL, i);
		}
	}
	public ENGINE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ENGINE, 0); }
	public engineName(): EngineNameContext | undefined {
		return this.tryGetRuleContext(0, EngineNameContext);
	}
	public fileSizeLiteral(): FileSizeLiteralContext | undefined {
		return this.tryGetRuleContext(0, FileSizeLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_createTablespaceInnodb; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCreateTablespaceInnodb) {
			listener.enterCreateTablespaceInnodb(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCreateTablespaceInnodb) {
			listener.exitCreateTablespaceInnodb(this);
		}
	}
}


export class CreateTablespaceNdbContext extends ParserRuleContext {
	public _datafile!: Token;
	public _extentSize!: FileSizeLiteralContext;
	public _initialSize!: FileSizeLiteralContext;
	public _autoextendSize!: FileSizeLiteralContext;
	public _maxSize!: FileSizeLiteralContext;
	public _comment!: Token;
	public CREATE(): TerminalNode { return this.getToken(MariaDBParser.CREATE, 0); }
	public TABLESPACE(): TerminalNode { return this.getToken(MariaDBParser.TABLESPACE, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public ADD(): TerminalNode { return this.getToken(MariaDBParser.ADD, 0); }
	public DATAFILE(): TerminalNode { return this.getToken(MariaDBParser.DATAFILE, 0); }
	public USE(): TerminalNode { return this.getToken(MariaDBParser.USE, 0); }
	public LOGFILE(): TerminalNode { return this.getToken(MariaDBParser.LOGFILE, 0); }
	public GROUP(): TerminalNode { return this.getToken(MariaDBParser.GROUP, 0); }
	public ENGINE(): TerminalNode { return this.getToken(MariaDBParser.ENGINE, 0); }
	public engineName(): EngineNameContext {
		return this.getRuleContext(0, EngineNameContext);
	}
	public STRING_LITERAL(): TerminalNode[];
	public STRING_LITERAL(i: number): TerminalNode;
	public STRING_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.STRING_LITERAL);
		} else {
			return this.getToken(MariaDBParser.STRING_LITERAL, i);
		}
	}
	public EXTENT_SIZE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EXTENT_SIZE, 0); }
	public INITIAL_SIZE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INITIAL_SIZE, 0); }
	public AUTOEXTEND_SIZE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AUTOEXTEND_SIZE, 0); }
	public MAX_SIZE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MAX_SIZE, 0); }
	public NODEGROUP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NODEGROUP, 0); }
	public WAIT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WAIT, 0); }
	public COMMENT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COMMENT, 0); }
	public EQUAL_SYMBOL(): TerminalNode[];
	public EQUAL_SYMBOL(i: number): TerminalNode;
	public EQUAL_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.EQUAL_SYMBOL);
		} else {
			return this.getToken(MariaDBParser.EQUAL_SYMBOL, i);
		}
	}
	public fileSizeLiteral(): FileSizeLiteralContext[];
	public fileSizeLiteral(i: number): FileSizeLiteralContext;
	public fileSizeLiteral(i?: number): FileSizeLiteralContext | FileSizeLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FileSizeLiteralContext);
		} else {
			return this.getRuleContext(i, FileSizeLiteralContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_createTablespaceNdb; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCreateTablespaceNdb) {
			listener.enterCreateTablespaceNdb(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCreateTablespaceNdb) {
			listener.exitCreateTablespaceNdb(this);
		}
	}
}


export class CreateTriggerContext extends ParserRuleContext {
	public _thisTrigger!: FullIdContext;
	public _triggerTime!: Token;
	public _triggerEvent!: Token;
	public _triggerPlace!: Token;
	public _otherTrigger!: FullIdContext;
	public CREATE(): TerminalNode { return this.getToken(MariaDBParser.CREATE, 0); }
	public TRIGGER(): TerminalNode { return this.getToken(MariaDBParser.TRIGGER, 0); }
	public ON(): TerminalNode { return this.getToken(MariaDBParser.ON, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public FOR(): TerminalNode { return this.getToken(MariaDBParser.FOR, 0); }
	public EACH(): TerminalNode { return this.getToken(MariaDBParser.EACH, 0); }
	public ROW(): TerminalNode { return this.getToken(MariaDBParser.ROW, 0); }
	public routineBody(): RoutineBodyContext {
		return this.getRuleContext(0, RoutineBodyContext);
	}
	public fullId(): FullIdContext[];
	public fullId(i: number): FullIdContext;
	public fullId(i?: number): FullIdContext | FullIdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FullIdContext);
		} else {
			return this.getRuleContext(i, FullIdContext);
		}
	}
	public BEFORE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BEFORE, 0); }
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AFTER, 0); }
	public INSERT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INSERT, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UPDATE, 0); }
	public DELETE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DELETE, 0); }
	public orReplace(): OrReplaceContext | undefined {
		return this.tryGetRuleContext(0, OrReplaceContext);
	}
	public ownerStatement(): OwnerStatementContext | undefined {
		return this.tryGetRuleContext(0, OwnerStatementContext);
	}
	public FOLLOWS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FOLLOWS, 0); }
	public PRECEDES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PRECEDES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_createTrigger; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCreateTrigger) {
			listener.enterCreateTrigger(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCreateTrigger) {
			listener.exitCreateTrigger(this);
		}
	}
}


export class WithClauseContext extends ParserRuleContext {
	public WITH(): TerminalNode { return this.getToken(MariaDBParser.WITH, 0); }
	public commonTableExpressions(): CommonTableExpressionsContext {
		return this.getRuleContext(0, CommonTableExpressionsContext);
	}
	public RECURSIVE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RECURSIVE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_withClause; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterWithClause) {
			listener.enterWithClause(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitWithClause) {
			listener.exitWithClause(this);
		}
	}
}


export class CommonTableExpressionsContext extends ParserRuleContext {
	public cteName(): CteNameContext {
		return this.getRuleContext(0, CteNameContext);
	}
	public AS(): TerminalNode { return this.getToken(MariaDBParser.AS, 0); }
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.LR_BRACKET);
		} else {
			return this.getToken(MariaDBParser.LR_BRACKET, i);
		}
	}
	public dmlStatement(): DmlStatementContext {
		return this.getRuleContext(0, DmlStatementContext);
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.RR_BRACKET);
		} else {
			return this.getToken(MariaDBParser.RR_BRACKET, i);
		}
	}
	public cteColumnName(): CteColumnNameContext[];
	public cteColumnName(i: number): CteColumnNameContext;
	public cteColumnName(i?: number): CteColumnNameContext | CteColumnNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CteColumnNameContext);
		} else {
			return this.getRuleContext(i, CteColumnNameContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	public commonTableExpressions(): CommonTableExpressionsContext | undefined {
		return this.tryGetRuleContext(0, CommonTableExpressionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_commonTableExpressions; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCommonTableExpressions) {
			listener.enterCommonTableExpressions(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCommonTableExpressions) {
			listener.exitCommonTableExpressions(this);
		}
	}
}


export class CteNameContext extends ParserRuleContext {
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_cteName; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCteName) {
			listener.enterCteName(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCteName) {
			listener.exitCteName(this);
		}
	}
}


export class CteColumnNameContext extends ParserRuleContext {
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_cteColumnName; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCteColumnName) {
			listener.enterCteColumnName(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCteColumnName) {
			listener.exitCteColumnName(this);
		}
	}
}


export class CreateViewContext extends ParserRuleContext {
	public _algType!: Token;
	public _secContext!: Token;
	public _checkOption!: Token;
	public CREATE(): TerminalNode { return this.getToken(MariaDBParser.CREATE, 0); }
	public VIEW(): TerminalNode { return this.getToken(MariaDBParser.VIEW, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public AS(): TerminalNode { return this.getToken(MariaDBParser.AS, 0); }
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.LR_BRACKET);
		} else {
			return this.getToken(MariaDBParser.LR_BRACKET, i);
		}
	}
	public selectStatement(): SelectStatementContext | undefined {
		return this.tryGetRuleContext(0, SelectStatementContext);
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.RR_BRACKET);
		} else {
			return this.getToken(MariaDBParser.RR_BRACKET, i);
		}
	}
	public orReplace(): OrReplaceContext | undefined {
		return this.tryGetRuleContext(0, OrReplaceContext);
	}
	public ALGORITHM(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ALGORITHM, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	public ownerStatement(): OwnerStatementContext | undefined {
		return this.tryGetRuleContext(0, OwnerStatementContext);
	}
	public SQL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SQL, 0); }
	public SECURITY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SECURITY, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public UNDEFINED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UNDEFINED, 0); }
	public MERGE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MERGE, 0); }
	public TEMPTABLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TEMPTABLE, 0); }
	public DEFINER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DEFINER, 0); }
	public INVOKER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INVOKER, 0); }
	public withClause(): WithClauseContext | undefined {
		return this.tryGetRuleContext(0, WithClauseContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WITH, 0); }
	public CHECK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CHECK, 0); }
	public OPTION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.OPTION, 0); }
	public CASCADED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CASCADED, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOCAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_createView; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCreateView) {
			listener.enterCreateView(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCreateView) {
			listener.exitCreateView(this);
		}
	}
}


export class CreateSequenceContext extends ParserRuleContext {
	public CREATE(): TerminalNode { return this.getToken(MariaDBParser.CREATE, 0); }
	public SEQUENCE(): TerminalNode { return this.getToken(MariaDBParser.SEQUENCE, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public orReplace(): OrReplaceContext | undefined {
		return this.tryGetRuleContext(0, OrReplaceContext);
	}
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TEMPORARY, 0); }
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	public sequenceSpec(): SequenceSpecContext[];
	public sequenceSpec(i: number): SequenceSpecContext;
	public sequenceSpec(i?: number): SequenceSpecContext | SequenceSpecContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SequenceSpecContext);
		} else {
			return this.getRuleContext(i, SequenceSpecContext);
		}
	}
	public tableOption(): TableOptionContext[];
	public tableOption(i: number): TableOptionContext;
	public tableOption(i?: number): TableOptionContext | TableOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableOptionContext);
		} else {
			return this.getRuleContext(i, TableOptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_createSequence; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCreateSequence) {
			listener.enterCreateSequence(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCreateSequence) {
			listener.exitCreateSequence(this);
		}
	}
}


export class SequenceSpecContext extends ParserRuleContext {
	public INCREMENT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INCREMENT, 0); }
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public BY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BY, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	public MINVALUE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MINVALUE, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NO, 0); }
	public NOMINVALUE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NOMINVALUE, 0); }
	public MAXVALUE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MAXVALUE, 0); }
	public NOMAXVALUE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NOMAXVALUE, 0); }
	public START(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.START, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WITH, 0); }
	public CACHE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CACHE, 0); }
	public NOCACHE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NOCACHE, 0); }
	public CYCLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CYCLE, 0); }
	public NOCYCLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NOCYCLE, 0); }
	public RESTART(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RESTART, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_sequenceSpec; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSequenceSpec) {
			listener.enterSequenceSpec(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSequenceSpec) {
			listener.exitSequenceSpec(this);
		}
	}
}


export class CreateDatabaseOptionContext extends ParserRuleContext {
	public charSet(): CharSetContext | undefined {
		return this.tryGetRuleContext(0, CharSetContext);
	}
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public DEFAULT(): TerminalNode[];
	public DEFAULT(i: number): TerminalNode;
	public DEFAULT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.DEFAULT);
		} else {
			return this.getToken(MariaDBParser.DEFAULT, i);
		}
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	public COLLATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COLLATE, 0); }
	public collationName(): CollationNameContext | undefined {
		return this.tryGetRuleContext(0, CollationNameContext);
	}
	public ENCRYPTION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ENCRYPTION, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_LITERAL, 0); }
	public READ(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.READ, 0); }
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ONLY, 0); }
	public ZERO_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ZERO_DECIMAL, 0); }
	public ONE_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ONE_DECIMAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_createDatabaseOption; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCreateDatabaseOption) {
			listener.enterCreateDatabaseOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCreateDatabaseOption) {
			listener.exitCreateDatabaseOption(this);
		}
	}
}


export class CharSetContext extends ParserRuleContext {
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CHARACTER, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SET, 0); }
	public CHARSET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CHARSET, 0); }
	public CHAR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CHAR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_charSet; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCharSet) {
			listener.enterCharSet(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCharSet) {
			listener.exitCharSet(this);
		}
	}
}


export class CurrentUserExpressionContext extends ParserRuleContext {
	public CURRENT_USER(): TerminalNode { return this.getToken(MariaDBParser.CURRENT_USER, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RR_BRACKET, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_currentUserExpression; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCurrentUserExpression) {
			listener.enterCurrentUserExpression(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCurrentUserExpression) {
			listener.exitCurrentUserExpression(this);
		}
	}
}


export class OwnerStatementContext extends ParserRuleContext {
	public DEFINER(): TerminalNode { return this.getToken(MariaDBParser.DEFINER, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	public userName(): UserNameContext | undefined {
		return this.tryGetRuleContext(0, UserNameContext);
	}
	public currentUserExpression(): CurrentUserExpressionContext | undefined {
		return this.tryGetRuleContext(0, CurrentUserExpressionContext);
	}
	public CURRENT_ROLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CURRENT_ROLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_ownerStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterOwnerStatement) {
			listener.enterOwnerStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitOwnerStatement) {
			listener.exitOwnerStatement(this);
		}
	}
}


export class ScheduleExpressionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_scheduleExpression; }
	public copyFrom(ctx: ScheduleExpressionContext): void {
		super.copyFrom(ctx);
	}
}
export class PreciseScheduleContext extends ScheduleExpressionContext {
	public AT(): TerminalNode { return this.getToken(MariaDBParser.AT, 0); }
	public timestampValue(): TimestampValueContext {
		return this.getRuleContext(0, TimestampValueContext);
	}
	public intervalExpr(): IntervalExprContext[];
	public intervalExpr(i: number): IntervalExprContext;
	public intervalExpr(i?: number): IntervalExprContext | IntervalExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IntervalExprContext);
		} else {
			return this.getRuleContext(i, IntervalExprContext);
		}
	}
	constructor(ctx: ScheduleExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterPreciseSchedule) {
			listener.enterPreciseSchedule(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitPreciseSchedule) {
			listener.exitPreciseSchedule(this);
		}
	}
}
export class IntervalScheduleContext extends ScheduleExpressionContext {
	public _startTimestamp!: TimestampValueContext;
	public _intervalExpr!: IntervalExprContext;
	public _startIntervals: IntervalExprContext[] = [];
	public _endTimestamp!: TimestampValueContext;
	public _endIntervals: IntervalExprContext[] = [];
	public EVERY(): TerminalNode { return this.getToken(MariaDBParser.EVERY, 0); }
	public intervalType(): IntervalTypeContext {
		return this.getRuleContext(0, IntervalTypeContext);
	}
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public STARTS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STARTS, 0); }
	public ENDS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ENDS, 0); }
	public timestampValue(): TimestampValueContext[];
	public timestampValue(i: number): TimestampValueContext;
	public timestampValue(i?: number): TimestampValueContext | TimestampValueContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TimestampValueContext);
		} else {
			return this.getRuleContext(i, TimestampValueContext);
		}
	}
	public intervalExpr(): IntervalExprContext[];
	public intervalExpr(i: number): IntervalExprContext;
	public intervalExpr(i?: number): IntervalExprContext | IntervalExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IntervalExprContext);
		} else {
			return this.getRuleContext(i, IntervalExprContext);
		}
	}
	constructor(ctx: ScheduleExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterIntervalSchedule) {
			listener.enterIntervalSchedule(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitIntervalSchedule) {
			listener.exitIntervalSchedule(this);
		}
	}
}


export class TimestampValueContext extends ParserRuleContext {
	public CURRENT_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CURRENT_TIMESTAMP, 0); }
	public stringLiteral(): StringLiteralContext | undefined {
		return this.tryGetRuleContext(0, StringLiteralContext);
	}
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_timestampValue; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTimestampValue) {
			listener.enterTimestampValue(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTimestampValue) {
			listener.exitTimestampValue(this);
		}
	}
}


export class IntervalExprContext extends ParserRuleContext {
	public PLUS(): TerminalNode { return this.getToken(MariaDBParser.PLUS, 0); }
	public INTERVAL(): TerminalNode { return this.getToken(MariaDBParser.INTERVAL, 0); }
	public intervalType(): IntervalTypeContext {
		return this.getRuleContext(0, IntervalTypeContext);
	}
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_intervalExpr; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterIntervalExpr) {
			listener.enterIntervalExpr(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitIntervalExpr) {
			listener.exitIntervalExpr(this);
		}
	}
}


export class IntervalTypeContext extends ParserRuleContext {
	public intervalTypeBase(): IntervalTypeBaseContext | undefined {
		return this.tryGetRuleContext(0, IntervalTypeBaseContext);
	}
	public YEAR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.YEAR, 0); }
	public YEAR_MONTH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.YEAR_MONTH, 0); }
	public DAY_HOUR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DAY_HOUR, 0); }
	public DAY_MINUTE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DAY_MINUTE, 0); }
	public DAY_SECOND(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DAY_SECOND, 0); }
	public HOUR_MINUTE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.HOUR_MINUTE, 0); }
	public HOUR_SECOND(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.HOUR_SECOND, 0); }
	public MINUTE_SECOND(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MINUTE_SECOND, 0); }
	public SECOND_MICROSECOND(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SECOND_MICROSECOND, 0); }
	public MINUTE_MICROSECOND(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MINUTE_MICROSECOND, 0); }
	public HOUR_MICROSECOND(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.HOUR_MICROSECOND, 0); }
	public DAY_MICROSECOND(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DAY_MICROSECOND, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_intervalType; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterIntervalType) {
			listener.enterIntervalType(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitIntervalType) {
			listener.exitIntervalType(this);
		}
	}
}


export class EnableTypeContext extends ParserRuleContext {
	public ENABLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ENABLE, 0); }
	public DISABLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DISABLE, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ON, 0); }
	public SLAVE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SLAVE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_enableType; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterEnableType) {
			listener.enterEnableType(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitEnableType) {
			listener.exitEnableType(this);
		}
	}
}


export class IndexTypeContext extends ParserRuleContext {
	public USING(): TerminalNode { return this.getToken(MariaDBParser.USING, 0); }
	public BTREE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BTREE, 0); }
	public HASH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.HASH, 0); }
	public RTREE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RTREE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_indexType; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterIndexType) {
			listener.enterIndexType(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitIndexType) {
			listener.exitIndexType(this);
		}
	}
}


export class IndexOptionContext extends ParserRuleContext {
	public KEY_BLOCK_SIZE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.KEY_BLOCK_SIZE, 0); }
	public fileSizeLiteral(): FileSizeLiteralContext | undefined {
		return this.tryGetRuleContext(0, FileSizeLiteralContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	public indexType(): IndexTypeContext | undefined {
		return this.tryGetRuleContext(0, IndexTypeContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WITH, 0); }
	public PARSER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PARSER, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public COMMENT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COMMENT, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_LITERAL, 0); }
	public VISIBLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VISIBLE, 0); }
	public INVISIBLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INVISIBLE, 0); }
	public ENGINE_ATTRIBUTE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ENGINE_ATTRIBUTE, 0); }
	public SECONDARY_ENGINE_ATTRIBUTE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE, 0); }
	public CLUSTERING(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CLUSTERING, 0); }
	public YES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.YES, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NO, 0); }
	public IGNORED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.IGNORED, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_indexOption; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterIndexOption) {
			listener.enterIndexOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitIndexOption) {
			listener.exitIndexOption(this);
		}
	}
}


export class ProcedureParameterContext extends ParserRuleContext {
	public _direction!: Token;
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public dataType(): DataTypeContext {
		return this.getRuleContext(0, DataTypeContext);
	}
	public IN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.IN, 0); }
	public OUT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.OUT, 0); }
	public INOUT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INOUT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_procedureParameter; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterProcedureParameter) {
			listener.enterProcedureParameter(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitProcedureParameter) {
			listener.exitProcedureParameter(this);
		}
	}
}


export class FunctionParameterContext extends ParserRuleContext {
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public dataType(): DataTypeContext {
		return this.getRuleContext(0, DataTypeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_functionParameter; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterFunctionParameter) {
			listener.enterFunctionParameter(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitFunctionParameter) {
			listener.exitFunctionParameter(this);
		}
	}
}


export class RoutineOptionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_routineOption; }
	public copyFrom(ctx: RoutineOptionContext): void {
		super.copyFrom(ctx);
	}
}
export class RoutineCommentContext extends RoutineOptionContext {
	public COMMENT(): TerminalNode { return this.getToken(MariaDBParser.COMMENT, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.STRING_LITERAL, 0); }
	constructor(ctx: RoutineOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterRoutineComment) {
			listener.enterRoutineComment(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitRoutineComment) {
			listener.exitRoutineComment(this);
		}
	}
}
export class RoutineLanguageContext extends RoutineOptionContext {
	public LANGUAGE(): TerminalNode { return this.getToken(MariaDBParser.LANGUAGE, 0); }
	public SQL(): TerminalNode { return this.getToken(MariaDBParser.SQL, 0); }
	constructor(ctx: RoutineOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterRoutineLanguage) {
			listener.enterRoutineLanguage(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitRoutineLanguage) {
			listener.exitRoutineLanguage(this);
		}
	}
}
export class RoutineBehaviorContext extends RoutineOptionContext {
	public DETERMINISTIC(): TerminalNode { return this.getToken(MariaDBParser.DETERMINISTIC, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NOT, 0); }
	constructor(ctx: RoutineOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterRoutineBehavior) {
			listener.enterRoutineBehavior(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitRoutineBehavior) {
			listener.exitRoutineBehavior(this);
		}
	}
}
export class RoutineDataContext extends RoutineOptionContext {
	public CONTAINS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONTAINS, 0); }
	public SQL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SQL, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NO, 0); }
	public READS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.READS, 0); }
	public DATA(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DATA, 0); }
	public MODIFIES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MODIFIES, 0); }
	constructor(ctx: RoutineOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterRoutineData) {
			listener.enterRoutineData(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitRoutineData) {
			listener.exitRoutineData(this);
		}
	}
}
export class RoutineSecurityContext extends RoutineOptionContext {
	public _context!: Token;
	public SQL(): TerminalNode { return this.getToken(MariaDBParser.SQL, 0); }
	public SECURITY(): TerminalNode { return this.getToken(MariaDBParser.SECURITY, 0); }
	public DEFINER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DEFINER, 0); }
	public INVOKER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INVOKER, 0); }
	constructor(ctx: RoutineOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterRoutineSecurity) {
			listener.enterRoutineSecurity(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitRoutineSecurity) {
			listener.exitRoutineSecurity(this);
		}
	}
}


export class ServerOptionContext extends ParserRuleContext {
	public HOST(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.HOST, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_LITERAL, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DATABASE, 0); }
	public USER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.USER, 0); }
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PASSWORD, 0); }
	public SOCKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SOCKET, 0); }
	public OWNER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.OWNER, 0); }
	public PORT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PORT, 0); }
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_serverOption; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterServerOption) {
			listener.enterServerOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitServerOption) {
			listener.exitServerOption(this);
		}
	}
}


export class CreateDefinitionsContext extends ParserRuleContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public createDefinition(): CreateDefinitionContext[];
	public createDefinition(i: number): CreateDefinitionContext;
	public createDefinition(i?: number): CreateDefinitionContext | CreateDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CreateDefinitionContext);
		} else {
			return this.getRuleContext(i, CreateDefinitionContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_createDefinitions; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCreateDefinitions) {
			listener.enterCreateDefinitions(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCreateDefinitions) {
			listener.exitCreateDefinitions(this);
		}
	}
}


export class CreateDefinitionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_createDefinition; }
	public copyFrom(ctx: CreateDefinitionContext): void {
		super.copyFrom(ctx);
	}
}
export class ColumnDeclarationContext extends CreateDefinitionContext {
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public columnDefinition(): ColumnDefinitionContext {
		return this.getRuleContext(0, ColumnDefinitionContext);
	}
	constructor(ctx: CreateDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterColumnDeclaration) {
			listener.enterColumnDeclaration(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitColumnDeclaration) {
			listener.exitColumnDeclaration(this);
		}
	}
}
export class ConstraintDeclarationContext extends CreateDefinitionContext {
	public tableConstraint(): TableConstraintContext {
		return this.getRuleContext(0, TableConstraintContext);
	}
	constructor(ctx: CreateDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterConstraintDeclaration) {
			listener.enterConstraintDeclaration(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitConstraintDeclaration) {
			listener.exitConstraintDeclaration(this);
		}
	}
}
export class IndexDeclarationContext extends CreateDefinitionContext {
	public indexColumnDefinition(): IndexColumnDefinitionContext {
		return this.getRuleContext(0, IndexColumnDefinitionContext);
	}
	constructor(ctx: CreateDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterIndexDeclaration) {
			listener.enterIndexDeclaration(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitIndexDeclaration) {
			listener.exitIndexDeclaration(this);
		}
	}
}


export class ColumnDefinitionContext extends ParserRuleContext {
	public dataType(): DataTypeContext {
		return this.getRuleContext(0, DataTypeContext);
	}
	public columnConstraint(): ColumnConstraintContext[];
	public columnConstraint(i: number): ColumnConstraintContext;
	public columnConstraint(i?: number): ColumnConstraintContext | ColumnConstraintContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ColumnConstraintContext);
		} else {
			return this.getRuleContext(i, ColumnConstraintContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_columnDefinition; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterColumnDefinition) {
			listener.enterColumnDefinition(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitColumnDefinition) {
			listener.exitColumnDefinition(this);
		}
	}
}


export class ColumnConstraintContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_columnConstraint; }
	public copyFrom(ctx: ColumnConstraintContext): void {
		super.copyFrom(ctx);
	}
}
export class NullColumnConstraintContext extends ColumnConstraintContext {
	public nullNotnull(): NullNotnullContext {
		return this.getRuleContext(0, NullNotnullContext);
	}
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterNullColumnConstraint) {
			listener.enterNullColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitNullColumnConstraint) {
			listener.exitNullColumnConstraint(this);
		}
	}
}
export class DefaultColumnConstraintContext extends ColumnConstraintContext {
	public DEFAULT(): TerminalNode { return this.getToken(MariaDBParser.DEFAULT, 0); }
	public defaultValue(): DefaultValueContext {
		return this.getRuleContext(0, DefaultValueContext);
	}
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDefaultColumnConstraint) {
			listener.enterDefaultColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDefaultColumnConstraint) {
			listener.exitDefaultColumnConstraint(this);
		}
	}
}
export class VisibilityColumnConstraintContext extends ColumnConstraintContext {
	public VISIBLE(): TerminalNode { return this.getToken(MariaDBParser.VISIBLE, 0); }
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterVisibilityColumnConstraint) {
			listener.enterVisibilityColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitVisibilityColumnConstraint) {
			listener.exitVisibilityColumnConstraint(this);
		}
	}
}
export class InvisibilityColumnConstraintContext extends ColumnConstraintContext {
	public INVISIBLE(): TerminalNode { return this.getToken(MariaDBParser.INVISIBLE, 0); }
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterInvisibilityColumnConstraint) {
			listener.enterInvisibilityColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitInvisibilityColumnConstraint) {
			listener.exitInvisibilityColumnConstraint(this);
		}
	}
}
export class AutoIncrementColumnConstraintContext extends ColumnConstraintContext {
	public AUTO_INCREMENT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AUTO_INCREMENT, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ON, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UPDATE, 0); }
	public currentTimestamp(): CurrentTimestampContext | undefined {
		return this.tryGetRuleContext(0, CurrentTimestampContext);
	}
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAutoIncrementColumnConstraint) {
			listener.enterAutoIncrementColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAutoIncrementColumnConstraint) {
			listener.exitAutoIncrementColumnConstraint(this);
		}
	}
}
export class PrimaryKeyColumnConstraintContext extends ColumnConstraintContext {
	public KEY(): TerminalNode { return this.getToken(MariaDBParser.KEY, 0); }
	public PRIMARY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PRIMARY, 0); }
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterPrimaryKeyColumnConstraint) {
			listener.enterPrimaryKeyColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitPrimaryKeyColumnConstraint) {
			listener.exitPrimaryKeyColumnConstraint(this);
		}
	}
}
export class UniqueKeyColumnConstraintContext extends ColumnConstraintContext {
	public UNIQUE(): TerminalNode { return this.getToken(MariaDBParser.UNIQUE, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.KEY, 0); }
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterUniqueKeyColumnConstraint) {
			listener.enterUniqueKeyColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitUniqueKeyColumnConstraint) {
			listener.exitUniqueKeyColumnConstraint(this);
		}
	}
}
export class CommentColumnConstraintContext extends ColumnConstraintContext {
	public COMMENT(): TerminalNode { return this.getToken(MariaDBParser.COMMENT, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.STRING_LITERAL, 0); }
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCommentColumnConstraint) {
			listener.enterCommentColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCommentColumnConstraint) {
			listener.exitCommentColumnConstraint(this);
		}
	}
}
export class FormatColumnConstraintContext extends ColumnConstraintContext {
	public _colformat!: Token;
	public COLUMN_FORMAT(): TerminalNode { return this.getToken(MariaDBParser.COLUMN_FORMAT, 0); }
	public FIXED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FIXED, 0); }
	public DYNAMIC(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DYNAMIC, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DEFAULT, 0); }
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterFormatColumnConstraint) {
			listener.enterFormatColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitFormatColumnConstraint) {
			listener.exitFormatColumnConstraint(this);
		}
	}
}
export class StorageColumnConstraintContext extends ColumnConstraintContext {
	public _storageval!: Token;
	public STORAGE(): TerminalNode { return this.getToken(MariaDBParser.STORAGE, 0); }
	public DISK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DISK, 0); }
	public MEMORY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MEMORY, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DEFAULT, 0); }
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterStorageColumnConstraint) {
			listener.enterStorageColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitStorageColumnConstraint) {
			listener.exitStorageColumnConstraint(this);
		}
	}
}
export class ReferenceColumnConstraintContext extends ColumnConstraintContext {
	public referenceDefinition(): ReferenceDefinitionContext {
		return this.getRuleContext(0, ReferenceDefinitionContext);
	}
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterReferenceColumnConstraint) {
			listener.enterReferenceColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitReferenceColumnConstraint) {
			listener.exitReferenceColumnConstraint(this);
		}
	}
}
export class CollateColumnConstraintContext extends ColumnConstraintContext {
	public COLLATE(): TerminalNode { return this.getToken(MariaDBParser.COLLATE, 0); }
	public collationName(): CollationNameContext {
		return this.getRuleContext(0, CollationNameContext);
	}
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCollateColumnConstraint) {
			listener.enterCollateColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCollateColumnConstraint) {
			listener.exitCollateColumnConstraint(this);
		}
	}
}
export class GeneratedColumnConstraintContext extends ColumnConstraintContext {
	public AS(): TerminalNode { return this.getToken(MariaDBParser.AS, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public GENERATED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GENERATED, 0); }
	public ALWAYS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ALWAYS, 0); }
	public VIRTUAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VIRTUAL, 0); }
	public STORED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STORED, 0); }
	public PERSISTENT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PERSISTENT, 0); }
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterGeneratedColumnConstraint) {
			listener.enterGeneratedColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitGeneratedColumnConstraint) {
			listener.exitGeneratedColumnConstraint(this);
		}
	}
}
export class SerialDefaultColumnConstraintContext extends ColumnConstraintContext {
	public SERIAL(): TerminalNode { return this.getToken(MariaDBParser.SERIAL, 0); }
	public DEFAULT(): TerminalNode { return this.getToken(MariaDBParser.DEFAULT, 0); }
	public VALUE(): TerminalNode { return this.getToken(MariaDBParser.VALUE, 0); }
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSerialDefaultColumnConstraint) {
			listener.enterSerialDefaultColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSerialDefaultColumnConstraint) {
			listener.exitSerialDefaultColumnConstraint(this);
		}
	}
}
export class CheckColumnConstraintContext extends ColumnConstraintContext {
	public _name!: UidContext;
	public CHECK(): TerminalNode { return this.getToken(MariaDBParser.CHECK, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONSTRAINT, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	constructor(ctx: ColumnConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCheckColumnConstraint) {
			listener.enterCheckColumnConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCheckColumnConstraint) {
			listener.exitCheckColumnConstraint(this);
		}
	}
}


export class TableConstraintContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_tableConstraint; }
	public copyFrom(ctx: TableConstraintContext): void {
		super.copyFrom(ctx);
	}
}
export class PrimaryKeyTableConstraintContext extends TableConstraintContext {
	public _name!: UidContext;
	public _index!: UidContext;
	public PRIMARY(): TerminalNode { return this.getToken(MariaDBParser.PRIMARY, 0); }
	public KEY(): TerminalNode { return this.getToken(MariaDBParser.KEY, 0); }
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getRuleContext(0, IndexColumnNamesContext);
	}
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONSTRAINT, 0); }
	public indexType(): IndexTypeContext | undefined {
		return this.tryGetRuleContext(0, IndexTypeContext);
	}
	public indexOption(): IndexOptionContext[];
	public indexOption(i: number): IndexOptionContext;
	public indexOption(i?: number): IndexOptionContext | IndexOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexOptionContext);
		} else {
			return this.getRuleContext(i, IndexOptionContext);
		}
	}
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	constructor(ctx: TableConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterPrimaryKeyTableConstraint) {
			listener.enterPrimaryKeyTableConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitPrimaryKeyTableConstraint) {
			listener.exitPrimaryKeyTableConstraint(this);
		}
	}
}
export class UniqueKeyTableConstraintContext extends TableConstraintContext {
	public _name!: UidContext;
	public _indexFormat!: Token;
	public _index!: UidContext;
	public UNIQUE(): TerminalNode { return this.getToken(MariaDBParser.UNIQUE, 0); }
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getRuleContext(0, IndexColumnNamesContext);
	}
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONSTRAINT, 0); }
	public indexType(): IndexTypeContext | undefined {
		return this.tryGetRuleContext(0, IndexTypeContext);
	}
	public indexOption(): IndexOptionContext[];
	public indexOption(i: number): IndexOptionContext;
	public indexOption(i?: number): IndexOptionContext | IndexOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexOptionContext);
		} else {
			return this.getRuleContext(i, IndexOptionContext);
		}
	}
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INDEX, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.KEY, 0); }
	constructor(ctx: TableConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterUniqueKeyTableConstraint) {
			listener.enterUniqueKeyTableConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitUniqueKeyTableConstraint) {
			listener.exitUniqueKeyTableConstraint(this);
		}
	}
}
export class ForeignKeyTableConstraintContext extends TableConstraintContext {
	public _name!: UidContext;
	public _index!: UidContext;
	public FOREIGN(): TerminalNode { return this.getToken(MariaDBParser.FOREIGN, 0); }
	public KEY(): TerminalNode { return this.getToken(MariaDBParser.KEY, 0); }
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getRuleContext(0, IndexColumnNamesContext);
	}
	public referenceDefinition(): ReferenceDefinitionContext {
		return this.getRuleContext(0, ReferenceDefinitionContext);
	}
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONSTRAINT, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	constructor(ctx: TableConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterForeignKeyTableConstraint) {
			listener.enterForeignKeyTableConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitForeignKeyTableConstraint) {
			listener.exitForeignKeyTableConstraint(this);
		}
	}
}
export class CheckTableConstraintContext extends TableConstraintContext {
	public _name!: UidContext;
	public CHECK(): TerminalNode { return this.getToken(MariaDBParser.CHECK, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONSTRAINT, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	constructor(ctx: TableConstraintContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCheckTableConstraint) {
			listener.enterCheckTableConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCheckTableConstraint) {
			listener.exitCheckTableConstraint(this);
		}
	}
}


export class ReferenceDefinitionContext extends ParserRuleContext {
	public _matchType!: Token;
	public REFERENCES(): TerminalNode { return this.getToken(MariaDBParser.REFERENCES, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public indexColumnNames(): IndexColumnNamesContext | undefined {
		return this.tryGetRuleContext(0, IndexColumnNamesContext);
	}
	public MATCH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MATCH, 0); }
	public referenceAction(): ReferenceActionContext | undefined {
		return this.tryGetRuleContext(0, ReferenceActionContext);
	}
	public FULL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FULL, 0); }
	public PARTIAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PARTIAL, 0); }
	public SIMPLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SIMPLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_referenceDefinition; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterReferenceDefinition) {
			listener.enterReferenceDefinition(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitReferenceDefinition) {
			listener.exitReferenceDefinition(this);
		}
	}
}


export class ReferenceActionContext extends ParserRuleContext {
	public _onDelete!: ReferenceControlTypeContext;
	public _onUpdate!: ReferenceControlTypeContext;
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.ON);
		} else {
			return this.getToken(MariaDBParser.ON, i);
		}
	}
	public DELETE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DELETE, 0); }
	public referenceControlType(): ReferenceControlTypeContext[];
	public referenceControlType(i: number): ReferenceControlTypeContext;
	public referenceControlType(i?: number): ReferenceControlTypeContext | ReferenceControlTypeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ReferenceControlTypeContext);
		} else {
			return this.getRuleContext(i, ReferenceControlTypeContext);
		}
	}
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UPDATE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_referenceAction; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterReferenceAction) {
			listener.enterReferenceAction(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitReferenceAction) {
			listener.exitReferenceAction(this);
		}
	}
}


export class ReferenceControlTypeContext extends ParserRuleContext {
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RESTRICT, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CASCADE, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SET, 0); }
	public NULL_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NULL_LITERAL, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NO, 0); }
	public ACTION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ACTION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_referenceControlType; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterReferenceControlType) {
			listener.enterReferenceControlType(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitReferenceControlType) {
			listener.exitReferenceControlType(this);
		}
	}
}


export class IndexColumnDefinitionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_indexColumnDefinition; }
	public copyFrom(ctx: IndexColumnDefinitionContext): void {
		super.copyFrom(ctx);
	}
}
export class SimpleIndexDeclarationContext extends IndexColumnDefinitionContext {
	public _indexFormat!: Token;
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getRuleContext(0, IndexColumnNamesContext);
	}
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INDEX, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.KEY, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public indexType(): IndexTypeContext | undefined {
		return this.tryGetRuleContext(0, IndexTypeContext);
	}
	public indexOption(): IndexOptionContext[];
	public indexOption(i: number): IndexOptionContext;
	public indexOption(i?: number): IndexOptionContext | IndexOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexOptionContext);
		} else {
			return this.getRuleContext(i, IndexOptionContext);
		}
	}
	constructor(ctx: IndexColumnDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSimpleIndexDeclaration) {
			listener.enterSimpleIndexDeclaration(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSimpleIndexDeclaration) {
			listener.exitSimpleIndexDeclaration(this);
		}
	}
}
export class SpecialIndexDeclarationContext extends IndexColumnDefinitionContext {
	public _indexFormat!: Token;
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getRuleContext(0, IndexColumnNamesContext);
	}
	public FULLTEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FULLTEXT, 0); }
	public SPATIAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SPATIAL, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public indexOption(): IndexOptionContext[];
	public indexOption(i: number): IndexOptionContext;
	public indexOption(i?: number): IndexOptionContext | IndexOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexOptionContext);
		} else {
			return this.getRuleContext(i, IndexOptionContext);
		}
	}
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INDEX, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.KEY, 0); }
	constructor(ctx: IndexColumnDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSpecialIndexDeclaration) {
			listener.enterSpecialIndexDeclaration(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSpecialIndexDeclaration) {
			listener.exitSpecialIndexDeclaration(this);
		}
	}
}


export class TableOptionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_tableOption; }
	public copyFrom(ctx: TableOptionContext): void {
		super.copyFrom(ctx);
	}
}
export class TableOptionEngineContext extends TableOptionContext {
	public ENGINE(): TerminalNode { return this.getToken(MariaDBParser.ENGINE, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	public engineName(): EngineNameContext | undefined {
		return this.tryGetRuleContext(0, EngineNameContext);
	}
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableOptionEngine) {
			listener.enterTableOptionEngine(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableOptionEngine) {
			listener.exitTableOptionEngine(this);
		}
	}
}
export class TableOptionEngineAttributeContext extends TableOptionContext {
	public ENGINE_ATTRIBUTE(): TerminalNode { return this.getToken(MariaDBParser.ENGINE_ATTRIBUTE, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.STRING_LITERAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableOptionEngineAttribute) {
			listener.enterTableOptionEngineAttribute(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableOptionEngineAttribute) {
			listener.exitTableOptionEngineAttribute(this);
		}
	}
}
export class TableOptionAutoextendSizeContext extends TableOptionContext {
	public AUTOEXTEND_SIZE(): TerminalNode { return this.getToken(MariaDBParser.AUTOEXTEND_SIZE, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableOptionAutoextendSize) {
			listener.enterTableOptionAutoextendSize(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableOptionAutoextendSize) {
			listener.exitTableOptionAutoextendSize(this);
		}
	}
}
export class TableOptionAutoIncrementContext extends TableOptionContext {
	public AUTO_INCREMENT(): TerminalNode { return this.getToken(MariaDBParser.AUTO_INCREMENT, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableOptionAutoIncrement) {
			listener.enterTableOptionAutoIncrement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableOptionAutoIncrement) {
			listener.exitTableOptionAutoIncrement(this);
		}
	}
}
export class TableOptionAverageContext extends TableOptionContext {
	public AVG_ROW_LENGTH(): TerminalNode { return this.getToken(MariaDBParser.AVG_ROW_LENGTH, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableOptionAverage) {
			listener.enterTableOptionAverage(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableOptionAverage) {
			listener.exitTableOptionAverage(this);
		}
	}
}
export class TableOptionCharsetContext extends TableOptionContext {
	public charSet(): CharSetContext {
		return this.getRuleContext(0, CharSetContext);
	}
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public DEFAULT(): TerminalNode[];
	public DEFAULT(i: number): TerminalNode;
	public DEFAULT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.DEFAULT);
		} else {
			return this.getToken(MariaDBParser.DEFAULT, i);
		}
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableOptionCharset) {
			listener.enterTableOptionCharset(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableOptionCharset) {
			listener.exitTableOptionCharset(this);
		}
	}
}
export class TableOptionChecksumContext extends TableOptionContext {
	public _boolValue!: Token;
	public CHECKSUM(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CHECKSUM, 0); }
	public PAGE_CHECKSUM(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PAGE_CHECKSUM, 0); }
	public ZERO_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ZERO_DECIMAL, 0); }
	public ONE_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ONE_DECIMAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableOptionChecksum) {
			listener.enterTableOptionChecksum(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableOptionChecksum) {
			listener.exitTableOptionChecksum(this);
		}
	}
}
export class TableOptionCollateContext extends TableOptionContext {
	public COLLATE(): TerminalNode { return this.getToken(MariaDBParser.COLLATE, 0); }
	public collationName(): CollationNameContext {
		return this.getRuleContext(0, CollationNameContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DEFAULT, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableOptionCollate) {
			listener.enterTableOptionCollate(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableOptionCollate) {
			listener.exitTableOptionCollate(this);
		}
	}
}
export class TableOptionCommentContext extends TableOptionContext {
	public COMMENT(): TerminalNode { return this.getToken(MariaDBParser.COMMENT, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.STRING_LITERAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableOptionComment) {
			listener.enterTableOptionComment(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableOptionComment) {
			listener.exitTableOptionComment(this);
		}
	}
}
export class TableOptionCompressionContext extends TableOptionContext {
	public COMPRESSION(): TerminalNode { return this.getToken(MariaDBParser.COMPRESSION, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_LITERAL, 0); }
	public ID(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ID, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableOptionCompression) {
			listener.enterTableOptionCompression(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableOptionCompression) {
			listener.exitTableOptionCompression(this);
		}
	}
}
export class TableOptionConnectionContext extends TableOptionContext {
	public CONNECTION(): TerminalNode { return this.getToken(MariaDBParser.CONNECTION, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.STRING_LITERAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableOptionConnection) {
			listener.enterTableOptionConnection(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableOptionConnection) {
			listener.exitTableOptionConnection(this);
		}
	}
}
export class TableOptionDataDirectoryContext extends TableOptionContext {
	public DIRECTORY(): TerminalNode { return this.getToken(MariaDBParser.DIRECTORY, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.STRING_LITERAL, 0); }
	public DATA(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DATA, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INDEX, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableOptionDataDirectory) {
			listener.enterTableOptionDataDirectory(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableOptionDataDirectory) {
			listener.exitTableOptionDataDirectory(this);
		}
	}
}
export class TableOptionDelayContext extends TableOptionContext {
	public _boolValue!: Token;
	public DELAY_KEY_WRITE(): TerminalNode { return this.getToken(MariaDBParser.DELAY_KEY_WRITE, 0); }
	public ZERO_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ZERO_DECIMAL, 0); }
	public ONE_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ONE_DECIMAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableOptionDelay) {
			listener.enterTableOptionDelay(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableOptionDelay) {
			listener.exitTableOptionDelay(this);
		}
	}
}
export class TableOptionEncryptionContext extends TableOptionContext {
	public ENCRYPTION(): TerminalNode { return this.getToken(MariaDBParser.ENCRYPTION, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.STRING_LITERAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableOptionEncryption) {
			listener.enterTableOptionEncryption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableOptionEncryption) {
			listener.exitTableOptionEncryption(this);
		}
	}
}
export class TableOptionEncryptedContext extends TableOptionContext {
	public encryptedLiteral(): EncryptedLiteralContext {
		return this.getRuleContext(0, EncryptedLiteralContext);
	}
	public YES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.YES, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NO, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableOptionEncrypted) {
			listener.enterTableOptionEncrypted(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableOptionEncrypted) {
			listener.exitTableOptionEncrypted(this);
		}
	}
}
export class TableOptionPageCompressedContext extends TableOptionContext {
	public PAGE_COMPRESSED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PAGE_COMPRESSED, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_LITERAL, 0); }
	public ZERO_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ZERO_DECIMAL, 0); }
	public ONE_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ONE_DECIMAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableOptionPageCompressed) {
			listener.enterTableOptionPageCompressed(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableOptionPageCompressed) {
			listener.exitTableOptionPageCompressed(this);
		}
	}
}
export class TableOptionPageCompressionLevelContext extends TableOptionContext {
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	public PAGE_COMPRESSION_LEVEL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PAGE_COMPRESSION_LEVEL, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_LITERAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableOptionPageCompressionLevel) {
			listener.enterTableOptionPageCompressionLevel(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableOptionPageCompressionLevel) {
			listener.exitTableOptionPageCompressionLevel(this);
		}
	}
}
export class TableOptionEncryptionKeyIdContext extends TableOptionContext {
	public ENCRYPTION_KEY_ID(): TerminalNode { return this.getToken(MariaDBParser.ENCRYPTION_KEY_ID, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableOptionEncryptionKeyId) {
			listener.enterTableOptionEncryptionKeyId(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableOptionEncryptionKeyId) {
			listener.exitTableOptionEncryptionKeyId(this);
		}
	}
}
export class TableOptionIndexDirectoryContext extends TableOptionContext {
	public INDEX(): TerminalNode { return this.getToken(MariaDBParser.INDEX, 0); }
	public DIRECTORY(): TerminalNode { return this.getToken(MariaDBParser.DIRECTORY, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.STRING_LITERAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableOptionIndexDirectory) {
			listener.enterTableOptionIndexDirectory(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableOptionIndexDirectory) {
			listener.exitTableOptionIndexDirectory(this);
		}
	}
}
export class TableOptionInsertMethodContext extends TableOptionContext {
	public _insertMethod!: Token;
	public INSERT_METHOD(): TerminalNode { return this.getToken(MariaDBParser.INSERT_METHOD, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NO, 0); }
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FIRST, 0); }
	public LAST(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LAST, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableOptionInsertMethod) {
			listener.enterTableOptionInsertMethod(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableOptionInsertMethod) {
			listener.exitTableOptionInsertMethod(this);
		}
	}
}
export class TableOptionKeyBlockSizeContext extends TableOptionContext {
	public KEY_BLOCK_SIZE(): TerminalNode { return this.getToken(MariaDBParser.KEY_BLOCK_SIZE, 0); }
	public fileSizeLiteral(): FileSizeLiteralContext {
		return this.getRuleContext(0, FileSizeLiteralContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableOptionKeyBlockSize) {
			listener.enterTableOptionKeyBlockSize(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableOptionKeyBlockSize) {
			listener.exitTableOptionKeyBlockSize(this);
		}
	}
}
export class TableOptionMaxRowsContext extends TableOptionContext {
	public MAX_ROWS(): TerminalNode { return this.getToken(MariaDBParser.MAX_ROWS, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableOptionMaxRows) {
			listener.enterTableOptionMaxRows(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableOptionMaxRows) {
			listener.exitTableOptionMaxRows(this);
		}
	}
}
export class TableOptionMinRowsContext extends TableOptionContext {
	public MIN_ROWS(): TerminalNode { return this.getToken(MariaDBParser.MIN_ROWS, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableOptionMinRows) {
			listener.enterTableOptionMinRows(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableOptionMinRows) {
			listener.exitTableOptionMinRows(this);
		}
	}
}
export class TableOptionPackKeysContext extends TableOptionContext {
	public _extBoolValue!: Token;
	public PACK_KEYS(): TerminalNode { return this.getToken(MariaDBParser.PACK_KEYS, 0); }
	public ZERO_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ZERO_DECIMAL, 0); }
	public ONE_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ONE_DECIMAL, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DEFAULT, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableOptionPackKeys) {
			listener.enterTableOptionPackKeys(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableOptionPackKeys) {
			listener.exitTableOptionPackKeys(this);
		}
	}
}
export class TableOptionPasswordContext extends TableOptionContext {
	public PASSWORD(): TerminalNode { return this.getToken(MariaDBParser.PASSWORD, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.STRING_LITERAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableOptionPassword) {
			listener.enterTableOptionPassword(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableOptionPassword) {
			listener.exitTableOptionPassword(this);
		}
	}
}
export class TableOptionRowFormatContext extends TableOptionContext {
	public _rowFormat!: Token;
	public ROW_FORMAT(): TerminalNode { return this.getToken(MariaDBParser.ROW_FORMAT, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DEFAULT, 0); }
	public DYNAMIC(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DYNAMIC, 0); }
	public FIXED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FIXED, 0); }
	public COMPRESSED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COMPRESSED, 0); }
	public REDUNDANT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REDUNDANT, 0); }
	public COMPACT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COMPACT, 0); }
	public ID(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ID, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableOptionRowFormat) {
			listener.enterTableOptionRowFormat(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableOptionRowFormat) {
			listener.exitTableOptionRowFormat(this);
		}
	}
}
export class TableOptionStartTransactionContext extends TableOptionContext {
	public START(): TerminalNode { return this.getToken(MariaDBParser.START, 0); }
	public TRANSACTION(): TerminalNode { return this.getToken(MariaDBParser.TRANSACTION, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableOptionStartTransaction) {
			listener.enterTableOptionStartTransaction(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableOptionStartTransaction) {
			listener.exitTableOptionStartTransaction(this);
		}
	}
}
export class TableOptionSecondaryEngineAttributeContext extends TableOptionContext {
	public SECONDARY_ENGINE_ATTRIBUTE(): TerminalNode { return this.getToken(MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.STRING_LITERAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableOptionSecondaryEngineAttribute) {
			listener.enterTableOptionSecondaryEngineAttribute(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableOptionSecondaryEngineAttribute) {
			listener.exitTableOptionSecondaryEngineAttribute(this);
		}
	}
}
export class TableOptionRecalculationContext extends TableOptionContext {
	public _extBoolValue!: Token;
	public STATS_AUTO_RECALC(): TerminalNode { return this.getToken(MariaDBParser.STATS_AUTO_RECALC, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DEFAULT, 0); }
	public ZERO_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ZERO_DECIMAL, 0); }
	public ONE_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ONE_DECIMAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableOptionRecalculation) {
			listener.enterTableOptionRecalculation(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableOptionRecalculation) {
			listener.exitTableOptionRecalculation(this);
		}
	}
}
export class TableOptionPersistentContext extends TableOptionContext {
	public _extBoolValue!: Token;
	public STATS_PERSISTENT(): TerminalNode { return this.getToken(MariaDBParser.STATS_PERSISTENT, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DEFAULT, 0); }
	public ZERO_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ZERO_DECIMAL, 0); }
	public ONE_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ONE_DECIMAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableOptionPersistent) {
			listener.enterTableOptionPersistent(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableOptionPersistent) {
			listener.exitTableOptionPersistent(this);
		}
	}
}
export class TableOptionSamplePageContext extends TableOptionContext {
	public STATS_SAMPLE_PAGES(): TerminalNode { return this.getToken(MariaDBParser.STATS_SAMPLE_PAGES, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DEFAULT, 0); }
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableOptionSamplePage) {
			listener.enterTableOptionSamplePage(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableOptionSamplePage) {
			listener.exitTableOptionSamplePage(this);
		}
	}
}
export class TableOptionTablespaceContext extends TableOptionContext {
	public TABLESPACE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TABLESPACE, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public tablespaceStorage(): TablespaceStorageContext | undefined {
		return this.tryGetRuleContext(0, TablespaceStorageContext);
	}
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableOptionTablespace) {
			listener.enterTableOptionTablespace(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableOptionTablespace) {
			listener.exitTableOptionTablespace(this);
		}
	}
}
export class TableOptionTableTypeContext extends TableOptionContext {
	public TABLE_TYPE(): TerminalNode { return this.getToken(MariaDBParser.TABLE_TYPE, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	public tableType(): TableTypeContext {
		return this.getRuleContext(0, TableTypeContext);
	}
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableOptionTableType) {
			listener.enterTableOptionTableType(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableOptionTableType) {
			listener.exitTableOptionTableType(this);
		}
	}
}
export class TableOptionTransactionalContext extends TableOptionContext {
	public TRANSACTIONAL(): TerminalNode { return this.getToken(MariaDBParser.TRANSACTIONAL, 0); }
	public ZERO_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ZERO_DECIMAL, 0); }
	public ONE_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ONE_DECIMAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableOptionTransactional) {
			listener.enterTableOptionTransactional(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableOptionTransactional) {
			listener.exitTableOptionTransactional(this);
		}
	}
}
export class TableOptionUnionContext extends TableOptionContext {
	public UNION(): TerminalNode { return this.getToken(MariaDBParser.UNION, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public tables(): TablesContext {
		return this.getRuleContext(0, TablesContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: TableOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableOptionUnion) {
			listener.enterTableOptionUnion(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableOptionUnion) {
			listener.exitTableOptionUnion(this);
		}
	}
}


export class TableTypeContext extends ParserRuleContext {
	public MYSQL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MYSQL, 0); }
	public ODBC(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ODBC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_tableType; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableType) {
			listener.enterTableType(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableType) {
			listener.exitTableType(this);
		}
	}
}


export class TablespaceStorageContext extends ParserRuleContext {
	public STORAGE(): TerminalNode { return this.getToken(MariaDBParser.STORAGE, 0); }
	public DISK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DISK, 0); }
	public MEMORY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MEMORY, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DEFAULT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_tablespaceStorage; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTablespaceStorage) {
			listener.enterTablespaceStorage(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTablespaceStorage) {
			listener.exitTablespaceStorage(this);
		}
	}
}


export class PartitionDefinitionsContext extends ParserRuleContext {
	public _count!: DecimalLiteralContext;
	public _subCount!: DecimalLiteralContext;
	public PARTITION(): TerminalNode { return this.getToken(MariaDBParser.PARTITION, 0); }
	public BY(): TerminalNode[];
	public BY(i: number): TerminalNode;
	public BY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.BY);
		} else {
			return this.getToken(MariaDBParser.BY, i);
		}
	}
	public partitionFunctionDefinition(): PartitionFunctionDefinitionContext {
		return this.getRuleContext(0, PartitionFunctionDefinitionContext);
	}
	public PARTITIONS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PARTITIONS, 0); }
	public SUBPARTITION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SUBPARTITION, 0); }
	public subpartitionFunctionDefinition(): SubpartitionFunctionDefinitionContext | undefined {
		return this.tryGetRuleContext(0, SubpartitionFunctionDefinitionContext);
	}
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LR_BRACKET, 0); }
	public partitionDefinition(): PartitionDefinitionContext[];
	public partitionDefinition(i: number): PartitionDefinitionContext;
	public partitionDefinition(i?: number): PartitionDefinitionContext | PartitionDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionDefinitionContext);
		} else {
			return this.getRuleContext(i, PartitionDefinitionContext);
		}
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RR_BRACKET, 0); }
	public decimalLiteral(): DecimalLiteralContext[];
	public decimalLiteral(i: number): DecimalLiteralContext;
	public decimalLiteral(i?: number): DecimalLiteralContext | DecimalLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DecimalLiteralContext);
		} else {
			return this.getRuleContext(i, DecimalLiteralContext);
		}
	}
	public SUBPARTITIONS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SUBPARTITIONS, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_partitionDefinitions; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterPartitionDefinitions) {
			listener.enterPartitionDefinitions(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitPartitionDefinitions) {
			listener.exitPartitionDefinitions(this);
		}
	}
}


export class PartitionFunctionDefinitionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_partitionFunctionDefinition; }
	public copyFrom(ctx: PartitionFunctionDefinitionContext): void {
		super.copyFrom(ctx);
	}
}
export class PartitionFunctionHashContext extends PartitionFunctionDefinitionContext {
	public HASH(): TerminalNode { return this.getToken(MariaDBParser.HASH, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public LINEAR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LINEAR, 0); }
	constructor(ctx: PartitionFunctionDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterPartitionFunctionHash) {
			listener.enterPartitionFunctionHash(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitPartitionFunctionHash) {
			listener.exitPartitionFunctionHash(this);
		}
	}
}
export class PartitionFunctionKeyContext extends PartitionFunctionDefinitionContext {
	public _algType!: Token;
	public KEY(): TerminalNode { return this.getToken(MariaDBParser.KEY, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public uidList(): UidListContext {
		return this.getRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public LINEAR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LINEAR, 0); }
	public ALGORITHM(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ALGORITHM, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	public ONE_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ONE_DECIMAL, 0); }
	public TWO_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TWO_DECIMAL, 0); }
	constructor(ctx: PartitionFunctionDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterPartitionFunctionKey) {
			listener.enterPartitionFunctionKey(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitPartitionFunctionKey) {
			listener.exitPartitionFunctionKey(this);
		}
	}
}
export class PartitionFunctionRangeContext extends PartitionFunctionDefinitionContext {
	public RANGE(): TerminalNode { return this.getToken(MariaDBParser.RANGE, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LR_BRACKET, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RR_BRACKET, 0); }
	public COLUMNS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COLUMNS, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	constructor(ctx: PartitionFunctionDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterPartitionFunctionRange) {
			listener.enterPartitionFunctionRange(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitPartitionFunctionRange) {
			listener.exitPartitionFunctionRange(this);
		}
	}
}
export class PartitionFunctionListContext extends PartitionFunctionDefinitionContext {
	public LIST(): TerminalNode { return this.getToken(MariaDBParser.LIST, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LR_BRACKET, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RR_BRACKET, 0); }
	public COLUMNS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COLUMNS, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	constructor(ctx: PartitionFunctionDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterPartitionFunctionList) {
			listener.enterPartitionFunctionList(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitPartitionFunctionList) {
			listener.exitPartitionFunctionList(this);
		}
	}
}


export class SubpartitionFunctionDefinitionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_subpartitionFunctionDefinition; }
	public copyFrom(ctx: SubpartitionFunctionDefinitionContext): void {
		super.copyFrom(ctx);
	}
}
export class SubPartitionFunctionHashContext extends SubpartitionFunctionDefinitionContext {
	public HASH(): TerminalNode { return this.getToken(MariaDBParser.HASH, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public LINEAR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LINEAR, 0); }
	constructor(ctx: SubpartitionFunctionDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSubPartitionFunctionHash) {
			listener.enterSubPartitionFunctionHash(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSubPartitionFunctionHash) {
			listener.exitSubPartitionFunctionHash(this);
		}
	}
}
export class SubPartitionFunctionKeyContext extends SubpartitionFunctionDefinitionContext {
	public _algType!: Token;
	public KEY(): TerminalNode { return this.getToken(MariaDBParser.KEY, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public uidList(): UidListContext {
		return this.getRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public LINEAR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LINEAR, 0); }
	public ALGORITHM(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ALGORITHM, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	public ONE_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ONE_DECIMAL, 0); }
	public TWO_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TWO_DECIMAL, 0); }
	constructor(ctx: SubpartitionFunctionDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSubPartitionFunctionKey) {
			listener.enterSubPartitionFunctionKey(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSubPartitionFunctionKey) {
			listener.exitSubPartitionFunctionKey(this);
		}
	}
}


export class PartitionDefinitionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_partitionDefinition; }
	public copyFrom(ctx: PartitionDefinitionContext): void {
		super.copyFrom(ctx);
	}
}
export class PartitionComparisonContext extends PartitionDefinitionContext {
	public PARTITION(): TerminalNode { return this.getToken(MariaDBParser.PARTITION, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public VALUES(): TerminalNode { return this.getToken(MariaDBParser.VALUES, 0); }
	public LESS(): TerminalNode { return this.getToken(MariaDBParser.LESS, 0); }
	public THAN(): TerminalNode { return this.getToken(MariaDBParser.THAN, 0); }
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.LR_BRACKET);
		} else {
			return this.getToken(MariaDBParser.LR_BRACKET, i);
		}
	}
	public partitionDefinerAtom(): PartitionDefinerAtomContext[];
	public partitionDefinerAtom(i: number): PartitionDefinerAtomContext;
	public partitionDefinerAtom(i?: number): PartitionDefinerAtomContext | PartitionDefinerAtomContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionDefinerAtomContext);
		} else {
			return this.getRuleContext(i, PartitionDefinerAtomContext);
		}
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.RR_BRACKET);
		} else {
			return this.getToken(MariaDBParser.RR_BRACKET, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	public partitionOption(): PartitionOptionContext[];
	public partitionOption(i: number): PartitionOptionContext;
	public partitionOption(i?: number): PartitionOptionContext | PartitionOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionOptionContext);
		} else {
			return this.getRuleContext(i, PartitionOptionContext);
		}
	}
	public subpartitionDefinition(): SubpartitionDefinitionContext[];
	public subpartitionDefinition(i: number): SubpartitionDefinitionContext;
	public subpartitionDefinition(i?: number): SubpartitionDefinitionContext | SubpartitionDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SubpartitionDefinitionContext);
		} else {
			return this.getRuleContext(i, SubpartitionDefinitionContext);
		}
	}
	constructor(ctx: PartitionDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterPartitionComparison) {
			listener.enterPartitionComparison(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitPartitionComparison) {
			listener.exitPartitionComparison(this);
		}
	}
}
export class PartitionListAtomContext extends PartitionDefinitionContext {
	public PARTITION(): TerminalNode { return this.getToken(MariaDBParser.PARTITION, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public VALUES(): TerminalNode { return this.getToken(MariaDBParser.VALUES, 0); }
	public IN(): TerminalNode { return this.getToken(MariaDBParser.IN, 0); }
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.LR_BRACKET);
		} else {
			return this.getToken(MariaDBParser.LR_BRACKET, i);
		}
	}
	public partitionDefinerAtom(): PartitionDefinerAtomContext[];
	public partitionDefinerAtom(i: number): PartitionDefinerAtomContext;
	public partitionDefinerAtom(i?: number): PartitionDefinerAtomContext | PartitionDefinerAtomContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionDefinerAtomContext);
		} else {
			return this.getRuleContext(i, PartitionDefinerAtomContext);
		}
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.RR_BRACKET);
		} else {
			return this.getToken(MariaDBParser.RR_BRACKET, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	public partitionOption(): PartitionOptionContext[];
	public partitionOption(i: number): PartitionOptionContext;
	public partitionOption(i?: number): PartitionOptionContext | PartitionOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionOptionContext);
		} else {
			return this.getRuleContext(i, PartitionOptionContext);
		}
	}
	public subpartitionDefinition(): SubpartitionDefinitionContext[];
	public subpartitionDefinition(i: number): SubpartitionDefinitionContext;
	public subpartitionDefinition(i?: number): SubpartitionDefinitionContext | SubpartitionDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SubpartitionDefinitionContext);
		} else {
			return this.getRuleContext(i, SubpartitionDefinitionContext);
		}
	}
	constructor(ctx: PartitionDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterPartitionListAtom) {
			listener.enterPartitionListAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitPartitionListAtom) {
			listener.exitPartitionListAtom(this);
		}
	}
}
export class PartitionListVectorContext extends PartitionDefinitionContext {
	public PARTITION(): TerminalNode { return this.getToken(MariaDBParser.PARTITION, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public VALUES(): TerminalNode { return this.getToken(MariaDBParser.VALUES, 0); }
	public IN(): TerminalNode { return this.getToken(MariaDBParser.IN, 0); }
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.LR_BRACKET);
		} else {
			return this.getToken(MariaDBParser.LR_BRACKET, i);
		}
	}
	public partitionDefinerVector(): PartitionDefinerVectorContext[];
	public partitionDefinerVector(i: number): PartitionDefinerVectorContext;
	public partitionDefinerVector(i?: number): PartitionDefinerVectorContext | PartitionDefinerVectorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionDefinerVectorContext);
		} else {
			return this.getRuleContext(i, PartitionDefinerVectorContext);
		}
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.RR_BRACKET);
		} else {
			return this.getToken(MariaDBParser.RR_BRACKET, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	public partitionOption(): PartitionOptionContext[];
	public partitionOption(i: number): PartitionOptionContext;
	public partitionOption(i?: number): PartitionOptionContext | PartitionOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionOptionContext);
		} else {
			return this.getRuleContext(i, PartitionOptionContext);
		}
	}
	public subpartitionDefinition(): SubpartitionDefinitionContext[];
	public subpartitionDefinition(i: number): SubpartitionDefinitionContext;
	public subpartitionDefinition(i?: number): SubpartitionDefinitionContext | SubpartitionDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SubpartitionDefinitionContext);
		} else {
			return this.getRuleContext(i, SubpartitionDefinitionContext);
		}
	}
	constructor(ctx: PartitionDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterPartitionListVector) {
			listener.enterPartitionListVector(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitPartitionListVector) {
			listener.exitPartitionListVector(this);
		}
	}
}
export class PartitionSimpleContext extends PartitionDefinitionContext {
	public PARTITION(): TerminalNode { return this.getToken(MariaDBParser.PARTITION, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public partitionOption(): PartitionOptionContext[];
	public partitionOption(i: number): PartitionOptionContext;
	public partitionOption(i?: number): PartitionOptionContext | PartitionOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionOptionContext);
		} else {
			return this.getRuleContext(i, PartitionOptionContext);
		}
	}
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LR_BRACKET, 0); }
	public subpartitionDefinition(): SubpartitionDefinitionContext[];
	public subpartitionDefinition(i: number): SubpartitionDefinitionContext;
	public subpartitionDefinition(i?: number): SubpartitionDefinitionContext | SubpartitionDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SubpartitionDefinitionContext);
		} else {
			return this.getRuleContext(i, SubpartitionDefinitionContext);
		}
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(ctx: PartitionDefinitionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterPartitionSimple) {
			listener.enterPartitionSimple(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitPartitionSimple) {
			listener.exitPartitionSimple(this);
		}
	}
}


export class PartitionDefinerAtomContext extends ParserRuleContext {
	public constant(): ConstantContext | undefined {
		return this.tryGetRuleContext(0, ConstantContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public MAXVALUE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MAXVALUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_partitionDefinerAtom; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterPartitionDefinerAtom) {
			listener.enterPartitionDefinerAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitPartitionDefinerAtom) {
			listener.exitPartitionDefinerAtom(this);
		}
	}
}


export class PartitionDefinerVectorContext extends ParserRuleContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public partitionDefinerAtom(): PartitionDefinerAtomContext[];
	public partitionDefinerAtom(i: number): PartitionDefinerAtomContext;
	public partitionDefinerAtom(i?: number): PartitionDefinerAtomContext | PartitionDefinerAtomContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionDefinerAtomContext);
		} else {
			return this.getRuleContext(i, PartitionDefinerAtomContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_partitionDefinerVector; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterPartitionDefinerVector) {
			listener.enterPartitionDefinerVector(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitPartitionDefinerVector) {
			listener.exitPartitionDefinerVector(this);
		}
	}
}


export class SubpartitionDefinitionContext extends ParserRuleContext {
	public SUBPARTITION(): TerminalNode { return this.getToken(MariaDBParser.SUBPARTITION, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public partitionOption(): PartitionOptionContext[];
	public partitionOption(i: number): PartitionOptionContext;
	public partitionOption(i?: number): PartitionOptionContext | PartitionOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionOptionContext);
		} else {
			return this.getRuleContext(i, PartitionOptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_subpartitionDefinition; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSubpartitionDefinition) {
			listener.enterSubpartitionDefinition(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSubpartitionDefinition) {
			listener.exitSubpartitionDefinition(this);
		}
	}
}


export class PartitionOptionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_partitionOption; }
	public copyFrom(ctx: PartitionOptionContext): void {
		super.copyFrom(ctx);
	}
}
export class PartitionOptionEngineContext extends PartitionOptionContext {
	public ENGINE(): TerminalNode { return this.getToken(MariaDBParser.ENGINE, 0); }
	public engineName(): EngineNameContext {
		return this.getRuleContext(0, EngineNameContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DEFAULT, 0); }
	public STORAGE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STORAGE, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: PartitionOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterPartitionOptionEngine) {
			listener.enterPartitionOptionEngine(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitPartitionOptionEngine) {
			listener.exitPartitionOptionEngine(this);
		}
	}
}
export class PartitionOptionCommentContext extends PartitionOptionContext {
	public _comment!: Token;
	public COMMENT(): TerminalNode { return this.getToken(MariaDBParser.COMMENT, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.STRING_LITERAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: PartitionOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterPartitionOptionComment) {
			listener.enterPartitionOptionComment(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitPartitionOptionComment) {
			listener.exitPartitionOptionComment(this);
		}
	}
}
export class PartitionOptionDataDirectoryContext extends PartitionOptionContext {
	public _dataDirectory!: Token;
	public DATA(): TerminalNode { return this.getToken(MariaDBParser.DATA, 0); }
	public DIRECTORY(): TerminalNode { return this.getToken(MariaDBParser.DIRECTORY, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.STRING_LITERAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: PartitionOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterPartitionOptionDataDirectory) {
			listener.enterPartitionOptionDataDirectory(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitPartitionOptionDataDirectory) {
			listener.exitPartitionOptionDataDirectory(this);
		}
	}
}
export class PartitionOptionIndexDirectoryContext extends PartitionOptionContext {
	public _indexDirectory!: Token;
	public INDEX(): TerminalNode { return this.getToken(MariaDBParser.INDEX, 0); }
	public DIRECTORY(): TerminalNode { return this.getToken(MariaDBParser.DIRECTORY, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.STRING_LITERAL, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: PartitionOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterPartitionOptionIndexDirectory) {
			listener.enterPartitionOptionIndexDirectory(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitPartitionOptionIndexDirectory) {
			listener.exitPartitionOptionIndexDirectory(this);
		}
	}
}
export class PartitionOptionMaxRowsContext extends PartitionOptionContext {
	public _maxRows!: DecimalLiteralContext;
	public MAX_ROWS(): TerminalNode { return this.getToken(MariaDBParser.MAX_ROWS, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: PartitionOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterPartitionOptionMaxRows) {
			listener.enterPartitionOptionMaxRows(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitPartitionOptionMaxRows) {
			listener.exitPartitionOptionMaxRows(this);
		}
	}
}
export class PartitionOptionMinRowsContext extends PartitionOptionContext {
	public _minRows!: DecimalLiteralContext;
	public MIN_ROWS(): TerminalNode { return this.getToken(MariaDBParser.MIN_ROWS, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: PartitionOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterPartitionOptionMinRows) {
			listener.enterPartitionOptionMinRows(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitPartitionOptionMinRows) {
			listener.exitPartitionOptionMinRows(this);
		}
	}
}
export class PartitionOptionTablespaceContext extends PartitionOptionContext {
	public _tablespace!: UidContext;
	public TABLESPACE(): TerminalNode { return this.getToken(MariaDBParser.TABLESPACE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: PartitionOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterPartitionOptionTablespace) {
			listener.enterPartitionOptionTablespace(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitPartitionOptionTablespace) {
			listener.exitPartitionOptionTablespace(this);
		}
	}
}
export class PartitionOptionNodeGroupContext extends PartitionOptionContext {
	public _nodegroup!: UidContext;
	public NODEGROUP(): TerminalNode { return this.getToken(MariaDBParser.NODEGROUP, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: PartitionOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterPartitionOptionNodeGroup) {
			listener.enterPartitionOptionNodeGroup(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitPartitionOptionNodeGroup) {
			listener.exitPartitionOptionNodeGroup(this);
		}
	}
}


export class AlterDatabaseContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_alterDatabase; }
	public copyFrom(ctx: AlterDatabaseContext): void {
		super.copyFrom(ctx);
	}
}
export class AlterSimpleDatabaseContext extends AlterDatabaseContext {
	public _dbFormat!: Token;
	public ALTER(): TerminalNode { return this.getToken(MariaDBParser.ALTER, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DATABASE, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SCHEMA, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public createDatabaseOption(): CreateDatabaseOptionContext[];
	public createDatabaseOption(i: number): CreateDatabaseOptionContext;
	public createDatabaseOption(i?: number): CreateDatabaseOptionContext | CreateDatabaseOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CreateDatabaseOptionContext);
		} else {
			return this.getRuleContext(i, CreateDatabaseOptionContext);
		}
	}
	constructor(ctx: AlterDatabaseContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterSimpleDatabase) {
			listener.enterAlterSimpleDatabase(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterSimpleDatabase) {
			listener.exitAlterSimpleDatabase(this);
		}
	}
}
export class AlterUpgradeNameContext extends AlterDatabaseContext {
	public _dbFormat!: Token;
	public ALTER(): TerminalNode { return this.getToken(MariaDBParser.ALTER, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public UPGRADE(): TerminalNode { return this.getToken(MariaDBParser.UPGRADE, 0); }
	public DATA(): TerminalNode { return this.getToken(MariaDBParser.DATA, 0); }
	public DIRECTORY(): TerminalNode { return this.getToken(MariaDBParser.DIRECTORY, 0); }
	public NAME(): TerminalNode { return this.getToken(MariaDBParser.NAME, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DATABASE, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SCHEMA, 0); }
	constructor(ctx: AlterDatabaseContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterUpgradeName) {
			listener.enterAlterUpgradeName(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterUpgradeName) {
			listener.exitAlterUpgradeName(this);
		}
	}
}


export class AlterEventContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(MariaDBParser.ALTER, 0); }
	public EVENT(): TerminalNode { return this.getToken(MariaDBParser.EVENT, 0); }
	public fullId(): FullIdContext[];
	public fullId(i: number): FullIdContext;
	public fullId(i?: number): FullIdContext | FullIdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FullIdContext);
		} else {
			return this.getRuleContext(i, FullIdContext);
		}
	}
	public ownerStatement(): OwnerStatementContext | undefined {
		return this.tryGetRuleContext(0, OwnerStatementContext);
	}
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.ON);
		} else {
			return this.getToken(MariaDBParser.ON, i);
		}
	}
	public SCHEDULE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SCHEDULE, 0); }
	public scheduleExpression(): ScheduleExpressionContext | undefined {
		return this.tryGetRuleContext(0, ScheduleExpressionContext);
	}
	public COMPLETION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COMPLETION, 0); }
	public PRESERVE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PRESERVE, 0); }
	public RENAME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RENAME, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TO, 0); }
	public enableType(): EnableTypeContext | undefined {
		return this.tryGetRuleContext(0, EnableTypeContext);
	}
	public COMMENT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COMMENT, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_LITERAL, 0); }
	public DO(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DO, 0); }
	public routineBody(): RoutineBodyContext | undefined {
		return this.tryGetRuleContext(0, RoutineBodyContext);
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_alterEvent; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterEvent) {
			listener.enterAlterEvent(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterEvent) {
			listener.exitAlterEvent(this);
		}
	}
}


export class AlterFunctionContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(MariaDBParser.ALTER, 0); }
	public FUNCTION(): TerminalNode { return this.getToken(MariaDBParser.FUNCTION, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public routineOption(): RoutineOptionContext[];
	public routineOption(i: number): RoutineOptionContext;
	public routineOption(i?: number): RoutineOptionContext | RoutineOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RoutineOptionContext);
		} else {
			return this.getRuleContext(i, RoutineOptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_alterFunction; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterFunction) {
			listener.enterAlterFunction(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterFunction) {
			listener.exitAlterFunction(this);
		}
	}
}


export class AlterInstanceContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(MariaDBParser.ALTER, 0); }
	public INSTANCE(): TerminalNode { return this.getToken(MariaDBParser.INSTANCE, 0); }
	public ROTATE(): TerminalNode { return this.getToken(MariaDBParser.ROTATE, 0); }
	public INNODB(): TerminalNode { return this.getToken(MariaDBParser.INNODB, 0); }
	public MASTER(): TerminalNode { return this.getToken(MariaDBParser.MASTER, 0); }
	public KEY(): TerminalNode { return this.getToken(MariaDBParser.KEY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_alterInstance; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterInstance) {
			listener.enterAlterInstance(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterInstance) {
			listener.exitAlterInstance(this);
		}
	}
}


export class AlterLogfileGroupContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(MariaDBParser.ALTER, 0); }
	public LOGFILE(): TerminalNode { return this.getToken(MariaDBParser.LOGFILE, 0); }
	public GROUP(): TerminalNode { return this.getToken(MariaDBParser.GROUP, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public ADD(): TerminalNode { return this.getToken(MariaDBParser.ADD, 0); }
	public UNDOFILE(): TerminalNode { return this.getToken(MariaDBParser.UNDOFILE, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.STRING_LITERAL, 0); }
	public ENGINE(): TerminalNode { return this.getToken(MariaDBParser.ENGINE, 0); }
	public engineName(): EngineNameContext {
		return this.getRuleContext(0, EngineNameContext);
	}
	public INITIAL_SIZE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INITIAL_SIZE, 0); }
	public fileSizeLiteral(): FileSizeLiteralContext | undefined {
		return this.tryGetRuleContext(0, FileSizeLiteralContext);
	}
	public WAIT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WAIT, 0); }
	public EQUAL_SYMBOL(): TerminalNode[];
	public EQUAL_SYMBOL(i: number): TerminalNode;
	public EQUAL_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.EQUAL_SYMBOL);
		} else {
			return this.getToken(MariaDBParser.EQUAL_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_alterLogfileGroup; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterLogfileGroup) {
			listener.enterAlterLogfileGroup(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterLogfileGroup) {
			listener.exitAlterLogfileGroup(this);
		}
	}
}


export class AlterProcedureContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(MariaDBParser.ALTER, 0); }
	public PROCEDURE(): TerminalNode { return this.getToken(MariaDBParser.PROCEDURE, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public routineOption(): RoutineOptionContext[];
	public routineOption(i: number): RoutineOptionContext;
	public routineOption(i?: number): RoutineOptionContext | RoutineOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RoutineOptionContext);
		} else {
			return this.getRuleContext(i, RoutineOptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_alterProcedure; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterProcedure) {
			listener.enterAlterProcedure(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterProcedure) {
			listener.exitAlterProcedure(this);
		}
	}
}


export class AlterServerContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(MariaDBParser.ALTER, 0); }
	public SERVER(): TerminalNode { return this.getToken(MariaDBParser.SERVER, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public OPTIONS(): TerminalNode { return this.getToken(MariaDBParser.OPTIONS, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public serverOption(): ServerOptionContext[];
	public serverOption(i: number): ServerOptionContext;
	public serverOption(i?: number): ServerOptionContext | ServerOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ServerOptionContext);
		} else {
			return this.getRuleContext(i, ServerOptionContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_alterServer; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterServer) {
			listener.enterAlterServer(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterServer) {
			listener.exitAlterServer(this);
		}
	}
}


export class AlterTableContext extends ParserRuleContext {
	public _intimeAction!: Token;
	public ALTER(): TerminalNode { return this.getToken(MariaDBParser.ALTER, 0); }
	public TABLE(): TerminalNode { return this.getToken(MariaDBParser.TABLE, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public IGNORE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.IGNORE, 0); }
	public waitNowaitClause(): WaitNowaitClauseContext | undefined {
		return this.tryGetRuleContext(0, WaitNowaitClauseContext);
	}
	public alterSpecification(): AlterSpecificationContext[];
	public alterSpecification(i: number): AlterSpecificationContext;
	public alterSpecification(i?: number): AlterSpecificationContext | AlterSpecificationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AlterSpecificationContext);
		} else {
			return this.getRuleContext(i, AlterSpecificationContext);
		}
	}
	public partitionDefinitions(): PartitionDefinitionsContext | undefined {
		return this.tryGetRuleContext(0, PartitionDefinitionsContext);
	}
	public ONLINE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ONLINE, 0); }
	public OFFLINE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.OFFLINE, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_alterTable; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterTable) {
			listener.enterAlterTable(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterTable) {
			listener.exitAlterTable(this);
		}
	}
}


export class AlterTablespaceContext extends ParserRuleContext {
	public _objectAction!: Token;
	public ALTER(): TerminalNode { return this.getToken(MariaDBParser.ALTER, 0); }
	public TABLESPACE(): TerminalNode { return this.getToken(MariaDBParser.TABLESPACE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public DATAFILE(): TerminalNode { return this.getToken(MariaDBParser.DATAFILE, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.STRING_LITERAL, 0); }
	public ENGINE(): TerminalNode { return this.getToken(MariaDBParser.ENGINE, 0); }
	public engineName(): EngineNameContext {
		return this.getRuleContext(0, EngineNameContext);
	}
	public ADD(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ADD, 0); }
	public DROP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DROP, 0); }
	public INITIAL_SIZE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INITIAL_SIZE, 0); }
	public EQUAL_SYMBOL(): TerminalNode[];
	public EQUAL_SYMBOL(i: number): TerminalNode;
	public EQUAL_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.EQUAL_SYMBOL);
		} else {
			return this.getToken(MariaDBParser.EQUAL_SYMBOL, i);
		}
	}
	public fileSizeLiteral(): FileSizeLiteralContext | undefined {
		return this.tryGetRuleContext(0, FileSizeLiteralContext);
	}
	public WAIT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WAIT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_alterTablespace; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterTablespace) {
			listener.enterAlterTablespace(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterTablespace) {
			listener.exitAlterTablespace(this);
		}
	}
}


export class AlterViewContext extends ParserRuleContext {
	public _algType!: Token;
	public _secContext!: Token;
	public _checkOpt!: Token;
	public ALTER(): TerminalNode { return this.getToken(MariaDBParser.ALTER, 0); }
	public VIEW(): TerminalNode { return this.getToken(MariaDBParser.VIEW, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public AS(): TerminalNode { return this.getToken(MariaDBParser.AS, 0); }
	public selectStatement(): SelectStatementContext {
		return this.getRuleContext(0, SelectStatementContext);
	}
	public ALGORITHM(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ALGORITHM, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	public ownerStatement(): OwnerStatementContext | undefined {
		return this.tryGetRuleContext(0, OwnerStatementContext);
	}
	public SQL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SQL, 0); }
	public SECURITY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SECURITY, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LR_BRACKET, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RR_BRACKET, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WITH, 0); }
	public CHECK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CHECK, 0); }
	public OPTION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.OPTION, 0); }
	public UNDEFINED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UNDEFINED, 0); }
	public MERGE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MERGE, 0); }
	public TEMPTABLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TEMPTABLE, 0); }
	public DEFINER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DEFINER, 0); }
	public INVOKER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INVOKER, 0); }
	public CASCADED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CASCADED, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOCAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_alterView; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterView) {
			listener.enterAlterView(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterView) {
			listener.exitAlterView(this);
		}
	}
}


export class AlterSequenceContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(MariaDBParser.ALTER, 0); }
	public SEQUENCE(): TerminalNode { return this.getToken(MariaDBParser.SEQUENCE, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	public sequenceSpec(): SequenceSpecContext[];
	public sequenceSpec(i: number): SequenceSpecContext;
	public sequenceSpec(i?: number): SequenceSpecContext | SequenceSpecContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SequenceSpecContext);
		} else {
			return this.getRuleContext(i, SequenceSpecContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_alterSequence; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterSequence) {
			listener.enterAlterSequence(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterSequence) {
			listener.exitAlterSequence(this);
		}
	}
}


export class AlterSpecificationContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_alterSpecification; }
	public copyFrom(ctx: AlterSpecificationContext): void {
		super.copyFrom(ctx);
	}
}
export class AlterByTableOptionContext extends AlterSpecificationContext {
	public tableOption(): TableOptionContext[];
	public tableOption(i: number): TableOptionContext;
	public tableOption(i?: number): TableOptionContext | TableOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableOptionContext);
		} else {
			return this.getRuleContext(i, TableOptionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByTableOption) {
			listener.enterAlterByTableOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByTableOption) {
			listener.exitAlterByTableOption(this);
		}
	}
}
export class AlterByAddColumnContext extends AlterSpecificationContext {
	public ADD(): TerminalNode { return this.getToken(MariaDBParser.ADD, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public columnDefinition(): ColumnDefinitionContext {
		return this.getRuleContext(0, ColumnDefinitionContext);
	}
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COLUMN, 0); }
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FIRST, 0); }
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AFTER, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByAddColumn) {
			listener.enterAlterByAddColumn(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByAddColumn) {
			listener.exitAlterByAddColumn(this);
		}
	}
}
export class AlterByAddColumnsContext extends AlterSpecificationContext {
	public ADD(): TerminalNode { return this.getToken(MariaDBParser.ADD, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public columnDefinition(): ColumnDefinitionContext[];
	public columnDefinition(i: number): ColumnDefinitionContext;
	public columnDefinition(i?: number): ColumnDefinitionContext | ColumnDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ColumnDefinitionContext);
		} else {
			return this.getRuleContext(i, ColumnDefinitionContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COLUMN, 0); }
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByAddColumns) {
			listener.enterAlterByAddColumns(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByAddColumns) {
			listener.exitAlterByAddColumns(this);
		}
	}
}
export class AlterByAddIndexContext extends AlterSpecificationContext {
	public _indexFormat!: Token;
	public ADD(): TerminalNode { return this.getToken(MariaDBParser.ADD, 0); }
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getRuleContext(0, IndexColumnNamesContext);
	}
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INDEX, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.KEY, 0); }
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public indexType(): IndexTypeContext | undefined {
		return this.tryGetRuleContext(0, IndexTypeContext);
	}
	public indexOption(): IndexOptionContext[];
	public indexOption(i: number): IndexOptionContext;
	public indexOption(i?: number): IndexOptionContext | IndexOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexOptionContext);
		} else {
			return this.getRuleContext(i, IndexOptionContext);
		}
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByAddIndex) {
			listener.enterAlterByAddIndex(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByAddIndex) {
			listener.exitAlterByAddIndex(this);
		}
	}
}
export class AlterByAddPrimaryKeyContext extends AlterSpecificationContext {
	public _name!: UidContext;
	public _index!: UidContext;
	public ADD(): TerminalNode { return this.getToken(MariaDBParser.ADD, 0); }
	public PRIMARY(): TerminalNode { return this.getToken(MariaDBParser.PRIMARY, 0); }
	public KEY(): TerminalNode { return this.getToken(MariaDBParser.KEY, 0); }
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getRuleContext(0, IndexColumnNamesContext);
	}
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONSTRAINT, 0); }
	public indexType(): IndexTypeContext | undefined {
		return this.tryGetRuleContext(0, IndexTypeContext);
	}
	public indexOption(): IndexOptionContext[];
	public indexOption(i: number): IndexOptionContext;
	public indexOption(i?: number): IndexOptionContext | IndexOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexOptionContext);
		} else {
			return this.getRuleContext(i, IndexOptionContext);
		}
	}
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByAddPrimaryKey) {
			listener.enterAlterByAddPrimaryKey(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByAddPrimaryKey) {
			listener.exitAlterByAddPrimaryKey(this);
		}
	}
}
export class AlterByAddUniqueKeyContext extends AlterSpecificationContext {
	public _name!: UidContext;
	public _indexFormat!: Token;
	public _indexName!: UidContext;
	public ADD(): TerminalNode { return this.getToken(MariaDBParser.ADD, 0); }
	public UNIQUE(): TerminalNode { return this.getToken(MariaDBParser.UNIQUE, 0); }
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getRuleContext(0, IndexColumnNamesContext);
	}
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONSTRAINT, 0); }
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	public indexType(): IndexTypeContext | undefined {
		return this.tryGetRuleContext(0, IndexTypeContext);
	}
	public indexOption(): IndexOptionContext[];
	public indexOption(i: number): IndexOptionContext;
	public indexOption(i?: number): IndexOptionContext | IndexOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexOptionContext);
		} else {
			return this.getRuleContext(i, IndexOptionContext);
		}
	}
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INDEX, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.KEY, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByAddUniqueKey) {
			listener.enterAlterByAddUniqueKey(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByAddUniqueKey) {
			listener.exitAlterByAddUniqueKey(this);
		}
	}
}
export class AlterByAddSpecialIndexContext extends AlterSpecificationContext {
	public _keyType!: Token;
	public _indexFormat!: Token;
	public ADD(): TerminalNode { return this.getToken(MariaDBParser.ADD, 0); }
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getRuleContext(0, IndexColumnNamesContext);
	}
	public FULLTEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FULLTEXT, 0); }
	public SPATIAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SPATIAL, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public indexOption(): IndexOptionContext[];
	public indexOption(i: number): IndexOptionContext;
	public indexOption(i?: number): IndexOptionContext | IndexOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexOptionContext);
		} else {
			return this.getRuleContext(i, IndexOptionContext);
		}
	}
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INDEX, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.KEY, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByAddSpecialIndex) {
			listener.enterAlterByAddSpecialIndex(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByAddSpecialIndex) {
			listener.exitAlterByAddSpecialIndex(this);
		}
	}
}
export class AlterByAddForeignKeyContext extends AlterSpecificationContext {
	public _name!: UidContext;
	public _indexName!: UidContext;
	public ADD(): TerminalNode { return this.getToken(MariaDBParser.ADD, 0); }
	public FOREIGN(): TerminalNode { return this.getToken(MariaDBParser.FOREIGN, 0); }
	public KEY(): TerminalNode { return this.getToken(MariaDBParser.KEY, 0); }
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getRuleContext(0, IndexColumnNamesContext);
	}
	public referenceDefinition(): ReferenceDefinitionContext {
		return this.getRuleContext(0, ReferenceDefinitionContext);
	}
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONSTRAINT, 0); }
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByAddForeignKey) {
			listener.enterAlterByAddForeignKey(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByAddForeignKey) {
			listener.exitAlterByAddForeignKey(this);
		}
	}
}
export class AlterByAddCheckTableConstraintContext extends AlterSpecificationContext {
	public _name!: UidContext;
	public ADD(): TerminalNode { return this.getToken(MariaDBParser.ADD, 0); }
	public CHECK(): TerminalNode { return this.getToken(MariaDBParser.CHECK, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONSTRAINT, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByAddCheckTableConstraint) {
			listener.enterAlterByAddCheckTableConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByAddCheckTableConstraint) {
			listener.exitAlterByAddCheckTableConstraint(this);
		}
	}
}
export class AlterBySetAlgorithmContext extends AlterSpecificationContext {
	public _algType!: Token;
	public ALGORITHM(): TerminalNode { return this.getToken(MariaDBParser.ALGORITHM, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DEFAULT, 0); }
	public INSTANT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INSTANT, 0); }
	public INPLACE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INPLACE, 0); }
	public COPY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COPY, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterBySetAlgorithm) {
			listener.enterAlterBySetAlgorithm(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterBySetAlgorithm) {
			listener.exitAlterBySetAlgorithm(this);
		}
	}
}
export class AlterByChangeDefaultContext extends AlterSpecificationContext {
	public ALTER(): TerminalNode { return this.getToken(MariaDBParser.ALTER, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public SET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SET, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DEFAULT, 0); }
	public defaultValue(): DefaultValueContext | undefined {
		return this.tryGetRuleContext(0, DefaultValueContext);
	}
	public DROP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DROP, 0); }
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COLUMN, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByChangeDefault) {
			listener.enterAlterByChangeDefault(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByChangeDefault) {
			listener.exitAlterByChangeDefault(this);
		}
	}
}
export class AlterByChangeColumnContext extends AlterSpecificationContext {
	public _oldColumn!: UidContext;
	public _newColumn!: UidContext;
	public _afterColumn!: UidContext;
	public CHANGE(): TerminalNode { return this.getToken(MariaDBParser.CHANGE, 0); }
	public columnDefinition(): ColumnDefinitionContext {
		return this.getRuleContext(0, ColumnDefinitionContext);
	}
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COLUMN, 0); }
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FIRST, 0); }
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AFTER, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByChangeColumn) {
			listener.enterAlterByChangeColumn(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByChangeColumn) {
			listener.exitAlterByChangeColumn(this);
		}
	}
}
export class AlterByRenameColumnContext extends AlterSpecificationContext {
	public _oldColumn!: UidContext;
	public _newColumn!: UidContext;
	public RENAME(): TerminalNode { return this.getToken(MariaDBParser.RENAME, 0); }
	public COLUMN(): TerminalNode { return this.getToken(MariaDBParser.COLUMN, 0); }
	public TO(): TerminalNode { return this.getToken(MariaDBParser.TO, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByRenameColumn) {
			listener.enterAlterByRenameColumn(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByRenameColumn) {
			listener.exitAlterByRenameColumn(this);
		}
	}
}
export class AlterByLockContext extends AlterSpecificationContext {
	public _lockType!: Token;
	public LOCK(): TerminalNode { return this.getToken(MariaDBParser.LOCK, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DEFAULT, 0); }
	public NONE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NONE, 0); }
	public SHARED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SHARED, 0); }
	public EXCLUSIVE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EXCLUSIVE, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByLock) {
			listener.enterAlterByLock(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByLock) {
			listener.exitAlterByLock(this);
		}
	}
}
export class AlterByModifyColumnContext extends AlterSpecificationContext {
	public MODIFY(): TerminalNode { return this.getToken(MariaDBParser.MODIFY, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public columnDefinition(): ColumnDefinitionContext {
		return this.getRuleContext(0, ColumnDefinitionContext);
	}
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COLUMN, 0); }
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FIRST, 0); }
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AFTER, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByModifyColumn) {
			listener.enterAlterByModifyColumn(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByModifyColumn) {
			listener.exitAlterByModifyColumn(this);
		}
	}
}
export class AlterByDropColumnContext extends AlterSpecificationContext {
	public DROP(): TerminalNode { return this.getToken(MariaDBParser.DROP, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COLUMN, 0); }
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RESTRICT, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByDropColumn) {
			listener.enterAlterByDropColumn(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByDropColumn) {
			listener.exitAlterByDropColumn(this);
		}
	}
}
export class AlterByDropConstraintCheckContext extends AlterSpecificationContext {
	public DROP(): TerminalNode { return this.getToken(MariaDBParser.DROP, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONSTRAINT, 0); }
	public CHECK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CHECK, 0); }
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByDropConstraintCheck) {
			listener.enterAlterByDropConstraintCheck(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByDropConstraintCheck) {
			listener.exitAlterByDropConstraintCheck(this);
		}
	}
}
export class AlterByDropPrimaryKeyContext extends AlterSpecificationContext {
	public DROP(): TerminalNode { return this.getToken(MariaDBParser.DROP, 0); }
	public PRIMARY(): TerminalNode { return this.getToken(MariaDBParser.PRIMARY, 0); }
	public KEY(): TerminalNode { return this.getToken(MariaDBParser.KEY, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByDropPrimaryKey) {
			listener.enterAlterByDropPrimaryKey(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByDropPrimaryKey) {
			listener.exitAlterByDropPrimaryKey(this);
		}
	}
}
export class AlterByDropIndexContext extends AlterSpecificationContext {
	public _indexFormat!: Token;
	public DROP(): TerminalNode { return this.getToken(MariaDBParser.DROP, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INDEX, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.KEY, 0); }
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByDropIndex) {
			listener.enterAlterByDropIndex(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByDropIndex) {
			listener.exitAlterByDropIndex(this);
		}
	}
}
export class AlterByRenameIndexContext extends AlterSpecificationContext {
	public _indexFormat!: Token;
	public RENAME(): TerminalNode { return this.getToken(MariaDBParser.RENAME, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public TO(): TerminalNode { return this.getToken(MariaDBParser.TO, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INDEX, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.KEY, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByRenameIndex) {
			listener.enterAlterByRenameIndex(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByRenameIndex) {
			listener.exitAlterByRenameIndex(this);
		}
	}
}
export class AlterByAlterIndexVisibilityContext extends AlterSpecificationContext {
	public ALTER(): TerminalNode { return this.getToken(MariaDBParser.ALTER, 0); }
	public INDEX(): TerminalNode { return this.getToken(MariaDBParser.INDEX, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public VISIBLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VISIBLE, 0); }
	public INVISIBLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INVISIBLE, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByAlterIndexVisibility) {
			listener.enterAlterByAlterIndexVisibility(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByAlterIndexVisibility) {
			listener.exitAlterByAlterIndexVisibility(this);
		}
	}
}
export class AlterByDropForeignKeyContext extends AlterSpecificationContext {
	public DROP(): TerminalNode { return this.getToken(MariaDBParser.DROP, 0); }
	public FOREIGN(): TerminalNode { return this.getToken(MariaDBParser.FOREIGN, 0); }
	public KEY(): TerminalNode { return this.getToken(MariaDBParser.KEY, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByDropForeignKey) {
			listener.enterAlterByDropForeignKey(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByDropForeignKey) {
			listener.exitAlterByDropForeignKey(this);
		}
	}
}
export class AlterByDisableKeysContext extends AlterSpecificationContext {
	public DISABLE(): TerminalNode { return this.getToken(MariaDBParser.DISABLE, 0); }
	public KEYS(): TerminalNode { return this.getToken(MariaDBParser.KEYS, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByDisableKeys) {
			listener.enterAlterByDisableKeys(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByDisableKeys) {
			listener.exitAlterByDisableKeys(this);
		}
	}
}
export class AlterByEnableKeysContext extends AlterSpecificationContext {
	public ENABLE(): TerminalNode { return this.getToken(MariaDBParser.ENABLE, 0); }
	public KEYS(): TerminalNode { return this.getToken(MariaDBParser.KEYS, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByEnableKeys) {
			listener.enterAlterByEnableKeys(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByEnableKeys) {
			listener.exitAlterByEnableKeys(this);
		}
	}
}
export class AlterByRenameContext extends AlterSpecificationContext {
	public _renameFormat!: Token;
	public RENAME(): TerminalNode { return this.getToken(MariaDBParser.RENAME, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public fullId(): FullIdContext | undefined {
		return this.tryGetRuleContext(0, FullIdContext);
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TO, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AS, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByRename) {
			listener.enterAlterByRename(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByRename) {
			listener.exitAlterByRename(this);
		}
	}
}
export class AlterByOrderContext extends AlterSpecificationContext {
	public ORDER(): TerminalNode { return this.getToken(MariaDBParser.ORDER, 0); }
	public BY(): TerminalNode { return this.getToken(MariaDBParser.BY, 0); }
	public uidList(): UidListContext {
		return this.getRuleContext(0, UidListContext);
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByOrder) {
			listener.enterAlterByOrder(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByOrder) {
			listener.exitAlterByOrder(this);
		}
	}
}
export class AlterByConvertCharsetContext extends AlterSpecificationContext {
	public CONVERT(): TerminalNode { return this.getToken(MariaDBParser.CONVERT, 0); }
	public TO(): TerminalNode { return this.getToken(MariaDBParser.TO, 0); }
	public CHARACTER(): TerminalNode { return this.getToken(MariaDBParser.CHARACTER, 0); }
	public SET(): TerminalNode { return this.getToken(MariaDBParser.SET, 0); }
	public charsetName(): CharsetNameContext {
		return this.getRuleContext(0, CharsetNameContext);
	}
	public COLLATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COLLATE, 0); }
	public collationName(): CollationNameContext | undefined {
		return this.tryGetRuleContext(0, CollationNameContext);
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByConvertCharset) {
			listener.enterAlterByConvertCharset(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByConvertCharset) {
			listener.exitAlterByConvertCharset(this);
		}
	}
}
export class AlterByDefaultCharsetContext extends AlterSpecificationContext {
	public CHARACTER(): TerminalNode { return this.getToken(MariaDBParser.CHARACTER, 0); }
	public SET(): TerminalNode { return this.getToken(MariaDBParser.SET, 0); }
	public EQUAL_SYMBOL(): TerminalNode[];
	public EQUAL_SYMBOL(i: number): TerminalNode;
	public EQUAL_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.EQUAL_SYMBOL);
		} else {
			return this.getToken(MariaDBParser.EQUAL_SYMBOL, i);
		}
	}
	public charsetName(): CharsetNameContext {
		return this.getRuleContext(0, CharsetNameContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DEFAULT, 0); }
	public COLLATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COLLATE, 0); }
	public collationName(): CollationNameContext | undefined {
		return this.tryGetRuleContext(0, CollationNameContext);
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByDefaultCharset) {
			listener.enterAlterByDefaultCharset(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByDefaultCharset) {
			listener.exitAlterByDefaultCharset(this);
		}
	}
}
export class AlterByDiscardTablespaceContext extends AlterSpecificationContext {
	public DISCARD(): TerminalNode { return this.getToken(MariaDBParser.DISCARD, 0); }
	public TABLESPACE(): TerminalNode { return this.getToken(MariaDBParser.TABLESPACE, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByDiscardTablespace) {
			listener.enterAlterByDiscardTablespace(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByDiscardTablespace) {
			listener.exitAlterByDiscardTablespace(this);
		}
	}
}
export class AlterByImportTablespaceContext extends AlterSpecificationContext {
	public IMPORT(): TerminalNode { return this.getToken(MariaDBParser.IMPORT, 0); }
	public TABLESPACE(): TerminalNode { return this.getToken(MariaDBParser.TABLESPACE, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByImportTablespace) {
			listener.enterAlterByImportTablespace(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByImportTablespace) {
			listener.exitAlterByImportTablespace(this);
		}
	}
}
export class AlterByForceContext extends AlterSpecificationContext {
	public FORCE(): TerminalNode { return this.getToken(MariaDBParser.FORCE, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByForce) {
			listener.enterAlterByForce(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByForce) {
			listener.exitAlterByForce(this);
		}
	}
}
export class AlterByValidateContext extends AlterSpecificationContext {
	public _validationFormat!: Token;
	public VALIDATION(): TerminalNode { return this.getToken(MariaDBParser.VALIDATION, 0); }
	public WITHOUT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WITHOUT, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WITH, 0); }
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByValidate) {
			listener.enterAlterByValidate(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByValidate) {
			listener.exitAlterByValidate(this);
		}
	}
}
export class AlterByAddDefinitionsContext extends AlterSpecificationContext {
	public ADD(): TerminalNode { return this.getToken(MariaDBParser.ADD, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public createDefinition(): CreateDefinitionContext[];
	public createDefinition(i: number): CreateDefinitionContext;
	public createDefinition(i?: number): CreateDefinitionContext | CreateDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CreateDefinitionContext);
		} else {
			return this.getRuleContext(i, CreateDefinitionContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COLUMN, 0); }
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByAddDefinitions) {
			listener.enterAlterByAddDefinitions(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByAddDefinitions) {
			listener.exitAlterByAddDefinitions(this);
		}
	}
}
export class AlterPartitionContext extends AlterSpecificationContext {
	public alterPartitionSpecification(): AlterPartitionSpecificationContext {
		return this.getRuleContext(0, AlterPartitionSpecificationContext);
	}
	constructor(ctx: AlterSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterPartition) {
			listener.enterAlterPartition(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterPartition) {
			listener.exitAlterPartition(this);
		}
	}
}


export class AlterPartitionSpecificationContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_alterPartitionSpecification; }
	public copyFrom(ctx: AlterPartitionSpecificationContext): void {
		super.copyFrom(ctx);
	}
}
export class AlterByAddPartitionContext extends AlterPartitionSpecificationContext {
	public ADD(): TerminalNode { return this.getToken(MariaDBParser.ADD, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MariaDBParser.PARTITION, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public partitionDefinition(): PartitionDefinitionContext[];
	public partitionDefinition(i: number): PartitionDefinitionContext;
	public partitionDefinition(i?: number): PartitionDefinitionContext | PartitionDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionDefinitionContext);
		} else {
			return this.getRuleContext(i, PartitionDefinitionContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(ctx: AlterPartitionSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByAddPartition) {
			listener.enterAlterByAddPartition(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByAddPartition) {
			listener.exitAlterByAddPartition(this);
		}
	}
}
export class AlterByDropPartitionContext extends AlterPartitionSpecificationContext {
	public DROP(): TerminalNode { return this.getToken(MariaDBParser.DROP, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MariaDBParser.PARTITION, 0); }
	public uidList(): UidListContext {
		return this.getRuleContext(0, UidListContext);
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(ctx: AlterPartitionSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByDropPartition) {
			listener.enterAlterByDropPartition(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByDropPartition) {
			listener.exitAlterByDropPartition(this);
		}
	}
}
export class AlterByDiscardPartitionContext extends AlterPartitionSpecificationContext {
	public DISCARD(): TerminalNode { return this.getToken(MariaDBParser.DISCARD, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MariaDBParser.PARTITION, 0); }
	public TABLESPACE(): TerminalNode { return this.getToken(MariaDBParser.TABLESPACE, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ALL, 0); }
	constructor(ctx: AlterPartitionSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByDiscardPartition) {
			listener.enterAlterByDiscardPartition(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByDiscardPartition) {
			listener.exitAlterByDiscardPartition(this);
		}
	}
}
export class AlterByImportPartitionContext extends AlterPartitionSpecificationContext {
	public IMPORT(): TerminalNode { return this.getToken(MariaDBParser.IMPORT, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MariaDBParser.PARTITION, 0); }
	public TABLESPACE(): TerminalNode { return this.getToken(MariaDBParser.TABLESPACE, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ALL, 0); }
	constructor(ctx: AlterPartitionSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByImportPartition) {
			listener.enterAlterByImportPartition(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByImportPartition) {
			listener.exitAlterByImportPartition(this);
		}
	}
}
export class AlterByTruncatePartitionContext extends AlterPartitionSpecificationContext {
	public TRUNCATE(): TerminalNode { return this.getToken(MariaDBParser.TRUNCATE, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MariaDBParser.PARTITION, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ALL, 0); }
	constructor(ctx: AlterPartitionSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByTruncatePartition) {
			listener.enterAlterByTruncatePartition(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByTruncatePartition) {
			listener.exitAlterByTruncatePartition(this);
		}
	}
}
export class AlterByCoalescePartitionContext extends AlterPartitionSpecificationContext {
	public COALESCE(): TerminalNode { return this.getToken(MariaDBParser.COALESCE, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MariaDBParser.PARTITION, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	constructor(ctx: AlterPartitionSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByCoalescePartition) {
			listener.enterAlterByCoalescePartition(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByCoalescePartition) {
			listener.exitAlterByCoalescePartition(this);
		}
	}
}
export class AlterByReorganizePartitionContext extends AlterPartitionSpecificationContext {
	public REORGANIZE(): TerminalNode { return this.getToken(MariaDBParser.REORGANIZE, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MariaDBParser.PARTITION, 0); }
	public uidList(): UidListContext {
		return this.getRuleContext(0, UidListContext);
	}
	public INTO(): TerminalNode { return this.getToken(MariaDBParser.INTO, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public partitionDefinition(): PartitionDefinitionContext[];
	public partitionDefinition(i: number): PartitionDefinitionContext;
	public partitionDefinition(i?: number): PartitionDefinitionContext | PartitionDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PartitionDefinitionContext);
		} else {
			return this.getRuleContext(i, PartitionDefinitionContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(ctx: AlterPartitionSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByReorganizePartition) {
			listener.enterAlterByReorganizePartition(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByReorganizePartition) {
			listener.exitAlterByReorganizePartition(this);
		}
	}
}
export class AlterByExchangePartitionContext extends AlterPartitionSpecificationContext {
	public _validationFormat!: Token;
	public EXCHANGE(): TerminalNode { return this.getToken(MariaDBParser.EXCHANGE, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MariaDBParser.PARTITION, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public WITH(): TerminalNode[];
	public WITH(i: number): TerminalNode;
	public WITH(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.WITH);
		} else {
			return this.getToken(MariaDBParser.WITH, i);
		}
	}
	public TABLE(): TerminalNode { return this.getToken(MariaDBParser.TABLE, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public VALIDATION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VALIDATION, 0); }
	public WITHOUT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WITHOUT, 0); }
	constructor(ctx: AlterPartitionSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByExchangePartition) {
			listener.enterAlterByExchangePartition(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByExchangePartition) {
			listener.exitAlterByExchangePartition(this);
		}
	}
}
export class AlterByAnalyzePartitionContext extends AlterPartitionSpecificationContext {
	public ANALYZE(): TerminalNode { return this.getToken(MariaDBParser.ANALYZE, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MariaDBParser.PARTITION, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ALL, 0); }
	constructor(ctx: AlterPartitionSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByAnalyzePartition) {
			listener.enterAlterByAnalyzePartition(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByAnalyzePartition) {
			listener.exitAlterByAnalyzePartition(this);
		}
	}
}
export class AlterByCheckPartitionContext extends AlterPartitionSpecificationContext {
	public CHECK(): TerminalNode { return this.getToken(MariaDBParser.CHECK, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MariaDBParser.PARTITION, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ALL, 0); }
	constructor(ctx: AlterPartitionSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByCheckPartition) {
			listener.enterAlterByCheckPartition(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByCheckPartition) {
			listener.exitAlterByCheckPartition(this);
		}
	}
}
export class AlterByOptimizePartitionContext extends AlterPartitionSpecificationContext {
	public OPTIMIZE(): TerminalNode { return this.getToken(MariaDBParser.OPTIMIZE, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MariaDBParser.PARTITION, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ALL, 0); }
	constructor(ctx: AlterPartitionSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByOptimizePartition) {
			listener.enterAlterByOptimizePartition(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByOptimizePartition) {
			listener.exitAlterByOptimizePartition(this);
		}
	}
}
export class AlterByRebuildPartitionContext extends AlterPartitionSpecificationContext {
	public REBUILD(): TerminalNode { return this.getToken(MariaDBParser.REBUILD, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MariaDBParser.PARTITION, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ALL, 0); }
	constructor(ctx: AlterPartitionSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByRebuildPartition) {
			listener.enterAlterByRebuildPartition(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByRebuildPartition) {
			listener.exitAlterByRebuildPartition(this);
		}
	}
}
export class AlterByRepairPartitionContext extends AlterPartitionSpecificationContext {
	public REPAIR(): TerminalNode { return this.getToken(MariaDBParser.REPAIR, 0); }
	public PARTITION(): TerminalNode { return this.getToken(MariaDBParser.PARTITION, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ALL, 0); }
	constructor(ctx: AlterPartitionSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByRepairPartition) {
			listener.enterAlterByRepairPartition(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByRepairPartition) {
			listener.exitAlterByRepairPartition(this);
		}
	}
}
export class AlterByRemovePartitioningContext extends AlterPartitionSpecificationContext {
	public REMOVE(): TerminalNode { return this.getToken(MariaDBParser.REMOVE, 0); }
	public PARTITIONING(): TerminalNode { return this.getToken(MariaDBParser.PARTITIONING, 0); }
	constructor(ctx: AlterPartitionSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByRemovePartitioning) {
			listener.enterAlterByRemovePartitioning(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByRemovePartitioning) {
			listener.exitAlterByRemovePartitioning(this);
		}
	}
}
export class AlterByUpgradePartitioningContext extends AlterPartitionSpecificationContext {
	public UPGRADE(): TerminalNode { return this.getToken(MariaDBParser.UPGRADE, 0); }
	public PARTITIONING(): TerminalNode { return this.getToken(MariaDBParser.PARTITIONING, 0); }
	constructor(ctx: AlterPartitionSpecificationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterByUpgradePartitioning) {
			listener.enterAlterByUpgradePartitioning(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterByUpgradePartitioning) {
			listener.exitAlterByUpgradePartitioning(this);
		}
	}
}


export class DropDatabaseContext extends ParserRuleContext {
	public _dbFormat!: Token;
	public DROP(): TerminalNode { return this.getToken(MariaDBParser.DROP, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DATABASE, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SCHEMA, 0); }
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_dropDatabase; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDropDatabase) {
			listener.enterDropDatabase(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDropDatabase) {
			listener.exitDropDatabase(this);
		}
	}
}


export class DropEventContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(MariaDBParser.DROP, 0); }
	public EVENT(): TerminalNode { return this.getToken(MariaDBParser.EVENT, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_dropEvent; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDropEvent) {
			listener.enterDropEvent(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDropEvent) {
			listener.exitDropEvent(this);
		}
	}
}


export class DropIndexContext extends ParserRuleContext {
	public _intimeAction!: Token;
	public _algType!: Token;
	public _lockType!: Token;
	public DROP(): TerminalNode { return this.getToken(MariaDBParser.DROP, 0); }
	public INDEX(): TerminalNode { return this.getToken(MariaDBParser.INDEX, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public ON(): TerminalNode { return this.getToken(MariaDBParser.ON, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	public ALGORITHM(): TerminalNode[];
	public ALGORITHM(i: number): TerminalNode;
	public ALGORITHM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.ALGORITHM);
		} else {
			return this.getToken(MariaDBParser.ALGORITHM, i);
		}
	}
	public LOCK(): TerminalNode[];
	public LOCK(i: number): TerminalNode;
	public LOCK(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.LOCK);
		} else {
			return this.getToken(MariaDBParser.LOCK, i);
		}
	}
	public waitNowaitClause(): WaitNowaitClauseContext | undefined {
		return this.tryGetRuleContext(0, WaitNowaitClauseContext);
	}
	public ONLINE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ONLINE, 0); }
	public OFFLINE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.OFFLINE, 0); }
	public DEFAULT(): TerminalNode[];
	public DEFAULT(i: number): TerminalNode;
	public DEFAULT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.DEFAULT);
		} else {
			return this.getToken(MariaDBParser.DEFAULT, i);
		}
	}
	public INPLACE(): TerminalNode[];
	public INPLACE(i: number): TerminalNode;
	public INPLACE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.INPLACE);
		} else {
			return this.getToken(MariaDBParser.INPLACE, i);
		}
	}
	public COPY(): TerminalNode[];
	public COPY(i: number): TerminalNode;
	public COPY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COPY);
		} else {
			return this.getToken(MariaDBParser.COPY, i);
		}
	}
	public NONE(): TerminalNode[];
	public NONE(i: number): TerminalNode;
	public NONE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.NONE);
		} else {
			return this.getToken(MariaDBParser.NONE, i);
		}
	}
	public SHARED(): TerminalNode[];
	public SHARED(i: number): TerminalNode;
	public SHARED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.SHARED);
		} else {
			return this.getToken(MariaDBParser.SHARED, i);
		}
	}
	public EXCLUSIVE(): TerminalNode[];
	public EXCLUSIVE(i: number): TerminalNode;
	public EXCLUSIVE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.EXCLUSIVE);
		} else {
			return this.getToken(MariaDBParser.EXCLUSIVE, i);
		}
	}
	public EQUAL_SYMBOL(): TerminalNode[];
	public EQUAL_SYMBOL(i: number): TerminalNode;
	public EQUAL_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.EQUAL_SYMBOL);
		} else {
			return this.getToken(MariaDBParser.EQUAL_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_dropIndex; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDropIndex) {
			listener.enterDropIndex(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDropIndex) {
			listener.exitDropIndex(this);
		}
	}
}


export class DropLogfileGroupContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(MariaDBParser.DROP, 0); }
	public LOGFILE(): TerminalNode { return this.getToken(MariaDBParser.LOGFILE, 0); }
	public GROUP(): TerminalNode { return this.getToken(MariaDBParser.GROUP, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public ENGINE(): TerminalNode { return this.getToken(MariaDBParser.ENGINE, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	public engineName(): EngineNameContext {
		return this.getRuleContext(0, EngineNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_dropLogfileGroup; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDropLogfileGroup) {
			listener.enterDropLogfileGroup(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDropLogfileGroup) {
			listener.exitDropLogfileGroup(this);
		}
	}
}


export class DropProcedureContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(MariaDBParser.DROP, 0); }
	public PROCEDURE(): TerminalNode { return this.getToken(MariaDBParser.PROCEDURE, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_dropProcedure; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDropProcedure) {
			listener.enterDropProcedure(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDropProcedure) {
			listener.exitDropProcedure(this);
		}
	}
}


export class DropFunctionContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(MariaDBParser.DROP, 0); }
	public FUNCTION(): TerminalNode { return this.getToken(MariaDBParser.FUNCTION, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_dropFunction; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDropFunction) {
			listener.enterDropFunction(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDropFunction) {
			listener.exitDropFunction(this);
		}
	}
}


export class DropServerContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(MariaDBParser.DROP, 0); }
	public SERVER(): TerminalNode { return this.getToken(MariaDBParser.SERVER, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_dropServer; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDropServer) {
			listener.enterDropServer(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDropServer) {
			listener.exitDropServer(this);
		}
	}
}


export class DropTableContext extends ParserRuleContext {
	public _dropType!: Token;
	public DROP(): TerminalNode { return this.getToken(MariaDBParser.DROP, 0); }
	public TABLE(): TerminalNode { return this.getToken(MariaDBParser.TABLE, 0); }
	public tables(): TablesContext {
		return this.getRuleContext(0, TablesContext);
	}
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TEMPORARY, 0); }
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	public waitNowaitClause(): WaitNowaitClauseContext | undefined {
		return this.tryGetRuleContext(0, WaitNowaitClauseContext);
	}
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RESTRICT, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CASCADE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_dropTable; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDropTable) {
			listener.enterDropTable(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDropTable) {
			listener.exitDropTable(this);
		}
	}
}


export class DropTablespaceContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(MariaDBParser.DROP, 0); }
	public TABLESPACE(): TerminalNode { return this.getToken(MariaDBParser.TABLESPACE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public ENGINE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ENGINE, 0); }
	public engineName(): EngineNameContext | undefined {
		return this.tryGetRuleContext(0, EngineNameContext);
	}
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_dropTablespace; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDropTablespace) {
			listener.enterDropTablespace(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDropTablespace) {
			listener.exitDropTablespace(this);
		}
	}
}


export class DropTriggerContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(MariaDBParser.DROP, 0); }
	public TRIGGER(): TerminalNode { return this.getToken(MariaDBParser.TRIGGER, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_dropTrigger; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDropTrigger) {
			listener.enterDropTrigger(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDropTrigger) {
			listener.exitDropTrigger(this);
		}
	}
}


export class DropViewContext extends ParserRuleContext {
	public _dropType!: Token;
	public DROP(): TerminalNode { return this.getToken(MariaDBParser.DROP, 0); }
	public VIEW(): TerminalNode { return this.getToken(MariaDBParser.VIEW, 0); }
	public fullId(): FullIdContext[];
	public fullId(i: number): FullIdContext;
	public fullId(i?: number): FullIdContext | FullIdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FullIdContext);
		} else {
			return this.getRuleContext(i, FullIdContext);
		}
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RESTRICT, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CASCADE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_dropView; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDropView) {
			listener.enterDropView(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDropView) {
			listener.exitDropView(this);
		}
	}
}


export class DropRoleContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(MariaDBParser.DROP, 0); }
	public ROLE(): TerminalNode { return this.getToken(MariaDBParser.ROLE, 0); }
	public roleName(): RoleNameContext[];
	public roleName(i: number): RoleNameContext;
	public roleName(i?: number): RoleNameContext | RoleNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RoleNameContext);
		} else {
			return this.getRuleContext(i, RoleNameContext);
		}
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_dropRole; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDropRole) {
			listener.enterDropRole(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDropRole) {
			listener.exitDropRole(this);
		}
	}
}


export class SetRoleContext extends ParserRuleContext {
	public SET(): TerminalNode { return this.getToken(MariaDBParser.SET, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DEFAULT, 0); }
	public ROLE(): TerminalNode { return this.getToken(MariaDBParser.ROLE, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TO, 0); }
	public NONE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NONE, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ALL, 0); }
	public roleName(): RoleNameContext[];
	public roleName(i: number): RoleNameContext;
	public roleName(i?: number): RoleNameContext | RoleNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RoleNameContext);
		} else {
			return this.getRuleContext(i, RoleNameContext);
		}
	}
	public userName(): UserNameContext[];
	public userName(i: number): UserNameContext;
	public userName(i?: number): UserNameContext | UserNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserNameContext);
		} else {
			return this.getRuleContext(i, UserNameContext);
		}
	}
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	public roleOption(): RoleOptionContext | undefined {
		return this.tryGetRuleContext(0, RoleOptionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_setRole; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSetRole) {
			listener.enterSetRole(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSetRole) {
			listener.exitSetRole(this);
		}
	}
}


export class DropSequenceContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(MariaDBParser.DROP, 0); }
	public SEQUENCE(): TerminalNode { return this.getToken(MariaDBParser.SEQUENCE, 0); }
	public fullId(): FullIdContext[];
	public fullId(i: number): FullIdContext;
	public fullId(i?: number): FullIdContext | FullIdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FullIdContext);
		} else {
			return this.getRuleContext(i, FullIdContext);
		}
	}
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TEMPORARY, 0); }
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	public COMMENT_INPUT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COMMENT_INPUT, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_dropSequence; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDropSequence) {
			listener.enterDropSequence(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDropSequence) {
			listener.exitDropSequence(this);
		}
	}
}


export class RenameTableContext extends ParserRuleContext {
	public RENAME(): TerminalNode { return this.getToken(MariaDBParser.RENAME, 0); }
	public TABLE(): TerminalNode { return this.getToken(MariaDBParser.TABLE, 0); }
	public renameTableClause(): RenameTableClauseContext[];
	public renameTableClause(i: number): RenameTableClauseContext;
	public renameTableClause(i?: number): RenameTableClauseContext | RenameTableClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RenameTableClauseContext);
		} else {
			return this.getRuleContext(i, RenameTableClauseContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_renameTable; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterRenameTable) {
			listener.enterRenameTable(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitRenameTable) {
			listener.exitRenameTable(this);
		}
	}
}


export class RenameTableClauseContext extends ParserRuleContext {
	public tableName(): TableNameContext[];
	public tableName(i: number): TableNameContext;
	public tableName(i?: number): TableNameContext | TableNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableNameContext);
		} else {
			return this.getRuleContext(i, TableNameContext);
		}
	}
	public TO(): TerminalNode { return this.getToken(MariaDBParser.TO, 0); }
	public waitNowaitClause(): WaitNowaitClauseContext | undefined {
		return this.tryGetRuleContext(0, WaitNowaitClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_renameTableClause; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterRenameTableClause) {
			listener.enterRenameTableClause(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitRenameTableClause) {
			listener.exitRenameTableClause(this);
		}
	}
}


export class TruncateTableContext extends ParserRuleContext {
	public TRUNCATE(): TerminalNode { return this.getToken(MariaDBParser.TRUNCATE, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TABLE, 0); }
	public waitNowaitClause(): WaitNowaitClauseContext | undefined {
		return this.tryGetRuleContext(0, WaitNowaitClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_truncateTable; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTruncateTable) {
			listener.enterTruncateTable(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTruncateTable) {
			listener.exitTruncateTable(this);
		}
	}
}


export class CallStatementContext extends ParserRuleContext {
	public CALL(): TerminalNode { return this.getToken(MariaDBParser.CALL, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RR_BRACKET, 0); }
	public constants(): ConstantsContext | undefined {
		return this.tryGetRuleContext(0, ConstantsContext);
	}
	public expressions(): ExpressionsContext | undefined {
		return this.tryGetRuleContext(0, ExpressionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_callStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCallStatement) {
			listener.enterCallStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCallStatement) {
			listener.exitCallStatement(this);
		}
	}
}


export class DeleteStatementContext extends ParserRuleContext {
	public singleDeleteStatement(): SingleDeleteStatementContext | undefined {
		return this.tryGetRuleContext(0, SingleDeleteStatementContext);
	}
	public multipleDeleteStatement(): MultipleDeleteStatementContext | undefined {
		return this.tryGetRuleContext(0, MultipleDeleteStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_deleteStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDeleteStatement) {
			listener.enterDeleteStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDeleteStatement) {
			listener.exitDeleteStatement(this);
		}
	}
}


export class DoStatementContext extends ParserRuleContext {
	public DO(): TerminalNode { return this.getToken(MariaDBParser.DO, 0); }
	public expressions(): ExpressionsContext {
		return this.getRuleContext(0, ExpressionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_doStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDoStatement) {
			listener.enterDoStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDoStatement) {
			listener.exitDoStatement(this);
		}
	}
}


export class HandlerStatementContext extends ParserRuleContext {
	public handlerOpenStatement(): HandlerOpenStatementContext | undefined {
		return this.tryGetRuleContext(0, HandlerOpenStatementContext);
	}
	public handlerReadIndexStatement(): HandlerReadIndexStatementContext | undefined {
		return this.tryGetRuleContext(0, HandlerReadIndexStatementContext);
	}
	public handlerReadStatement(): HandlerReadStatementContext | undefined {
		return this.tryGetRuleContext(0, HandlerReadStatementContext);
	}
	public handlerCloseStatement(): HandlerCloseStatementContext | undefined {
		return this.tryGetRuleContext(0, HandlerCloseStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_handlerStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterHandlerStatement) {
			listener.enterHandlerStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitHandlerStatement) {
			listener.exitHandlerStatement(this);
		}
	}
}


export class InsertStatementContext extends ParserRuleContext {
	public _priority!: Token;
	public _partitions!: UidListContext;
	public _columns!: UidListContext;
	public _setFirst!: UpdatedElementContext;
	public _updatedElement!: UpdatedElementContext;
	public _setElements: UpdatedElementContext[] = [];
	public _duplicatedFirst!: UpdatedElementContext;
	public _duplicatedElements: UpdatedElementContext[] = [];
	public INSERT(): TerminalNode { return this.getToken(MariaDBParser.INSERT, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public insertStatementValue(): InsertStatementValueContext | undefined {
		return this.tryGetRuleContext(0, InsertStatementValueContext);
	}
	public SET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SET, 0); }
	public IGNORE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.IGNORE, 0); }
	public INTO(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INTO, 0); }
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PARTITION, 0); }
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.LR_BRACKET);
		} else {
			return this.getToken(MariaDBParser.LR_BRACKET, i);
		}
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.RR_BRACKET);
		} else {
			return this.getToken(MariaDBParser.RR_BRACKET, i);
		}
	}
	public updatedElement(): UpdatedElementContext[];
	public updatedElement(i: number): UpdatedElementContext;
	public updatedElement(i?: number): UpdatedElementContext | UpdatedElementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UpdatedElementContext);
		} else {
			return this.getRuleContext(i, UpdatedElementContext);
		}
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ON, 0); }
	public DUPLICATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DUPLICATE, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.KEY, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UPDATE, 0); }
	public LOW_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOW_PRIORITY, 0); }
	public DELAYED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DELAYED, 0); }
	public HIGH_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.HIGH_PRIORITY, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	public uidList(): UidListContext[];
	public uidList(i: number): UidListContext;
	public uidList(i?: number): UidListContext | UidListContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidListContext);
		} else {
			return this.getRuleContext(i, UidListContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_insertStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterInsertStatement) {
			listener.enterInsertStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitInsertStatement) {
			listener.exitInsertStatement(this);
		}
	}
}


export class LoadDataStatementContext extends ParserRuleContext {
	public _priority!: Token;
	public _filename!: Token;
	public _violation!: Token;
	public _charset!: CharsetNameContext;
	public _fieldsFormat!: Token;
	public _linesFormat!: Token;
	public LOAD(): TerminalNode { return this.getToken(MariaDBParser.LOAD, 0); }
	public DATA(): TerminalNode { return this.getToken(MariaDBParser.DATA, 0); }
	public INFILE(): TerminalNode { return this.getToken(MariaDBParser.INFILE, 0); }
	public INTO(): TerminalNode { return this.getToken(MariaDBParser.INTO, 0); }
	public TABLE(): TerminalNode { return this.getToken(MariaDBParser.TABLE, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public STRING_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.STRING_LITERAL, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOCAL, 0); }
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PARTITION, 0); }
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.LR_BRACKET);
		} else {
			return this.getToken(MariaDBParser.LR_BRACKET, i);
		}
	}
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.RR_BRACKET);
		} else {
			return this.getToken(MariaDBParser.RR_BRACKET, i);
		}
	}
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CHARACTER, 0); }
	public SET(): TerminalNode[];
	public SET(i: number): TerminalNode;
	public SET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.SET);
		} else {
			return this.getToken(MariaDBParser.SET, i);
		}
	}
	public LINES(): TerminalNode[];
	public LINES(i: number): TerminalNode;
	public LINES(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.LINES);
		} else {
			return this.getToken(MariaDBParser.LINES, i);
		}
	}
	public IGNORE(): TerminalNode[];
	public IGNORE(i: number): TerminalNode;
	public IGNORE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.IGNORE);
		} else {
			return this.getToken(MariaDBParser.IGNORE, i);
		}
	}
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public assignmentField(): AssignmentFieldContext[];
	public assignmentField(i: number): AssignmentFieldContext;
	public assignmentField(i?: number): AssignmentFieldContext | AssignmentFieldContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AssignmentFieldContext);
		} else {
			return this.getRuleContext(i, AssignmentFieldContext);
		}
	}
	public updatedElement(): UpdatedElementContext[];
	public updatedElement(i: number): UpdatedElementContext;
	public updatedElement(i?: number): UpdatedElementContext | UpdatedElementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UpdatedElementContext);
		} else {
			return this.getRuleContext(i, UpdatedElementContext);
		}
	}
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public LOW_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOW_PRIORITY, 0); }
	public CONCURRENT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONCURRENT, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REPLACE, 0); }
	public FIELDS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FIELDS, 0); }
	public COLUMNS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COLUMNS, 0); }
	public ROWS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ROWS, 0); }
	public selectFieldsInto(): SelectFieldsIntoContext[];
	public selectFieldsInto(i: number): SelectFieldsIntoContext;
	public selectFieldsInto(i?: number): SelectFieldsIntoContext | SelectFieldsIntoContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectFieldsIntoContext);
		} else {
			return this.getRuleContext(i, SelectFieldsIntoContext);
		}
	}
	public selectLinesInto(): SelectLinesIntoContext[];
	public selectLinesInto(i: number): SelectLinesIntoContext;
	public selectLinesInto(i?: number): SelectLinesIntoContext | SelectLinesIntoContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectLinesIntoContext);
		} else {
			return this.getRuleContext(i, SelectLinesIntoContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_loadDataStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterLoadDataStatement) {
			listener.enterLoadDataStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitLoadDataStatement) {
			listener.exitLoadDataStatement(this);
		}
	}
}


export class LoadXmlStatementContext extends ParserRuleContext {
	public _priority!: Token;
	public _filename!: Token;
	public _violation!: Token;
	public _charset!: CharsetNameContext;
	public _tag!: Token;
	public _linesFormat!: Token;
	public LOAD(): TerminalNode { return this.getToken(MariaDBParser.LOAD, 0); }
	public XML(): TerminalNode { return this.getToken(MariaDBParser.XML, 0); }
	public INFILE(): TerminalNode { return this.getToken(MariaDBParser.INFILE, 0); }
	public INTO(): TerminalNode { return this.getToken(MariaDBParser.INTO, 0); }
	public TABLE(): TerminalNode { return this.getToken(MariaDBParser.TABLE, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public STRING_LITERAL(): TerminalNode[];
	public STRING_LITERAL(i: number): TerminalNode;
	public STRING_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.STRING_LITERAL);
		} else {
			return this.getToken(MariaDBParser.STRING_LITERAL, i);
		}
	}
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOCAL, 0); }
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CHARACTER, 0); }
	public SET(): TerminalNode[];
	public SET(i: number): TerminalNode;
	public SET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.SET);
		} else {
			return this.getToken(MariaDBParser.SET, i);
		}
	}
	public ROWS(): TerminalNode[];
	public ROWS(i: number): TerminalNode;
	public ROWS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.ROWS);
		} else {
			return this.getToken(MariaDBParser.ROWS, i);
		}
	}
	public IDENTIFIED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.IDENTIFIED, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BY, 0); }
	public LESS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LESS_SYMBOL, 0); }
	public GREATER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GREATER_SYMBOL, 0); }
	public IGNORE(): TerminalNode[];
	public IGNORE(i: number): TerminalNode;
	public IGNORE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.IGNORE);
		} else {
			return this.getToken(MariaDBParser.IGNORE, i);
		}
	}
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LR_BRACKET, 0); }
	public assignmentField(): AssignmentFieldContext[];
	public assignmentField(i: number): AssignmentFieldContext;
	public assignmentField(i?: number): AssignmentFieldContext | AssignmentFieldContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AssignmentFieldContext);
		} else {
			return this.getRuleContext(i, AssignmentFieldContext);
		}
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RR_BRACKET, 0); }
	public updatedElement(): UpdatedElementContext[];
	public updatedElement(i: number): UpdatedElementContext;
	public updatedElement(i?: number): UpdatedElementContext | UpdatedElementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UpdatedElementContext);
		} else {
			return this.getRuleContext(i, UpdatedElementContext);
		}
	}
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public LOW_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOW_PRIORITY, 0); }
	public CONCURRENT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONCURRENT, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REPLACE, 0); }
	public LINES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LINES, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_loadXmlStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterLoadXmlStatement) {
			listener.enterLoadXmlStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitLoadXmlStatement) {
			listener.exitLoadXmlStatement(this);
		}
	}
}


export class ReplaceStatementContext extends ParserRuleContext {
	public _priority!: Token;
	public _partitions!: UidListContext;
	public _columns!: UidListContext;
	public _setFirst!: UpdatedElementContext;
	public _updatedElement!: UpdatedElementContext;
	public _setElements: UpdatedElementContext[] = [];
	public REPLACE(): TerminalNode { return this.getToken(MariaDBParser.REPLACE, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public insertStatementValue(): InsertStatementValueContext | undefined {
		return this.tryGetRuleContext(0, InsertStatementValueContext);
	}
	public SET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SET, 0); }
	public INTO(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INTO, 0); }
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PARTITION, 0); }
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.LR_BRACKET);
		} else {
			return this.getToken(MariaDBParser.LR_BRACKET, i);
		}
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.RR_BRACKET);
		} else {
			return this.getToken(MariaDBParser.RR_BRACKET, i);
		}
	}
	public updatedElement(): UpdatedElementContext[];
	public updatedElement(i: number): UpdatedElementContext;
	public updatedElement(i?: number): UpdatedElementContext | UpdatedElementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UpdatedElementContext);
		} else {
			return this.getRuleContext(i, UpdatedElementContext);
		}
	}
	public uidList(): UidListContext[];
	public uidList(i: number): UidListContext;
	public uidList(i?: number): UidListContext | UidListContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidListContext);
		} else {
			return this.getRuleContext(i, UidListContext);
		}
	}
	public LOW_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOW_PRIORITY, 0); }
	public DELAYED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DELAYED, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_replaceStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterReplaceStatement) {
			listener.enterReplaceStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitReplaceStatement) {
			listener.exitReplaceStatement(this);
		}
	}
}


export class SelectStatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_selectStatement; }
	public copyFrom(ctx: SelectStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class SimpleSelectContext extends SelectStatementContext {
	public querySpecification(): QuerySpecificationContext {
		return this.getRuleContext(0, QuerySpecificationContext);
	}
	public lockClause(): LockClauseContext | undefined {
		return this.tryGetRuleContext(0, LockClauseContext);
	}
	constructor(ctx: SelectStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSimpleSelect) {
			listener.enterSimpleSelect(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSimpleSelect) {
			listener.exitSimpleSelect(this);
		}
	}
}
export class ParenthesisSelectContext extends SelectStatementContext {
	public queryExpression(): QueryExpressionContext {
		return this.getRuleContext(0, QueryExpressionContext);
	}
	public lockClause(): LockClauseContext | undefined {
		return this.tryGetRuleContext(0, LockClauseContext);
	}
	constructor(ctx: SelectStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterParenthesisSelect) {
			listener.enterParenthesisSelect(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitParenthesisSelect) {
			listener.exitParenthesisSelect(this);
		}
	}
}
export class UnionSelectContext extends SelectStatementContext {
	public _unionType!: Token;
	public querySpecificationNointo(): QuerySpecificationNointoContext {
		return this.getRuleContext(0, QuerySpecificationNointoContext);
	}
	public unionStatement(): UnionStatementContext[];
	public unionStatement(i: number): UnionStatementContext;
	public unionStatement(i?: number): UnionStatementContext | UnionStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UnionStatementContext);
		} else {
			return this.getRuleContext(i, UnionStatementContext);
		}
	}
	public UNION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UNION, 0); }
	public orderByClause(): OrderByClauseContext | undefined {
		return this.tryGetRuleContext(0, OrderByClauseContext);
	}
	public limitClause(): LimitClauseContext | undefined {
		return this.tryGetRuleContext(0, LimitClauseContext);
	}
	public lockClause(): LockClauseContext | undefined {
		return this.tryGetRuleContext(0, LockClauseContext);
	}
	public querySpecification(): QuerySpecificationContext | undefined {
		return this.tryGetRuleContext(0, QuerySpecificationContext);
	}
	public queryExpression(): QueryExpressionContext | undefined {
		return this.tryGetRuleContext(0, QueryExpressionContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ALL, 0); }
	public DISTINCT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DISTINCT, 0); }
	constructor(ctx: SelectStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterUnionSelect) {
			listener.enterUnionSelect(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitUnionSelect) {
			listener.exitUnionSelect(this);
		}
	}
}
export class UnionParenthesisSelectContext extends SelectStatementContext {
	public _unionType!: Token;
	public queryExpressionNointo(): QueryExpressionNointoContext {
		return this.getRuleContext(0, QueryExpressionNointoContext);
	}
	public unionParenthesis(): UnionParenthesisContext[];
	public unionParenthesis(i: number): UnionParenthesisContext;
	public unionParenthesis(i?: number): UnionParenthesisContext | UnionParenthesisContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UnionParenthesisContext);
		} else {
			return this.getRuleContext(i, UnionParenthesisContext);
		}
	}
	public UNION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UNION, 0); }
	public queryExpression(): QueryExpressionContext | undefined {
		return this.tryGetRuleContext(0, QueryExpressionContext);
	}
	public orderByClause(): OrderByClauseContext | undefined {
		return this.tryGetRuleContext(0, OrderByClauseContext);
	}
	public limitClause(): LimitClauseContext | undefined {
		return this.tryGetRuleContext(0, LimitClauseContext);
	}
	public lockClause(): LockClauseContext | undefined {
		return this.tryGetRuleContext(0, LockClauseContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ALL, 0); }
	public DISTINCT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DISTINCT, 0); }
	constructor(ctx: SelectStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterUnionParenthesisSelect) {
			listener.enterUnionParenthesisSelect(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitUnionParenthesisSelect) {
			listener.exitUnionParenthesisSelect(this);
		}
	}
}
export class WithLateralStatementContext extends SelectStatementContext {
	public querySpecificationNointo(): QuerySpecificationNointoContext {
		return this.getRuleContext(0, QuerySpecificationNointoContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	public lateralStatement(): LateralStatementContext[];
	public lateralStatement(i: number): LateralStatementContext;
	public lateralStatement(i?: number): LateralStatementContext | LateralStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LateralStatementContext);
		} else {
			return this.getRuleContext(i, LateralStatementContext);
		}
	}
	constructor(ctx: SelectStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterWithLateralStatement) {
			listener.enterWithLateralStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitWithLateralStatement) {
			listener.exitWithLateralStatement(this);
		}
	}
}


export class UpdateStatementContext extends ParserRuleContext {
	public singleUpdateStatement(): SingleUpdateStatementContext | undefined {
		return this.tryGetRuleContext(0, SingleUpdateStatementContext);
	}
	public multipleUpdateStatement(): MultipleUpdateStatementContext | undefined {
		return this.tryGetRuleContext(0, MultipleUpdateStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_updateStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterUpdateStatement) {
			listener.enterUpdateStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitUpdateStatement) {
			listener.exitUpdateStatement(this);
		}
	}
}


export class ValuesStatementContext extends ParserRuleContext {
	public VALUES(): TerminalNode { return this.getToken(MariaDBParser.VALUES, 0); }
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.LR_BRACKET);
		} else {
			return this.getToken(MariaDBParser.LR_BRACKET, i);
		}
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.RR_BRACKET);
		} else {
			return this.getToken(MariaDBParser.RR_BRACKET, i);
		}
	}
	public expressionsWithDefaults(): ExpressionsWithDefaultsContext[];
	public expressionsWithDefaults(i: number): ExpressionsWithDefaultsContext;
	public expressionsWithDefaults(i?: number): ExpressionsWithDefaultsContext | ExpressionsWithDefaultsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionsWithDefaultsContext);
		} else {
			return this.getRuleContext(i, ExpressionsWithDefaultsContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_valuesStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterValuesStatement) {
			listener.enterValuesStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitValuesStatement) {
			listener.exitValuesStatement(this);
		}
	}
}


export class InsertStatementValueContext extends ParserRuleContext {
	public _insertFormat!: Token;
	public selectStatement(): SelectStatementContext | undefined {
		return this.tryGetRuleContext(0, SelectStatementContext);
	}
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.LR_BRACKET);
		} else {
			return this.getToken(MariaDBParser.LR_BRACKET, i);
		}
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.RR_BRACKET);
		} else {
			return this.getToken(MariaDBParser.RR_BRACKET, i);
		}
	}
	public VALUES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VALUES, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VALUE, 0); }
	public expressionsWithDefaults(): ExpressionsWithDefaultsContext[];
	public expressionsWithDefaults(i: number): ExpressionsWithDefaultsContext;
	public expressionsWithDefaults(i?: number): ExpressionsWithDefaultsContext | ExpressionsWithDefaultsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionsWithDefaultsContext);
		} else {
			return this.getRuleContext(i, ExpressionsWithDefaultsContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_insertStatementValue; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterInsertStatementValue) {
			listener.enterInsertStatementValue(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitInsertStatementValue) {
			listener.exitInsertStatementValue(this);
		}
	}
}


export class UpdatedElementContext extends ParserRuleContext {
	public fullColumnName(): FullColumnNameContext {
		return this.getRuleContext(0, FullColumnNameContext);
	}
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DEFAULT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_updatedElement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterUpdatedElement) {
			listener.enterUpdatedElement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitUpdatedElement) {
			listener.exitUpdatedElement(this);
		}
	}
}


export class AssignmentFieldContext extends ParserRuleContext {
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOCAL_ID, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_assignmentField; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAssignmentField) {
			listener.enterAssignmentField(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAssignmentField) {
			listener.exitAssignmentField(this);
		}
	}
}


export class LockClauseContext extends ParserRuleContext {
	public FOR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FOR, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UPDATE, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOCK, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.IN, 0); }
	public SHARE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SHARE, 0); }
	public MODE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MODE, 0); }
	public lockOption(): LockOptionContext | undefined {
		return this.tryGetRuleContext(0, LockOptionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_lockClause; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterLockClause) {
			listener.enterLockClause(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitLockClause) {
			listener.exitLockClause(this);
		}
	}
}


export class SingleDeleteStatementContext extends ParserRuleContext {
	public _priority!: Token;
	public DELETE(): TerminalNode { return this.getToken(MariaDBParser.DELETE, 0); }
	public FROM(): TerminalNode { return this.getToken(MariaDBParser.FROM, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public QUICK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.QUICK, 0); }
	public IGNORE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.IGNORE, 0); }
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PARTITION, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LR_BRACKET, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RR_BRACKET, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public orderByClause(): OrderByClauseContext | undefined {
		return this.tryGetRuleContext(0, OrderByClauseContext);
	}
	public LIMIT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LIMIT, 0); }
	public limitClauseAtom(): LimitClauseAtomContext | undefined {
		return this.tryGetRuleContext(0, LimitClauseAtomContext);
	}
	public LOW_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOW_PRIORITY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_singleDeleteStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSingleDeleteStatement) {
			listener.enterSingleDeleteStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSingleDeleteStatement) {
			listener.exitSingleDeleteStatement(this);
		}
	}
}


export class MultipleDeleteStatementContext extends ParserRuleContext {
	public _priority!: Token;
	public DELETE(): TerminalNode { return this.getToken(MariaDBParser.DELETE, 0); }
	public tableName(): TableNameContext[];
	public tableName(i: number): TableNameContext;
	public tableName(i?: number): TableNameContext | TableNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableNameContext);
		} else {
			return this.getRuleContext(i, TableNameContext);
		}
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FROM, 0); }
	public tableSources(): TableSourcesContext | undefined {
		return this.tryGetRuleContext(0, TableSourcesContext);
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.USING, 0); }
	public QUICK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.QUICK, 0); }
	public IGNORE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.IGNORE, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public LOW_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOW_PRIORITY, 0); }
	public DOT(): TerminalNode[];
	public DOT(i: number): TerminalNode;
	public DOT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.DOT);
		} else {
			return this.getToken(MariaDBParser.DOT, i);
		}
	}
	public STAR(): TerminalNode[];
	public STAR(i: number): TerminalNode;
	public STAR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.STAR);
		} else {
			return this.getToken(MariaDBParser.STAR, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_multipleDeleteStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterMultipleDeleteStatement) {
			listener.enterMultipleDeleteStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitMultipleDeleteStatement) {
			listener.exitMultipleDeleteStatement(this);
		}
	}
}


export class HandlerOpenStatementContext extends ParserRuleContext {
	public HANDLER(): TerminalNode { return this.getToken(MariaDBParser.HANDLER, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public OPEN(): TerminalNode { return this.getToken(MariaDBParser.OPEN, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_handlerOpenStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterHandlerOpenStatement) {
			listener.enterHandlerOpenStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitHandlerOpenStatement) {
			listener.exitHandlerOpenStatement(this);
		}
	}
}


export class HandlerReadIndexStatementContext extends ParserRuleContext {
	public _index!: UidContext;
	public _moveOrder!: Token;
	public HANDLER(): TerminalNode { return this.getToken(MariaDBParser.HANDLER, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public READ(): TerminalNode { return this.getToken(MariaDBParser.READ, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public comparisonOperator(): ComparisonOperatorContext | undefined {
		return this.tryGetRuleContext(0, ComparisonOperatorContext);
	}
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LR_BRACKET, 0); }
	public constants(): ConstantsContext | undefined {
		return this.tryGetRuleContext(0, ConstantsContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RR_BRACKET, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public LIMIT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LIMIT, 0); }
	public limitClauseAtom(): LimitClauseAtomContext | undefined {
		return this.tryGetRuleContext(0, LimitClauseAtomContext);
	}
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FIRST, 0); }
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NEXT, 0); }
	public PREV(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PREV, 0); }
	public LAST(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LAST, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_handlerReadIndexStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterHandlerReadIndexStatement) {
			listener.enterHandlerReadIndexStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitHandlerReadIndexStatement) {
			listener.exitHandlerReadIndexStatement(this);
		}
	}
}


export class HandlerReadStatementContext extends ParserRuleContext {
	public _moveOrder!: Token;
	public HANDLER(): TerminalNode { return this.getToken(MariaDBParser.HANDLER, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public READ(): TerminalNode { return this.getToken(MariaDBParser.READ, 0); }
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FIRST, 0); }
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NEXT, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public LIMIT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LIMIT, 0); }
	public limitClauseAtom(): LimitClauseAtomContext | undefined {
		return this.tryGetRuleContext(0, LimitClauseAtomContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_handlerReadStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterHandlerReadStatement) {
			listener.enterHandlerReadStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitHandlerReadStatement) {
			listener.exitHandlerReadStatement(this);
		}
	}
}


export class HandlerCloseStatementContext extends ParserRuleContext {
	public HANDLER(): TerminalNode { return this.getToken(MariaDBParser.HANDLER, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public CLOSE(): TerminalNode { return this.getToken(MariaDBParser.CLOSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_handlerCloseStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterHandlerCloseStatement) {
			listener.enterHandlerCloseStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitHandlerCloseStatement) {
			listener.exitHandlerCloseStatement(this);
		}
	}
}


export class SingleUpdateStatementContext extends ParserRuleContext {
	public _priority!: Token;
	public UPDATE(): TerminalNode { return this.getToken(MariaDBParser.UPDATE, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public SET(): TerminalNode { return this.getToken(MariaDBParser.SET, 0); }
	public updatedElement(): UpdatedElementContext[];
	public updatedElement(i: number): UpdatedElementContext;
	public updatedElement(i?: number): UpdatedElementContext | UpdatedElementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UpdatedElementContext);
		} else {
			return this.getRuleContext(i, UpdatedElementContext);
		}
	}
	public IGNORE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.IGNORE, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public orderByClause(): OrderByClauseContext | undefined {
		return this.tryGetRuleContext(0, OrderByClauseContext);
	}
	public limitClause(): LimitClauseContext | undefined {
		return this.tryGetRuleContext(0, LimitClauseContext);
	}
	public LOW_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOW_PRIORITY, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_singleUpdateStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSingleUpdateStatement) {
			listener.enterSingleUpdateStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSingleUpdateStatement) {
			listener.exitSingleUpdateStatement(this);
		}
	}
}


export class MultipleUpdateStatementContext extends ParserRuleContext {
	public _priority!: Token;
	public UPDATE(): TerminalNode { return this.getToken(MariaDBParser.UPDATE, 0); }
	public tableSources(): TableSourcesContext {
		return this.getRuleContext(0, TableSourcesContext);
	}
	public SET(): TerminalNode { return this.getToken(MariaDBParser.SET, 0); }
	public updatedElement(): UpdatedElementContext[];
	public updatedElement(i: number): UpdatedElementContext;
	public updatedElement(i?: number): UpdatedElementContext | UpdatedElementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UpdatedElementContext);
		} else {
			return this.getRuleContext(i, UpdatedElementContext);
		}
	}
	public IGNORE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.IGNORE, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public LOW_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOW_PRIORITY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_multipleUpdateStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterMultipleUpdateStatement) {
			listener.enterMultipleUpdateStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitMultipleUpdateStatement) {
			listener.exitMultipleUpdateStatement(this);
		}
	}
}


export class OrderByClauseContext extends ParserRuleContext {
	public ORDER(): TerminalNode { return this.getToken(MariaDBParser.ORDER, 0); }
	public BY(): TerminalNode { return this.getToken(MariaDBParser.BY, 0); }
	public orderByExpression(): OrderByExpressionContext[];
	public orderByExpression(i: number): OrderByExpressionContext;
	public orderByExpression(i?: number): OrderByExpressionContext | OrderByExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(OrderByExpressionContext);
		} else {
			return this.getRuleContext(i, OrderByExpressionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_orderByClause; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterOrderByClause) {
			listener.enterOrderByClause(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitOrderByClause) {
			listener.exitOrderByClause(this);
		}
	}
}


export class OrderByExpressionContext extends ParserRuleContext {
	public _order!: Token;
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public ASC(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ASC, 0); }
	public DESC(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DESC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_orderByExpression; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterOrderByExpression) {
			listener.enterOrderByExpression(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitOrderByExpression) {
			listener.exitOrderByExpression(this);
		}
	}
}


export class TableSourcesContext extends ParserRuleContext {
	public tableSource(): TableSourceContext[];
	public tableSource(i: number): TableSourceContext;
	public tableSource(i?: number): TableSourceContext | TableSourceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableSourceContext);
		} else {
			return this.getRuleContext(i, TableSourceContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_tableSources; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableSources) {
			listener.enterTableSources(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableSources) {
			listener.exitTableSources(this);
		}
	}
}


export class TableSourceContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_tableSource; }
	public copyFrom(ctx: TableSourceContext): void {
		super.copyFrom(ctx);
	}
}
export class TableSourceBaseContext extends TableSourceContext {
	public tableSourceItem(): TableSourceItemContext {
		return this.getRuleContext(0, TableSourceItemContext);
	}
	public joinPart(): JoinPartContext[];
	public joinPart(i: number): JoinPartContext;
	public joinPart(i?: number): JoinPartContext | JoinPartContext[] {
		if (i === undefined) {
			return this.getRuleContexts(JoinPartContext);
		} else {
			return this.getRuleContext(i, JoinPartContext);
		}
	}
	constructor(ctx: TableSourceContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableSourceBase) {
			listener.enterTableSourceBase(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableSourceBase) {
			listener.exitTableSourceBase(this);
		}
	}
}
export class TableSourceNestedContext extends TableSourceContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public tableSourceItem(): TableSourceItemContext {
		return this.getRuleContext(0, TableSourceItemContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public joinPart(): JoinPartContext[];
	public joinPart(i: number): JoinPartContext;
	public joinPart(i?: number): JoinPartContext | JoinPartContext[] {
		if (i === undefined) {
			return this.getRuleContexts(JoinPartContext);
		} else {
			return this.getRuleContext(i, JoinPartContext);
		}
	}
	constructor(ctx: TableSourceContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableSourceNested) {
			listener.enterTableSourceNested(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableSourceNested) {
			listener.exitTableSourceNested(this);
		}
	}
}
export class TableJsonContext extends TableSourceContext {
	public jsonTable(): JsonTableContext {
		return this.getRuleContext(0, JsonTableContext);
	}
	constructor(ctx: TableSourceContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableJson) {
			listener.enterTableJson(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableJson) {
			listener.exitTableJson(this);
		}
	}
}


export class TableSourceItemContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_tableSourceItem; }
	public copyFrom(ctx: TableSourceItemContext): void {
		super.copyFrom(ctx);
	}
}
export class AtomTableItemContext extends TableSourceItemContext {
	public _alias!: UidContext;
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PARTITION, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LR_BRACKET, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RR_BRACKET, 0); }
	public indexHint(): IndexHintContext[];
	public indexHint(i: number): IndexHintContext;
	public indexHint(i?: number): IndexHintContext | IndexHintContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexHintContext);
		} else {
			return this.getRuleContext(i, IndexHintContext);
		}
	}
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AS, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(ctx: TableSourceItemContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAtomTableItem) {
			listener.enterAtomTableItem(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAtomTableItem) {
			listener.exitAtomTableItem(this);
		}
	}
}
export class SubqueryTableItemContext extends TableSourceItemContext {
	public _parenthesisSubquery!: SelectStatementContext;
	public _alias!: UidContext;
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public selectStatement(): SelectStatementContext | undefined {
		return this.tryGetRuleContext(0, SelectStatementContext);
	}
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RR_BRACKET, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AS, 0); }
	constructor(ctx: TableSourceItemContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSubqueryTableItem) {
			listener.enterSubqueryTableItem(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSubqueryTableItem) {
			listener.exitSubqueryTableItem(this);
		}
	}
}
export class TableSourcesItemContext extends TableSourceItemContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public tableSources(): TableSourcesContext {
		return this.getRuleContext(0, TableSourcesContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	constructor(ctx: TableSourceItemContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableSourcesItem) {
			listener.enterTableSourcesItem(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableSourcesItem) {
			listener.exitTableSourcesItem(this);
		}
	}
}


export class IndexHintContext extends ParserRuleContext {
	public _indexHintAction!: Token;
	public _keyFormat!: Token;
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public uidList(): UidListContext {
		return this.getRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public USE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.USE, 0); }
	public IGNORE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.IGNORE, 0); }
	public FORCE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FORCE, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INDEX, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.KEY, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FOR, 0); }
	public indexHintType(): IndexHintTypeContext | undefined {
		return this.tryGetRuleContext(0, IndexHintTypeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_indexHint; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterIndexHint) {
			listener.enterIndexHint(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitIndexHint) {
			listener.exitIndexHint(this);
		}
	}
}


export class IndexHintTypeContext extends ParserRuleContext {
	public JOIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JOIN, 0); }
	public ORDER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ORDER, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BY, 0); }
	public GROUP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GROUP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_indexHintType; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterIndexHintType) {
			listener.enterIndexHintType(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitIndexHintType) {
			listener.exitIndexHintType(this);
		}
	}
}


export class JoinPartContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_joinPart; }
	public copyFrom(ctx: JoinPartContext): void {
		super.copyFrom(ctx);
	}
}
export class InnerJoinContext extends JoinPartContext {
	public JOIN(): TerminalNode { return this.getToken(MariaDBParser.JOIN, 0); }
	public tableSourceItem(): TableSourceItemContext {
		return this.getRuleContext(0, TableSourceItemContext);
	}
	public LATERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LATERAL, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ON, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.USING, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LR_BRACKET, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RR_BRACKET, 0); }
	public INNER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INNER, 0); }
	public CROSS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CROSS, 0); }
	constructor(ctx: JoinPartContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterInnerJoin) {
			listener.enterInnerJoin(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitInnerJoin) {
			listener.exitInnerJoin(this);
		}
	}
}
export class StraightJoinContext extends JoinPartContext {
	public STRAIGHT_JOIN(): TerminalNode { return this.getToken(MariaDBParser.STRAIGHT_JOIN, 0); }
	public tableSourceItem(): TableSourceItemContext {
		return this.getRuleContext(0, TableSourceItemContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ON, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(ctx: JoinPartContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterStraightJoin) {
			listener.enterStraightJoin(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitStraightJoin) {
			listener.exitStraightJoin(this);
		}
	}
}
export class OuterJoinContext extends JoinPartContext {
	public JOIN(): TerminalNode { return this.getToken(MariaDBParser.JOIN, 0); }
	public tableSourceItem(): TableSourceItemContext {
		return this.getRuleContext(0, TableSourceItemContext);
	}
	public LEFT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LEFT, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RIGHT, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ON, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.USING, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LR_BRACKET, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RR_BRACKET, 0); }
	public OUTER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.OUTER, 0); }
	public LATERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LATERAL, 0); }
	constructor(ctx: JoinPartContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterOuterJoin) {
			listener.enterOuterJoin(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitOuterJoin) {
			listener.exitOuterJoin(this);
		}
	}
}
export class NaturalJoinContext extends JoinPartContext {
	public NATURAL(): TerminalNode { return this.getToken(MariaDBParser.NATURAL, 0); }
	public JOIN(): TerminalNode { return this.getToken(MariaDBParser.JOIN, 0); }
	public tableSourceItem(): TableSourceItemContext {
		return this.getRuleContext(0, TableSourceItemContext);
	}
	public LEFT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LEFT, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RIGHT, 0); }
	public OUTER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.OUTER, 0); }
	constructor(ctx: JoinPartContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterNaturalJoin) {
			listener.enterNaturalJoin(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitNaturalJoin) {
			listener.exitNaturalJoin(this);
		}
	}
}


export class QueryExpressionContext extends ParserRuleContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public querySpecification(): QuerySpecificationContext | undefined {
		return this.tryGetRuleContext(0, QuerySpecificationContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public queryExpression(): QueryExpressionContext | undefined {
		return this.tryGetRuleContext(0, QueryExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_queryExpression; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterQueryExpression) {
			listener.enterQueryExpression(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitQueryExpression) {
			listener.exitQueryExpression(this);
		}
	}
}


export class QueryExpressionNointoContext extends ParserRuleContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public querySpecificationNointo(): QuerySpecificationNointoContext | undefined {
		return this.tryGetRuleContext(0, QuerySpecificationNointoContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public queryExpressionNointo(): QueryExpressionNointoContext | undefined {
		return this.tryGetRuleContext(0, QueryExpressionNointoContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_queryExpressionNointo; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterQueryExpressionNointo) {
			listener.enterQueryExpressionNointo(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitQueryExpressionNointo) {
			listener.exitQueryExpressionNointo(this);
		}
	}
}


export class QuerySpecificationContext extends ParserRuleContext {
	public SELECT(): TerminalNode { return this.getToken(MariaDBParser.SELECT, 0); }
	public selectElements(): SelectElementsContext {
		return this.getRuleContext(0, SelectElementsContext);
	}
	public selectSpec(): SelectSpecContext[];
	public selectSpec(i: number): SelectSpecContext;
	public selectSpec(i?: number): SelectSpecContext | SelectSpecContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectSpecContext);
		} else {
			return this.getRuleContext(i, SelectSpecContext);
		}
	}
	public selectIntoExpression(): SelectIntoExpressionContext | undefined {
		return this.tryGetRuleContext(0, SelectIntoExpressionContext);
	}
	public fromClause(): FromClauseContext | undefined {
		return this.tryGetRuleContext(0, FromClauseContext);
	}
	public groupByClause(): GroupByClauseContext | undefined {
		return this.tryGetRuleContext(0, GroupByClauseContext);
	}
	public havingClause(): HavingClauseContext | undefined {
		return this.tryGetRuleContext(0, HavingClauseContext);
	}
	public windowClause(): WindowClauseContext | undefined {
		return this.tryGetRuleContext(0, WindowClauseContext);
	}
	public orderByClause(): OrderByClauseContext | undefined {
		return this.tryGetRuleContext(0, OrderByClauseContext);
	}
	public limitClause(): LimitClauseContext | undefined {
		return this.tryGetRuleContext(0, LimitClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_querySpecification; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterQuerySpecification) {
			listener.enterQuerySpecification(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitQuerySpecification) {
			listener.exitQuerySpecification(this);
		}
	}
}


export class QuerySpecificationNointoContext extends ParserRuleContext {
	public SELECT(): TerminalNode { return this.getToken(MariaDBParser.SELECT, 0); }
	public selectElements(): SelectElementsContext {
		return this.getRuleContext(0, SelectElementsContext);
	}
	public selectSpec(): SelectSpecContext[];
	public selectSpec(i: number): SelectSpecContext;
	public selectSpec(i?: number): SelectSpecContext | SelectSpecContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectSpecContext);
		} else {
			return this.getRuleContext(i, SelectSpecContext);
		}
	}
	public fromClause(): FromClauseContext | undefined {
		return this.tryGetRuleContext(0, FromClauseContext);
	}
	public groupByClause(): GroupByClauseContext | undefined {
		return this.tryGetRuleContext(0, GroupByClauseContext);
	}
	public havingClause(): HavingClauseContext | undefined {
		return this.tryGetRuleContext(0, HavingClauseContext);
	}
	public windowClause(): WindowClauseContext | undefined {
		return this.tryGetRuleContext(0, WindowClauseContext);
	}
	public orderByClause(): OrderByClauseContext | undefined {
		return this.tryGetRuleContext(0, OrderByClauseContext);
	}
	public limitClause(): LimitClauseContext | undefined {
		return this.tryGetRuleContext(0, LimitClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_querySpecificationNointo; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterQuerySpecificationNointo) {
			listener.enterQuerySpecificationNointo(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitQuerySpecificationNointo) {
			listener.exitQuerySpecificationNointo(this);
		}
	}
}


export class UnionParenthesisContext extends ParserRuleContext {
	public _unionType!: Token;
	public UNION(): TerminalNode { return this.getToken(MariaDBParser.UNION, 0); }
	public queryExpressionNointo(): QueryExpressionNointoContext {
		return this.getRuleContext(0, QueryExpressionNointoContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ALL, 0); }
	public DISTINCT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DISTINCT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_unionParenthesis; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterUnionParenthesis) {
			listener.enterUnionParenthesis(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitUnionParenthesis) {
			listener.exitUnionParenthesis(this);
		}
	}
}


export class UnionStatementContext extends ParserRuleContext {
	public _unionType!: Token;
	public UNION(): TerminalNode { return this.getToken(MariaDBParser.UNION, 0); }
	public querySpecificationNointo(): QuerySpecificationNointoContext | undefined {
		return this.tryGetRuleContext(0, QuerySpecificationNointoContext);
	}
	public queryExpressionNointo(): QueryExpressionNointoContext | undefined {
		return this.tryGetRuleContext(0, QueryExpressionNointoContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ALL, 0); }
	public DISTINCT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DISTINCT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_unionStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterUnionStatement) {
			listener.enterUnionStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitUnionStatement) {
			listener.exitUnionStatement(this);
		}
	}
}


export class LateralStatementContext extends ParserRuleContext {
	public LATERAL(): TerminalNode { return this.getToken(MariaDBParser.LATERAL, 0); }
	public querySpecificationNointo(): QuerySpecificationNointoContext | undefined {
		return this.tryGetRuleContext(0, QuerySpecificationNointoContext);
	}
	public queryExpressionNointo(): QueryExpressionNointoContext | undefined {
		return this.tryGetRuleContext(0, QueryExpressionNointoContext);
	}
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RR_BRACKET, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_lateralStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterLateralStatement) {
			listener.enterLateralStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitLateralStatement) {
			listener.exitLateralStatement(this);
		}
	}
}


export class JsonTableContext extends ParserRuleContext {
	public JSON_TABLE(): TerminalNode { return this.getToken(MariaDBParser.JSON_TABLE, 0); }
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.LR_BRACKET);
		} else {
			return this.getToken(MariaDBParser.LR_BRACKET, i);
		}
	}
	public STRING_LITERAL(): TerminalNode[];
	public STRING_LITERAL(i: number): TerminalNode;
	public STRING_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.STRING_LITERAL);
		} else {
			return this.getToken(MariaDBParser.STRING_LITERAL, i);
		}
	}
	public COMMA(): TerminalNode { return this.getToken(MariaDBParser.COMMA, 0); }
	public COLUMNS(): TerminalNode { return this.getToken(MariaDBParser.COLUMNS, 0); }
	public jsonColumnList(): JsonColumnListContext {
		return this.getRuleContext(0, JsonColumnListContext);
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.RR_BRACKET);
		} else {
			return this.getToken(MariaDBParser.RR_BRACKET, i);
		}
	}
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_jsonTable; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterJsonTable) {
			listener.enterJsonTable(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitJsonTable) {
			listener.exitJsonTable(this);
		}
	}
}


export class JsonColumnListContext extends ParserRuleContext {
	public jsonColumn(): JsonColumnContext[];
	public jsonColumn(i: number): JsonColumnContext;
	public jsonColumn(i?: number): JsonColumnContext | JsonColumnContext[] {
		if (i === undefined) {
			return this.getRuleContexts(JsonColumnContext);
		} else {
			return this.getRuleContext(i, JsonColumnContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_jsonColumnList; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterJsonColumnList) {
			listener.enterJsonColumnList(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitJsonColumnList) {
			listener.exitJsonColumnList(this);
		}
	}
}


export class JsonColumnContext extends ParserRuleContext {
	public fullColumnName(): FullColumnNameContext | undefined {
		return this.tryGetRuleContext(0, FullColumnNameContext);
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FOR, 0); }
	public ORDINALITY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ORDINALITY, 0); }
	public dataType(): DataTypeContext | undefined {
		return this.tryGetRuleContext(0, DataTypeContext);
	}
	public PATH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PATH, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_LITERAL, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EXISTS, 0); }
	public jsonOnEmpty(): JsonOnEmptyContext | undefined {
		return this.tryGetRuleContext(0, JsonOnEmptyContext);
	}
	public jsonOnError(): JsonOnErrorContext | undefined {
		return this.tryGetRuleContext(0, JsonOnErrorContext);
	}
	public NESTED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NESTED, 0); }
	public COLUMNS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COLUMNS, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LR_BRACKET, 0); }
	public jsonColumnList(): JsonColumnListContext | undefined {
		return this.tryGetRuleContext(0, JsonColumnListContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RR_BRACKET, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_jsonColumn; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterJsonColumn) {
			listener.enterJsonColumn(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitJsonColumn) {
			listener.exitJsonColumn(this);
		}
	}
}


export class JsonOnEmptyContext extends ParserRuleContext {
	public ON(): TerminalNode { return this.getToken(MariaDBParser.ON, 0); }
	public EMPTY(): TerminalNode { return this.getToken(MariaDBParser.EMPTY, 0); }
	public NULL_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NULL_LITERAL, 0); }
	public ERROR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ERROR, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DEFAULT, 0); }
	public defaultValue(): DefaultValueContext | undefined {
		return this.tryGetRuleContext(0, DefaultValueContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_jsonOnEmpty; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterJsonOnEmpty) {
			listener.enterJsonOnEmpty(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitJsonOnEmpty) {
			listener.exitJsonOnEmpty(this);
		}
	}
}


export class JsonOnErrorContext extends ParserRuleContext {
	public ON(): TerminalNode { return this.getToken(MariaDBParser.ON, 0); }
	public ERROR(): TerminalNode[];
	public ERROR(i: number): TerminalNode;
	public ERROR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.ERROR);
		} else {
			return this.getToken(MariaDBParser.ERROR, i);
		}
	}
	public NULL_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NULL_LITERAL, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DEFAULT, 0); }
	public defaultValue(): DefaultValueContext | undefined {
		return this.tryGetRuleContext(0, DefaultValueContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_jsonOnError; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterJsonOnError) {
			listener.enterJsonOnError(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitJsonOnError) {
			listener.exitJsonOnError(this);
		}
	}
}


export class SelectSpecContext extends ParserRuleContext {
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ALL, 0); }
	public DISTINCT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DISTINCT, 0); }
	public DISTINCTROW(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DISTINCTROW, 0); }
	public HIGH_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.HIGH_PRIORITY, 0); }
	public STRAIGHT_JOIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRAIGHT_JOIN, 0); }
	public SQL_SMALL_RESULT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SQL_SMALL_RESULT, 0); }
	public SQL_BIG_RESULT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SQL_BIG_RESULT, 0); }
	public SQL_BUFFER_RESULT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SQL_BUFFER_RESULT, 0); }
	public SQL_CACHE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SQL_CACHE, 0); }
	public SQL_NO_CACHE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SQL_NO_CACHE, 0); }
	public SQL_CALC_FOUND_ROWS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SQL_CALC_FOUND_ROWS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_selectSpec; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSelectSpec) {
			listener.enterSelectSpec(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSelectSpec) {
			listener.exitSelectSpec(this);
		}
	}
}


export class SelectElementsContext extends ParserRuleContext {
	public _star!: Token;
	public selectElement(): SelectElementContext[];
	public selectElement(i: number): SelectElementContext;
	public selectElement(i?: number): SelectElementContext | SelectElementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectElementContext);
		} else {
			return this.getRuleContext(i, SelectElementContext);
		}
	}
	public STAR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STAR, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_selectElements; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSelectElements) {
			listener.enterSelectElements(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSelectElements) {
			listener.exitSelectElements(this);
		}
	}
}


export class SelectElementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_selectElement; }
	public copyFrom(ctx: SelectElementContext): void {
		super.copyFrom(ctx);
	}
}
export class SelectStarElementContext extends SelectElementContext {
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public DOT(): TerminalNode { return this.getToken(MariaDBParser.DOT, 0); }
	public STAR(): TerminalNode { return this.getToken(MariaDBParser.STAR, 0); }
	constructor(ctx: SelectElementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSelectStarElement) {
			listener.enterSelectStarElement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSelectStarElement) {
			listener.exitSelectStarElement(this);
		}
	}
}
export class SelectColumnElementContext extends SelectElementContext {
	public fullColumnName(): FullColumnNameContext {
		return this.getRuleContext(0, FullColumnNameContext);
	}
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AS, 0); }
	constructor(ctx: SelectElementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSelectColumnElement) {
			listener.enterSelectColumnElement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSelectColumnElement) {
			listener.exitSelectColumnElement(this);
		}
	}
}
export class SelectFunctionElementContext extends SelectElementContext {
	public functionCall(): FunctionCallContext {
		return this.getRuleContext(0, FunctionCallContext);
	}
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AS, 0); }
	constructor(ctx: SelectElementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSelectFunctionElement) {
			listener.enterSelectFunctionElement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSelectFunctionElement) {
			listener.exitSelectFunctionElement(this);
		}
	}
}
export class SelectExpressionElementContext extends SelectElementContext {
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOCAL_ID, 0); }
	public VAR_ASSIGN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VAR_ASSIGN, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AS, 0); }
	constructor(ctx: SelectElementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSelectExpressionElement) {
			listener.enterSelectExpressionElement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSelectExpressionElement) {
			listener.exitSelectExpressionElement(this);
		}
	}
}


export class SelectIntoExpressionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_selectIntoExpression; }
	public copyFrom(ctx: SelectIntoExpressionContext): void {
		super.copyFrom(ctx);
	}
}
export class SelectIntoVariablesContext extends SelectIntoExpressionContext {
	public INTO(): TerminalNode { return this.getToken(MariaDBParser.INTO, 0); }
	public assignmentField(): AssignmentFieldContext[];
	public assignmentField(i: number): AssignmentFieldContext;
	public assignmentField(i?: number): AssignmentFieldContext | AssignmentFieldContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AssignmentFieldContext);
		} else {
			return this.getRuleContext(i, AssignmentFieldContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(ctx: SelectIntoExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSelectIntoVariables) {
			listener.enterSelectIntoVariables(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSelectIntoVariables) {
			listener.exitSelectIntoVariables(this);
		}
	}
}
export class SelectIntoDumpFileContext extends SelectIntoExpressionContext {
	public INTO(): TerminalNode { return this.getToken(MariaDBParser.INTO, 0); }
	public DUMPFILE(): TerminalNode { return this.getToken(MariaDBParser.DUMPFILE, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.STRING_LITERAL, 0); }
	constructor(ctx: SelectIntoExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSelectIntoDumpFile) {
			listener.enterSelectIntoDumpFile(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSelectIntoDumpFile) {
			listener.exitSelectIntoDumpFile(this);
		}
	}
}
export class SelectIntoTextFileContext extends SelectIntoExpressionContext {
	public _filename!: Token;
	public _charset!: CharsetNameContext;
	public _fieldsFormat!: Token;
	public INTO(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INTO, 0); }
	public OUTFILE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.OUTFILE, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_LITERAL, 0); }
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CHARACTER, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SET, 0); }
	public LINES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LINES, 0); }
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public FIELDS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FIELDS, 0); }
	public COLUMNS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COLUMNS, 0); }
	public selectFieldsInto(): SelectFieldsIntoContext[];
	public selectFieldsInto(i: number): SelectFieldsIntoContext;
	public selectFieldsInto(i?: number): SelectFieldsIntoContext | SelectFieldsIntoContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectFieldsIntoContext);
		} else {
			return this.getRuleContext(i, SelectFieldsIntoContext);
		}
	}
	public selectLinesInto(): SelectLinesIntoContext[];
	public selectLinesInto(i: number): SelectLinesIntoContext;
	public selectLinesInto(i?: number): SelectLinesIntoContext | SelectLinesIntoContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectLinesIntoContext);
		} else {
			return this.getRuleContext(i, SelectLinesIntoContext);
		}
	}
	constructor(ctx: SelectIntoExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSelectIntoTextFile) {
			listener.enterSelectIntoTextFile(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSelectIntoTextFile) {
			listener.exitSelectIntoTextFile(this);
		}
	}
}


export class SelectFieldsIntoContext extends ParserRuleContext {
	public _terminationField!: Token;
	public _enclosion!: Token;
	public _escaping!: Token;
	public TERMINATED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TERMINATED, 0); }
	public BY(): TerminalNode { return this.getToken(MariaDBParser.BY, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.STRING_LITERAL, 0); }
	public ENCLOSED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ENCLOSED, 0); }
	public OPTIONALLY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.OPTIONALLY, 0); }
	public ESCAPED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ESCAPED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_selectFieldsInto; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSelectFieldsInto) {
			listener.enterSelectFieldsInto(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSelectFieldsInto) {
			listener.exitSelectFieldsInto(this);
		}
	}
}


export class SelectLinesIntoContext extends ParserRuleContext {
	public _starting!: Token;
	public _terminationLine!: Token;
	public STARTING(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STARTING, 0); }
	public BY(): TerminalNode { return this.getToken(MariaDBParser.BY, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.STRING_LITERAL, 0); }
	public TERMINATED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TERMINATED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_selectLinesInto; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSelectLinesInto) {
			listener.enterSelectLinesInto(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSelectLinesInto) {
			listener.exitSelectLinesInto(this);
		}
	}
}


export class FromClauseContext extends ParserRuleContext {
	public _whereExpr!: ExpressionContext;
	public FROM(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FROM, 0); }
	public tableSources(): TableSourcesContext | undefined {
		return this.tryGetRuleContext(0, TableSourcesContext);
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_fromClause; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterFromClause) {
			listener.enterFromClause(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitFromClause) {
			listener.exitFromClause(this);
		}
	}
}


export class GroupByClauseContext extends ParserRuleContext {
	public GROUP(): TerminalNode { return this.getToken(MariaDBParser.GROUP, 0); }
	public BY(): TerminalNode { return this.getToken(MariaDBParser.BY, 0); }
	public groupByItem(): GroupByItemContext[];
	public groupByItem(i: number): GroupByItemContext;
	public groupByItem(i?: number): GroupByItemContext | GroupByItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(GroupByItemContext);
		} else {
			return this.getRuleContext(i, GroupByItemContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WITH, 0); }
	public ROLLUP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ROLLUP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_groupByClause; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterGroupByClause) {
			listener.enterGroupByClause(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitGroupByClause) {
			listener.exitGroupByClause(this);
		}
	}
}


export class HavingClauseContext extends ParserRuleContext {
	public _havingExpr!: ExpressionContext;
	public HAVING(): TerminalNode { return this.getToken(MariaDBParser.HAVING, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_havingClause; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterHavingClause) {
			listener.enterHavingClause(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitHavingClause) {
			listener.exitHavingClause(this);
		}
	}
}


export class WindowClauseContext extends ParserRuleContext {
	public WINDOW(): TerminalNode { return this.getToken(MariaDBParser.WINDOW, 0); }
	public windowName(): WindowNameContext[];
	public windowName(i: number): WindowNameContext;
	public windowName(i?: number): WindowNameContext | WindowNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(WindowNameContext);
		} else {
			return this.getRuleContext(i, WindowNameContext);
		}
	}
	public AS(): TerminalNode[];
	public AS(i: number): TerminalNode;
	public AS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.AS);
		} else {
			return this.getToken(MariaDBParser.AS, i);
		}
	}
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.LR_BRACKET);
		} else {
			return this.getToken(MariaDBParser.LR_BRACKET, i);
		}
	}
	public windowSpec(): WindowSpecContext[];
	public windowSpec(i: number): WindowSpecContext;
	public windowSpec(i?: number): WindowSpecContext | WindowSpecContext[] {
		if (i === undefined) {
			return this.getRuleContexts(WindowSpecContext);
		} else {
			return this.getRuleContext(i, WindowSpecContext);
		}
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.RR_BRACKET);
		} else {
			return this.getToken(MariaDBParser.RR_BRACKET, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_windowClause; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterWindowClause) {
			listener.enterWindowClause(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitWindowClause) {
			listener.exitWindowClause(this);
		}
	}
}


export class GroupByItemContext extends ParserRuleContext {
	public _order!: Token;
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public ASC(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ASC, 0); }
	public DESC(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DESC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_groupByItem; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterGroupByItem) {
			listener.enterGroupByItem(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitGroupByItem) {
			listener.exitGroupByItem(this);
		}
	}
}


export class LimitClauseContext extends ParserRuleContext {
	public _offset!: LimitClauseAtomContext;
	public _limit!: LimitClauseAtomContext;
	public LIMIT(): TerminalNode { return this.getToken(MariaDBParser.LIMIT, 0); }
	public OFFSET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.OFFSET, 0); }
	public limitClauseAtom(): LimitClauseAtomContext[];
	public limitClauseAtom(i: number): LimitClauseAtomContext;
	public limitClauseAtom(i?: number): LimitClauseAtomContext | LimitClauseAtomContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LimitClauseAtomContext);
		} else {
			return this.getRuleContext(i, LimitClauseAtomContext);
		}
	}
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COMMA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_limitClause; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterLimitClause) {
			listener.enterLimitClause(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitLimitClause) {
			listener.exitLimitClause(this);
		}
	}
}


export class LimitClauseAtomContext extends ParserRuleContext {
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public mysqlVariable(): MysqlVariableContext | undefined {
		return this.tryGetRuleContext(0, MysqlVariableContext);
	}
	public simpleId(): SimpleIdContext | undefined {
		return this.tryGetRuleContext(0, SimpleIdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_limitClauseAtom; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterLimitClauseAtom) {
			listener.enterLimitClauseAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitLimitClauseAtom) {
			listener.exitLimitClauseAtom(this);
		}
	}
}


export class StartTransactionContext extends ParserRuleContext {
	public START(): TerminalNode { return this.getToken(MariaDBParser.START, 0); }
	public TRANSACTION(): TerminalNode { return this.getToken(MariaDBParser.TRANSACTION, 0); }
	public transactionMode(): TransactionModeContext[];
	public transactionMode(i: number): TransactionModeContext;
	public transactionMode(i?: number): TransactionModeContext | TransactionModeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TransactionModeContext);
		} else {
			return this.getRuleContext(i, TransactionModeContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_startTransaction; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterStartTransaction) {
			listener.enterStartTransaction(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitStartTransaction) {
			listener.exitStartTransaction(this);
		}
	}
}


export class BeginWorkContext extends ParserRuleContext {
	public BEGIN(): TerminalNode { return this.getToken(MariaDBParser.BEGIN, 0); }
	public WORK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WORK, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_beginWork; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterBeginWork) {
			listener.enterBeginWork(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitBeginWork) {
			listener.exitBeginWork(this);
		}
	}
}


export class CommitWorkContext extends ParserRuleContext {
	public _nochain!: Token;
	public _norelease!: Token;
	public COMMIT(): TerminalNode { return this.getToken(MariaDBParser.COMMIT, 0); }
	public WORK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WORK, 0); }
	public AND(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AND, 0); }
	public CHAIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CHAIN, 0); }
	public RELEASE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RELEASE, 0); }
	public NO(): TerminalNode[];
	public NO(i: number): TerminalNode;
	public NO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.NO);
		} else {
			return this.getToken(MariaDBParser.NO, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_commitWork; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCommitWork) {
			listener.enterCommitWork(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCommitWork) {
			listener.exitCommitWork(this);
		}
	}
}


export class RollbackWorkContext extends ParserRuleContext {
	public _nochain!: Token;
	public _norelease!: Token;
	public ROLLBACK(): TerminalNode { return this.getToken(MariaDBParser.ROLLBACK, 0); }
	public WORK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WORK, 0); }
	public AND(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AND, 0); }
	public CHAIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CHAIN, 0); }
	public RELEASE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RELEASE, 0); }
	public NO(): TerminalNode[];
	public NO(i: number): TerminalNode;
	public NO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.NO);
		} else {
			return this.getToken(MariaDBParser.NO, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_rollbackWork; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterRollbackWork) {
			listener.enterRollbackWork(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitRollbackWork) {
			listener.exitRollbackWork(this);
		}
	}
}


export class SavepointStatementContext extends ParserRuleContext {
	public SAVEPOINT(): TerminalNode { return this.getToken(MariaDBParser.SAVEPOINT, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_savepointStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSavepointStatement) {
			listener.enterSavepointStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSavepointStatement) {
			listener.exitSavepointStatement(this);
		}
	}
}


export class RollbackStatementContext extends ParserRuleContext {
	public ROLLBACK(): TerminalNode { return this.getToken(MariaDBParser.ROLLBACK, 0); }
	public TO(): TerminalNode { return this.getToken(MariaDBParser.TO, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public WORK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WORK, 0); }
	public SAVEPOINT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SAVEPOINT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_rollbackStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterRollbackStatement) {
			listener.enterRollbackStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitRollbackStatement) {
			listener.exitRollbackStatement(this);
		}
	}
}


export class ReleaseStatementContext extends ParserRuleContext {
	public RELEASE(): TerminalNode { return this.getToken(MariaDBParser.RELEASE, 0); }
	public SAVEPOINT(): TerminalNode { return this.getToken(MariaDBParser.SAVEPOINT, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_releaseStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterReleaseStatement) {
			listener.enterReleaseStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitReleaseStatement) {
			listener.exitReleaseStatement(this);
		}
	}
}


export class LockTablesContext extends ParserRuleContext {
	public LOCK(): TerminalNode { return this.getToken(MariaDBParser.LOCK, 0); }
	public lockTableElement(): LockTableElementContext[];
	public lockTableElement(i: number): LockTableElementContext;
	public lockTableElement(i?: number): LockTableElementContext | LockTableElementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LockTableElementContext);
		} else {
			return this.getRuleContext(i, LockTableElementContext);
		}
	}
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TABLE, 0); }
	public TABLES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TABLES, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	public waitNowaitClause(): WaitNowaitClauseContext | undefined {
		return this.tryGetRuleContext(0, WaitNowaitClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_lockTables; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterLockTables) {
			listener.enterLockTables(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitLockTables) {
			listener.exitLockTables(this);
		}
	}
}


export class UnlockTablesContext extends ParserRuleContext {
	public UNLOCK(): TerminalNode { return this.getToken(MariaDBParser.UNLOCK, 0); }
	public TABLES(): TerminalNode { return this.getToken(MariaDBParser.TABLES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_unlockTables; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterUnlockTables) {
			listener.enterUnlockTables(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitUnlockTables) {
			listener.exitUnlockTables(this);
		}
	}
}


export class SetAutocommitStatementContext extends ParserRuleContext {
	public _autocommitValue!: Token;
	public SET(): TerminalNode { return this.getToken(MariaDBParser.SET, 0); }
	public AUTOCOMMIT(): TerminalNode { return this.getToken(MariaDBParser.AUTOCOMMIT, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	public ZERO_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ZERO_DECIMAL, 0); }
	public ONE_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ONE_DECIMAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_setAutocommitStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSetAutocommitStatement) {
			listener.enterSetAutocommitStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSetAutocommitStatement) {
			listener.exitSetAutocommitStatement(this);
		}
	}
}


export class SetTransactionStatementContext extends ParserRuleContext {
	public _transactionContext!: Token;
	public SET(): TerminalNode { return this.getToken(MariaDBParser.SET, 0); }
	public TRANSACTION(): TerminalNode { return this.getToken(MariaDBParser.TRANSACTION, 0); }
	public transactionOption(): TransactionOptionContext[];
	public transactionOption(i: number): TransactionOptionContext;
	public transactionOption(i?: number): TransactionOptionContext | TransactionOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TransactionOptionContext);
		} else {
			return this.getRuleContext(i, TransactionOptionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GLOBAL, 0); }
	public SESSION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SESSION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_setTransactionStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSetTransactionStatement) {
			listener.enterSetTransactionStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSetTransactionStatement) {
			listener.exitSetTransactionStatement(this);
		}
	}
}


export class TransactionModeContext extends ParserRuleContext {
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WITH, 0); }
	public CONSISTENT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONSISTENT, 0); }
	public SNAPSHOT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SNAPSHOT, 0); }
	public READ(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.READ, 0); }
	public WRITE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WRITE, 0); }
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ONLY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_transactionMode; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTransactionMode) {
			listener.enterTransactionMode(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTransactionMode) {
			listener.exitTransactionMode(this);
		}
	}
}


export class LockTableElementContext extends ParserRuleContext {
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public lockAction(): LockActionContext {
		return this.getRuleContext(0, LockActionContext);
	}
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_lockTableElement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterLockTableElement) {
			listener.enterLockTableElement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitLockTableElement) {
			listener.exitLockTableElement(this);
		}
	}
}


export class LockActionContext extends ParserRuleContext {
	public READ(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.READ, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOCAL, 0); }
	public WRITE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WRITE, 0); }
	public LOW_PRIORITY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOW_PRIORITY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_lockAction; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterLockAction) {
			listener.enterLockAction(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitLockAction) {
			listener.exitLockAction(this);
		}
	}
}


export class TransactionOptionContext extends ParserRuleContext {
	public ISOLATION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ISOLATION, 0); }
	public LEVEL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LEVEL, 0); }
	public transactionLevel(): TransactionLevelContext | undefined {
		return this.tryGetRuleContext(0, TransactionLevelContext);
	}
	public READ(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.READ, 0); }
	public WRITE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WRITE, 0); }
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ONLY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_transactionOption; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTransactionOption) {
			listener.enterTransactionOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTransactionOption) {
			listener.exitTransactionOption(this);
		}
	}
}


export class TransactionLevelContext extends ParserRuleContext {
	public REPEATABLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REPEATABLE, 0); }
	public READ(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.READ, 0); }
	public COMMITTED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COMMITTED, 0); }
	public UNCOMMITTED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UNCOMMITTED, 0); }
	public SERIALIZABLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SERIALIZABLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_transactionLevel; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTransactionLevel) {
			listener.enterTransactionLevel(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTransactionLevel) {
			listener.exitTransactionLevel(this);
		}
	}
}


export class ChangeMasterContext extends ParserRuleContext {
	public CHANGE(): TerminalNode { return this.getToken(MariaDBParser.CHANGE, 0); }
	public MASTER(): TerminalNode { return this.getToken(MariaDBParser.MASTER, 0); }
	public TO(): TerminalNode { return this.getToken(MariaDBParser.TO, 0); }
	public masterOption(): MasterOptionContext[];
	public masterOption(i: number): MasterOptionContext;
	public masterOption(i?: number): MasterOptionContext | MasterOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(MasterOptionContext);
		} else {
			return this.getRuleContext(i, MasterOptionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	public channelOption(): ChannelOptionContext | undefined {
		return this.tryGetRuleContext(0, ChannelOptionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_changeMaster; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterChangeMaster) {
			listener.enterChangeMaster(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitChangeMaster) {
			listener.exitChangeMaster(this);
		}
	}
}


export class ChangeReplicationFilterContext extends ParserRuleContext {
	public CHANGE(): TerminalNode { return this.getToken(MariaDBParser.CHANGE, 0); }
	public REPLICATION(): TerminalNode { return this.getToken(MariaDBParser.REPLICATION, 0); }
	public FILTER(): TerminalNode { return this.getToken(MariaDBParser.FILTER, 0); }
	public replicationFilter(): ReplicationFilterContext[];
	public replicationFilter(i: number): ReplicationFilterContext;
	public replicationFilter(i?: number): ReplicationFilterContext | ReplicationFilterContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ReplicationFilterContext);
		} else {
			return this.getRuleContext(i, ReplicationFilterContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_changeReplicationFilter; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterChangeReplicationFilter) {
			listener.enterChangeReplicationFilter(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitChangeReplicationFilter) {
			listener.exitChangeReplicationFilter(this);
		}
	}
}


export class PurgeBinaryLogsContext extends ParserRuleContext {
	public _purgeFormat!: Token;
	public _fileName!: Token;
	public _timeValue!: Token;
	public PURGE(): TerminalNode { return this.getToken(MariaDBParser.PURGE, 0); }
	public LOGS(): TerminalNode { return this.getToken(MariaDBParser.LOGS, 0); }
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BINARY, 0); }
	public MASTER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TO, 0); }
	public BEFORE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BEFORE, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_purgeBinaryLogs; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterPurgeBinaryLogs) {
			listener.enterPurgeBinaryLogs(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitPurgeBinaryLogs) {
			listener.exitPurgeBinaryLogs(this);
		}
	}
}


export class ResetMasterContext extends ParserRuleContext {
	public RESET(): TerminalNode { return this.getToken(MariaDBParser.RESET, 0); }
	public MASTER(): TerminalNode { return this.getToken(MariaDBParser.MASTER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_resetMaster; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterResetMaster) {
			listener.enterResetMaster(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitResetMaster) {
			listener.exitResetMaster(this);
		}
	}
}


export class ResetSlaveContext extends ParserRuleContext {
	public RESET(): TerminalNode { return this.getToken(MariaDBParser.RESET, 0); }
	public SLAVE(): TerminalNode { return this.getToken(MariaDBParser.SLAVE, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ALL, 0); }
	public channelOption(): ChannelOptionContext | undefined {
		return this.tryGetRuleContext(0, ChannelOptionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_resetSlave; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterResetSlave) {
			listener.enterResetSlave(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitResetSlave) {
			listener.exitResetSlave(this);
		}
	}
}


export class StartSlaveContext extends ParserRuleContext {
	public START(): TerminalNode { return this.getToken(MariaDBParser.START, 0); }
	public SLAVE(): TerminalNode { return this.getToken(MariaDBParser.SLAVE, 0); }
	public threadType(): ThreadTypeContext[];
	public threadType(i: number): ThreadTypeContext;
	public threadType(i?: number): ThreadTypeContext | ThreadTypeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ThreadTypeContext);
		} else {
			return this.getRuleContext(i, ThreadTypeContext);
		}
	}
	public UNTIL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UNTIL, 0); }
	public untilOption(): UntilOptionContext | undefined {
		return this.tryGetRuleContext(0, UntilOptionContext);
	}
	public connectionOption(): ConnectionOptionContext[];
	public connectionOption(i: number): ConnectionOptionContext;
	public connectionOption(i?: number): ConnectionOptionContext | ConnectionOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ConnectionOptionContext);
		} else {
			return this.getRuleContext(i, ConnectionOptionContext);
		}
	}
	public channelOption(): ChannelOptionContext | undefined {
		return this.tryGetRuleContext(0, ChannelOptionContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_startSlave; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterStartSlave) {
			listener.enterStartSlave(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitStartSlave) {
			listener.exitStartSlave(this);
		}
	}
}


export class StopSlaveContext extends ParserRuleContext {
	public STOP(): TerminalNode { return this.getToken(MariaDBParser.STOP, 0); }
	public SLAVE(): TerminalNode { return this.getToken(MariaDBParser.SLAVE, 0); }
	public threadType(): ThreadTypeContext[];
	public threadType(i: number): ThreadTypeContext;
	public threadType(i?: number): ThreadTypeContext | ThreadTypeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ThreadTypeContext);
		} else {
			return this.getRuleContext(i, ThreadTypeContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_stopSlave; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterStopSlave) {
			listener.enterStopSlave(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitStopSlave) {
			listener.exitStopSlave(this);
		}
	}
}


export class StartGroupReplicationContext extends ParserRuleContext {
	public START(): TerminalNode { return this.getToken(MariaDBParser.START, 0); }
	public GROUP_REPLICATION(): TerminalNode { return this.getToken(MariaDBParser.GROUP_REPLICATION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_startGroupReplication; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterStartGroupReplication) {
			listener.enterStartGroupReplication(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitStartGroupReplication) {
			listener.exitStartGroupReplication(this);
		}
	}
}


export class StopGroupReplicationContext extends ParserRuleContext {
	public STOP(): TerminalNode { return this.getToken(MariaDBParser.STOP, 0); }
	public GROUP_REPLICATION(): TerminalNode { return this.getToken(MariaDBParser.GROUP_REPLICATION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_stopGroupReplication; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterStopGroupReplication) {
			listener.enterStopGroupReplication(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitStopGroupReplication) {
			listener.exitStopGroupReplication(this);
		}
	}
}


export class MasterOptionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_masterOption; }
	public copyFrom(ctx: MasterOptionContext): void {
		super.copyFrom(ctx);
	}
}
export class MasterStringOptionContext extends MasterOptionContext {
	public stringMasterOption(): StringMasterOptionContext {
		return this.getRuleContext(0, StringMasterOptionContext);
	}
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.STRING_LITERAL, 0); }
	constructor(ctx: MasterOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterMasterStringOption) {
			listener.enterMasterStringOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitMasterStringOption) {
			listener.exitMasterStringOption(this);
		}
	}
}
export class MasterDecimalOptionContext extends MasterOptionContext {
	public decimalMasterOption(): DecimalMasterOptionContext {
		return this.getRuleContext(0, DecimalMasterOptionContext);
	}
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	constructor(ctx: MasterOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterMasterDecimalOption) {
			listener.enterMasterDecimalOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitMasterDecimalOption) {
			listener.exitMasterDecimalOption(this);
		}
	}
}
export class MasterBoolOptionContext extends MasterOptionContext {
	public _boolVal!: Token;
	public boolMasterOption(): BoolMasterOptionContext {
		return this.getRuleContext(0, BoolMasterOptionContext);
	}
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	public ZERO_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ZERO_DECIMAL, 0); }
	public ONE_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ONE_DECIMAL, 0); }
	constructor(ctx: MasterOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterMasterBoolOption) {
			listener.enterMasterBoolOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitMasterBoolOption) {
			listener.exitMasterBoolOption(this);
		}
	}
}
export class MasterRealOptionContext extends MasterOptionContext {
	public MASTER_HEARTBEAT_PERIOD(): TerminalNode { return this.getToken(MariaDBParser.MASTER_HEARTBEAT_PERIOD, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	public REAL_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.REAL_LITERAL, 0); }
	constructor(ctx: MasterOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterMasterRealOption) {
			listener.enterMasterRealOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitMasterRealOption) {
			listener.exitMasterRealOption(this);
		}
	}
}
export class MasterUidListOptionContext extends MasterOptionContext {
	public IGNORE_SERVER_IDS(): TerminalNode { return this.getToken(MariaDBParser.IGNORE_SERVER_IDS, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(ctx: MasterOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterMasterUidListOption) {
			listener.enterMasterUidListOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitMasterUidListOption) {
			listener.exitMasterUidListOption(this);
		}
	}
}


export class StringMasterOptionContext extends ParserRuleContext {
	public MASTER_BIND(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_BIND, 0); }
	public MASTER_HOST(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_HOST, 0); }
	public MASTER_USER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_USER, 0); }
	public MASTER_PASSWORD(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_PASSWORD, 0); }
	public MASTER_LOG_FILE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_LOG_FILE, 0); }
	public RELAY_LOG_FILE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RELAY_LOG_FILE, 0); }
	public MASTER_SSL_CA(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_SSL_CA, 0); }
	public MASTER_SSL_CAPATH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_SSL_CAPATH, 0); }
	public MASTER_SSL_CERT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_SSL_CERT, 0); }
	public MASTER_SSL_CRL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_SSL_CRL, 0); }
	public MASTER_SSL_CRLPATH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_SSL_CRLPATH, 0); }
	public MASTER_SSL_KEY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_SSL_KEY, 0); }
	public MASTER_SSL_CIPHER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_SSL_CIPHER, 0); }
	public MASTER_TLS_VERSION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_TLS_VERSION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_stringMasterOption; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterStringMasterOption) {
			listener.enterStringMasterOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitStringMasterOption) {
			listener.exitStringMasterOption(this);
		}
	}
}


export class DecimalMasterOptionContext extends ParserRuleContext {
	public MASTER_PORT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_PORT, 0); }
	public MASTER_CONNECT_RETRY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_CONNECT_RETRY, 0); }
	public MASTER_RETRY_COUNT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_RETRY_COUNT, 0); }
	public MASTER_DELAY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_DELAY, 0); }
	public MASTER_LOG_POS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_LOG_POS, 0); }
	public RELAY_LOG_POS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RELAY_LOG_POS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_decimalMasterOption; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDecimalMasterOption) {
			listener.enterDecimalMasterOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDecimalMasterOption) {
			listener.exitDecimalMasterOption(this);
		}
	}
}


export class BoolMasterOptionContext extends ParserRuleContext {
	public MASTER_AUTO_POSITION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_AUTO_POSITION, 0); }
	public MASTER_SSL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_SSL, 0); }
	public MASTER_SSL_VERIFY_SERVER_CERT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_SSL_VERIFY_SERVER_CERT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_boolMasterOption; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterBoolMasterOption) {
			listener.enterBoolMasterOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitBoolMasterOption) {
			listener.exitBoolMasterOption(this);
		}
	}
}


export class ChannelOptionContext extends ParserRuleContext {
	public FOR(): TerminalNode { return this.getToken(MariaDBParser.FOR, 0); }
	public CHANNEL(): TerminalNode { return this.getToken(MariaDBParser.CHANNEL, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_channelOption; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterChannelOption) {
			listener.enterChannelOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitChannelOption) {
			listener.exitChannelOption(this);
		}
	}
}


export class ReplicationFilterContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_replicationFilter; }
	public copyFrom(ctx: ReplicationFilterContext): void {
		super.copyFrom(ctx);
	}
}
export class DoDbReplicationContext extends ReplicationFilterContext {
	public REPLICATE_DO_DB(): TerminalNode { return this.getToken(MariaDBParser.REPLICATE_DO_DB, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public uidList(): UidListContext {
		return this.getRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	constructor(ctx: ReplicationFilterContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDoDbReplication) {
			listener.enterDoDbReplication(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDoDbReplication) {
			listener.exitDoDbReplication(this);
		}
	}
}
export class IgnoreDbReplicationContext extends ReplicationFilterContext {
	public REPLICATE_IGNORE_DB(): TerminalNode { return this.getToken(MariaDBParser.REPLICATE_IGNORE_DB, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public uidList(): UidListContext {
		return this.getRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	constructor(ctx: ReplicationFilterContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterIgnoreDbReplication) {
			listener.enterIgnoreDbReplication(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitIgnoreDbReplication) {
			listener.exitIgnoreDbReplication(this);
		}
	}
}
export class DoTableReplicationContext extends ReplicationFilterContext {
	public REPLICATE_DO_TABLE(): TerminalNode { return this.getToken(MariaDBParser.REPLICATE_DO_TABLE, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public tables(): TablesContext {
		return this.getRuleContext(0, TablesContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	constructor(ctx: ReplicationFilterContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDoTableReplication) {
			listener.enterDoTableReplication(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDoTableReplication) {
			listener.exitDoTableReplication(this);
		}
	}
}
export class IgnoreTableReplicationContext extends ReplicationFilterContext {
	public REPLICATE_IGNORE_TABLE(): TerminalNode { return this.getToken(MariaDBParser.REPLICATE_IGNORE_TABLE, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public tables(): TablesContext {
		return this.getRuleContext(0, TablesContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	constructor(ctx: ReplicationFilterContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterIgnoreTableReplication) {
			listener.enterIgnoreTableReplication(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitIgnoreTableReplication) {
			listener.exitIgnoreTableReplication(this);
		}
	}
}
export class WildDoTableReplicationContext extends ReplicationFilterContext {
	public REPLICATE_WILD_DO_TABLE(): TerminalNode { return this.getToken(MariaDBParser.REPLICATE_WILD_DO_TABLE, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public simpleStrings(): SimpleStringsContext {
		return this.getRuleContext(0, SimpleStringsContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	constructor(ctx: ReplicationFilterContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterWildDoTableReplication) {
			listener.enterWildDoTableReplication(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitWildDoTableReplication) {
			listener.exitWildDoTableReplication(this);
		}
	}
}
export class WildIgnoreTableReplicationContext extends ReplicationFilterContext {
	public REPLICATE_WILD_IGNORE_TABLE(): TerminalNode { return this.getToken(MariaDBParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public simpleStrings(): SimpleStringsContext {
		return this.getRuleContext(0, SimpleStringsContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	constructor(ctx: ReplicationFilterContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterWildIgnoreTableReplication) {
			listener.enterWildIgnoreTableReplication(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitWildIgnoreTableReplication) {
			listener.exitWildIgnoreTableReplication(this);
		}
	}
}
export class RewriteDbReplicationContext extends ReplicationFilterContext {
	public REPLICATE_REWRITE_DB(): TerminalNode { return this.getToken(MariaDBParser.REPLICATE_REWRITE_DB, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public tablePair(): TablePairContext[];
	public tablePair(i: number): TablePairContext;
	public tablePair(i?: number): TablePairContext | TablePairContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TablePairContext);
		} else {
			return this.getRuleContext(i, TablePairContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(ctx: ReplicationFilterContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterRewriteDbReplication) {
			listener.enterRewriteDbReplication(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitRewriteDbReplication) {
			listener.exitRewriteDbReplication(this);
		}
	}
}


export class TablePairContext extends ParserRuleContext {
	public _firstTable!: TableNameContext;
	public _secondTable!: TableNameContext;
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public COMMA(): TerminalNode { return this.getToken(MariaDBParser.COMMA, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public tableName(): TableNameContext[];
	public tableName(i: number): TableNameContext;
	public tableName(i?: number): TableNameContext | TableNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableNameContext);
		} else {
			return this.getRuleContext(i, TableNameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_tablePair; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTablePair) {
			listener.enterTablePair(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTablePair) {
			listener.exitTablePair(this);
		}
	}
}


export class ThreadTypeContext extends ParserRuleContext {
	public IO_THREAD(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.IO_THREAD, 0); }
	public SQL_THREAD(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SQL_THREAD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_threadType; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterThreadType) {
			listener.enterThreadType(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitThreadType) {
			listener.exitThreadType(this);
		}
	}
}


export class UntilOptionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_untilOption; }
	public copyFrom(ctx: UntilOptionContext): void {
		super.copyFrom(ctx);
	}
}
export class GtidsUntilOptionContext extends UntilOptionContext {
	public _gtids!: Token;
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	public gtuidSet(): GtuidSetContext {
		return this.getRuleContext(0, GtuidSetContext);
	}
	public SQL_BEFORE_GTIDS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SQL_BEFORE_GTIDS, 0); }
	public SQL_AFTER_GTIDS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SQL_AFTER_GTIDS, 0); }
	constructor(ctx: UntilOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterGtidsUntilOption) {
			listener.enterGtidsUntilOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitGtidsUntilOption) {
			listener.exitGtidsUntilOption(this);
		}
	}
}
export class MasterLogUntilOptionContext extends UntilOptionContext {
	public MASTER_LOG_FILE(): TerminalNode { return this.getToken(MariaDBParser.MASTER_LOG_FILE, 0); }
	public EQUAL_SYMBOL(): TerminalNode[];
	public EQUAL_SYMBOL(i: number): TerminalNode;
	public EQUAL_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.EQUAL_SYMBOL);
		} else {
			return this.getToken(MariaDBParser.EQUAL_SYMBOL, i);
		}
	}
	public STRING_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.STRING_LITERAL, 0); }
	public COMMA(): TerminalNode { return this.getToken(MariaDBParser.COMMA, 0); }
	public MASTER_LOG_POS(): TerminalNode { return this.getToken(MariaDBParser.MASTER_LOG_POS, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	constructor(ctx: UntilOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterMasterLogUntilOption) {
			listener.enterMasterLogUntilOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitMasterLogUntilOption) {
			listener.exitMasterLogUntilOption(this);
		}
	}
}
export class RelayLogUntilOptionContext extends UntilOptionContext {
	public RELAY_LOG_FILE(): TerminalNode { return this.getToken(MariaDBParser.RELAY_LOG_FILE, 0); }
	public EQUAL_SYMBOL(): TerminalNode[];
	public EQUAL_SYMBOL(i: number): TerminalNode;
	public EQUAL_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.EQUAL_SYMBOL);
		} else {
			return this.getToken(MariaDBParser.EQUAL_SYMBOL, i);
		}
	}
	public STRING_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.STRING_LITERAL, 0); }
	public COMMA(): TerminalNode { return this.getToken(MariaDBParser.COMMA, 0); }
	public RELAY_LOG_POS(): TerminalNode { return this.getToken(MariaDBParser.RELAY_LOG_POS, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	constructor(ctx: UntilOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterRelayLogUntilOption) {
			listener.enterRelayLogUntilOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitRelayLogUntilOption) {
			listener.exitRelayLogUntilOption(this);
		}
	}
}
export class SqlGapsUntilOptionContext extends UntilOptionContext {
	public SQL_AFTER_MTS_GAPS(): TerminalNode { return this.getToken(MariaDBParser.SQL_AFTER_MTS_GAPS, 0); }
	constructor(ctx: UntilOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSqlGapsUntilOption) {
			listener.enterSqlGapsUntilOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSqlGapsUntilOption) {
			listener.exitSqlGapsUntilOption(this);
		}
	}
}


export class ConnectionOptionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_connectionOption; }
	public copyFrom(ctx: ConnectionOptionContext): void {
		super.copyFrom(ctx);
	}
}
export class UserConnectionOptionContext extends ConnectionOptionContext {
	public _conOptUser!: Token;
	public USER(): TerminalNode { return this.getToken(MariaDBParser.USER, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.STRING_LITERAL, 0); }
	constructor(ctx: ConnectionOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterUserConnectionOption) {
			listener.enterUserConnectionOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitUserConnectionOption) {
			listener.exitUserConnectionOption(this);
		}
	}
}
export class PasswordConnectionOptionContext extends ConnectionOptionContext {
	public _conOptPassword!: Token;
	public PASSWORD(): TerminalNode { return this.getToken(MariaDBParser.PASSWORD, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.STRING_LITERAL, 0); }
	constructor(ctx: ConnectionOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterPasswordConnectionOption) {
			listener.enterPasswordConnectionOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitPasswordConnectionOption) {
			listener.exitPasswordConnectionOption(this);
		}
	}
}
export class DefaultAuthConnectionOptionContext extends ConnectionOptionContext {
	public _conOptDefAuth!: Token;
	public DEFAULT_AUTH(): TerminalNode { return this.getToken(MariaDBParser.DEFAULT_AUTH, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.STRING_LITERAL, 0); }
	constructor(ctx: ConnectionOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDefaultAuthConnectionOption) {
			listener.enterDefaultAuthConnectionOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDefaultAuthConnectionOption) {
			listener.exitDefaultAuthConnectionOption(this);
		}
	}
}
export class PluginDirConnectionOptionContext extends ConnectionOptionContext {
	public _conOptPluginDir!: Token;
	public PLUGIN_DIR(): TerminalNode { return this.getToken(MariaDBParser.PLUGIN_DIR, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.STRING_LITERAL, 0); }
	constructor(ctx: ConnectionOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterPluginDirConnectionOption) {
			listener.enterPluginDirConnectionOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitPluginDirConnectionOption) {
			listener.exitPluginDirConnectionOption(this);
		}
	}
}


export class GtuidSetContext extends ParserRuleContext {
	public uuidSet(): UuidSetContext[];
	public uuidSet(i: number): UuidSetContext;
	public uuidSet(i?: number): UuidSetContext | UuidSetContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UuidSetContext);
		} else {
			return this.getRuleContext(i, UuidSetContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_gtuidSet; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterGtuidSet) {
			listener.enterGtuidSet(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitGtuidSet) {
			listener.exitGtuidSet(this);
		}
	}
}


export class XaStartTransactionContext extends ParserRuleContext {
	public _xaStart!: Token;
	public _xaAction!: Token;
	public XA(): TerminalNode { return this.getToken(MariaDBParser.XA, 0); }
	public xid(): XidContext {
		return this.getRuleContext(0, XidContext);
	}
	public START(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.START, 0); }
	public BEGIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BEGIN, 0); }
	public JOIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JOIN, 0); }
	public RESUME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RESUME, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_xaStartTransaction; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterXaStartTransaction) {
			listener.enterXaStartTransaction(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitXaStartTransaction) {
			listener.exitXaStartTransaction(this);
		}
	}
}


export class XaEndTransactionContext extends ParserRuleContext {
	public XA(): TerminalNode { return this.getToken(MariaDBParser.XA, 0); }
	public END(): TerminalNode { return this.getToken(MariaDBParser.END, 0); }
	public xid(): XidContext {
		return this.getRuleContext(0, XidContext);
	}
	public SUSPEND(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SUSPEND, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FOR, 0); }
	public MIGRATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MIGRATE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_xaEndTransaction; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterXaEndTransaction) {
			listener.enterXaEndTransaction(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitXaEndTransaction) {
			listener.exitXaEndTransaction(this);
		}
	}
}


export class XaPrepareStatementContext extends ParserRuleContext {
	public XA(): TerminalNode { return this.getToken(MariaDBParser.XA, 0); }
	public PREPARE(): TerminalNode { return this.getToken(MariaDBParser.PREPARE, 0); }
	public xid(): XidContext {
		return this.getRuleContext(0, XidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_xaPrepareStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterXaPrepareStatement) {
			listener.enterXaPrepareStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitXaPrepareStatement) {
			listener.exitXaPrepareStatement(this);
		}
	}
}


export class XaCommitWorkContext extends ParserRuleContext {
	public XA(): TerminalNode { return this.getToken(MariaDBParser.XA, 0); }
	public COMMIT(): TerminalNode { return this.getToken(MariaDBParser.COMMIT, 0); }
	public xid(): XidContext {
		return this.getRuleContext(0, XidContext);
	}
	public ONE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ONE, 0); }
	public PHASE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PHASE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_xaCommitWork; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterXaCommitWork) {
			listener.enterXaCommitWork(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitXaCommitWork) {
			listener.exitXaCommitWork(this);
		}
	}
}


export class XaRollbackWorkContext extends ParserRuleContext {
	public XA(): TerminalNode { return this.getToken(MariaDBParser.XA, 0); }
	public ROLLBACK(): TerminalNode { return this.getToken(MariaDBParser.ROLLBACK, 0); }
	public xid(): XidContext {
		return this.getRuleContext(0, XidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_xaRollbackWork; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterXaRollbackWork) {
			listener.enterXaRollbackWork(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitXaRollbackWork) {
			listener.exitXaRollbackWork(this);
		}
	}
}


export class XaRecoverWorkContext extends ParserRuleContext {
	public XA(): TerminalNode { return this.getToken(MariaDBParser.XA, 0); }
	public RECOVER(): TerminalNode { return this.getToken(MariaDBParser.RECOVER, 0); }
	public CONVERT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONVERT, 0); }
	public xid(): XidContext | undefined {
		return this.tryGetRuleContext(0, XidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_xaRecoverWork; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterXaRecoverWork) {
			listener.enterXaRecoverWork(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitXaRecoverWork) {
			listener.exitXaRecoverWork(this);
		}
	}
}


export class PrepareStatementContext extends ParserRuleContext {
	public _query!: Token;
	public _variable!: Token;
	public PREPARE(): TerminalNode { return this.getToken(MariaDBParser.PREPARE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public FROM(): TerminalNode { return this.getToken(MariaDBParser.FROM, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_LITERAL, 0); }
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOCAL_ID, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_prepareStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterPrepareStatement) {
			listener.enterPrepareStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitPrepareStatement) {
			listener.exitPrepareStatement(this);
		}
	}
}


export class ExecuteStatementContext extends ParserRuleContext {
	public EXECUTE(): TerminalNode { return this.getToken(MariaDBParser.EXECUTE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.USING, 0); }
	public userVariables(): UserVariablesContext | undefined {
		return this.tryGetRuleContext(0, UserVariablesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_executeStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterExecuteStatement) {
			listener.enterExecuteStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitExecuteStatement) {
			listener.exitExecuteStatement(this);
		}
	}
}


export class DeallocatePrepareContext extends ParserRuleContext {
	public _dropFormat!: Token;
	public PREPARE(): TerminalNode { return this.getToken(MariaDBParser.PREPARE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public DEALLOCATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DEALLOCATE, 0); }
	public DROP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DROP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_deallocatePrepare; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDeallocatePrepare) {
			listener.enterDeallocatePrepare(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDeallocatePrepare) {
			listener.exitDeallocatePrepare(this);
		}
	}
}


export class RoutineBodyContext extends ParserRuleContext {
	public blockStatement(): BlockStatementContext | undefined {
		return this.tryGetRuleContext(0, BlockStatementContext);
	}
	public sqlStatement(): SqlStatementContext | undefined {
		return this.tryGetRuleContext(0, SqlStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_routineBody; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterRoutineBody) {
			listener.enterRoutineBody(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitRoutineBody) {
			listener.exitRoutineBody(this);
		}
	}
}


export class BlockStatementContext extends ParserRuleContext {
	public BEGIN(): TerminalNode { return this.getToken(MariaDBParser.BEGIN, 0); }
	public END(): TerminalNode { return this.getToken(MariaDBParser.END, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public COLON_SYMB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COLON_SYMB, 0); }
	public declareVariable(): DeclareVariableContext[];
	public declareVariable(i: number): DeclareVariableContext;
	public declareVariable(i?: number): DeclareVariableContext | DeclareVariableContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DeclareVariableContext);
		} else {
			return this.getRuleContext(i, DeclareVariableContext);
		}
	}
	public SEMI(): TerminalNode[];
	public SEMI(i: number): TerminalNode;
	public SEMI(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.SEMI);
		} else {
			return this.getToken(MariaDBParser.SEMI, i);
		}
	}
	public declareCondition(): DeclareConditionContext[];
	public declareCondition(i: number): DeclareConditionContext;
	public declareCondition(i?: number): DeclareConditionContext | DeclareConditionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DeclareConditionContext);
		} else {
			return this.getRuleContext(i, DeclareConditionContext);
		}
	}
	public declareCursor(): DeclareCursorContext[];
	public declareCursor(i: number): DeclareCursorContext;
	public declareCursor(i?: number): DeclareCursorContext | DeclareCursorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DeclareCursorContext);
		} else {
			return this.getRuleContext(i, DeclareCursorContext);
		}
	}
	public declareHandler(): DeclareHandlerContext[];
	public declareHandler(i: number): DeclareHandlerContext;
	public declareHandler(i?: number): DeclareHandlerContext | DeclareHandlerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DeclareHandlerContext);
		} else {
			return this.getRuleContext(i, DeclareHandlerContext);
		}
	}
	public procedureSqlStatement(): ProcedureSqlStatementContext[];
	public procedureSqlStatement(i: number): ProcedureSqlStatementContext;
	public procedureSqlStatement(i?: number): ProcedureSqlStatementContext | ProcedureSqlStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureSqlStatementContext);
		} else {
			return this.getRuleContext(i, ProcedureSqlStatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_blockStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterBlockStatement) {
			listener.enterBlockStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitBlockStatement) {
			listener.exitBlockStatement(this);
		}
	}
}


export class CaseStatementContext extends ParserRuleContext {
	public CASE(): TerminalNode[];
	public CASE(i: number): TerminalNode;
	public CASE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.CASE);
		} else {
			return this.getToken(MariaDBParser.CASE, i);
		}
	}
	public END(): TerminalNode { return this.getToken(MariaDBParser.END, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public caseAlternative(): CaseAlternativeContext[];
	public caseAlternative(i: number): CaseAlternativeContext;
	public caseAlternative(i?: number): CaseAlternativeContext | CaseAlternativeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CaseAlternativeContext);
		} else {
			return this.getRuleContext(i, CaseAlternativeContext);
		}
	}
	public ELSE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ELSE, 0); }
	public procedureSqlStatement(): ProcedureSqlStatementContext[];
	public procedureSqlStatement(i: number): ProcedureSqlStatementContext;
	public procedureSqlStatement(i?: number): ProcedureSqlStatementContext | ProcedureSqlStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureSqlStatementContext);
		} else {
			return this.getRuleContext(i, ProcedureSqlStatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_caseStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCaseStatement) {
			listener.enterCaseStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCaseStatement) {
			listener.exitCaseStatement(this);
		}
	}
}


export class IfStatementContext extends ParserRuleContext {
	public _procedureSqlStatement!: ProcedureSqlStatementContext;
	public _thenStatements: ProcedureSqlStatementContext[] = [];
	public _elseStatements: ProcedureSqlStatementContext[] = [];
	public IF(): TerminalNode[];
	public IF(i: number): TerminalNode;
	public IF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.IF);
		} else {
			return this.getToken(MariaDBParser.IF, i);
		}
	}
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public THEN(): TerminalNode { return this.getToken(MariaDBParser.THEN, 0); }
	public END(): TerminalNode { return this.getToken(MariaDBParser.END, 0); }
	public elifAlternative(): ElifAlternativeContext[];
	public elifAlternative(i: number): ElifAlternativeContext;
	public elifAlternative(i?: number): ElifAlternativeContext | ElifAlternativeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ElifAlternativeContext);
		} else {
			return this.getRuleContext(i, ElifAlternativeContext);
		}
	}
	public ELSE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ELSE, 0); }
	public procedureSqlStatement(): ProcedureSqlStatementContext[];
	public procedureSqlStatement(i: number): ProcedureSqlStatementContext;
	public procedureSqlStatement(i?: number): ProcedureSqlStatementContext | ProcedureSqlStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureSqlStatementContext);
		} else {
			return this.getRuleContext(i, ProcedureSqlStatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_ifStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterIfStatement) {
			listener.enterIfStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitIfStatement) {
			listener.exitIfStatement(this);
		}
	}
}


export class IterateStatementContext extends ParserRuleContext {
	public ITERATE(): TerminalNode { return this.getToken(MariaDBParser.ITERATE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_iterateStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterIterateStatement) {
			listener.enterIterateStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitIterateStatement) {
			listener.exitIterateStatement(this);
		}
	}
}


export class LeaveStatementContext extends ParserRuleContext {
	public LEAVE(): TerminalNode { return this.getToken(MariaDBParser.LEAVE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_leaveStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterLeaveStatement) {
			listener.enterLeaveStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitLeaveStatement) {
			listener.exitLeaveStatement(this);
		}
	}
}


export class LoopStatementContext extends ParserRuleContext {
	public LOOP(): TerminalNode[];
	public LOOP(i: number): TerminalNode;
	public LOOP(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.LOOP);
		} else {
			return this.getToken(MariaDBParser.LOOP, i);
		}
	}
	public END(): TerminalNode { return this.getToken(MariaDBParser.END, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public COLON_SYMB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COLON_SYMB, 0); }
	public procedureSqlStatement(): ProcedureSqlStatementContext[];
	public procedureSqlStatement(i: number): ProcedureSqlStatementContext;
	public procedureSqlStatement(i?: number): ProcedureSqlStatementContext | ProcedureSqlStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureSqlStatementContext);
		} else {
			return this.getRuleContext(i, ProcedureSqlStatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_loopStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterLoopStatement) {
			listener.enterLoopStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitLoopStatement) {
			listener.exitLoopStatement(this);
		}
	}
}


export class RepeatStatementContext extends ParserRuleContext {
	public REPEAT(): TerminalNode[];
	public REPEAT(i: number): TerminalNode;
	public REPEAT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.REPEAT);
		} else {
			return this.getToken(MariaDBParser.REPEAT, i);
		}
	}
	public UNTIL(): TerminalNode { return this.getToken(MariaDBParser.UNTIL, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public END(): TerminalNode { return this.getToken(MariaDBParser.END, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public COLON_SYMB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COLON_SYMB, 0); }
	public procedureSqlStatement(): ProcedureSqlStatementContext[];
	public procedureSqlStatement(i: number): ProcedureSqlStatementContext;
	public procedureSqlStatement(i?: number): ProcedureSqlStatementContext | ProcedureSqlStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureSqlStatementContext);
		} else {
			return this.getRuleContext(i, ProcedureSqlStatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_repeatStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterRepeatStatement) {
			listener.enterRepeatStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitRepeatStatement) {
			listener.exitRepeatStatement(this);
		}
	}
}


export class ReturnStatementContext extends ParserRuleContext {
	public RETURN(): TerminalNode { return this.getToken(MariaDBParser.RETURN, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_returnStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterReturnStatement) {
			listener.enterReturnStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitReturnStatement) {
			listener.exitReturnStatement(this);
		}
	}
}


export class WhileStatementContext extends ParserRuleContext {
	public WHILE(): TerminalNode[];
	public WHILE(i: number): TerminalNode;
	public WHILE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.WHILE);
		} else {
			return this.getToken(MariaDBParser.WHILE, i);
		}
	}
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public DO(): TerminalNode { return this.getToken(MariaDBParser.DO, 0); }
	public END(): TerminalNode { return this.getToken(MariaDBParser.END, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public COLON_SYMB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COLON_SYMB, 0); }
	public procedureSqlStatement(): ProcedureSqlStatementContext[];
	public procedureSqlStatement(i: number): ProcedureSqlStatementContext;
	public procedureSqlStatement(i?: number): ProcedureSqlStatementContext | ProcedureSqlStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureSqlStatementContext);
		} else {
			return this.getRuleContext(i, ProcedureSqlStatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_whileStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterWhileStatement) {
			listener.enterWhileStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitWhileStatement) {
			listener.exitWhileStatement(this);
		}
	}
}


export class CursorStatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_cursorStatement; }
	public copyFrom(ctx: CursorStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class CloseCursorContext extends CursorStatementContext {
	public CLOSE(): TerminalNode { return this.getToken(MariaDBParser.CLOSE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(ctx: CursorStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCloseCursor) {
			listener.enterCloseCursor(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCloseCursor) {
			listener.exitCloseCursor(this);
		}
	}
}
export class FetchCursorContext extends CursorStatementContext {
	public FETCH(): TerminalNode { return this.getToken(MariaDBParser.FETCH, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public INTO(): TerminalNode { return this.getToken(MariaDBParser.INTO, 0); }
	public uidList(): UidListContext {
		return this.getRuleContext(0, UidListContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FROM, 0); }
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NEXT, 0); }
	constructor(ctx: CursorStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterFetchCursor) {
			listener.enterFetchCursor(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitFetchCursor) {
			listener.exitFetchCursor(this);
		}
	}
}
export class OpenCursorContext extends CursorStatementContext {
	public OPEN(): TerminalNode { return this.getToken(MariaDBParser.OPEN, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(ctx: CursorStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterOpenCursor) {
			listener.enterOpenCursor(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitOpenCursor) {
			listener.exitOpenCursor(this);
		}
	}
}


export class DeclareVariableContext extends ParserRuleContext {
	public DECLARE(): TerminalNode { return this.getToken(MariaDBParser.DECLARE, 0); }
	public uidList(): UidListContext {
		return this.getRuleContext(0, UidListContext);
	}
	public dataType(): DataTypeContext {
		return this.getRuleContext(0, DataTypeContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DEFAULT, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_declareVariable; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDeclareVariable) {
			listener.enterDeclareVariable(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDeclareVariable) {
			listener.exitDeclareVariable(this);
		}
	}
}


export class DeclareConditionContext extends ParserRuleContext {
	public DECLARE(): TerminalNode { return this.getToken(MariaDBParser.DECLARE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public CONDITION(): TerminalNode { return this.getToken(MariaDBParser.CONDITION, 0); }
	public FOR(): TerminalNode { return this.getToken(MariaDBParser.FOR, 0); }
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public SQLSTATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SQLSTATE, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_LITERAL, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VALUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_declareCondition; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDeclareCondition) {
			listener.enterDeclareCondition(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDeclareCondition) {
			listener.exitDeclareCondition(this);
		}
	}
}


export class DeclareCursorContext extends ParserRuleContext {
	public DECLARE(): TerminalNode { return this.getToken(MariaDBParser.DECLARE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public CURSOR(): TerminalNode { return this.getToken(MariaDBParser.CURSOR, 0); }
	public FOR(): TerminalNode { return this.getToken(MariaDBParser.FOR, 0); }
	public selectStatement(): SelectStatementContext {
		return this.getRuleContext(0, SelectStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_declareCursor; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDeclareCursor) {
			listener.enterDeclareCursor(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDeclareCursor) {
			listener.exitDeclareCursor(this);
		}
	}
}


export class DeclareHandlerContext extends ParserRuleContext {
	public _handlerAction!: Token;
	public DECLARE(): TerminalNode { return this.getToken(MariaDBParser.DECLARE, 0); }
	public HANDLER(): TerminalNode { return this.getToken(MariaDBParser.HANDLER, 0); }
	public FOR(): TerminalNode { return this.getToken(MariaDBParser.FOR, 0); }
	public handlerConditionValue(): HandlerConditionValueContext[];
	public handlerConditionValue(i: number): HandlerConditionValueContext;
	public handlerConditionValue(i?: number): HandlerConditionValueContext | HandlerConditionValueContext[] {
		if (i === undefined) {
			return this.getRuleContexts(HandlerConditionValueContext);
		} else {
			return this.getRuleContext(i, HandlerConditionValueContext);
		}
	}
	public routineBody(): RoutineBodyContext {
		return this.getRuleContext(0, RoutineBodyContext);
	}
	public CONTINUE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONTINUE, 0); }
	public EXIT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EXIT, 0); }
	public UNDO(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UNDO, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_declareHandler; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDeclareHandler) {
			listener.enterDeclareHandler(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDeclareHandler) {
			listener.exitDeclareHandler(this);
		}
	}
}


export class HandlerConditionValueContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_handlerConditionValue; }
	public copyFrom(ctx: HandlerConditionValueContext): void {
		super.copyFrom(ctx);
	}
}
export class HandlerConditionCodeContext extends HandlerConditionValueContext {
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	constructor(ctx: HandlerConditionValueContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterHandlerConditionCode) {
			listener.enterHandlerConditionCode(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitHandlerConditionCode) {
			listener.exitHandlerConditionCode(this);
		}
	}
}
export class HandlerConditionStateContext extends HandlerConditionValueContext {
	public SQLSTATE(): TerminalNode { return this.getToken(MariaDBParser.SQLSTATE, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.STRING_LITERAL, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VALUE, 0); }
	constructor(ctx: HandlerConditionValueContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterHandlerConditionState) {
			listener.enterHandlerConditionState(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitHandlerConditionState) {
			listener.exitHandlerConditionState(this);
		}
	}
}
export class HandlerConditionNameContext extends HandlerConditionValueContext {
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(ctx: HandlerConditionValueContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterHandlerConditionName) {
			listener.enterHandlerConditionName(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitHandlerConditionName) {
			listener.exitHandlerConditionName(this);
		}
	}
}
export class HandlerConditionWarningContext extends HandlerConditionValueContext {
	public SQLWARNING(): TerminalNode { return this.getToken(MariaDBParser.SQLWARNING, 0); }
	constructor(ctx: HandlerConditionValueContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterHandlerConditionWarning) {
			listener.enterHandlerConditionWarning(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitHandlerConditionWarning) {
			listener.exitHandlerConditionWarning(this);
		}
	}
}
export class HandlerConditionNotfoundContext extends HandlerConditionValueContext {
	public NOT(): TerminalNode { return this.getToken(MariaDBParser.NOT, 0); }
	public FOUND(): TerminalNode { return this.getToken(MariaDBParser.FOUND, 0); }
	constructor(ctx: HandlerConditionValueContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterHandlerConditionNotfound) {
			listener.enterHandlerConditionNotfound(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitHandlerConditionNotfound) {
			listener.exitHandlerConditionNotfound(this);
		}
	}
}
export class HandlerConditionExceptionContext extends HandlerConditionValueContext {
	public SQLEXCEPTION(): TerminalNode { return this.getToken(MariaDBParser.SQLEXCEPTION, 0); }
	constructor(ctx: HandlerConditionValueContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterHandlerConditionException) {
			listener.enterHandlerConditionException(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitHandlerConditionException) {
			listener.exitHandlerConditionException(this);
		}
	}
}


export class ProcedureSqlStatementContext extends ParserRuleContext {
	public SEMI(): TerminalNode { return this.getToken(MariaDBParser.SEMI, 0); }
	public compoundStatement(): CompoundStatementContext | undefined {
		return this.tryGetRuleContext(0, CompoundStatementContext);
	}
	public sqlStatement(): SqlStatementContext | undefined {
		return this.tryGetRuleContext(0, SqlStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_procedureSqlStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterProcedureSqlStatement) {
			listener.enterProcedureSqlStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitProcedureSqlStatement) {
			listener.exitProcedureSqlStatement(this);
		}
	}
}


export class CaseAlternativeContext extends ParserRuleContext {
	public WHEN(): TerminalNode { return this.getToken(MariaDBParser.WHEN, 0); }
	public THEN(): TerminalNode { return this.getToken(MariaDBParser.THEN, 0); }
	public constant(): ConstantContext | undefined {
		return this.tryGetRuleContext(0, ConstantContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public procedureSqlStatement(): ProcedureSqlStatementContext[];
	public procedureSqlStatement(i: number): ProcedureSqlStatementContext;
	public procedureSqlStatement(i?: number): ProcedureSqlStatementContext | ProcedureSqlStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureSqlStatementContext);
		} else {
			return this.getRuleContext(i, ProcedureSqlStatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_caseAlternative; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCaseAlternative) {
			listener.enterCaseAlternative(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCaseAlternative) {
			listener.exitCaseAlternative(this);
		}
	}
}


export class ElifAlternativeContext extends ParserRuleContext {
	public ELSEIF(): TerminalNode { return this.getToken(MariaDBParser.ELSEIF, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public THEN(): TerminalNode { return this.getToken(MariaDBParser.THEN, 0); }
	public procedureSqlStatement(): ProcedureSqlStatementContext[];
	public procedureSqlStatement(i: number): ProcedureSqlStatementContext;
	public procedureSqlStatement(i?: number): ProcedureSqlStatementContext | ProcedureSqlStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureSqlStatementContext);
		} else {
			return this.getRuleContext(i, ProcedureSqlStatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_elifAlternative; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterElifAlternative) {
			listener.enterElifAlternative(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitElifAlternative) {
			listener.exitElifAlternative(this);
		}
	}
}


export class AlterUserContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_alterUser; }
	public copyFrom(ctx: AlterUserContext): void {
		super.copyFrom(ctx);
	}
}
export class AlterUserMysqlV56Context extends AlterUserContext {
	public ALTER(): TerminalNode { return this.getToken(MariaDBParser.ALTER, 0); }
	public USER(): TerminalNode { return this.getToken(MariaDBParser.USER, 0); }
	public userSpecification(): UserSpecificationContext[];
	public userSpecification(i: number): UserSpecificationContext;
	public userSpecification(i?: number): UserSpecificationContext | UserSpecificationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserSpecificationContext);
		} else {
			return this.getRuleContext(i, UserSpecificationContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(ctx: AlterUserContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterUserMysqlV56) {
			listener.enterAlterUserMysqlV56(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterUserMysqlV56) {
			listener.exitAlterUserMysqlV56(this);
		}
	}
}
export class AlterUserMysqlV80Context extends AlterUserContext {
	public _tlsNone!: Token;
	public ALTER(): TerminalNode { return this.getToken(MariaDBParser.ALTER, 0); }
	public USER(): TerminalNode { return this.getToken(MariaDBParser.USER, 0); }
	public userAuthOption(): UserAuthOptionContext[];
	public userAuthOption(i: number): UserAuthOptionContext;
	public userAuthOption(i?: number): UserAuthOptionContext | UserAuthOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserAuthOptionContext);
		} else {
			return this.getRuleContext(i, UserAuthOptionContext);
		}
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	public REQUIRE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REQUIRE, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WITH, 0); }
	public userPasswordOption(): UserPasswordOptionContext[];
	public userPasswordOption(i: number): UserPasswordOptionContext;
	public userPasswordOption(i?: number): UserPasswordOptionContext | UserPasswordOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserPasswordOptionContext);
		} else {
			return this.getRuleContext(i, UserPasswordOptionContext);
		}
	}
	public userLockOption(): UserLockOptionContext[];
	public userLockOption(i: number): UserLockOptionContext;
	public userLockOption(i?: number): UserLockOptionContext | UserLockOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserLockOptionContext);
		} else {
			return this.getRuleContext(i, UserLockOptionContext);
		}
	}
	public COMMENT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COMMENT, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_LITERAL, 0); }
	public ATTRIBUTE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ATTRIBUTE, 0); }
	public tlsOption(): TlsOptionContext[];
	public tlsOption(i: number): TlsOptionContext;
	public tlsOption(i?: number): TlsOptionContext | TlsOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TlsOptionContext);
		} else {
			return this.getRuleContext(i, TlsOptionContext);
		}
	}
	public NONE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NONE, 0); }
	public userResourceOption(): UserResourceOptionContext[];
	public userResourceOption(i: number): UserResourceOptionContext;
	public userResourceOption(i?: number): UserResourceOptionContext | UserResourceOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserResourceOptionContext);
		} else {
			return this.getRuleContext(i, UserResourceOptionContext);
		}
	}
	public AND(): TerminalNode[];
	public AND(i: number): TerminalNode;
	public AND(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.AND);
		} else {
			return this.getToken(MariaDBParser.AND, i);
		}
	}
	constructor(ctx: AlterUserContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAlterUserMysqlV80) {
			listener.enterAlterUserMysqlV80(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAlterUserMysqlV80) {
			listener.exitAlterUserMysqlV80(this);
		}
	}
}


export class CreateUserContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_createUser; }
	public copyFrom(ctx: CreateUserContext): void {
		super.copyFrom(ctx);
	}
}
export class CreateUserMysqlV56Context extends CreateUserContext {
	public CREATE(): TerminalNode { return this.getToken(MariaDBParser.CREATE, 0); }
	public USER(): TerminalNode { return this.getToken(MariaDBParser.USER, 0); }
	public userAuthOption(): UserAuthOptionContext[];
	public userAuthOption(i: number): UserAuthOptionContext;
	public userAuthOption(i?: number): UserAuthOptionContext | UserAuthOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserAuthOptionContext);
		} else {
			return this.getRuleContext(i, UserAuthOptionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(ctx: CreateUserContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCreateUserMysqlV56) {
			listener.enterCreateUserMysqlV56(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCreateUserMysqlV56) {
			listener.exitCreateUserMysqlV56(this);
		}
	}
}
export class CreateUserMysqlV80Context extends CreateUserContext {
	public _tlsNone!: Token;
	public CREATE(): TerminalNode { return this.getToken(MariaDBParser.CREATE, 0); }
	public USER(): TerminalNode { return this.getToken(MariaDBParser.USER, 0); }
	public userAuthOption(): UserAuthOptionContext[];
	public userAuthOption(i: number): UserAuthOptionContext;
	public userAuthOption(i?: number): UserAuthOptionContext | UserAuthOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserAuthOptionContext);
		} else {
			return this.getRuleContext(i, UserAuthOptionContext);
		}
	}
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	public REQUIRE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REQUIRE, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WITH, 0); }
	public userPasswordOption(): UserPasswordOptionContext[];
	public userPasswordOption(i: number): UserPasswordOptionContext;
	public userPasswordOption(i?: number): UserPasswordOptionContext | UserPasswordOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserPasswordOptionContext);
		} else {
			return this.getRuleContext(i, UserPasswordOptionContext);
		}
	}
	public userLockOption(): UserLockOptionContext[];
	public userLockOption(i: number): UserLockOptionContext;
	public userLockOption(i?: number): UserLockOptionContext | UserLockOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserLockOptionContext);
		} else {
			return this.getRuleContext(i, UserLockOptionContext);
		}
	}
	public COMMENT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COMMENT, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_LITERAL, 0); }
	public ATTRIBUTE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ATTRIBUTE, 0); }
	public tlsOption(): TlsOptionContext[];
	public tlsOption(i: number): TlsOptionContext;
	public tlsOption(i?: number): TlsOptionContext | TlsOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TlsOptionContext);
		} else {
			return this.getRuleContext(i, TlsOptionContext);
		}
	}
	public NONE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NONE, 0); }
	public userResourceOption(): UserResourceOptionContext[];
	public userResourceOption(i: number): UserResourceOptionContext;
	public userResourceOption(i?: number): UserResourceOptionContext | UserResourceOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserResourceOptionContext);
		} else {
			return this.getRuleContext(i, UserResourceOptionContext);
		}
	}
	public AND(): TerminalNode[];
	public AND(i: number): TerminalNode;
	public AND(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.AND);
		} else {
			return this.getToken(MariaDBParser.AND, i);
		}
	}
	constructor(ctx: CreateUserContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCreateUserMysqlV80) {
			listener.enterCreateUserMysqlV80(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCreateUserMysqlV80) {
			listener.exitCreateUserMysqlV80(this);
		}
	}
}


export class DropUserContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(MariaDBParser.DROP, 0); }
	public USER(): TerminalNode { return this.getToken(MariaDBParser.USER, 0); }
	public userName(): UserNameContext[];
	public userName(i: number): UserNameContext;
	public userName(i?: number): UserNameContext | UserNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserNameContext);
		} else {
			return this.getRuleContext(i, UserNameContext);
		}
	}
	public ifExists(): IfExistsContext | undefined {
		return this.tryGetRuleContext(0, IfExistsContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_dropUser; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDropUser) {
			listener.enterDropUser(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDropUser) {
			listener.exitDropUser(this);
		}
	}
}


export class GrantStatementContext extends ParserRuleContext {
	public _privilegeObject!: Token;
	public _tlsNone!: Token;
	public GRANT(): TerminalNode[];
	public GRANT(i: number): TerminalNode;
	public GRANT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.GRANT);
		} else {
			return this.getToken(MariaDBParser.GRANT, i);
		}
	}
	public privelegeClause(): PrivelegeClauseContext[];
	public privelegeClause(i: number): PrivelegeClauseContext;
	public privelegeClause(i?: number): PrivelegeClauseContext | PrivelegeClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PrivelegeClauseContext);
		} else {
			return this.getRuleContext(i, PrivelegeClauseContext);
		}
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ON, 0); }
	public privilegeLevel(): PrivilegeLevelContext | undefined {
		return this.tryGetRuleContext(0, PrivilegeLevelContext);
	}
	public TO(): TerminalNode { return this.getToken(MariaDBParser.TO, 0); }
	public userAuthOption(): UserAuthOptionContext[];
	public userAuthOption(i: number): UserAuthOptionContext;
	public userAuthOption(i?: number): UserAuthOptionContext | UserAuthOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserAuthOptionContext);
		} else {
			return this.getRuleContext(i, UserAuthOptionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	public REQUIRE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REQUIRE, 0); }
	public WITH(): TerminalNode[];
	public WITH(i: number): TerminalNode;
	public WITH(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.WITH);
		} else {
			return this.getToken(MariaDBParser.WITH, i);
		}
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AS, 0); }
	public userName(): UserNameContext[];
	public userName(i: number): UserNameContext;
	public userName(i?: number): UserNameContext | UserNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserNameContext);
		} else {
			return this.getRuleContext(i, UserNameContext);
		}
	}
	public ROLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ROLE, 0); }
	public roleOption(): RoleOptionContext | undefined {
		return this.tryGetRuleContext(0, RoleOptionContext);
	}
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TABLE, 0); }
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FUNCTION, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PROCEDURE, 0); }
	public tlsOption(): TlsOptionContext[];
	public tlsOption(i: number): TlsOptionContext;
	public tlsOption(i?: number): TlsOptionContext | TlsOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TlsOptionContext);
		} else {
			return this.getRuleContext(i, TlsOptionContext);
		}
	}
	public NONE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NONE, 0); }
	public OPTION(): TerminalNode[];
	public OPTION(i: number): TerminalNode;
	public OPTION(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.OPTION);
		} else {
			return this.getToken(MariaDBParser.OPTION, i);
		}
	}
	public userResourceOption(): UserResourceOptionContext[];
	public userResourceOption(i: number): UserResourceOptionContext;
	public userResourceOption(i?: number): UserResourceOptionContext | UserResourceOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserResourceOptionContext);
		} else {
			return this.getRuleContext(i, UserResourceOptionContext);
		}
	}
	public AND(): TerminalNode[];
	public AND(i: number): TerminalNode;
	public AND(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.AND);
		} else {
			return this.getToken(MariaDBParser.AND, i);
		}
	}
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ADMIN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_grantStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterGrantStatement) {
			listener.enterGrantStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitGrantStatement) {
			listener.exitGrantStatement(this);
		}
	}
}


export class RoleOptionContext extends ParserRuleContext {
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DEFAULT, 0); }
	public NONE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NONE, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ALL, 0); }
	public EXCEPT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EXCEPT, 0); }
	public userName(): UserNameContext[];
	public userName(i: number): UserNameContext;
	public userName(i?: number): UserNameContext | UserNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserNameContext);
		} else {
			return this.getRuleContext(i, UserNameContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_roleOption; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterRoleOption) {
			listener.enterRoleOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitRoleOption) {
			listener.exitRoleOption(this);
		}
	}
}


export class GrantProxyContext extends ParserRuleContext {
	public _fromFirst!: UserNameContext;
	public _toFirst!: UserNameContext;
	public _userName!: UserNameContext;
	public _toOther: UserNameContext[] = [];
	public GRANT(): TerminalNode[];
	public GRANT(i: number): TerminalNode;
	public GRANT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.GRANT);
		} else {
			return this.getToken(MariaDBParser.GRANT, i);
		}
	}
	public PROXY(): TerminalNode { return this.getToken(MariaDBParser.PROXY, 0); }
	public ON(): TerminalNode { return this.getToken(MariaDBParser.ON, 0); }
	public TO(): TerminalNode { return this.getToken(MariaDBParser.TO, 0); }
	public userName(): UserNameContext[];
	public userName(i: number): UserNameContext;
	public userName(i?: number): UserNameContext | UserNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserNameContext);
		} else {
			return this.getRuleContext(i, UserNameContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WITH, 0); }
	public OPTION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.OPTION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_grantProxy; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterGrantProxy) {
			listener.enterGrantProxy(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitGrantProxy) {
			listener.exitGrantProxy(this);
		}
	}
}


export class RenameUserContext extends ParserRuleContext {
	public RENAME(): TerminalNode { return this.getToken(MariaDBParser.RENAME, 0); }
	public USER(): TerminalNode { return this.getToken(MariaDBParser.USER, 0); }
	public renameUserClause(): RenameUserClauseContext[];
	public renameUserClause(i: number): RenameUserClauseContext;
	public renameUserClause(i?: number): RenameUserClauseContext | RenameUserClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RenameUserClauseContext);
		} else {
			return this.getRuleContext(i, RenameUserClauseContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_renameUser; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterRenameUser) {
			listener.enterRenameUser(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitRenameUser) {
			listener.exitRenameUser(this);
		}
	}
}


export class RevokeStatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_revokeStatement; }
	public copyFrom(ctx: RevokeStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class DetailRevokeContext extends RevokeStatementContext {
	public _privilegeObject!: Token;
	public REVOKE(): TerminalNode { return this.getToken(MariaDBParser.REVOKE, 0); }
	public privelegeClause(): PrivelegeClauseContext[];
	public privelegeClause(i: number): PrivelegeClauseContext;
	public privelegeClause(i?: number): PrivelegeClauseContext | PrivelegeClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PrivelegeClauseContext);
		} else {
			return this.getRuleContext(i, PrivelegeClauseContext);
		}
	}
	public ON(): TerminalNode { return this.getToken(MariaDBParser.ON, 0); }
	public privilegeLevel(): PrivilegeLevelContext {
		return this.getRuleContext(0, PrivilegeLevelContext);
	}
	public FROM(): TerminalNode { return this.getToken(MariaDBParser.FROM, 0); }
	public userName(): UserNameContext[];
	public userName(i: number): UserNameContext;
	public userName(i?: number): UserNameContext | UserNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserNameContext);
		} else {
			return this.getRuleContext(i, UserNameContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TABLE, 0); }
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FUNCTION, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PROCEDURE, 0); }
	constructor(ctx: RevokeStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDetailRevoke) {
			listener.enterDetailRevoke(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDetailRevoke) {
			listener.exitDetailRevoke(this);
		}
	}
}
export class ShortRevokeContext extends RevokeStatementContext {
	public REVOKE(): TerminalNode { return this.getToken(MariaDBParser.REVOKE, 0); }
	public ALL(): TerminalNode { return this.getToken(MariaDBParser.ALL, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	public GRANT(): TerminalNode { return this.getToken(MariaDBParser.GRANT, 0); }
	public OPTION(): TerminalNode { return this.getToken(MariaDBParser.OPTION, 0); }
	public FROM(): TerminalNode { return this.getToken(MariaDBParser.FROM, 0); }
	public userName(): UserNameContext[];
	public userName(i: number): UserNameContext;
	public userName(i?: number): UserNameContext | UserNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserNameContext);
		} else {
			return this.getRuleContext(i, UserNameContext);
		}
	}
	public PRIVILEGES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PRIVILEGES, 0); }
	constructor(ctx: RevokeStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterShortRevoke) {
			listener.enterShortRevoke(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitShortRevoke) {
			listener.exitShortRevoke(this);
		}
	}
}
export class RoleRevokeContext extends RevokeStatementContext {
	public REVOKE(): TerminalNode { return this.getToken(MariaDBParser.REVOKE, 0); }
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public FROM(): TerminalNode { return this.getToken(MariaDBParser.FROM, 0); }
	public userName(): UserNameContext[];
	public userName(i: number): UserNameContext;
	public userName(i?: number): UserNameContext | UserNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserNameContext);
		} else {
			return this.getRuleContext(i, UserNameContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(ctx: RevokeStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterRoleRevoke) {
			listener.enterRoleRevoke(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitRoleRevoke) {
			listener.exitRoleRevoke(this);
		}
	}
}


export class RevokeProxyContext extends ParserRuleContext {
	public _onUser!: UserNameContext;
	public _fromFirst!: UserNameContext;
	public _userName!: UserNameContext;
	public _fromOther: UserNameContext[] = [];
	public REVOKE(): TerminalNode { return this.getToken(MariaDBParser.REVOKE, 0); }
	public PROXY(): TerminalNode { return this.getToken(MariaDBParser.PROXY, 0); }
	public ON(): TerminalNode { return this.getToken(MariaDBParser.ON, 0); }
	public FROM(): TerminalNode { return this.getToken(MariaDBParser.FROM, 0); }
	public userName(): UserNameContext[];
	public userName(i: number): UserNameContext;
	public userName(i?: number): UserNameContext | UserNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserNameContext);
		} else {
			return this.getRuleContext(i, UserNameContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_revokeProxy; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterRevokeProxy) {
			listener.enterRevokeProxy(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitRevokeProxy) {
			listener.exitRevokeProxy(this);
		}
	}
}


export class SetPasswordStatementContext extends ParserRuleContext {
	public SET(): TerminalNode { return this.getToken(MariaDBParser.SET, 0); }
	public PASSWORD(): TerminalNode { return this.getToken(MariaDBParser.PASSWORD, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	public passwordFunctionClause(): PasswordFunctionClauseContext | undefined {
		return this.tryGetRuleContext(0, PasswordFunctionClauseContext);
	}
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_LITERAL, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FOR, 0); }
	public userName(): UserNameContext | undefined {
		return this.tryGetRuleContext(0, UserNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_setPasswordStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSetPasswordStatement) {
			listener.enterSetPasswordStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSetPasswordStatement) {
			listener.exitSetPasswordStatement(this);
		}
	}
}


export class UserSpecificationContext extends ParserRuleContext {
	public userName(): UserNameContext {
		return this.getRuleContext(0, UserNameContext);
	}
	public userPasswordOption(): UserPasswordOptionContext {
		return this.getRuleContext(0, UserPasswordOptionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_userSpecification; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterUserSpecification) {
			listener.enterUserSpecification(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitUserSpecification) {
			listener.exitUserSpecification(this);
		}
	}
}


export class UserAuthOptionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_userAuthOption; }
	public copyFrom(ctx: UserAuthOptionContext): void {
		super.copyFrom(ctx);
	}
}
export class HashAuthOptionContext extends UserAuthOptionContext {
	public _hashed!: Token;
	public userName(): UserNameContext {
		return this.getRuleContext(0, UserNameContext);
	}
	public IDENTIFIED(): TerminalNode { return this.getToken(MariaDBParser.IDENTIFIED, 0); }
	public BY(): TerminalNode { return this.getToken(MariaDBParser.BY, 0); }
	public PASSWORD(): TerminalNode { return this.getToken(MariaDBParser.PASSWORD, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.STRING_LITERAL, 0); }
	constructor(ctx: UserAuthOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterHashAuthOption) {
			listener.enterHashAuthOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitHashAuthOption) {
			listener.exitHashAuthOption(this);
		}
	}
}
export class StringAuthOptionContext extends UserAuthOptionContext {
	public userName(): UserNameContext {
		return this.getRuleContext(0, UserNameContext);
	}
	public IDENTIFIED(): TerminalNode { return this.getToken(MariaDBParser.IDENTIFIED, 0); }
	public BY(): TerminalNode { return this.getToken(MariaDBParser.BY, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.STRING_LITERAL, 0); }
	public RETAIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RETAIN, 0); }
	public CURRENT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CURRENT, 0); }
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PASSWORD, 0); }
	constructor(ctx: UserAuthOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterStringAuthOption) {
			listener.enterStringAuthOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitStringAuthOption) {
			listener.exitStringAuthOption(this);
		}
	}
}
export class ModuleAuthOptionContext extends UserAuthOptionContext {
	public userName(): UserNameContext {
		return this.getRuleContext(0, UserNameContext);
	}
	public IDENTIFIED(): TerminalNode { return this.getToken(MariaDBParser.IDENTIFIED, 0); }
	public authenticationRule(): AuthenticationRuleContext[];
	public authenticationRule(i: number): AuthenticationRuleContext;
	public authenticationRule(i?: number): AuthenticationRuleContext | AuthenticationRuleContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AuthenticationRuleContext);
		} else {
			return this.getRuleContext(i, AuthenticationRuleContext);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WITH, 0); }
	public VIA(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VIA, 0); }
	public OR(): TerminalNode[];
	public OR(i: number): TerminalNode;
	public OR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.OR);
		} else {
			return this.getToken(MariaDBParser.OR, i);
		}
	}
	constructor(ctx: UserAuthOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterModuleAuthOption) {
			listener.enterModuleAuthOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitModuleAuthOption) {
			listener.exitModuleAuthOption(this);
		}
	}
}
export class SimpleAuthOptionContext extends UserAuthOptionContext {
	public userName(): UserNameContext {
		return this.getRuleContext(0, UserNameContext);
	}
	constructor(ctx: UserAuthOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSimpleAuthOption) {
			listener.enterSimpleAuthOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSimpleAuthOption) {
			listener.exitSimpleAuthOption(this);
		}
	}
}


export class AuthenticationRuleContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_authenticationRule; }
	public copyFrom(ctx: AuthenticationRuleContext): void {
		super.copyFrom(ctx);
	}
}
export class ModuleContext extends AuthenticationRuleContext {
	public authPlugin(): AuthPluginContext {
		return this.getRuleContext(0, AuthPluginContext);
	}
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_LITERAL, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BY, 0); }
	public USING(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.USING, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AS, 0); }
	constructor(ctx: AuthenticationRuleContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterModule) {
			listener.enterModule(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitModule) {
			listener.exitModule(this);
		}
	}
}
export class PasswordModuleOptionContext extends AuthenticationRuleContext {
	public authPlugin(): AuthPluginContext {
		return this.getRuleContext(0, AuthPluginContext);
	}
	public passwordFunctionClause(): PasswordFunctionClauseContext {
		return this.getRuleContext(0, PasswordFunctionClauseContext);
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.USING, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AS, 0); }
	constructor(ctx: AuthenticationRuleContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterPasswordModuleOption) {
			listener.enterPasswordModuleOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitPasswordModuleOption) {
			listener.exitPasswordModuleOption(this);
		}
	}
}


export class TlsOptionContext extends ParserRuleContext {
	public SSL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SSL, 0); }
	public X509(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.X509, 0); }
	public CIPHER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CIPHER, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_LITERAL, 0); }
	public ISSUER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ISSUER, 0); }
	public SUBJECT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SUBJECT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_tlsOption; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTlsOption) {
			listener.enterTlsOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTlsOption) {
			listener.exitTlsOption(this);
		}
	}
}


export class UserResourceOptionContext extends ParserRuleContext {
	public MAX_QUERIES_PER_HOUR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MAX_QUERIES_PER_HOUR, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	public MAX_UPDATES_PER_HOUR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MAX_UPDATES_PER_HOUR, 0); }
	public MAX_CONNECTIONS_PER_HOUR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MAX_CONNECTIONS_PER_HOUR, 0); }
	public MAX_USER_CONNECTIONS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MAX_USER_CONNECTIONS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_userResourceOption; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterUserResourceOption) {
			listener.enterUserResourceOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitUserResourceOption) {
			listener.exitUserResourceOption(this);
		}
	}
}


export class UserPasswordOptionContext extends ParserRuleContext {
	public _expireType!: Token;
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PASSWORD, 0); }
	public EXPIRE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EXPIRE, 0); }
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public DAY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DAY, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DEFAULT, 0); }
	public NEVER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NEVER, 0); }
	public INTERVAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INTERVAL, 0); }
	public HISTORY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.HISTORY, 0); }
	public REUSE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REUSE, 0); }
	public REQUIRE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REQUIRE, 0); }
	public CURRENT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CURRENT, 0); }
	public OPTIONAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.OPTIONAL, 0); }
	public FAILED_LOGIN_ATTEMPTS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FAILED_LOGIN_ATTEMPTS, 0); }
	public PASSWORD_LOCK_TIME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PASSWORD_LOCK_TIME, 0); }
	public UNBOUNDED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UNBOUNDED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_userPasswordOption; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterUserPasswordOption) {
			listener.enterUserPasswordOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitUserPasswordOption) {
			listener.exitUserPasswordOption(this);
		}
	}
}


export class UserLockOptionContext extends ParserRuleContext {
	public _lockType!: Token;
	public ACCOUNT(): TerminalNode { return this.getToken(MariaDBParser.ACCOUNT, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOCK, 0); }
	public UNLOCK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UNLOCK, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_userLockOption; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterUserLockOption) {
			listener.enterUserLockOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitUserLockOption) {
			listener.exitUserLockOption(this);
		}
	}
}


export class PrivelegeClauseContext extends ParserRuleContext {
	public privilege(): PrivilegeContext {
		return this.getRuleContext(0, PrivilegeContext);
	}
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LR_BRACKET, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RR_BRACKET, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_privelegeClause; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterPrivelegeClause) {
			listener.enterPrivelegeClause(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitPrivelegeClause) {
			listener.exitPrivelegeClause(this);
		}
	}
}


export class PrivilegeContext extends ParserRuleContext {
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ALL, 0); }
	public PRIVILEGES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PRIVILEGES, 0); }
	public ALTER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ALTER, 0); }
	public ROUTINE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ROUTINE, 0); }
	public CREATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CREATE, 0); }
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TEMPORARY, 0); }
	public TABLES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TABLES, 0); }
	public VIEW(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VIEW, 0); }
	public USER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.USER, 0); }
	public TABLESPACE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TABLESPACE, 0); }
	public ROLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ROLE, 0); }
	public DELETE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DELETE, 0); }
	public DROP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DROP, 0); }
	public EVENT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EVENT, 0); }
	public EXECUTE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EXECUTE, 0); }
	public FILE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FILE, 0); }
	public GRANT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GRANT, 0); }
	public OPTION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.OPTION, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INDEX, 0); }
	public INSERT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INSERT, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOCK, 0); }
	public PROCESS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PROCESS, 0); }
	public PROXY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PROXY, 0); }
	public REFERENCES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REFERENCES, 0); }
	public RELOAD(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RELOAD, 0); }
	public REPLICATION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REPLICATION, 0); }
	public CLIENT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CLIENT, 0); }
	public SLAVE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SLAVE, 0); }
	public REPLICA(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REPLICA, 0); }
	public MASTER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER, 0); }
	public ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ADMIN, 0); }
	public SELECT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SELECT, 0); }
	public SHOW(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SHOW, 0); }
	public DATABASES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DATABASES, 0); }
	public SCHEMAS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SCHEMAS, 0); }
	public SHUTDOWN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SHUTDOWN, 0); }
	public SUPER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SUPER, 0); }
	public TRIGGER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TRIGGER, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UPDATE, 0); }
	public USAGE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.USAGE, 0); }
	public APPLICATION_PASSWORD_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.APPLICATION_PASSWORD_ADMIN, 0); }
	public AUDIT_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AUDIT_ADMIN, 0); }
	public BACKUP_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BACKUP_ADMIN, 0); }
	public BINLOG_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BINLOG_ADMIN, 0); }
	public BINLOG_ENCRYPTION_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BINLOG_ENCRYPTION_ADMIN, 0); }
	public CLONE_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CLONE_ADMIN, 0); }
	public CONNECTION_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONNECTION_ADMIN, 0); }
	public ENCRYPTION_KEY_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ENCRYPTION_KEY_ADMIN, 0); }
	public FIREWALL_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FIREWALL_ADMIN, 0); }
	public FIREWALL_USER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FIREWALL_USER, 0); }
	public FLUSH_OPTIMIZER_COSTS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FLUSH_OPTIMIZER_COSTS, 0); }
	public FLUSH_STATUS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FLUSH_STATUS, 0); }
	public FLUSH_TABLES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FLUSH_TABLES, 0); }
	public FLUSH_USER_RESOURCES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FLUSH_USER_RESOURCES, 0); }
	public GROUP_REPLICATION_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GROUP_REPLICATION_ADMIN, 0); }
	public INNODB_REDO_LOG_ARCHIVE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INNODB_REDO_LOG_ARCHIVE, 0); }
	public INNODB_REDO_LOG_ENABLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INNODB_REDO_LOG_ENABLE, 0); }
	public NDB_STORED_USER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NDB_STORED_USER, 0); }
	public PASSWORDLESS_USER_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PASSWORDLESS_USER_ADMIN, 0); }
	public PERSIST_RO_VARIABLES_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PERSIST_RO_VARIABLES_ADMIN, 0); }
	public REPLICATION_APPLIER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REPLICATION_APPLIER, 0); }
	public REPLICATION_SLAVE_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REPLICATION_SLAVE_ADMIN, 0); }
	public RESOURCE_GROUP_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RESOURCE_GROUP_ADMIN, 0); }
	public RESOURCE_GROUP_USER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RESOURCE_GROUP_USER, 0); }
	public ROLE_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ROLE_ADMIN, 0); }
	public SERVICE_CONNECTION_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SERVICE_CONNECTION_ADMIN, 0); }
	public SESSION_VARIABLES_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SESSION_VARIABLES_ADMIN, 0); }
	public SET_USER_ID(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SET_USER_ID, 0); }
	public SHOW_ROUTINE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SHOW_ROUTINE, 0); }
	public SYSTEM_USER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SYSTEM_USER, 0); }
	public SYSTEM_VARIABLES_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SYSTEM_VARIABLES_ADMIN, 0); }
	public TABLE_ENCRYPTION_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TABLE_ENCRYPTION_ADMIN, 0); }
	public VERSION_TOKEN_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VERSION_TOKEN_ADMIN, 0); }
	public XA_RECOVER_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.XA_RECOVER_ADMIN, 0); }
	public BINLOG_MONITOR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BINLOG_MONITOR, 0); }
	public BINLOG_REPLAY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BINLOG_REPLAY, 0); }
	public FEDERATED_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FEDERATED_ADMIN, 0); }
	public READ_ONLY_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.READ_ONLY_ADMIN, 0); }
	public REPLICATION_MASTER_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REPLICATION_MASTER_ADMIN, 0); }
	public BINLOG(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BINLOG, 0); }
	public MONITOR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MONITOR, 0); }
	public REPLAY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REPLAY, 0); }
	public FEDERATED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FEDERATED, 0); }
	public READ(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.READ, 0); }
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ONLY, 0); }
	public READ_ONLY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.READ_ONLY, 0); }
	public CONNECTION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONNECTION, 0); }
	public HISTORY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.HISTORY, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SET, 0); }
	public LOAD(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOAD, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FROM, 0); }
	public S3(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.S3, 0); }
	public INTO(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INTO, 0); }
	public INVOKE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INVOKE, 0); }
	public LAMBDA(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LAMBDA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_privilege; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterPrivilege) {
			listener.enterPrivilege(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitPrivilege) {
			listener.exitPrivilege(this);
		}
	}
}


export class PrivilegeLevelContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_privilegeLevel; }
	public copyFrom(ctx: PrivilegeLevelContext): void {
		super.copyFrom(ctx);
	}
}
export class CurrentSchemaPriviLevelContext extends PrivilegeLevelContext {
	public STAR(): TerminalNode { return this.getToken(MariaDBParser.STAR, 0); }
	constructor(ctx: PrivilegeLevelContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCurrentSchemaPriviLevel) {
			listener.enterCurrentSchemaPriviLevel(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCurrentSchemaPriviLevel) {
			listener.exitCurrentSchemaPriviLevel(this);
		}
	}
}
export class GlobalPrivLevelContext extends PrivilegeLevelContext {
	public STAR(): TerminalNode[];
	public STAR(i: number): TerminalNode;
	public STAR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.STAR);
		} else {
			return this.getToken(MariaDBParser.STAR, i);
		}
	}
	public DOT(): TerminalNode { return this.getToken(MariaDBParser.DOT, 0); }
	constructor(ctx: PrivilegeLevelContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterGlobalPrivLevel) {
			listener.enterGlobalPrivLevel(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitGlobalPrivLevel) {
			listener.exitGlobalPrivLevel(this);
		}
	}
}
export class DefiniteSchemaPrivLevelContext extends PrivilegeLevelContext {
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public DOT(): TerminalNode { return this.getToken(MariaDBParser.DOT, 0); }
	public STAR(): TerminalNode { return this.getToken(MariaDBParser.STAR, 0); }
	constructor(ctx: PrivilegeLevelContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDefiniteSchemaPrivLevel) {
			listener.enterDefiniteSchemaPrivLevel(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDefiniteSchemaPrivLevel) {
			listener.exitDefiniteSchemaPrivLevel(this);
		}
	}
}
export class DefiniteFullTablePrivLevelContext extends PrivilegeLevelContext {
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public DOT(): TerminalNode { return this.getToken(MariaDBParser.DOT, 0); }
	constructor(ctx: PrivilegeLevelContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDefiniteFullTablePrivLevel) {
			listener.enterDefiniteFullTablePrivLevel(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDefiniteFullTablePrivLevel) {
			listener.exitDefiniteFullTablePrivLevel(this);
		}
	}
}
export class DefiniteFullTablePrivLevel2Context extends PrivilegeLevelContext {
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public dottedId(): DottedIdContext {
		return this.getRuleContext(0, DottedIdContext);
	}
	constructor(ctx: PrivilegeLevelContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDefiniteFullTablePrivLevel2) {
			listener.enterDefiniteFullTablePrivLevel2(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDefiniteFullTablePrivLevel2) {
			listener.exitDefiniteFullTablePrivLevel2(this);
		}
	}
}
export class DefiniteTablePrivLevelContext extends PrivilegeLevelContext {
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(ctx: PrivilegeLevelContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDefiniteTablePrivLevel) {
			listener.enterDefiniteTablePrivLevel(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDefiniteTablePrivLevel) {
			listener.exitDefiniteTablePrivLevel(this);
		}
	}
}


export class RenameUserClauseContext extends ParserRuleContext {
	public _fromFirst!: UserNameContext;
	public _toFirst!: UserNameContext;
	public TO(): TerminalNode { return this.getToken(MariaDBParser.TO, 0); }
	public userName(): UserNameContext[];
	public userName(i: number): UserNameContext;
	public userName(i?: number): UserNameContext | UserNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserNameContext);
		} else {
			return this.getRuleContext(i, UserNameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_renameUserClause; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterRenameUserClause) {
			listener.enterRenameUserClause(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitRenameUserClause) {
			listener.exitRenameUserClause(this);
		}
	}
}


export class AnalyzeTableContext extends ParserRuleContext {
	public _actionOption!: Token;
	public ANALYZE(): TerminalNode { return this.getToken(MariaDBParser.ANALYZE, 0); }
	public tables(): TablesContext {
		return this.getRuleContext(0, TablesContext);
	}
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TABLE, 0); }
	public TABLES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TABLES, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UPDATE, 0); }
	public HISTOGRAM(): TerminalNode[];
	public HISTOGRAM(i: number): TerminalNode;
	public HISTOGRAM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.HISTOGRAM);
		} else {
			return this.getToken(MariaDBParser.HISTOGRAM, i);
		}
	}
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.ON);
		} else {
			return this.getToken(MariaDBParser.ON, i);
		}
	}
	public fullColumnName(): FullColumnNameContext[];
	public fullColumnName(i: number): FullColumnNameContext;
	public fullColumnName(i?: number): FullColumnNameContext | FullColumnNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FullColumnNameContext);
		} else {
			return this.getRuleContext(i, FullColumnNameContext);
		}
	}
	public DROP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DROP, 0); }
	public NO_WRITE_TO_BINLOG(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NO_WRITE_TO_BINLOG, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOCAL, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WITH, 0); }
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public BUCKETS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BUCKETS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_analyzeTable; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAnalyzeTable) {
			listener.enterAnalyzeTable(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAnalyzeTable) {
			listener.exitAnalyzeTable(this);
		}
	}
}


export class CheckTableContext extends ParserRuleContext {
	public CHECK(): TerminalNode { return this.getToken(MariaDBParser.CHECK, 0); }
	public TABLE(): TerminalNode { return this.getToken(MariaDBParser.TABLE, 0); }
	public tables(): TablesContext {
		return this.getRuleContext(0, TablesContext);
	}
	public checkTableOption(): CheckTableOptionContext[];
	public checkTableOption(i: number): CheckTableOptionContext;
	public checkTableOption(i?: number): CheckTableOptionContext | CheckTableOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CheckTableOptionContext);
		} else {
			return this.getRuleContext(i, CheckTableOptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_checkTable; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCheckTable) {
			listener.enterCheckTable(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCheckTable) {
			listener.exitCheckTable(this);
		}
	}
}


export class ChecksumTableContext extends ParserRuleContext {
	public _actionOption!: Token;
	public CHECKSUM(): TerminalNode { return this.getToken(MariaDBParser.CHECKSUM, 0); }
	public TABLE(): TerminalNode { return this.getToken(MariaDBParser.TABLE, 0); }
	public tables(): TablesContext {
		return this.getRuleContext(0, TablesContext);
	}
	public QUICK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.QUICK, 0); }
	public EXTENDED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EXTENDED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_checksumTable; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterChecksumTable) {
			listener.enterChecksumTable(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitChecksumTable) {
			listener.exitChecksumTable(this);
		}
	}
}


export class OptimizeTableContext extends ParserRuleContext {
	public _actionOption!: Token;
	public OPTIMIZE(): TerminalNode { return this.getToken(MariaDBParser.OPTIMIZE, 0); }
	public tables(): TablesContext {
		return this.getRuleContext(0, TablesContext);
	}
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TABLE, 0); }
	public TABLES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TABLES, 0); }
	public waitNowaitClause(): WaitNowaitClauseContext | undefined {
		return this.tryGetRuleContext(0, WaitNowaitClauseContext);
	}
	public NO_WRITE_TO_BINLOG(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NO_WRITE_TO_BINLOG, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOCAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_optimizeTable; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterOptimizeTable) {
			listener.enterOptimizeTable(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitOptimizeTable) {
			listener.exitOptimizeTable(this);
		}
	}
}


export class RepairTableContext extends ParserRuleContext {
	public _actionOption!: Token;
	public REPAIR(): TerminalNode { return this.getToken(MariaDBParser.REPAIR, 0); }
	public TABLE(): TerminalNode { return this.getToken(MariaDBParser.TABLE, 0); }
	public tables(): TablesContext {
		return this.getRuleContext(0, TablesContext);
	}
	public QUICK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.QUICK, 0); }
	public EXTENDED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EXTENDED, 0); }
	public USE_FRM(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.USE_FRM, 0); }
	public NO_WRITE_TO_BINLOG(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NO_WRITE_TO_BINLOG, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOCAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_repairTable; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterRepairTable) {
			listener.enterRepairTable(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitRepairTable) {
			listener.exitRepairTable(this);
		}
	}
}


export class CheckTableOptionContext extends ParserRuleContext {
	public FOR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FOR, 0); }
	public UPGRADE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UPGRADE, 0); }
	public QUICK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.QUICK, 0); }
	public FAST(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FAST, 0); }
	public MEDIUM(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MEDIUM, 0); }
	public EXTENDED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EXTENDED, 0); }
	public CHANGED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CHANGED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_checkTableOption; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCheckTableOption) {
			listener.enterCheckTableOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCheckTableOption) {
			listener.exitCheckTableOption(this);
		}
	}
}


export class CreateUdfunctionContext extends ParserRuleContext {
	public _returnType!: Token;
	public CREATE(): TerminalNode { return this.getToken(MariaDBParser.CREATE, 0); }
	public FUNCTION(): TerminalNode { return this.getToken(MariaDBParser.FUNCTION, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public RETURNS(): TerminalNode { return this.getToken(MariaDBParser.RETURNS, 0); }
	public SONAME(): TerminalNode { return this.getToken(MariaDBParser.SONAME, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.STRING_LITERAL, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING, 0); }
	public INTEGER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INTEGER, 0); }
	public REAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REAL, 0); }
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DECIMAL, 0); }
	public orReplace(): OrReplaceContext | undefined {
		return this.tryGetRuleContext(0, OrReplaceContext);
	}
	public AGGREGATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AGGREGATE, 0); }
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_createUdfunction; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCreateUdfunction) {
			listener.enterCreateUdfunction(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCreateUdfunction) {
			listener.exitCreateUdfunction(this);
		}
	}
}


export class InstallPluginContext extends ParserRuleContext {
	public INSTALL(): TerminalNode { return this.getToken(MariaDBParser.INSTALL, 0); }
	public PLUGIN(): TerminalNode { return this.getToken(MariaDBParser.PLUGIN, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public SONAME(): TerminalNode { return this.getToken(MariaDBParser.SONAME, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_installPlugin; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterInstallPlugin) {
			listener.enterInstallPlugin(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitInstallPlugin) {
			listener.exitInstallPlugin(this);
		}
	}
}


export class UninstallPluginContext extends ParserRuleContext {
	public UNINSTALL(): TerminalNode { return this.getToken(MariaDBParser.UNINSTALL, 0); }
	public PLUGIN(): TerminalNode { return this.getToken(MariaDBParser.PLUGIN, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_uninstallPlugin; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterUninstallPlugin) {
			listener.enterUninstallPlugin(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitUninstallPlugin) {
			listener.exitUninstallPlugin(this);
		}
	}
}


export class SetStatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_setStatement; }
	public copyFrom(ctx: SetStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class SetVariableContext extends SetStatementContext {
	public SET(): TerminalNode { return this.getToken(MariaDBParser.SET, 0); }
	public variableClause(): VariableClauseContext[];
	public variableClause(i: number): VariableClauseContext;
	public variableClause(i?: number): VariableClauseContext | VariableClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VariableClauseContext);
		} else {
			return this.getRuleContext(i, VariableClauseContext);
		}
	}
	public EQUAL_SYMBOL(): TerminalNode[];
	public EQUAL_SYMBOL(i: number): TerminalNode;
	public EQUAL_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.EQUAL_SYMBOL);
		} else {
			return this.getToken(MariaDBParser.EQUAL_SYMBOL, i);
		}
	}
	public VAR_ASSIGN(): TerminalNode[];
	public VAR_ASSIGN(i: number): TerminalNode;
	public VAR_ASSIGN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.VAR_ASSIGN);
		} else {
			return this.getToken(MariaDBParser.VAR_ASSIGN, i);
		}
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.ON);
		} else {
			return this.getToken(MariaDBParser.ON, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(ctx: SetStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSetVariable) {
			listener.enterSetVariable(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSetVariable) {
			listener.exitSetVariable(this);
		}
	}
}
export class SetCharsetContext extends SetStatementContext {
	public SET(): TerminalNode { return this.getToken(MariaDBParser.SET, 0); }
	public charSet(): CharSetContext {
		return this.getRuleContext(0, CharSetContext);
	}
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DEFAULT, 0); }
	constructor(ctx: SetStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSetCharset) {
			listener.enterSetCharset(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSetCharset) {
			listener.exitSetCharset(this);
		}
	}
}
export class SetNamesContext extends SetStatementContext {
	public SET(): TerminalNode { return this.getToken(MariaDBParser.SET, 0); }
	public NAMES(): TerminalNode { return this.getToken(MariaDBParser.NAMES, 0); }
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DEFAULT, 0); }
	public COLLATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COLLATE, 0); }
	public collationName(): CollationNameContext | undefined {
		return this.tryGetRuleContext(0, CollationNameContext);
	}
	constructor(ctx: SetStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSetNames) {
			listener.enterSetNames(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSetNames) {
			listener.exitSetNames(this);
		}
	}
}
export class SetPasswordContext extends SetStatementContext {
	public setPasswordStatement(): SetPasswordStatementContext {
		return this.getRuleContext(0, SetPasswordStatementContext);
	}
	constructor(ctx: SetStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSetPassword) {
			listener.enterSetPassword(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSetPassword) {
			listener.exitSetPassword(this);
		}
	}
}
export class SetTransactionContext extends SetStatementContext {
	public setTransactionStatement(): SetTransactionStatementContext {
		return this.getRuleContext(0, SetTransactionStatementContext);
	}
	constructor(ctx: SetStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSetTransaction) {
			listener.enterSetTransaction(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSetTransaction) {
			listener.exitSetTransaction(this);
		}
	}
}
export class SetAutocommitContext extends SetStatementContext {
	public setAutocommitStatement(): SetAutocommitStatementContext {
		return this.getRuleContext(0, SetAutocommitStatementContext);
	}
	constructor(ctx: SetStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSetAutocommit) {
			listener.enterSetAutocommit(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSetAutocommit) {
			listener.exitSetAutocommit(this);
		}
	}
}
export class SetNewValueInsideTriggerContext extends SetStatementContext {
	public SET(): TerminalNode { return this.getToken(MariaDBParser.SET, 0); }
	public fullId(): FullIdContext[];
	public fullId(i: number): FullIdContext;
	public fullId(i?: number): FullIdContext | FullIdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FullIdContext);
		} else {
			return this.getRuleContext(i, FullIdContext);
		}
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public EQUAL_SYMBOL(): TerminalNode[];
	public EQUAL_SYMBOL(i: number): TerminalNode;
	public EQUAL_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.EQUAL_SYMBOL);
		} else {
			return this.getToken(MariaDBParser.EQUAL_SYMBOL, i);
		}
	}
	public VAR_ASSIGN(): TerminalNode[];
	public VAR_ASSIGN(i: number): TerminalNode;
	public VAR_ASSIGN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.VAR_ASSIGN);
		} else {
			return this.getToken(MariaDBParser.VAR_ASSIGN, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(ctx: SetStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSetNewValueInsideTrigger) {
			listener.enterSetNewValueInsideTrigger(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSetNewValueInsideTrigger) {
			listener.exitSetNewValueInsideTrigger(this);
		}
	}
}


export class ShowStatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_showStatement; }
	public copyFrom(ctx: ShowStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class ShowMasterLogsContext extends ShowStatementContext {
	public _logFormat!: Token;
	public SHOW(): TerminalNode { return this.getToken(MariaDBParser.SHOW, 0); }
	public LOGS(): TerminalNode { return this.getToken(MariaDBParser.LOGS, 0); }
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BINARY, 0); }
	public MASTER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER, 0); }
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterShowMasterLogs) {
			listener.enterShowMasterLogs(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitShowMasterLogs) {
			listener.exitShowMasterLogs(this);
		}
	}
}
export class ShowBinLogEventsContext extends ShowStatementContext {
	public _filename!: Token;
	public _fromPosition!: DecimalLiteralContext;
	public SHOW(): TerminalNode { return this.getToken(MariaDBParser.SHOW, 0); }
	public BINLOG(): TerminalNode { return this.getToken(MariaDBParser.BINLOG, 0); }
	public EVENTS(): TerminalNode { return this.getToken(MariaDBParser.EVENTS, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.IN, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FROM, 0); }
	public limitClause(): LimitClauseContext | undefined {
		return this.tryGetRuleContext(0, LimitClauseContext);
	}
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_LITERAL, 0); }
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterShowBinLogEvents) {
			listener.enterShowBinLogEvents(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitShowBinLogEvents) {
			listener.exitShowBinLogEvents(this);
		}
	}
}
export class ShowRelayLogEventsContext extends ShowStatementContext {
	public _connectionName!: Token;
	public _filename!: Token;
	public _fromPosition!: DecimalLiteralContext;
	public _channelName!: Token;
	public SHOW(): TerminalNode { return this.getToken(MariaDBParser.SHOW, 0); }
	public RELAYLOG(): TerminalNode { return this.getToken(MariaDBParser.RELAYLOG, 0); }
	public EVENTS(): TerminalNode { return this.getToken(MariaDBParser.EVENTS, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.IN, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FROM, 0); }
	public limitClause(): LimitClauseContext | undefined {
		return this.tryGetRuleContext(0, LimitClauseContext);
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FOR, 0); }
	public CHANNEL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CHANNEL, 0); }
	public STRING_LITERAL(): TerminalNode[];
	public STRING_LITERAL(i: number): TerminalNode;
	public STRING_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.STRING_LITERAL);
		} else {
			return this.getToken(MariaDBParser.STRING_LITERAL, i);
		}
	}
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterShowRelayLogEvents) {
			listener.enterShowRelayLogEvents(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitShowRelayLogEvents) {
			listener.exitShowRelayLogEvents(this);
		}
	}
}
export class ShowObjectFilterContext extends ShowStatementContext {
	public SHOW(): TerminalNode { return this.getToken(MariaDBParser.SHOW, 0); }
	public showCommonEntity(): ShowCommonEntityContext {
		return this.getRuleContext(0, ShowCommonEntityContext);
	}
	public showFilter(): ShowFilterContext | undefined {
		return this.tryGetRuleContext(0, ShowFilterContext);
	}
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterShowObjectFilter) {
			listener.enterShowObjectFilter(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitShowObjectFilter) {
			listener.exitShowObjectFilter(this);
		}
	}
}
export class ShowColumnsContext extends ShowStatementContext {
	public _columnsFormat!: Token;
	public _tableFormat!: Token;
	public _schemaFormat!: Token;
	public SHOW(): TerminalNode { return this.getToken(MariaDBParser.SHOW, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public COLUMNS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COLUMNS, 0); }
	public FIELDS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FIELDS, 0); }
	public FROM(): TerminalNode[];
	public FROM(i: number): TerminalNode;
	public FROM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.FROM);
		} else {
			return this.getToken(MariaDBParser.FROM, i);
		}
	}
	public IN(): TerminalNode[];
	public IN(i: number): TerminalNode;
	public IN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.IN);
		} else {
			return this.getToken(MariaDBParser.IN, i);
		}
	}
	public FULL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FULL, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public showFilter(): ShowFilterContext | undefined {
		return this.tryGetRuleContext(0, ShowFilterContext);
	}
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterShowColumns) {
			listener.enterShowColumns(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitShowColumns) {
			listener.exitShowColumns(this);
		}
	}
}
export class ShowCreateDbContext extends ShowStatementContext {
	public _schemaFormat!: Token;
	public SHOW(): TerminalNode { return this.getToken(MariaDBParser.SHOW, 0); }
	public CREATE(): TerminalNode { return this.getToken(MariaDBParser.CREATE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DATABASE, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SCHEMA, 0); }
	public ifNotExists(): IfNotExistsContext | undefined {
		return this.tryGetRuleContext(0, IfNotExistsContext);
	}
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterShowCreateDb) {
			listener.enterShowCreateDb(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitShowCreateDb) {
			listener.exitShowCreateDb(this);
		}
	}
}
export class ShowCreateFullIdObjectContext extends ShowStatementContext {
	public _namedEntity!: Token;
	public SHOW(): TerminalNode { return this.getToken(MariaDBParser.SHOW, 0); }
	public CREATE(): TerminalNode { return this.getToken(MariaDBParser.CREATE, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public EVENT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EVENT, 0); }
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FUNCTION, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PROCEDURE, 0); }
	public SEQUENCE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SEQUENCE, 0); }
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TABLE, 0); }
	public TRIGGER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TRIGGER, 0); }
	public VIEW(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VIEW, 0); }
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterShowCreateFullIdObject) {
			listener.enterShowCreateFullIdObject(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitShowCreateFullIdObject) {
			listener.exitShowCreateFullIdObject(this);
		}
	}
}
export class ShowCreatePackageContext extends ShowStatementContext {
	public SHOW(): TerminalNode { return this.getToken(MariaDBParser.SHOW, 0); }
	public CREATE(): TerminalNode { return this.getToken(MariaDBParser.CREATE, 0); }
	public PACKAGE(): TerminalNode { return this.getToken(MariaDBParser.PACKAGE, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public BODY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BODY, 0); }
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterShowCreatePackage) {
			listener.enterShowCreatePackage(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitShowCreatePackage) {
			listener.exitShowCreatePackage(this);
		}
	}
}
export class ShowCreateUserContext extends ShowStatementContext {
	public SHOW(): TerminalNode { return this.getToken(MariaDBParser.SHOW, 0); }
	public CREATE(): TerminalNode { return this.getToken(MariaDBParser.CREATE, 0); }
	public USER(): TerminalNode { return this.getToken(MariaDBParser.USER, 0); }
	public userName(): UserNameContext {
		return this.getRuleContext(0, UserNameContext);
	}
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterShowCreateUser) {
			listener.enterShowCreateUser(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitShowCreateUser) {
			listener.exitShowCreateUser(this);
		}
	}
}
export class ShowEngineContext extends ShowStatementContext {
	public _engineOption!: Token;
	public SHOW(): TerminalNode { return this.getToken(MariaDBParser.SHOW, 0); }
	public ENGINE(): TerminalNode { return this.getToken(MariaDBParser.ENGINE, 0); }
	public engineName(): EngineNameContext {
		return this.getRuleContext(0, EngineNameContext);
	}
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STATUS, 0); }
	public MUTEX(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MUTEX, 0); }
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterShowEngine) {
			listener.enterShowEngine(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitShowEngine) {
			listener.exitShowEngine(this);
		}
	}
}
export class ShowInnoDBStatusContext extends ShowStatementContext {
	public SHOW(): TerminalNode { return this.getToken(MariaDBParser.SHOW, 0); }
	public INNODB(): TerminalNode { return this.getToken(MariaDBParser.INNODB, 0); }
	public STATUS(): TerminalNode { return this.getToken(MariaDBParser.STATUS, 0); }
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterShowInnoDBStatus) {
			listener.enterShowInnoDBStatus(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitShowInnoDBStatus) {
			listener.exitShowInnoDBStatus(this);
		}
	}
}
export class ShowGlobalInfoContext extends ShowStatementContext {
	public SHOW(): TerminalNode { return this.getToken(MariaDBParser.SHOW, 0); }
	public showGlobalInfoClause(): ShowGlobalInfoClauseContext {
		return this.getRuleContext(0, ShowGlobalInfoClauseContext);
	}
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterShowGlobalInfo) {
			listener.enterShowGlobalInfo(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitShowGlobalInfo) {
			listener.exitShowGlobalInfo(this);
		}
	}
}
export class ShowErrorsContext extends ShowStatementContext {
	public _errorFormat!: Token;
	public SHOW(): TerminalNode { return this.getToken(MariaDBParser.SHOW, 0); }
	public ERRORS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ERRORS, 0); }
	public WARNINGS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WARNINGS, 0); }
	public limitClause(): LimitClauseContext | undefined {
		return this.tryGetRuleContext(0, LimitClauseContext);
	}
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterShowErrors) {
			listener.enterShowErrors(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitShowErrors) {
			listener.exitShowErrors(this);
		}
	}
}
export class ShowCountErrorsContext extends ShowStatementContext {
	public _errorFormat!: Token;
	public SHOW(): TerminalNode { return this.getToken(MariaDBParser.SHOW, 0); }
	public COUNT(): TerminalNode { return this.getToken(MariaDBParser.COUNT, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public STAR(): TerminalNode { return this.getToken(MariaDBParser.STAR, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public ERRORS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ERRORS, 0); }
	public WARNINGS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WARNINGS, 0); }
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterShowCountErrors) {
			listener.enterShowCountErrors(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitShowCountErrors) {
			listener.exitShowCountErrors(this);
		}
	}
}
export class ShowSchemaFilterContext extends ShowStatementContext {
	public _schemaFormat!: Token;
	public SHOW(): TerminalNode { return this.getToken(MariaDBParser.SHOW, 0); }
	public showSchemaEntity(): ShowSchemaEntityContext {
		return this.getRuleContext(0, ShowSchemaEntityContext);
	}
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public showFilter(): ShowFilterContext | undefined {
		return this.tryGetRuleContext(0, ShowFilterContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.IN, 0); }
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterShowSchemaFilter) {
			listener.enterShowSchemaFilter(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitShowSchemaFilter) {
			listener.exitShowSchemaFilter(this);
		}
	}
}
export class ShowRoutineContext extends ShowStatementContext {
	public _routine!: Token;
	public SHOW(): TerminalNode { return this.getToken(MariaDBParser.SHOW, 0); }
	public CODE(): TerminalNode { return this.getToken(MariaDBParser.CODE, 0); }
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FUNCTION, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PROCEDURE, 0); }
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterShowRoutine) {
			listener.enterShowRoutine(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitShowRoutine) {
			listener.exitShowRoutine(this);
		}
	}
}
export class ShowGrantsContext extends ShowStatementContext {
	public SHOW(): TerminalNode { return this.getToken(MariaDBParser.SHOW, 0); }
	public GRANTS(): TerminalNode { return this.getToken(MariaDBParser.GRANTS, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FOR, 0); }
	public userName(): UserNameContext | undefined {
		return this.tryGetRuleContext(0, UserNameContext);
	}
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterShowGrants) {
			listener.enterShowGrants(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitShowGrants) {
			listener.exitShowGrants(this);
		}
	}
}
export class ShowIndexesContext extends ShowStatementContext {
	public _indexFormat!: Token;
	public _tableFormat!: Token;
	public _schemaFormat!: Token;
	public SHOW(): TerminalNode { return this.getToken(MariaDBParser.SHOW, 0); }
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INDEX, 0); }
	public INDEXES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INDEXES, 0); }
	public KEYS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.KEYS, 0); }
	public FROM(): TerminalNode[];
	public FROM(i: number): TerminalNode;
	public FROM(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.FROM);
		} else {
			return this.getToken(MariaDBParser.FROM, i);
		}
	}
	public IN(): TerminalNode[];
	public IN(i: number): TerminalNode;
	public IN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.IN);
		} else {
			return this.getToken(MariaDBParser.IN, i);
		}
	}
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterShowIndexes) {
			listener.enterShowIndexes(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitShowIndexes) {
			listener.exitShowIndexes(this);
		}
	}
}
export class ShowOpenTablesContext extends ShowStatementContext {
	public _schemaFormat!: Token;
	public SHOW(): TerminalNode { return this.getToken(MariaDBParser.SHOW, 0); }
	public OPEN(): TerminalNode { return this.getToken(MariaDBParser.OPEN, 0); }
	public TABLES(): TerminalNode { return this.getToken(MariaDBParser.TABLES, 0); }
	public fullId(): FullIdContext | undefined {
		return this.tryGetRuleContext(0, FullIdContext);
	}
	public showFilter(): ShowFilterContext | undefined {
		return this.tryGetRuleContext(0, ShowFilterContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.IN, 0); }
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterShowOpenTables) {
			listener.enterShowOpenTables(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitShowOpenTables) {
			listener.exitShowOpenTables(this);
		}
	}
}
export class ShowProfileContext extends ShowStatementContext {
	public _queryCount!: DecimalLiteralContext;
	public SHOW(): TerminalNode { return this.getToken(MariaDBParser.SHOW, 0); }
	public PROFILE(): TerminalNode { return this.getToken(MariaDBParser.PROFILE, 0); }
	public showProfileType(): ShowProfileTypeContext[];
	public showProfileType(i: number): ShowProfileTypeContext;
	public showProfileType(i?: number): ShowProfileTypeContext | ShowProfileTypeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ShowProfileTypeContext);
		} else {
			return this.getRuleContext(i, ShowProfileTypeContext);
		}
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FOR, 0); }
	public QUERY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.QUERY, 0); }
	public limitClause(): LimitClauseContext | undefined {
		return this.tryGetRuleContext(0, LimitClauseContext);
	}
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterShowProfile) {
			listener.enterShowProfile(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitShowProfile) {
			listener.exitShowProfile(this);
		}
	}
}
export class ShowSlaveStatusContext extends ShowStatementContext {
	public _connectionName!: Token;
	public _channelName!: Token;
	public SHOW(): TerminalNode { return this.getToken(MariaDBParser.SHOW, 0); }
	public STATUS(): TerminalNode { return this.getToken(MariaDBParser.STATUS, 0); }
	public SLAVE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SLAVE, 0); }
	public REPLICA(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REPLICA, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FOR, 0); }
	public CHANNEL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CHANNEL, 0); }
	public STRING_LITERAL(): TerminalNode[];
	public STRING_LITERAL(i: number): TerminalNode;
	public STRING_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.STRING_LITERAL);
		} else {
			return this.getToken(MariaDBParser.STRING_LITERAL, i);
		}
	}
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterShowSlaveStatus) {
			listener.enterShowSlaveStatus(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitShowSlaveStatus) {
			listener.exitShowSlaveStatus(this);
		}
	}
}
export class ShowUserstatPluginContext extends ShowStatementContext {
	public SHOW(): TerminalNode { return this.getToken(MariaDBParser.SHOW, 0); }
	public USER_STATISTICS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.USER_STATISTICS, 0); }
	public CLIENT_STATISTICS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CLIENT_STATISTICS, 0); }
	public INDEX_STATISTICS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INDEX_STATISTICS, 0); }
	public TABLE_STATISTICS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TABLE_STATISTICS, 0); }
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterShowUserstatPlugin) {
			listener.enterShowUserstatPlugin(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitShowUserstatPlugin) {
			listener.exitShowUserstatPlugin(this);
		}
	}
}
export class ShowExplainContext extends ShowStatementContext {
	public SHOW(): TerminalNode { return this.getToken(MariaDBParser.SHOW, 0); }
	public EXPLAIN(): TerminalNode { return this.getToken(MariaDBParser.EXPLAIN, 0); }
	public FOR(): TerminalNode { return this.getToken(MariaDBParser.FOR, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	public formatJsonStatement(): FormatJsonStatementContext | undefined {
		return this.tryGetRuleContext(0, FormatJsonStatementContext);
	}
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterShowExplain) {
			listener.enterShowExplain(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitShowExplain) {
			listener.exitShowExplain(this);
		}
	}
}
export class ShowPackageStatusContext extends ShowStatementContext {
	public SHOW(): TerminalNode { return this.getToken(MariaDBParser.SHOW, 0); }
	public PACKAGE(): TerminalNode { return this.getToken(MariaDBParser.PACKAGE, 0); }
	public STATUS(): TerminalNode { return this.getToken(MariaDBParser.STATUS, 0); }
	public BODY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BODY, 0); }
	public showFilter(): ShowFilterContext | undefined {
		return this.tryGetRuleContext(0, ShowFilterContext);
	}
	constructor(ctx: ShowStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterShowPackageStatus) {
			listener.enterShowPackageStatus(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitShowPackageStatus) {
			listener.exitShowPackageStatus(this);
		}
	}
}


export class ExplainStatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_explainStatement; }
	public copyFrom(ctx: ExplainStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class ExplainForConnectionContext extends ExplainStatementContext {
	public EXPLAIN(): TerminalNode { return this.getToken(MariaDBParser.EXPLAIN, 0); }
	public FOR(): TerminalNode { return this.getToken(MariaDBParser.FOR, 0); }
	public CONNECTION(): TerminalNode { return this.getToken(MariaDBParser.CONNECTION, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	public formatJsonStatement(): FormatJsonStatementContext | undefined {
		return this.tryGetRuleContext(0, FormatJsonStatementContext);
	}
	constructor(ctx: ExplainStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterExplainForConnection) {
			listener.enterExplainForConnection(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitExplainForConnection) {
			listener.exitExplainForConnection(this);
		}
	}
}


export class VariableClauseContext extends ParserRuleContext {
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOCAL_ID, 0); }
	public GLOBAL_ID(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GLOBAL_ID, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GLOBAL, 0); }
	public SESSION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SESSION, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOCAL, 0); }
	public AT_SIGN(): TerminalNode[];
	public AT_SIGN(i: number): TerminalNode;
	public AT_SIGN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.AT_SIGN);
		} else {
			return this.getToken(MariaDBParser.AT_SIGN, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_variableClause; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterVariableClause) {
			listener.enterVariableClause(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitVariableClause) {
			listener.exitVariableClause(this);
		}
	}
}


export class ShowCommonEntityContext extends ParserRuleContext {
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CHARACTER, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SET, 0); }
	public COLLATION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COLLATION, 0); }
	public DATABASES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DATABASES, 0); }
	public SCHEMAS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SCHEMAS, 0); }
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FUNCTION, 0); }
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STATUS, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PROCEDURE, 0); }
	public VARIABLES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VARIABLES, 0); }
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GLOBAL, 0); }
	public SESSION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SESSION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_showCommonEntity; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterShowCommonEntity) {
			listener.enterShowCommonEntity(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitShowCommonEntity) {
			listener.exitShowCommonEntity(this);
		}
	}
}


export class ShowFilterContext extends ParserRuleContext {
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LIKE, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_LITERAL, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_showFilter; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterShowFilter) {
			listener.enterShowFilter(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitShowFilter) {
			listener.exitShowFilter(this);
		}
	}
}


export class ShowGlobalInfoClauseContext extends ParserRuleContext {
	public ENGINES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ENGINES, 0); }
	public STORAGE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STORAGE, 0); }
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STATUS, 0); }
	public MASTER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER, 0); }
	public BINLOG(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BINLOG, 0); }
	public PLUGINS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PLUGINS, 0); }
	public SONAME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SONAME, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_LITERAL, 0); }
	public showFilter(): ShowFilterContext | undefined {
		return this.tryGetRuleContext(0, ShowFilterContext);
	}
	public PRIVILEGES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PRIVILEGES, 0); }
	public PROCESSLIST(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PROCESSLIST, 0); }
	public FULL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FULL, 0); }
	public PROFILES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PROFILES, 0); }
	public LOCALES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOCALES, 0); }
	public HOSTS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.HOSTS, 0); }
	public SLAVE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SLAVE, 0); }
	public REPLICA(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REPLICA, 0); }
	public AUTHORS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AUTHORS, 0); }
	public CONTRIBUTORS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONTRIBUTORS, 0); }
	public QUERY_RESPONSE_TIME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.QUERY_RESPONSE_TIME, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ALL, 0); }
	public SLAVES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SLAVES, 0); }
	public REPLICAS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REPLICAS, 0); }
	public WSREP_MEMBERSHIP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WSREP_MEMBERSHIP, 0); }
	public WSREP_STATUS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WSREP_STATUS, 0); }
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TABLE, 0); }
	public TYPES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TYPES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_showGlobalInfoClause; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterShowGlobalInfoClause) {
			listener.enterShowGlobalInfoClause(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitShowGlobalInfoClause) {
			listener.exitShowGlobalInfoClause(this);
		}
	}
}


export class ShowSchemaEntityContext extends ParserRuleContext {
	public EVENTS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EVENTS, 0); }
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TABLE, 0); }
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STATUS, 0); }
	public TABLES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TABLES, 0); }
	public FULL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FULL, 0); }
	public TRIGGERS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TRIGGERS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_showSchemaEntity; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterShowSchemaEntity) {
			listener.enterShowSchemaEntity(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitShowSchemaEntity) {
			listener.exitShowSchemaEntity(this);
		}
	}
}


export class ShowProfileTypeContext extends ParserRuleContext {
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ALL, 0); }
	public BLOCK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BLOCK, 0); }
	public IO(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.IO, 0); }
	public CONTEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONTEXT, 0); }
	public SWITCHES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SWITCHES, 0); }
	public CPU(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CPU, 0); }
	public IPC(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.IPC, 0); }
	public MEMORY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MEMORY, 0); }
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PAGE, 0); }
	public FAULTS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FAULTS, 0); }
	public SOURCE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SOURCE, 0); }
	public SWAPS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SWAPS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_showProfileType; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterShowProfileType) {
			listener.enterShowProfileType(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitShowProfileType) {
			listener.exitShowProfileType(this);
		}
	}
}


export class BinlogStatementContext extends ParserRuleContext {
	public BINLOG(): TerminalNode { return this.getToken(MariaDBParser.BINLOG, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_binlogStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterBinlogStatement) {
			listener.enterBinlogStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitBinlogStatement) {
			listener.exitBinlogStatement(this);
		}
	}
}


export class CacheIndexStatementContext extends ParserRuleContext {
	public _schema!: UidContext;
	public CACHE(): TerminalNode { return this.getToken(MariaDBParser.CACHE, 0); }
	public INDEX(): TerminalNode { return this.getToken(MariaDBParser.INDEX, 0); }
	public tableIndexes(): TableIndexesContext[];
	public tableIndexes(i: number): TableIndexesContext;
	public tableIndexes(i?: number): TableIndexesContext | TableIndexesContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableIndexesContext);
		} else {
			return this.getRuleContext(i, TableIndexesContext);
		}
	}
	public IN(): TerminalNode { return this.getToken(MariaDBParser.IN, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PARTITION, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RR_BRACKET, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_cacheIndexStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCacheIndexStatement) {
			listener.enterCacheIndexStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCacheIndexStatement) {
			listener.exitCacheIndexStatement(this);
		}
	}
}


export class FlushStatementContext extends ParserRuleContext {
	public _flushFormat!: Token;
	public FLUSH(): TerminalNode { return this.getToken(MariaDBParser.FLUSH, 0); }
	public flushOption(): FlushOptionContext[];
	public flushOption(i: number): FlushOptionContext;
	public flushOption(i?: number): FlushOptionContext | FlushOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FlushOptionContext);
		} else {
			return this.getRuleContext(i, FlushOptionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	public NO_WRITE_TO_BINLOG(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NO_WRITE_TO_BINLOG, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOCAL, 0); }
	public USER_STATISTICS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.USER_STATISTICS, 0); }
	public CLIENT_STATISTICS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CLIENT_STATISTICS, 0); }
	public INDEX_STATISTICS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INDEX_STATISTICS, 0); }
	public TABLE_STATISTICS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TABLE_STATISTICS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_flushStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterFlushStatement) {
			listener.enterFlushStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitFlushStatement) {
			listener.exitFlushStatement(this);
		}
	}
}


export class KillStatementContext extends ParserRuleContext {
	public _connectionFormat!: Token;
	public KILL(): TerminalNode { return this.getToken(MariaDBParser.KILL, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public CONNECTION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONNECTION, 0); }
	public QUERY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.QUERY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_killStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterKillStatement) {
			listener.enterKillStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitKillStatement) {
			listener.exitKillStatement(this);
		}
	}
}


export class LoadIndexIntoCacheContext extends ParserRuleContext {
	public LOAD(): TerminalNode { return this.getToken(MariaDBParser.LOAD, 0); }
	public INDEX(): TerminalNode { return this.getToken(MariaDBParser.INDEX, 0); }
	public INTO(): TerminalNode { return this.getToken(MariaDBParser.INTO, 0); }
	public CACHE(): TerminalNode { return this.getToken(MariaDBParser.CACHE, 0); }
	public loadedTableIndexes(): LoadedTableIndexesContext[];
	public loadedTableIndexes(i: number): LoadedTableIndexesContext;
	public loadedTableIndexes(i?: number): LoadedTableIndexesContext | LoadedTableIndexesContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LoadedTableIndexesContext);
		} else {
			return this.getRuleContext(i, LoadedTableIndexesContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_loadIndexIntoCache; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterLoadIndexIntoCache) {
			listener.enterLoadIndexIntoCache(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitLoadIndexIntoCache) {
			listener.exitLoadIndexIntoCache(this);
		}
	}
}


export class ResetStatementContext extends ParserRuleContext {
	public RESET(): TerminalNode { return this.getToken(MariaDBParser.RESET, 0); }
	public QUERY(): TerminalNode { return this.getToken(MariaDBParser.QUERY, 0); }
	public CACHE(): TerminalNode { return this.getToken(MariaDBParser.CACHE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_resetStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterResetStatement) {
			listener.enterResetStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitResetStatement) {
			listener.exitResetStatement(this);
		}
	}
}


export class ShutdownStatementContext extends ParserRuleContext {
	public SHUTDOWN(): TerminalNode { return this.getToken(MariaDBParser.SHUTDOWN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_shutdownStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterShutdownStatement) {
			listener.enterShutdownStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitShutdownStatement) {
			listener.exitShutdownStatement(this);
		}
	}
}


export class TableIndexesContext extends ParserRuleContext {
	public _indexFormat!: Token;
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LR_BRACKET, 0); }
	public uidList(): UidListContext | undefined {
		return this.tryGetRuleContext(0, UidListContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RR_BRACKET, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INDEX, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.KEY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_tableIndexes; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableIndexes) {
			listener.enterTableIndexes(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableIndexes) {
			listener.exitTableIndexes(this);
		}
	}
}


export class FlushOptionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_flushOption; }
	public copyFrom(ctx: FlushOptionContext): void {
		super.copyFrom(ctx);
	}
}
export class SimpleFlushOptionContext extends FlushOptionContext {
	public DES_KEY_FILE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DES_KEY_FILE, 0); }
	public HOSTS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.HOSTS, 0); }
	public LOGS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOGS, 0); }
	public OPTIMIZER_COSTS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.OPTIMIZER_COSTS, 0); }
	public PRIVILEGES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PRIVILEGES, 0); }
	public QUERY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.QUERY, 0); }
	public CACHE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CACHE, 0); }
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STATUS, 0); }
	public USER_RESOURCES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.USER_RESOURCES, 0); }
	public TABLES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TABLES, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WITH, 0); }
	public READ(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.READ, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOCK, 0); }
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BINARY, 0); }
	public ENGINE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ENGINE, 0); }
	public ERROR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ERROR, 0); }
	public GENERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GENERAL, 0); }
	public RELAY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RELAY, 0); }
	public SLOW(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SLOW, 0); }
	constructor(ctx: FlushOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSimpleFlushOption) {
			listener.enterSimpleFlushOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSimpleFlushOption) {
			listener.exitSimpleFlushOption(this);
		}
	}
}
export class ChannelFlushOptionContext extends FlushOptionContext {
	public RELAY(): TerminalNode { return this.getToken(MariaDBParser.RELAY, 0); }
	public LOGS(): TerminalNode { return this.getToken(MariaDBParser.LOGS, 0); }
	public channelOption(): ChannelOptionContext | undefined {
		return this.tryGetRuleContext(0, ChannelOptionContext);
	}
	constructor(ctx: FlushOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterChannelFlushOption) {
			listener.enterChannelFlushOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitChannelFlushOption) {
			listener.exitChannelFlushOption(this);
		}
	}
}
export class TableFlushOptionContext extends FlushOptionContext {
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TABLE, 0); }
	public TABLES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TABLES, 0); }
	public tables(): TablesContext | undefined {
		return this.tryGetRuleContext(0, TablesContext);
	}
	public flushTableOption(): FlushTableOptionContext | undefined {
		return this.tryGetRuleContext(0, FlushTableOptionContext);
	}
	constructor(ctx: FlushOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableFlushOption) {
			listener.enterTableFlushOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableFlushOption) {
			listener.exitTableFlushOption(this);
		}
	}
}


export class FlushTableOptionContext extends ParserRuleContext {
	public WITH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WITH, 0); }
	public READ(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.READ, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOCK, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FOR, 0); }
	public EXPORT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EXPORT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_flushTableOption; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterFlushTableOption) {
			listener.enterFlushTableOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitFlushTableOption) {
			listener.exitFlushTableOption(this);
		}
	}
}


export class LoadedTableIndexesContext extends ParserRuleContext {
	public _partitionList!: UidListContext;
	public _indexFormat!: Token;
	public _indexList!: UidListContext;
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PARTITION, 0); }
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.LR_BRACKET);
		} else {
			return this.getToken(MariaDBParser.LR_BRACKET, i);
		}
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.RR_BRACKET);
		} else {
			return this.getToken(MariaDBParser.RR_BRACKET, i);
		}
	}
	public IGNORE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.IGNORE, 0); }
	public LEAVES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LEAVES, 0); }
	public uidList(): UidListContext[];
	public uidList(i: number): UidListContext;
	public uidList(i?: number): UidListContext | UidListContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidListContext);
		} else {
			return this.getRuleContext(i, UidListContext);
		}
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ALL, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INDEX, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.KEY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_loadedTableIndexes; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterLoadedTableIndexes) {
			listener.enterLoadedTableIndexes(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitLoadedTableIndexes) {
			listener.exitLoadedTableIndexes(this);
		}
	}
}


export class SimpleDescribeStatementContext extends ParserRuleContext {
	public _command!: Token;
	public _column!: UidContext;
	public _pattern!: Token;
	public tableName(): TableNameContext {
		return this.getRuleContext(0, TableNameContext);
	}
	public EXPLAIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EXPLAIN, 0); }
	public DESCRIBE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DESCRIBE, 0); }
	public DESC(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DESC, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_simpleDescribeStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSimpleDescribeStatement) {
			listener.enterSimpleDescribeStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSimpleDescribeStatement) {
			listener.exitSimpleDescribeStatement(this);
		}
	}
}


export class FullDescribeStatementContext extends ParserRuleContext {
	public _command!: Token;
	public _formatType!: Token;
	public _formatValue!: Token;
	public describeObjectClause(): DescribeObjectClauseContext {
		return this.getRuleContext(0, DescribeObjectClauseContext);
	}
	public EXPLAIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EXPLAIN, 0); }
	public DESCRIBE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DESCRIBE, 0); }
	public DESC(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DESC, 0); }
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	public EXTENDED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EXTENDED, 0); }
	public PARTITIONS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PARTITIONS, 0); }
	public FORMAT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FORMAT, 0); }
	public TRADITIONAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TRADITIONAL, 0); }
	public JSON(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JSON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_fullDescribeStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterFullDescribeStatement) {
			listener.enterFullDescribeStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitFullDescribeStatement) {
			listener.exitFullDescribeStatement(this);
		}
	}
}


export class FormatJsonStatementContext extends ParserRuleContext {
	public _formatValue!: Token;
	public FORMAT(): TerminalNode { return this.getToken(MariaDBParser.FORMAT, 0); }
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	public JSON(): TerminalNode { return this.getToken(MariaDBParser.JSON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_formatJsonStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterFormatJsonStatement) {
			listener.enterFormatJsonStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitFormatJsonStatement) {
			listener.exitFormatJsonStatement(this);
		}
	}
}


export class HelpStatementContext extends ParserRuleContext {
	public HELP(): TerminalNode { return this.getToken(MariaDBParser.HELP, 0); }
	public STRING_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_helpStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterHelpStatement) {
			listener.enterHelpStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitHelpStatement) {
			listener.exitHelpStatement(this);
		}
	}
}


export class UseStatementContext extends ParserRuleContext {
	public USE(): TerminalNode { return this.getToken(MariaDBParser.USE, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_useStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterUseStatement) {
			listener.enterUseStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitUseStatement) {
			listener.exitUseStatement(this);
		}
	}
}


export class SignalStatementContext extends ParserRuleContext {
	public SIGNAL(): TerminalNode { return this.getToken(MariaDBParser.SIGNAL, 0); }
	public ID(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ID, 0); }
	public REVERSE_QUOTE_ID(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REVERSE_QUOTE_ID, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SET, 0); }
	public signalConditionInformation(): SignalConditionInformationContext[];
	public signalConditionInformation(i: number): SignalConditionInformationContext;
	public signalConditionInformation(i?: number): SignalConditionInformationContext | SignalConditionInformationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SignalConditionInformationContext);
		} else {
			return this.getRuleContext(i, SignalConditionInformationContext);
		}
	}
	public SQLSTATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SQLSTATE, 0); }
	public stringLiteral(): StringLiteralContext | undefined {
		return this.tryGetRuleContext(0, StringLiteralContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VALUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_signalStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSignalStatement) {
			listener.enterSignalStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSignalStatement) {
			listener.exitSignalStatement(this);
		}
	}
}


export class ResignalStatementContext extends ParserRuleContext {
	public RESIGNAL(): TerminalNode { return this.getToken(MariaDBParser.RESIGNAL, 0); }
	public ID(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ID, 0); }
	public REVERSE_QUOTE_ID(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REVERSE_QUOTE_ID, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SET, 0); }
	public signalConditionInformation(): SignalConditionInformationContext[];
	public signalConditionInformation(i: number): SignalConditionInformationContext;
	public signalConditionInformation(i?: number): SignalConditionInformationContext | SignalConditionInformationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SignalConditionInformationContext);
		} else {
			return this.getRuleContext(i, SignalConditionInformationContext);
		}
	}
	public SQLSTATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SQLSTATE, 0); }
	public stringLiteral(): StringLiteralContext | undefined {
		return this.tryGetRuleContext(0, StringLiteralContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VALUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_resignalStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterResignalStatement) {
			listener.enterResignalStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitResignalStatement) {
			listener.exitResignalStatement(this);
		}
	}
}


export class SignalConditionInformationContext extends ParserRuleContext {
	public EQUAL_SYMBOL(): TerminalNode { return this.getToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	public CLASS_ORIGIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CLASS_ORIGIN, 0); }
	public SUBCLASS_ORIGIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SUBCLASS_ORIGIN, 0); }
	public MESSAGE_TEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MESSAGE_TEXT, 0); }
	public MYSQL_ERRNO(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MYSQL_ERRNO, 0); }
	public CONSTRAINT_CATALOG(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONSTRAINT_CATALOG, 0); }
	public CONSTRAINT_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONSTRAINT_SCHEMA, 0); }
	public CONSTRAINT_NAME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONSTRAINT_NAME, 0); }
	public CATALOG_NAME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CATALOG_NAME, 0); }
	public SCHEMA_NAME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SCHEMA_NAME, 0); }
	public TABLE_NAME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TABLE_NAME, 0); }
	public COLUMN_NAME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COLUMN_NAME, 0); }
	public CURSOR_NAME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CURSOR_NAME, 0); }
	public stringLiteral(): StringLiteralContext | undefined {
		return this.tryGetRuleContext(0, StringLiteralContext);
	}
	public DECIMAL_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DECIMAL_LITERAL, 0); }
	public mysqlVariable(): MysqlVariableContext | undefined {
		return this.tryGetRuleContext(0, MysqlVariableContext);
	}
	public simpleId(): SimpleIdContext | undefined {
		return this.tryGetRuleContext(0, SimpleIdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_signalConditionInformation; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSignalConditionInformation) {
			listener.enterSignalConditionInformation(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSignalConditionInformation) {
			listener.exitSignalConditionInformation(this);
		}
	}
}


export class DiagnosticsStatementContext extends ParserRuleContext {
	public GET(): TerminalNode { return this.getToken(MariaDBParser.GET, 0); }
	public DIAGNOSTICS(): TerminalNode { return this.getToken(MariaDBParser.DIAGNOSTICS, 0); }
	public CURRENT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CURRENT, 0); }
	public STACKED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STACKED, 0); }
	public variableClause(): VariableClauseContext[];
	public variableClause(i: number): VariableClauseContext;
	public variableClause(i?: number): VariableClauseContext | VariableClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VariableClauseContext);
		} else {
			return this.getRuleContext(i, VariableClauseContext);
		}
	}
	public EQUAL_SYMBOL(): TerminalNode[];
	public EQUAL_SYMBOL(i: number): TerminalNode;
	public EQUAL_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.EQUAL_SYMBOL);
		} else {
			return this.getToken(MariaDBParser.EQUAL_SYMBOL, i);
		}
	}
	public CONDITION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONDITION, 0); }
	public diagnosticsConditionInformationName(): DiagnosticsConditionInformationNameContext[];
	public diagnosticsConditionInformationName(i: number): DiagnosticsConditionInformationNameContext;
	public diagnosticsConditionInformationName(i?: number): DiagnosticsConditionInformationNameContext | DiagnosticsConditionInformationNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DiagnosticsConditionInformationNameContext);
		} else {
			return this.getRuleContext(i, DiagnosticsConditionInformationNameContext);
		}
	}
	public NUMBER(): TerminalNode[];
	public NUMBER(i: number): TerminalNode;
	public NUMBER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.NUMBER);
		} else {
			return this.getToken(MariaDBParser.NUMBER, i);
		}
	}
	public ROW_COUNT(): TerminalNode[];
	public ROW_COUNT(i: number): TerminalNode;
	public ROW_COUNT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.ROW_COUNT);
		} else {
			return this.getToken(MariaDBParser.ROW_COUNT, i);
		}
	}
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_diagnosticsStatement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDiagnosticsStatement) {
			listener.enterDiagnosticsStatement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDiagnosticsStatement) {
			listener.exitDiagnosticsStatement(this);
		}
	}
}


export class DiagnosticsConditionInformationNameContext extends ParserRuleContext {
	public CLASS_ORIGIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CLASS_ORIGIN, 0); }
	public SUBCLASS_ORIGIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SUBCLASS_ORIGIN, 0); }
	public RETURNED_SQLSTATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RETURNED_SQLSTATE, 0); }
	public MESSAGE_TEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MESSAGE_TEXT, 0); }
	public MYSQL_ERRNO(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MYSQL_ERRNO, 0); }
	public CONSTRAINT_CATALOG(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONSTRAINT_CATALOG, 0); }
	public CONSTRAINT_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONSTRAINT_SCHEMA, 0); }
	public CONSTRAINT_NAME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONSTRAINT_NAME, 0); }
	public CATALOG_NAME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CATALOG_NAME, 0); }
	public SCHEMA_NAME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SCHEMA_NAME, 0); }
	public TABLE_NAME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TABLE_NAME, 0); }
	public COLUMN_NAME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COLUMN_NAME, 0); }
	public CURSOR_NAME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CURSOR_NAME, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_diagnosticsConditionInformationName; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDiagnosticsConditionInformationName) {
			listener.enterDiagnosticsConditionInformationName(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDiagnosticsConditionInformationName) {
			listener.exitDiagnosticsConditionInformationName(this);
		}
	}
}


export class DescribeObjectClauseContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_describeObjectClause; }
	public copyFrom(ctx: DescribeObjectClauseContext): void {
		super.copyFrom(ctx);
	}
}
export class DescribeStatementsContext extends DescribeObjectClauseContext {
	public selectStatement(): SelectStatementContext | undefined {
		return this.tryGetRuleContext(0, SelectStatementContext);
	}
	public deleteStatement(): DeleteStatementContext | undefined {
		return this.tryGetRuleContext(0, DeleteStatementContext);
	}
	public insertStatement(): InsertStatementContext | undefined {
		return this.tryGetRuleContext(0, InsertStatementContext);
	}
	public replaceStatement(): ReplaceStatementContext | undefined {
		return this.tryGetRuleContext(0, ReplaceStatementContext);
	}
	public updateStatement(): UpdateStatementContext | undefined {
		return this.tryGetRuleContext(0, UpdateStatementContext);
	}
	constructor(ctx: DescribeObjectClauseContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDescribeStatements) {
			listener.enterDescribeStatements(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDescribeStatements) {
			listener.exitDescribeStatements(this);
		}
	}
}
export class DescribeConnectionContext extends DescribeObjectClauseContext {
	public FOR(): TerminalNode { return this.getToken(MariaDBParser.FOR, 0); }
	public CONNECTION(): TerminalNode { return this.getToken(MariaDBParser.CONNECTION, 0); }
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(ctx: DescribeObjectClauseContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDescribeConnection) {
			listener.enterDescribeConnection(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDescribeConnection) {
			listener.exitDescribeConnection(this);
		}
	}
}


export class FullIdContext extends ParserRuleContext {
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public DOT_ID(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DOT_ID, 0); }
	public DOT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_fullId; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterFullId) {
			listener.enterFullId(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitFullId) {
			listener.exitFullId(this);
		}
	}
}


export class TableNameContext extends ParserRuleContext {
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_tableName; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTableName) {
			listener.enterTableName(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTableName) {
			listener.exitTableName(this);
		}
	}
}


export class RoleNameContext extends ParserRuleContext {
	public userName(): UserNameContext | undefined {
		return this.tryGetRuleContext(0, UserNameContext);
	}
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_roleName; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterRoleName) {
			listener.enterRoleName(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitRoleName) {
			listener.exitRoleName(this);
		}
	}
}


export class FullColumnNameContext extends ParserRuleContext {
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public dottedId(): DottedIdContext[];
	public dottedId(i: number): DottedIdContext;
	public dottedId(i?: number): DottedIdContext | DottedIdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DottedIdContext);
		} else {
			return this.getRuleContext(i, DottedIdContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_fullColumnName; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterFullColumnName) {
			listener.enterFullColumnName(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitFullColumnName) {
			listener.exitFullColumnName(this);
		}
	}
}


export class IndexColumnNameContext extends ParserRuleContext {
	public _sortType!: Token;
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_LITERAL, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LR_BRACKET, 0); }
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RR_BRACKET, 0); }
	public ASC(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ASC, 0); }
	public DESC(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DESC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_indexColumnName; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterIndexColumnName) {
			listener.enterIndexColumnName(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitIndexColumnName) {
			listener.exitIndexColumnName(this);
		}
	}
}


export class UserNameContext extends ParserRuleContext {
	public STRING_USER_NAME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_USER_NAME, 0); }
	public STRING_USER_NAME_MARIADB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_USER_NAME_MARIADB, 0); }
	public ID(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ID, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_LITERAL, 0); }
	public ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ADMIN, 0); }
	public keywordsCanBeId(): KeywordsCanBeIdContext | undefined {
		return this.tryGetRuleContext(0, KeywordsCanBeIdContext);
	}
	public currentUserExpression(): CurrentUserExpressionContext | undefined {
		return this.tryGetRuleContext(0, CurrentUserExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_userName; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterUserName) {
			listener.enterUserName(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitUserName) {
			listener.exitUserName(this);
		}
	}
}


export class MysqlVariableContext extends ParserRuleContext {
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOCAL_ID, 0); }
	public GLOBAL_ID(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GLOBAL_ID, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_mysqlVariable; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterMysqlVariable) {
			listener.enterMysqlVariable(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitMysqlVariable) {
			listener.exitMysqlVariable(this);
		}
	}
}


export class CharsetNameContext extends ParserRuleContext {
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BINARY, 0); }
	public charsetNameBase(): CharsetNameBaseContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameBaseContext);
	}
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_LITERAL, 0); }
	public CHARSET_REVERSE_QOUTE_STRING(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_charsetName; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCharsetName) {
			listener.enterCharsetName(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCharsetName) {
			listener.exitCharsetName(this);
		}
	}
}


export class CollationNameContext extends ParserRuleContext {
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_collationName; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCollationName) {
			listener.enterCollationName(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCollationName) {
			listener.exitCollationName(this);
		}
	}
}


export class EngineNameContext extends ParserRuleContext {
	public engineNameBase(): EngineNameBaseContext | undefined {
		return this.tryGetRuleContext(0, EngineNameBaseContext);
	}
	public ID(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ID, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_engineName; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterEngineName) {
			listener.enterEngineName(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitEngineName) {
			listener.exitEngineName(this);
		}
	}
}


export class EngineNameBaseContext extends ParserRuleContext {
	public ARCHIVE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ARCHIVE, 0); }
	public BLACKHOLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BLACKHOLE, 0); }
	public CONNECT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONNECT, 0); }
	public CSV(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CSV, 0); }
	public FEDERATED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FEDERATED, 0); }
	public INNODB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INNODB, 0); }
	public MEMORY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MEMORY, 0); }
	public MRG_MYISAM(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MRG_MYISAM, 0); }
	public MYISAM(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MYISAM, 0); }
	public NDB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NDB, 0); }
	public NDBCLUSTER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NDBCLUSTER, 0); }
	public PERFORMANCE_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PERFORMANCE_SCHEMA, 0); }
	public TOKUDB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TOKUDB, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_engineNameBase; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterEngineNameBase) {
			listener.enterEngineNameBase(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitEngineNameBase) {
			listener.exitEngineNameBase(this);
		}
	}
}


export class EncryptedLiteralContext extends ParserRuleContext {
	public ENCRYPTED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ENCRYPTED, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_encryptedLiteral; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterEncryptedLiteral) {
			listener.enterEncryptedLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitEncryptedLiteral) {
			listener.exitEncryptedLiteral(this);
		}
	}
}


export class UuidSetContext extends ParserRuleContext {
	public decimalLiteral(): DecimalLiteralContext[];
	public decimalLiteral(i: number): DecimalLiteralContext;
	public decimalLiteral(i?: number): DecimalLiteralContext | DecimalLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DecimalLiteralContext);
		} else {
			return this.getRuleContext(i, DecimalLiteralContext);
		}
	}
	public MINUS(): TerminalNode[];
	public MINUS(i: number): TerminalNode;
	public MINUS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.MINUS);
		} else {
			return this.getToken(MariaDBParser.MINUS, i);
		}
	}
	public COLON_SYMB(): TerminalNode[];
	public COLON_SYMB(i: number): TerminalNode;
	public COLON_SYMB(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COLON_SYMB);
		} else {
			return this.getToken(MariaDBParser.COLON_SYMB, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_uuidSet; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterUuidSet) {
			listener.enterUuidSet(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitUuidSet) {
			listener.exitUuidSet(this);
		}
	}
}


export class XidContext extends ParserRuleContext {
	public _globalTableUid!: XuidStringIdContext;
	public _qualifier!: XuidStringIdContext;
	public _idFormat!: DecimalLiteralContext;
	public xuidStringId(): XuidStringIdContext[];
	public xuidStringId(i: number): XuidStringIdContext;
	public xuidStringId(i?: number): XuidStringIdContext | XuidStringIdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(XuidStringIdContext);
		} else {
			return this.getRuleContext(i, XuidStringIdContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_xid; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterXid) {
			listener.enterXid(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitXid) {
			listener.exitXid(this);
		}
	}
}


export class XuidStringIdContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_LITERAL, 0); }
	public BIT_STRING(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BIT_STRING, 0); }
	public HEXADECIMAL_LITERAL(): TerminalNode[];
	public HEXADECIMAL_LITERAL(i: number): TerminalNode;
	public HEXADECIMAL_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.HEXADECIMAL_LITERAL);
		} else {
			return this.getToken(MariaDBParser.HEXADECIMAL_LITERAL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_xuidStringId; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterXuidStringId) {
			listener.enterXuidStringId(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitXuidStringId) {
			listener.exitXuidStringId(this);
		}
	}
}


export class AuthPluginContext extends ParserRuleContext {
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_authPlugin; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAuthPlugin) {
			listener.enterAuthPlugin(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAuthPlugin) {
			listener.exitAuthPlugin(this);
		}
	}
}


export class UidContext extends ParserRuleContext {
	public simpleId(): SimpleIdContext | undefined {
		return this.tryGetRuleContext(0, SimpleIdContext);
	}
	public CHARSET_REVERSE_QOUTE_STRING(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_uid; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterUid) {
			listener.enterUid(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitUid) {
			listener.exitUid(this);
		}
	}
}


export class SimpleIdContext extends ParserRuleContext {
	public ID(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ID, 0); }
	public charsetNameBase(): CharsetNameBaseContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameBaseContext);
	}
	public transactionLevelBase(): TransactionLevelBaseContext | undefined {
		return this.tryGetRuleContext(0, TransactionLevelBaseContext);
	}
	public engineNameBase(): EngineNameBaseContext | undefined {
		return this.tryGetRuleContext(0, EngineNameBaseContext);
	}
	public privilegesBase(): PrivilegesBaseContext | undefined {
		return this.tryGetRuleContext(0, PrivilegesBaseContext);
	}
	public intervalTypeBase(): IntervalTypeBaseContext | undefined {
		return this.tryGetRuleContext(0, IntervalTypeBaseContext);
	}
	public dataTypeBase(): DataTypeBaseContext | undefined {
		return this.tryGetRuleContext(0, DataTypeBaseContext);
	}
	public keywordsCanBeId(): KeywordsCanBeIdContext | undefined {
		return this.tryGetRuleContext(0, KeywordsCanBeIdContext);
	}
	public scalarFunctionName(): ScalarFunctionNameContext | undefined {
		return this.tryGetRuleContext(0, ScalarFunctionNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_simpleId; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSimpleId) {
			listener.enterSimpleId(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSimpleId) {
			listener.exitSimpleId(this);
		}
	}
}


export class DottedIdContext extends ParserRuleContext {
	public DOT_ID(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DOT_ID, 0); }
	public DOT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DOT, 0); }
	public uid(): UidContext | undefined {
		return this.tryGetRuleContext(0, UidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_dottedId; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDottedId) {
			listener.enterDottedId(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDottedId) {
			listener.exitDottedId(this);
		}
	}
}


export class DecimalLiteralContext extends ParserRuleContext {
	public DECIMAL_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DECIMAL_LITERAL, 0); }
	public ZERO_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ZERO_DECIMAL, 0); }
	public ONE_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ONE_DECIMAL, 0); }
	public TWO_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TWO_DECIMAL, 0); }
	public REAL_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REAL_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_decimalLiteral; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDecimalLiteral) {
			listener.enterDecimalLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDecimalLiteral) {
			listener.exitDecimalLiteral(this);
		}
	}
}


export class FileSizeLiteralContext extends ParserRuleContext {
	public FILESIZE_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FILESIZE_LITERAL, 0); }
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_fileSizeLiteral; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterFileSizeLiteral) {
			listener.enterFileSizeLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitFileSizeLiteral) {
			listener.exitFileSizeLiteral(this);
		}
	}
}


export class StringLiteralContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode[];
	public STRING_LITERAL(i: number): TerminalNode;
	public STRING_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.STRING_LITERAL);
		} else {
			return this.getToken(MariaDBParser.STRING_LITERAL, i);
		}
	}
	public START_NATIONAL_STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.START_NATIONAL_STRING_LITERAL, 0); }
	public STRING_CHARSET_NAME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_CHARSET_NAME, 0); }
	public COLLATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COLLATE, 0); }
	public collationName(): CollationNameContext | undefined {
		return this.tryGetRuleContext(0, CollationNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_stringLiteral; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterStringLiteral) {
			listener.enterStringLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitStringLiteral) {
			listener.exitStringLiteral(this);
		}
	}
}


export class BooleanLiteralContext extends ParserRuleContext {
	public TRUE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TRUE, 0); }
	public FALSE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FALSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_booleanLiteral; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterBooleanLiteral) {
			listener.enterBooleanLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitBooleanLiteral) {
			listener.exitBooleanLiteral(this);
		}
	}
}


export class HexadecimalLiteralContext extends ParserRuleContext {
	public HEXADECIMAL_LITERAL(): TerminalNode { return this.getToken(MariaDBParser.HEXADECIMAL_LITERAL, 0); }
	public STRING_CHARSET_NAME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_CHARSET_NAME, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_hexadecimalLiteral; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterHexadecimalLiteral) {
			listener.enterHexadecimalLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitHexadecimalLiteral) {
			listener.exitHexadecimalLiteral(this);
		}
	}
}


export class NullNotnullContext extends ParserRuleContext {
	public NULL_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NULL_LITERAL, 0); }
	public NULL_SPEC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NULL_SPEC_LITERAL, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_nullNotnull; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterNullNotnull) {
			listener.enterNullNotnull(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitNullNotnull) {
			listener.exitNullNotnull(this);
		}
	}
}


export class ConstantContext extends ParserRuleContext {
	public _nullLiteral!: Token;
	public stringLiteral(): StringLiteralContext | undefined {
		return this.tryGetRuleContext(0, StringLiteralContext);
	}
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MINUS, 0); }
	public hexadecimalLiteral(): HexadecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, HexadecimalLiteralContext);
	}
	public booleanLiteral(): BooleanLiteralContext | undefined {
		return this.tryGetRuleContext(0, BooleanLiteralContext);
	}
	public REAL_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REAL_LITERAL, 0); }
	public BIT_STRING(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BIT_STRING, 0); }
	public NULL_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NULL_LITERAL, 0); }
	public NULL_SPEC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NULL_SPEC_LITERAL, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_constant; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterConstant) {
			listener.enterConstant(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitConstant) {
			listener.exitConstant(this);
		}
	}
}


export class DataTypeContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_dataType; }
	public copyFrom(ctx: DataTypeContext): void {
		super.copyFrom(ctx);
	}
}
export class StringDataTypeContext extends DataTypeContext {
	public _typeName!: Token;
	public CHAR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CHAR, 0); }
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CHARACTER, 0); }
	public VARCHAR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VARCHAR, 0); }
	public TINYTEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TINYTEXT, 0); }
	public TEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TEXT, 0); }
	public MEDIUMTEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MEDIUMTEXT, 0); }
	public LONGTEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LONGTEXT, 0); }
	public NCHAR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NCHAR, 0); }
	public NVARCHAR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NVARCHAR, 0); }
	public LONG(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LONG, 0); }
	public VARYING(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VARYING, 0); }
	public lengthOneDimension(): LengthOneDimensionContext | undefined {
		return this.tryGetRuleContext(0, LengthOneDimensionContext);
	}
	public BINARY(): TerminalNode[];
	public BINARY(i: number): TerminalNode;
	public BINARY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.BINARY);
		} else {
			return this.getToken(MariaDBParser.BINARY, i);
		}
	}
	public charSet(): CharSetContext | undefined {
		return this.tryGetRuleContext(0, CharSetContext);
	}
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public COLLATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COLLATE, 0); }
	public collationName(): CollationNameContext | undefined {
		return this.tryGetRuleContext(0, CollationNameContext);
	}
	constructor(ctx: DataTypeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterStringDataType) {
			listener.enterStringDataType(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitStringDataType) {
			listener.exitStringDataType(this);
		}
	}
}
export class NationalStringDataTypeContext extends DataTypeContext {
	public _typeName!: Token;
	public NATIONAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NATIONAL, 0); }
	public VARCHAR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VARCHAR, 0); }
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CHARACTER, 0); }
	public lengthOneDimension(): LengthOneDimensionContext | undefined {
		return this.tryGetRuleContext(0, LengthOneDimensionContext);
	}
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BINARY, 0); }
	public NCHAR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NCHAR, 0); }
	constructor(ctx: DataTypeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterNationalStringDataType) {
			listener.enterNationalStringDataType(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitNationalStringDataType) {
			listener.exitNationalStringDataType(this);
		}
	}
}
export class NationalVaryingStringDataTypeContext extends DataTypeContext {
	public _typeName!: Token;
	public NATIONAL(): TerminalNode { return this.getToken(MariaDBParser.NATIONAL, 0); }
	public VARYING(): TerminalNode { return this.getToken(MariaDBParser.VARYING, 0); }
	public CHAR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CHAR, 0); }
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CHARACTER, 0); }
	public lengthOneDimension(): LengthOneDimensionContext | undefined {
		return this.tryGetRuleContext(0, LengthOneDimensionContext);
	}
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BINARY, 0); }
	constructor(ctx: DataTypeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterNationalVaryingStringDataType) {
			listener.enterNationalVaryingStringDataType(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitNationalVaryingStringDataType) {
			listener.exitNationalVaryingStringDataType(this);
		}
	}
}
export class DimensionDataTypeContext extends DataTypeContext {
	public _typeName!: Token;
	public TINYINT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TINYINT, 0); }
	public SMALLINT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SMALLINT, 0); }
	public MEDIUMINT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MEDIUMINT, 0); }
	public INT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INT, 0); }
	public INTEGER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INTEGER, 0); }
	public BIGINT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BIGINT, 0); }
	public MIDDLEINT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MIDDLEINT, 0); }
	public INT1(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INT1, 0); }
	public INT2(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INT2, 0); }
	public INT3(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INT3, 0); }
	public INT4(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INT4, 0); }
	public INT8(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INT8, 0); }
	public lengthOneDimension(): LengthOneDimensionContext | undefined {
		return this.tryGetRuleContext(0, LengthOneDimensionContext);
	}
	public SIGNED(): TerminalNode[];
	public SIGNED(i: number): TerminalNode;
	public SIGNED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.SIGNED);
		} else {
			return this.getToken(MariaDBParser.SIGNED, i);
		}
	}
	public UNSIGNED(): TerminalNode[];
	public UNSIGNED(i: number): TerminalNode;
	public UNSIGNED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.UNSIGNED);
		} else {
			return this.getToken(MariaDBParser.UNSIGNED, i);
		}
	}
	public ZEROFILL(): TerminalNode[];
	public ZEROFILL(i: number): TerminalNode;
	public ZEROFILL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.ZEROFILL);
		} else {
			return this.getToken(MariaDBParser.ZEROFILL, i);
		}
	}
	public REAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REAL, 0); }
	public lengthTwoDimension(): LengthTwoDimensionContext | undefined {
		return this.tryGetRuleContext(0, LengthTwoDimensionContext);
	}
	public DOUBLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DOUBLE, 0); }
	public PRECISION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PRECISION, 0); }
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DECIMAL, 0); }
	public DEC(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DEC, 0); }
	public FIXED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FIXED, 0); }
	public NUMERIC(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NUMERIC, 0); }
	public FLOAT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FLOAT, 0); }
	public FLOAT4(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FLOAT4, 0); }
	public FLOAT8(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FLOAT8, 0); }
	public lengthTwoOptionalDimension(): LengthTwoOptionalDimensionContext | undefined {
		return this.tryGetRuleContext(0, LengthTwoOptionalDimensionContext);
	}
	public BIT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BIT, 0); }
	public TIME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TIME, 0); }
	public TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TIMESTAMP, 0); }
	public DATETIME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DATETIME, 0); }
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BINARY, 0); }
	public VARBINARY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VARBINARY, 0); }
	public BLOB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BLOB, 0); }
	public YEAR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.YEAR, 0); }
	constructor(ctx: DataTypeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDimensionDataType) {
			listener.enterDimensionDataType(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDimensionDataType) {
			listener.exitDimensionDataType(this);
		}
	}
}
export class SimpleDataTypeContext extends DataTypeContext {
	public _typeName!: Token;
	public DATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DATE, 0); }
	public TINYBLOB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TINYBLOB, 0); }
	public MEDIUMBLOB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MEDIUMBLOB, 0); }
	public LONGBLOB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LONGBLOB, 0); }
	public BOOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BOOL, 0); }
	public BOOLEAN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BOOLEAN, 0); }
	public SERIAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SERIAL, 0); }
	constructor(ctx: DataTypeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSimpleDataType) {
			listener.enterSimpleDataType(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSimpleDataType) {
			listener.exitSimpleDataType(this);
		}
	}
}
export class CollectionDataTypeContext extends DataTypeContext {
	public _typeName!: Token;
	public collectionOptions(): CollectionOptionsContext {
		return this.getRuleContext(0, CollectionOptionsContext);
	}
	public ENUM(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ENUM, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SET, 0); }
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BINARY, 0); }
	public charSet(): CharSetContext | undefined {
		return this.tryGetRuleContext(0, CharSetContext);
	}
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	constructor(ctx: DataTypeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCollectionDataType) {
			listener.enterCollectionDataType(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCollectionDataType) {
			listener.exitCollectionDataType(this);
		}
	}
}
export class SpatialDataTypeContext extends DataTypeContext {
	public _typeName!: Token;
	public GEOMETRYCOLLECTION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GEOMETRYCOLLECTION, 0); }
	public GEOMCOLLECTION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GEOMCOLLECTION, 0); }
	public LINESTRING(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LINESTRING, 0); }
	public MULTILINESTRING(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MULTILINESTRING, 0); }
	public MULTIPOINT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MULTIPOINT, 0); }
	public MULTIPOLYGON(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MULTIPOLYGON, 0); }
	public POINT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.POINT, 0); }
	public POLYGON(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.POLYGON, 0); }
	public JSON(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JSON, 0); }
	public GEOMETRY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GEOMETRY, 0); }
	constructor(ctx: DataTypeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSpatialDataType) {
			listener.enterSpatialDataType(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSpatialDataType) {
			listener.exitSpatialDataType(this);
		}
	}
}
export class LongVarcharDataTypeContext extends DataTypeContext {
	public _typeName!: Token;
	public LONG(): TerminalNode { return this.getToken(MariaDBParser.LONG, 0); }
	public VARCHAR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VARCHAR, 0); }
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BINARY, 0); }
	public charSet(): CharSetContext | undefined {
		return this.tryGetRuleContext(0, CharSetContext);
	}
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public COLLATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COLLATE, 0); }
	public collationName(): CollationNameContext | undefined {
		return this.tryGetRuleContext(0, CollationNameContext);
	}
	constructor(ctx: DataTypeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterLongVarcharDataType) {
			listener.enterLongVarcharDataType(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitLongVarcharDataType) {
			listener.exitLongVarcharDataType(this);
		}
	}
}
export class LongVarbinaryDataTypeContext extends DataTypeContext {
	public LONG(): TerminalNode { return this.getToken(MariaDBParser.LONG, 0); }
	public VARBINARY(): TerminalNode { return this.getToken(MariaDBParser.VARBINARY, 0); }
	constructor(ctx: DataTypeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterLongVarbinaryDataType) {
			listener.enterLongVarbinaryDataType(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitLongVarbinaryDataType) {
			listener.exitLongVarbinaryDataType(this);
		}
	}
}


export class CollectionOptionsContext extends ParserRuleContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public STRING_LITERAL(): TerminalNode[];
	public STRING_LITERAL(i: number): TerminalNode;
	public STRING_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.STRING_LITERAL);
		} else {
			return this.getToken(MariaDBParser.STRING_LITERAL, i);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_collectionOptions; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCollectionOptions) {
			listener.enterCollectionOptions(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCollectionOptions) {
			listener.exitCollectionOptions(this);
		}
	}
}


export class ConvertedDataTypeContext extends ParserRuleContext {
	public _typeName!: Token;
	public CHAR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CHAR, 0); }
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DECIMAL, 0); }
	public SIGNED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SIGNED, 0); }
	public UNSIGNED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UNSIGNED, 0); }
	public ARRAY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ARRAY, 0); }
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BINARY, 0); }
	public NCHAR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NCHAR, 0); }
	public DATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DATE, 0); }
	public DATETIME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DATETIME, 0); }
	public TIME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TIME, 0); }
	public JSON(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JSON, 0); }
	public INT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INT, 0); }
	public INTEGER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INTEGER, 0); }
	public lengthOneDimension(): LengthOneDimensionContext | undefined {
		return this.tryGetRuleContext(0, LengthOneDimensionContext);
	}
	public charSet(): CharSetContext | undefined {
		return this.tryGetRuleContext(0, CharSetContext);
	}
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public lengthTwoOptionalDimension(): LengthTwoOptionalDimensionContext | undefined {
		return this.tryGetRuleContext(0, LengthTwoOptionalDimensionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_convertedDataType; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterConvertedDataType) {
			listener.enterConvertedDataType(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitConvertedDataType) {
			listener.exitConvertedDataType(this);
		}
	}
}


export class LengthOneDimensionContext extends ParserRuleContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_lengthOneDimension; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterLengthOneDimension) {
			listener.enterLengthOneDimension(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitLengthOneDimension) {
			listener.exitLengthOneDimension(this);
		}
	}
}


export class LengthTwoDimensionContext extends ParserRuleContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public decimalLiteral(): DecimalLiteralContext[];
	public decimalLiteral(i: number): DecimalLiteralContext;
	public decimalLiteral(i?: number): DecimalLiteralContext | DecimalLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DecimalLiteralContext);
		} else {
			return this.getRuleContext(i, DecimalLiteralContext);
		}
	}
	public COMMA(): TerminalNode { return this.getToken(MariaDBParser.COMMA, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_lengthTwoDimension; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterLengthTwoDimension) {
			listener.enterLengthTwoDimension(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitLengthTwoDimension) {
			listener.exitLengthTwoDimension(this);
		}
	}
}


export class LengthTwoOptionalDimensionContext extends ParserRuleContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public decimalLiteral(): DecimalLiteralContext[];
	public decimalLiteral(i: number): DecimalLiteralContext;
	public decimalLiteral(i?: number): DecimalLiteralContext | DecimalLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DecimalLiteralContext);
		} else {
			return this.getRuleContext(i, DecimalLiteralContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COMMA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_lengthTwoOptionalDimension; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterLengthTwoOptionalDimension) {
			listener.enterLengthTwoOptionalDimension(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitLengthTwoOptionalDimension) {
			listener.exitLengthTwoOptionalDimension(this);
		}
	}
}


export class UidListContext extends ParserRuleContext {
	public uid(): UidContext[];
	public uid(i: number): UidContext;
	public uid(i?: number): UidContext | UidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UidContext);
		} else {
			return this.getRuleContext(i, UidContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_uidList; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterUidList) {
			listener.enterUidList(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitUidList) {
			listener.exitUidList(this);
		}
	}
}


export class TablesContext extends ParserRuleContext {
	public tableName(): TableNameContext[];
	public tableName(i: number): TableNameContext;
	public tableName(i?: number): TableNameContext | TableNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableNameContext);
		} else {
			return this.getRuleContext(i, TableNameContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_tables; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTables) {
			listener.enterTables(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTables) {
			listener.exitTables(this);
		}
	}
}


export class IndexColumnNamesContext extends ParserRuleContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public indexColumnName(): IndexColumnNameContext[];
	public indexColumnName(i: number): IndexColumnNameContext;
	public indexColumnName(i?: number): IndexColumnNameContext | IndexColumnNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IndexColumnNameContext);
		} else {
			return this.getRuleContext(i, IndexColumnNameContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_indexColumnNames; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterIndexColumnNames) {
			listener.enterIndexColumnNames(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitIndexColumnNames) {
			listener.exitIndexColumnNames(this);
		}
	}
}


export class ExpressionsContext extends ParserRuleContext {
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_expressions; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterExpressions) {
			listener.enterExpressions(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitExpressions) {
			listener.exitExpressions(this);
		}
	}
}


export class ExpressionsWithDefaultsContext extends ParserRuleContext {
	public expressionOrDefault(): ExpressionOrDefaultContext[];
	public expressionOrDefault(i: number): ExpressionOrDefaultContext;
	public expressionOrDefault(i?: number): ExpressionOrDefaultContext | ExpressionOrDefaultContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionOrDefaultContext);
		} else {
			return this.getRuleContext(i, ExpressionOrDefaultContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_expressionsWithDefaults; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterExpressionsWithDefaults) {
			listener.enterExpressionsWithDefaults(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitExpressionsWithDefaults) {
			listener.exitExpressionsWithDefaults(this);
		}
	}
}


export class ConstantsContext extends ParserRuleContext {
	public constant(): ConstantContext[];
	public constant(i: number): ConstantContext;
	public constant(i?: number): ConstantContext | ConstantContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ConstantContext);
		} else {
			return this.getRuleContext(i, ConstantContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_constants; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterConstants) {
			listener.enterConstants(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitConstants) {
			listener.exitConstants(this);
		}
	}
}


export class SimpleStringsContext extends ParserRuleContext {
	public STRING_LITERAL(): TerminalNode[];
	public STRING_LITERAL(i: number): TerminalNode;
	public STRING_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.STRING_LITERAL);
		} else {
			return this.getToken(MariaDBParser.STRING_LITERAL, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_simpleStrings; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSimpleStrings) {
			listener.enterSimpleStrings(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSimpleStrings) {
			listener.exitSimpleStrings(this);
		}
	}
}


export class UserVariablesContext extends ParserRuleContext {
	public LOCAL_ID(): TerminalNode[];
	public LOCAL_ID(i: number): TerminalNode;
	public LOCAL_ID(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.LOCAL_ID);
		} else {
			return this.getToken(MariaDBParser.LOCAL_ID, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_userVariables; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterUserVariables) {
			listener.enterUserVariables(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitUserVariables) {
			listener.exitUserVariables(this);
		}
	}
}


export class DefaultValueContext extends ParserRuleContext {
	public NULL_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NULL_LITERAL, 0); }
	public CAST(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CAST, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LR_BRACKET, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AS, 0); }
	public convertedDataType(): ConvertedDataTypeContext | undefined {
		return this.tryGetRuleContext(0, ConvertedDataTypeContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RR_BRACKET, 0); }
	public constant(): ConstantContext | undefined {
		return this.tryGetRuleContext(0, ConstantContext);
	}
	public unaryOperator(): UnaryOperatorContext | undefined {
		return this.tryGetRuleContext(0, UnaryOperatorContext);
	}
	public currentTimestamp(): CurrentTimestampContext[];
	public currentTimestamp(i: number): CurrentTimestampContext;
	public currentTimestamp(i?: number): CurrentTimestampContext | CurrentTimestampContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CurrentTimestampContext);
		} else {
			return this.getRuleContext(i, CurrentTimestampContext);
		}
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ON, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UPDATE, 0); }
	public fullId(): FullIdContext | undefined {
		return this.tryGetRuleContext(0, FullIdContext);
	}
	public LASTVAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LASTVAL, 0); }
	public NEXTVAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NEXTVAL, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VALUE, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FOR, 0); }
	public PREVIOUS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PREVIOUS, 0); }
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NEXT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_defaultValue; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDefaultValue) {
			listener.enterDefaultValue(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDefaultValue) {
			listener.exitDefaultValue(this);
		}
	}
}


export class CurrentTimestampContext extends ParserRuleContext {
	public NOW(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NOW, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RR_BRACKET, 0); }
	public CURRENT_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CURRENT_TIMESTAMP, 0); }
	public LOCALTIME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOCALTIME, 0); }
	public LOCALTIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOCALTIMESTAMP, 0); }
	public CURDATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CURDATE, 0); }
	public CURTIME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CURTIME, 0); }
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_currentTimestamp; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCurrentTimestamp) {
			listener.enterCurrentTimestamp(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCurrentTimestamp) {
			listener.exitCurrentTimestamp(this);
		}
	}
}


export class ExpressionOrDefaultContext extends ParserRuleContext {
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DEFAULT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_expressionOrDefault; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterExpressionOrDefault) {
			listener.enterExpressionOrDefault(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitExpressionOrDefault) {
			listener.exitExpressionOrDefault(this);
		}
	}
}


export class IfExistsContext extends ParserRuleContext {
	public IF(): TerminalNode { return this.getToken(MariaDBParser.IF, 0); }
	public EXISTS(): TerminalNode { return this.getToken(MariaDBParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_ifExists; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterIfExists) {
			listener.enterIfExists(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitIfExists) {
			listener.exitIfExists(this);
		}
	}
}


export class IfNotExistsContext extends ParserRuleContext {
	public IF(): TerminalNode { return this.getToken(MariaDBParser.IF, 0); }
	public NOT(): TerminalNode { return this.getToken(MariaDBParser.NOT, 0); }
	public EXISTS(): TerminalNode { return this.getToken(MariaDBParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_ifNotExists; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterIfNotExists) {
			listener.enterIfNotExists(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitIfNotExists) {
			listener.exitIfNotExists(this);
		}
	}
}


export class OrReplaceContext extends ParserRuleContext {
	public OR(): TerminalNode { return this.getToken(MariaDBParser.OR, 0); }
	public REPLACE(): TerminalNode { return this.getToken(MariaDBParser.REPLACE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_orReplace; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterOrReplace) {
			listener.enterOrReplace(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitOrReplace) {
			listener.exitOrReplace(this);
		}
	}
}


export class WaitNowaitClauseContext extends ParserRuleContext {
	public WAIT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WAIT, 0); }
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public NOWAIT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NOWAIT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_waitNowaitClause; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterWaitNowaitClause) {
			listener.enterWaitNowaitClause(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitWaitNowaitClause) {
			listener.exitWaitNowaitClause(this);
		}
	}
}


export class LockOptionContext extends ParserRuleContext {
	public waitNowaitClause(): WaitNowaitClauseContext | undefined {
		return this.tryGetRuleContext(0, WaitNowaitClauseContext);
	}
	public SKIP_(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SKIP_, 0); }
	public LOCKED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOCKED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_lockOption; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterLockOption) {
			listener.enterLockOption(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitLockOption) {
			listener.exitLockOption(this);
		}
	}
}


export class FunctionCallContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_functionCall; }
	public copyFrom(ctx: FunctionCallContext): void {
		super.copyFrom(ctx);
	}
}
export class SpecificFunctionCallContext extends FunctionCallContext {
	public specificFunction(): SpecificFunctionContext {
		return this.getRuleContext(0, SpecificFunctionContext);
	}
	constructor(ctx: FunctionCallContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSpecificFunctionCall) {
			listener.enterSpecificFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSpecificFunctionCall) {
			listener.exitSpecificFunctionCall(this);
		}
	}
}
export class AggregateFunctionCallContext extends FunctionCallContext {
	public aggregateWindowedFunction(): AggregateWindowedFunctionContext {
		return this.getRuleContext(0, AggregateWindowedFunctionContext);
	}
	constructor(ctx: FunctionCallContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAggregateFunctionCall) {
			listener.enterAggregateFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAggregateFunctionCall) {
			listener.exitAggregateFunctionCall(this);
		}
	}
}
export class NonAggregateFunctionCallContext extends FunctionCallContext {
	public nonAggregateWindowedFunction(): NonAggregateWindowedFunctionContext {
		return this.getRuleContext(0, NonAggregateWindowedFunctionContext);
	}
	constructor(ctx: FunctionCallContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterNonAggregateFunctionCall) {
			listener.enterNonAggregateFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitNonAggregateFunctionCall) {
			listener.exitNonAggregateFunctionCall(this);
		}
	}
}
export class ScalarFunctionCallContext extends FunctionCallContext {
	public scalarFunctionName(): ScalarFunctionNameContext {
		return this.getRuleContext(0, ScalarFunctionNameContext);
	}
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public functionArgs(): FunctionArgsContext | undefined {
		return this.tryGetRuleContext(0, FunctionArgsContext);
	}
	constructor(ctx: FunctionCallContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterScalarFunctionCall) {
			listener.enterScalarFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitScalarFunctionCall) {
			listener.exitScalarFunctionCall(this);
		}
	}
}
export class UdfFunctionCallContext extends FunctionCallContext {
	public fullId(): FullIdContext {
		return this.getRuleContext(0, FullIdContext);
	}
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public functionArgs(): FunctionArgsContext | undefined {
		return this.tryGetRuleContext(0, FunctionArgsContext);
	}
	constructor(ctx: FunctionCallContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterUdfFunctionCall) {
			listener.enterUdfFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitUdfFunctionCall) {
			listener.exitUdfFunctionCall(this);
		}
	}
}
export class PasswordFunctionCallContext extends FunctionCallContext {
	public passwordFunctionClause(): PasswordFunctionClauseContext {
		return this.getRuleContext(0, PasswordFunctionClauseContext);
	}
	constructor(ctx: FunctionCallContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterPasswordFunctionCall) {
			listener.enterPasswordFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitPasswordFunctionCall) {
			listener.exitPasswordFunctionCall(this);
		}
	}
}


export class SpecificFunctionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_specificFunction; }
	public copyFrom(ctx: SpecificFunctionContext): void {
		super.copyFrom(ctx);
	}
}
export class SimpleFunctionCallContext extends SpecificFunctionContext {
	public CURRENT_DATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CURRENT_DATE, 0); }
	public CURRENT_TIME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CURRENT_TIME, 0); }
	public CURRENT_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CURRENT_TIMESTAMP, 0); }
	public CURDATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CURDATE, 0); }
	public CURTIME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CURTIME, 0); }
	public CURRENT_USER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CURRENT_USER, 0); }
	public LOCALTIME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOCALTIME, 0); }
	public UTC_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UTC_TIMESTAMP, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SCHEMA, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RR_BRACKET, 0); }
	constructor(ctx: SpecificFunctionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSimpleFunctionCall) {
			listener.enterSimpleFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSimpleFunctionCall) {
			listener.exitSimpleFunctionCall(this);
		}
	}
}
export class DataTypeFunctionCallContext extends SpecificFunctionContext {
	public _separator!: Token;
	public CONVERT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONVERT, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public convertedDataType(): ConvertedDataTypeContext | undefined {
		return this.tryGetRuleContext(0, ConvertedDataTypeContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COMMA, 0); }
	public USING(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.USING, 0); }
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	public CAST(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CAST, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AS, 0); }
	constructor(ctx: SpecificFunctionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDataTypeFunctionCall) {
			listener.enterDataTypeFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDataTypeFunctionCall) {
			listener.exitDataTypeFunctionCall(this);
		}
	}
}
export class ValuesFunctionCallContext extends SpecificFunctionContext {
	public VALUES(): TerminalNode { return this.getToken(MariaDBParser.VALUES, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public fullColumnName(): FullColumnNameContext {
		return this.getRuleContext(0, FullColumnNameContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	constructor(ctx: SpecificFunctionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterValuesFunctionCall) {
			listener.enterValuesFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitValuesFunctionCall) {
			listener.exitValuesFunctionCall(this);
		}
	}
}
export class CaseExpressionFunctionCallContext extends SpecificFunctionContext {
	public _elseArg!: FunctionArgContext;
	public CASE(): TerminalNode { return this.getToken(MariaDBParser.CASE, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public END(): TerminalNode { return this.getToken(MariaDBParser.END, 0); }
	public caseFuncAlternative(): CaseFuncAlternativeContext[];
	public caseFuncAlternative(i: number): CaseFuncAlternativeContext;
	public caseFuncAlternative(i?: number): CaseFuncAlternativeContext | CaseFuncAlternativeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CaseFuncAlternativeContext);
		} else {
			return this.getRuleContext(i, CaseFuncAlternativeContext);
		}
	}
	public ELSE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ELSE, 0); }
	public functionArg(): FunctionArgContext | undefined {
		return this.tryGetRuleContext(0, FunctionArgContext);
	}
	constructor(ctx: SpecificFunctionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCaseExpressionFunctionCall) {
			listener.enterCaseExpressionFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCaseExpressionFunctionCall) {
			listener.exitCaseExpressionFunctionCall(this);
		}
	}
}
export class CaseFunctionCallContext extends SpecificFunctionContext {
	public _elseArg!: FunctionArgContext;
	public CASE(): TerminalNode { return this.getToken(MariaDBParser.CASE, 0); }
	public END(): TerminalNode { return this.getToken(MariaDBParser.END, 0); }
	public caseFuncAlternative(): CaseFuncAlternativeContext[];
	public caseFuncAlternative(i: number): CaseFuncAlternativeContext;
	public caseFuncAlternative(i?: number): CaseFuncAlternativeContext | CaseFuncAlternativeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CaseFuncAlternativeContext);
		} else {
			return this.getRuleContext(i, CaseFuncAlternativeContext);
		}
	}
	public ELSE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ELSE, 0); }
	public functionArg(): FunctionArgContext | undefined {
		return this.tryGetRuleContext(0, FunctionArgContext);
	}
	constructor(ctx: SpecificFunctionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCaseFunctionCall) {
			listener.enterCaseFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCaseFunctionCall) {
			listener.exitCaseFunctionCall(this);
		}
	}
}
export class CharFunctionCallContext extends SpecificFunctionContext {
	public CHAR(): TerminalNode { return this.getToken(MariaDBParser.CHAR, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public functionArgs(): FunctionArgsContext {
		return this.getRuleContext(0, FunctionArgsContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public USING(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.USING, 0); }
	public charsetName(): CharsetNameContext | undefined {
		return this.tryGetRuleContext(0, CharsetNameContext);
	}
	constructor(ctx: SpecificFunctionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCharFunctionCall) {
			listener.enterCharFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCharFunctionCall) {
			listener.exitCharFunctionCall(this);
		}
	}
}
export class PositionFunctionCallContext extends SpecificFunctionContext {
	public _positionString!: StringLiteralContext;
	public _positionExpression!: ExpressionContext;
	public _inString!: StringLiteralContext;
	public _inExpression!: ExpressionContext;
	public POSITION(): TerminalNode { return this.getToken(MariaDBParser.POSITION, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public IN(): TerminalNode { return this.getToken(MariaDBParser.IN, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public stringLiteral(): StringLiteralContext[];
	public stringLiteral(i: number): StringLiteralContext;
	public stringLiteral(i?: number): StringLiteralContext | StringLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StringLiteralContext);
		} else {
			return this.getRuleContext(i, StringLiteralContext);
		}
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(ctx: SpecificFunctionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterPositionFunctionCall) {
			listener.enterPositionFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitPositionFunctionCall) {
			listener.exitPositionFunctionCall(this);
		}
	}
}
export class SubstrFunctionCallContext extends SpecificFunctionContext {
	public _sourceString!: StringLiteralContext;
	public _sourceExpression!: ExpressionContext;
	public _fromDecimal!: DecimalLiteralContext;
	public _fromExpression!: ExpressionContext;
	public _forDecimal!: DecimalLiteralContext;
	public _forExpression!: ExpressionContext;
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public FROM(): TerminalNode { return this.getToken(MariaDBParser.FROM, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public SUBSTR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SUBSTR, 0); }
	public SUBSTRING(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SUBSTRING, 0); }
	public stringLiteral(): StringLiteralContext | undefined {
		return this.tryGetRuleContext(0, StringLiteralContext);
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public decimalLiteral(): DecimalLiteralContext[];
	public decimalLiteral(i: number): DecimalLiteralContext;
	public decimalLiteral(i?: number): DecimalLiteralContext | DecimalLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DecimalLiteralContext);
		} else {
			return this.getRuleContext(i, DecimalLiteralContext);
		}
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FOR, 0); }
	constructor(ctx: SpecificFunctionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSubstrFunctionCall) {
			listener.enterSubstrFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSubstrFunctionCall) {
			listener.exitSubstrFunctionCall(this);
		}
	}
}
export class TrimFunctionCallContext extends SpecificFunctionContext {
	public _positioinForm!: Token;
	public _sourceString!: StringLiteralContext;
	public _sourceExpression!: ExpressionContext;
	public _fromString!: StringLiteralContext;
	public _fromExpression!: ExpressionContext;
	public TRIM(): TerminalNode { return this.getToken(MariaDBParser.TRIM, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public FROM(): TerminalNode { return this.getToken(MariaDBParser.FROM, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public BOTH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BOTH, 0); }
	public LEADING(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LEADING, 0); }
	public TRAILING(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TRAILING, 0); }
	public stringLiteral(): StringLiteralContext[];
	public stringLiteral(i: number): StringLiteralContext;
	public stringLiteral(i?: number): StringLiteralContext | StringLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StringLiteralContext);
		} else {
			return this.getRuleContext(i, StringLiteralContext);
		}
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(ctx: SpecificFunctionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTrimFunctionCall) {
			listener.enterTrimFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTrimFunctionCall) {
			listener.exitTrimFunctionCall(this);
		}
	}
}
export class WeightFunctionCallContext extends SpecificFunctionContext {
	public _stringFormat!: Token;
	public WEIGHT_STRING(): TerminalNode { return this.getToken(MariaDBParser.WEIGHT_STRING, 0); }
	public LR_BRACKET(): TerminalNode[];
	public LR_BRACKET(i: number): TerminalNode;
	public LR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.LR_BRACKET);
		} else {
			return this.getToken(MariaDBParser.LR_BRACKET, i);
		}
	}
	public RR_BRACKET(): TerminalNode[];
	public RR_BRACKET(i: number): TerminalNode;
	public RR_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.RR_BRACKET);
		} else {
			return this.getToken(MariaDBParser.RR_BRACKET, i);
		}
	}
	public stringLiteral(): StringLiteralContext | undefined {
		return this.tryGetRuleContext(0, StringLiteralContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AS, 0); }
	public decimalLiteral(): DecimalLiteralContext | undefined {
		return this.tryGetRuleContext(0, DecimalLiteralContext);
	}
	public levelsInWeightString(): LevelsInWeightStringContext | undefined {
		return this.tryGetRuleContext(0, LevelsInWeightStringContext);
	}
	public CHAR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CHAR, 0); }
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BINARY, 0); }
	constructor(ctx: SpecificFunctionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterWeightFunctionCall) {
			listener.enterWeightFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitWeightFunctionCall) {
			listener.exitWeightFunctionCall(this);
		}
	}
}
export class ExtractFunctionCallContext extends SpecificFunctionContext {
	public _sourceString!: StringLiteralContext;
	public _sourceExpression!: ExpressionContext;
	public EXTRACT(): TerminalNode { return this.getToken(MariaDBParser.EXTRACT, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public intervalType(): IntervalTypeContext {
		return this.getRuleContext(0, IntervalTypeContext);
	}
	public FROM(): TerminalNode { return this.getToken(MariaDBParser.FROM, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public stringLiteral(): StringLiteralContext | undefined {
		return this.tryGetRuleContext(0, StringLiteralContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(ctx: SpecificFunctionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterExtractFunctionCall) {
			listener.enterExtractFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitExtractFunctionCall) {
			listener.exitExtractFunctionCall(this);
		}
	}
}
export class GetFormatFunctionCallContext extends SpecificFunctionContext {
	public _datetimeFormat!: Token;
	public GET_FORMAT(): TerminalNode { return this.getToken(MariaDBParser.GET_FORMAT, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public COMMA(): TerminalNode { return this.getToken(MariaDBParser.COMMA, 0); }
	public stringLiteral(): StringLiteralContext {
		return this.getRuleContext(0, StringLiteralContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public DATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DATE, 0); }
	public TIME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TIME, 0); }
	public DATETIME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DATETIME, 0); }
	constructor(ctx: SpecificFunctionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterGetFormatFunctionCall) {
			listener.enterGetFormatFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitGetFormatFunctionCall) {
			listener.exitGetFormatFunctionCall(this);
		}
	}
}
export class JsonValueFunctionCallContext extends SpecificFunctionContext {
	public JSON_VALUE(): TerminalNode { return this.getToken(MariaDBParser.JSON_VALUE, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public COMMA(): TerminalNode { return this.getToken(MariaDBParser.COMMA, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public RETURNING(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RETURNING, 0); }
	public convertedDataType(): ConvertedDataTypeContext | undefined {
		return this.tryGetRuleContext(0, ConvertedDataTypeContext);
	}
	public jsonOnEmpty(): JsonOnEmptyContext | undefined {
		return this.tryGetRuleContext(0, JsonOnEmptyContext);
	}
	public jsonOnError(): JsonOnErrorContext | undefined {
		return this.tryGetRuleContext(0, JsonOnErrorContext);
	}
	constructor(ctx: SpecificFunctionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterJsonValueFunctionCall) {
			listener.enterJsonValueFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitJsonValueFunctionCall) {
			listener.exitJsonValueFunctionCall(this);
		}
	}
}


export class CaseFuncAlternativeContext extends ParserRuleContext {
	public _condition!: FunctionArgContext;
	public _consequent!: FunctionArgContext;
	public WHEN(): TerminalNode { return this.getToken(MariaDBParser.WHEN, 0); }
	public THEN(): TerminalNode { return this.getToken(MariaDBParser.THEN, 0); }
	public functionArg(): FunctionArgContext[];
	public functionArg(i: number): FunctionArgContext;
	public functionArg(i?: number): FunctionArgContext | FunctionArgContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FunctionArgContext);
		} else {
			return this.getRuleContext(i, FunctionArgContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_caseFuncAlternative; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCaseFuncAlternative) {
			listener.enterCaseFuncAlternative(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCaseFuncAlternative) {
			listener.exitCaseFuncAlternative(this);
		}
	}
}


export class LevelsInWeightStringContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_levelsInWeightString; }
	public copyFrom(ctx: LevelsInWeightStringContext): void {
		super.copyFrom(ctx);
	}
}
export class LevelWeightListContext extends LevelsInWeightStringContext {
	public LEVEL(): TerminalNode { return this.getToken(MariaDBParser.LEVEL, 0); }
	public levelInWeightListElement(): LevelInWeightListElementContext[];
	public levelInWeightListElement(i: number): LevelInWeightListElementContext;
	public levelInWeightListElement(i?: number): LevelInWeightListElementContext | LevelInWeightListElementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LevelInWeightListElementContext);
		} else {
			return this.getRuleContext(i, LevelInWeightListElementContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(ctx: LevelsInWeightStringContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterLevelWeightList) {
			listener.enterLevelWeightList(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitLevelWeightList) {
			listener.exitLevelWeightList(this);
		}
	}
}
export class LevelWeightRangeContext extends LevelsInWeightStringContext {
	public _firstLevel!: DecimalLiteralContext;
	public _lastLevel!: DecimalLiteralContext;
	public LEVEL(): TerminalNode { return this.getToken(MariaDBParser.LEVEL, 0); }
	public MINUS(): TerminalNode { return this.getToken(MariaDBParser.MINUS, 0); }
	public decimalLiteral(): DecimalLiteralContext[];
	public decimalLiteral(i: number): DecimalLiteralContext;
	public decimalLiteral(i?: number): DecimalLiteralContext | DecimalLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DecimalLiteralContext);
		} else {
			return this.getRuleContext(i, DecimalLiteralContext);
		}
	}
	constructor(ctx: LevelsInWeightStringContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterLevelWeightRange) {
			listener.enterLevelWeightRange(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitLevelWeightRange) {
			listener.exitLevelWeightRange(this);
		}
	}
}


export class LevelInWeightListElementContext extends ParserRuleContext {
	public _orderType!: Token;
	public decimalLiteral(): DecimalLiteralContext {
		return this.getRuleContext(0, DecimalLiteralContext);
	}
	public ASC(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ASC, 0); }
	public DESC(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DESC, 0); }
	public REVERSE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REVERSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_levelInWeightListElement; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterLevelInWeightListElement) {
			listener.enterLevelInWeightListElement(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitLevelInWeightListElement) {
			listener.exitLevelInWeightListElement(this);
		}
	}
}


export class AggregateWindowedFunctionContext extends ParserRuleContext {
	public _aggregator!: Token;
	public _starArg!: Token;
	public _separator!: Token;
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public functionArg(): FunctionArgContext | undefined {
		return this.tryGetRuleContext(0, FunctionArgContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public AVG(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AVG, 0); }
	public MAX(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MAX, 0); }
	public MIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MIN, 0); }
	public SUM(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SUM, 0); }
	public overClause(): OverClauseContext | undefined {
		return this.tryGetRuleContext(0, OverClauseContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ALL, 0); }
	public DISTINCT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DISTINCT, 0); }
	public COUNT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COUNT, 0); }
	public functionArgs(): FunctionArgsContext | undefined {
		return this.tryGetRuleContext(0, FunctionArgsContext);
	}
	public STAR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STAR, 0); }
	public BIT_AND(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BIT_AND, 0); }
	public BIT_OR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BIT_OR, 0); }
	public BIT_XOR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BIT_XOR, 0); }
	public STD(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STD, 0); }
	public STDDEV(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STDDEV, 0); }
	public STDDEV_POP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STDDEV_POP, 0); }
	public STDDEV_SAMP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STDDEV_SAMP, 0); }
	public VAR_POP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VAR_POP, 0); }
	public VAR_SAMP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VAR_SAMP, 0); }
	public VARIANCE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VARIANCE, 0); }
	public GROUP_CONCAT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GROUP_CONCAT, 0); }
	public ORDER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ORDER, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BY, 0); }
	public orderByExpression(): OrderByExpressionContext[];
	public orderByExpression(i: number): OrderByExpressionContext;
	public orderByExpression(i?: number): OrderByExpressionContext | OrderByExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(OrderByExpressionContext);
		} else {
			return this.getRuleContext(i, OrderByExpressionContext);
		}
	}
	public SEPARATOR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SEPARATOR, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_LITERAL, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_aggregateWindowedFunction; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterAggregateWindowedFunction) {
			listener.enterAggregateWindowedFunction(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitAggregateWindowedFunction) {
			listener.exitAggregateWindowedFunction(this);
		}
	}
}


export class NonAggregateWindowedFunctionContext extends ParserRuleContext {
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LR_BRACKET, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RR_BRACKET, 0); }
	public overClause(): OverClauseContext {
		return this.getRuleContext(0, OverClauseContext);
	}
	public LAG(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LAG, 0); }
	public LEAD(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LEAD, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	public decimalLiteral(): DecimalLiteralContext[];
	public decimalLiteral(i: number): DecimalLiteralContext;
	public decimalLiteral(i?: number): DecimalLiteralContext | DecimalLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DecimalLiteralContext);
		} else {
			return this.getRuleContext(i, DecimalLiteralContext);
		}
	}
	public FIRST_VALUE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FIRST_VALUE, 0); }
	public LAST_VALUE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LAST_VALUE, 0); }
	public LR_BRACKETRR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LR_BRACKETRR_BRACKET, 0); }
	public CUME_DIST(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CUME_DIST, 0); }
	public DENSE_RANK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DENSE_RANK, 0); }
	public PERCENT_RANK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PERCENT_RANK, 0); }
	public RANK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RANK, 0); }
	public ROW_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ROW_NUMBER, 0); }
	public NTH_VALUE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NTH_VALUE, 0); }
	public NTILE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NTILE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_nonAggregateWindowedFunction; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterNonAggregateWindowedFunction) {
			listener.enterNonAggregateWindowedFunction(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitNonAggregateWindowedFunction) {
			listener.exitNonAggregateWindowedFunction(this);
		}
	}
}


export class OverClauseContext extends ParserRuleContext {
	public OVER(): TerminalNode { return this.getToken(MariaDBParser.OVER, 0); }
	public LR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RR_BRACKET, 0); }
	public windowName(): WindowNameContext | undefined {
		return this.tryGetRuleContext(0, WindowNameContext);
	}
	public windowSpec(): WindowSpecContext | undefined {
		return this.tryGetRuleContext(0, WindowSpecContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_overClause; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterOverClause) {
			listener.enterOverClause(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitOverClause) {
			listener.exitOverClause(this);
		}
	}
}


export class WindowSpecContext extends ParserRuleContext {
	public windowName(): WindowNameContext | undefined {
		return this.tryGetRuleContext(0, WindowNameContext);
	}
	public partitionClause(): PartitionClauseContext | undefined {
		return this.tryGetRuleContext(0, PartitionClauseContext);
	}
	public orderByClause(): OrderByClauseContext | undefined {
		return this.tryGetRuleContext(0, OrderByClauseContext);
	}
	public frameClause(): FrameClauseContext | undefined {
		return this.tryGetRuleContext(0, FrameClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_windowSpec; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterWindowSpec) {
			listener.enterWindowSpec(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitWindowSpec) {
			listener.exitWindowSpec(this);
		}
	}
}


export class WindowNameContext extends ParserRuleContext {
	public uid(): UidContext {
		return this.getRuleContext(0, UidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_windowName; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterWindowName) {
			listener.enterWindowName(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitWindowName) {
			listener.exitWindowName(this);
		}
	}
}


export class FrameClauseContext extends ParserRuleContext {
	public frameUnits(): FrameUnitsContext {
		return this.getRuleContext(0, FrameUnitsContext);
	}
	public frameExtent(): FrameExtentContext {
		return this.getRuleContext(0, FrameExtentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_frameClause; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterFrameClause) {
			listener.enterFrameClause(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitFrameClause) {
			listener.exitFrameClause(this);
		}
	}
}


export class FrameUnitsContext extends ParserRuleContext {
	public ROWS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ROWS, 0); }
	public RANGE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RANGE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_frameUnits; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterFrameUnits) {
			listener.enterFrameUnits(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitFrameUnits) {
			listener.exitFrameUnits(this);
		}
	}
}


export class FrameExtentContext extends ParserRuleContext {
	public frameRange(): FrameRangeContext | undefined {
		return this.tryGetRuleContext(0, FrameRangeContext);
	}
	public frameBetween(): FrameBetweenContext | undefined {
		return this.tryGetRuleContext(0, FrameBetweenContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_frameExtent; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterFrameExtent) {
			listener.enterFrameExtent(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitFrameExtent) {
			listener.exitFrameExtent(this);
		}
	}
}


export class FrameBetweenContext extends ParserRuleContext {
	public BETWEEN(): TerminalNode { return this.getToken(MariaDBParser.BETWEEN, 0); }
	public frameRange(): FrameRangeContext[];
	public frameRange(i: number): FrameRangeContext;
	public frameRange(i?: number): FrameRangeContext | FrameRangeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FrameRangeContext);
		} else {
			return this.getRuleContext(i, FrameRangeContext);
		}
	}
	public AND(): TerminalNode { return this.getToken(MariaDBParser.AND, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_frameBetween; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterFrameBetween) {
			listener.enterFrameBetween(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitFrameBetween) {
			listener.exitFrameBetween(this);
		}
	}
}


export class FrameRangeContext extends ParserRuleContext {
	public CURRENT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CURRENT, 0); }
	public ROW(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ROW, 0); }
	public UNBOUNDED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UNBOUNDED, 0); }
	public PRECEDING(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PRECEDING, 0); }
	public FOLLOWING(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FOLLOWING, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_frameRange; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterFrameRange) {
			listener.enterFrameRange(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitFrameRange) {
			listener.exitFrameRange(this);
		}
	}
}


export class PartitionClauseContext extends ParserRuleContext {
	public PARTITION(): TerminalNode { return this.getToken(MariaDBParser.PARTITION, 0); }
	public BY(): TerminalNode { return this.getToken(MariaDBParser.BY, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_partitionClause; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterPartitionClause) {
			listener.enterPartitionClause(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitPartitionClause) {
			listener.exitPartitionClause(this);
		}
	}
}


export class ScalarFunctionNameContext extends ParserRuleContext {
	public functionNameBase(): FunctionNameBaseContext | undefined {
		return this.tryGetRuleContext(0, FunctionNameBaseContext);
	}
	public ASCII(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ASCII, 0); }
	public CURDATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CURDATE, 0); }
	public CURRENT_DATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CURRENT_DATE, 0); }
	public CURRENT_TIME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CURRENT_TIME, 0); }
	public CURRENT_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CURRENT_TIMESTAMP, 0); }
	public CURTIME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CURTIME, 0); }
	public DATE_ADD(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DATE_ADD, 0); }
	public DATE_SUB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DATE_SUB, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.IF, 0); }
	public INSERT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INSERT, 0); }
	public LOCALTIME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOCALTIME, 0); }
	public LOCALTIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOCALTIMESTAMP, 0); }
	public MID(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MID, 0); }
	public NOW(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NOW, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REPLACE, 0); }
	public SUBSTR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SUBSTR, 0); }
	public SUBSTRING(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SUBSTRING, 0); }
	public SYSDATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SYSDATE, 0); }
	public TRIM(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TRIM, 0); }
	public UTC_DATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UTC_DATE, 0); }
	public UTC_TIME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UTC_TIME, 0); }
	public UTC_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UTC_TIMESTAMP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_scalarFunctionName; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterScalarFunctionName) {
			listener.enterScalarFunctionName(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitScalarFunctionName) {
			listener.exitScalarFunctionName(this);
		}
	}
}


export class PasswordFunctionClauseContext extends ParserRuleContext {
	public _functionName!: Token;
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public functionArg(): FunctionArgContext {
		return this.getRuleContext(0, FunctionArgContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PASSWORD, 0); }
	public OLD_PASSWORD(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.OLD_PASSWORD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_passwordFunctionClause; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterPasswordFunctionClause) {
			listener.enterPasswordFunctionClause(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitPasswordFunctionClause) {
			listener.exitPasswordFunctionClause(this);
		}
	}
}


export class FunctionArgsContext extends ParserRuleContext {
	public constant(): ConstantContext[];
	public constant(i: number): ConstantContext;
	public constant(i?: number): ConstantContext | ConstantContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ConstantContext);
		} else {
			return this.getRuleContext(i, ConstantContext);
		}
	}
	public fullColumnName(): FullColumnNameContext[];
	public fullColumnName(i: number): FullColumnNameContext;
	public fullColumnName(i?: number): FullColumnNameContext | FullColumnNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FullColumnNameContext);
		} else {
			return this.getRuleContext(i, FullColumnNameContext);
		}
	}
	public functionCall(): FunctionCallContext[];
	public functionCall(i: number): FunctionCallContext;
	public functionCall(i?: number): FunctionCallContext | FunctionCallContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FunctionCallContext);
		} else {
			return this.getRuleContext(i, FunctionCallContext);
		}
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_functionArgs; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterFunctionArgs) {
			listener.enterFunctionArgs(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitFunctionArgs) {
			listener.exitFunctionArgs(this);
		}
	}
}


export class FunctionArgContext extends ParserRuleContext {
	public constant(): ConstantContext | undefined {
		return this.tryGetRuleContext(0, ConstantContext);
	}
	public fullColumnName(): FullColumnNameContext | undefined {
		return this.tryGetRuleContext(0, FullColumnNameContext);
	}
	public functionCall(): FunctionCallContext | undefined {
		return this.tryGetRuleContext(0, FunctionCallContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_functionArg; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterFunctionArg) {
			listener.enterFunctionArg(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitFunctionArg) {
			listener.exitFunctionArg(this);
		}
	}
}


export class ExpressionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_expression; }
	public copyFrom(ctx: ExpressionContext): void {
		super.copyFrom(ctx);
	}
}
export class NotExpressionContext extends ExpressionContext {
	public _notOperator!: Token;
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NOT, 0); }
	public EXCLAMATION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EXCLAMATION_SYMBOL, 0); }
	constructor(ctx: ExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterNotExpression) {
			listener.enterNotExpression(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitNotExpression) {
			listener.exitNotExpression(this);
		}
	}
}
export class LogicalExpressionContext extends ExpressionContext {
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public logicalOperator(): LogicalOperatorContext {
		return this.getRuleContext(0, LogicalOperatorContext);
	}
	constructor(ctx: ExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterLogicalExpression) {
			listener.enterLogicalExpression(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitLogicalExpression) {
			listener.exitLogicalExpression(this);
		}
	}
}
export class IsExpressionContext extends ExpressionContext {
	public _testValue!: Token;
	public predicate(): PredicateContext {
		return this.getRuleContext(0, PredicateContext);
	}
	public IS(): TerminalNode { return this.getToken(MariaDBParser.IS, 0); }
	public TRUE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TRUE, 0); }
	public FALSE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FALSE, 0); }
	public UNKNOWN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UNKNOWN, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NOT, 0); }
	constructor(ctx: ExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterIsExpression) {
			listener.enterIsExpression(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitIsExpression) {
			listener.exitIsExpression(this);
		}
	}
}
export class PredicateExpressionContext extends ExpressionContext {
	public predicate(): PredicateContext {
		return this.getRuleContext(0, PredicateContext);
	}
	constructor(ctx: ExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterPredicateExpression) {
			listener.enterPredicateExpression(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitPredicateExpression) {
			listener.exitPredicateExpression(this);
		}
	}
}


export class PredicateContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_predicate; }
	public copyFrom(ctx: PredicateContext): void {
		super.copyFrom(ctx);
	}
}
export class InPredicateContext extends PredicateContext {
	public predicate(): PredicateContext {
		return this.getRuleContext(0, PredicateContext);
	}
	public IN(): TerminalNode { return this.getToken(MariaDBParser.IN, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public selectStatement(): SelectStatementContext | undefined {
		return this.tryGetRuleContext(0, SelectStatementContext);
	}
	public expressions(): ExpressionsContext | undefined {
		return this.tryGetRuleContext(0, ExpressionsContext);
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NOT, 0); }
	constructor(ctx: PredicateContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterInPredicate) {
			listener.enterInPredicate(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitInPredicate) {
			listener.exitInPredicate(this);
		}
	}
}
export class IsNullPredicateContext extends PredicateContext {
	public predicate(): PredicateContext {
		return this.getRuleContext(0, PredicateContext);
	}
	public IS(): TerminalNode { return this.getToken(MariaDBParser.IS, 0); }
	public nullNotnull(): NullNotnullContext {
		return this.getRuleContext(0, NullNotnullContext);
	}
	constructor(ctx: PredicateContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterIsNullPredicate) {
			listener.enterIsNullPredicate(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitIsNullPredicate) {
			listener.exitIsNullPredicate(this);
		}
	}
}
export class BinaryComparisonPredicateContext extends PredicateContext {
	public _left!: PredicateContext;
	public _right!: PredicateContext;
	public comparisonOperator(): ComparisonOperatorContext {
		return this.getRuleContext(0, ComparisonOperatorContext);
	}
	public predicate(): PredicateContext[];
	public predicate(i: number): PredicateContext;
	public predicate(i?: number): PredicateContext | PredicateContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PredicateContext);
		} else {
			return this.getRuleContext(i, PredicateContext);
		}
	}
	constructor(ctx: PredicateContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterBinaryComparisonPredicate) {
			listener.enterBinaryComparisonPredicate(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitBinaryComparisonPredicate) {
			listener.exitBinaryComparisonPredicate(this);
		}
	}
}
export class SubqueryComparisonPredicateContext extends PredicateContext {
	public _quantifier!: Token;
	public predicate(): PredicateContext {
		return this.getRuleContext(0, PredicateContext);
	}
	public comparisonOperator(): ComparisonOperatorContext {
		return this.getRuleContext(0, ComparisonOperatorContext);
	}
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public selectStatement(): SelectStatementContext {
		return this.getRuleContext(0, SelectStatementContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ALL, 0); }
	public ANY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ANY, 0); }
	public SOME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SOME, 0); }
	constructor(ctx: PredicateContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSubqueryComparisonPredicate) {
			listener.enterSubqueryComparisonPredicate(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSubqueryComparisonPredicate) {
			listener.exitSubqueryComparisonPredicate(this);
		}
	}
}
export class BetweenPredicateContext extends PredicateContext {
	public predicate(): PredicateContext[];
	public predicate(i: number): PredicateContext;
	public predicate(i?: number): PredicateContext | PredicateContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PredicateContext);
		} else {
			return this.getRuleContext(i, PredicateContext);
		}
	}
	public BETWEEN(): TerminalNode { return this.getToken(MariaDBParser.BETWEEN, 0); }
	public AND(): TerminalNode { return this.getToken(MariaDBParser.AND, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NOT, 0); }
	constructor(ctx: PredicateContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterBetweenPredicate) {
			listener.enterBetweenPredicate(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitBetweenPredicate) {
			listener.exitBetweenPredicate(this);
		}
	}
}
export class SoundsLikePredicateContext extends PredicateContext {
	public predicate(): PredicateContext[];
	public predicate(i: number): PredicateContext;
	public predicate(i?: number): PredicateContext | PredicateContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PredicateContext);
		} else {
			return this.getRuleContext(i, PredicateContext);
		}
	}
	public SOUNDS(): TerminalNode { return this.getToken(MariaDBParser.SOUNDS, 0); }
	public LIKE(): TerminalNode { return this.getToken(MariaDBParser.LIKE, 0); }
	constructor(ctx: PredicateContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSoundsLikePredicate) {
			listener.enterSoundsLikePredicate(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSoundsLikePredicate) {
			listener.exitSoundsLikePredicate(this);
		}
	}
}
export class LikePredicateContext extends PredicateContext {
	public predicate(): PredicateContext[];
	public predicate(i: number): PredicateContext;
	public predicate(i?: number): PredicateContext | PredicateContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PredicateContext);
		} else {
			return this.getRuleContext(i, PredicateContext);
		}
	}
	public LIKE(): TerminalNode { return this.getToken(MariaDBParser.LIKE, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NOT, 0); }
	public ESCAPE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ESCAPE, 0); }
	public STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING_LITERAL, 0); }
	constructor(ctx: PredicateContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterLikePredicate) {
			listener.enterLikePredicate(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitLikePredicate) {
			listener.exitLikePredicate(this);
		}
	}
}
export class RegexpPredicateContext extends PredicateContext {
	public _regex!: Token;
	public predicate(): PredicateContext[];
	public predicate(i: number): PredicateContext;
	public predicate(i?: number): PredicateContext | PredicateContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PredicateContext);
		} else {
			return this.getRuleContext(i, PredicateContext);
		}
	}
	public REGEXP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REGEXP, 0); }
	public RLIKE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RLIKE, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NOT, 0); }
	constructor(ctx: PredicateContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterRegexpPredicate) {
			listener.enterRegexpPredicate(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitRegexpPredicate) {
			listener.exitRegexpPredicate(this);
		}
	}
}
export class ExpressionAtomPredicateContext extends PredicateContext {
	public expressionAtom(): ExpressionAtomContext {
		return this.getRuleContext(0, ExpressionAtomContext);
	}
	public LOCAL_ID(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOCAL_ID, 0); }
	public VAR_ASSIGN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VAR_ASSIGN, 0); }
	constructor(ctx: PredicateContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterExpressionAtomPredicate) {
			listener.enterExpressionAtomPredicate(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitExpressionAtomPredicate) {
			listener.exitExpressionAtomPredicate(this);
		}
	}
}
export class JsonMemberOfPredicateContext extends PredicateContext {
	public predicate(): PredicateContext[];
	public predicate(i: number): PredicateContext;
	public predicate(i?: number): PredicateContext | PredicateContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PredicateContext);
		} else {
			return this.getRuleContext(i, PredicateContext);
		}
	}
	public MEMBER(): TerminalNode { return this.getToken(MariaDBParser.MEMBER, 0); }
	public OF(): TerminalNode { return this.getToken(MariaDBParser.OF, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	constructor(ctx: PredicateContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterJsonMemberOfPredicate) {
			listener.enterJsonMemberOfPredicate(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitJsonMemberOfPredicate) {
			listener.exitJsonMemberOfPredicate(this);
		}
	}
}


export class ExpressionAtomContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_expressionAtom; }
	public copyFrom(ctx: ExpressionAtomContext): void {
		super.copyFrom(ctx);
	}
}
export class ConstantExpressionAtomContext extends ExpressionAtomContext {
	public constant(): ConstantContext {
		return this.getRuleContext(0, ConstantContext);
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterConstantExpressionAtom) {
			listener.enterConstantExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitConstantExpressionAtom) {
			listener.exitConstantExpressionAtom(this);
		}
	}
}
export class FullColumnNameExpressionAtomContext extends ExpressionAtomContext {
	public fullColumnName(): FullColumnNameContext {
		return this.getRuleContext(0, FullColumnNameContext);
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterFullColumnNameExpressionAtom) {
			listener.enterFullColumnNameExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitFullColumnNameExpressionAtom) {
			listener.exitFullColumnNameExpressionAtom(this);
		}
	}
}
export class FunctionCallExpressionAtomContext extends ExpressionAtomContext {
	public functionCall(): FunctionCallContext {
		return this.getRuleContext(0, FunctionCallContext);
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterFunctionCallExpressionAtom) {
			listener.enterFunctionCallExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitFunctionCallExpressionAtom) {
			listener.exitFunctionCallExpressionAtom(this);
		}
	}
}
export class CollateExpressionAtomContext extends ExpressionAtomContext {
	public expressionAtom(): ExpressionAtomContext {
		return this.getRuleContext(0, ExpressionAtomContext);
	}
	public COLLATE(): TerminalNode { return this.getToken(MariaDBParser.COLLATE, 0); }
	public collationName(): CollationNameContext {
		return this.getRuleContext(0, CollationNameContext);
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCollateExpressionAtom) {
			listener.enterCollateExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCollateExpressionAtom) {
			listener.exitCollateExpressionAtom(this);
		}
	}
}
export class MysqlVariableExpressionAtomContext extends ExpressionAtomContext {
	public mysqlVariable(): MysqlVariableContext {
		return this.getRuleContext(0, MysqlVariableContext);
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterMysqlVariableExpressionAtom) {
			listener.enterMysqlVariableExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitMysqlVariableExpressionAtom) {
			listener.exitMysqlVariableExpressionAtom(this);
		}
	}
}
export class UnaryExpressionAtomContext extends ExpressionAtomContext {
	public unaryOperator(): UnaryOperatorContext {
		return this.getRuleContext(0, UnaryOperatorContext);
	}
	public expressionAtom(): ExpressionAtomContext {
		return this.getRuleContext(0, ExpressionAtomContext);
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterUnaryExpressionAtom) {
			listener.enterUnaryExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitUnaryExpressionAtom) {
			listener.exitUnaryExpressionAtom(this);
		}
	}
}
export class BinaryExpressionAtomContext extends ExpressionAtomContext {
	public BINARY(): TerminalNode { return this.getToken(MariaDBParser.BINARY, 0); }
	public expressionAtom(): ExpressionAtomContext {
		return this.getRuleContext(0, ExpressionAtomContext);
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterBinaryExpressionAtom) {
			listener.enterBinaryExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitBinaryExpressionAtom) {
			listener.exitBinaryExpressionAtom(this);
		}
	}
}
export class NestedExpressionAtomContext extends ExpressionAtomContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterNestedExpressionAtom) {
			listener.enterNestedExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitNestedExpressionAtom) {
			listener.exitNestedExpressionAtom(this);
		}
	}
}
export class NestedRowExpressionAtomContext extends ExpressionAtomContext {
	public ROW(): TerminalNode { return this.getToken(MariaDBParser.ROW, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.COMMA);
		} else {
			return this.getToken(MariaDBParser.COMMA, i);
		}
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterNestedRowExpressionAtom) {
			listener.enterNestedRowExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitNestedRowExpressionAtom) {
			listener.exitNestedRowExpressionAtom(this);
		}
	}
}
export class ExistsExpressionAtomContext extends ExpressionAtomContext {
	public EXISTS(): TerminalNode { return this.getToken(MariaDBParser.EXISTS, 0); }
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public selectStatement(): SelectStatementContext {
		return this.getRuleContext(0, SelectStatementContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterExistsExpressionAtom) {
			listener.enterExistsExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitExistsExpressionAtom) {
			listener.exitExistsExpressionAtom(this);
		}
	}
}
export class SubqueryExpressionAtomContext extends ExpressionAtomContext {
	public LR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.LR_BRACKET, 0); }
	public selectStatement(): SelectStatementContext {
		return this.getRuleContext(0, SelectStatementContext);
	}
	public RR_BRACKET(): TerminalNode { return this.getToken(MariaDBParser.RR_BRACKET, 0); }
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterSubqueryExpressionAtom) {
			listener.enterSubqueryExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitSubqueryExpressionAtom) {
			listener.exitSubqueryExpressionAtom(this);
		}
	}
}
export class IntervalExpressionAtomContext extends ExpressionAtomContext {
	public INTERVAL(): TerminalNode { return this.getToken(MariaDBParser.INTERVAL, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public intervalType(): IntervalTypeContext {
		return this.getRuleContext(0, IntervalTypeContext);
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterIntervalExpressionAtom) {
			listener.enterIntervalExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitIntervalExpressionAtom) {
			listener.exitIntervalExpressionAtom(this);
		}
	}
}
export class BitExpressionAtomContext extends ExpressionAtomContext {
	public _left!: ExpressionAtomContext;
	public _right!: ExpressionAtomContext;
	public bitOperator(): BitOperatorContext {
		return this.getRuleContext(0, BitOperatorContext);
	}
	public expressionAtom(): ExpressionAtomContext[];
	public expressionAtom(i: number): ExpressionAtomContext;
	public expressionAtom(i?: number): ExpressionAtomContext | ExpressionAtomContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionAtomContext);
		} else {
			return this.getRuleContext(i, ExpressionAtomContext);
		}
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterBitExpressionAtom) {
			listener.enterBitExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitBitExpressionAtom) {
			listener.exitBitExpressionAtom(this);
		}
	}
}
export class MathExpressionAtomContext extends ExpressionAtomContext {
	public _left!: ExpressionAtomContext;
	public _right!: ExpressionAtomContext;
	public mathOperator(): MathOperatorContext {
		return this.getRuleContext(0, MathOperatorContext);
	}
	public expressionAtom(): ExpressionAtomContext[];
	public expressionAtom(i: number): ExpressionAtomContext;
	public expressionAtom(i?: number): ExpressionAtomContext | ExpressionAtomContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionAtomContext);
		} else {
			return this.getRuleContext(i, ExpressionAtomContext);
		}
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterMathExpressionAtom) {
			listener.enterMathExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitMathExpressionAtom) {
			listener.exitMathExpressionAtom(this);
		}
	}
}
export class JsonExpressionAtomContext extends ExpressionAtomContext {
	public _left!: ExpressionAtomContext;
	public _right!: ExpressionAtomContext;
	public jsonOperator(): JsonOperatorContext {
		return this.getRuleContext(0, JsonOperatorContext);
	}
	public expressionAtom(): ExpressionAtomContext[];
	public expressionAtom(i: number): ExpressionAtomContext;
	public expressionAtom(i?: number): ExpressionAtomContext | ExpressionAtomContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionAtomContext);
		} else {
			return this.getRuleContext(i, ExpressionAtomContext);
		}
	}
	constructor(ctx: ExpressionAtomContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterJsonExpressionAtom) {
			listener.enterJsonExpressionAtom(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitJsonExpressionAtom) {
			listener.exitJsonExpressionAtom(this);
		}
	}
}


export class UnaryOperatorContext extends ParserRuleContext {
	public EXCLAMATION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EXCLAMATION_SYMBOL, 0); }
	public BIT_NOT_OP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BIT_NOT_OP, 0); }
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PLUS, 0); }
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MINUS, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_unaryOperator; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterUnaryOperator) {
			listener.enterUnaryOperator(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitUnaryOperator) {
			listener.exitUnaryOperator(this);
		}
	}
}


export class ComparisonOperatorContext extends ParserRuleContext {
	public EQUAL_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
	public GREATER_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GREATER_SYMBOL, 0); }
	public LESS_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LESS_SYMBOL, 0); }
	public EXCLAMATION_SYMBOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EXCLAMATION_SYMBOL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_comparisonOperator; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterComparisonOperator) {
			listener.enterComparisonOperator(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitComparisonOperator) {
			listener.exitComparisonOperator(this);
		}
	}
}


export class LogicalOperatorContext extends ParserRuleContext {
	public AND(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AND, 0); }
	public BIT_AND_OP(): TerminalNode[];
	public BIT_AND_OP(i: number): TerminalNode;
	public BIT_AND_OP(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.BIT_AND_OP);
		} else {
			return this.getToken(MariaDBParser.BIT_AND_OP, i);
		}
	}
	public XOR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.XOR, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.OR, 0); }
	public BIT_OR_OP(): TerminalNode[];
	public BIT_OR_OP(i: number): TerminalNode;
	public BIT_OR_OP(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.BIT_OR_OP);
		} else {
			return this.getToken(MariaDBParser.BIT_OR_OP, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_logicalOperator; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterLogicalOperator) {
			listener.enterLogicalOperator(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitLogicalOperator) {
			listener.exitLogicalOperator(this);
		}
	}
}


export class BitOperatorContext extends ParserRuleContext {
	public LESS_SYMBOL(): TerminalNode[];
	public LESS_SYMBOL(i: number): TerminalNode;
	public LESS_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.LESS_SYMBOL);
		} else {
			return this.getToken(MariaDBParser.LESS_SYMBOL, i);
		}
	}
	public GREATER_SYMBOL(): TerminalNode[];
	public GREATER_SYMBOL(i: number): TerminalNode;
	public GREATER_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.GREATER_SYMBOL);
		} else {
			return this.getToken(MariaDBParser.GREATER_SYMBOL, i);
		}
	}
	public BIT_AND_OP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BIT_AND_OP, 0); }
	public BIT_XOR_OP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BIT_XOR_OP, 0); }
	public BIT_OR_OP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BIT_OR_OP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_bitOperator; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterBitOperator) {
			listener.enterBitOperator(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitBitOperator) {
			listener.exitBitOperator(this);
		}
	}
}


export class MathOperatorContext extends ParserRuleContext {
	public STAR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STAR, 0); }
	public DIVIDE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DIVIDE, 0); }
	public MODULE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MODULE, 0); }
	public DIV(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DIV, 0); }
	public MOD(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MOD, 0); }
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PLUS, 0); }
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MINUS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_mathOperator; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterMathOperator) {
			listener.enterMathOperator(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitMathOperator) {
			listener.exitMathOperator(this);
		}
	}
}


export class JsonOperatorContext extends ParserRuleContext {
	public MINUS(): TerminalNode { return this.getToken(MariaDBParser.MINUS, 0); }
	public GREATER_SYMBOL(): TerminalNode[];
	public GREATER_SYMBOL(i: number): TerminalNode;
	public GREATER_SYMBOL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(MariaDBParser.GREATER_SYMBOL);
		} else {
			return this.getToken(MariaDBParser.GREATER_SYMBOL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_jsonOperator; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterJsonOperator) {
			listener.enterJsonOperator(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitJsonOperator) {
			listener.exitJsonOperator(this);
		}
	}
}


export class CharsetNameBaseContext extends ParserRuleContext {
	public ARMSCII8(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ARMSCII8, 0); }
	public ASCII(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ASCII, 0); }
	public BIG5(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BIG5, 0); }
	public BINARY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BINARY, 0); }
	public CP1250(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CP1250, 0); }
	public CP1251(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CP1251, 0); }
	public CP1256(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CP1256, 0); }
	public CP1257(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CP1257, 0); }
	public CP850(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CP850, 0); }
	public CP852(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CP852, 0); }
	public CP866(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CP866, 0); }
	public CP932(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CP932, 0); }
	public DEC8(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DEC8, 0); }
	public EUCJPMS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EUCJPMS, 0); }
	public EUCKR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EUCKR, 0); }
	public GB18030(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GB18030, 0); }
	public GB2312(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GB2312, 0); }
	public GBK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GBK, 0); }
	public GEOSTD8(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GEOSTD8, 0); }
	public GREEK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GREEK, 0); }
	public HEBREW(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.HEBREW, 0); }
	public HP8(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.HP8, 0); }
	public KEYBCS2(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.KEYBCS2, 0); }
	public KOI8R(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.KOI8R, 0); }
	public KOI8U(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.KOI8U, 0); }
	public LATIN1(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LATIN1, 0); }
	public LATIN2(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LATIN2, 0); }
	public LATIN5(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LATIN5, 0); }
	public LATIN7(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LATIN7, 0); }
	public MACCE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MACCE, 0); }
	public MACROMAN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MACROMAN, 0); }
	public SJIS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SJIS, 0); }
	public SWE7(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SWE7, 0); }
	public TIS620(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TIS620, 0); }
	public UCS2(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UCS2, 0); }
	public UJIS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UJIS, 0); }
	public UTF16(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UTF16, 0); }
	public UTF16LE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UTF16LE, 0); }
	public UTF32(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UTF32, 0); }
	public UTF8(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UTF8, 0); }
	public UTF8MB3(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UTF8MB3, 0); }
	public UTF8MB4(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UTF8MB4, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_charsetNameBase; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterCharsetNameBase) {
			listener.enterCharsetNameBase(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitCharsetNameBase) {
			listener.exitCharsetNameBase(this);
		}
	}
}


export class TransactionLevelBaseContext extends ParserRuleContext {
	public REPEATABLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REPEATABLE, 0); }
	public COMMITTED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COMMITTED, 0); }
	public UNCOMMITTED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UNCOMMITTED, 0); }
	public SERIALIZABLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SERIALIZABLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_transactionLevelBase; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterTransactionLevelBase) {
			listener.enterTransactionLevelBase(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitTransactionLevelBase) {
			listener.exitTransactionLevelBase(this);
		}
	}
}


export class PrivilegesBaseContext extends ParserRuleContext {
	public TABLES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TABLES, 0); }
	public ROUTINE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ROUTINE, 0); }
	public EXECUTE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EXECUTE, 0); }
	public FILE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FILE, 0); }
	public PROCESS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PROCESS, 0); }
	public RELOAD(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RELOAD, 0); }
	public SHUTDOWN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SHUTDOWN, 0); }
	public SUPER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SUPER, 0); }
	public PRIVILEGES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PRIVILEGES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_privilegesBase; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterPrivilegesBase) {
			listener.enterPrivilegesBase(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitPrivilegesBase) {
			listener.exitPrivilegesBase(this);
		}
	}
}


export class IntervalTypeBaseContext extends ParserRuleContext {
	public QUARTER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.QUARTER, 0); }
	public MONTH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MONTH, 0); }
	public DAY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DAY, 0); }
	public HOUR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.HOUR, 0); }
	public MINUTE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MINUTE, 0); }
	public WEEK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WEEK, 0); }
	public SECOND(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SECOND, 0); }
	public MICROSECOND(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MICROSECOND, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_intervalTypeBase; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterIntervalTypeBase) {
			listener.enterIntervalTypeBase(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitIntervalTypeBase) {
			listener.exitIntervalTypeBase(this);
		}
	}
}


export class DataTypeBaseContext extends ParserRuleContext {
	public DATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DATE, 0); }
	public TIME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TIME, 0); }
	public TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TIMESTAMP, 0); }
	public DATETIME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DATETIME, 0); }
	public YEAR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.YEAR, 0); }
	public ENUM(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ENUM, 0); }
	public TEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TEXT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_dataTypeBase; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterDataTypeBase) {
			listener.enterDataTypeBase(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitDataTypeBase) {
			listener.exitDataTypeBase(this);
		}
	}
}


export class KeywordsCanBeIdContext extends ParserRuleContext {
	public ACCOUNT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ACCOUNT, 0); }
	public ACTION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ACTION, 0); }
	public ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ADMIN, 0); }
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AFTER, 0); }
	public AGGREGATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AGGREGATE, 0); }
	public ALGORITHM(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ALGORITHM, 0); }
	public ANY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ANY, 0); }
	public AT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AT, 0); }
	public AUDIT_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AUDIT_ADMIN, 0); }
	public AUTHORS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AUTHORS, 0); }
	public AUTOCOMMIT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AUTOCOMMIT, 0); }
	public AUTOEXTEND_SIZE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AUTOEXTEND_SIZE, 0); }
	public AUTO_INCREMENT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AUTO_INCREMENT, 0); }
	public AVG(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AVG, 0); }
	public AVG_ROW_LENGTH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AVG_ROW_LENGTH, 0); }
	public ATTRIBUTE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ATTRIBUTE, 0); }
	public BACKUP_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BACKUP_ADMIN, 0); }
	public BEGIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BEGIN, 0); }
	public BINLOG(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BINLOG, 0); }
	public BINLOG_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BINLOG_ADMIN, 0); }
	public BINLOG_ENCRYPTION_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BINLOG_ENCRYPTION_ADMIN, 0); }
	public BIT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BIT, 0); }
	public BIT_AND(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BIT_AND, 0); }
	public BIT_OR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BIT_OR, 0); }
	public BIT_XOR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BIT_XOR, 0); }
	public BLOCK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BLOCK, 0); }
	public BODY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BODY, 0); }
	public BOOL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BOOL, 0); }
	public BOOLEAN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BOOLEAN, 0); }
	public BTREE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BTREE, 0); }
	public BUCKETS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BUCKETS, 0); }
	public CACHE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CACHE, 0); }
	public CASCADED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CASCADED, 0); }
	public CHAIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CHAIN, 0); }
	public CHANGED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CHANGED, 0); }
	public CHANNEL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CHANNEL, 0); }
	public CHECKSUM(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CHECKSUM, 0); }
	public PAGE_CHECKSUM(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PAGE_CHECKSUM, 0); }
	public CATALOG_NAME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CATALOG_NAME, 0); }
	public CIPHER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CIPHER, 0); }
	public CLASS_ORIGIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CLASS_ORIGIN, 0); }
	public CLIENT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CLIENT, 0); }
	public CLONE_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CLONE_ADMIN, 0); }
	public CLOSE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CLOSE, 0); }
	public CLUSTERING(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CLUSTERING, 0); }
	public COALESCE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COALESCE, 0); }
	public CODE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CODE, 0); }
	public COLUMNS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COLUMNS, 0); }
	public COLUMN_FORMAT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COLUMN_FORMAT, 0); }
	public COLUMN_NAME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COLUMN_NAME, 0); }
	public COMMENT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COMMENT, 0); }
	public COMMIT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COMMIT, 0); }
	public COMPACT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COMPACT, 0); }
	public COMPLETION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COMPLETION, 0); }
	public COMPRESSED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COMPRESSED, 0); }
	public COMPRESSION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COMPRESSION, 0); }
	public CONCURRENT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONCURRENT, 0); }
	public CONDITION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONDITION, 0); }
	public CONNECT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONNECT, 0); }
	public CONNECTION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONNECTION, 0); }
	public CONNECTION_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONNECTION_ADMIN, 0); }
	public CONSISTENT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONSISTENT, 0); }
	public CONSTRAINT_CATALOG(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONSTRAINT_CATALOG, 0); }
	public CONSTRAINT_NAME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONSTRAINT_NAME, 0); }
	public CONSTRAINT_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONSTRAINT_SCHEMA, 0); }
	public CONTAINS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONTAINS, 0); }
	public CONTEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONTEXT, 0); }
	public CONTRIBUTORS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONTRIBUTORS, 0); }
	public COPY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COPY, 0); }
	public COUNT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COUNT, 0); }
	public CPU(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CPU, 0); }
	public CURRENT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CURRENT, 0); }
	public CURRENT_USER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CURRENT_USER, 0); }
	public CURSOR_NAME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CURSOR_NAME, 0); }
	public DATA(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DATA, 0); }
	public DATAFILE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DATAFILE, 0); }
	public DEALLOCATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DEALLOCATE, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DEFAULT, 0); }
	public DEFAULT_AUTH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DEFAULT_AUTH, 0); }
	public DEFINER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DEFINER, 0); }
	public DELAY_KEY_WRITE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DELAY_KEY_WRITE, 0); }
	public DES_KEY_FILE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DES_KEY_FILE, 0); }
	public DIAGNOSTICS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DIAGNOSTICS, 0); }
	public DIRECTORY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DIRECTORY, 0); }
	public DISABLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DISABLE, 0); }
	public DISCARD(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DISCARD, 0); }
	public DISK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DISK, 0); }
	public DO(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DO, 0); }
	public DUMPFILE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DUMPFILE, 0); }
	public DUPLICATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DUPLICATE, 0); }
	public DYNAMIC(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DYNAMIC, 0); }
	public EMPTY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EMPTY, 0); }
	public ENABLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ENABLE, 0); }
	public ENCRYPTION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ENCRYPTION, 0); }
	public ENCRYPTION_KEY_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ENCRYPTION_KEY_ADMIN, 0); }
	public END(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.END, 0); }
	public ENDS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ENDS, 0); }
	public ENGINE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ENGINE, 0); }
	public ENGINE_ATTRIBUTE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ENGINE_ATTRIBUTE, 0); }
	public ENGINES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ENGINES, 0); }
	public ERROR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ERROR, 0); }
	public ERRORS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ERRORS, 0); }
	public ESCAPE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ESCAPE, 0); }
	public EUR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EUR, 0); }
	public EVEN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EVEN, 0); }
	public EVENT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EVENT, 0); }
	public EVENTS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EVENTS, 0); }
	public EVERY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EVERY, 0); }
	public EXCEPT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EXCEPT, 0); }
	public EXCHANGE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EXCHANGE, 0); }
	public EXCLUSIVE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EXCLUSIVE, 0); }
	public EXPIRE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EXPIRE, 0); }
	public EXPORT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EXPORT, 0); }
	public EXTENDED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EXTENDED, 0); }
	public EXTENT_SIZE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EXTENT_SIZE, 0); }
	public FAILED_LOGIN_ATTEMPTS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FAILED_LOGIN_ATTEMPTS, 0); }
	public FAST(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FAST, 0); }
	public FAULTS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FAULTS, 0); }
	public FIELDS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FIELDS, 0); }
	public FILE_BLOCK_SIZE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FILE_BLOCK_SIZE, 0); }
	public FILTER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FILTER, 0); }
	public FIREWALL_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FIREWALL_ADMIN, 0); }
	public FIREWALL_USER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FIREWALL_USER, 0); }
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FIRST, 0); }
	public FIXED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FIXED, 0); }
	public FLUSH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FLUSH, 0); }
	public FOLLOWS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FOLLOWS, 0); }
	public FOUND(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FOUND, 0); }
	public FULL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FULL, 0); }
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FUNCTION, 0); }
	public GENERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GENERAL, 0); }
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GLOBAL, 0); }
	public GRANTS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GRANTS, 0); }
	public GROUP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GROUP, 0); }
	public GROUP_CONCAT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GROUP_CONCAT, 0); }
	public GROUP_REPLICATION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GROUP_REPLICATION, 0); }
	public GROUP_REPLICATION_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GROUP_REPLICATION_ADMIN, 0); }
	public HANDLER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.HANDLER, 0); }
	public HASH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.HASH, 0); }
	public HELP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.HELP, 0); }
	public HISTORY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.HISTORY, 0); }
	public HOST(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.HOST, 0); }
	public HOSTS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.HOSTS, 0); }
	public IDENTIFIED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.IDENTIFIED, 0); }
	public IGNORED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.IGNORED, 0); }
	public IGNORE_SERVER_IDS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.IGNORE_SERVER_IDS, 0); }
	public IMPORT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.IMPORT, 0); }
	public INDEXES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INDEXES, 0); }
	public INITIAL_SIZE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INITIAL_SIZE, 0); }
	public INNODB_REDO_LOG_ARCHIVE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INNODB_REDO_LOG_ARCHIVE, 0); }
	public INPLACE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INPLACE, 0); }
	public INSERT_METHOD(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INSERT_METHOD, 0); }
	public INSTALL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INSTALL, 0); }
	public INSTANCE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INSTANCE, 0); }
	public INSTANT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INSTANT, 0); }
	public INTERNAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INTERNAL, 0); }
	public INVOKE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INVOKE, 0); }
	public INVOKER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INVOKER, 0); }
	public IO(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.IO, 0); }
	public IO_THREAD(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.IO_THREAD, 0); }
	public IPC(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.IPC, 0); }
	public ISO(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ISO, 0); }
	public ISOLATION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ISOLATION, 0); }
	public ISSUER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ISSUER, 0); }
	public JIS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JIS, 0); }
	public JSON(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JSON, 0); }
	public KEY_BLOCK_SIZE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.KEY_BLOCK_SIZE, 0); }
	public LAMBDA(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LAMBDA, 0); }
	public LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LANGUAGE, 0); }
	public LAST(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LAST, 0); }
	public LATERAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LATERAL, 0); }
	public LEAVES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LEAVES, 0); }
	public LESS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LESS, 0); }
	public LEVEL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LEVEL, 0); }
	public LIST(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LIST, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOCAL, 0); }
	public LOCALES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOCALES, 0); }
	public LOGFILE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOGFILE, 0); }
	public LOGS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOGS, 0); }
	public MASTER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER, 0); }
	public MASTER_AUTO_POSITION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_AUTO_POSITION, 0); }
	public MASTER_CONNECT_RETRY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_CONNECT_RETRY, 0); }
	public MASTER_DELAY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_DELAY, 0); }
	public MASTER_HEARTBEAT_PERIOD(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_HEARTBEAT_PERIOD, 0); }
	public MASTER_HOST(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_HOST, 0); }
	public MASTER_LOG_FILE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_LOG_FILE, 0); }
	public MASTER_LOG_POS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_LOG_POS, 0); }
	public MASTER_PASSWORD(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_PASSWORD, 0); }
	public MASTER_PORT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_PORT, 0); }
	public MASTER_RETRY_COUNT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_RETRY_COUNT, 0); }
	public MASTER_SSL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_SSL, 0); }
	public MASTER_SSL_CA(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_SSL_CA, 0); }
	public MASTER_SSL_CAPATH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_SSL_CAPATH, 0); }
	public MASTER_SSL_CERT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_SSL_CERT, 0); }
	public MASTER_SSL_CIPHER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_SSL_CIPHER, 0); }
	public MASTER_SSL_CRL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_SSL_CRL, 0); }
	public MASTER_SSL_CRLPATH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_SSL_CRLPATH, 0); }
	public MASTER_SSL_KEY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_SSL_KEY, 0); }
	public MASTER_TLS_VERSION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_TLS_VERSION, 0); }
	public MASTER_USER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_USER, 0); }
	public MAX_CONNECTIONS_PER_HOUR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MAX_CONNECTIONS_PER_HOUR, 0); }
	public MAX_QUERIES_PER_HOUR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MAX_QUERIES_PER_HOUR, 0); }
	public MAX(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MAX, 0); }
	public MAX_ROWS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MAX_ROWS, 0); }
	public MAX_SIZE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MAX_SIZE, 0); }
	public MAX_UPDATES_PER_HOUR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MAX_UPDATES_PER_HOUR, 0); }
	public MAX_USER_CONNECTIONS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MAX_USER_CONNECTIONS, 0); }
	public MEDIUM(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MEDIUM, 0); }
	public MEMBER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MEMBER, 0); }
	public MEMORY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MEMORY, 0); }
	public MERGE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MERGE, 0); }
	public MESSAGE_TEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MESSAGE_TEXT, 0); }
	public MID(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MID, 0); }
	public MIGRATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MIGRATE, 0); }
	public MIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MIN, 0); }
	public MIN_ROWS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MIN_ROWS, 0); }
	public MODE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MODE, 0); }
	public MODIFY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MODIFY, 0); }
	public MUTEX(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MUTEX, 0); }
	public MYSQL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MYSQL, 0); }
	public MYSQL_ERRNO(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MYSQL_ERRNO, 0); }
	public NAME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NAME, 0); }
	public NAMES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NAMES, 0); }
	public NCHAR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NCHAR, 0); }
	public NDB_STORED_USER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NDB_STORED_USER, 0); }
	public NESTED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NESTED, 0); }
	public NEVER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NEVER, 0); }
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NEXT, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NO, 0); }
	public NOCOPY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NOCOPY, 0); }
	public NODEGROUP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NODEGROUP, 0); }
	public NONE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NONE, 0); }
	public NOWAIT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NOWAIT, 0); }
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NUMBER, 0); }
	public ODBC(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ODBC, 0); }
	public OFFLINE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.OFFLINE, 0); }
	public OFFSET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.OFFSET, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.OF, 0); }
	public OJ(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.OJ, 0); }
	public OLD_PASSWORD(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.OLD_PASSWORD, 0); }
	public ONE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ONE, 0); }
	public ONLINE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ONLINE, 0); }
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ONLY, 0); }
	public OPEN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.OPEN, 0); }
	public OPTIMIZER_COSTS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.OPTIMIZER_COSTS, 0); }
	public OPTIONAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.OPTIONAL, 0); }
	public OPTIONS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.OPTIONS, 0); }
	public ORDER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ORDER, 0); }
	public ORDINALITY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ORDINALITY, 0); }
	public OWNER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.OWNER, 0); }
	public PACKAGE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PACKAGE, 0); }
	public PACK_KEYS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PACK_KEYS, 0); }
	public PAGE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PAGE, 0); }
	public PARSER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PARSER, 0); }
	public PARTIAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PARTIAL, 0); }
	public PARTITIONING(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PARTITIONING, 0); }
	public PARTITIONS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PARTITIONS, 0); }
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PASSWORD, 0); }
	public PASSWORDLESS_USER_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PASSWORDLESS_USER_ADMIN, 0); }
	public PASSWORD_LOCK_TIME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PASSWORD_LOCK_TIME, 0); }
	public PATH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PATH, 0); }
	public PERSIST_RO_VARIABLES_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PERSIST_RO_VARIABLES_ADMIN, 0); }
	public PHASE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PHASE, 0); }
	public PLUGINS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PLUGINS, 0); }
	public PLUGIN_DIR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PLUGIN_DIR, 0); }
	public PLUGIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PLUGIN, 0); }
	public PORT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PORT, 0); }
	public PRECEDES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PRECEDES, 0); }
	public PREPARE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PREPARE, 0); }
	public PRESERVE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PRESERVE, 0); }
	public PREV(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PREV, 0); }
	public PRIMARY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PRIMARY, 0); }
	public PROCESSLIST(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PROCESSLIST, 0); }
	public PROFILE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PROFILE, 0); }
	public PROFILES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PROFILES, 0); }
	public PROXY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PROXY, 0); }
	public QUERY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.QUERY, 0); }
	public QUERY_RESPONSE_TIME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.QUERY_RESPONSE_TIME, 0); }
	public QUICK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.QUICK, 0); }
	public REBUILD(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REBUILD, 0); }
	public RECOVER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RECOVER, 0); }
	public RECURSIVE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RECURSIVE, 0); }
	public REDO_BUFFER_SIZE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REDO_BUFFER_SIZE, 0); }
	public REDUNDANT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REDUNDANT, 0); }
	public RELAY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RELAY, 0); }
	public RELAYLOG(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RELAYLOG, 0); }
	public RELAY_LOG_FILE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RELAY_LOG_FILE, 0); }
	public RELAY_LOG_POS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RELAY_LOG_POS, 0); }
	public REMOVE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REMOVE, 0); }
	public REORGANIZE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REORGANIZE, 0); }
	public REPAIR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REPAIR, 0); }
	public REPLICAS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REPLICAS, 0); }
	public REPLICATE_DO_DB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REPLICATE_DO_DB, 0); }
	public REPLICATE_DO_TABLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REPLICATE_DO_TABLE, 0); }
	public REPLICATE_IGNORE_DB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REPLICATE_IGNORE_DB, 0); }
	public REPLICATE_IGNORE_TABLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REPLICATE_IGNORE_TABLE, 0); }
	public REPLICATE_REWRITE_DB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REPLICATE_REWRITE_DB, 0); }
	public REPLICATE_WILD_DO_TABLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REPLICATE_WILD_DO_TABLE, 0); }
	public REPLICATE_WILD_IGNORE_TABLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
	public REPLICATION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REPLICATION, 0); }
	public REPLICATION_APPLIER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REPLICATION_APPLIER, 0); }
	public REPLICATION_SLAVE_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REPLICATION_SLAVE_ADMIN, 0); }
	public RESET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RESET, 0); }
	public RESOURCE_GROUP_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RESOURCE_GROUP_ADMIN, 0); }
	public RESOURCE_GROUP_USER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RESOURCE_GROUP_USER, 0); }
	public RESUME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RESUME, 0); }
	public RETURNED_SQLSTATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RETURNED_SQLSTATE, 0); }
	public RETURNS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RETURNS, 0); }
	public REUSE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REUSE, 0); }
	public ROLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ROLE, 0); }
	public ROLE_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ROLE_ADMIN, 0); }
	public ROLLBACK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ROLLBACK, 0); }
	public ROLLUP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ROLLUP, 0); }
	public ROTATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ROTATE, 0); }
	public ROW(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ROW, 0); }
	public ROWS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ROWS, 0); }
	public ROW_FORMAT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ROW_FORMAT, 0); }
	public RTREE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RTREE, 0); }
	public S3(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.S3, 0); }
	public SAVEPOINT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SAVEPOINT, 0); }
	public SCHEDULE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SCHEDULE, 0); }
	public SCHEMA_NAME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SCHEMA_NAME, 0); }
	public SECURITY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SECURITY, 0); }
	public SECONDARY_ENGINE_ATTRIBUTE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE, 0); }
	public SERIAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SERIAL, 0); }
	public SERVER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SERVER, 0); }
	public SESSION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SESSION, 0); }
	public SESSION_VARIABLES_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SESSION_VARIABLES_ADMIN, 0); }
	public SET_USER_ID(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SET_USER_ID, 0); }
	public SHARE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SHARE, 0); }
	public SHARED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SHARED, 0); }
	public SHOW_ROUTINE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SHOW_ROUTINE, 0); }
	public SIGNED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SIGNED, 0); }
	public SIMPLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SIMPLE, 0); }
	public SLAVE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SLAVE, 0); }
	public SLAVES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SLAVES, 0); }
	public SLOW(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SLOW, 0); }
	public SNAPSHOT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SNAPSHOT, 0); }
	public SOCKET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SOCKET, 0); }
	public SOME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SOME, 0); }
	public SONAME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SONAME, 0); }
	public SOUNDS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SOUNDS, 0); }
	public SOURCE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SOURCE, 0); }
	public SQL_AFTER_GTIDS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SQL_AFTER_GTIDS, 0); }
	public SQL_AFTER_MTS_GAPS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SQL_AFTER_MTS_GAPS, 0); }
	public SQL_BEFORE_GTIDS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SQL_BEFORE_GTIDS, 0); }
	public SQL_BUFFER_RESULT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SQL_BUFFER_RESULT, 0); }
	public SQL_CACHE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SQL_CACHE, 0); }
	public SQL_NO_CACHE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SQL_NO_CACHE, 0); }
	public SQL_THREAD(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SQL_THREAD, 0); }
	public STACKED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STACKED, 0); }
	public START(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.START, 0); }
	public STARTS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STARTS, 0); }
	public STATS_AUTO_RECALC(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STATS_AUTO_RECALC, 0); }
	public STATS_PERSISTENT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STATS_PERSISTENT, 0); }
	public STATS_SAMPLE_PAGES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STATS_SAMPLE_PAGES, 0); }
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STATUS, 0); }
	public STD(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STD, 0); }
	public STDDEV(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STDDEV, 0); }
	public STDDEV_POP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STDDEV_POP, 0); }
	public STDDEV_SAMP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STDDEV_SAMP, 0); }
	public STOP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STOP, 0); }
	public STORAGE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STORAGE, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRING, 0); }
	public SUBCLASS_ORIGIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SUBCLASS_ORIGIN, 0); }
	public SUBJECT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SUBJECT, 0); }
	public SUBPARTITION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SUBPARTITION, 0); }
	public SUBPARTITIONS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SUBPARTITIONS, 0); }
	public SUM(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SUM, 0); }
	public SUSPEND(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SUSPEND, 0); }
	public SWAPS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SWAPS, 0); }
	public SWITCHES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SWITCHES, 0); }
	public SYSTEM_VARIABLES_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SYSTEM_VARIABLES_ADMIN, 0); }
	public TABLE_NAME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TABLE_NAME, 0); }
	public TABLESPACE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TABLESPACE, 0); }
	public TABLE_ENCRYPTION_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TABLE_ENCRYPTION_ADMIN, 0); }
	public TABLE_TYPE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TABLE_TYPE, 0); }
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TEMPORARY, 0); }
	public TEMPTABLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TEMPTABLE, 0); }
	public THAN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.THAN, 0); }
	public TRADITIONAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TRADITIONAL, 0); }
	public TRANSACTION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TRANSACTION, 0); }
	public TRANSACTIONAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TRANSACTIONAL, 0); }
	public TRIGGERS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TRIGGERS, 0); }
	public TRUNCATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TRUNCATE, 0); }
	public TYPES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TYPES, 0); }
	public UNBOUNDED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UNBOUNDED, 0); }
	public UNDEFINED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UNDEFINED, 0); }
	public UNDOFILE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UNDOFILE, 0); }
	public UNDO_BUFFER_SIZE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UNDO_BUFFER_SIZE, 0); }
	public UNINSTALL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UNINSTALL, 0); }
	public UNKNOWN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UNKNOWN, 0); }
	public UNTIL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UNTIL, 0); }
	public UPGRADE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UPGRADE, 0); }
	public USA(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.USA, 0); }
	public USER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.USER, 0); }
	public USE_FRM(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.USE_FRM, 0); }
	public USER_RESOURCES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.USER_RESOURCES, 0); }
	public VALIDATION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VALIDATION, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VALUE, 0); }
	public VAR_POP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VAR_POP, 0); }
	public VAR_SAMP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VAR_SAMP, 0); }
	public VARIABLES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VARIABLES, 0); }
	public VARIANCE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VARIANCE, 0); }
	public VERSION_TOKEN_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VERSION_TOKEN_ADMIN, 0); }
	public VIEW(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VIEW, 0); }
	public VIRTUAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VIRTUAL, 0); }
	public WAIT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WAIT, 0); }
	public WARNINGS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WARNINGS, 0); }
	public WITHOUT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WITHOUT, 0); }
	public WORK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WORK, 0); }
	public WRAPPER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WRAPPER, 0); }
	public WSREP_MEMBERSHIP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WSREP_MEMBERSHIP, 0); }
	public WSREP_STATUS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WSREP_STATUS, 0); }
	public X509(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.X509, 0); }
	public XA(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.XA, 0); }
	public XA_RECOVER_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.XA_RECOVER_ADMIN, 0); }
	public XML(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.XML, 0); }
	public BINLOG_MONITOR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BINLOG_MONITOR, 0); }
	public BINLOG_REPLAY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BINLOG_REPLAY, 0); }
	public CURRENT_ROLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CURRENT_ROLE, 0); }
	public CYCLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CYCLE, 0); }
	public ENCRYPTED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ENCRYPTED, 0); }
	public ENCRYPTION_KEY_ID(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ENCRYPTION_KEY_ID, 0); }
	public FEDERATED_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FEDERATED_ADMIN, 0); }
	public INCREMENT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INCREMENT, 0); }
	public LASTVAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LASTVAL, 0); }
	public LOCKED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOCKED, 0); }
	public MAXVALUE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MAXVALUE, 0); }
	public MINVALUE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MINVALUE, 0); }
	public NEXTVAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NEXTVAL, 0); }
	public NOCACHE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NOCACHE, 0); }
	public NOCYCLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NOCYCLE, 0); }
	public NOMAXVALUE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NOMAXVALUE, 0); }
	public NOMINVALUE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NOMINVALUE, 0); }
	public PERSISTENT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PERSISTENT, 0); }
	public PREVIOUS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PREVIOUS, 0); }
	public READ_ONLY_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.READ_ONLY_ADMIN, 0); }
	public REPLICA(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REPLICA, 0); }
	public REPLICATION_MASTER_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REPLICATION_MASTER_ADMIN, 0); }
	public RESTART(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RESTART, 0); }
	public SEQUENCE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SEQUENCE, 0); }
	public SETVAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SETVAL, 0); }
	public SKIP_(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SKIP_, 0); }
	public STATEMENT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STATEMENT, 0); }
	public VIA(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VIA, 0); }
	public MONITOR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MONITOR, 0); }
	public READ_ONLY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.READ_ONLY, 0); }
	public REPLAY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REPLAY, 0); }
	public USER_STATISTICS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.USER_STATISTICS, 0); }
	public CLIENT_STATISTICS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CLIENT_STATISTICS, 0); }
	public INDEX_STATISTICS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INDEX_STATISTICS, 0); }
	public TABLE_STATISTICS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TABLE_STATISTICS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_keywordsCanBeId; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterKeywordsCanBeId) {
			listener.enterKeywordsCanBeId(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitKeywordsCanBeId) {
			listener.exitKeywordsCanBeId(this);
		}
	}
}


export class FunctionNameBaseContext extends ParserRuleContext {
	public ABS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ABS, 0); }
	public ACOS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ACOS, 0); }
	public ADDDATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ADDDATE, 0); }
	public ADDTIME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ADDTIME, 0); }
	public AES_DECRYPT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AES_DECRYPT, 0); }
	public AES_ENCRYPT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AES_ENCRYPT, 0); }
	public AREA(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.AREA, 0); }
	public ASBINARY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ASBINARY, 0); }
	public ASIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ASIN, 0); }
	public ASTEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ASTEXT, 0); }
	public ASWKB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ASWKB, 0); }
	public ASWKT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ASWKT, 0); }
	public ASYMMETRIC_DECRYPT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ASYMMETRIC_DECRYPT, 0); }
	public ASYMMETRIC_DERIVE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ASYMMETRIC_DERIVE, 0); }
	public ASYMMETRIC_ENCRYPT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ASYMMETRIC_ENCRYPT, 0); }
	public ASYMMETRIC_SIGN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ASYMMETRIC_SIGN, 0); }
	public ASYMMETRIC_VERIFY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ASYMMETRIC_VERIFY, 0); }
	public ATAN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ATAN, 0); }
	public ATAN2(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ATAN2, 0); }
	public BENCHMARK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BENCHMARK, 0); }
	public BIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BIN, 0); }
	public BIT_COUNT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BIT_COUNT, 0); }
	public BIT_LENGTH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BIT_LENGTH, 0); }
	public BUFFER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.BUFFER, 0); }
	public CEIL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CEIL, 0); }
	public CEILING(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CEILING, 0); }
	public CENTROID(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CENTROID, 0); }
	public CHARACTER_LENGTH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CHARACTER_LENGTH, 0); }
	public CHARSET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CHARSET, 0); }
	public CHAR_LENGTH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CHAR_LENGTH, 0); }
	public COERCIBILITY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COERCIBILITY, 0); }
	public COLLATION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COLLATION, 0); }
	public COMPRESS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COMPRESS, 0); }
	public CONCAT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONCAT, 0); }
	public CONCAT_WS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONCAT_WS, 0); }
	public CONNECTION_ID(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONNECTION_ID, 0); }
	public CONV(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONV, 0); }
	public CONVERT_TZ(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CONVERT_TZ, 0); }
	public COS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COS, 0); }
	public COT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COT, 0); }
	public COUNT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.COUNT, 0); }
	public CRC32(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CRC32, 0); }
	public CREATE_ASYMMETRIC_PRIV_KEY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY, 0); }
	public CREATE_ASYMMETRIC_PUB_KEY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY, 0); }
	public CREATE_DH_PARAMETERS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CREATE_DH_PARAMETERS, 0); }
	public CREATE_DIGEST(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CREATE_DIGEST, 0); }
	public CROSSES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CROSSES, 0); }
	public CUME_DIST(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.CUME_DIST, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DATABASE, 0); }
	public DATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DATE, 0); }
	public DATEDIFF(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DATEDIFF, 0); }
	public DATE_FORMAT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DATE_FORMAT, 0); }
	public DAY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DAY, 0); }
	public DAYNAME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DAYNAME, 0); }
	public DAYOFMONTH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DAYOFMONTH, 0); }
	public DAYOFWEEK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DAYOFWEEK, 0); }
	public DAYOFYEAR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DAYOFYEAR, 0); }
	public DECODE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DECODE, 0); }
	public DEGREES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DEGREES, 0); }
	public DENSE_RANK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DENSE_RANK, 0); }
	public DES_DECRYPT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DES_DECRYPT, 0); }
	public DES_ENCRYPT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DES_ENCRYPT, 0); }
	public DIMENSION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DIMENSION, 0); }
	public DISJOINT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.DISJOINT, 0); }
	public ELT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ELT, 0); }
	public ENCODE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ENCODE, 0); }
	public ENCRYPT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ENCRYPT, 0); }
	public ENDPOINT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ENDPOINT, 0); }
	public ENVELOPE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ENVELOPE, 0); }
	public EQUALS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EQUALS, 0); }
	public EXP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EXP, 0); }
	public EXPORT_SET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EXPORT_SET, 0); }
	public EXTERIORRING(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EXTERIORRING, 0); }
	public EXTRACTVALUE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.EXTRACTVALUE, 0); }
	public FIELD(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FIELD, 0); }
	public FIND_IN_SET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FIND_IN_SET, 0); }
	public FIRST_VALUE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FIRST_VALUE, 0); }
	public FLOOR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FLOOR, 0); }
	public FORMAT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FORMAT, 0); }
	public FOUND_ROWS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FOUND_ROWS, 0); }
	public FROM_BASE64(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FROM_BASE64, 0); }
	public FROM_DAYS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FROM_DAYS, 0); }
	public FROM_UNIXTIME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.FROM_UNIXTIME, 0); }
	public GEOMCOLLFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GEOMCOLLFROMTEXT, 0); }
	public GEOMCOLLFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GEOMCOLLFROMWKB, 0); }
	public GEOMETRYCOLLECTION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GEOMETRYCOLLECTION, 0); }
	public GEOMETRYCOLLECTIONFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT, 0); }
	public GEOMETRYCOLLECTIONFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GEOMETRYCOLLECTIONFROMWKB, 0); }
	public GEOMETRYFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GEOMETRYFROMTEXT, 0); }
	public GEOMETRYFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GEOMETRYFROMWKB, 0); }
	public GEOMETRYN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GEOMETRYN, 0); }
	public GEOMETRYTYPE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GEOMETRYTYPE, 0); }
	public GEOMFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GEOMFROMTEXT, 0); }
	public GEOMFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GEOMFROMWKB, 0); }
	public GET_FORMAT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GET_FORMAT, 0); }
	public GET_LOCK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GET_LOCK, 0); }
	public GLENGTH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GLENGTH, 0); }
	public GREATEST(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GREATEST, 0); }
	public GTID_SUBSET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GTID_SUBSET, 0); }
	public GTID_SUBTRACT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.GTID_SUBTRACT, 0); }
	public HEX(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.HEX, 0); }
	public HOUR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.HOUR, 0); }
	public IFNULL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.IFNULL, 0); }
	public INET6_ATON(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INET6_ATON, 0); }
	public INET6_NTOA(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INET6_NTOA, 0); }
	public INET_ATON(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INET_ATON, 0); }
	public INET_NTOA(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INET_NTOA, 0); }
	public INSTR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INSTR, 0); }
	public INTERIORRINGN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INTERIORRINGN, 0); }
	public INTERSECTS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INTERSECTS, 0); }
	public INVISIBLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.INVISIBLE, 0); }
	public ISCLOSED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ISCLOSED, 0); }
	public ISEMPTY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ISEMPTY, 0); }
	public ISNULL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ISNULL, 0); }
	public ISSIMPLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ISSIMPLE, 0); }
	public IS_FREE_LOCK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.IS_FREE_LOCK, 0); }
	public IS_IPV4(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.IS_IPV4, 0); }
	public IS_IPV4_COMPAT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.IS_IPV4_COMPAT, 0); }
	public IS_IPV4_MAPPED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.IS_IPV4_MAPPED, 0); }
	public IS_IPV6(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.IS_IPV6, 0); }
	public IS_USED_LOCK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.IS_USED_LOCK, 0); }
	public LAG(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LAG, 0); }
	public LAST_INSERT_ID(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LAST_INSERT_ID, 0); }
	public LAST_VALUE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LAST_VALUE, 0); }
	public LCASE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LCASE, 0); }
	public LEAD(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LEAD, 0); }
	public LEAST(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LEAST, 0); }
	public LEFT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LEFT, 0); }
	public LENGTH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LENGTH, 0); }
	public LINEFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LINEFROMTEXT, 0); }
	public LINEFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LINEFROMWKB, 0); }
	public LINESTRING(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LINESTRING, 0); }
	public LINESTRINGFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LINESTRINGFROMTEXT, 0); }
	public LINESTRINGFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LINESTRINGFROMWKB, 0); }
	public LN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LN, 0); }
	public LOAD_FILE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOAD_FILE, 0); }
	public LOCATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOCATE, 0); }
	public LOG(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOG, 0); }
	public LOG10(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOG10, 0); }
	public LOG2(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOG2, 0); }
	public LOWER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LOWER, 0); }
	public LPAD(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LPAD, 0); }
	public LTRIM(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LTRIM, 0); }
	public MAKEDATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MAKEDATE, 0); }
	public MAKETIME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MAKETIME, 0); }
	public MAKE_SET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MAKE_SET, 0); }
	public MASTER_POS_WAIT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MASTER_POS_WAIT, 0); }
	public MBRCONTAINS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MBRCONTAINS, 0); }
	public MBRDISJOINT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MBRDISJOINT, 0); }
	public MBREQUAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MBREQUAL, 0); }
	public MBRINTERSECTS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MBRINTERSECTS, 0); }
	public MBROVERLAPS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MBROVERLAPS, 0); }
	public MBRTOUCHES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MBRTOUCHES, 0); }
	public MBRWITHIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MBRWITHIN, 0); }
	public MD5(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MD5, 0); }
	public MICROSECOND(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MICROSECOND, 0); }
	public MINUTE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MINUTE, 0); }
	public MLINEFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MLINEFROMTEXT, 0); }
	public MLINEFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MLINEFROMWKB, 0); }
	public MOD(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MOD, 0); }
	public MONTH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MONTH, 0); }
	public MONTHNAME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MONTHNAME, 0); }
	public MPOINTFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MPOINTFROMTEXT, 0); }
	public MPOINTFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MPOINTFROMWKB, 0); }
	public MPOLYFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MPOLYFROMTEXT, 0); }
	public MPOLYFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MPOLYFROMWKB, 0); }
	public MULTILINESTRING(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MULTILINESTRING, 0); }
	public MULTILINESTRINGFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MULTILINESTRINGFROMTEXT, 0); }
	public MULTILINESTRINGFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MULTILINESTRINGFROMWKB, 0); }
	public MULTIPOINT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MULTIPOINT, 0); }
	public MULTIPOINTFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MULTIPOINTFROMTEXT, 0); }
	public MULTIPOINTFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MULTIPOINTFROMWKB, 0); }
	public MULTIPOLYGON(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MULTIPOLYGON, 0); }
	public MULTIPOLYGONFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MULTIPOLYGONFROMTEXT, 0); }
	public MULTIPOLYGONFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.MULTIPOLYGONFROMWKB, 0); }
	public NAME_CONST(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NAME_CONST, 0); }
	public NTH_VALUE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NTH_VALUE, 0); }
	public NTILE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NTILE, 0); }
	public NULLIF(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NULLIF, 0); }
	public NUMGEOMETRIES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NUMGEOMETRIES, 0); }
	public NUMINTERIORRINGS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NUMINTERIORRINGS, 0); }
	public NUMPOINTS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NUMPOINTS, 0); }
	public OCT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.OCT, 0); }
	public OCTET_LENGTH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.OCTET_LENGTH, 0); }
	public ORD(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ORD, 0); }
	public OVERLAPS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.OVERLAPS, 0); }
	public PERCENT_RANK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PERCENT_RANK, 0); }
	public PERIOD_ADD(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PERIOD_ADD, 0); }
	public PERIOD_DIFF(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PERIOD_DIFF, 0); }
	public PI(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.PI, 0); }
	public POINT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.POINT, 0); }
	public POINTFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.POINTFROMTEXT, 0); }
	public POINTFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.POINTFROMWKB, 0); }
	public POINTN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.POINTN, 0); }
	public POLYFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.POLYFROMTEXT, 0); }
	public POLYFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.POLYFROMWKB, 0); }
	public POLYGON(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.POLYGON, 0); }
	public POLYGONFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.POLYGONFROMTEXT, 0); }
	public POLYGONFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.POLYGONFROMWKB, 0); }
	public POSITION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.POSITION, 0); }
	public POW(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.POW, 0); }
	public POWER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.POWER, 0); }
	public QUARTER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.QUARTER, 0); }
	public QUOTE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.QUOTE, 0); }
	public RADIANS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RADIANS, 0); }
	public RAND(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RAND, 0); }
	public RANK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RANK, 0); }
	public RANDOM_BYTES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RANDOM_BYTES, 0); }
	public RELEASE_LOCK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RELEASE_LOCK, 0); }
	public REVERSE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.REVERSE, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RIGHT, 0); }
	public ROUND(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ROUND, 0); }
	public ROW_COUNT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ROW_COUNT, 0); }
	public ROW_NUMBER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ROW_NUMBER, 0); }
	public RPAD(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RPAD, 0); }
	public RTRIM(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.RTRIM, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SCHEMA, 0); }
	public SECOND(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SECOND, 0); }
	public SEC_TO_TIME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SEC_TO_TIME, 0); }
	public SESSION_USER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SESSION_USER, 0); }
	public SESSION_VARIABLES_ADMIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SESSION_VARIABLES_ADMIN, 0); }
	public SHA(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SHA, 0); }
	public SHA1(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SHA1, 0); }
	public SHA2(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SHA2, 0); }
	public SIGN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SIGN, 0); }
	public SIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SIN, 0); }
	public SLEEP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SLEEP, 0); }
	public SOUNDEX(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SOUNDEX, 0); }
	public SQL_THREAD_WAIT_AFTER_GTIDS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0); }
	public SQRT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SQRT, 0); }
	public SRID(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SRID, 0); }
	public STARTPOINT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STARTPOINT, 0); }
	public STRCMP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STRCMP, 0); }
	public STR_TO_DATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.STR_TO_DATE, 0); }
	public ST_AREA(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_AREA, 0); }
	public ST_ASBINARY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_ASBINARY, 0); }
	public ST_ASTEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_ASTEXT, 0); }
	public ST_ASWKB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_ASWKB, 0); }
	public ST_ASWKT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_ASWKT, 0); }
	public ST_BUFFER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_BUFFER, 0); }
	public ST_CENTROID(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_CENTROID, 0); }
	public ST_CONTAINS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_CONTAINS, 0); }
	public ST_CROSSES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_CROSSES, 0); }
	public ST_DIFFERENCE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_DIFFERENCE, 0); }
	public ST_DIMENSION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_DIMENSION, 0); }
	public ST_DISJOINT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_DISJOINT, 0); }
	public ST_DISTANCE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_DISTANCE, 0); }
	public ST_ENDPOINT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_ENDPOINT, 0); }
	public ST_ENVELOPE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_ENVELOPE, 0); }
	public ST_EQUALS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_EQUALS, 0); }
	public ST_EXTERIORRING(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_EXTERIORRING, 0); }
	public ST_GEOMCOLLFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_GEOMCOLLFROMTEXT, 0); }
	public ST_GEOMCOLLFROMTXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_GEOMCOLLFROMTXT, 0); }
	public ST_GEOMCOLLFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_GEOMCOLLFROMWKB, 0); }
	public ST_GEOMETRYCOLLECTIONFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0); }
	public ST_GEOMETRYCOLLECTIONFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0); }
	public ST_GEOMETRYFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_GEOMETRYFROMTEXT, 0); }
	public ST_GEOMETRYFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_GEOMETRYFROMWKB, 0); }
	public ST_GEOMETRYN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_GEOMETRYN, 0); }
	public ST_GEOMETRYTYPE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_GEOMETRYTYPE, 0); }
	public ST_GEOMFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_GEOMFROMTEXT, 0); }
	public ST_GEOMFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_GEOMFROMWKB, 0); }
	public ST_INTERIORRINGN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_INTERIORRINGN, 0); }
	public ST_INTERSECTION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_INTERSECTION, 0); }
	public ST_INTERSECTS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_INTERSECTS, 0); }
	public ST_ISCLOSED(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_ISCLOSED, 0); }
	public ST_ISEMPTY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_ISEMPTY, 0); }
	public ST_ISSIMPLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_ISSIMPLE, 0); }
	public ST_LINEFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_LINEFROMTEXT, 0); }
	public ST_LINEFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_LINEFROMWKB, 0); }
	public ST_LINESTRINGFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_LINESTRINGFROMTEXT, 0); }
	public ST_LINESTRINGFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_LINESTRINGFROMWKB, 0); }
	public ST_NUMGEOMETRIES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_NUMGEOMETRIES, 0); }
	public ST_NUMINTERIORRING(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_NUMINTERIORRING, 0); }
	public ST_NUMINTERIORRINGS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_NUMINTERIORRINGS, 0); }
	public ST_NUMPOINTS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_NUMPOINTS, 0); }
	public ST_OVERLAPS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_OVERLAPS, 0); }
	public ST_POINTFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_POINTFROMTEXT, 0); }
	public ST_POINTFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_POINTFROMWKB, 0); }
	public ST_POINTN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_POINTN, 0); }
	public ST_POLYFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_POLYFROMTEXT, 0); }
	public ST_POLYFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_POLYFROMWKB, 0); }
	public ST_POLYGONFROMTEXT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_POLYGONFROMTEXT, 0); }
	public ST_POLYGONFROMWKB(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_POLYGONFROMWKB, 0); }
	public ST_SRID(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_SRID, 0); }
	public ST_STARTPOINT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_STARTPOINT, 0); }
	public ST_SYMDIFFERENCE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_SYMDIFFERENCE, 0); }
	public ST_TOUCHES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_TOUCHES, 0); }
	public ST_UNION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_UNION, 0); }
	public ST_WITHIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_WITHIN, 0); }
	public ST_X(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_X, 0); }
	public ST_Y(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.ST_Y, 0); }
	public SUBDATE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SUBDATE, 0); }
	public SUBSTRING_INDEX(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SUBSTRING_INDEX, 0); }
	public SUBTIME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SUBTIME, 0); }
	public SYSTEM_USER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SYSTEM_USER, 0); }
	public TAN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TAN, 0); }
	public TIME(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TIME, 0); }
	public TIMEDIFF(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TIMEDIFF, 0); }
	public TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TIMESTAMP, 0); }
	public TIMESTAMPADD(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TIMESTAMPADD, 0); }
	public TIMESTAMPDIFF(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TIMESTAMPDIFF, 0); }
	public TIME_FORMAT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TIME_FORMAT, 0); }
	public TIME_TO_SEC(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TIME_TO_SEC, 0); }
	public TOUCHES(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TOUCHES, 0); }
	public TO_BASE64(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TO_BASE64, 0); }
	public TO_DAYS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TO_DAYS, 0); }
	public TO_SECONDS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.TO_SECONDS, 0); }
	public UCASE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UCASE, 0); }
	public UNCOMPRESS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UNCOMPRESS, 0); }
	public UNCOMPRESSED_LENGTH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UNCOMPRESSED_LENGTH, 0); }
	public UNHEX(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UNHEX, 0); }
	public UNIX_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UNIX_TIMESTAMP, 0); }
	public UPDATEXML(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UPDATEXML, 0); }
	public UPPER(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UPPER, 0); }
	public UUID(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UUID, 0); }
	public UUID_SHORT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.UUID_SHORT, 0); }
	public VALIDATE_PASSWORD_STRENGTH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VALIDATE_PASSWORD_STRENGTH, 0); }
	public VERSION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VERSION, 0); }
	public VISIBLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.VISIBLE, 0); }
	public WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0); }
	public WEEK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WEEK, 0); }
	public WEEKDAY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WEEKDAY, 0); }
	public WEEKOFYEAR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WEEKOFYEAR, 0); }
	public WEIGHT_STRING(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WEIGHT_STRING, 0); }
	public WITHIN(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.WITHIN, 0); }
	public YEAR(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.YEAR, 0); }
	public YEARWEEK(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.YEARWEEK, 0); }
	public Y_FUNCTION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.Y_FUNCTION, 0); }
	public X_FUNCTION(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.X_FUNCTION, 0); }
	public JSON_ARRAY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JSON_ARRAY, 0); }
	public JSON_OBJECT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JSON_OBJECT, 0); }
	public JSON_QUOTE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JSON_QUOTE, 0); }
	public JSON_CONTAINS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JSON_CONTAINS, 0); }
	public JSON_CONTAINS_PATH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JSON_CONTAINS_PATH, 0); }
	public JSON_EXTRACT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JSON_EXTRACT, 0); }
	public JSON_KEYS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JSON_KEYS, 0); }
	public JSON_OVERLAPS(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JSON_OVERLAPS, 0); }
	public JSON_SEARCH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JSON_SEARCH, 0); }
	public JSON_VALUE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JSON_VALUE, 0); }
	public JSON_ARRAY_APPEND(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JSON_ARRAY_APPEND, 0); }
	public JSON_ARRAY_INSERT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JSON_ARRAY_INSERT, 0); }
	public JSON_INSERT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JSON_INSERT, 0); }
	public JSON_MERGE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JSON_MERGE, 0); }
	public JSON_MERGE_PATCH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JSON_MERGE_PATCH, 0); }
	public JSON_MERGE_PRESERVE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JSON_MERGE_PRESERVE, 0); }
	public JSON_REMOVE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JSON_REMOVE, 0); }
	public JSON_REPLACE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JSON_REPLACE, 0); }
	public JSON_SET(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JSON_SET, 0); }
	public JSON_UNQUOTE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JSON_UNQUOTE, 0); }
	public JSON_DEPTH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JSON_DEPTH, 0); }
	public JSON_LENGTH(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JSON_LENGTH, 0); }
	public JSON_TYPE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JSON_TYPE, 0); }
	public JSON_VALID(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JSON_VALID, 0); }
	public JSON_TABLE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JSON_TABLE, 0); }
	public JSON_SCHEMA_VALID(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JSON_SCHEMA_VALID, 0); }
	public JSON_SCHEMA_VALIDATION_REPORT(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT, 0); }
	public JSON_PRETTY(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JSON_PRETTY, 0); }
	public JSON_STORAGE_FREE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JSON_STORAGE_FREE, 0); }
	public JSON_STORAGE_SIZE(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JSON_STORAGE_SIZE, 0); }
	public JSON_ARRAYAGG(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JSON_ARRAYAGG, 0); }
	public JSON_OBJECTAGG(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.JSON_OBJECTAGG, 0); }
	public LASTVAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.LASTVAL, 0); }
	public NEXTVAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.NEXTVAL, 0); }
	public SETVAL(): TerminalNode | undefined { return this.tryGetToken(MariaDBParser.SETVAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return MariaDBParser.RULE_functionNameBase; }
	// @Override
	public enterRule(listener: MariaDBParserListener): void {
		if (listener.enterFunctionNameBase) {
			listener.enterFunctionNameBase(this);
		}
	}
	// @Override
	public exitRule(listener: MariaDBParserListener): void {
		if (listener.exitFunctionNameBase) {
			listener.exitFunctionNameBase(this);
		}
	}
}


